using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web.UI;
using Ext.Net;
using Ext.Net.MVC;
using SoluccionSalud.Entidades.Entidades;
using SoluccionSalud.RepositoryReport;
using Ext.Net.Utilities;


namespace AppSaludMVC.Controllers
{
    using SoluccionSalud.Service._FormularioNuevo;

    using SvcAuditoriaImpresion = SoluccionSalud.Service.AuditoriaImpresionService.SvcAuditoriaImpresion;
    using SvcDiccionario = SoluccionSalud.Service.DiccionarioService.SvcDiccionario;
    using SvcSeguridad = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto;
    using SvcSeguridadConcepto = SoluccionSalud.Service.SeguridadConceptoService.SvcSeguridadConcepto;
    using SvcPersonaMast = SoluccionSalud.Service.PersonaMastService.SvcPersonaMast;
    using SvcEnfermedadActual = SoluccionSalud.Service.Formularios.SvcEnfermedadActual;
    using SvcMiscelaneos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos;
    using SvcFormularios = SoluccionSalud.Service.FormulariosService.SvcFormularios;
    using SvcFormularioAnamnesisAP = SoluccionSalud.Service.FormulariosService.SvcFormularioAnamnesisAP;
    using SvcAnamnesisEAService = SoluccionSalud.Service.FormulariosService.SvcAnamnesisEAService;
    using SvcMiscelaneoFormularioCrono = SoluccionSalud.Service.MiscelaneoFormularioService.SvcMiscelaneoFormularioCrono;
    using SvcRegistroAcompanante = SoluccionSalud.Service.RegistrarAcompananteService.SvcRegistroAcompanante;
    using SvcDiagnosticoService = SoluccionSalud.Service.FormulariosService.SvcDiagnosticoService;
    using SvcExamenFisicoTriajeService = SoluccionSalud.Service.FormulariosService.SvcExamenFisicoTriajeService;
    using SvcAnamnesisAFService = SoluccionSalud.Service.FormulariosService.SvcAnamnesisAFService;
    using SvcProblemasService = SoluccionSalud.Service.FormulariosService.SvcProblemasService;
    using SvcExamenSolicitadoService = SoluccionSalud.Service.FormulariosService.SvcExamenSolicitadoService;
    using SvcMedicamentoService = SoluccionSalud.Service.FormulariosService.SvcMedicamentoService;
    using SvcProximaAtencionService = SoluccionSalud.Service.FormulariosService.SvcProximaAtencionService;
    using SvcDescansoMedicoService = SoluccionSalud.Service.FormulariosService.SvcDescansoMedicoService;
    using SvcVw_Personapaciente = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente;
    using SvcV_EpisodioAtenciones = SoluccionSalud.Service.V_EpisodioAtencionesService.SvcV_EpisodioAtenciones;
    //using SvcCuidadoPreventivo = SoluccionSalud.Service.CuidadoPreventivoService.SvcCuidadoPreventivo;
    using SvcSeguimientoRiesgoDetalle = SoluccionSalud.Service.SeguimientoRiesgoDetalleService.SvcSeguimientoRiesgoDetalle;
    using SvcSeguimientoRiesgo = SoluccionSalud.Service.SeguimientoRiesgoService.SvcSeguimientoRiesgo;
    using SvcFavoritoDetalle = SoluccionSalud.Service.FavoritoDetalleService.SvcFavoritoDetalle;
    using SvcFavoritoNumero = SoluccionSalud.Service.FavoritoNumeroService.SvcFavoritoNumero;
    using svcSS_HC_KardexEnfermeria = SoluccionSalud.Service.KardexEnfermeria.svcSS_HC_KardexEnfermeria;
    using SvcOrdAtenPreexistencia = SoluccionSalud.Service.OrdAtenPreexistenciaService.SvcOrdAtenPreexistencia;
    using SvcVw_Favoritos = SoluccionSalud.Service.WH_FavoritosService.SvcVW_FavoritosService;
    using SvcFavoritoCodigoId = SoluccionSalud.Service.FavoritoCodigoService.SvcFavoritoCodigo;
    using SvcEpisodioAtencion = SoluccionSalud.Service.EpisodioAtencionService.SvcEpisodioAtencion;
    using SvcProcedimientoEjecucion = SoluccionSalud.Service.ProcedimientoEjecucionService.SvcProcedimientoEjecucion;
    using SvcProcedimientoInforme = SoluccionSalud.Service.ProcedimientoInformeService.SvcProcedimientoInforme;
    using SvcParametro = SoluccionSalud.Service.ParametroService.SvcParametro;
    using SvcEpisodioClinico = SoluccionSalud.Service.EpisodioClinicoService.SvcEpisodioClinico;
    using SvcVw_AtencionPaciente = SoluccionSalud.Service.VW_ATENCIONPACIENTEService.SvcVw_AtencionPaciente;
    using SvcVWEspecialidadMedico = SoluccionSalud.Service.VWEspecialidadMedicoService.SvcVWEspecialidadMedico;
    using SvcSS_CC_Horario = SoluccionSalud.Service.HorarioService.SvcSS_CC_Horario;
    using SvcDiagnostico = SoluccionSalud.Service.DiagnosticoService.SvcDiagnostico;
    using SvcCategoriaUnidadServicio = SoluccionSalud.Service.CategoriaUnidadServicioService.SvcCategoriaUnidadServicio;

    using SvcEvolucionObjetivaService = SoluccionSalud.Service.FormulariosService.SvcEvolucionObjetivaService;
    using ServiciosRules = SoluccionSalud.Service.AccionesServiceRules.ServiciosRules;
    using SvcNotificacionDetalle = SoluccionSalud.Service.NotificacionDetalleService.SvcNotificacionDetalle;
    using SvcNanda = SoluccionSalud.Service.NandaService.SvcNanda;
    using SvcDiagnosticoFE = SoluccionSalud.Service._FormularioNuevo.SvcDiagnosticoFE;
    using SvcDiagnosticoPAE = SoluccionSalud.Service.PAEDiagnostico.SvcDiagnosticoPAE;
    using SvcFactorRelacionadoNanda = SoluccionSalud.Service.FactorRelacionadoNandaService.SvcFactorRelacionadoNanda;
    using SvcFactorRelacionado = SoluccionSalud.Service.FactorRelacionadoService.SvcFactorRelacionado;
    using SvcNicActividad = SoluccionSalud.Service.NicActividadService.SvcNicActividad;
    using SvcIndicador = SoluccionSalud.Service.IndicadorService.SvcIndicador;

    using svccombo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico;

    //using SvcMedicamentoFE = SoluccionSalud.Service._FormularioNuevo.SvcMedicamentoFE;

    using SvcSG_Agente = SoluccionSalud.Service.SG_AgenteService.SvcSG_Agente;
    using svcVw_AtencionPacienteMedicamento = SoluccionSalud.Service.VW_ATENCIONPACIENTEMEDICAMENTOS.svcVw_AtencionPacienteMedicamento;

    using SvcFavorito = SoluccionSalud.Service.FavoritoService.Svcfavorito;
    using SvcFavoritoCodigo = SoluccionSalud.Service.FavoritoCodigoService.SvcFavoritoCodigo;
    using SvcFormato = SoluccionSalud.Service.FormatoService.SvcFormato;
    using SvcTabla = SoluccionSalud.Service.TablaService.SvcTabla;
    using Svc_ProcedimientoInformeSPRING = SoluccionSalud.Service.ProcedimientoSpring.Svc_ProcedimientoInformeSPRING;
    using SvcNocNanda = SoluccionSalud.Service.NocNandaService.SvcNocNanda;
    using SvcNoc = SoluccionSalud.Service.NocService.SvcNoc;
    using SvcNocNic = SoluccionSalud.Service.NocNicService.SvcNocNic;
    using SvcNocIndicador = SoluccionSalud.Service.NocIndicadorService.SvcNocIndicador;
    using SvcPreOperatorio1 = SoluccionSalud.Service._FormularioNuevo.SvcPreOperatorio1Service;
    using SvcAuditoria = SoluccionSalud.Service.AuditoriaService.SvcAuditoria;

    using AppSaludMVC.Models;
    using SoluccionSalud.Service.FormulariosService;
    using System.Collections;
    using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
    using Microsoft.Practices.EnterpriseLibrary.Logging;
    using System.Data.SqlClient;
    using SoluccionSalud.Componentes;
    using System.Web;
    using SoluccionSalud.Service.AccionesServiceRules;

    using HtmlX = SoluccionSalud.Entidades.Entidades.SS_HC_BANDEJA_NOTIFI_DETALLE;
    using System.Data;
    using System.Configuration;
    using System.Threading;
    using SoluccionSalud.Service.SeguridadAutorizacionService;
    using Newtonsoft.Json;
    using Serilog;
    using Apache.NMS.ActiveMQ.Threads;
    using System.Net.Http;
    using System.Net.Http.Formatting;
    using SoluccionSalud.Service.SeguridadAutorizacionService;



    public class HClinicaControllerSup : ControllerGeneral
    {

        public HClinicaControllerSup()
        {

        }

        public System.Web.Mvc.ActionResult Index()
        {
            Log.Information("HClinicaControllerSup - Index - Entrar");
            setVariablesTempSession_Default(UTILES_MENSAJES.PATH_MAIN_HCLINICA);
            ////OBTENER DATOS DE LA PERSONA-MEDICO-USUARIO
            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            //OBS:ADD de seguridad
            //obj.CentroCostos = ENTITY_GLOBAL.Instance.UnidadReplicacion; //AUX ..
            //*obj.CodigoCargo = (int)ENTITY_GLOBAL.Instance.PacienteID;

            ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Clear();
            ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Clear();

            if (ENTITY_GLOBAL.Instance.OBJETOS_F5 == null)
            {
                var localEntity = new SS_HC_Anamnesis_AFAM_CAB_FE();
                localEntity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                if (!string.IsNullOrEmpty(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString()))
                {
                    localEntity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                }
                else
                {
                    localEntity.EpisodioClinico = 0;
                }               
             
                localEntity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                localEntity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                localEntity.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                ENTITY_GLOBAL.Instance.OBJETOS_F5 = localEntity;
            }
            else
            {
                if (ENTITY_GLOBAL.Instance.COD_BANDEJA != "TRIAJE")
                {
                    ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.OBJETOS_F5.IdPaciente;
                    ENTITY_GLOBAL.Instance.EpisodioClinico = ENTITY_GLOBAL.Instance.OBJETOS_F5.EpisodioClinico;
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = ENTITY_GLOBAL.Instance.OBJETOS_F5.IdEpisodioAtencion;
                    ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.OBJETOS_F5.UnidadReplicacion;
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.OBJETOS_F5.Accion;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.PacienteID = (int)ENTITY_GLOBAL.Instance.OBJETOS_F5.IdPaciente;
                    ENTITY_GLOBAL.Instance.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.OBJETOS_F5.EpisodioClinico;
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = (long)ENTITY_GLOBAL.Instance.OBJETOS_F5.IdEpisodioAtencion;
                    ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.OBJETOS_F5.UnidadReplicacion;
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.OBJETOS_F5.Accion;
                }
            }


            int ini = 0;
            if (Session["TIPOATENCION_ACTUAL"] != null)
            {
                ini = (int)Session["TIPOATENCION_ACTUAL"];
            }
            int fin = 0;
            obj.AFE = ENTITY_GLOBAL.Instance.Establecimiento;//Para obtener Nombre de Estab. Seleccionado
            obj.Persona = Convert.ToInt32(ENTITY_GLOBAL.Instance.CODPERSONA);
            obj.ACCION = "LISTARPORID";


            lista = SvcVw_Personapaciente.listarVwPersonapaciente(obj, ini, fin);
            if (lista.Count > 0 && ENTITY_GLOBAL.Instance.COD_BANDEJA != "TRIAJE")
            {
                foreach (var result in lista)
                {
                    obj = result;
                }
                /**OBS  en el caso hubiera más de un registro, podría ser a causa de diferentes perfiles permitidos.
                       revisar stored: SP_VW_PERSONAPACIENTE_LISTAR */
                ENTITY_GLOBAL.Instance.OPCION_PADRE = lista[0].Servicio;   //OBS: seguridad            
                ENTITY_GLOBAL.Instance.PERFILACTUAL = lista[0].Observacion;   //OBS: seguridad   
                if (ENTITY_GLOBAL.Instance.INDICADOR_EMER == "MED_EMERGENCIA")
                {
                    ENTITY_GLOBAL.Instance.OPCION_PADRE = "3130";   //OBS: seguridad            
                    ENTITY_GLOBAL.Instance.PERFILACTUAL = "EMERGENCIA";   //OBS: seguridad   
                }

                setCodigoFormatosPaginas("GENERAL", lista[0].CodigoPlan);  //OBS: PAG. DEFAULT            

                Session["TIPOTRABAJADOR_ACTUAL"] = lista[0].TipoTrabajador;
                Session["NOMBRE_USUARIO_MEDICO"] = lista[0].NombreCompleto;
                //}
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 2;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION2 = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                //           
            }
            return View(obj);
        }

        public System.Web.Mvc.ActionResult ReLoadVisorCopiado(string Accion, string nombrePaciente,
            string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - ReLoadVisorCopiado - Entrar");


            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
            {
                string containertemp = (string)Session["containerIdTemp"];
                string txttemp = (string)Session["textTemp"];

                return LoadFormatos(containertemp, txttemp);
                //return showMensajeNotify("Mensaje", "INFO", "INFO");
            }
            else
            {
                return showMensajeNotify("Mensaje", "INFO", "INFO");
            }

            eventoPostFormulario(false, "");


            return this.Direct();

        }
        public System.Web.Mvc.ActionResult LoadBandejaEntrada()
        {
            Log.Information("HClinicaControllerSup - LoadBandejaEntrada - Entrar");

            return this.RedirectToAction("Index", "BandejaMedico");
        }
        public PartialViewResult VisorFormularios(string unidadReplicacion, Nullable<int> paciente, Nullable<int> Clinico, Nullable<long> Atencion, string Form, string Accion)
        {
            Log.Information("HClinicaControllerSup - VisorFormularios - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new SEGURIDADCONCEPTO();
            string estado = "PanelCentralBlanco";
            if (Clinico <= 0)
            {
                X.Msg.Alert("Mensage", "Seleccione registro episodio", new MessageBoxButtonsConfig
                {
                    Yes = new MessageBoxButtonConfig
                    {
                        //Handler = "CompanyX.MessageBox_Basic.DoYes()",
                        Text = "Aceptar"
                    }
                }).Show();
            }
            else
            {
                /*SelectedRowCollection src = JSON.Deserialize<SelectedRowCollection>(selection);
                List<int> omitIds = new List<int>();
                foreach (SelectedRow row in src)
                {
                    omitIds.Add(Convert.ToInt32(row.RecordID));
                }*/
                //ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
                /**CONTROL DE CAMPOS FILROS DE LA CRONOLOG SELECCIONDA**/
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
                ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
                ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
                ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                /************************************/
                objMiscl.ACCION = "VISTA_FORM";
                objMiscl.AplicacionCodigo = "CG";
                objMiscl.ValorCodigo1 = Accion.Trim();
                objMiscl.ValorCodigo2 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                objMiscl.CodigoTabla = Accion.Trim();
                var resulObjMiscl = new MA_MiscelaneosDetalle();
                var resulMiscelaneosTitulo = SvcMiscelaneos.GetFormTitulo(objMiscl);
                if (resulMiscelaneosTitulo.Count > 0)
                {
                    estado = "VisorFormularios";
                    model.CONCEPTO = resulMiscelaneosTitulo[0].CodigoTabla.Trim() + "_View";
                    model.DESCRIPCION = resulMiscelaneosTitulo[0].DescripcionLocal;
                    /*
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                    ENTITY_GLOBAL.Instance.VistaPacienteID = ENTITY_GLOBAL.Instance.PacienteID;
                    ENTITY_GLOBAL.Instance.VistaEpisodioClinico = Clinico;
                    ENTITY_GLOBAL.Instance.VistaEpisodioAtencion = Atencion;
                     * */

                    ENTITY_GLOBAL.Instance.UnidadReplicacion = unidadReplicacion;
                    ENTITY_GLOBAL.Instance.PacienteID = paciente;
                    ENTITY_GLOBAL.Instance.EpisodioClinico = Clinico;
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";

                    ENTITY_GLOBAL.Instance.CONCEPTO = resulMiscelaneosTitulo[0].CodigoTabla;

                }

            }

            return crearWindowRegistro(estado, model, "", "South1");

            /*
            return new PartialViewResult
            {
                ViewName = estado,
                ContainerId = "South1",
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };*/
        }

        /***/
        public System.Web.Mvc.ActionResult VisorHCEReportes(int idPaciente, int idOrdenAtencion, string codFormato, string codigoOA, string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VisorHCEReportes - Entrar");

            if (ENTITY_GLOBAL.Instance.INDICA_FORM == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Bitacora", "Advertencia", "WARNING");
            }
            if (ENTITY_GLOBAL.Instance.INDICA_FORM == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Bitacora", "Advertencia", "WARNING");
            }
            else if (ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Historial", "Advertencia", "WARNING");
            }

            var Listar = new List<PERSONAMAST>();
            var LocalEnty = new PERSONAMAST();
            var objDatos = new PERSONAMAST();

            if (Session["Ssesion_ListarPaciiente"] != null)
            {
                Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
            }
            else
            {
                LocalEnty.ACCION = "LISTARPACIENTE";
                LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
            }


            if (Listar.Count > 0)
            {
                foreach (PERSONAMAST objPersona in Listar)
                {
                    objDatos = objPersona;
                    objDatos.NombreCompleto = objDatos.NombreCompleto.Replace("'", string.Empty);
                    ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                }
            }

            var model = ENTITY_GLOBAL.Instance;
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompletoPaciente = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            string host = System.Web.HttpContext.Current.Request.Url.Host;
            //string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
            string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
            string path = System.Web.HttpContext.Current.Request.ApplicationPath;
            /**MANDAR EN UN CAMPO SI ES NECESARIO*/
            //model.UsuarioModificacion = hostPort + path;
            return crearWindowRegistro(Form, model, "");
        }

        public System.Web.Mvc.ActionResult VisorHCEAlergiasReportes(int idPaciente, int idOrdenAtencion, string codFormato, string codigoOA, string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = new VW_ATENCIONPACIENTE_GENERAL();

            if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
            {
                vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
            }



            //////////////////////

            ////////////////////////
            var Listar = new List<PERSONAMAST>();
            var LocalEnty = new PERSONAMAST();
            var objDatos = new PERSONAMAST();

            if (Session["Ssesion_ListarPaciiente"] != null)
            {
                Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
            }
            else
            {
                LocalEnty.ACCION = "LISTARPACIENTE";
                LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
            }

            if (Listar.Count > 0)
            {
                foreach (PERSONAMAST objPersona in Listar)
                {
                    objDatos = objPersona;
                    ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                }
            }


            ////TIPO PACIENTE
            objDatos.RutaFirma = vistaGenSelec.TipoPacienteNombre; //AUX
            ////OBTENER ASEGURADORA
            var detalle = new MA_MiscelaneosDetalle();
            detalle.ACCION = "INFOPACIENTE";
            detalle.ValorCodigo1 = "" + ENTITY_GLOBAL.Instance.PacienteID;
            detalle.ValorCodigo1 = "" + vistaGenSelec.IdPaciente;
            detalle.ValorCodigo2 = "" + vistaGenSelec.IdEmpresaAseguradora;
            var ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, 0, 0);

            if (ObjLista.Count > 0)
            {
                objDatos.DireccionReferencia = ObjLista[0].DescripcionLocal; //AUX
            }
            //////////////////////////////////////////////
            objDatos.Direccion = "";
            objDatos.DireccionEmergencia = "";



            /////////////Obtener Alergias///////////////////



            var objAnam = new MA_MiscelaneosDetalle();

            var listaAnam = new List<MA_MiscelaneosDetalle>();
            objAnam.ACCION = "PANELALERGIA";
            objAnam.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            objAnam.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            objAnam.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            objAnam.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
            listaAnam = SvcMiscelaneos.GetUpListadoServicios(objAnam).ToList();
            if (listaAnam.Count > 0)
            {

                string medAux = "";

                string alimAux = "";

                string contactoAux = "";

                string ambientalAux = "";

                foreach (MA_MiscelaneosDetalle obj in listaAnam)
                {

                    switch
                        (obj.ValorEntero1)
                    {
                        case 1:
                            alimAux = alimAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 2:
                            medAux = medAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 3:
                            ambientalAux = ambientalAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 4:
                            contactoAux = contactoAux + obj.ValorCodigo1 + ", ";
                            break;
                    }

                    //if (obj.ValorEntero1 == 2)
                    //{

                    //    medAux = medAux + obj.ValorCodigo1 + ", ";

                    //}

                    //if (obj.ValorEntero1 == 1)
                    //{

                    //    alimAux = alimAux + obj.ValorCodigo1 + ", ";

                    //}

                }


                if (medAux.Length > 1)
                {

                    objDatos.Direccion = medAux.Substring(0, medAux.Length - 1);

                }

                if (alimAux.Length > 1)
                {

                    objDatos.DireccionEmergencia = alimAux.Substring(0, alimAux.Length - 1);

                }
                if (contactoAux.Length > 1)
                {

                    objDatos.DireccionContacto = contactoAux.Substring(0, contactoAux.Length - 1);

                }

                if (ambientalAux.Length > 1)
                {

                    objDatos.DireccionAmbiental = ambientalAux.Substring(0, ambientalAux.Length - 1);

                }
            }
            /////////////////////////////////////////////
            objDatos.ClasePersonaCodigo = "";
            objDatos.PersonaClasificacion = "";

            detalle = new MA_MiscelaneosDetalle();
            detalle.ACCION = "TRATACTIVO";
            int paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            paciente = (int)vistaGenSelec.IdPaciente;

            ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, paciente, 0);
            string tratactivo = "";
            foreach (MA_MiscelaneosDetalle objModelx in ObjLista)
            {
                if (tratactivo.Length > 2) tratactivo = tratactivo + ", ";
                tratactivo = tratactivo + (objModelx.DescripcionLocal + "").Trim() + " (" + objModelx.ValorCodigo1.Trim() + " - " + objModelx.ValorCodigo1.Trim() + ")";
            }
            objDatos.CorrelativoSCTR = tratactivo;

            SS_AD_OrdenAtencionPreexistencia objFormato = new SS_AD_OrdenAtencionPreexistencia();
            objFormato.accion = "LISTAR";
            objFormato.IdDiagnostico = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objFormato.IdDiagnostico = (int)vistaGenSelec.IdPaciente;
            var ListarPreEx = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFormato, 0, 0);
            string Preexit = "";
            foreach (SS_AD_OrdenAtencionPreexistencia objModelxx in ListarPreEx)
            {
                if (Preexit.Length > 2) Preexit = Preexit + ", ";
                Preexit = Preexit + (objModelxx.NombreDiagnostico + "").Trim() + " (" + (objModelxx.CodigoDiagnostico + "").Trim() + ")";
            }
            objDatos.CuentaMonedaLocal_tmp = Preexit;
            /////
            objDatos.CodigoBarras = ENTITY_GLOBAL.Instance.CodigoOA; //AUX PARA OA

            ////////////////

            return crearWindowRegistro(Form, objDatos, "Alergias");
        }
        public System.Web.Mvc.ActionResult VisorHCEReportesclick(int idPaciente, int idOrdenAtencion, string codFormato, string codigoOA, string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VisorHCEReportesclick - Entrar");

            if (ENTITY_GLOBAL.Instance.INDICA_FORM == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Historial", "Advertencia", "WARNING");
            }

            if (ENTITY_GLOBAL.Instance.INDICA_FORM == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Historial", "Advertencia", "WARNING");
            }
            else if (ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG == 1 && ENTITY_GLOBAL.Instance.bitacora == 3 && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                return showMensajeBox("Guardar o Cancelar Los Cambios Para Ver Historial", "Advertencia", "WARNING");
            }

            var Listar = new List<PERSONAMAST>();
            var LocalEnty = new PERSONAMAST();
            var objDatos = new PERSONAMAST();
            if (Session["Ssesion_ListarPaciiente"] != null)
            {
                Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
            }
            else
            {
                LocalEnty.ACCION = "LISTARPACIENTE";
                LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
            }
            if (Listar.Count > 0)
            {
                foreach (PERSONAMAST objPersona in Listar)
                {
                    objDatos = objPersona;
                    objDatos.NombreCompleto = objDatos.NombreCompleto.Replace("'", string.Empty);
                    ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                }
            }

            var model = ENTITY_GLOBAL.Instance;
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompletoPaciente = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            string host = System.Web.HttpContext.Current.Request.Url.Host;
            //string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
            string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
            string path = System.Web.HttpContext.Current.Request.ApplicationPath;
            /**MANDAR EN UN CAMPO SI ES NECESARIO*/
            //model.UsuarioModificacion = hostPort + path;
            return crearWindowRegistro(Form, model, "");
        }

        public System.Web.Mvc.ActionResult VisorHCEReportes2(int idPaciente, int idOrdenAtencion,
                   string codFormato, string codigoOA, string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VisorHCEReportes2 - Entrar");

            var Listar = new List<PERSONAMAST>();
            var LocalEnty = new PERSONAMAST();
            var objDatos = new PERSONAMAST();

            if (Session["Ssesion_ListarPaciiente"] != null)
            {
                Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
            }
            else
            {
                LocalEnty.ACCION = "LISTARPACIENTE";
                LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
            }
            if (Listar.Count > 0)
            {
                foreach (PERSONAMAST objPersona in Listar)
                {
                    objDatos = objPersona;
                    objDatos.NombreCompleto = objDatos.NombreCompleto.Replace("'", string.Empty);
                    ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                }
            }

            var model = ENTITY_GLOBAL.Instance;
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompletoPaciente = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            string host = System.Web.HttpContext.Current.Request.Url.Host;
            //string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
            string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
            string path = System.Web.HttpContext.Current.Request.ApplicationPath;
            /**MANDAR EN UN CAMPO SI ES NECESARIO*/
            //model.UsuarioModificacion = hostPort + path;            
            return crearWindowRegistro(Form, model, "");
        }

        public System.Web.Mvc.ActionResult eventoLoadReporteTest(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - eventoLoadReporteTest - Entrar");

            var model = new SS_HC_EpisodioAtenciones();
            ComponentLoader xCompo = X.GetCmp<Ext.Net.ComponentLoader>("compLoaderReporte");
            xCompo.Url = "http://localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I";
            xCompo.LoadContent();
            return this.Direct();
            /*
            return new PartialViewResult
            {
                ViewName = "http://localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };*/
        }

        /***/
        public System.Web.Mvc.ActionResult eventoLoadReporte(string containerId, string text)
        {
            try
            {
                Log.Information("HClinicaControllerSup - eventoLoadReporte - Entrar");

                List<ENTITY_MENSAJES> contenidoReport = new List<ENTITY_MENSAJES>();
                ENTITY_MENSAJES objInfo = new ENTITY_MENSAJES();
                //String UrlFormato = "PanelCentralBlanco";
                String accionReporte = null;
                String UrlPathReporte = "";
                var objVistaSeguridad = new SS_CHE_VistaSeguridad();
                objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                objVistaSeguridad.Accion = "DATOSFORMULARIO";
                if (text.Trim() != "root")
                {
                    objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
                    var model = new SS_HC_EpisodioAtenciones();
                    model.IdOpcion = text.Trim();
                    var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                    if (resulListado.Count > 0)
                    {
                        switch (resulListado[0].TipoFormato)
                        {
                            case 2:
                                //FIJO
                                //UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                                model.CONCEPTO = resulListado[0].CodigoFormato.Trim();
                                objInfo.TIPOMSG = "FFIJO";
                                accionReporte = model.CONCEPTO;
                                //accionReporte = "CCEP0003";

                                /*
                                if ("CCEP0003" == model.CONCEPTO)
                                {
                                     //ANAMNESIS EA
                                    accionReporte = "CountryListReport";
                                }
                                else
                                {
                                    accionReporte = "CountryListReport";
                                }*/
                                break;
                            case 3:
                                //DINÁMICO
                                string searchForThis = "weasis";
                                objInfo.TIPOMSG = "FDINAM";
                                break;
                            default:
                                if (resulListado[0].CodigoFormato != null)
                                {
                                    model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                                }
                                //UrlFormato = "PanelCentralBlanco";
                                break;

                        }
                    }
                    if (accionReporte != null)
                    {
                        string host = System.Web.HttpContext.Current.Request.Url.Host;
                        string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                        //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                        string path = System.Web.HttpContext.Current.Request.ApplicationPath;

                        /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                        UrlPathReporte = hostPort + path;

                        objInfo.IDMSG = 1;
                        objInfo.TITULO = UrlPathReporte;
                        objInfo.DESCRIPCION = accionReporte;
                        /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                        //model.UsuarioModificacion = hostPort + path; 
                        contenidoReport.Add(objInfo);

                        return this.Store(contenidoReport);
                    }
                    else
                    {
                        return this.Direct();
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
            }
            return this.Direct();
            /*
            return new PartialViewResult
            {
                ViewName = UrlFormato,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };*/
        }


        /***/
        public PartialViewResult VisorHCExternoManuales(int idPaciente, int idOrdenAtencion, string codFormato, string codigoOA, string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VisorHCExternoManuales - Entrar");
            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //model.IdOrdenAtencion = idOrdenAtencion;
            //model.UsuarioCreacion = codFormato; //FORMATO
            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            string host = System.Web.HttpContext.Current.Request.Url.Host;
            //string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
            string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
            string path = System.Web.HttpContext.Current.Request.ApplicationPath;

            model.UsuarioModificacion = hostPort + path;

            string estado = "PanelCentralBlanco";
            return crearWindowRegistro(Form, model, "", FormContainer);

        }
        public StoreResult ArbolDocHCEManuales(string node, string Accion,
            string formato, string codigoOA, string idPaciente, string idOrdenAtencion,
            string tipoAtencion, string especialidad, string medico, string unidadServ, string diagnostico
            )
        {
            Log.Information("HClinicaControllerSup - ArbolDocHCEManuales - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            MA_MiscelaneosDetalle LocalEnty = new MA_MiscelaneosDetalle();
            List<MA_MiscelaneosDetalle> Listar = new List<MA_MiscelaneosDetalle>();
            try
            {
                int tipo = 0;
                string id = "0";
                string segPag = "0";
                string[] compoNodoId = node.Split('|');
                if (compoNodoId.Length > 2)
                {
                    tipo = Convert.ToInt32(compoNodoId[0]);
                    id = compoNodoId[1];
                    segPag = compoNodoId[2];
                }
                if (tipo == 1)
                {
                    //LocalEnty.ValorCodigo2 = idOrdenAtencion;
                    //LocalEnty.ValorCodigo3 = idPaciente;
                    //////////
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.ValorCodigo2 = idPaciente;
                    LocalEnty.ACCION = "VIRTDOCUMENT";
                    LocalEnty.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                    LocalEnty.ValorNumerico = Convert.ToDouble(id);
                    //////////
                    LocalEnty.ValorEntero1 = getValorFiltroInt(tipoAtencion);
                    LocalEnty.ValorEntero2 = getValorFiltroInt(especialidad);
                    LocalEnty.ValorEntero3 = getValorFiltroInt(medico);
                    LocalEnty.ValorEntero4 = getValorFiltroInt(unidadServ);
                    LocalEnty.ValorEntero5 = getValorFiltroInt(diagnostico);
                    //////////
                    Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, 0, 0);
                }
                else if (tipo == 2)
                {
                    LocalEnty.ValorNumerico = 0;
                }
                if (Listar != null)
                {
                    foreach (var resulenti in Listar)
                    {
                        Node asyncNode = new Node();
                        ENTITY_GLOBAL.Instance.PacienteDatos1 = resulenti.DescripcionExtranjera;
                        // SiteMapNode siteNode = SiteMap.RootNode;
                        //  SiteMapNode smNode = new
                        //           SiteMapNode(siteNode.Provider, "Key", "~/", "Default");
                        // siteNode.ChildNodes.Add(smNode);
                        String url = resulenti.DescripcionExtranjera + resulenti.ValorCodigo1;
                        //url = url.Replace("\\", "/");
                        asyncNode.Text = resulenti.DescripcionLocal;
                        asyncNode.NodeID = "" + resulenti.ValorEntero3 + "|" + //Tipo
                            resulenti.ValorEntero4 + "|" + //AUX COD REF
                            resulenti.ValorEntero2 + "|" +  //PÁG
                            url; //URL
                        asyncNode.Leaf = resulenti.ValorEntero3 > 1 ? true : false;  //INDICA SI ES CARPETA o NO
                        if (resulenti.ValorNumerico != null)
                        {
                            if (resulenti.ValorEntero3 > 1)
                            {
                                if (resulenti.ValorNumerico == 2)
                                    asyncNode.Icon = Icon.PageGreen;
                                else
                                    asyncNode.Icon = Icon.PageRed;
                            }
                        }
                        nodes.Add(asyncNode);
                    }
                }
                //OBS:ADD de seguridad
                return this.Store(nodes);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoEsp_DocHC(String MODO, int persona, String cmp, Nullable<int> especialidad, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoEsp_DocHC - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("txtFiltroIdMedico_HCDoc");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("txtFiltroDescMedico_HCDoc");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionDiagnostico_DocHC(String MODO, int id, String cod, String descripcion, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionDiagnostico_DocHC - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfFiltroIdDiagnostico_HCDoc");
            if (id != null && id != 0) { nf.SetValue(id); }
            var tfCod = X.GetCmp<NumberField>("txtFiltroCodDiagnostico_HCDoc");
            if (cod != null && cod != "") { tfCod.SetValue(cod); }

            var tfNom = X.GetCmp<TextField>("txtFiltroDescDiagnostico_HCDoc");
            if (descripcion != null && descripcion != "") { tfNom.SetValue(descripcion); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionCatUnidadServicio_DocHC(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionCatUnidadServicio_DocHC - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("nfIdUnidadServicio_HCDoc");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfUnidServ_HCDoc");
            txt.SetValue(descripcion);
            return this.Direct();
        }

        public PartialViewResult loadDocHCExternoManuales(string Accion, string nombre, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - loadDocHCExternoManuales - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            model.NombreCompleto = nombre;
            model.Accion = Accion;
            string estado = "PanelCentralBlanco";

            return new PartialViewResult
            {
                ViewName = Form,
                ContainerId = FormContainer,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }

        public System.Web.Mvc.ActionResult visorFormProcesos(String url, Object objModel, String titulo)
        {
            Log.Information("HClinicaControllerSup - visorFormProcesos - Entrar");

            return new Ext.Net.MVC.PartialViewResult
            {
                ViewName = url
                //  Model = objModel
            };
        }

        public System.Web.Mvc.ActionResult AsignacionMedico(String MODO, int idPersona)
        {
            Log.Information("HClinicaControllerSup - AsignacionMedico - Entrar");


            var episodio = ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
            if (episodio == null)
            {
                return showMensajeBox("Debe Asignar un Episodio." + "",
                  "Advertencia", "WARNING");

            }
            var Listar = new List<VW_PERSONAPACIENTE>();

            VW_PERSONAPACIENTE objPersona = new VW_PERSONAPACIENTE();


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("PacienteRegistroTriaje", objPersona, "");

        }

        #region ActioResult_BuscadoRegistros
        public System.Web.Mvc.ActionResult BuscadorRegistro(String MODO, String usuario)
        {
            Log.Information("HClinicaControllerSup - BuscadorRegistro - Entrar");

            //var field = X.GetCmp<TreePanel>("treeMain");
            //field.RemoveAll();
            ENTITY_GLOBAL.Instance.objModel = null;
            HC_Medicamento objAutorizac = new HC_Medicamento();
            //var Listar = new List<USUARIO>();
            if (MODO == "NUEVO")
            {
                objAutorizac.Accion = "NUEVO";
            }
            objAutorizac.Accion = MODO;

            //objPefilUsuario.PERFIL = objUsuario.USUARIO1;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);

            objAutorizac.Accion = MODO;


            return NewPageWindows("Buscadores/BuscarMedicamento_View", objAutorizac, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        /*********************************************************************************/
        /*********************************************************************************/
        /**FORMULARIOS I FASE*/
        /*********************************************************************************/

        public System.Web.Mvc.ActionResult Familias(string Linea, string Familia, string Accion)
        {
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(Linea, Familia, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult UnidadMedidas(string Linea, string Familia, string SubFamilia, string Accion)
        {
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(Linea, Familia, SubFamilia, "", Accion));
        }

        public System.Web.Mvc.ActionResult DietasHijos(int Dieta, string Accion)
        {
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboDietatxt(Accion, Dieta));
        }


        public System.Web.Mvc.ActionResult MedicamentoListado(int start, int limit, string Linea,
           string Familia, string SubFamilia, string CodigoMedicamento, string Descripcion, string Accion)
        {
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetGrillaGenericos(Linea, Familia, SubFamilia, Descripcion, Accion));
        }

        public System.Web.Mvc.ActionResult ReturnFindMedicamento(String modo, String linea, String familia, String subFamilia,
            String descripcion, string descripLinea, string descripFamilia, String idWindow)
        {
            Log.Information("HClinicaControllerSup - ReturnFindMedicamento - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            //List<MA_MiscelaneosDetalle> ObjListarActivo;
            //ObjListarActivo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(retornos, typeof(List<MA_MiscelaneosDetalle>));
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = false;
            panel.Visible = true;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");

            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");

            txtLinea.SetValue(linea);
            txtFamilia.SetValue(familia);
            txtSubFamilia.SetValue(subFamilia);

            LineaDescripcion.SetValue(descripLinea);
            FamiliaDescripcion.SetValue(descripFamilia);
            SubFamiliaDescripcion.SetValue(descripcion);
            return this.Direct();
        }

        public class comboAlmacen
        {

            public int ID { get; set; }
            public string Codigo { get; set; }
            public string Name { get; set; }

        }

        public System.Web.Mvc.ActionResult ComboAlmacenServicios(string Usuario, string Sucursal, string IdAgente)
        {
            Log.Information("HClinicaControllerSup - ComboAlmacenServicios - Entrar");

            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.GRUPO = "";

            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SY_SeguridadAutorizaciones>();
            var ModelArray = new List<comboAlmacen>();
            var LocalEnty = new SY_SeguridadAutorizaciones();

            LocalEnty.AplicacionCodigo = "SY";
            int inicio = Convert.ToInt32(IdAgente);
            LocalEnty.Usuario = Usuario;
            LocalEnty.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
            LocalEnty.Accion = "LISTARSEGURIDADALMACENHCE";

            Listar = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicio, 0);
            Session["ALMACENESXMEDICO"] = Listar;


            foreach (var objData in Listar)
            {
                var entidad = new comboAlmacen();
                entidad.Codigo = objData.Concepto.Trim();
                entidad.Name = objData.MasterUpdateFlag.Trim();
                ModelArray.Add(entidad);
            }





            return this.Store(ModelArray);

        }

        //Agregado Rafael
        public System.Web.Mvc.ActionResult GetComboGenericoTxtDos02(string Accion)
        {
            Log.Information("HClinicaControllerSup - ComboAlmacenServicios - Entrar");

            //if (string.IsNullOrEmpty(Session["EVALUAR_FAVORITO"]))
            //{
            //    Session["EVALUAR_FAVORITO"] = "";
            //}
            if (string.IsNullOrEmpty(ENTITY_GLOBAL.Instance.flagFav))
            {
                var result = this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos("", "", "", "", Accion));

                ENTITY_GLOBAL.Instance.flagFav = "";

                return result;
            }
            else
            {
                var result = this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos("", "", "", "", ENTITY_GLOBAL.Instance.flagFav));
                ENTITY_GLOBAL.Instance.flagFav = "";
                return result;
            }


        }
        #endregion
        #region ActioResult_Prevencion_Enfermedad
        public System.Web.Mvc.ActionResult VariableSession(String Variables, string text)
        {
            Log.Information("HClinicaControllerSup - VariableSession - Entrar");

            if ((Variables != null) || (Variables.Length > 0))
            {
                List<MA_MiscelaneosDetalle> VariableGenerales = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(Variables, typeof(List<MA_MiscelaneosDetalle>));
                Session["VariableGenerales"] = VariableGenerales;
                var store = X.GetCmp<Store>("StoreDatosPrevencion");
                store.Reload();
                //var store1 = X.GetCmp<Store>("storeRiegoDetalle");
                //store1.Reload();
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEP0302_storeRiegoDetalle(
            String cuidadoPreventivo, String fechaSeg, String tipoListado,
            String idTipoCuidadoPreventivo)
        {
            Log.Information("HClinicaControllerSup - CCEP0302_storeRiegoDetalle - Entrar");

            try
            {
                var Listar = new List<SS_HC_SeguimientoRiesgo>();
                var varRiesgo = new SS_HC_SeguimientoRiesgo();
                varRiesgo.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                varRiesgo.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                varRiesgo.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                //ES UN HISTÓRICO DE TODOS LOS EPISODIOS
                //varRiesgo.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                /*if (Session["VariableGenerales"] != null)
                {
                    var Listado = (List<MA_MiscelaneosDetalle>)Session["VariableGenerales"];
                    varRiesgo.IdTipoCuidadoPreventivo = Listado[0].ValorEntero1;
                }*/
                varRiesgo.FechaSeguimiento = getValorFiltroDate(fechaSeg);

                varRiesgo.UsuarioCreacion = cuidadoPreventivo;    //AUX PARA idCuidadoPreventivo                             
                varRiesgo.IdTipoCuidadoPreventivo = getValorFiltroInt(idTipoCuidadoPreventivo);
                varRiesgo.Accion = "LISTARDETALLE";
                Listar = SvcSeguimientoRiesgo.listarSeguimientoRiesgo(varRiesgo);
                if (Listar.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult GuardaTemporalDB(String Variables, string text)
        {
            Log.Information("HClinicaControllerSup - GuardaTemporalDB - Entrar");
            var Listado = new List<SS_HC_SeguimientoRiesgoDetalle>();
            var ListadoSave = new List<SS_HC_SeguimientoRiesgoDetalle>();

            var varRiesgoDetalle = new SS_HC_SeguimientoRiesgoDetalle();
            var varRiesgo = new SS_HC_SeguimientoRiesgo();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    if ((Variables != null) || (Variables.Length > 0))
                    {
                        //GuardaTemporalPrevencion(Variables,"0");
                        /////TRANSACTION
                        List<SS_HC_SeguimientoRiesgo> listaCab = new List<SS_HC_SeguimientoRiesgo>();
                        List<SS_HC_SeguimientoRiesgoDetalle> listaDetalle = new List<SS_HC_SeguimientoRiesgoDetalle>();

                        List<MA_MiscelaneosDetalle> VariableGenerales = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(Variables, typeof(List<MA_MiscelaneosDetalle>));
                        if (VariableGenerales.Count > 0)
                        {
                            int registro = 0;
                            //CONVENIENTEMENTE PARA RECORRER PRIMERO, EN EL STORED, LAS ELIMINACIONES
                            if (Session["VariableGeneralesTempDELETE"] != null)
                            {
                                Listado = (List<SS_HC_SeguimientoRiesgoDetalle>)Session["VariableGeneralesTempDELETE"];
                            }
                            if (Session["VariableGeneralesTemp"] != null)
                            {
                                ListadoSave = (List<SS_HC_SeguimientoRiesgoDetalle>)Session["VariableGeneralesTemp"];
                            }
                            Listado.AddRange(ListadoSave);

                            // using SvcSeguimientoRiesgoDetalle = SoluccionSalud.Service.SeguimientoRiesgoDetalleService.SvcSeguimientoRiesgoDetalle;
                            // using SvcSeguimientoRiesgo = SoluccionSalud.Service.SeguimientoRiesgoService.SvcSeguimientoRiesgo;
                            varRiesgo.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            varRiesgo.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            varRiesgo.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            varRiesgo.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            varRiesgo.IdTipoCuidadoPreventivo = VariableGenerales[0].ValorEntero1;
                            varRiesgo.FechaSeguimiento = VariableGenerales[0].ValorFecha;
                            varRiesgo.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            varRiesgo.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            //registro = SvcSeguimientoRiesgo.setMantenimiento(varRiesgo);
                            listaCab.Add(varRiesgo);

                            foreach (SS_HC_SeguimientoRiesgoDetalle obj in Listado)
                            {
                                if ((obj.IdCuidadoPreventivo != null) || obj.Accion == "DELETE")
                                {
                                    varRiesgoDetalle = new SS_HC_SeguimientoRiesgoDetalle();
                                    varRiesgoDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    varRiesgoDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    varRiesgoDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    varRiesgoDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    varRiesgoDetalle.IdCuidadoPreventivo = obj.IdCuidadoPreventivo;
                                    varRiesgoDetalle.Comentario = obj.Comentario;
                                    ////////////////////////////////////
                                    varRiesgoDetalle.Secuencia = obj.Secuencia;
                                    varRiesgoDetalle.Accion = obj.Accion;
                                    //registro = SvcSeguimientoRiesgoDetalle.setMantenimiento(varRiesgoDetalle);
                                    listaDetalle.Add(varRiesgoDetalle);
                                }
                            }
                            registro = SvcSeguimientoRiesgo.setMantenimiento(new SS_HC_SeguimientoRiesgo(), listaCab, listaDetalle);

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                                Session["VariableGenerales"] = null;
                                Session["VariableGeneralesTemp"] = null;
                                Session["VariableGeneralesTempDELETE"] = null;

                                var store = X.GetCmp<Store>("StoreDatosPrevencion");

                                //store.Reload();
                                var store1 = X.GetCmp<Store>("storeRiegoDetalle");
                                store1.Reload();
                                //X.Msg.Notify("Mensaje", "Registro Satisfactoriamente..").Show();
                                String mensaje = "Se " + "actualizó" + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                //ActivaDescativaButtonSave(true);
                                eventoPostFormulario(true, "");
                                //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult GuardaTemporalPrevencion(String Variables, string text)
        {
            try
            {
                Log.Information("HClinicaControllerSup - GuardaTemporalPrevencion - Entrar");

                if ((Variables != null) || (Variables.Length > 0))
                {
                    List<SS_HC_SeguimientoRiesgoDetalle> listaSegRiesgoDetalleTemp = new List<SS_HC_SeguimientoRiesgoDetalle>();
                    List<SS_HC_SeguimientoRiesgoDetalle> listaSegRiesgoDetalleTempDelete = new List<SS_HC_SeguimientoRiesgoDetalle>();
                    List<SS_HC_SeguimientoRiesgoDetalle> listaSegRiesgoDetalleAux = new List<SS_HC_SeguimientoRiesgoDetalle>();

                    if (Session["VariableGeneralesTemp"] != null)
                    {
                        listaSegRiesgoDetalleTemp = (List<SS_HC_SeguimientoRiesgoDetalle>)Session["VariableGeneralesTemp"];
                    }
                    listaSegRiesgoDetalleAux = (List<SS_HC_SeguimientoRiesgoDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(Variables, typeof(List<SS_HC_SeguimientoRiesgoDetalle>));
                    if (text == "1")
                    {
                        if (listaSegRiesgoDetalleAux.Count > 0)
                        {
                            if (listaSegRiesgoDetalleTemp.Count > 0)
                            {
                                bool hallado = false;
                                foreach (var resultAux in listaSegRiesgoDetalleAux)
                                {
                                    hallado = false;
                                    foreach (var resultTemp in listaSegRiesgoDetalleTemp)
                                    {
                                        if (resultAux.IdCuidadoPreventivo == resultTemp.IdCuidadoPreventivo)
                                        {
                                            hallado = true;
                                            resultTemp.Comentario = resultAux.Comentario;
                                        }
                                    }
                                    if (!hallado)
                                    {
                                        listaSegRiesgoDetalleTemp.Add(resultAux);
                                    }
                                }
                            }
                            else
                            {
                                listaSegRiesgoDetalleTemp.AddRange(listaSegRiesgoDetalleAux);
                            }
                        }
                    }
                    else
                    {
                        if (Session["VariableGeneralesTempDELETE"] != null)
                        {
                            listaSegRiesgoDetalleTempDelete = (List<SS_HC_SeguimientoRiesgoDetalle>)Session["VariableGeneralesTempDELETE"];
                        }
                        if (listaSegRiesgoDetalleAux.Count > 0)
                        {
                            foreach (var resultDelete in listaSegRiesgoDetalleAux)
                            {
                                bool hallado = false;
                                if (listaSegRiesgoDetalleTemp.Count > 0)
                                {
                                    foreach (var resultSave in listaSegRiesgoDetalleTemp)
                                    {
                                        if (resultSave.IdCuidadoPreventivo == resultDelete.IdCuidadoPreventivo)
                                        {
                                            if (resultDelete.Secuencia > 0)
                                            {
                                                listaSegRiesgoDetalleTempDelete.Add(resultDelete);
                                            }
                                            listaSegRiesgoDetalleTemp.Remove(resultSave);
                                            hallado = true;
                                            break;
                                        }
                                    }
                                }
                                if (!hallado)
                                {
                                    if (resultDelete.Secuencia > 0)
                                    {
                                        listaSegRiesgoDetalleTempDelete.Add(resultDelete);
                                    }
                                }
                            }
                        }
                        Session["VariableGeneralesTempDELETE"] = listaSegRiesgoDetalleTempDelete;
                    }
                    Session["VariableGeneralesTemp"] = listaSegRiesgoDetalleTemp;
                    /////////////////  
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:" + ex.Message;
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
            return this.Direct();
        }
        #endregion
        #region ActioResult_Formulario_Examenes
        public System.Web.Mvc.ActionResult CCEP0306_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0306_View - Entrar");

            Session["Data_ExamenDelete"] = null;
            var LocalEnty = new SS_HC_ExamenSolicitado();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult addEliminar_Examen(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_Examen - Entrar");

            List<SS_HC_ExamenSolicitado> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ExamenDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenSolicitado>)Session["Data_ExamenDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenSolicitado>();
                }
                SS_HC_ExamenSolicitado objDelete = new SS_HC_ExamenSolicitado();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdProcedimiento = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Data_ExamenDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        /*********************************************************/
        public System.Web.Mvc.ActionResult Save_Examen(SS_HC_ExamenSolicitado objAnamEA, String selectionArray1, string text)
        {
            Log.Information("HClinicaControllerSup - Save_Examen - Entrar");
            List<MA_MiscelaneosDetalle> ObjListarActivo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    List<SS_HC_ExamenSolicitado> listaDetalle = new List<SS_HC_ExamenSolicitado>();
                    SS_HC_ExamenSolicitado objEnt;
                    string mensage = "";
                    string cadenas = "";
                    String[] cadArray;
                    int regsitro = 0;

                    //BLOQUE DELETE
                    List<SS_HC_ExamenSolicitado> dataDelete = null;
                    if (Session["Data_ExamenDelete"] != null)
                    {
                        dataDelete = (List<SS_HC_ExamenSolicitado>)Session["Data_ExamenDelete"];
                    }
                    if (dataDelete != null)
                    {
                        foreach (var objDel in dataDelete)
                        {
                            listaDetalle.Add(objDel);
                            //IdEpisodioAtencionID = SvcExamenSolicitadoService.setMantenimiento(objDel);
                        }
                    }
                    if (ObjListarActivo.Count > 0)
                    {
                        foreach (MA_MiscelaneosDetalle objEntity in ObjListarActivo)
                        {
                            objEnt = new SS_HC_ExamenSolicitado();
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;  //OBS:  siempre sería UPDATE
                            objEnt.Accion = objEntity.ACCION;
                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //objEnt.Fecha = objEntity.ValorFecha;
                            cadenas = Convert.ToString(objEntity.ValorCodigo5);

                            objEnt.IdProcedimiento = Convert.ToInt32(cadenas);
                            objEnt.FechaSolitada = Convert.ToDateTime(objEntity.ValorFecha);
                            objEnt.Cantidad = objEntity.ValorEntero6;
                            objEnt.Observacion = objEntity.ValorCodigo4.Trim();
                            objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                            //ADD 11/15
                            objEnt.IndicadorEPS = objEntity.ValorEntero7;
                            objEnt.TipoCodigo = objEntity.ValorCodigo6;
                            objEnt.CodigoSegus = objEntity.ValorCodigo7;
                            objEnt.CodigoComponente = objEntity.ValorCodigo2; //COrresponde al código CPT
                            if (objEnt.CodigoComponente == null || objEnt.CodigoComponente == "")
                            {
                                objEnt.CodigoComponente = objEntity.ValorCodigo7; //CASO SEGUS
                            }

                            //ADD DESDE LA SELECCIÓN DEL PACIENTE
                            if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                            {
                                VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                                objEnt.IdEspecialidad = EpiAtencionTemp.IdEspecialidad;
                            }
                            if ((objEntity.ACCION.Trim() + "") != "NUEVO")
                            {
                                objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            }
                            listaDetalle.Add(objEnt);
                            //IdEpisodioAtencionID = SvcExamenSolicitadoService.setMantenimiento(objEnt);
                        }
                    }

                    if (listaDetalle.Count > 0)
                    {
                        regsitro = SvcExamenSolicitadoService.setMantenimiento(new SS_HC_ExamenSolicitado(), listaDetalle);
                    }
                    else
                    {

                        regsitro = -99;
                    }
                    if (regsitro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                        eventoLoadPostFormulario(true, "storeExamenes", null);
                        eventoPostFormulario(true, "");
                        Session["Data_ExamenDelete"] = null;
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else if (regsitro == -99)
                    {
                        String mensaje = "No se hicieron modificaciones.";
                        eventoLoadPostFormulario(true, "storeExamenes", null);
                        eventoPostFormulario(true, "");
                        Session["Data_ExamenDelete"] = null;
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }
            //int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEP0306_EXAMENES(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0306_EXAMENES - Entrar");

                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXAMENES";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty.ValorCodigo5 = tipoCodigo;

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    /*if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }*/
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEP0316_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0316_View - Entrar");
            Session["Data_ExamenDelete"] = null;
            var LocalEnty = new SS_HC_ExamenSolicitado();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult EXAMENRESULT(string tipoListado, string codigo, string componente, string diagnostico)
        {
            Log.Information("HClinicaControllerSup - EXAMENRESULT - Entrar");

            try
            {
                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = tipoListado;
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();

                LocalEnty.ValorCodigo5 = componente;
                LocalEnty.ValorNumerico = getValorFiltroInt(diagnostico);


                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                if (tipoListado == "RESULTADOSGRAFICA")
                {
                    var ListarGeneral = new List<ENTITY_GENERALHCE>();
                    var objGeneral = new ENTITY_GENERALHCE();
                    if (Listar != null)
                    {
                        foreach (var resultGen in Listar)
                        {
                            objGeneral = new ENTITY_GENERALHCE();
                            objGeneral.campoDate01 = resultGen.ValorFecha;
                            objGeneral.campoDouble01 = resultGen.ValorNumerico;
                            objGeneral.campoStr01 = resultGen.ValorCodigo3;
                            //obtener Rango
                            string[] rango = resultGen.ValorCodigo2.Split('a');
                            double cotaMinNum = 0;
                            double cotaMaxNum = 0;

                            if (rango.Length > 1)
                            {
                                string contaMin = (rango[0] + "").Replace("de", "");
                                contaMin = (rango[0] + "").Trim();
                                string contaMax = (rango[1] + "").Trim();
                                try
                                {
                                    cotaMinNum = Convert.ToDouble(contaMin);
                                    cotaMaxNum = Convert.ToDouble(contaMax);
                                }
                                catch (Exception ex2)
                                {
                                    Log.Error(ex2, ex2.Message);
                                    cotaMinNum = 0; cotaMaxNum = 0;
                                }
                            }
                            objGeneral.campoDouble02 = cotaMinNum;
                            objGeneral.campoDouble03 = cotaMaxNum;
                            ListarGeneral.Add(objGeneral);
                        }
                    }
                    return this.Store(ListarGeneral.ToList());
                }
                else
                {
                    return this.Store(Listar.ToList());
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                throw ex;
            }
        }
        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTOS(string VALOR)
        {
            Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTOS - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();

            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 0;
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
            {
                LocalEnty.ACCION = "EXAMENES";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo3 = "A";
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //return this.Store(SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList());
            }

            return this.Store(Listar.ToList());
        }

        public System.Web.Mvc.ActionResult CCEP0307_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0307_View - Entrar");
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP0308_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0308_View - Entrar");
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP0309_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0309_View - Entrar");

            return View();
        }
        #endregion

        #region ActioResult_Formulario_ServiciosVarios
        public System.Web.Mvc.ActionResult ServiciosVarios()
        {
            Log.Information("HClinicaControllerSup - ServiciosVarios - Entrar");

            //Ext.EventObject.F2
            //var  x =Ext.Net.even
            return View();
        }
        #endregion
        #region ActioResult_Formulario_Dianost_Diagnostico
        public System.Web.Mvc.ActionResult CCEP0310_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0310_View - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View();
        }
        #endregion
        #region ActioResult_Formulario_Dianost_Diagnostico
        public System.Web.Mvc.ActionResult CCEP0311_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0311_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_ProximaAtencion();
                var Listar = new List<SS_HC_ProximaAtencion>();
                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdEspecialidad = ENTITY_GLOBAL.Instance.IdEspecialidad;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.ProximaAtencionFlag = "P";
                }
                Listar = SvcProximaAtencionService.ProximaAtencionListar(LocalEnty).ToList();
                ////////////
                Session["ProximaCita"] = null;
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ProximaAtencion objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";

                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    {
                        VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                        LocalEnty.IdEspecialidad = EpiAtencionTemp.IdEspecialidad;
                        LocalEnty.IdPersonalSalud = EpiAtencionTemp.IdPersonalSalud;
                    }
                }
                //////////     
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        #endregion
        #region ActioResult_Formulario_Dianost_Valoracion
        public System.Web.Mvc.ActionResult CCEP0252_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0252_View - Entrar");
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            return View();
        }
        public System.Web.Mvc.ActionResult addEliminar_DianosticoValoracion(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_DianosticoValoracion - Entrar");

            List<SS_HC_Diagnostico> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataDianosticoValoracionDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Diagnostico>)Session["DataDianosticoValoracionDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Diagnostico>();
                }
                SS_HC_Diagnostico objDelete = new SS_HC_Diagnostico();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataDianosticoValoracionDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult Save_DianosticoValoracion(String selection, string text)
        {
            Log.Information("HClinicaControllerSup - Save_DianosticoValoracion - Entrar");

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    /////TRANSACTION
                    List<SS_HC_Diagnostico> listaCab = new List<SS_HC_Diagnostico>();
                    List<SS_HC_Diagnostico> listaDetalle = new List<SS_HC_Diagnostico>();

                    int registro = -1;
                    string mensage = "";
                    var Envio = new List<MA_MiscelaneosDetalle>();
                    SS_HC_Diagnostico Entity;

                    string cadenas = "";
                    String[] cadArray;

                    Entity = new SS_HC_Diagnostico();
                    /*
                    Entity.Accion = "DELETE";
                    Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    registro = SvcDiagnosticoService.setMantenimiento(Entity);
                    //registro = SvcDiagnosticoService.setMantenimiento(Entity);
                    listaCab.Add(Entity);
                    */
                    //BLOQUE DELETE
                    List<SS_HC_Diagnostico> dataDelete = null;
                    if (Session["DataDianosticoValoracionDelete"] != null)
                    {
                        dataDelete = (List<SS_HC_Diagnostico>)Session["DataDianosticoValoracionDelete"];
                    }
                    if (dataDelete != null)
                    {
                        foreach (var objDel in dataDelete)
                        {
                            //registro = SvcDiagnosticoService.setMantenimiento(Entity);
                            listaDetalle.Add(objDel);
                        }
                    }
                    ////////////



                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                    {
                        Entity = new SS_HC_Diagnostico();
                        //Entity.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;  //OBS
                        //Entity.Accion = "NUEVO";
                        Entity.Accion = objEntity.ACCION;
                        Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                        cadenas = cadArray[1].Replace("[", "");
                        cadenas = cadenas.Replace("]", "").Trim();
                        Entity.IdDiagnostico = Convert.ToInt32(cadenas);
                        Entity.DeterminacionDiagnostica = objEntity.ValorCodigo2.Trim();

                        Entity.IdDiagnosticoPrincipal = Convert.ToInt32(objEntity.ValorCodigo3.Trim());
                        Entity.GradoAfeccion = objEntity.ValorCodigo4.Trim();
                        Entity.TipoAntecedente = objEntity.ValorCodigo5.Trim();
                        Entity.Observacion = objEntity.ValorCodigo6.Trim();
                        Entity.IndicadorPreExistencia = objEntity.ValorEntero5;
                        Entity.IndicadorCronico = objEntity.ValorEntero6;
                        Entity.IndicadorNuevo = objEntity.ValorEntero7;
                        Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        Entity.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objEntity.ACCION != "NUEVO")
                        {
                            Entity.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        }

                        //ADD PARA MANTENER EL CODIGO DE FORMATO
                        Entity.Version = ENTITY_GLOBAL.Instance.CONCEPTO;
                        /////////////////////////////////
                        listaDetalle.Add(Entity);
                    }
                    //TRANSACT
                    registro = SvcDiagnosticoService.setMantenimiento(new SS_HC_Diagnostico(), null, listaDetalle);

                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        //X.Msg.Notify("Ventana de Mensajes ",mensaje ).Show();
                        //ActivaDescativaButtonSave(true);
                        Session["DataDianosticoValoracionDelete"] = null;

                        eventoLoadPostFormulario(true, "storeValoracion", null);
                        eventoPostFormulario(true, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");

                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }
        #endregion
        #region Examen_regiones_aparatos
        public System.Web.Mvc.ActionResult CCEP0104_EXAMENCUERPO()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0104_EXAMENCUERPO - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXAMENCUERPO";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult addEliminar_ExamenCuerpoHumano(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_ExamenCuerpoHumano - Entrar");

            List<SS_HC_ExamenFisico_Regional> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataExamenCuerpoHumanoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenFisico_Regional>)Session["DataExamenCuerpoHumanoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenFisico_Regional>();
                }
                SS_HC_ExamenFisico_Regional objDelete = new SS_HC_ExamenFisico_Regional();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdCuerpoHumano = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataExamenCuerpoHumanoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_ExamenCuerpoHumano(String selection, string text)
        {
            Log.Information("HClinicaControllerSup - Save_ExamenCuerpoHumano - Entrar");

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();

            }
            else
            {
                try
                {
                    /////TRANSACTION
                    List<SS_HC_ExamenFisico_Regional> listaCab = new List<SS_HC_ExamenFisico_Regional>();
                    List<SS_HC_ExamenFisico_Regional> listaDetalle = new List<SS_HC_ExamenFisico_Regional>();

                    int registro = -1;
                    string mensage = "";
                    var Envio = new List<MA_MiscelaneosDetalle>();
                    SS_HC_ExamenFisico_Regional Entity;
                    string cadenas = "";
                    String[] cadArray;
                    Entity = new SS_HC_ExamenFisico_Regional();
                    Entity.Accion = "DELETE";
                    Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //registro = SvcExamenFisicoTriajeService.setExamenFisicoRegional(Entity);
                    //listaCab.Add(Entity);
                    ////BLOQUE DELETE
                    if (Session["DataExamenCuerpoHumanoDelete"] != null)
                    {
                        List<SS_HC_ExamenFisico_Regional> listaDelete = (List<SS_HC_ExamenFisico_Regional>)Session["DataExamenCuerpoHumanoDelete"];
                        foreach (SS_HC_ExamenFisico_Regional objEntity in listaDelete)
                        {
                            listaDetalle.Add(objEntity);
                        }
                    }
                    ///////////

                    if (ObjListar != null)
                    {
                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                        {
                            Entity = new SS_HC_ExamenFisico_Regional();
                            //Entity.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;//OBS  UPDATE no existe
                            Entity.Accion = objEntity.ACCION;
                            Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            Entity.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                            cadenas = cadArray[1].Replace("[", "");
                            cadenas = cadenas.Replace("]", "").Trim();
                            Entity.IdCuerpoHumano = Convert.ToInt32(cadenas);
                            Entity.Comentarios = objEntity.ValorCodigo2.Trim();
                            Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            Entity.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //registro = SvcExamenFisicoTriajeService.setExamenFisicoRegional(Entity);
                            listaDetalle.Add(Entity);
                        }
                    }

                    registro = SvcExamenFisicoTriajeService.setMantenimiento(new SS_HC_ExamenFisico_Regional(),
                        listaCab, listaDetalle);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        //X.Msg.Notify("Ventana de Mensajes ", mensaje).Show();
                        //ActivaDescativaButtonSave(true);
                        Session["DataExamenCuerpoHumanoDelete"] = null;

                        eventoPostFormulario(true, "");
                        eventoLoadPostFormulario(true, "storeValoracion", null);
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");

                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }

                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }
            return this.Direct();
        }
        #endregion
        #region ActioResult_Formulario_Dianost_Dianostico
        public System.Web.Mvc.ActionResult CCEP0253_DIAGNOSTICO()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0253_DIAGNOSTICO - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGNOSTICO";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIAGNOSTICO_F1, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "Diagnóstico");
            }

        }


        public System.Web.Mvc.ActionResult CCEP0253_View()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0253_View - Entrar");
                var LocalEnty = new SS_HC_Diagnostico();
                var Listar = new List<SS_HC_Diagnostico>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    Listar = SvcDiagnosticoService.DiagnosticoListar(LocalEnty);
                    ////////////
                    bool hallado = false;
                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_Diagnostico objEntity in Listar)
                        {
                            LocalEnty = objEntity;
                            LocalEnty.Accion = "UPDATE";
                            hallado = true;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            }
                        }
                    }
                    if (!hallado)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            LocalEnty.Accion = "NUEVO";

                        }
                    }
                    //////////

                }
                else
                {
                    //ADD 11/15 : ESTADO = 100 : Selección del Formulario desde las Cronologías
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        #endregion
        #region ActioResult_Formulario_Problema_Dianosti_Agudo
        public System.Web.Mvc.ActionResult CCEP0202_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0202_View - Entrar");
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            var LocalEnty = new SS_HC_Anamnesis_EA();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult addEliminar_Problemas(String MODO, String codigo, String secuencia, String tipoproblema)
        {
            Log.Information("HClinicaControllerSup - addEliminar_Problemas - Entrar");

            List<SS_HC_Problema> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_ProblemaDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Problema>)Session["DataSS_HC_ProblemaDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Problema>();
                }
                SS_HC_Problema objDelete = new SS_HC_Problema();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.TipoProblema = tipoproblema;
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_ProblemaDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_Problemas(SS_HC_Anamnesis_AF objAnamEA, String selectionArray1, String selectionArray2, string text)
        {
            Log.Information("HClinicaControllerSup - Save_Problemas - Entrar");
            List<MA_MiscelaneosDetalle> ObjListarActivo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));
            List<MA_MiscelaneosDetalle> ObjListarInacActivo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();

            }
            else
            {
                try
                {
                    SS_HC_Problema objEnt;
                    string mensage = "";
                    string cadenas = "";
                    String[] cadArray;
                    int IdEpisodioAtencionID = 0;
                    //BLOQUE DELETE
                    List<SS_HC_Problema> dataDelete = null;
                    if (Session["DataSS_HC_ProblemaDelete"] != null)
                    {
                        dataDelete = (List<SS_HC_Problema>)Session["DataSS_HC_ProblemaDelete"];
                    }
                    if (dataDelete != null)
                    {
                        foreach (var objDel in dataDelete)
                        {
                            IdEpisodioAtencionID = SvcProblemasService.setMantenimiento(objDel);
                        }
                    }
                    ////////////

                    foreach (MA_MiscelaneosDetalle objEntity in ObjListarActivo)
                    {
                        objEnt = new SS_HC_Problema();
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;  //OBS
                        objEnt.Accion = objEntity.ACCION;
                        objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //if (IdEpisodioAtencionID > 0) objEnt.IdEpisodioAtencion = IdEpisodioAtencionID;
                        objEnt.Fecha = objEntity.ValorFecha;
                        objEnt.TipoProblema = "A";
                        objEnt.IdTipoProblemaDiag = Convert.ToInt32(objEntity.ValorCodigo2.Trim());
                        cadArray = objEntity.ValorCodigo3.Trim().Split('|');
                        cadenas = cadArray[1].Replace("[", "");
                        cadenas = cadenas.Replace("]", "").Trim();
                        objEnt.IdDiagnostico = Convert.ToInt32(cadenas);
                        objEnt.IdControlado = Convert.ToInt32(objEntity.ValorCodigo4.Trim());
                        objEnt.Observacion = objEntity.ValorCodigo5.Trim();
                        if ((objEntity.ACCION.Trim() + "") != "NUEVO")
                        {
                            objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        }
                        IdEpisodioAtencionID = SvcProblemasService.setMantenimiento(objEnt);
                    }
                    foreach (MA_MiscelaneosDetalle objEntity in ObjListarInacActivo)
                    {
                        objEnt = new SS_HC_Problema();
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;  //OBS
                        objEnt.Accion = objEntity.ACCION;
                        objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //if (IdEpisodioAtencionID > 0) objEnt.IdEpisodioAtencion = IdEpisodioAtencionID;
                        objEnt.Fecha = objEntity.ValorFecha;
                        objEnt.TipoProblema = "C";
                        objEnt.IdTipoProblemaDiag = Convert.ToInt32(objEntity.ValorCodigo2.Trim());
                        cadArray = objEntity.ValorCodigo3.Trim().Split('|');
                        cadenas = cadArray[1].Replace("[", "");
                        cadenas = cadenas.Replace("]", "").Trim();
                        objEnt.IdDiagnostico = Convert.ToInt32(cadenas);
                        objEnt.IdControlado = Convert.ToInt32(objEntity.ValorCodigo4.Trim());
                        objEnt.Observacion = objEntity.ValorCodigo5.Trim();
                        if ((objEntity.ACCION.Trim() + "") != "NUEVO")
                        {
                            objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        }
                        IdEpisodioAtencionID = SvcProblemasService.setMantenimiento(objEnt);
                    }
                    if (IdEpisodioAtencionID > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)IdEpisodioAtencionID;
                        String mensaje = "Se " + mensage + " satisfactoriamente . Nro Atención : " + IdEpisodioAtencionID.ToString().Trim();
                        //X.Msg.Notify("Ventana de Mensajes ", mensaje).Show();
                        //ActivaDescativaButtonSave(true);
                        Session["DataSS_HC_ProblemaDelete"] = null;
                        eventoPostFormulario(true, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            //int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEP0202_PROBLEMASACTIVOS(string VALOR)
        {
            Log.Information("HClinicaControllerSup - CCEP0202_PROBLEMASACTIVOS - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            LocalEnty.ACCION = "PROBLEMAS";
            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            LocalEnty.ValorCodigo4 = "A";
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
            if (Listar.Count > 0)
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
            }

            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult CCEP0202_PROBLEMASINACTIVOS(string VALOR)
        {
            Log.Information("HClinicaControllerSup - CCEP0202_PROBLEMASINACTIVOS - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();

            LocalEnty.ACCION = "PROBLEMAS";
            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            LocalEnty.ValorCodigo4 = "C";
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
            if (Listar.Count > 0)
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
            }

            return this.Store(Listar.ToList());
        }
        #endregion
        #region ActioResult_Anamnesis_Triage
        public System.Web.Mvc.ActionResult Save_ExamenFisico_Triaje(SS_HC_ExamenFisico_Triaje objExamenFisicoTriaje)
        {
            Log.Information("HClinicaControllerSup - Save_ExamenFisico_Triaje - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();

            }
            else
            {
                try
                {
                    int registro = -1;
                    objExamenFisicoTriaje.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objExamenFisicoTriaje.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objExamenFisicoTriaje.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objExamenFisicoTriaje.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objExamenFisicoTriaje.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objExamenFisicoTriaje.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objExamenFisicoTriaje.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objExamenFisicoTriaje.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    string mensage = "";
                    registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        //ActivaDescativaButtonSave(true);
                        eventoPostFormulario(true, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);                                        
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    eventoPostFormulario(false, "");
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEP0102_View() //Formulario Triaje
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0102_View - Entrar");
                var LocalEnty = new SS_HC_ExamenFisico_Triaje();
                var Listar = new List<SS_HC_ExamenFisico_Triaje>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                }
                Listar = SvcExamenFisicoTriajeService.ExamenFisicoTriajeListar(LocalEnty).ToList();

                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ExamenFisico_Triaje objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEP0104_View()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0104_View - Entrar");
                var LocalEnty = new SS_HC_ExamenFisico_Regional();
                LocalEnty.Accion = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                }
                Session["DataExamenCuerpoHumanoDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        #endregion
        #region ActioResult_Anamnesis_AFamiliares
        public System.Web.Mvc.ActionResult CCEP0005_ANTEC_FAMILIARES()
        {
            Log.Information("HClinicaControllerSup - CCEP0005_ANTEC_FAMILIARES - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();

            LocalEnty.ACCION = "ANTEC_FAMILIARES";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /*
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.VistaEpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.VistaEpisodioAtencion.ToString().Trim();
                 */
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult CCEP0005_View()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0005_View - Entrar");
                Session["DataSS_Antic_FamiliaresDelete"] = null;
                Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                var LocalEnty = new SS_HC_Anamnesis_AF();
                var Listar = new List<SS_HC_Anamnesis_AF>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    /*
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.VistaEpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.VistaEpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                     */
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcAnamnesisAFService.AnamnesisAFListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_AF objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";

                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                //////////
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult addSave_Antic_Familiares(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addSave_Antic_Familiares - Entrar");

            List<SS_HC_Anamnesis_AF_Enfermedad> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_Antic_FamiliaresSave"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_AF_Enfermedad>)Session["DataSS_Antic_FamiliaresSave"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_AF_Enfermedad>();
                }
                SS_HC_Anamnesis_AF_Enfermedad objDelete = new SS_HC_Anamnesis_AF_Enfermedad();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataSS_Antic_FamiliaresSave"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult addEliminar_Antic_Familiares(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_Antic_Familiares - Entrar");
            List<SS_HC_Anamnesis_AF_Enfermedad> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_Antic_FamiliaresDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_AF_Enfermedad>)Session["DataSS_Antic_FamiliaresDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_AF_Enfermedad>();
                }
                SS_HC_Anamnesis_AF_Enfermedad objDelete = new SS_HC_Anamnesis_AF_Enfermedad();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataSS_Antic_FamiliaresDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_Antic_Familiares(SS_HC_Anamnesis_AF objAnamEA, String selection, String obj, string text)
        {
            Log.Information("HClinicaControllerSup - Save_Antic_Familiares - Entrar");

            String mensaje = "";
            SS_HC_Anamnesis_AF_Enfermedad objEnt;
            string mensage = "";
            long secActual = -1;
            long IdEpisodioAtencionID = -1;
            string cadenas = "";
            String[] cadArray;
            List<MA_MiscelaneosDetalle> ObjListar = null;
            // TRANSACCIONALES
            List<SS_HC_Anamnesis_AF> ObjCabecera = new List<SS_HC_Anamnesis_AF>();
            List<SS_HC_Anamnesis_AF_Enfermedad> ObjDetalle = new List<SS_HC_Anamnesis_AF_Enfermedad>();


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (text == "O")
                {
                    Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                    if (selection != "[]")
                    {
                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
                        Session["DATASS_HC_Anamnesis_AF_sec"] = ObjListar; //Detalle
                    }
                    ////////////
                }
                else
                {
                    try
                    {
                        objAnamEA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objAnamEA.FechaModificacion = DateTime.Now;
                        long secAux = 0;
                        if (objAnamEA.Accion == "NUEVO")
                        {
                            objAnamEA.FechaCreacion = DateTime.Now;
                            objAnamEA.Estado = 2;
                        }
                        ObjCabecera.Add(objAnamEA);
                        //IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objAnamEA);
                        //BLOQUE DELETE
                        List<SS_HC_Anamnesis_AF_Enfermedad> dataDelete = null;
                        if (Session["DataSS_Antic_FamiliaresDelete"] != null)
                        {
                            dataDelete = (List<SS_HC_Anamnesis_AF_Enfermedad>)Session["DataSS_Antic_FamiliaresDelete"];
                        }

                        //BLOQUE DETALLE
                        if (Session["DATASS_HC_Anamnesis_AF_sec"] != null)
                        {
                            ObjListar = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                            if (ObjListar.Count > 0)
                            {
                                if (ObjListar[0].ValorCodigo2.Trim().Length > 0)
                                {
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objEnt = new SS_HC_Anamnesis_AF_Enfermedad();
                                        objEnt.Accion = objEntity.ACCION;// "DETALLE";
                                        objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        cadArray = objEntity.ValorCodigo2.Trim().Split('|');
                                        cadenas = cadArray[1].Replace("[", "");
                                        cadenas = cadenas.Replace("]", "").Trim();
                                        objEnt.IdDiagnostico = Convert.ToInt32(cadenas);
                                        objEnt.Observaciones = objEntity.ValorCodigo3.Trim();
                                        if ((objEntity.ACCION.Trim() + "") != "DETALLE")
                                        {
                                            objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        ObjDetalle.Add(objEnt);
                                        //IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objEnt);

                                    }
                                }
                            }
                        }
                        // BORRAR DETALLE
                        if (dataDelete != null)
                        {
                            foreach (var objDel in dataDelete)
                            {
                                // SvcAnamnesisAFService.setMantAnamnesisAF(objDel);
                                ObjDetalle.Add(objDel);
                            }
                        }

                        IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objAnamEA, ObjCabecera, ObjDetalle);

                        if (IdEpisodioAtencionID > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = (int)IdEpisodioAtencionID;
                            mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            Session["DataSS_Antic_FamiliaresDelete"] = null;
                            //Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                            Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                            //eventoLoadPostFormulario(true, "storeEnfermedad", null);
                            eventoPostFormulario(true, "");
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw;
                    }
                }
            }

            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;            

            return this.Direct();
        }
        #endregion
        #region ActioResult_Anamnesis_AP
        public System.Web.Mvc.ActionResult CCEP0004_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0004_View - Entrar");

            try
            {
                /////
                var LocalEnty = new SS_HC_Anamnesis_AP();
                var Listar = new List<SS_HC_Anamnesis_AP>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    /*
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.VistaEpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.VistaEpisodioAtencion;
                    */
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                }

                Listar = SvcFormularioAnamnesisAP.AnamnesisAP_Listar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_AP objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                Session["APPatologicos"] = null;
                Session["APTrabajo"] = null;
                Session["APQuirurgicas"] = null;
                Session["APEpidomiologia"] = null;
                Session["APGenerales"] = null;
                Session["DataSS_HC_Anamnesis_APDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);

                var Listado = new List<PERSONAMAST>();
                var paciente = new PERSONAMAST();
                var objPaciente = new PERSONAMAST();
                if (Session["Ssesion_ListarPaciiente"] != null)
                {
                    Listado = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
                }
                else
                {
                    paciente.ACCION = "LISTARPACIENTE";
                    paciente.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Listado = SvcPersonaMast.GetSelectPersonaMast(paciente).ToList();
                }
                var sexoFemenino = "F";
                var edadpediatrica = 14;
                var edadmenor = 18;
                var edadadultomayor = 60;

                if (Listado.Count > 0)
                {
                    foreach (PERSONAMAST objeto in Listado)
                    {
                        objPaciente = objeto;
                        /*********contenedor 1************/
                        if (objPaciente.Sexo == sexoFemenino && objPaciente.edad > edadpediatrica && objPaciente.edad < edadadultomayor && objPaciente.edad != null)
                        {
                            var fsDos = this.GetCmp<FieldSet>("fsAntecedenteGestacion");
                            fsDos.Hidden = false;
                            var fsTres = this.GetCmp<FieldSet>("fsAntecedenteParto");
                            fsTres.Hidden = false;
                        }
                        else
                        {
                            var fsDos = this.GetCmp<FieldSet>("fsAntecedenteGestacion");
                            fsDos.Hidden = true;
                            var fsTres = this.GetCmp<FieldSet>("fsAntecedenteParto");
                            fsTres.Hidden = true;
                        }
                        /*********contenedor 2************/
                        if (objPaciente.edad < edadmenor)
                        {
                            var fsCuatro = this.GetCmp<FieldSet>("fsAntecedenteNacimiento");
                            fsCuatro.Hidden = false;
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedentePatologico");
                            fsCinco.Hidden = false;
                        }
                        else
                        {
                            var fsCuatro = this.GetCmp<FieldSet>("fsAntecedenteNacimiento");
                            fsCuatro.Hidden = true;
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedentePatologico");
                            fsCinco.Hidden = true;
                        }
                        /*********contenedor 3************/
                        if (objPaciente.edad < edadmenor)
                        {
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedenteLactancia");
                            fsCinco.Hidden = false;
                        }
                        else
                        {
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedenteLactancia");
                            fsCinco.Hidden = true;
                        }
                        if (objPaciente.Sexo == sexoFemenino && objPaciente.edad > edadpediatrica && objPaciente.edad < edadadultomayor && objPaciente.edad != null)
                        {
                            var fsSeis = this.GetCmp<FieldSet>("fsEsferaSexual");
                            fsSeis.Hidden = false;
                            var fsSiete = this.GetCmp<FieldSet>("fsGinecoObstetrico");
                            fsSiete.Hidden = false;
                        }
                        else
                        {
                            var fsSeis = this.GetCmp<FieldSet>("fsEsferaSexual");
                            fsSeis.Hidden = true;
                            var fsSiete = this.GetCmp<FieldSet>("fsGinecoObstetrico");
                            fsSiete.Hidden = true;
                        }
                        /***********contenedor 5***********/
                        if (objPaciente.edad <= edadpediatrica && objPaciente.edad != null)
                        {
                            var fsOcho = this.GetCmp<FieldSet>("fsInmunizaciones");
                            fsOcho.Hidden = false;
                            var fsNueve = this.GetCmp<FieldSet>("fsHabitos");
                            fsNueve.Hidden = true;
                        }
                        else
                        {
                            var fsOcho = this.GetCmp<FieldSet>("fsInmunizaciones");
                            fsOcho.Hidden = true;
                            var fsNueve = this.GetCmp<FieldSet>("fsHabitos");
                            fsNueve.Hidden = false;
                        }

                        /***********contenedor 7***********/
                        if (objPaciente.edad != null && objPaciente.edad >= edadadultomayor)
                        {
                            var fsDiez = this.GetCmp<FieldSet>("fsActividades");
                            fsDiez.Hidden = false;
                            var fsDoce = this.GetCmp<FieldSet>("fsEstadoCognitivo");
                            fsDoce.Hidden = false;
                            var fsTrece = this.GetCmp<FieldSet>("fsEstadoAfectivo");
                            fsTrece.Hidden = false;
                            var fsCatorce = this.GetCmp<Label>("lbActividades");
                            fsCatorce.Hidden = false;
                        }
                        else
                        {
                            var fsDiez = this.GetCmp<FieldSet>("fsActividades");
                            fsDiez.Hidden = true;
                            var fsDoce = this.GetCmp<FieldSet>("fsEstadoCognitivo");
                            fsDoce.Hidden = true;
                            var fsTrece = this.GetCmp<FieldSet>("fsEstadoAfectivo");
                            fsTrece.Hidden = true;
                            var fsCatorce = this.GetCmp<Label>("lbActividades");
                            fsCatorce.Hidden = true;
                        }
                        /***********contenedor 8***********/
                        if (objPaciente.edad != null && objPaciente.edad >= edadadultomayor)
                        {
                            var fsOnce = this.GetCmp<FieldSet>("fsValoracionSocio");
                            fsOnce.Hidden = false;
                        }
                        else
                        {
                            var fsOnce = this.GetCmp<FieldSet>("fsValoracionSocio");
                            fsOnce.Hidden = true;
                        }
                        /**********************************/
                    }
                }
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        #endregion
        #region Formulario_Anamnesis_AP_Botones
        public System.Web.Mvc.ActionResult Next_Click(int index)
        {
            if ((index + 1) < 8)
            {
                this.GetCmp<Panel>("WizardPanel").ActiveIndex = index + 1;
                this.CheckButtons(index + 1);
            }
            else
                this.CheckButtons(index);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Prev_Click(int index)
        {
            if ((index - 1) >= 0)
            {
                this.GetCmp<Panel>("WizardPanel").ActiveIndex = index - 1;

                this.CheckButtons(index - 1);
            }
            else
                this.CheckButtons(index);

            return this.Direct();
        }
        private void CheckButtons(int index)
        {
            this.GetCmp<Button>("btnNext").Disabled = index == 7;
            this.GetCmp<Button>("btnPrev").Disabled = index == 0;
            index = index + 1;
            this.GetCmp<Button>("txtLabel").Text = "Paginas de " + index.ToString().Trim() + " a 8";
        }
        public System.Web.Mvc.ActionResult addEliminar_SS_HC_Anamnesis_AP(SS_HC_Anamnesis_AP objAnamnesis_AP,
                    String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaControllerSup - addEliminar_SS_HC_Anamnesis_AP - Entrar");
            List<SS_HC_Anamnesis_AP> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Anamnesis_APDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_AP>)Session["DataSS_HC_Anamnesis_APDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_AP>();
                }
                SS_HC_Anamnesis_AP objDelete = new SS_HC_Anamnesis_AP();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla :OBS
                    objAnamnesis_AP.PesoAlNacerGR = Convert.ToInt32(cadenas); // IDtabla
                    objAnamnesis_AP.Alcohol = codigo.Trim(); //Nombre
                    objAnamnesis_AP.LugarControl = tipoRegistro;                    // idTipo
                    objDelete.DeinmunizEdadAproximada = Convert.ToInt32(secuencia); //Secuencia AUX

                    objDelete.Accion = MODO;

                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Anamnesis_APDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_SS_HC_Anamnesis_AP(SS_HC_Anamnesis_AP objAnamnesis_AP,
                                    String APPatologicos, String APTrabajo, String APQuirurgicas,
                                    String APEpidomiologia, String APGenerales, String text)
        {
            Log.Information("HClinicaControllerSup - Save_SS_HC_Anamnesis_AP - Entrar");
            List<MA_MiscelaneosDetalle> ObjListar;
            String ObjArrays = null;
            //if (ENTITY_GLOBAL.Instance.INTERUPTOR == null)
            if (text == "0")
            {
                Session["APPatologicos"] = APPatologicos;
                Session["APTrabajo"] = APTrabajo;
                Session["APQuirurgicas"] = APQuirurgicas;

                Session["APEpidomiologia"] = APEpidomiologia;
                Session["APGenerales"] = APGenerales;
                //APPatologicos: APPatologicosy,
                //APTrabajo: APTrabajoy,
                //APQuirurgicas: APQuirurgicasy,
                //APEpidomiologia: APEpidomiologiay,
                //APGenerales: APGeneralesy
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        //TRANSACT
                        //
                        SS_HC_Anamnesis_AP objCabecera = new SS_HC_Anamnesis_AP();
                        List<SS_HC_Anamnesis_AP> listaCabDetalle = new List<SS_HC_Anamnesis_AP>();
                        List<SS_HC_Anamnesis_AP_Detalle> listaDetalle = new List<SS_HC_Anamnesis_AP_Detalle>();

                        int registro = -1;
                        objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                        objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        string mensage = "";
                        objCabecera = objAnamnesis_AP;
                        //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                        //    
                        registro = 1;
                        if (Session["DataSS_HC_Anamnesis_APDelete"] != null)
                        {
                            List<SS_HC_Anamnesis_AP> dataDelete = (List<SS_HC_Anamnesis_AP>)Session["DataSS_HC_Anamnesis_APDelete"];
                            foreach (var result in dataDelete)
                            {
                                result.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                result.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(result);
                                listaCabDetalle.Add(result);
                            }
                        }
                        if (registro > 0)
                        {
                            ObjArrays = (string)Session["APPatologicos"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_AP = new SS_HC_Anamnesis_AP();
                                objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla
                                objAnamnesis_AP.PesoAlNacerGR = Convert.ToInt32(cadenas); // IDtabla
                                objAnamnesis_AP.Alcohol = objEntity.ValorCodigo1.Trim(); //Nombre
                                objAnamnesis_AP.LugarControl = "AP";                    // idTipo                                
                                objAnamnesis_AP.Accion = objEntity.ACCION;
                                if (objAnamnesis_AP.Accion != "DETALLE")
                                {
                                    objAnamnesis_AP.DeinmunizEdadAproximada = Convert.ToInt32(objEntity.CodigoElemento); //Secuencia AUX
                                }
                                objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                                listaCabDetalle.Add(objAnamnesis_AP);
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                            ObjArrays = (string)Session["APTrabajo"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_AP = new SS_HC_Anamnesis_AP();
                                objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla
                                objAnamnesis_AP.Alcohol = objEntity.ValorCodigo1.Trim(); //Nombre
                                objAnamnesis_AP.LugarControl = "AT";                    // idTipo
                                objAnamnesis_AP.Accion = objEntity.ACCION;
                                if (objAnamnesis_AP.Accion != "DETALLE")
                                {
                                    objAnamnesis_AP.DeinmunizEdadAproximada = Convert.ToInt32(objEntity.CodigoElemento); //Secuencia AUX
                                }
                                objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                                listaCabDetalle.Add(objAnamnesis_AP);
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                            ObjArrays = (string)Session["APQuirurgicas"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_AP = new SS_HC_Anamnesis_AP();
                                objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla
                                objAnamnesis_AP.PesoAlNacerGR = Convert.ToInt32(cadenas); // IDtabla
                                objAnamnesis_AP.Alcohol = objEntity.ValorCodigo1.Trim(); //Nombre
                                objAnamnesis_AP.FechaUltimoPeriodo = objEntity.ValorFecha; //Nombre
                                objAnamnesis_AP.Alimentos = objEntity.ValorCodigo2; //Nombre
                                objAnamnesis_AP.LugarControl = "AQ";                    // idTipo
                                objAnamnesis_AP.Accion = objEntity.ACCION;
                                if (objAnamnesis_AP.Accion != "DETALLE")
                                {
                                    objAnamnesis_AP.DeinmunizEdadAproximada = Convert.ToInt32(objEntity.CodigoElemento); //Secuencia AUX
                                }
                                objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                                listaCabDetalle.Add(objAnamnesis_AP);
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                            ObjArrays = (string)Session["APEpidomiologia"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_AP = new SS_HC_Anamnesis_AP();
                                objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla
                                objAnamnesis_AP.PesoAlNacerGR = Convert.ToInt32(cadenas); // IDtabla
                                objAnamnesis_AP.Alcohol = objEntity.ValorCodigo1.Trim(); //Nombre
                                objAnamnesis_AP.FechaUltimoPeriodo = objEntity.ValorFecha; //Nombre
                                objAnamnesis_AP.Alimentos = objEntity.ValorCodigo2; //Nombre
                                objAnamnesis_AP.LugarControl = "AE";                    // idTipo
                                objAnamnesis_AP.Accion = objEntity.ACCION;
                                if (objAnamnesis_AP.Accion != "DETALLE")
                                {
                                    objAnamnesis_AP.DeinmunizEdadAproximada = Convert.ToInt32(objEntity.CodigoElemento); //Secuencia AUX
                                }
                                objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                                listaCabDetalle.Add(objAnamnesis_AP);
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                            ObjArrays = (string)Session["APGenerales"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_AP = new SS_HC_Anamnesis_AP();
                                objAnamnesis_AP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_AP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_AP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_AP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_AP.IdEstadoCognitivo1 = Convert.ToInt16(cadenas); // IDtabla
                                objAnamnesis_AP.PesoAlNacerGR = Convert.ToInt32(cadenas); // IDtabla
                                objAnamnesis_AP.Alcohol = objEntity.ValorCodigo1.Trim(); //Nombre
                                objAnamnesis_AP.FechaUltimoPeriodo = objEntity.ValorFecha; //Nombre
                                objAnamnesis_AP.Alimentos = objEntity.ValorCodigo2; //Nombre
                                objAnamnesis_AP.LugarControl = "AG";                    // idTipo
                                objAnamnesis_AP.Accion = objEntity.ACCION;
                                if (objAnamnesis_AP.Accion != "DETALLE")
                                {
                                    objAnamnesis_AP.DeinmunizEdadAproximada = Convert.ToInt32(objEntity.CodigoElemento); //Secuencia AUX
                                }
                                objAnamnesis_AP.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_AP.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objAnamnesis_AP);
                                listaCabDetalle.Add(objAnamnesis_AP);
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }

                            registro = SvcFormularioAnamnesisAP.setMantAnamnesisAP(objCabecera, listaCabDetalle, null);
                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                //X.Msg.Notify("Ventana de Mensajes ", mensaje).Show();
                                //ActivaDescativaButtonSave(true);

                                Session["APPatologicos"] = null;
                                Session["APTrabajo"] = null;
                                Session["APQuirurgicas"] = null;
                                Session["APEpidomiologia"] = null;
                                Session["APGenerales"] = null;
                                Session["DataSS_HC_Anamnesis_APDelete"] = null;
                                /*
                                eventoLoadPostFormulario(true, "STORE_APPatologicos", null);
                                eventoLoadPostFormulario(true, "STORE_APTrabajo", null);
                                eventoLoadPostFormulario(true, "STORE_APQuirurgicas", null);
                                eventoLoadPostFormulario(true, "STORE_APEpidomiologia", null);
                                eventoLoadPostFormulario(true, "STORE_APGenerales", null);
                                */
                                eventoPostFormulario(true, "");
                                //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado.", "ERROR", false);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        // EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        eventoPostFormulario(false, "");
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw;
                    }
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult EVENTO_GENERICO(String ACCION)
        {
            Log.Information("HClinicaControllerSup - EVENTO_GENERICO - Entrar");

            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
            {
                LocalEnty.ACCION = ACCION;
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
            }

            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult EVENTO_GENERICO_CONSUL(String ACCION, String ORIGEN)
        {
            Log.Information("HClinicaControllerSup - EVENTO_GENERICO_CONSUL - Entrar");

            try
            {
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                if (ORIGEN == "IMPRESIONDIAG")
                {
                    LocalEnty.ACCION = "DIAGNOSTICO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                    {
                        LocalEnty.ACCION = "DIAGPROCITA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ACCION;
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                        if (ACCION == "1") { LocalEnty.ValorCodigo4 = "H"; }
                        else if (ACCION == "2") { LocalEnty.ValorCodigo4 = "C"; }
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult EVENTO_APPatologicos(String Tipo)
        {
            try
            {
                Log.Information("HClinicaControllerSup - EVENTO_APPatologicos - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.ACCION = "APERSONALDETALLE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = Tipo;
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        private void ActivaDescativaButtonSave(bool estado)
        {
            this.GetCmp<Button>("cmdGuardar").Disabled = estado;
            // this.GetCmp<Button>("cmdGuardar").Text = "Actualizar";
        }
        #endregion
        #region ActioResult_Formulario_Medicamentos

        public System.Web.Mvc.ActionResult Vista_View()
        {
            Log.Information("HClinicaControllerSup - Vista_View - Entrar");
            return RedirectToAction("", "", "");
        }
        public System.Web.Mvc.ActionResult CCEP0304_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0304_View - Entrar");

            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            Session["HC_MedicamentoDetalleList"] = null;
            Session["HC_MedicamentoList"] = null;
            Session["HC_MedicamentoID"] = null;
            var LocalEnty = new BE_Medicamento_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            /*********************************/
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = 1; //para Medicina
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

            bool hallado = false; //ADD 19/12/16
            if (objListaAnt.Count > 0)
            {
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                {
                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }

                    /**ADD 19/12/16**/
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.TipoMedicamento = 1;
                    LocalEnty.Linea = intobj.Linea;
                    LocalEnty.Familia = intobj.Familia;
                    LocalEnty.SubFamilia = intobj.SubFamilia;
                    LocalEnty.Comentario = intobj.Comentario;
                    LocalEnty.TipoReceta = intobj.TipoReceta;
                    LocalEnty.Accion = "UPDATE";
                    /**/
                }
                hallado = true;

            }


            /********************************/
            return View("", "", LocalEnty);
        }


        public System.Web.Mvc.ActionResult CCEP9919_View()
        {
            Log.Information("HClinicaControllerSup - CCEP9919_View - Entrar");

            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            Session["HC_MedicamentoDetalleList"] = null;
            Session["HC_MedicamentoList"] = null;
            Session["HC_MedicamentoID"] = null;
            var LocalEnty = new BE_Medicamento_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }

            Session["Linea_Med"] = "0";
            Session["Familia_Med"] = "0";
            Session["SubFamilia_Med"] = "0";
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            /*cargarPropiedadesFormulario(true);*/
            /*setPropiedadesFormulario(true);*/
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            /*********************************/
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = 1; //para Medicina
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

            if (objListaAnt.Count > 0)
            {
                DataTable dtValida = new DataTable();
                String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                              (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                if (PARAM == "S" && ENTITY_GLOBAL.Instance.COD_BANDEJA != "EMERGENCIA")
                {
                    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
                    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    WsEpisodio.FechaCreacion = DateTime.Now;
                    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                }
                else
                {

                    dtValida.Columns.Add("CustLName", typeof(String));
                    dtValida.Columns.Add("CustFName", typeof(String));
                    dtValida.Columns.Add("Purchases", typeof(String));
                    dtValida.Columns.Add("CustLName2", typeof(String));
                    dtValida.Columns.Add("CustFName2", typeof(String));
                    dtValida.Columns.Add("Purchases2", typeof(String));
                }
                ENTITY_GLOBAL.Instance.dataExamenMedicamentos = dtValida;

            }

            List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();
            var LocalEntyAuto = new SY_SeguridadAutorizaciones();

            LocalEntyAuto.AplicacionCodigo = "SY";
            // int inicio = Convert.ToInt32(IdAgente);
            int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;

            var datos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEA");
            for (int x = 0; x < datos.Count(); x++)
            {
                string num = datos[x].Codigo;
                if (num.Trim() == "04")
                {

                }
                else
                {
                    Session["OPCION"] = num.Trim();
                }
            }

            LocalEntyAuto.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
            LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

            CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
            for (int x = 0; x < CodigoAlma.Count(); x++)
            {
                string val = CodigoAlma[x].MasterBrowseFlag;
                string COD = CodigoAlma[x].Concepto;
                if (val.Trim() == "1")
                {
                    Session["OPCIONALMACEN"] = COD.Trim();
                }
                else
                {

                }
            }
            bool hallado = false; //ADD 19/12/16
            if (objListaAnt.Count > 0)
            {
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                {
                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }

                    /**ADD 19/12/16**/
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.TipoMedicamento = 1;
                    LocalEnty.Linea = intobj.Linea;
                    LocalEnty.Familia = intobj.Familia;
                    LocalEnty.SubFamilia = intobj.SubFamilia;
                    LocalEnty.Comentario = intobj.Comentario;
                    LocalEnty.TipoReceta = intobj.TipoReceta;
                    LocalEnty.Accion = "UPDATE";
                    /**/
                }
                hallado = true;

            }


            /********************************/
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult ReturnFindSubFamilia(string modo, string linea, string familia, string subFamilia,
          string descripcion, string descripLinea, string descripFamilia, Nullable<int> indicadoreps, string idWindow, int idgrupo)
        {
            Log.Information("HClinicaControllerSup - ReturnFindSubFamilia - Entrar");
            int index = subFamilia.IndexOf("|");
            if (index > 0)
            {
                var objMiscl = new MA_MiscelaneosDetalle();
                objMiscl.ACCION = "MEDICAMENTOS";
                objMiscl.AplicacionCodigo = "CG";
                objMiscl.CodigoTabla = "SUBFAMILIA";
                string[] cadArray = subFamilia.Trim().Split('|');
                string cadenas = cadArray[1].Replace("[", "");
                cadenas = cadenas.Replace("]", "").Trim();
                cadArray = cadenas.Trim().Split('-');
                objMiscl.ValorCodigo1 = cadArray[0];
                objMiscl.ValorCodigo2 = cadArray[1];
                objMiscl.ValorCodigo3 = cadArray[2];
                if (cadArray.Length > 3)
                {
                    objMiscl.CodigoElemento = cadArray[3];
                }

                var resulMiscelaneosTitulo = SvcMiscelaneos.GetUpListadoServicios(objMiscl);

                if (resulMiscelaneosTitulo.Count == 0)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "El medicamento actualmente no contiene una familia ni subfamilia").Show();
                }
                else
                {
                    resulMiscelaneosTitulo[0].UltimoUsuario = (string)Session["SESIONALMACEN"];

                    if (idgrupo == 0)
                    {
                        var panel = X.GetCmp<Panel>("Panel1");
                        panel.Hidden = false;
                        panel.Visible = true;
                    }


                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    //ADD 10/15
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var txtMedicamento = X.GetCmp<TextField>("Medicamento");
                    var txtMedicamentoDescripcion = X.GetCmp<TextField>("MedicamentoDescripcion");

                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var IndicadorEPS = X.GetCmp<NumberField>("IndicadorEPS");

                    var txtCodAlmacen = X.GetCmp<TextField>("CodAlmacen");



                    if (resulMiscelaneosTitulo.Count > 0)
                    {
                        if (idgrupo > 0)
                        {
                            var panelx = X.GetCmp<Panel>("PanelAddGrupo" + idgrupo);
                            panelx.Hidden = false;
                            panelx.Visible = true;

                            var txtLinea2 = X.GetCmp<TextField>("txtLinea" + idgrupo);
                            var txtFamilia2 = X.GetCmp<TextField>("txtFamilia" + idgrupo);
                            var txtSubFamilia2 = X.GetCmp<TextField>("txtSubFamilia" + idgrupo);
                            //ADD 10/15
                            var txtCodigoComponente2 = X.GetCmp<TextField>("txtCodigoComponente" + idgrupo);
                            var txtMedicamento2 = X.GetCmp<TextField>("txtMedicamento" + idgrupo);
                            var txtMedicamentoDescripcion2 = X.GetCmp<TextField>("txtMedicamentoDescripcion" + idgrupo);

                            var LineaDescripcion2 = X.GetCmp<TextField>("txtLineaDescripcion" + idgrupo);
                            var FamiliaDescripcion2 = X.GetCmp<TextField>("txtFamiliaDescripcion" + idgrupo);
                            var SubFamiliaDescripcion2 = X.GetCmp<TextField>("txtSubFamiliaDescripcion" + idgrupo);
                            var IndicadorEPS2 = X.GetCmp<NumberField>("txtIndicadorEPS" + idgrupo);

                            if (resulMiscelaneosTitulo[0].ACCION == "MED")
                            {
                                txtMedicamento2.FieldLabel = "Medicina";
                            }
                            else
                            {
                                txtMedicamento2.FieldLabel = "DCI";
                            }
                            txtLinea2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo1.Trim());
                            txtFamilia2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo2.Trim());
                            txtSubFamilia2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo3.Trim());
                            //
                            txtCodigoComponente2.SetValue(objMiscl.CodigoElemento);
                            txtMedicamento2.SetValue((resulMiscelaneosTitulo[0].CodigoElemento + "").Trim());
                            txtMedicamentoDescripcion2.SetValue((resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim());
                            ////                                        
                            SubFamiliaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo5.Trim());
                            txtCodigoComponente2.SetValue(objMiscl.CodigoElemento);
                            ////
                            LineaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo6.Trim());
                            FamiliaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo7.Trim());

                            IndicadorEPS2.SetValue(indicadoreps);
                            txtCodAlmacen.SetValue(resulMiscelaneosTitulo[0].UltimoUsuario);//angel15

                            Session["Linea_Med"] = resulMiscelaneosTitulo[0].ValorCodigo1.Trim();
                            Session["Familia_Med"] = resulMiscelaneosTitulo[0].ValorCodigo2.Trim();
                            Session["SubFamilia_Med"] = resulMiscelaneosTitulo[0].ValorCodigo3.Trim();

                            return this.Direct();

                            /*  var objMedica = new BE_Medicamento_FE();

                              objMedica.Linea = resulMiscelaneosTitulo[0].ValorCodigo1.Trim();
                              objMedica.Familia = resulMiscelaneosTitulo[0].ValorCodigo2.Trim();
                              objMedica.SubFamilia = resulMiscelaneosTitulo[0].ValorCodigo3.Trim();
                              objMedica.CodigoComponente = objMiscl.CodigoElemento;
                              objMedica.Medicamento = (resulMiscelaneosTitulo[0].CodigoElemento + "").Trim();
                              objMedica.MedicamentoDescripcion = (resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim();
                              objMedica.SubFamiliaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo5.Trim();
                              objMedica.LineaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo6.Trim();
                              objMedica.FamiliaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo7.Trim();
                              objMedica.IndicadorEPS = indicadoreps;

                              Save_MedicamentoTempGrupo(objMedica, Convert.ToString(idgrupo), descripFamilia);
                              */

                        }
                        else
                        {

                            if (resulMiscelaneosTitulo[0].ACCION == "MED")
                            {
                                txtMedicamento.FieldLabel = "Medicina";
                            }
                            else
                            {
                                txtMedicamento.FieldLabel = "DCI";
                            }
                            txtLinea.SetValue(resulMiscelaneosTitulo[0].ValorCodigo1.Trim());
                            txtFamilia.SetValue(resulMiscelaneosTitulo[0].ValorCodigo2.Trim());
                            txtSubFamilia.SetValue(resulMiscelaneosTitulo[0].ValorCodigo3.Trim());
                            //ADD 25/09/15
                            txtCodigoComponente.SetValue(objMiscl.CodigoElemento);
                            txtMedicamento.SetValue((resulMiscelaneosTitulo[0].CodigoElemento + "").Trim());
                            txtMedicamentoDescripcion.SetValue((resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim());
                            ////                                        
                            SubFamiliaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo5.Trim());
                            txtCodigoComponente.SetValue(objMiscl.CodigoElemento);
                            ////
                            LineaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo6.Trim());
                            FamiliaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo7.Trim());
                            txtCodAlmacen.SetValue(resulMiscelaneosTitulo[0].UltimoUsuario);//angel15
                            ////ADD 09/11/15

                            IndicadorEPS.SetValue(indicadoreps);


                        }
                    }

                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult ReturnFindSubFamiliaX(string modo, string linea, string familia, string subFamilia,
          string descripcion, string descripLinea, string descripFamilia, Nullable<int> indicadoreps, string idWindow, int idgrupo)
        {
            Log.Information("HClinicaControllerSup - ReturnFindSubFamiliaX - Entrar");
            int index = subFamilia.IndexOf("|");
            if (index > 0)
            {
                var objMiscl = new MA_MiscelaneosDetalle();
                objMiscl.ACCION = "MEDICAMENTOS";
                objMiscl.AplicacionCodigo = "CG";
                objMiscl.CodigoTabla = "SUBFAMILIA";
                string[] cadArray = subFamilia.Trim().Split('|');
                string cadenas = cadArray[1].Replace("[", "");
                cadenas = cadenas.Replace("]", "").Trim();
                cadArray = cadenas.Trim().Split('-');
                objMiscl.ValorCodigo1 = cadArray[0];
                objMiscl.ValorCodigo2 = cadArray[1];
                objMiscl.ValorCodigo3 = cadArray[2];
                if (cadArray.Length > 3)
                {
                    objMiscl.CodigoElemento = cadArray[3];
                }

                var resulMiscelaneosTitulo = SvcMiscelaneos.GetUpListadoServicios(objMiscl);
                resulMiscelaneosTitulo[0].UltimoUsuario = (string)Session["SESIONALMACEN"];

                if (idgrupo == 0)
                {
                    var panel = X.GetCmp<Panel>("Panel8");
                    panel.Hidden = false;
                    panel.Visible = true;
                }


                var txtLinea = X.GetCmp<TextField>("LineaX");
                var txtFamilia = X.GetCmp<TextField>("FamiliaX");
                var txtSubFamilia = X.GetCmp<TextField>("SubFamiliaX");

                var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponenteX");
                var txtMedicamento = X.GetCmp<TextField>("MedicamentoX");
                var txtMedicamentoDescripcion = X.GetCmp<TextField>("MedicamentoDescripcionX");

                var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcionX");
                var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcionX");
                var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcionX");
                var IndicadorEPS = X.GetCmp<NumberField>("IndicadorEPSX");
                var UnidadMedida = X.GetCmp<ComboBox>("cbIdUnidadMedidaM");

                var CodAlmacenX = X.GetCmp<TextField>("CodAlmacenX");

                if (resulMiscelaneosTitulo.Count > 0)
                {
                    if (idgrupo > 0)
                    {
                        var panelx = X.GetCmp<Panel>("PanelAddGrupo" + idgrupo);
                        panelx.Hidden = false;
                        panelx.Visible = true;

                        var txtLinea2 = X.GetCmp<TextField>("txtLinea" + idgrupo);
                        var txtFamilia2 = X.GetCmp<TextField>("txtFamilia" + idgrupo);
                        var txtSubFamilia2 = X.GetCmp<TextField>("txtSubFamilia" + idgrupo);
                        //ADD 10/15
                        var txtCodigoComponente2 = X.GetCmp<TextField>("txtCodigoComponente" + idgrupo);
                        var txtMedicamento2 = X.GetCmp<TextField>("txtMedicamento" + idgrupo);
                        var txtMedicamentoDescripcion2 = X.GetCmp<TextField>("txtMedicamentoDescripcion" + idgrupo);

                        var LineaDescripcion2 = X.GetCmp<TextField>("txtLineaDescripcion" + idgrupo);
                        var FamiliaDescripcion2 = X.GetCmp<TextField>("txtFamiliaDescripcion" + idgrupo);
                        var SubFamiliaDescripcion2 = X.GetCmp<TextField>("txtSubFamiliaDescripcion" + idgrupo);
                        var IndicadorEPS2 = X.GetCmp<NumberField>("txtIndicadorEPS" + idgrupo);

                        if (resulMiscelaneosTitulo[0].ACCION == "MED")
                        {
                            txtMedicamento2.FieldLabel = "Medicina";
                        }
                        else
                        {
                            txtMedicamento2.FieldLabel = "DCI";
                        }
                        txtLinea2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo1.Trim());
                        txtFamilia2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo2.Trim());
                        txtSubFamilia2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo3.Trim());
                        //
                        txtCodigoComponente2.SetValue(objMiscl.CodigoElemento);
                        txtMedicamento2.SetValue((resulMiscelaneosTitulo[0].CodigoElemento + "").Trim());
                        txtMedicamentoDescripcion2.SetValue((resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim());
                        ////                                        
                        SubFamiliaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo5.Trim());
                        txtCodigoComponente2.SetValue(objMiscl.CodigoElemento);
                        ////
                        LineaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo6.Trim());
                        FamiliaDescripcion2.SetValue(resulMiscelaneosTitulo[0].ValorCodigo7.Trim());
                        CodAlmacenX.SetValue(resulMiscelaneosTitulo[0].UltimoUsuario);

                        IndicadorEPS2.SetValue(indicadoreps);

                        Session["Linea_Med"] = resulMiscelaneosTitulo[0].ValorCodigo1.Trim();
                        Session["Familia_Med"] = resulMiscelaneosTitulo[0].ValorCodigo2.Trim();
                        Session["SubFamilia_Med"] = resulMiscelaneosTitulo[0].ValorCodigo3.Trim();

                        return this.Direct();

                        /*  var objMedica = new BE_Medicamento_FE();

                          objMedica.Linea = resulMiscelaneosTitulo[0].ValorCodigo1.Trim();
                          objMedica.Familia = resulMiscelaneosTitulo[0].ValorCodigo2.Trim();
                          objMedica.SubFamilia = resulMiscelaneosTitulo[0].ValorCodigo3.Trim();
                          objMedica.CodigoComponente = objMiscl.CodigoElemento;
                          objMedica.Medicamento = (resulMiscelaneosTitulo[0].CodigoElemento + "").Trim();
                          objMedica.MedicamentoDescripcion = (resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim();
                          objMedica.SubFamiliaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo5.Trim();
                          objMedica.LineaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo6.Trim();
                          objMedica.FamiliaDescripcion = resulMiscelaneosTitulo[0].ValorCodigo7.Trim();
                          objMedica.IndicadorEPS = indicadoreps;

                          Save_MedicamentoTempGrupo(objMedica, Convert.ToString(idgrupo), descripFamilia);
                          */

                    }
                    else
                    {

                        if (resulMiscelaneosTitulo[0].ACCION == "MED")
                        {
                            txtMedicamento.FieldLabel = "Medicina";
                        }
                        else
                        {
                            txtMedicamento.FieldLabel = "DCI";
                        }
                        txtLinea.SetValue(resulMiscelaneosTitulo[0].ValorCodigo1.Trim());
                        txtFamilia.SetValue(resulMiscelaneosTitulo[0].ValorCodigo2.Trim());
                        txtSubFamilia.SetValue(resulMiscelaneosTitulo[0].ValorCodigo3.Trim());
                        //ADD 25/09/15
                        txtCodigoComponente.SetValue(objMiscl.CodigoElemento);
                        txtMedicamento.SetValue((resulMiscelaneosTitulo[0].CodigoElemento + "").Trim());
                        txtMedicamentoDescripcion.SetValue((resulMiscelaneosTitulo[0].DescripcionLocal + "").Trim());
                        ////                                        
                        SubFamiliaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo5.Trim());
                        txtCodigoComponente.SetValue(objMiscl.CodigoElemento);
                        ////
                        LineaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo6.Trim());
                        FamiliaDescripcion.SetValue(resulMiscelaneosTitulo[0].ValorCodigo7.Trim());
                        ////ADD 09/11/15
                        CodAlmacenX.SetValue(resulMiscelaneosTitulo[0].UltimoUsuario);
                        IndicadorEPS.SetValue(indicadoreps);
                        Session["DisplayOption"] = resulMiscelaneosTitulo[0].Compania.Trim();

                        //UnidadMedida.SetValue(resulMiscelaneosTitulo[0].Compania)

                    }
                }

            }
            return this.Direct();
        }



        public bool addDataUpdateMedicamentosEpicrisis3(string MODO, String data, int tipo)
        {
            Log.Information("HClinicaControllerSup - addDataUpdateMedicamentosEpicrisis3 - Entrar");

            if (data != null)
            {
                List<BE_MedicamentoEpicrisis_FE> objListaMed = null;
                List<BE_MedicamentoEpicrisis_FE> ObjListarUpdate = (List<BE_MedicamentoEpicrisis_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<BE_MedicamentoEpicrisis_FE>));
                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                }

                if (objListaMed != null && ObjListarUpdate != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Accion != "DELETEINDIV")
                        {
                            foreach (var resultUpd in ObjListarUpdate)
                            {
                                if (result.Secuencia == resultUpd.Secuencia)
                                {
                                    result.Linea = resultUpd.Linea;
                                    result.Familia = resultUpd.Familia;
                                    result.SubFamilia = resultUpd.SubFamilia;
                                    result.SubFamiliaDescripcion = resultUpd.Version;
                                    result.Secuencia = resultUpd.Secuencia;
                                    result.IdUnidadMedida = resultUpd.IdUnidadMedida;
                                    result.Dosis = resultUpd.Dosis;
                                    result.IdVia = resultUpd.IdVia;
                                    result.Cantidad = resultUpd.Cantidad;
                                    result.Frecuencia = resultUpd.Frecuencia;
                                    result.DiasTratamiento = resultUpd.DiasTratamiento;
                                    result.TipoMedicamento = resultUpd.TipoMedicamento;
                                    result.TipoComida = resultUpd.TipoComida;
                                    result.Comentario = resultUpd.Comentario;
                                    result.Indicacion = resultUpd.Indicacion;
                                    result.UnidadTiempo = resultUpd.UnidadTiempo;
                                    result.UsuarioAuditoria = resultUpd.UsuarioAuditoria;
                                    result.Periodo = resultUpd.Periodo;
                                    result.Comentario = resultUpd.Comentario;
                                    result.GrupoMedicamento = resultUpd.GrupoMedicamento;
                                    if (resultUpd.GrupoMedicamento == 4 || resultUpd.GrupoMedicamento == null)
                                    {
                                        result.GrupoMedicamento = 0;
                                    }
                                    //ADD 25/09
                                    result.CodigoComponente = resultUpd.CodigoComponente;
                                    if (result.Accion != "DETALLE")
                                    {
                                        result.Accion = MODO;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }

                //objUpd.GetAll();
            }
            return true;
        }




        public System.Web.Mvc.ActionResult Save_MedicamentoTempEpicrisis(BE_MedicamentoEpicrisis_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTempEpicrisis - Entrar");

            // var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {


                if (objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                    }
                    objMedicamento.TipoComida = objMedicamento.medDia;
                    objMedicamento.UnidadTiempo = objMedicamento.medHora;
                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                    //objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_MedicamentoEpicrisis_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);


                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }

                    }
                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)
                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }
                    string nomtiporeceta = "";
                    var unitiporeceta = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPRECMEDI");
                    foreach (var result in unitiporeceta)
                    {
                        if (objMedicamento.TipoReceta == result.ID)
                        {
                            nomtiporeceta = result.Name;
                        }

                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    //if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }
                    tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tTipoReceta = "";
                    if (objMedicamento.TipoReceta != null || objMedicamento.TipoReceta != 0) { tTipoReceta = " Tipo Receta: " + objMedicamento.TipoReceta; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tTipoReceta + tCantidad + tIndicacion;

                    //objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;

                    int regItems = 0;
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoListEpi2"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi2"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                        foreach (var result in objLista)
                        {


                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        if (objMedicamento.TipoReceta == 1)
                        {
                            objMedicamento.tipoRecetaMedica = "Ambulatorio";
                        }
                        else if (objMedicamento.TipoReceta == 2)
                        {
                            objMedicamento.tipoRecetaMedica = "Hospitalización";
                        }
                        else if (objMedicamento.TipoReceta == 3)
                        {
                            objMedicamento.tipoRecetaMedica = "Emergencia";
                        }
                        else if (objMedicamento.TipoReceta == 4)
                        {
                            objMedicamento.tipoRecetaMedica = "Alta";
                        }

                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi2"] = objLista;
                    }

                    var textd = "storeExamenes" + id;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();
                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel1");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("Dosis");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("Cantidad");
                    Cantidad.SetValue(0);
                    var IdVia = X.GetCmp<NumberField>("IdVia");
                    IdVia.SetValue(0);
                    // var TipoReceta = X.GetCmp<NumberField>("TipoReceta");
                    //TipoReceta.SetValue(0);
                    var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                    IdUnidadMedida.SetValue(0);
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("Accion");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("Presentacion");
                    Presentacion.SetValue("");
                    var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
                    UnidadTiempo.SetValue(0);
                    var Periodo = X.GetCmp<NumberField>("Periodo");
                    Periodo.SetValue(0);
                    var TipoComida = X.GetCmp<NumberField>("TipoComida");
                    TipoComida.SetValue(0);
                    var Indicacion = X.GetCmp<TextField>("Indicacion");
                    Indicacion.SetValue("");

                    //Comentario.SetValue(""); 
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult Save_MedicamentoTempEpi(BE_MedicamentoEpicrisis_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTempEpi - Entrar");
            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {


                if (objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.

                    }
                    objMedicamento.TipoComida = objMedicamento.medDia;
                    objMedicamento.UnidadTiempo = objMedicamento.medHora;
                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_MedicamentoEpicrisis_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }

                    }
                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)
                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }
                    string nomtiporeceta = "";
                    var unitiporeceta = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPRECMEDI");
                    foreach (var result in unitiporeceta)
                    {
                        if (objMedicamento.TipoReceta == result.ID)
                        {
                            nomtiporeceta = result.Name;
                        }

                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    //if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }
                    tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tTipoReceta = "";
                    if (objMedicamento.TipoReceta != null || objMedicamento.TipoReceta != 0) { tTipoReceta = " Tipo Receta: " + objMedicamento.TipoReceta; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tTipoReceta + tCantidad + tIndicacion;

                    //objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;

                    int regItems = 0;
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoListEpi2"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi2"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi2"] = objLista;
                    }

                    /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                        ActivaDescativaButtonSave(true);
                    }*/

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    var textd = "storeExamenes" + id;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel1");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("Dosis");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("Cantidad");
                    Cantidad.SetValue(0);
                    var IdVia = X.GetCmp<NumberField>("IdVia");
                    IdVia.SetValue(0);
                    var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                    IdUnidadMedida.SetValue(0);
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("Accion");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("Presentacion");
                    Presentacion.SetValue("");
                    var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
                    UnidadTiempo.SetValue(0);
                    var Periodo = X.GetCmp<NumberField>("Periodo");
                    Periodo.SetValue(0);
                    var TipoComida = X.GetCmp<NumberField>("TipoComida");
                    TipoComida.SetValue(0);
                    var Indicacion = X.GetCmp<TextField>("Indicacion");
                    Indicacion.SetValue("");

                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_MedicamentoTemp(BE_Medicamento_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTemp - Entrar");

            var Comentario = X.GetCmp<TextField>("Comentario");
            var XIdVia = X.GetCmp<TextField>("IdVia");
            //r.get('IdVia')
            var id2 = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.
                    }
                    objMedicamento.TipoComida = objMedicamento.medDia;
                    objMedicamento.UnidadTiempo = objMedicamento.medHora;
                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_Medicamento_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }

                    }
                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)
                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }

                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    //if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }
                    tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                    objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;
                    int regItems = 0;
                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                    {
                        objMedicamento.TipoReceta = 1;// 1;//OBS:  TIPO MEDICINA
                    }
                    SS_HC_Medicamento_FE ObjTrace = new SS_HC_Medicamento_FE();
                    ObjTrace = objMedicamento;
                    ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.DiasTratamiento = 0;
                    ObjTrace.GrupoMedicamento = 0;
                    regItems = SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(1, ObjTrace);
                    objMedicamento.Accion = "UPDATEINDIV";

                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = 1;
                    objEnt.Accion = "LISTAR";
                    List<SS_HC_Medicamento_FE> objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                    Log.Debug(DateTime.Now + "MedicamentoListar para envio {A}", objListaAnt.Count);
                    BE_Medicamento_FE obtemp;
                    String[] cadArray;

                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        if (intobj.CodAlmacen == "")
                        {
                            //objLista.Add(obtemp);
                        }
                        else
                        {
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            cadArray = intobj.Version.Trim().Split('|');
                            obtemp.LineaDescripcion = cadArray[0];
                            obtemp.FamiliaDescripcion = cadArray[1];
                            obtemp.SubFamiliaDescripcion = cadArray[2];
                            obtemp.MedicamentoDescripcion = cadArray[3];
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;///////////// Editado
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.Medicamento = intobj.CodigoComponente;//ADD
                            obtemp.Comentario = intobj.Comentario;//ADD
                            obtemp.CodAlmacen = intobj.CodAlmacen;
                            obtemp.SecuencialHCE = intobj.SecuencialHCE;
                            Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                            obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                            if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                            {
                                ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                            }
                            obtemp.Periodo = intobj.Periodo;
                            obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                            obtemp.UnidadTiempo = intobj.UnidadTiempo;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Indicacion = intobj.Indicacion;
                            obtemp.TipoReceta = intobj.TipoReceta;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.Accion = "UPDATEINDIV";

                            /**** INICIO INTEROPERABILIDAD MIRTH ***/
                            if (regItems == obtemp.Secuencia)
                            {
                                List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
                                SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                                EntyMIrth.Secuencia = intobj.Secuencia;
                                EntyMIrth.Componente = intobj.CodigoComponente;
                                EntyMIrth.SubFamilia = intobj.SubFamilia.Trim();
                                EntyMIrth.Familia = intobj.Familia.Trim();
                                EntyMIrth.Linea = intobj.Linea.Trim();
                                EntyMIrth.UnidadMedida = intobj.IdUnidadMedida;
                                EntyMIrth.Cantidad = intobj.Cantidad;
                                EntyMIrth.Via = intobj.IdVia.ToString();
                                EntyMIrth.Dosis = intobj.Dosis;

                                if (!string.IsNullOrEmpty(intobj.TipoComida.ToString()))
                                {
                                    if (intobj.TipoComida == 64)
                                    {
                                        var calculo = Convert.ToDouble(intobj.Periodo) * 0.042;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 65)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo);
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 66)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo) * 7;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 67)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo) * 30;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                }

                                if (!string.IsNullOrEmpty(intobj.UnidadTiempo.ToString()))
                                {
                                    if (intobj.UnidadTiempo == 64)
                                    {
                                        var calculo = Convert.ToDouble(intobj.Frecuencia);
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 65)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 24;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 66)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 168;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 67)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 720;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                }

                                EntyMIrth.IndicadorEPS = intobj.IndicadorEPS;
                                EntyMIrth.TipoReceta = intobj.TipoReceta;
                                EntyMIrth.INDICACIONESPECIFICA = intobj.Indicacion;
                                EntyMIrth.SECUENCIALHCE = intobj.SecuencialHCE;

                                EntyMIrth.Estado = intobj.Estado;
                                EntyMIrth.UsuarioCreacion = intobj.UsuarioCreacion;
                                EntyMIrth.FechaCreacion = DateTime.Now;
                                EntyMIrth.UsuarioModificacion = intobj.UsuarioModificacion;
                                EntyMIrth.FechaModificacion = DateTime.Now;
                                ListaMirth.Add(EntyMIrth);
                                Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                            }
                            /**** FIN MIRTH ***/
                            objLista.Add(obtemp);
                        }
                    }
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    Session["HC_MedicamentoList"] = objLista;

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    var textd = "storeExamenes" + id;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel1");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("Dosis");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("Cantidad");
                    Cantidad.SetValue(0);
                    var IdVia = X.GetCmp<NumberField>("IdVia");
                    IdVia.SetValue(0);
                    var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                    IdUnidadMedida.SetValue(0);
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("Accion");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("Presentacion");
                    Presentacion.SetValue("");
                    var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
                    UnidadTiempo.SetValue(0);
                    var Periodo = X.GetCmp<NumberField>("Periodo");
                    Periodo.SetValue(0);
                    var TipoComida = X.GetCmp<NumberField>("TipoComida");
                    TipoComida.SetValue(0);
                    var Indicacion = X.GetCmp<TextField>("Indicacion");
                    Indicacion.SetValue("");

                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }

            }
            return this.Direct();
        }


        /**********************ADD 12/04/17 ORLANDO*********************/
        public System.Web.Mvc.ActionResult Save_MedicamentoTemp_X(/*BE_Medicamento_FE objMedicamento,*/ string dato, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTemp_X - Entrar");

            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";

            var objMedicamento = new BE_Medicamento_FE();
            var objMedicamentotemp = new List<BE_Medicamento_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (dato.Trim().Length > 0)
                {


                    objMedicamentotemp = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(dato, typeof(List<BE_Medicamento_FE>));

                    objMedicamento.Linea = objMedicamentotemp[0].Linea;
                    objMedicamento.LineaDescripcion = objMedicamentotemp[0].LineaDescripcion;
                    objMedicamento.Familia = objMedicamentotemp[0].Familia;
                    objMedicamento.FamiliaDescripcion = objMedicamentotemp[0].FamiliaDescripcion;
                    objMedicamento.SubFamilia = objMedicamentotemp[0].SubFamilia;
                    objMedicamento.CodigoComponente = objMedicamentotemp[0].CodigoComponente;
                    objMedicamento.SubFamiliaDescripcion = objMedicamentotemp[0].SubFamiliaDescripcion;
                    objMedicamento.Medicamento = objMedicamentotemp[0].Medicamento;
                    objMedicamento.MedicamentoDescripcion = objMedicamentotemp[0].MedicamentoDescripcion;
                    objMedicamento.Presentacion = objMedicamentotemp[0].Presentacion;
                    objMedicamento.Cantidad = objMedicamentotemp[0].Cantidad;
                    objMedicamento.IdUnidadMedida = objMedicamentotemp[0].IdUnidadMedida;
                    objMedicamento.IndicadorEPS = objMedicamentotemp[0].IndicadorEPS;
                    objMedicamento.Secuencia = 0;/* objMedicamentotemp[0].Secuencia;*/
                    objMedicamento.Indicacion = objMedicamentotemp[0].Indicacion;
                    objMedicamento.CodAlmacen = objMedicamentotemp[0].CodAlmacen;
                    objMedicamento.Accion = objMedicamentotemp[0].Accion;

                }


                if (/*objMedicamento.Dosis != null &&*/ objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.

                    }

                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 4;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_Medicamento_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    //foreach (var result in unidadtiempo)
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    List<SvcMiscelaneos.comboModelGenerico> listTIEMPO = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listTIEMPO)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }

                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }
                    }

                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)

                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }
                    }

                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }*/
                    tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria =/* tPresentacion + tDosis +*/ tIdUnidadMedida +/* tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia +*/ tCantidad + tIndicacion;

                    objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;

                    int regItems = 0;
                    SS_HC_Medicamento_FE ObjTrace = new SS_HC_Medicamento_FE();
                    ObjTrace = objMedicamento;
                    ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.DiasTratamiento = 0;
                    ObjTrace.GrupoMedicamento = 0;
                    regItems = SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(1, ObjTrace);
                    objMedicamento.Accion = "UPDATEINDIV";


                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = 4;
                    objEnt.Accion = "LISTAR";
                    List<SS_HC_Medicamento_FE> objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                    Log.Debug(DateTime.Now + " objListaAnt para enviar {A}", objListaAnt.Count);
                    BE_Medicamento_FE obtemp;
                    String[] cadArray;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        if (intobj.CodAlmacen == "")
                        {
                            Log.Information("Sin Almacen " + intobj.SecuencialHCE);
                        }
                        else
                        {
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            cadArray = intobj.Version.Trim().Split('|');
                            obtemp.LineaDescripcion = cadArray[0];
                            obtemp.FamiliaDescripcion = cadArray[1];
                            obtemp.SubFamiliaDescripcion = cadArray[2];
                            obtemp.MedicamentoDescripcion = cadArray[3];
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;///////////// Editado
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.Medicamento = intobj.CodigoComponente;//ADD
                            obtemp.Comentario = intobj.Comentario;//ADD
                            obtemp.CodAlmacen = intobj.CodAlmacen;
                            obtemp.SecuencialHCE = intobj.SecuencialHCE;
                            Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                            obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                            if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                            {
                                ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                            }
                            obtemp.Periodo = intobj.Periodo;
                            obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                            obtemp.UnidadTiempo = intobj.UnidadTiempo;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Indicacion = intobj.Indicacion;
                            obtemp.TipoReceta = intobj.TipoReceta;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.Accion = "UPDATEINDIV";
                            objLista.Add(obtemp);

                            if (regItems == obtemp.Secuencia)
                            {
                                /**** INICIO INTEROPERABILIDAD MIRTH ***/
                                List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
                                SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                                EntyMIrth.Secuencia = intobj.Secuencia;
                                EntyMIrth.Componente = intobj.CodigoComponente;
                                EntyMIrth.SubFamilia = intobj.SubFamilia.Trim();
                                EntyMIrth.Familia = intobj.Familia.Trim();
                                EntyMIrth.Linea = intobj.Linea.Trim();
                                EntyMIrth.UnidadMedida = intobj.IdUnidadMedida;
                                EntyMIrth.Cantidad = intobj.Cantidad;
                                if (!string.IsNullOrEmpty(intobj.IdVia.ToString()))
                                {
                                    EntyMIrth.Via = intobj.IdVia.ToString();
                                }
                                else
                                {
                                    EntyMIrth.Via = "0";
                                }
                                if (!string.IsNullOrEmpty(intobj.Dosis))
                                {
                                    EntyMIrth.Dosis = intobj.Dosis.ToString();
                                }
                                else
                                {
                                    EntyMIrth.Dosis = "0";
                                }
                                if (!string.IsNullOrEmpty(intobj.TipoComida.ToString()))
                                {
                                    if (intobj.TipoComida == 64)
                                    {
                                        var calculo = Convert.ToDouble(intobj.Periodo) * 0.042;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 65)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo);
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 66)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo) * 7;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                    if (intobj.TipoComida == 67)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Periodo) * 30;
                                        EntyMIrth.DiasTratamiento = calculo.ToString();
                                    }
                                }

                                if (!string.IsNullOrEmpty(intobj.UnidadTiempo.ToString()))
                                {
                                    if (intobj.UnidadTiempo == 64)
                                    {
                                        var calculo = Convert.ToDouble(intobj.Frecuencia);
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 65)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 24;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 66)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 168;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                    if (intobj.UnidadTiempo == 67)
                                    {
                                        var calculo = Convert.ToDecimal(intobj.Frecuencia) * 720;
                                        EntyMIrth.Frecuencia = calculo.ToString();
                                    }
                                }

                                EntyMIrth.IndicadorEPS = intobj.IndicadorEPS;
                                EntyMIrth.TipoReceta = intobj.TipoReceta;
                                EntyMIrth.INDICACIONESPECIFICA = intobj.Indicacion;
                                EntyMIrth.SECUENCIALHCE = intobj.SecuencialHCE;

                                EntyMIrth.Estado = intobj.Estado;
                                EntyMIrth.UsuarioCreacion = intobj.UsuarioCreacion;
                                EntyMIrth.FechaCreacion = DateTime.Now;
                                EntyMIrth.UsuarioModificacion = intobj.UsuarioModificacion;
                                EntyMIrth.FechaModificacion = DateTime.Now;

                                ListaMirth.Add(EntyMIrth);

                                Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                                /**** FIN INTEROPERABILIDAD MIRTH ***/

                            }
                        }
                    }
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    Session["HC_MedicamentoList"] = objLista;

                    var textd = "storeExamenes1" /*+ id*/;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel8");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("LineaX");
                    var txtFamilia = X.GetCmp<TextField>("FamiliaX");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamiliaX");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponenteX");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcionX");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcionX");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcionX");
                    var txtAIndicacion = X.GetCmp<TextArea>("IndicacionX");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("DosisX");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("FrecuenciaX");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamientoX");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("CantidadX");
                    Cantidad.SetValue(0);

                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("AccionX");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("PresentacionX");
                    Presentacion.SetValue("");

                    var Indicacion = X.GetCmp<TextField>("IndicacionX");
                    Indicacion.SetValue("");

                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_MedicamentoTemp_NO_Farmacologicos(/*BE_Medicamento_FE objMedicamento,*/ string dato, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTemp_NO_Farmacologicos - Entrar");

            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";

            var objMedicamento = new BE_Medicamento_FE();
            var objMedicamentotemp = new List<BE_Medicamento_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (dato.Trim().Length > 0)
                {


                    // objMedicamentotemp = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(dato, typeof(List<BE_Medicamento_FE>));

                    objMedicamento.Linea = "04";
                    objMedicamento.LineaDescripcion = "";
                    objMedicamento.Familia = "4068";
                    objMedicamento.FamiliaDescripcion = "";
                    objMedicamento.SubFamilia = "5018";
                    objMedicamento.CodigoComponente = "0000007271";
                    objMedicamento.SubFamiliaDescripcion = "";
                    objMedicamento.Medicamento = "22";
                    objMedicamento.MedicamentoDescripcion = "";
                    objMedicamento.Presentacion = "";
                    objMedicamento.Cantidad = Convert.ToDecimal(22);
                    objMedicamento.IdUnidadMedida = 49;
                    objMedicamento.IndicadorEPS = 2;
                    objMedicamento.Secuencia = 0;/* objMedicamentotemp[0].Secuencia;*/
                    objMedicamento.Indicacion = "nada";
                    objMedicamento.CodAlmacen = "1006";
                    objMedicamento.Accion = "NUEVO";

                }


                if (/*objMedicamento.Dosis != null &&*/ objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.

                    }

                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 4;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_Medicamento_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    //foreach (var result in unidadtiempo)
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    List<SvcMiscelaneos.comboModelGenerico> listTIEMPO = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listTIEMPO)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }

                    }
                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)
                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }*/
                    tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria =/* tPresentacion + tDosis +*/ tIdUnidadMedida +/* tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia +*/ tCantidad + tIndicacion;

                    objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;

                    int regItems = 0;
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoNoFarmaco"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoNoFarmaco"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 0;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoNoFarmaco"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoNoFarmaco"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 0;
                    }

                    /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                        ActivaDescativaButtonSave(true);
                    }*/

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;


                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }
        /**********************ADD 29/03/2017***************************/
        public System.Web.Mvc.ActionResult Save_Medicamentos_TEMP(string data, string data2, int idgrupo, string codigo, string indicador)
        {
            Log.Information("HClinicaControllerSup - Save_Medicamentos_TEMP - Entrar");

            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();
            var objMedica = new BE_Medicamento_FE();
            if (data.Trim().Length > 0)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<BE_Medicamento_FE>));

                objMedica.Linea = ObjLista1[0].Linea.Trim();
                objMedica.Familia = ObjLista1[0].Familia.Trim();
                objMedica.SubFamilia = ObjLista1[0].SubFamilia.Trim();
                objMedica.CodigoComponente = codigo;
                objMedica.Medicamento = (ObjLista1[0].Medicamento + "").Trim();
                objMedica.MedicamentoDescripcion = (ObjLista1[0].MedicamentoDescripcion + "").Trim();
                objMedica.SubFamiliaDescripcion = ObjLista1[0].SubFamiliaDescripcion.Trim();
                objMedica.LineaDescripcion = ObjLista1[0].LineaDescripcion.Trim();
                objMedica.FamiliaDescripcion = ObjLista1[0].FamiliaDescripcion.Trim();
                objMedica.Cantidad = ObjLista1[0].Cantidad;
                objMedica.Dosis = ObjLista1[0].Dosis;
                objMedica.IdUnidadMedida = ObjLista1[0].IdUnidadMedida;
                objMedica.IndicadorEPS = Convert.ToInt32(indicador);
                objMedica.CodAlmacen = ObjLista1[0].CodAlmacen;
                objMedica.Forma = 2;
                Save_MedicamentoTempGrupo(objMedica, Convert.ToString(idgrupo), data2);

                string nm = "PanelAddGrupo" + Convert.ToString(idgrupo);
                var panel = X.GetCmp<Panel>(nm);
                panel.Hidden = true;
                panel.Visible = false;


            }

            return this.Direct();
        }
        /**********************ADD 28/11/16 ORLANDO*********************/
        public System.Web.Mvc.ActionResult Save_MedicamentoTempGrupo(BE_Medicamento_FE objMedicamento, String id, String array01)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTempGrupo - Entrar");

            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";

            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();


            if (array01.Trim().Length > 0)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(array01, typeof(List<BE_Medicamento_FE>));
            }





            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                int registro = -1;


                objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                objMedicamento.Accion = "NUEVO";  //OBS
                objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                objMedicamento.Comentario = Comentario.Text;
                string mensage = "";
                var objLista = new List<BE_Medicamento_FE>();
                Random rnd = new Random();
                objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                /*****/
                string tiempo1 = "";
                string tiempo2 = "";
                //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                foreach (var result in unidadtiempo)
                {
                    if (objMedicamento.UnidadTiempo == result.ID)
                    {
                        tiempo1 = result.Name;
                    }
                    if (objMedicamento.TipoComida == result.ID)
                    {
                        tiempo2 = result.Name;
                    }
                }
                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                foreach (var result in unidadmedida)
                {
                    if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                    {
                        medida = result.Name.Trim();
                    }

                }
                string nomvia = "";
                //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                //foreach (var result in univia)
                string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                foreach (var result in listVIA)
                {
                    if (objMedicamento.IdVia == result.ID)
                    {
                        nomvia = result.Name;
                    }

                }
                /*****/
                string tPresentacion = "";
                if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                string tDosis = "";
                /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }*/
                tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                string tIdUnidadMedida = "";
                if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                string tFrecuencia = "";
                if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                string tUTiempo = "";
                if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                string tPeriodo = "";
                if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                string tUTiempo2 = "";
                if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                string tVia = "";
                if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                string tCantidad = "";
                if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                string tIndicacion = "";
                if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                int regItems = 0;
                //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                if (Session["HC_MedicamentoList"] == null)
                {
                    objMedicamento.Secuencia = 1;
                    objLista.Add(objMedicamento);
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                }
                else
                {
                    int mayor = 0;
                    objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];

                    /***** carga datos temporales de la grid*****/
                    foreach (BE_Medicamento_FE list in objLista)
                    {
                        foreach (BE_Medicamento_FE list2 in ObjLista1)
                        {
                            if (list.GrupoMedicamento == list2.GrupoMedicamento && list.Secuencia == list2.Secuencia)
                            {
                                list.Dosis = list2.Dosis;
                                list.IdUnidadMedida = list2.IdUnidadMedida;
                                list.Cantidad = list2.Cantidad;
                            }
                        }
                    }
                    Session["HC_MedicamentoList"] = objLista;

                    /*******************/

                    foreach (var result in objLista)
                    {
                        if (mayor < result.Secuencia)
                        {
                            mayor = result.Secuencia;
                        }
                    }
                    //regItems = objLista.Count + 1;



                    regItems = mayor + 1;
                    objMedicamento.Secuencia = regItems;
                    objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                    objLista.Add(objMedicamento);
                    Session["HC_MedicamentoList"] = objLista;
                }

                /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                if (registro > 0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                    else mensage = " actualizó ";
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                    X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                    ActivaDescativaButtonSave(true);
                }*/
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            var textd = "storeExamenes" + id;
            var store = X.GetCmp<Store>(textd);
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

            /* var cbT*/

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");
            txtAIndicacion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            /***ADD 19/12/16***/
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");

            Comentario.SetValue("");
            /******/

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }

        /**********************ADD 28/11/16 ORLANDO*********************/
        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_CCEP0304(BE_Medicamento_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Editar_MedicamentoTemp_CCEP0304 - Entrar");

            string mensage = "";
            var objLista = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoList"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";
                //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                string nomvia = "";

                //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                var univia = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));


                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (BE_Medicamento_FE result in objLista)
                {
                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }

                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }*/
                        tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATEINDIV"; }
                        int IdSecuencia = 0;
                        SS_HC_Medicamento_FE ObjTrace = new SS_HC_Medicamento_FE();
                        ObjTrace = result;
                        ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //ObjTrace.DiasTratamiento = 0;
                        ObjTrace.GrupoMedicamento = 0;
                        IdSecuencia = SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(1, ObjTrace);

                        Log.Debug(DateTime.Now + " setMantenimientoMedicamentosAuditoria {A}", ObjTrace.SecuencialHCE);
                        Log.Information(" Accion " + ObjTrace.Accion);
                        /**** INICIO INTEROPERABILIDAD MIRTH ***/
                        List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
                        SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                        EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                        EntyMIrth.Secuencia = ObjTrace.Secuencia;
                        EntyMIrth.Componente = ObjTrace.CodigoComponente;
                        EntyMIrth.SubFamilia = ObjTrace.SubFamilia.Trim();
                        EntyMIrth.Familia = ObjTrace.Familia.Trim();
                        EntyMIrth.Linea = ObjTrace.Linea.Trim();
                        EntyMIrth.UnidadMedida = ObjTrace.IdUnidadMedida;
                        EntyMIrth.Cantidad = ObjTrace.Cantidad;
                        EntyMIrth.Via = ObjTrace.IdVia.ToString();
                        EntyMIrth.Dosis = ObjTrace.Dosis;
                        if (!string.IsNullOrEmpty(ObjTrace.TipoComida.ToString()))
                        {
                            if (ObjTrace.TipoComida == 64)
                            {
                                var calculo = Convert.ToDouble(ObjTrace.Periodo) * 0.042;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 65)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo);
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 66)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo) * 7;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 67)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo) * 30;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                        }

                        if (!string.IsNullOrEmpty(ObjTrace.UnidadTiempo.ToString()))
                        {
                            if (ObjTrace.UnidadTiempo == 64)
                            {
                                var calculo = Convert.ToDouble(ObjTrace.Frecuencia);
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 65)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 24;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 66)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 168;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 67)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 720;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                        }

                        EntyMIrth.IndicadorEPS = ObjTrace.IndicadorEPS;
                        EntyMIrth.TipoReceta = ObjTrace.TipoReceta;
                        EntyMIrth.INDICACIONESPECIFICA = ObjTrace.Indicacion;
                        EntyMIrth.SECUENCIALHCE = ObjTrace.SecuencialHCE;
                        EntyMIrth.Estado = ObjTrace.Estado;
                        EntyMIrth.UsuarioCreacion = ObjTrace.UsuarioCreacion;
                        EntyMIrth.FechaCreacion = DateTime.Now;
                        EntyMIrth.UsuarioModificacion = ObjTrace.UsuarioModificacion;
                        EntyMIrth.FechaModificacion = DateTime.Now;
                        ListaMirth.Add(EntyMIrth);

                        Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                        /**** FIN INTEROPERABILIDAD MIRTH ***/
                    }
                    objLista2.Add(result);
                }
                ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                Session["HC_MedicamentoList"] = objLista2;
            }

            var store = X.GetCmp<Store>("storeExamenes0");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            txtAIndicacion.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");

            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");

        }

        public System.Web.Mvc.ActionResult Editar_MedicamentoEpiTemp_CCEP0304(BE_Medicamento_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Editar_MedicamentoEpiTemp_CCEP0304 - Entrar");

            string mensage = "";
            var objLista = new List<BE_MedicamentoEpicrisis_FE>();
            var objLista2 = new List<BE_MedicamentoEpicrisis_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoListEpi2"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";
                //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");

                string nomvia = "";
                //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                var univia = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                string nomtiporeceta = "";
                var unitiporeceta = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPRECMEDI");

                objLista = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                foreach (BE_MedicamentoEpicrisis_FE result in objLista)
                {

                    if (result.TipoReceta == 1)
                    {
                        result.tipoRecetaMedica = "Ambulatorio";
                    }
                    else if (result.TipoReceta == 2)
                    {
                        result.tipoRecetaMedica = "Hospitalización";
                    }
                    else if (result.TipoReceta == 3)
                    {
                        result.tipoRecetaMedica = "Emergencia";
                    }
                    else if (result.TipoReceta == 4)
                    {
                        result.tipoRecetaMedica = "Alta";
                    }

                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.TipoReceta = objMedicamento.TipoReceta;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }
                        foreach (var result4 in unitiporeceta)
                        {
                            if (objMedicamento.TipoReceta == result4.ID)
                            {
                                nomtiporeceta = result4.Name;
                            }

                        }
                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }*/
                        tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tTipoReceta = "";
                        if (objMedicamento.TipoReceta != null || objMedicamento.TipoReceta != 0) { tTipoReceta = " Tipo Receta: " + objMedicamento.TipoReceta; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tTipoReceta + tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATEINDIV"; }


                    }
                    objLista2.Add(result);
                }
                Session["HC_MedicamentoListEpi2"] = objLista2;
            }



            var store = X.GetCmp<Store>("storeExamenes0");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            txtAIndicacion.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");


            /* IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);
             ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
             */
            /* if (IdSecuencia > 0)
             {
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                 else mensage = " actualizó ";
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                 Session["HC_MedicamentoList"] = null;
                 Session["HC_MedicamentoDetalleList"] = null;
                 Session["HC_MedicamentoDetalleListDELETE"] = null;
                 eventoLoadPostFormulario(true, "storeExamenes", null);
                 eventoPostFormulario(true, "");*/
            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");
            /* }
             else
             {
                 eventoPostFormulario(false, "");
                 return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
             }*/
        }
        /**********************ADD 12/04/17 ORLANDO*********************/
        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_X(/*BE_Medicamento_FE objMedicamento,*/string dato, String id)
        {
            Log.Information("HClinicaControllerSup - Editar_MedicamentoTemp_X - Entrar");

            string mensage = "";
            var objLista = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();

            var objMedicamento = new BE_Medicamento_FE();
            var objMedicamentotemp = new List<BE_Medicamento_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoList"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";


                if (dato.Trim().Length > 0)
                {
                    objMedicamentotemp = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(dato, typeof(List<BE_Medicamento_FE>));

                    objMedicamento.Linea = objMedicamentotemp[0].Linea;
                    objMedicamento.LineaDescripcion = objMedicamentotemp[0].LineaDescripcion;
                    objMedicamento.Familia = objMedicamentotemp[0].Familia;
                    objMedicamento.FamiliaDescripcion = objMedicamentotemp[0].FamiliaDescripcion;
                    objMedicamento.SubFamilia = objMedicamentotemp[0].SubFamilia;
                    objMedicamento.CodigoComponente = objMedicamentotemp[0].CodigoComponente;
                    objMedicamento.SubFamiliaDescripcion = objMedicamentotemp[0].SubFamiliaDescripcion;
                    objMedicamento.Medicamento = objMedicamentotemp[0].Medicamento;
                    objMedicamento.MedicamentoDescripcion = objMedicamentotemp[0].MedicamentoDescripcion;
                    objMedicamento.Presentacion = objMedicamentotemp[0].Presentacion;
                    objMedicamento.Cantidad = objMedicamentotemp[0].Cantidad;
                    objMedicamento.IdUnidadMedida = objMedicamentotemp[0].IdUnidadMedida;
                    objMedicamento.IndicadorEPS = objMedicamentotemp[0].IndicadorEPS;
                    objMedicamento.Indicacion = objMedicamentotemp[0].Indicacion;
                    objMedicamento.Secuencia = objMedicamentotemp[0].Secuencia;
                    objMedicamento.Accion = objMedicamentotemp[0].Accion;
                }

                //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                string nomvia = "";
                //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                var univia = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (BE_Medicamento_FE result in objLista)
                {
                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }

                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        /*if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }*/
                        tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis);
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || objMedicamento.Cantidad != 0) { tCantidad = " Cantidad: " + objMedicamento.Cantidad; }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = /*tPresentacion + tDosis +*/ tIdUnidadMedida + /*tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia +*/ tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATEINDIV"; }
                        int IdSecuencia = 0;
                        SS_HC_Medicamento_FE ObjTrace = new SS_HC_Medicamento_FE();
                        ObjTrace = result;
                        ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //ObjTrace.DiasTratamiento = 0;
                        ObjTrace.GrupoMedicamento = 0;
                        IdSecuencia = SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(1, ObjTrace);
                        Log.Debug(DateTime.Now + " setMantenimientoMedicamentosAuditoria {A}", ObjTrace.SecuencialHCE);
                        Log.Information(" Accion " + ObjTrace.Accion);
                        /**** INICIO INTEROPERABILIDAD MIRTH ***/
                        List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
                        SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                        EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                        EntyMIrth.Secuencia = ObjTrace.Secuencia;
                        EntyMIrth.Componente = ObjTrace.CodigoComponente;
                        EntyMIrth.SubFamilia = ObjTrace.SubFamilia.Trim();
                        EntyMIrth.Familia = ObjTrace.Familia.Trim();
                        EntyMIrth.Linea = ObjTrace.Linea.Trim();
                        EntyMIrth.UnidadMedida = ObjTrace.IdUnidadMedida;
                        EntyMIrth.Cantidad = ObjTrace.Cantidad;
                        if (!string.IsNullOrEmpty(ObjTrace.IdVia.ToString()))
                        {
                            EntyMIrth.Via = ObjTrace.IdVia.ToString();
                        }
                        else
                        {
                            EntyMIrth.Via = "0";
                        }
                        if (!string.IsNullOrEmpty(ObjTrace.Dosis))
                        {
                            EntyMIrth.Dosis = ObjTrace.Dosis;
                        }
                        else
                        {
                            EntyMIrth.Dosis = "0";
                        }
                        if (!string.IsNullOrEmpty(ObjTrace.TipoComida.ToString()))
                        {
                            if (ObjTrace.TipoComida == 64)
                            {
                                var calculo = Convert.ToDouble(ObjTrace.Periodo) * 0.042;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 65)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo);
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 66)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo) * 7;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                            if (ObjTrace.TipoComida == 67)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Periodo) * 30;
                                EntyMIrth.DiasTratamiento = calculo.ToString();
                            }
                        }

                        if (!string.IsNullOrEmpty(ObjTrace.UnidadTiempo.ToString()))
                        {
                            if (ObjTrace.UnidadTiempo == 64)
                            {
                                var calculo = Convert.ToDouble(ObjTrace.Frecuencia);
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 65)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 24;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 66)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 168;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                            if (ObjTrace.UnidadTiempo == 67)
                            {
                                var calculo = Convert.ToDecimal(ObjTrace.Frecuencia) * 720;
                                EntyMIrth.Frecuencia = calculo.ToString();
                            }
                        }

                        EntyMIrth.IndicadorEPS = ObjTrace.IndicadorEPS;
                        EntyMIrth.TipoReceta = ObjTrace.TipoReceta;
                        EntyMIrth.INDICACIONESPECIFICA = ObjTrace.Indicacion;
                        EntyMIrth.SECUENCIALHCE = ObjTrace.SecuencialHCE;

                        EntyMIrth.Estado = ObjTrace.Estado;
                        EntyMIrth.UsuarioCreacion = ObjTrace.UsuarioCreacion;
                        EntyMIrth.FechaCreacion = DateTime.Now;
                        EntyMIrth.UsuarioModificacion = ObjTrace.UsuarioModificacion;
                        EntyMIrth.FechaModificacion = DateTime.Now;

                        ListaMirth.Add(EntyMIrth);
                        Log.Debug(DateTime.Now + " MedicamentoListar ListaMirth Cantidad   ", ListaMirth.Count);

                        SS_HC_AuditRoyal objAudit = new SS_HC_AuditRoyal();

                        Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                        //dynamic DataKey;
                        //DataKey = new
                        //{
                        //    UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                        //    IdEpisodioAtencion = ENTITY_GLOBAL.Instance.IdEpisodioAtencion,
                        //    EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                        //    IdPaciente = ENTITY_GLOBAL.Instance.PacienteID,
                        //    IdMedico = ENTITY_GLOBAL.Instance.IdMedico
                        //};
                        //objAudit.PrimaryKeyData = Newtonsoft.Json.JsonConvert.SerializeObject(DataKey);
                        //objAudit.Aplicacion = ENTITY_GLOBAL.Instance.APPCODIGO;
                        //objAudit.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        //objAudit.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                        //objAudit.HostName = ENTITY_GLOBAL.Instance.HostName;
                        //objAudit.TableName = "SaludRecetaIngreso";
                        //objAudit.Type = "U";
                        //objAudit.UpdateDate = DateTime.Now;
                        //objAudit.VistaData = Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth);
                        //objAudit.Accion = "INSERT";
                        //SvcAuditoria.setMantenimiento(objAudit);

                        /**** FIN INTEROPERABILIDAD MIRTH ***/
                    }
                    objLista2.Add(result);
                }
                ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                Session["HC_MedicamentoList"] = objLista2;
            }


            var store = X.GetCmp<Store>("storeExamenes1");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel8");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("LineaX");
            var txtFamilia = X.GetCmp<TextField>("FamiliaX");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamiliaX");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponenteX");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcionX");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcionX");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcionX");


            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            /* txtAIndicacion.SetValue("");*/

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("DosisX");
            Dosis.SetValue(0);

            var Cantidad = X.GetCmp<NumberField>("CantidadX");
            Cantidad.SetValue(0);

            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedidaM");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("AccionX");
            Accion.SetValue("");

            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");

        }

        /*********************ADD 30/03/2017 ORLANDO********************/
        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_Grupos(String array01,/*BE_Medicamento_FE objMedicamento,*/ String id)
        {
            Log.Information("HClinicaControllerSup - Editar_MedicamentoTemp_Grupos - Entrar");

            string mensage = "";
            var objLista = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();
            var objMedica = new BE_Medicamento_FE();
            if (array01.Trim().Length > 0)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(array01, typeof(List<BE_Medicamento_FE>));



                if (Session["HC_MedicamentoList"] != null)
                {
                    objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    foreach (BE_Medicamento_FE result in objLista)
                    {
                        if (ObjLista1[0].Secuencia == result.Secuencia & ObjLista1[0].SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == Convert.ToInt32(id))
                        {
                            result.IdUnidadMedida = ObjLista1[0].IdUnidadMedida;
                            result.Dosis = ObjLista1[0].Dosis;
                            result.Cantidad = ObjLista1[0].Cantidad;
                            if (result.Accion != "NUEVO")
                            { result.Accion = "UPDATEINDIV"; }
                        }
                        objLista2.Add(result);
                    }
                    Session["HC_MedicamentoList"] = objLista2;
                }


                var store = X.GetCmp<Store>("storeExamenes" + id);
                store.Reload();

                //var btn = X.GetCmp<Button>("cmdGuardar");
                var panel = X.GetCmp<Panel>("PanelAddGrupo" + id);
                panel.Hidden = true;
                panel.Visible = false;
                var txtLinea = X.GetCmp<TextField>("txtLinea" + id);
                var txtFamilia = X.GetCmp<TextField>("txtFamilia" + id);
                var txtSubFamilia = X.GetCmp<TextField>("txtSubFamilia" + id);
                var txtCodigoComponente = X.GetCmp<TextField>("txtCodigoComponente" + id);
                var LineaDescripcion = X.GetCmp<TextField>("txtLineaDescripcion" + id);
                var FamiliaDescripcion = X.GetCmp<TextField>("txtFamiliaDescripcion" + id);
                var SubFamiliaDescripcion = X.GetCmp<TextField>("txtSubFamiliaDescripcion" + id);
                txtLinea.SetValue("");
                txtFamilia.SetValue("");
                txtSubFamilia.SetValue("");
                txtCodigoComponente.SetValue("");
                SubFamiliaDescripcion.SetValue("");
                LineaDescripcion.SetValue("");
                FamiliaDescripcion.SetValue("");
                var Dosis = X.GetCmp<NumberField>("txtDosis" + id);
                Dosis.SetValue(0);
                var Cantidad = X.GetCmp<NumberField>("txtCantidad" + id);
                Cantidad.SetValue(0);
                var Accion = X.GetCmp<TextField>("txtAccion" + id);
                Accion.SetValue("");
            }
            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");

        }

        /**************************************************************/
        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTODETALLEINDI(string VALOR)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTODETALLEINDI - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Indicaciones_FE>();
                var objLista = new List<SS_HC_Indicaciones_FE>();
                var objListaLlega = new List<SS_HC_Indicaciones_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    if (Session["HC_MedicamentoDetalleList"] != null)
                    {
                        objListaLlega = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            int Secuencia = (int)Session["HC_MedicamentoID"];
                            foreach (SS_HC_Indicaciones_FE objEntity1 in objListaLlega)
                            {
                                if (objEntity1.SecuenciaMedicamento == Secuencia && objEntity1.GrupoMedicamento == 0)
                                {
                                    if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                    {
                                        objEntity1.Accion = "UPDATE";
                                    }
                                    objLista.Add(objEntity1);
                                }
                            }
                        }
                    }
                    else
                    {
                        var LocalIndicaciones = new SS_HC_Indicaciones_FE();
                        int Secuencia = 0;
                        LocalIndicaciones.Accion = "LISTAR";
                        LocalIndicaciones.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalIndicaciones.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalIndicaciones.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            Secuencia = (int)Session["HC_MedicamentoID"];
                        }
                        LocalIndicaciones.SecuenciaMedicamento = Secuencia;
                        //LocalIndicaciones. = "A";
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        objLista = SvcMedicamentoFE.MedicamentoIndicacionesListar(LocalIndicaciones).ToList();
                        foreach (SS_HC_Indicaciones_FE result in objLista)
                        {
                            result.Accion = "UPDATE";
                        }
                        if (Listar.Count > 0)
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                return this.Store(objLista.ToList());

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTODETALLEGRUPO(string grupo)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTODETALLEGRUPO - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Indicaciones_FE>();
                var objLista = new List<SS_HC_Indicaciones_FE>();
                var objListaLlega = new List<SS_HC_Indicaciones_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    if (Session["HC_MedicamentoDetalleList"] != null)
                    {
                        objListaLlega = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (grupo != "")
                        {
                            int Secuencia = Convert.ToInt32(grupo);/*(int)Session["HC_MedicamentoID"];*/
                            foreach (SS_HC_Indicaciones_FE objEntity1 in objListaLlega)
                            {
                                if (objEntity1.GrupoMedicamento == Secuencia)
                                {
                                    if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                    {
                                        objEntity1.Accion = "UPDATE";
                                    }
                                    objLista.Add(objEntity1);
                                }
                            }
                        }
                    }
                    else
                    {
                        var LocalIndicaciones = new SS_HC_Indicaciones_FE();
                        int Secuencia = 0;
                        LocalIndicaciones.Accion = "LISTARPORGRUPO";
                        LocalIndicaciones.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalIndicaciones.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalIndicaciones.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        if (grupo != "")
                        {
                            Secuencia = Convert.ToInt32(grupo); /*(int)Session["HC_MedicamentoID"];*/
                        }
                        LocalIndicaciones.GrupoMedicamento = Secuencia;
                        LocalIndicaciones.SecuenciaMedicamento = Secuencia;
                        //LocalIndicaciones. = "A";
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        objLista = SvcMedicamentoFE.MedicamentoIndicacionesListar(LocalIndicaciones).ToList();
                        foreach (SS_HC_Indicaciones_FE result in objLista)
                        {
                            result.Accion = "UPDATE";
                        }
                        if (Listar.Count > 0)
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                return this.Store(objLista.ToList());

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTODETALLEGENE(string VALOR)
        {
            Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTODETALLEGENE - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
            }
            else
            {
                LocalEnty.ACCION = "MEDICAMENTO";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo3 = "A";
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
            }
            return this.Store(objLista.ToList());
        }
        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTO(string VALOR, string tipoRecurso, int grupo)
        {
            Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTO - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo)
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDRECTAGRUPAL_F2, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        objListaShow.AddRange(ListarCopy);
                        Session["HC_MedicamentoList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];



                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        ////

                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";

                        objLista.Add(obtemp);

                    }
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                }

                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {

                    object objetoGen = (List<BE_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_MEDRECTAGRUPAL_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        List<BE_Medicamento_FE> listaCopiaForm = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<BE_Medicamento_FE>));

                        objLista.AddRange(ListarCopy);
                        Session["HC_MedicamentoList"] = objLista;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }

                if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo)
                        {
                            objListaShow2.Add(result);
                        }
                    }

                    return this.Store(objListaShow2.ToList());
                }
                ///////////////////////////////////////////////////////////////////////////////////////////

                return this.Store(objLista.ToList());
            }

        }


        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTO_X(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTO_X - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            var console = Session["HC_MedicamentoList"];

            if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo/* result.Linea.Trim()==linea*/)
                    {
                        objListaShow.Add(result);
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    //UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                    //if (objetoGen != null)
                    //{
                    //    List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                    //    //objLista.AddRange(ListarCopy);
                    //    //Session["HC_MedicamentoList"] = objLista;
                    //    List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));
                    //    objLista.AddRange(ListarCopy);
                    //    objListaShow.AddRange(objLista);
                    //    Session["HC_MedicamentoList"] = objListaShow;
                    //}
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                objEnt.TipoMedicamento = 4;
                objListaAnt9 = SvcMedicamentoFE.MedicamentoListar(objEnt);

                objListaAnt.AddRange(objListaAnt9);

                String[] cadArray;


                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        if (intobj.CodAlmacen == "")
                        {
                            //objLista.Add(obtemp);
                        }
                        else
                        {
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            /**/
                            cadArray = intobj.Version.Trim().Split('|');
                            obtemp.LineaDescripcion = cadArray[0];
                            obtemp.FamiliaDescripcion = cadArray[1];
                            obtemp.SubFamiliaDescripcion = cadArray[2];
                            obtemp.MedicamentoDescripcion = cadArray[3];
                            /***/
                            //obtemp.SubFamiliaDescripcion = intobj.Version;
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;///////////// Editado
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            /////ADD 25/09
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.Medicamento = intobj.CodigoComponente;//ADD
                            obtemp.Comentario = intobj.Comentario;//ADD
                            obtemp.CodAlmacen = intobj.CodAlmacen;
                            obtemp.SecuencialHCE = intobj.SecuencialHCE;


                            // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            ////
                            Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                            /////ADD 22/11/16 OES
                            obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                            if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                            {
                                ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                            }

                            ////
                            obtemp.Periodo = intobj.Periodo;
                            obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                            obtemp.UnidadTiempo = intobj.UnidadTiempo;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Indicacion = intobj.Indicacion;
                            ///
                            obtemp.TipoReceta = intobj.TipoReceta;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.Accion = "UPDATEINDIV";

                            objLista.Add(obtemp);

                        }



                    }
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    // object objetoGen = (List<BE_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    //UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    // var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    // if (objetoGen != null)
                    // {


                    //     List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                    //     List<BE_Medicamento_FE> listaCopiaForm = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<BE_Medicamento_FE>));

                    //     objLista.AddRange(ListarCopy);

                    //     Session["HC_MedicamentoList"] = objLista;

                    // }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }


                if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            objListaShow2.Add(result);
                        }
                    }
                    return this.Store(objListaShow2.ToList());
                }
                return this.Store(objLista.ToList());
            }
        }




        public System.Web.Mvc.ActionResult addEliminar_CCEP0304_MEDICAMENTODETALLEINDI(String accion, String codigo,
            String secuenciaMed, String secuenciaIndica)
        {
            Log.Information("HClinicaControllerSup - addEliminar_CCEP0304_MEDICAMENTODETALLEINDI - Entrar");

            List<SS_HC_Indicaciones_FE> listaDelete = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> listaSave = new List<SS_HC_Indicaciones_FE>();
            SS_HC_Indicaciones_FE objDelete = new SS_HC_Indicaciones_FE();
            if (Session["HC_MedicamentoDetalleListDELETE"] != null)
            {
                listaDelete = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListDELETE"];
            }
            if (Session["HC_MedicamentoDetalleList"] != null && secuenciaIndica != null && secuenciaMed != null)
            {
                listaSave = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                foreach (SS_HC_Indicaciones_FE objEntity1 in listaSave)
                {
                    if (objEntity1.Secuencia == Convert.ToInt32(secuenciaIndica) &&
                        objEntity1.SecuenciaMedicamento == Convert.ToInt32(secuenciaMed))
                    {
                        if ((objEntity1.Accion + "").Trim() != "NUEVO")
                        {
                            objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objDelete.SecuenciaMedicamento = objEntity1.SecuenciaMedicamento;
                            objDelete.Secuencia = objEntity1.Secuencia;
                            objDelete.Accion = accion;
                            listaDelete.Add(objDelete);
                        }
                        //////////////                        
                        listaSave.Remove(objEntity1);
                        break;
                    }
                }
                Session["HC_MedicamentoDetalleListDELETE"] = listaDelete;
                Session["HC_MedicamentoDetalleList"] = listaSave;
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_Medicamentos(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaControllerSup - Save_Medicamentos - Entrar");

            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_Indicaciones_FE> ObjLista2 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjLista12 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjListaGuarda = new List<SS_HC_Indicaciones_FE>();

            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Temp")
            {
                if (ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP != null)
                {
                    ObjLista12 = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista12)
                    {
                        if (ObjLista2.Count > 0)
                        {
                            if (ObjLista2[0].SecuenciaMedicamento != objEntity1.SecuenciaMedicamento)
                            {
                                if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                {
                                    objEntity1.Accion = "UPDATE";
                                }
                                ObjListaGuarda.Add(objEntity1);
                            }
                        }
                    }/*
                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista2)
                    {
                        if ((objEntity1.Accion + "").Trim() != "NUEVO")
                        {
                            objEntity1.Accion = "UPDATE";
                        }

                        if (idgrupo != 0) { objEntity1.SecuenciaMedicamento = idgrupo; } ///agregado
                        objEntity1.GrupoMedicamento = idgrupo;    /// agregado :)
                        ObjListaGuarda.Add(objEntity1);
                    }*/
                    Session["HC_MedicamentoDetalleList"] = ObjListaGuarda;
                }
                else
                {
                    /* foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista2)
                     {
                         if ((objEntity1.Accion + "").Trim() != "NUEVO")
                         {
                             objEntity1.Accion = "UPDATE";
                         }

                     }*/
                    ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    Session["HC_MedicamentoDetalleList"] = ObjLista2;
                }
            }
            else if (Evento == "ListarDetalle")
            {
                Session["HC_MedicamentoID"] = Id;


                var nombreStore = "";

                if (idgrupo == 0)
                {
                    nombreStore = "storeExamenesDetalleIndic0";
                }
                else
                {
                    nombreStore = "storeExamenesDetalleIndicGrupo";
                }


                var store = X.GetCmp<Store>(nombreStore);
                store.Reload();
            }
            else if (Evento == "Server")
            {
                try
                {
                    //transact
                    List<SS_HC_Medicamento_FE> cabeceraMed = new List<SS_HC_Medicamento_FE>();
                    List<SS_HC_Indicaciones_FE> listadetalleMed = new List<SS_HC_Indicaciones_FE>();
                    List<SS_HC_Indicaciones_FE> listaTraceDetalleMed = new List<SS_HC_Indicaciones_FE>();


                    int IdSecuencia = 0;
                    addDataUpdateMedicamentos("UPDATEINDIV", selectionArray1, 1);
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_Medicamento_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;
                        if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        {
                            List<BE_Medicamento_FE> objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                            List<SS_HC_Indicaciones_FE> objListaMedDell = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                            foreach (BE_Medicamento_FE objEntity1 in objListaMed)
                            {
                                objEnt = new SS_HC_Medicamento_FE();
                                objEnt = objEntity1;
                                objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                                objEnt.Comentario = selectionArray2;

                                cabeceraMed.Add(objEnt);

                                objEnt.Forma = objEntity1.Forma;

                                objEnt.Version = objEnt.Forma == 2 ? "CCEP9919" : "CCEPF101";
                                objEnt.CodAlmacen = objEntity1.CodAlmacen; //ANGEL 16/07/2019
                                //  if (objEntity1.GrupoMedicamento == 0)
                                //  {
                                SecuenciaMedica = objEnt.Secuencia; // si es individual

                                //   }
                                //  else
                                //  {
                                //      SecuenciaMedica = Convert.ToInt32(objEntity1.GrupoMedicamento);// si es grupo
                                // objEntity1.Secuencia = SecuenciaMedica;
                                // }
                                //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);
                                ////BLOQUE DELETE
                                if (Session["HC_MedicamentoDetalleListDELETE"] != null)
                                {
                                    List<SS_HC_Indicaciones_FE> listaDel = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListDELETE"];
                                    foreach (var result in listaDel)
                                    {
                                        listadetalleMed.Add(result);
                                    }
                                }
                                ////////////////
                                if (objEntity1.Accion != "DELETEINDIV")
                                {
                                    //objEnt.Accion = "NUEVO";
                                    //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);

                                    if (objListaMedDell != null)
                                    {
                                        /*   
                                           Boolean indicaDetalle = false;
                                           foreach (var resutl in objListaMedDell)
                                           {
                                               if (resutl.SecuenciaMedicamento == objEnt.Secuencia)
                                               {
                                                   indicaDetalle = true;
                                                   break;
                                               }
                                           }
                                           if (indicaDetalle)
                                           {
                                               SS_HC_Indicaciones objIncid = new SS_HC_Indicaciones();
                                               objIncid.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                               objIncid.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                               objIncid.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                               objIncid.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                               objIncid.SecuenciaMedicamento = SecuenciaMedica;
                                               objIncid.Accion = "DELETE";

                                               listaTraceDetalleMed.Add(objIncid);
                                               //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objIncid);
                                           }*/
                                        if (objListaMedDell.Count > 0)
                                        {
                                            foreach (SS_HC_Indicaciones_FE objEntity2 in objListaMedDell)
                                            {
                                                if (objEntity2.GrupoMedicamento == 0)
                                                {

                                                    if (objEntity1.Secuencia == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                                else
                                                {
                                                    if (objEntity1.GrupoMedicamento == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica; //(int)objEntity1.GrupoMedicamento;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        IdSecuencia = SvcMedicamentoFE.setMantenimientoGrupo(new SS_HC_Medicamento_FE(), cabeceraMed, null, listaTraceDetalleMed, listadetalleMed);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();

                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;
                            //eventoLoadPostFormulario(true, "storeExamenes0", null); jordan 2018/09/18
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");
                            ActivaDescativaButtonSave(true);                 //jordan 2018/09/18    
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            //eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    //string mostrarExc = "Excepción genérica:" + ex.Message;
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEP0303_MED_MICRONUTRIENTES(string VALOR, string tipoRecurso)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0303_MED_MICRONUTRIENTES - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                var objLista = new List<HC_Medicamento>();
                var objListaShow = new List<HC_Medicamento>();

                var objListaAnt = new List<SS_HC_Medicamento>();
                //var objListaAntDetall = new List<SS_HC_Indicaciones>();
                if (Session["HC_MedicamentoList"] != null && tipoRecurso == "3")
                {
                    objLista = (List<HC_Medicamento>)Session["HC_MedicamentoList"];
                    foreach (var result in objLista)
                    {
                        if (result.Accion != "DELETEINDIV")
                        {
                            objListaShow.Add(result);
                        }
                    }
                    //ADD LA OPCIÓN DE COPIA
                    if ((Session["COPIA_FORMULARIO"] == "ACTIVA" || Session["COPIA_FORMULARIO"] == "ACTIVA_2") && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_3", objListaShow);
                        if (objetoGen != null)
                        {
                            List<HC_Medicamento> ListarCopy = (List<HC_Medicamento>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoList"] = objListaShow;
                        }
                        if (Session["COPIA_FORMULARIO"] == "ACTIVA")
                        {
                            Session["COPIA_FORMULARIO"] = "ACTIVA_2";
                        }
                        else
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }
                    ///////////////////////////////////////////////
                    return this.Store(objListaShow.ToList());
                }
                else if (Session["HC_MedicamentoDietaList"] != null && tipoRecurso == "2")
                {
                    objLista = (List<HC_Medicamento>)Session["HC_MedicamentoDietaList"];
                    foreach (var result in objLista)
                    {
                        if (result.Accion != "DELETEINDIV")
                        {
                            objListaShow.Add(result);
                        }
                    }
                    //ADD LA OPCIÓN DE COPIA
                    if ((Session["COPIA_FORMULARIO"] == "ACTIVA" || Session["COPIA_FORMULARIO"] == "ACTIVA_2") && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_2", objListaShow);
                        if (objetoGen != null)
                        {
                            List<HC_Medicamento> ListarCopy = (List<HC_Medicamento>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoDietaList"] = objListaShow;
                        }
                        if (objetoGen != null)
                        {
                            List<HC_Medicamento> ListarCopy = (List<HC_Medicamento>)objetoGen;
                            objLista.AddRange(ListarCopy);
                        }
                        if (Session["COPIA_FORMULARIO"] == "ACTIVA")
                        {
                            Session["COPIA_FORMULARIO"] = "ACTIVA_2";
                        }
                        else
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }
                    ///////////////////////////////////////////////
                    return this.Store(objListaShow.ToList());
                }
                else
                {
                    SS_HC_Medicamento objEnt = new SS_HC_Medicamento();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                    objEnt.Accion = "LISTAR";
                    objListaAnt = SvcMedicamentoService.MedicamentoListar(objEnt);

                    if (objListaAnt.Count > 0)
                    {
                        HC_Medicamento obtemp;
                        foreach (SS_HC_Medicamento intobj in objListaAnt)
                        {
                            obtemp = new HC_Medicamento();
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            obtemp.SubFamiliaDescripcion = intobj.Version;
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Comentario = intobj.Comentario;
                            /////ADD 25/09
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            ////
                            obtemp.Accion = "UPDATEINDIV";
                            objLista.Add(obtemp);
                        }
                    }

                    //ADD LA OPCIÓN DE COPIA
                    if ((Session["COPIA_FORMULARIO"] == "ACTIVA" || Session["COPIA_FORMULARIO"] == "ACTIVA_2") && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_" + objEnt.TipoMedicamento, objListaShow);
                        if (objetoGen != null)
                        {
                            List<HC_Medicamento> ListarCopy = (List<HC_Medicamento>)objetoGen;
                            objLista.AddRange(ListarCopy);
                        }
                        if (Session["COPIA_FORMULARIO"] == "ACTIVA")
                        {
                            Session["COPIA_FORMULARIO"] = "ACTIVA_2";
                        }
                        else
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }

                    }
                    ///////////////////////////////////////////////

                    if (objEnt.TipoMedicamento == 3)
                    {
                        Session["HC_MedicamentoList"] = objLista;
                    }
                    else if (objEnt.TipoMedicamento == 2)
                    {
                        Session["HC_MedicamentoDietaList"] = objLista;
                    }

                }
                return this.Store(objLista.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult Save_MedDietasMicronutrientesTemp(HC_Medicamento objMedicamento, string tipomedicamento)
        {
            Log.Information("HClinicaControllerSup - Save_MedDietasMicronutrientesTemp - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                int registro = -1;
                objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objMedicamento.Accion = "NUEVO";  //OBS
                objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                string mensage = "";
                var objLista = new List<HC_Medicamento>();
                Random rnd = new Random();
                objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                int regItems = 0;
                int tipoMedic = Convert.ToInt32(getValorFiltroInt(tipomedicamento));
                objMedicamento.TipoMedicamento = tipoMedic;
                if (tipoMedic == 3)  //tipo Micronut
                {
                    if (Session["HC_MedicamentoList"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoList"] = objLista;
                        //ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<HC_Medicamento>)Session["HC_MedicamentoList"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoList"] = objLista;
                    }
                    var store = X.GetCmp<Store>("storeMedNut");
                    store.Reload();
                }
                else if (tipoMedic == 2)  //tipo dieta
                {
                    if (Session["HC_MedicamentoDietaList"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoDietaList"] = objLista;
                        //ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = -1;
                        objLista = (List<HC_Medicamento>)Session["HC_MedicamentoDietaList"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoDietaList"] = objLista;
                    }
                    var store = X.GetCmp<Store>("storeDieta");
                    store.Reload();
                }
            }

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");

            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var nfDias = X.GetCmp<NumberField>("DiasTratamiento");
            nfDias.SetValue(0);

            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var nfHorarioTC = X.GetCmp<NumberField>("TipoComida");
            nfHorarioTC.SetValue(0);
            var nfCantidad = X.GetCmp<NumberField>("TipoComida");
            nfCantidad.SetValue(0);


            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_MedDietasMicroNutrientes(SS_HC_Medicamento objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento)
        {
            Log.Information("HClinicaControllerSup - Save_MedDietasMicroNutrientes - Entrar");

            if (Evento == "Server")
            {
                addDataUpdateMedicamentos("UPDATEINDIV", selectionArray1, 2);
                addDataUpdateMedicamentos("UPDATEINDIV", selectionArray2, 3);
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        List<SS_HC_Medicamento> detalleDietaMed = new List<SS_HC_Medicamento>();
                        List<SS_HC_Medicamento> detalleMed = new List<SS_HC_Medicamento>();


                        SS_HC_Medicamento objEnt;
                        string mensage = "";
                        int SecuenciaMedica = 0;
                        if (Session["HC_MedicamentoList"] != null)
                        {
                            List<HC_Medicamento> objListaMed = (List<HC_Medicamento>)Session["HC_MedicamentoList"];
                            List<HC_Medicamento> objListaDietaMed = (List<HC_Medicamento>)Session["HC_MedicamentoDietaList"];
                            if (objListaDietaMed.Count > 0)
                            {
                                foreach (HC_Medicamento objEntity1 in objListaDietaMed)
                                {
                                    objEnt = new SS_HC_Medicamento();
                                    objEnt = objEntity1;
                                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    detalleDietaMed.Add(objEnt);
                                    //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);
                                }
                            }
                            if (objListaMed.Count > 0)
                            {
                                foreach (HC_Medicamento objEntity1 in objListaMed)
                                {
                                    objEnt = new SS_HC_Medicamento();
                                    objEnt = objEntity1;
                                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    detalleMed.Add(objEnt);
                                    //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);
                                    int IdSecuencia = 0;
                                }
                            }
                        }

                        ////TRANSAT
                        SecuenciaMedica = SvcMedicamentoService.setMantenimiento(new SS_HC_Medicamento(),
                            detalleMed, detalleDietaMed, null, null);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                        if (SecuenciaMedica > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoDietaList"] = null;

                            eventoLoadPostFormulario(true, "storeMedNut", null);
                            eventoLoadPostFormulario(true, "storeDieta", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                    catch (Exception ex)
                    {
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }

            return this.Direct();
        }

        public bool addDataUpdateMedicamentos(string MODO, String data, int tipo)
        {
            Log.Information("HClinicaControllerSup - addDataUpdateMedicamentos - Entrar");

            if (data != null)
            {
                List<BE_Medicamento_FE> objListaMed = null;
                List<BE_Medicamento_FE> ObjListarUpdate = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<BE_Medicamento_FE>));
                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaList"];
                }

                if (objListaMed != null && ObjListarUpdate != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Accion != "DELETEINDIV")
                        {
                            foreach (var resultUpd in ObjListarUpdate)
                            {
                                if (result.Secuencia == resultUpd.Secuencia)
                                {
                                    result.Linea = resultUpd.Linea;
                                    result.Familia = resultUpd.Familia;
                                    result.SubFamilia = resultUpd.SubFamilia;
                                    result.SubFamiliaDescripcion = resultUpd.Version;
                                    result.Secuencia = resultUpd.Secuencia;
                                    result.IdUnidadMedida = resultUpd.IdUnidadMedida;
                                    result.Dosis = resultUpd.Dosis;
                                    result.IdVia = resultUpd.IdVia;
                                    result.Cantidad = resultUpd.Cantidad;
                                    result.Frecuencia = resultUpd.Frecuencia;
                                    result.DiasTratamiento = resultUpd.DiasTratamiento;
                                    result.TipoMedicamento = resultUpd.TipoMedicamento;
                                    result.TipoComida = resultUpd.TipoComida;
                                    result.Comentario = resultUpd.Comentario;
                                    result.Indicacion = resultUpd.Indicacion;
                                    result.UnidadTiempo = resultUpd.UnidadTiempo;
                                    result.UsuarioAuditoria = resultUpd.UsuarioAuditoria;
                                    result.Periodo = resultUpd.Periodo;
                                    result.Comentario = resultUpd.Comentario;
                                    result.GrupoMedicamento = resultUpd.GrupoMedicamento;
                                    if (resultUpd.GrupoMedicamento == 4 || resultUpd.GrupoMedicamento == null)
                                    {
                                        result.GrupoMedicamento = 0;
                                    }
                                    //ADD 25/09
                                    result.CodigoComponente = resultUpd.CodigoComponente;
                                    if (result.Accion != "NUEVO")
                                    {
                                        result.Accion = MODO;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }

                //objUpd.GetAll();
            }
            return true;
        }

        #endregion
        // enfe
        #region ActioResult_Anamesis_EnfermedadActual
        public System.Web.Mvc.ActionResult CCEP0003_ENFER_ACTUAL()
        {
            Log.Information("HClinicaControllerSup - CCEP0003_ENFER_ACTUAL - Entrar");

            try
            {
                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "ENFERMEACTUAL";
                    /*
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.VistaEpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.VistaEpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    */
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "ENFERMEACTUAL";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        #endregion
        #region ActioResult_ProximaCita

        public System.Web.Mvc.ActionResult addEliminar_SS_HC_ProximaCitaDetalle(String MODO, String codigo,
            String secuencia, String accionDefecto)
        {
            Log.Information("HClinicaControllerSup - addEliminar_SS_HC_ProximaCitaDetalle - Entrar");
            List<SS_HC_ProximaAtencion> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ProximaAtencionDiagDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ProximaAtencion>)Session["Data_ProximaAtencionDiagDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ProximaAtencion>();
                }
                SS_HC_ProximaAtencion objDelete = new SS_HC_ProximaAtencion();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.Version = secuencia;
                    objDelete.IdProcedimiento = Convert.ToInt32(cadenas);
                    objDelete.Accion = MODO;
                    if ((accionDefecto + "").Trim() != "NUEVO")
                    {
                        dataDelete.Add(objDelete);
                    }
                    Session["Data_ProximaAtencionDiagDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_SS_HC_ProximaCita(SS_HC_ProximaAtencion objProximaAtencion,
            String ProximaCita, String ProximaAtencionFlag, string indica)
        {
            Log.Information("HClinicaControllerSup - Save_SS_HC_ProximaCita - Entrar");

            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            string mensage = "";
            int regis = 0;
            if (indica == "DETALLE_NO_MODIF")
            {
                Session["ProximaCita"] = null;
                Session["Data_ProximaAtencionDiagDelete"] = null;
            }
            else if (indica == "DETALLE")
            {
                try
                {
                    if (ProximaCita != null)
                    {
                        Session["ProximaCita"] = ProximaCita;
                    }
                }
                catch (Exception ex)
                {
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                //String[] MatrizDetalle = null;
                //valoreArray = (string)Session["ProximaCita"];
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        List<SS_HC_ProximaAtencion> listaDetalle = new List<SS_HC_ProximaAtencion>();
                        SS_HC_ProximaAtencion objCabecera = new SS_HC_ProximaAtencion();
                        int registro = -1;
                        objProximaAtencion.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objProximaAtencion.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objProximaAtencion.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objProximaAtencion.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objProximaAtencion.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objProximaAtencion.ProximaAtencionFlag = ProximaAtencionFlag;
                        if (ProximaAtencionFlag == "1") objProximaAtencion.ProximaAtencionFlag = "H";
                        if (ProximaAtencionFlag == "2") objProximaAtencion.ProximaAtencionFlag = "C";
                        //registro = SvcProximaAtencionService.ProximaAtencion(objProximaAtencion);
                        /*if (Session["ProximaCitaSec"]!=null)
                        {
                            objProximaAtencion.Secuencia = (int)Session["ProximaCitaSec"];                        
                        }*/
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE") registro = objProximaAtencion.Secuencia;
                        //Session["ProximaCitaSec"] = registro;
                        objCabecera = objProximaAtencion;
                        ////BLOQUE DELETE
                        if (Session["Data_ProximaAtencionDiagDelete"] != null)
                        {
                            List<SS_HC_ProximaAtencion> dataDelete = (List<SS_HC_ProximaAtencion>)Session["Data_ProximaAtencionDiagDelete"];
                            foreach (var result in dataDelete)
                            {
                                result.Secuencia = registro;
                                listaDetalle.Add(result);
                            }
                        }
                        ///////////
                        if (Session["ProximaCita"] != null)
                        {


                            ProximaCita = (String)Session["ProximaCita"];
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(ProximaCita, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objProximaAtencion = new SS_HC_ProximaAtencion();
                                objProximaAtencion.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objProximaAtencion.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objProximaAtencion.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objProximaAtencion.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objProximaAtencion.Secuencia = registro;
                                objProximaAtencion.IdProcedimiento = Convert.ToInt32(cadenas);
                                objProximaAtencion.Accion = objEntity.ACCION;
                                //objProximaAtencion.Accion = "DETALLE";
                                //OBS:: AUX:
                                if (objProximaAtencion.Accion != "DETALLE")
                                {
                                    objProximaAtencion.Version = objEntity.CodigoElemento;
                                }

                                listaDetalle.Add(objProximaAtencion);
                                //registro = SvcProximaAtencionService.ProximaAtencion(objProximaAtencion); //TABLA REAL: SS_HC_ProximaAtencionDiagnostico
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                        }

                        registro = SvcProximaAtencionService.setMantenimiento(objCabecera, listaDetalle, null);
                        Session["ProximaCitaSec"] = registro;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        if (registro > 0)
                        {
                            if (indica == "HEADER")
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                //ActivaDescativaButtonSave(true);
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                //ActivaDescativaButtonSave(true);
                                Session["ProximaCita"] = null;
                                Session["Data_ProximaAtencionDiagDelete"] = null;

                                //eventoLoadPostFormulario(true, "STORE_ProximaCita", null);
                                eventoPostFormulario(true, "");
                                //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }

                        // int reg= svc
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw;

                    }
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEP0314_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0314_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_ProximaAtencion();
                var Listar = new List<SS_HC_ProximaAtencion>();
                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdEspecialidad = ENTITY_GLOBAL.Instance.IdEspecialidad;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.ProximaAtencionFlag = "I";
                }
                Listar = SvcProximaAtencionService.ProximaAtencionListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ProximaAtencion objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                    if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    {
                        VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                        LocalEnty.IdEspecialidad = EpiAtencionTemp.IdEspecialidad;
                        LocalEnty.IdPersonalSalud = EpiAtencionTemp.IdPersonalSalud;
                    }
                }
                //////////
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEP0315_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0315_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_ProximaAtencion();
                var Listar = new List<SS_HC_ProximaAtencion>();
                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdEspecialidad = ENTITY_GLOBAL.Instance.IdEspecialidad;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.ProximaAtencionFlag = "R";
                }
                Listar = SvcProximaAtencionService.ProximaAtencionListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ProximaAtencion objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    {
                        VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                        LocalEnty.IdEspecialidad = EpiAtencionTemp.IdEspecialidad;
                        LocalEnty.IdPersonalSalud = EpiAtencionTemp.IdPersonalSalud;
                    }
                }
                //////////       
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        #endregion

        #region ActioResult_Formulario_Dianost_Diagnostico
        public System.Web.Mvc.ActionResult VistaDescansoMedico()
        {
            Log.Information("HClinicaControllerSup - VistaDescansoMedico - Entrar");
            var LocalEnty = new SS_HC_DescansoMedico();
            var Listar = new List<SS_HC_DescansoMedico>();
            LocalEnty.Accion = "LISTAR";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            }
            Listar = SvcDescansoMedicoService.DescansoMedicoListar(LocalEnty).ToList();
            ////////////
            bool hallado = false;
            if (Listar.Count > 0)
            {
                this.GetCmp<Button>("cmdImprimir").Hidden = false;
                foreach (SS_HC_DescansoMedico objEntity in Listar)
                {
                    LocalEnty = objEntity;
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }
            }
            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";

                }
            }
            VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = new VW_ATENCIONPACIENTE_GENERAL();
            if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
            {
                vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
            }
            /****************CONTRUCCIÓN DE REPORTE***********************************/
            var LocalEntyDiagnos = new SS_HC_Diagnostico();
            var ListarDiagnos = new List<SS_HC_Diagnostico>();
            LocalEntyDiagnos.Accion = "LISTAR";
            LocalEntyDiagnos.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            LocalEntyDiagnos.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEntyDiagnos.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            LocalEntyDiagnos.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ListarDiagnos = SvcDiagnosticoService.DiagnosticoListar(LocalEntyDiagnos);
            String textDiagnosticos = "";
            if (ListarDiagnos != null)
            {
                foreach (var result in ListarDiagnos)
                {
                    textDiagnosticos = textDiagnosticos + "" + result.DetalleDiagnostico + "; ";
                }
            }
            if (textDiagnosticos.Length > 0)
            {
                textDiagnosticos = textDiagnosticos.Substring(0, textDiagnosticos.Length - 1);
            }

            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                campoStr01 = ""
            };

            System.Globalization.CultureInfo ci = System.Globalization.CultureInfo.InvariantCulture;

            objReporte.campoStr01 = vistaGenSelec.PacienteNombre;
            objReporte.campoStr02 = vistaGenSelec.CodigoHC;
            objReporte.campoStr03 = textDiagnosticos + "";  ///diagnosticos
            objReporte.campoStr04 = LocalEnty.Observacion + "";//Tipo de descanso
            objReporte.campoInt01 = LocalEnty.Dias;
            if (LocalEnty.FechaInicioDescanso != null)
            {
                objReporte.campoStr05 = Convert.ToDateTime(LocalEnty.FechaInicioDescanso).ToString("dd/MM/yyyy", ci);
            }
            if (LocalEnty.FechaFinDescanso != null)
            {
                objReporte.campoStr06 = Convert.ToDateTime(LocalEnty.FechaFinDescanso).ToString("dd/MM/yyyy", ci);
            }
            if (vistaGenSelec.FechaAtencion != null)
            {
                objReporte.campoStr07 = Convert.ToDateTime(vistaGenSelec.FechaAtencion).ToString("dd/MM/yyyy", ci);
            }
            if (vistaGenSelec.FechaAtencion != null)
            {
                objReporte.campoStr08 = Convert.ToDateTime(vistaGenSelec.FechaAtencion).ToString("HH:mm:ss", ci);
            }

            objReporte.campoStr09 = Session["NOMBRE_USUARIO_MEDICO"] != null ? "" + Session["NOMBRE_USUARIO_MEDICO"] : "";
            objReporte.campoStr10 = vistaGenSelec.NombreEspecialidad;
            objReporte.campoStr11 = "000";  //CMP

            /************************************************/
            //////////       
            return View("", "", objReporte);
        }
        public System.Web.Mvc.ActionResult CCEP0313_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0313_View - Entrar");
            try
            {
                var LocalEnty = new SS_HC_DescansoMedico();
                var Listar = new List<SS_HC_DescansoMedico>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                }
                Listar = SvcDescansoMedicoService.DescansoMedicoListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    this.GetCmp<Button>("cmdImprimir").Hidden = false;
                    foreach (SS_HC_DescansoMedico objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                //////////       
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult VisorDescansoMedico(String MODO, int id, String descripcion, String cod, String idWindow)
        {
            Log.Information("HClinicaControllerSup - VisorDescansoMedico - Entrar");
            // Session["ID_Tracking"] = id;
            var LocalEnty = new SS_HC_DescansoMedico();
            var Listar = new List<SS_HC_DescansoMedico>();
            LocalEnty.Accion = "LISTAR";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            }
            Listar = SvcDescansoMedicoService.DescansoMedicoListar(LocalEnty).ToList();
            ////////////
            bool hallado = false;
            if (Listar.Count > 0)
            {
                this.GetCmp<Button>("cmdImprimir").Hidden = false;
                foreach (SS_HC_DescansoMedico objEntity in Listar)
                {
                    LocalEnty = objEntity;
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }
            }
            return crearWindowRegistro("Reportes/VistaDescansoMedico", LocalEnty, "");
        }


        public System.Web.Mvc.ActionResult Save_SS_HC_DescanzoMedico(SS_HC_DescansoMedico objDescansoMedico)
        {
            Log.Information("HClinicaControllerSup - Save_SS_HC_DescanzoMedico - Entrar");

            String[] MatrizDetalle = null;
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    objDescansoMedico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objDescansoMedico.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objDescansoMedico.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objDescansoMedico.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objDescansoMedico.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    registro = SvcDescansoMedicoService.DescansoMedico(objDescansoMedico);
                    string mensage = "";
                    // int reg= svc                 
                    if (registro > 0)
                    {

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        eventoPostFormulario(true, "");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region ActioResult_Formulario_Dianost_Diagnostico

        public System.Web.Mvc.ActionResult AgregarCampo(string id, string field, string newValue, string oldValue)
        {
            Log.Information("HClinicaControllerSup - AgregarCampo - Entrar");
            // return this.RemoteTree(newValue + "_echo");
            //return this.RemoteTree(false, "Renaming is disabled");
            var store = X.GetCmp<Store>("storeExamenes");
            store.Reload();
            // return this.Direct();
            return this.RemoteTree();
        }
        #endregion

        public System.Web.Mvc.ActionResult CCEP0312_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0312_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_ProximaAtencion();
                var Listar = new List<SS_HC_ProximaAtencion>();
                LocalEnty.Accion = "LISTARZ";
                LocalEnty.IdEspecialidad = ENTITY_GLOBAL.Instance.IdEspecialidad;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.ProximaAtencionFlag = "Z";
                }
                Listar = SvcProximaAtencionService.ProximaAtencionListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                Session["ProximaCita"] = null;
                Session["ProximaCitaSec"] = null;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ProximaAtencion objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        if (LocalEnty.ProximaAtencionFlag == "H") LocalEnty.ProximaAtencionFlag = "1";
                        if (LocalEnty.ProximaAtencionFlag == "C") LocalEnty.ProximaAtencionFlag = "2";
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                //////////   
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult DobleClicGrilla(String Name, String selection, String Mode)
        {
            SelectedRowCollection src = JSON.Deserialize<SelectedRowCollection>(selection);
            List<int> omitIds = new List<int>();
            foreach (SelectedRow row in src)
            {
                omitIds.Add(Convert.ToInt32(row.RecordID));
            }
            var values = new System.Web.Routing.RouteValueDictionary();
            values.Add("id", omitIds[0]);
            string url = string.Format("/HClinica/Index?idCodigo={0}", omitIds[0]);

            return this.PartialExtView(
                  viewName: "CCEP1051_View",
                  containerId: "dd",
                // model: this.Session["card"],
                  mode: RenderMode.AddTo,
                  clearContainer: true
              );
            //  return this.Direct();
        }

        public System.Web.Mvc.ActionResult SelectPaciente(string selection)
        {
            Log.Information("HClinicaControllerSup - SelectPaciente - Entrar");
            ENTITY_GLOBAL.Instance.PacienteID = Convert.ToInt32(selection.Trim());
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult SelectClinico(string Clinico, string Atencion)
        {
            Log.Information("HClinicaControllerSup - SelectClinico - Entrar");

            //ENTITY_GLOBAL.Instance.EpisodioClinico = Convert.ToInt32(Clinico.Trim());
            //ENTITY_GLOBAL.Instance.EpisodioAtencion = Convert.ToInt64(Atencion.Trim());
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addEliminar_SS_HC_Anamnesis_EA(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_SS_HC_Anamnesis_EA - Entrar");

            List<SS_HC_Anamnesis_EA> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_EA>)Session["DataSS_HC_Anamnesis_EADelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_EA>();
                }
                SS_HC_Anamnesis_EA objDelete = new SS_HC_Anamnesis_EA();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdCursoEnfermedad = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.IdFormaInicio = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Anamnesis_EADelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_SS_HC_Anamnesis_EA(SS_HC_Anamnesis_EA objAnamnesis_EA, String selectionArray1, String Save_SS_HC_Anamnesis_EA, String text)
        {
            Log.Information("HClinicaControllerSup - Save_SS_HC_Anamnesis_EA - Entrar");

            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<SS_HC_Anamnesis_EA> ObjCabecera = new List<SS_HC_Anamnesis_EA>();
                List<SS_HC_Anamnesis_EA> ObjDetalle = new List<SS_HC_Anamnesis_EA>();

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objAnamnesis_EA.FechaModificacion = DateTime.Now;
                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objAnamnesis_EA.Accion == "NUEVO")
                        {
                            objAnamnesis_EA.Estado = 2;
                            objAnamnesis_EA.FechaCreacion = DateTime.Now;
                            objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        ObjCabecera.Add(objAnamnesis_EA);
                        //registro = SvcFormularios.setMantenimiento(objAnamnesis_EA);
                        registro = 1;
                        string mensage = "";
                        // int reg= svc
                        if (registro > 0)
                        {
                            //BLOQUE DELETE
                            List<SS_HC_Anamnesis_EA> dataDelete = null;
                            if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                            {
                                dataDelete = (List<SS_HC_Anamnesis_EA>)Session["DataSS_HC_Anamnesis_EADelete"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);
                                    //registro = SvcFormularios.setMantenimiento(objDel);
                                }
                            }
                            ////////////
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objAnamnesis_EA = new SS_HC_Anamnesis_EA();
                                objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnamnesis_EA.IdCursoEnfermedad = Convert.ToInt32(cadenas);
                                objAnamnesis_EA.Accion = objEntity.ACCION;
                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objAnamnesis_EA.Accion != "DETALLE")
                                {
                                    objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                //registro = SvcFormularios.setMantenimiento(objAnamnesis_EA);
                                ObjDetalle.Add(objAnamnesis_EA);
                                registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                            //TRANSACT
                            registro = SvcFormularios.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            //ActivaDescativaButtonSave(true);
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                Session["ValoresTemporal"] = null;
                                Session["DataSS_HC_Anamnesis_EADelete"] = null;

                                //eventoLoadPostFormulario(true, "storeExamenes", null);
                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw; ;
                    }
                }
            }
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillaaC(string valor)
        {
            this.GetCmp<GridPanel>("grillaContacto").Hidden = false;
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillabC(string valor)
        {
            this.GetCmp<GridPanel>("grillaContacto").Hidden = true;
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillaA(string valor)
        {
            this.GetCmp<GridPanel>("grillaMed").Hidden = false;
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillaB(string valor)
        {
            this.GetCmp<GridPanel>("grillaMed").Hidden = true;
            return this.Direct();
        }
        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillaAA(string valor)
        {
            this.GetCmp<GridPanel>("grillaMedRegular").Hidden = false;
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult ActivarGrillaBB(string valor)
        {
            this.GetCmp<GridPanel>("grillaMedRegular").Hidden = true;
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult ActiontxtPA()
        {
            Log.Information("HClinicaControllerSup - ActiontxtPA - Entrar");
            X.Msg.Notify("The Server Time is: ", DateTime.Now.ToLongTimeString()).Show();
            return this.Direct();
        }

        [DirectMethod]
        public System.Web.Mvc.ActionResult setTree()
        {
            Log.Information("HClinicaControllerSup - setTree - Entrar");

            var p = this.GetCmp<TreePanel>("TreeEast");
            p.Refresh();
            p.ClearContent();
            p.RemoveAll();
            //p.LoadContent(Url.Action("View1"));

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult GrillaCIE10(int start, int limit, string descript)
        {
            Log.Information("HClinicaControllerSup - GrillaCIE10 - Entrar");

            var Listar = new List<PERSONAMAST>();
            System.Collections.IEnumerable dtoArray;
            int total;
            var LocalEnty = new PERSONAMAST();
            LocalEnty.ACCION = "LISTARCIE10INGRESO";
            LocalEnty.Estado = "";
            LocalEnty.NombreCompleto = descript;
            return this.Store(SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList());
        }

        public System.Web.Mvc.ActionResult CCEP1051Read()
        {
            Log.Information("HClinicaControllerSup - CCEP1051Read - Entrar");

            var lista = new List<MA_MiscelaneosDetalle>();
            return this.Store(lista.ToList());
        }
        public System.Web.Mvc.ActionResult CCEP0003_View()
        {
            try
            {
                /////
                var LocalEnty = new SS_HC_Anamnesis_EA();
                var Listar = new List<SS_HC_Anamnesis_EA>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcAnamnesisEAService.Anamnesis_EA_Listar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_EA objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEP0009_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0009_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_Anamnesis_EA();
                var Listar = new List<SS_HC_Anamnesis_EA>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcAnamnesisEAService.Anamnesis_EA_Listar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_EA objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEP0302_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0302_View - Entrar");

            try
            {
                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                Session["VariableGenerales"] = null;
                Session["VariableGeneralesTemp"] = null;
                Session["VariableGeneralesTempDELETE"] = null;

                ////
                var LocalEnty = new SS_HC_SeguimientoRiesgo();
                LocalEnty.FechaSeguimiento = DateTime.Now;
                var Listar = new List<SS_HC_SeguimientoRiesgo>();
                LocalEnty.Accion = "LISTAR";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcSeguimientoRiesgo.listarSeguimientoRiesgo(LocalEnty);
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_SeguimientoRiesgo objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                return View("", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEP0303_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0303_View - Entrar");

            Session["HC_MedicamentoDietaList"] = null; //OBS
            Session["HC_MedicamentoList"] = null; //OBS
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            var LocalEnty = new HC_Medicamento();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }

        public System.Web.Mvc.ActionResult CCEP0305_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0305_View - Entrar");
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP0361_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0361_View - Entrar");

            Session["Data_ExamenDelete"] = null;
            var LocalEnty = new SS_HC_ExamenSolicitado();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }

        public System.Web.Mvc.ActionResult CCEP2001_View()
        {
            Log.Information("HClinicaControllerSup - CCEP2001_View - Entrar");

            var LocalEnty = new SS_HC_ProcedimientoEjecucion();
            LocalEnty.ACCION = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.ACCION = "VISTA";
            }
            else
            {
                LocalEnty.ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            Session["Data_ExamenArchivoSave"] = null;
            Session["Data_ExamenArchivoDelete"] = null;
            UTILES_MENSAJES.inicializarFilesBytesUploaded_HCE(true);

            /**CARGAR PATH como PARÁMETRO*/
            //defecto

            HttpPostedFile hpf = null;
            // string folderName = hpf.FileName.Split('_').ToArray().First();
            string paths = "~/resources/DocumentosAdjuntos/";
            paths = Server.MapPath(paths);
            if (!Directory.Exists(paths))
            {
                //Directory.CreateDirectory(Server.MapPath(paths));
            }
            //paths = paths + "/";
            //hpf.SaveAs(Server.MapPath(paths) + nombre);
            //String PATH = @"D:\jaav\trabajo\SALUDHCE\Workspace_jaavHCE\AppSaludMVC\resources\Temporal\";
            String PATH = paths;
            /*
            var path = Server.MapPath(".");
            path = Server.MapPath("..");
            path = Server.MapPath("~"); //Devuelve D:\webapps\shop
            path = Server.MapPath("/");// Devuelve C:\inetpub\wwwroot
            path = Server.MapPath("/");//Devuelve D:\webapps\shop
            */

            //de PARAMETROS
            List<ParametrosMast> listaParam = new List<ParametrosMast>();
            ParametrosMast objParam = new ParametrosMast();
            objParam.Accion = "LISTAR";
            objParam.CompaniaCodigo = "999999";
            objParam.AplicacionCodigo = "WA";//obs
            objParam.ParametroClave = "PATH_EXAMD";
            listaParam = SvcParametro.listarParametro(objParam, 0, 0);
            if (listaParam.Count > 0)
            {
                if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                {
                    PATH = (listaParam[0].DescripcionParametro + "").Trim();
                }
            }
            Session["PARAM_PATHEXAMENDOCUMENTOS"] = PATH;
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult SubmitData(string data)
        {
            Log.Information("HClinicaControllerSup - SubmitData - Entrar");

            List<EventModel> events = JSON.Deserialize<List<EventModel>>(data);

            return new PartialViewResult
            {
                ViewName = "EventsViewer",
                ViewBag =
                {
                    Events = events
                }
            };
        }
        public class BasicModel
        {
            public static EventModelCollection Events
            {
                get
                {
                    DateTime now = DateTime.Now.Date;

                    return new EventModelCollection { 
                    new EventModel
                    {
                        EventId = 1001,
                        CalendarId = 1,
                        Title = "Vacation",
                        StartDate = now.AddDays(-20).AddHours(10),
                        EndDate = now.AddDays(-10).AddHours(15),
                        IsAllDay = false,
                        Notes = "Have fun"
                    },
                    new EventModel
                    {
                        EventId = 1002,
                        CalendarId = 2,
                        Title = "Lunch with Matt",
                        StartDate = now.AddHours(11).AddMinutes(30),
                        EndDate = now.AddHours(13),
                        IsAllDay = false,
                        Location = "Chuy's!",
                        Url = "http://chuys.com",
                        Notes = "Order the queso",
                        Reminder = "15"
                    },
                    new EventModel
                    {
                        EventId = 1003,
                        CalendarId = 3,
                        Title = "Project due",
                        StartDate = now.AddHours(15),
                        EndDate = now.AddHours(15),
                        IsAllDay = false
                    },
                    new EventModel
                    {
                        EventId = 1004,
                        CalendarId = 1,
                        Title = "Sarah's birthday",
                        StartDate = now,
                        EndDate = now,
                        IsAllDay = true,
                        Notes = "Need to get a gift"
                    },
                    new EventModel
                    {
                        EventId = 1005,
                        CalendarId = 2,
                        Title = "A long one...",
                        StartDate = now.AddDays(-12),
                        EndDate = now.AddDays(10).AddSeconds(-1),
                        IsAllDay = true
                    },
                    new EventModel
                    {
                        EventId = 1006,
                        CalendarId = 3,
                        Title = "School holiday",
                        StartDate = now.AddDays(5),
                        EndDate = now.AddDays(7).AddSeconds(-1),
                        IsAllDay = true,
                        Reminder = "2880"
                    },
                    new EventModel
                    {
                        EventId = 1007,
                        CalendarId = 1,
                        Title = "Haircut",
                        StartDate = now.AddHours(9),
                        EndDate = now.AddHours(9).AddMinutes(30),
                        IsAllDay = false,
                        Notes = "Get cash on the way"
                    },
                    new EventModel
                    {
                        EventId = 1008,
                        CalendarId = 3,
                        Title = "An old event",
                        StartDate = now.AddDays(-30),
                        EndDate = now.AddDays(-28),
                        IsAllDay = true,
                        Notes = "Get cash on the way"
                    },
                    new EventModel
                    {
                        EventId = 1009,
                        CalendarId = 2,
                        Title = "Board meeting",
                        StartDate = now.AddDays(-2).AddHours(13),
                        EndDate = now.AddDays(-2).AddHours(18),
                        IsAllDay = false,
                        Location = "ABC Inc.",
                        Reminder = "60"
                    },
                    new EventModel
                    {
                        EventId = 1010,
                        CalendarId = 3,
                        Title = "Jenny's final exams",
                        StartDate = now.AddDays(-2),
                        EndDate = now.AddDays(3).AddSeconds(-1),
                        IsAllDay = true
                    },
                    new EventModel
                    {
                        EventId = 1011,
                        CalendarId = 1,
                        Title = "Movie night",
                        StartDate = now.AddDays(2).AddHours(19),
                        EndDate = now.AddDays(2).AddHours(23),
                        IsAllDay = false,
                        Notes = "Don't forget the tickets!",
                        Reminder = "60"
                    }
                };
                }
            }
        }

        public System.Web.Mvc.ActionResult CCEP2002_View()
        {
            Log.Information("HClinicaControllerSup - CCEP2002_View - Entrar");

            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            return View(BasicModel.Events);
        }

        public System.Web.Mvc.ActionResult CCEP2001_CONSENTIMIENTO()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP2001_CONSENTIMIENTO - Entrar");

                var LocalEnty = new SS_HC_ProcedimientoEjecucion();
                var Listar = new List<SS_HC_ProcedimientoEjecucion>();
                LocalEnty.ACCION = "LISTARINFORMES";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcProcedimientoEjecucion.listarSS_HC_ProcedimientoEjecucion(LocalEnty, 0, 0);
                if (Listar.Count == 0)
                {
                    LocalEnty.ACCION = "INSERT";
                    LocalEnty.ObservacionAlta = "Consentimiento Informado ";
                    SvcProcedimientoEjecucion.setMantenimiento(LocalEnty);
                    LocalEnty.ACCION = "LISTARINFORMES";
                    Listar = SvcProcedimientoEjecucion.listarSS_HC_ProcedimientoEjecucion(LocalEnty, 0, 0);
                }
                Session["Data_ExamenArchivoSave"] = null;
                Session["Data_ExamenArchivoDelete"] = null;
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEP2002_CONSENTIMIENTO()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP2002_CONSENTIMIENTO - Entrar");
                var LocalEnty = new SS_HC_ProximaAtencion();
                var Listar = new List<SS_HC_ProximaAtencion>();
                LocalEnty.Accion = "LISTARTELESALUD";
                LocalEnty.IdEspecialidad = ENTITY_GLOBAL.Instance.IdEspecialidad;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.ProximaAtencionFlag = "T";
                }

                Listar = SvcProximaAtencionService.ProximaAtencionListar(LocalEnty).ToList();
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        /**LISTAR DETALLE del día*/
        public System.Web.Mvc.ActionResult getGrillaDetalleHorario(
              string fecha, string medico, string periodo, string especialidad, string establecimiento,
             string tipoBuscar)
        {
            Boolean indicaValidacionForm = false;
            try
            {
                Log.Information("HClinicaControllerSup - getGrillaDetalleHorario - Entrar");

                var Listar = new List<SS_CC_Horario>();
                var LocalEnty = new SS_CC_Horario();
                LocalEnty.Medico = getValorFiltroInt(medico);
                LocalEnty.FechaInicio = getValorFiltroDate(fecha);
                LocalEnty.IdEspecialidad = getValorFiltroInt(especialidad);
                LocalEnty.ACCION = "LISTARDETALLEDIA";
                Listar = SvcSS_CC_Horario.listarSS_CC_Horario(LocalEnty, 0, 0);
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult Save_AsignacionMedico_TeleSalud(SS_HC_ProximaAtencion obj,
               String selection, String ACCION, String fechahora,
            string indicador)
        {
            Log.Information("HClinicaControllerSup - Save_AsignacionMedico_TeleSalud - Entrar");

            String mensaje = "";
            long IdEpisodioAtencionID = -1;
            List<SS_HC_ProximaAtencion> ObjListar = null;
            // TRANSACCIONALES
            List<SS_HC_ProximaAtencion> ObjCabecera = new List<SS_HC_ProximaAtencion>();
            SS_HC_ProximaAtencion objSave = new SS_HC_ProximaAtencion();
            if (indicador == "O")
            {
                return this.Direct();
            }
            else
            {
                try
                {
                    if (selection != null && selection != "")
                    {
                        ObjListar = (List<SS_HC_ProximaAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<SS_HC_ProximaAtencion>));
                    }
                    if (ObjListar.Count > 0)
                    {
                        objSave = ObjListar[0];
                    }
                    //objSave.Accion = ACCION;
                    objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objSave.FechaModificacion = DateTime.Now;

                    /////
                    objSave.FechaPlaneada = getValorFiltroDate(fechahora);

                    IdEpisodioAtencionID = SvcProximaAtencionService.ProximaAtencion(objSave);

                    if (IdEpisodioAtencionID > 0)
                    {

                        mensaje = "Se Asignó al Médico Satisfactoriamente:  ";

                        //eventoLoadPostFormulario(true, "storeEnfermedad", null);
                        eventoPostFormulario(true, "");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
        }

        public System.Web.Mvc.ActionResult AsignarConsultorTelesalud(String MODO, String usuario)
        {
            Log.Information("HClinicaControllerSup - AsignarConsultorTelesalud - Entrar");

            ENTITY_GLOBAL.Instance.objModel = null;
            VW_ATENCIONPACIENTE objAutorizac = new VW_ATENCIONPACIENTE();
            if (MODO == "NUEVO")
            {
                objAutorizac.Accion = "NUEVO";
            }
            objAutorizac.Accion = MODO;
            return NewPageWindows("TeleSalud/AsignarConsultor", objAutorizac, "");
        }

        public System.Web.Mvc.ActionResult CCEP2001_CONSENTIMIENTO_ARCHIVOS(string tipoListado, string parSecuenciaEjecucion)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP2001_CONSENTIMIENTO_ARCHIVOS - Entrar");


                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new SS_HC_ProcedimientoInforme();
                List<SS_HC_ProcedimientoInforme> Listar = new List<SS_HC_ProcedimientoInforme>();
                List<SS_HC_ProcedimientoInforme> ListarDataTempAdd = new List<SS_HC_ProcedimientoInforme>();

                LocalEnty.ACCION = "LISTAR";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                if (parSecuenciaEjecucion.Length == 0)
                { LocalEnty.Secuencia = 1; }
                else
                {
                    LocalEnty.Secuencia = Convert.ToInt32(getValorFiltroInt("" + parSecuenciaEjecucion));
                }

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;


                Listar = SvcProcedimientoInforme.listarSS_HC_ProcedimientoInforme(LocalEnty, 0, 0);
                if (Session["Data_ExamenArchivoSave"] != null)
                {
                    List<SS_HC_ProcedimientoInforme> ListarDataTemp = new List<SS_HC_ProcedimientoInforme>();

                    ListarDataTemp = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                    bool hallado = false;
                    foreach (var resultDataTemp in ListarDataTemp)
                    {
                        hallado = false;
                        if (Listar.Count > 0)
                        {
                            for (int i = 0; i < Listar.Count && !hallado; i++)
                            {
                                if (resultDataTemp.Secuencia == Listar[i].Secuencia)
                                {
                                    if (resultDataTemp.ACCION == "INSERT")
                                    {
                                        ListarDataTempAdd.Add(resultDataTemp);
                                        hallado = true;
                                    }
                                    else if (resultDataTemp.SecuenciaInforme == Listar[i].SecuenciaInforme)
                                    {
                                        Listar[i].Nombre = resultDataTemp.Nombre;
                                        Listar[i].RutaInforme = resultDataTemp.RutaInforme;
                                        Listar[i].Estado = resultDataTemp.Estado;
                                        Listar[i].ACCION = resultDataTemp.ACCION;
                                        hallado = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (resultDataTemp.Secuencia == Convert.ToInt32(getValorFiltroInt("" + parSecuenciaEjecucion)))
                            {
                                if (resultDataTemp.ACCION == "INSERT")
                                {
                                    ListarDataTempAdd.Add(resultDataTemp);
                                    hallado = true;
                                }
                            }
                        }
                    }
                }

                if (ListarDataTempAdd.Count > 0)
                {
                    Listar.AddRange(ListarDataTempAdd);

                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult postWindowProxima(String id)
        {
            Log.Information("HClinicaControllerSup - postWindowProxima - Entrar");

            VW_SS_GE_ESPECIALIDADMEDICO objFiltro = new VW_SS_GE_ESPECIALIDADMEDICO();
            var Listar = new List<VW_SS_GE_ESPECIALIDADMEDICO>();

            var field = X.GetCmp<TextField>("tfNomMed");
            var tfNum = X.GetCmp<TextField>("tfNroMed");
            if (field != null)
            {
                objFiltro.ACCION = "LISTARPAG";
                if (id.Trim().Length > 0) objFiltro.PERSONA = Convert.ToInt32(id);
                Listar = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (VW_SS_GE_ESPECIALIDADMEDICO objEntity in Listar)
                    {
                        objFiltro = objEntity;
                        field.SetValue(objFiltro.NOMBRECOMPLETO);
                        tfNum.SetValue(objFiltro.CMP);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }






        public System.Web.Mvc.ActionResult getGrillaEspecialidadMedico(int start, int limit,
            string cmp, string nombrecompleto, string nroregespecialidad, string idespecialidad,
           string estado, string tipoBuscar)
        {
            Boolean indicaValidacionForm = false;
            try
            {
                Log.Information("HClinicaControllerSup - getGrillaEspecialidadMedico - Entrar");
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                var LocalEnty = new VW_SS_GE_ESPECIALIDADMEDICO();
                LocalEnty.CMP = getValorFiltroStr(cmp);
                LocalEnty.NOMBRECOMPLETO = getValorFiltroStr(nombrecompleto);
                LocalEnty.NUMEROREGISTROESPECIALIDAD = getValorFiltroStr(nroregespecialidad);
                LocalEnty.IDESPECIALIDAD = (getValorFiltroInt(idespecialidad) != null ? Convert.ToInt32(getValorFiltroInt(idespecialidad)) : 0);
                LocalEnty.ESTADO = getValorFiltroStr(estado);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcVWEspecialidadMedico.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcVWEspecialidadMedico.listarEspecialidadMedico(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorMedico(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaControllerSup - seleccionadorMedico - Entrar");
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorMedico", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionMedico(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedico - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedico");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionMedicoServicioEpi(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoServicioEpi - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdResponsableSer");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfResNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfResNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionMedicoDos(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoDos - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdPersonalSalud");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }
            ENTITY_GLOBAL.Instance.NOMBRE_MEDICO = nombre;

            var tfCmd = X.GetCmp<TextField>("tfNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getSeleccionMedicoAnestesiologo(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoAnestesiologo - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoAnaste");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedAnaste");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedAnaste");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoAyudante(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoAyudante - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoAyudante");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedAyudante");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedAyudante");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getSeleccionMedicoInstrumentista(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoInstrumentista - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoInstrumentista");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedInstrumentista");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedInstrumentista");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoCirculante(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoCirculante - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoCirculantes");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedCirculantes");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedCirculantes");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getSeleccionMedicoNeonatologo(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoNeonatologo - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoNeonatologo");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedNeonatologo");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedNeonatologo");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoCardiologo(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getSeleccionMedicoCardiologo - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("nfMedicoCardiologo");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNomMedCardiologo");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfNroMedCardiologo");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }






        /*******/
        public System.Web.Mvc.ActionResult seleccionadorDiagnostico(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaControllerSup - seleccionadorDiagnostico - Entrar");

            SS_GE_Diagnostico obj = new SS_GE_Diagnostico();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorDiagnostico", obj, "");
        }

        public System.Web.Mvc.ActionResult getGrillaDiagnostico(int start, int limit,
            string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Boolean indicaValidacionForm = false;
            try
            {
                Log.Information("HClinicaControllerSup - getGrillaDiagnostico - Entrar");

                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_GE_Diagnostico>();

                var LocalEnty = new SS_GE_Diagnostico();

                LocalEnty.CodigoDiagnostico = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcDiagnostico.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcDiagnostico.listarDiagnostico(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /********/
        public System.Web.Mvc.ActionResult seleccionadorUnidadServicio(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaControllerSup - seleccionadorUnidadServicio - Entrar");

            SS_HC_CatalogoUnidadServicio obj = new SS_HC_CatalogoUnidadServicio();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorUnidadServicio", obj, "");
        }
        public System.Web.Mvc.ActionResult getGrillaUnidadServicioSelec(int start, int limit, string descripcion, string codigoPadre, string tipoBuscar)
        {
            Boolean indicaValidacionForm = false;
            try
            {
                Log.Information("HClinicaControllerSup - getGrillaUnidadServicioSelec - Entrar");

                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_CatalogoUnidadServicio>();

                var LocalEnty = new SS_HC_CatalogoUnidadServicio();

                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.CodigoUnidadServicio = getValorFiltroStr(codigoPadre);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcCategoriaUnidadServicio.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /******************/
        public System.Web.Mvc.ActionResult CCEP0550_View()
        {
            Log.Information("HClinicaControllerSup - CCEP0550_View - Entrar");

            var LocalEnty = new SS_HC_ProcedimientoEjecucion();
            LocalEnty.ACCION = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.ACCION = "VISTA";
            }
            else
            {
                LocalEnty.ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            Session["Data_ExamenArchivoSave"] = null;
            Session["Data_ExamenArchivoDelete"] = null;
            UTILES_MENSAJES.inicializarFilesBytesUploaded_HCE(true);

            /**CARGAR PATH como PARÁMETRO*/
            //defecto

            HttpPostedFile hpf = null;
            // string folderName = hpf.FileName.Split('_').ToArray().First();
            string paths = "~/resources/DocumentosAdjuntos/";
            paths = Server.MapPath(paths);
            if (!Directory.Exists(paths))
            {
                //Directory.CreateDirectory(Server.MapPath(paths));
            }
            //paths = paths + "/";
            //hpf.SaveAs(Server.MapPath(paths) + nombre);

            //String PATH = @"D:\jaav\trabajo\SALUDHCE\Workspace_jaavHCE\AppSaludMVC\resources\Temporal\";
            String PATH = paths;
            /*
            var path = Server.MapPath(".");
            path = Server.MapPath("..");
            path = Server.MapPath("~"); //Devuelve D:\webapps\shop
            path = Server.MapPath("/");// Devuelve C:\inetpub\wwwroot
            path = Server.MapPath("/");//Devuelve D:\webapps\shop
            */

            //de PARAMETROS
            List<ParametrosMast> listaParam = new List<ParametrosMast>();
            ParametrosMast objParam = new ParametrosMast();
            objParam.Accion = "LISTAR";
            objParam.CompaniaCodigo = "999999";
            objParam.AplicacionCodigo = "WA";//obs
            objParam.ParametroClave = "PATH_EXAMD";
            listaParam = SvcParametro.listarParametro(objParam, 0, 0);
            if (listaParam.Count > 0)
            {

                if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                {
                    PATH = (listaParam[0].DescripcionParametro + "").Trim();
                }

            }
            Session["PARAM_PATHEXAMENDOCUMENTOS"] = PATH;

            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            return View("", "", LocalEnty);
        }
        public System.Web.Mvc.ActionResult CCEP0550_EXAMENES_PROCEDIMIENTO()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0550_EXAMENES_PROCEDIMIENTO - Entrar");

                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new SS_HC_ProcedimientoEjecucion();
                var Listar = new List<SS_HC_ProcedimientoEjecucion>();
                LocalEnty.ACCION = "LISTAR";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;


                Listar = SvcProcedimientoEjecucion.listarSS_HC_ProcedimientoEjecucion(LocalEnty, 0, 0);
                if (Listar.Count > 0)
                {
                    /*if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }*/
                }
                Session["Data_ExamenArchivoSave"] = null;
                Session["Data_ExamenArchivoDelete"] = null;
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEP0550_EXAMENES_ARCHIVOS(string tipoListado, string parSecuenciaEjecucion)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0550_EXAMENES_ARCHIVOS - Entrar");

                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new SS_HC_ProcedimientoInforme();
                List<SS_HC_ProcedimientoInforme> Listar = new List<SS_HC_ProcedimientoInforme>();
                List<SS_HC_ProcedimientoInforme> ListarDataTempAdd = new List<SS_HC_ProcedimientoInforme>();

                LocalEnty.ACCION = "LISTAR";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.Secuencia = Convert.ToInt32(getValorFiltroInt("" + parSecuenciaEjecucion));

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;


                Listar = SvcProcedimientoInforme.listarSS_HC_ProcedimientoInforme(LocalEnty, 0, 0);
                if (Session["Data_ExamenArchivoSave"] != null)
                {
                    List<SS_HC_ProcedimientoInforme> ListarDataTemp = new List<SS_HC_ProcedimientoInforme>();

                    ListarDataTemp = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                    bool hallado = false;
                    foreach (var resultDataTemp in ListarDataTemp)
                    {
                        hallado = false;
                        if (Listar.Count > 0)
                        {
                            for (int i = 0; i < Listar.Count && !hallado; i++)
                            {
                                if (resultDataTemp.Secuencia == Listar[i].Secuencia)
                                {
                                    if (resultDataTemp.ACCION == "INSERT")
                                    {
                                        ListarDataTempAdd.Add(resultDataTemp);
                                        hallado = true;
                                    }
                                    else if (resultDataTemp.SecuenciaInforme == Listar[i].SecuenciaInforme)
                                    {
                                        Listar[i].Nombre = resultDataTemp.Nombre;
                                        Listar[i].RutaInforme = resultDataTemp.RutaInforme;
                                        Listar[i].Estado = resultDataTemp.Estado;
                                        Listar[i].ACCION = resultDataTemp.ACCION;
                                        hallado = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (resultDataTemp.Secuencia == Convert.ToInt32(getValorFiltroInt("" + parSecuenciaEjecucion)))
                            {
                                if (resultDataTemp.ACCION == "INSERT")
                                {
                                    ListarDataTempAdd.Add(resultDataTemp);
                                    hallado = true;
                                }
                            }
                        }
                    }
                }

                if (ListarDataTempAdd.Count > 0)
                {
                    Listar.AddRange(ListarDataTempAdd);

                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult add_ExamenArchivo(String MODO
            , String data)
        {
            Log.Information("HClinicaControllerSup - add_ExamenArchivo - Entrar");

            List<SS_HC_ProcedimientoInforme> dataSave = null;
            if ((MODO + "").Length > 0)
            {
                List<SS_HC_ProcedimientoInforme> ObjListar = (List<SS_HC_ProcedimientoInforme>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_ProcedimientoInforme>));
                if (ObjListar != null)
                {
                    if (Session["Data_ExamenArchivoSave"] != null)
                    {
                        dataSave = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                    }
                    if (dataSave == null)
                    {
                        dataSave = new List<SS_HC_ProcedimientoInforme>();
                    }
                    if (ObjListar.Count > 0)
                    {
                        /*
                        SS_HC_ProcedimientoInforme objDelete = new SS_HC_ProcedimientoInforme();
                        objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        */
                        ObjListar[0].UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        ObjListar[0].UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        dataSave.Add(ObjListar[0]);
                        Session["Data_ExamenArchivoSave"] = dataSave;
                    }

                }

            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addEliminar_ExamenArchivo(String MODO
            , int secuencia, int secuenciaInforme, string nombreFile)
        {
            Log.Information("HClinicaControllerSup - addEliminar_ExamenArchivo - Entrar");

            List<SS_HC_ProcedimientoInforme> dataDelete = null;
            List<SS_HC_ProcedimientoInforme> dataSave = null;
            if ((MODO + "").Length > 0)
            {
                if (Session["Data_ExamenArchivoSave"] != null)
                {
                    dataSave = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                }
                if (dataSave == null)
                {
                    dataSave = new List<SS_HC_ProcedimientoInforme>();
                }
                ///////////
                if (Session["Data_ExamenArchivoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ProcedimientoInforme>();
                }
                SS_HC_ProcedimientoInforme objDelete = new SS_HC_ProcedimientoInforme();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    objDelete.Secuencia = secuencia;
                    objDelete.SecuenciaInforme = secuenciaInforme;
                    objDelete.ACCION = MODO;
                    objDelete.RutaInforme = nombreFile;
                    dataDelete.Add(objDelete);
                    Session["Data_ExamenArchivoDelete"] = dataDelete;

                    foreach (var result in dataSave)
                    {
                        if (result.SecuenciaInforme == secuenciaInforme && result.Secuencia == secuencia)
                        {
                            dataSave.Remove(result);
                            break;
                        }
                    }
                    Session["Data_ExamenArchivoSave"] = dataSave;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult updateDataExamenArchivos(String MODO
            , String dataArchivos)
        {
            Log.Information("HClinicaControllerSup - updateDataExamenArchivos - Entrar");

            try
            {
                List<SS_HC_ProcedimientoInforme> dataSave = null;
                List<SS_HC_ProcedimientoInforme> ObjListar = (List<SS_HC_ProcedimientoInforme>)Newtonsoft.Json.JsonConvert.DeserializeObject(dataArchivos, typeof(List<SS_HC_ProcedimientoInforme>));
                if (ObjListar != null)
                {
                    if (Session["Data_ExamenArchivoSave"] != null)
                    {
                        dataSave = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                    }
                    if (dataSave == null)
                    {
                        dataSave = new List<SS_HC_ProcedimientoInforme>();
                    }

                    bool hallado = false;
                    foreach (var resultDataTemp in ObjListar)
                    {
                        hallado = false;
                        for (int i = 0; i < dataSave.Count && !hallado; i++)
                        {
                            if (resultDataTemp.Secuencia == dataSave[i].Secuencia)
                            {
                                if (resultDataTemp.SecuenciaInforme == dataSave[i].SecuenciaInforme)
                                {
                                    dataSave[i].Nombre = resultDataTemp.Nombre;
                                    dataSave[i].RutaInforme = resultDataTemp.RutaInforme;
                                    dataSave[i].Estado = resultDataTemp.Estado;
                                    dataSave[i].ACCION = resultDataTemp.ACCION;
                                    dataSave[i].UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    dataSave[i].UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    hallado = true;
                                }
                            }
                        }
                        if (!hallado)
                        {
                            resultDataTemp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            resultDataTemp.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            dataSave.Add(resultDataTemp);
                        }
                    }
                    Session["Data_ExamenArchivoSave"] = dataSave;
                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_ExamenArchivos(SS_HC_ProcedimientoEjecucion objProcEjecucion, String MODO
            , String dataProcEjecucion, String dataArchivos)
        {
            Log.Information("HClinicaControllerSup - save_ExamenArchivos - Entrar");
            int registro = 0;
            String mensaje = "";
            List<SS_HC_ProcedimientoInforme> dataSaveTransact = new List<SS_HC_ProcedimientoInforme>();
            List<SS_HC_ProcedimientoInforme> dataSave = null;
            List<SS_HC_ProcedimientoInforme> dataDelete = null;
            if ((dataArchivos + "").Length > 0)
            {
                try
                {
                    mensaje = "Sucedió un error inesperado";
                    updateDataExamenArchivos(MODO, dataArchivos);
                    if (Session["Data_ExamenArchivoSave"] != null)
                    {
                        dataSave = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                    }
                    List<SS_HC_ProcedimientoInforme> ObjListar = (List<SS_HC_ProcedimientoInforme>)Newtonsoft.Json.JsonConvert.DeserializeObject(dataArchivos, typeof(List<SS_HC_ProcedimientoInforme>));
                    if (ObjListar != null)
                    {
                        if (Session["Data_ExamenArchivoSave"] != null)
                        {
                            dataSave = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoSave"];
                        }
                        /*if (dataSave == null)
                        {
                            dataSave = new List<SS_HC_ProcedimientoInforme>();
                        }

                        foreach (var result in ObjListar)
                        {           
                            result.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            result.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            dataSave.Add(result);
                            Session["Data_ExamenArchivoSave"] = dataSave;
                        }*/
                        if (Session["Data_ExamenArchivoDelete"] != null)
                        {
                            dataDelete = (List<SS_HC_ProcedimientoInforme>)Session["Data_ExamenArchivoDelete"];
                            dataSaveTransact.AddRange(dataDelete);
                        }
                        if (dataSave.Count > 0)
                        {
                            dataSaveTransact.AddRange(dataSave);
                        }

                        if (dataSaveTransact.Count > 0)
                        {
                            //PRIMERO: GRABAR LOS ARCHIVOS CARGADOS:
                            //string PATH = @"D:\jaav\trabajo\SALUDHCE\Workspace_jaavHCE\AppSaludMVC\resources\Temporal\";
                            string PATH = (string)Session["PARAM_PATHEXAMENDOCUMENTOS"];
                            try
                            {
                                foreach (var result in dataSaveTransact)
                                {
                                    string codifoFile = "FILE_" + result.Secuencia + "_" + result.SecuenciaInforme;
                                    if (result.ACCION == "DELETE")
                                    {
                                        deleteFileEvento(PATH, codifoFile, result.RutaInforme, "");
                                    }
                                    else
                                    {
                                        byte[] fileBytes = (byte[])UTILES_MENSAJES.getFilesBytesUploaded_HCE(codifoFile);
                                        if (fileBytes != null)
                                        {
                                            FileStream fs = System.IO.File.Create(PATH + result.RutaInforme);
                                            foreach (byte b in fileBytes)
                                            {
                                                fs.WriteByte(b);
                                            }
                                            fs.Flush();
                                            fs.Close();
                                        }
                                    }

                                }
                                registro = 1;
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, ex.Message);
                                registro = -99;
                                mensaje = "Error en el grabado de los Archivos.";
                            }

                            //GUARDAR EN DB
                            if (registro > 0)
                            {
                                registro = SvcProcedimientoInforme.setMantenimientoDetalle(null, dataSaveTransact);
                            }
                        }
                        else
                        {

                        }
                        if (registro > 0)
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            //ActivaDescativaButtonSave(true);
                            mensaje = "Se Guardaron satisfactoriamente. los cambios del Episodio: ";
                            //ActivaDescativaButtonSave(true);
                            Session["Data_ExamenArchivoDelete"] = null;
                            Session["Data_ExamenArchivoSave"] = null;

                            eventoLoadPostFormulario(true, "storeExamenes", null);
                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            return showMensajeNotify("Mensaje", mensaje, "INFO");

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", mensaje, "ERROR", false);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }

            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getFileSelectionToUpload_ExamnesInformes(String MODO,
            String campoEvento, String codigoFile, String idWindow)
        {
            Log.Information("HClinicaControllerSup - getFileSelectionToUpload_ExamnesInformes - Entrar");

            TextField txtEvento = this.GetCmp<TextField>("" + campoEvento);
            int codigito = codigoFile.Length;
            String concat = codigoFile.Substring((codigito - 1), 1);
            concat = "0" + concat;

            String tipoOdenes = Convert.ToString(ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION);
            if (Convert.ToString(ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION).Length == 1)
            {
                tipoOdenes = "0" + tipoOdenes;
            }

            if (txtEvento != null)
            {
                System.Web.HttpPostedFile fileUploaded = null;

                if (Session["ARCHIVOSUBIDO_ACTUAL"] != null)
                {
                    fileUploaded = (System.Web.HttpPostedFile)Session["ARCHIVOSUBIDO_ACTUAL"];
                    var fecha = DateTime.Now;
                    var date = Convert.ToString(fecha).Replace("/", "").Replace(":", "").Replace("p.m.", "").Replace("a.m.", "").Replace(" ", "");
                    string ext = fileUploaded.FileName;
                    int file = ext.Length;
                    String Var_Sub = ext.Substring((file - 4), 4);

                    var nombre = ENTITY_GLOBAL.Instance.Sucursal.Trim() + tipoOdenes + ENTITY_GLOBAL.Instance.INDICA_COD_HC.Trim() +
                        ENTITY_GLOBAL.Instance.INDICA_OA.Trim() + ENTITY_GLOBAL.Instance.INDICA_COD_COMPONENTE.Trim() + date + concat;
                    if (Var_Sub.Contains("."))
                    {
                        Var_Sub = Var_Sub.Replace(".", "");
                    }
                    // txtEvento.SetValue("" + fileUploaded.FileName);
                    txtEvento.SetValue("" + nombre + "." + Var_Sub);
                }
            }

            ENTITY_GENERALHCE obj = new ENTITY_GENERALHCE();
            return this.Direct();
        }

        /***/
        public System.Web.Mvc.ActionResult DialogBeforeUploadFile(String MODO,
            String codigoFile, String nombre, String accionSeleccion, String campoevento)
        {
            Log.Information("HClinicaControllerSup - DialogBeforeUploadFile - Entrar");


            ENTITY_GENERALHCE obj = new ENTITY_GENERALHCE();
            obj.campoStr01 = codigoFile; //AUXILIAR
            obj.campoStr02 = nombre; //AUXILIAR            
            obj.campoStr03 = campoevento; //AUXILIAR
            obj.ACCION = accionSeleccion;

            return crearWindowRegistro("DialogBeforeUploadFile", obj, "");
        }
        /***/
        public System.Web.Mvc.ActionResult DialogBeforeMultiUploadFile(String MODO, String codigoFile, String nombre, String accionSeleccion, String campoevento)
        {
            Log.Information("HClinicaControllerSup - DialogBeforeMultiUploadFile - Entrar");

            ENTITY_GENERALHCE obj = new ENTITY_GENERALHCE();
            obj.campoStr01 = codigoFile; //AUXILIAR
            obj.campoStr02 = nombre; //AUXILIAR            
            obj.campoStr03 = campoevento; //AUXILIAR
            obj.ACCION = accionSeleccion;

            return crearWindowRegistro("DialogBeforeMultiUploadFile", obj, "");
        }

        /**CARGA DE ARCHIVOS**/
        public System.Web.Mvc.ActionResult UploadFileEvento(String tipoLoad, String codigoFile, String nombre, String idFileUploadField)
        {
            Log.Information("HClinicaControllerSup - UploadFileEvento - Entrar");

            //string PATH =(string) Session["PARAM_PATHEXAMENDOCUMENTOS"];            
            if (tipoLoad == "SINGLE")
            {
                if (this.GetCmp<FileUploadField>("" + idFileUploadField).HasFile)
                {
                    System.Web.HttpPostedFile fileUploaded = this.GetCmp<FileUploadField>("" + idFileUploadField).PostedFile;
                    Session["ARCHIVOSUBIDO_ACTUAL"] = fileUploaded;
                    byte[] FileBytes = this.GetCmp<FileUploadField>("" + idFileUploadField).FileBytes;
                    UTILES_MENSAJES.setFilesBytesUploaded_HCE("FILE_" + codigoFile, FileBytes);

                    /*String mensajeAuux = ""
                        + "ContentLength:" + this.GetCmp<FileUploadField>("FileUploadField1").PostedFile.ContentLength + "\n"
                        + "ContentType:" + this.GetCmp<FileUploadField>("FileUploadField1").PostedFile.ContentType + "\n"
                        + "InputStream:" + this.GetCmp<FileUploadField>("FileUploadField1").PostedFile.InputStream + "\n"
                        + "FileBytes.length:" + this.GetCmp<FileUploadField>("FileUploadField1").FileBytes.Length + "\n"
                        ;
                    */
                    String mensaje = "Archivo subido Correctamente.";
                    //return showMensajeBox(mensaje, "Éxito", "INFO");
                    return showMensajeNotify("Éxito", mensaje, "INFO");
                }
                else
                {
                    return showMensajeBox("No se pudo subir el archivo.", "Error", "ERROR");
                }
                DirectResult result = new DirectResult();
                result.IsUpload = true;
                return result;
            }
            else if (tipoLoad == "MULTI")
            {
                MultiUpload multiUp = this.GetCmp<MultiUpload>("" + idFileUploadField);
                var PARAM = multiUp.FileTypes;
                PARAM = multiUp.FileTypesDescription;
                PARAM = multiUp.FilePostName;


                int PARAM2 = multiUp.FileUploadLimit;
                PARAM2 = multiUp.PostParams.Count;
                Type tipo = multiUp.PostParams.GetType();

            }
            return this.Direct();
        }
        /**CARGA DE ARCHIVOS**/
        public System.Web.Mvc.ActionResult deleteFileEvento(String PATH, String codigoFile, String nombreFile, String idFileUploadField)
        {
            Log.Information("HClinicaControllerSup - deleteFileEvento - Entrar");

            try
            {
                if (System.IO.File.Exists(PATH + "" + nombreFile))
                {
                    System.IO.File.Delete(PATH + "" + nombreFile);
                }
                return this.Direct();
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMensajeBox("No se pudo subir el archivo.", "Excepción", "ERROR");
            }

        }
        /***/
        public PartialViewResult PanelMultiUploadFile(string containerId, string form)
        {
            Log.Information("HClinicaControllerSup - PanelMultiUploadFile - Entrar");

            return new PartialViewResult
            {
                ViewName = form,
                RenderMode = RenderMode.AddTo,
                ContainerId = containerId,
                Model = ENTITY_GLOBAL.Instance,
                WrapByScriptTag = false // we load the view via Loader with Script mode therefore script tags is not required
            };
        }
        /*public System.Web.Mvc.ActionResult PanelMultiUploadFile()
        {            
            //return this.View("PanelMultiUploadFile");
            return View("PanelMultiUploadFileAux");
        }*/
        /***/
        public System.Web.Mvc.ActionResult VisorDocumentosHCE(string codigoFile, string titulo,
            string nombreFile, string extencionFile, string Accion, string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VisorDocumentosHCE - Entrar");

            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new ENTITY_GENERALHCE();
            model.campoStr01 = codigoFile;
            model.campoStr02 = nombreFile;
            string host = System.Web.HttpContext.Current.Request.Url.Host;
            string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
            //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
            string path = System.Web.HttpContext.Current.Request.ApplicationPath;

            model.campoStr03 = hostPort + path;
            model.campoStr04 = extencionFile;
            model.campoStr05 = titulo;

            string estado = "PanelCentralBlanco";
            return crearWindowRegistro(Form, model, "");
        }


        public System.Web.Mvc.ActionResult DialogVerFile(String pathAuxDefault, String nombreArchivo, string Form, string Accion, string MODO)
        {
            try
            {
                Log.Information("HClinicaControllerSup - DialogVerFile - Entrar");

                String urlBase = "";
                //default                                                                
                string pathsExtendsDefault = "/resources/DocumentosAdjuntos/";
                String host = System.Web.HttpContext.Current.Request.Url.Host;
                String strPathAndQuery = HttpContext.Request.Url.PathAndQuery;
                String hostPort = HttpContext.Request.Url.Authority;
                String strPathAndQuery1 = HttpRuntime.AppDomainAppVirtualPath;
                String path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /*
                //String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + nombreArchivo;
                String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + "ResultadoExamen.doc";
                String rutaGoogle = "http://docs.google.com/viewer?url=" + ruta + "&embedded=true&a=bi&w=1820&pagenumber=1";
                 */
                urlBase = "http://" + hostPort + path + pathsExtendsDefault;

                //de PARAMETROS                
                List<ParametrosMast> listaParam = new List<ParametrosMast>();
                ParametrosMast objParam = new ParametrosMast();
                objParam.Accion = "LISTAR";
                objParam.CompaniaCodigo = "999999";
                objParam.AplicacionCodigo = "WA";//obs
                objParam.ParametroClave = "URL_EXAMD";
                listaParam = SvcParametro.listarParametro(objParam, 0, 0);
                if (listaParam.Count > 0)
                {
                    if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                    {
                        urlBase = (listaParam[0].DescripcionParametro + "").Trim();
                    }
                }

                //Session["PARAM_PATHEXAMENDOCUMENTOS"] = url;
                /////
                List<ENTITY_GENERALHCE> listaAtach = new List<ENTITY_GENERALHCE>();
                var model = new ENTITY_GENERALHCE();
                model.campoStr01 = urlBase + nombreArchivo;
                model.campoStr02 = nombreArchivo;
                model.campoStr03 = hostPort + path;
                model.ACCION = MODO;
                string[] cad = nombreArchivo.Split('.');
                string extension = "";
                if (cad.Length > 1)
                {
                    extension = cad[1];
                }
                model.campoStr04 = extension;
                if (MODO == "DIALOG")
                {
                    return crearWindowRegistro(Form, model, "");
                }
                else
                {
                    model.campoStr10 = "_blank";
                    listaAtach.Add(model);
                    return this.Store(listaAtach);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult DialogVerFile154(String pathAuxDefault, String nombreArchivo, string Form, string Accion, string MODO)
        {
            try
            {
                Log.Information("HClinicaControllerSup - DialogVerFile154 - Entrar");

                String urlBase = "";
                //default                                                                
                string pathsExtendsDefault = pathAuxDefault;
                String host = System.Web.HttpContext.Current.Request.Url.Host;
                String strPathAndQuery = HttpContext.Request.Url.PathAndQuery;
                String hostPort = HttpContext.Request.Url.Authority;
                String strPathAndQuery1 = HttpRuntime.AppDomainAppVirtualPath;
                String path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /*
                //String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + nombreArchivo;
                String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + "ResultadoExamen.doc";
                String rutaGoogle = "http://docs.google.com/viewer?url=" + ruta + "&embedded=true&a=bi&w=1820&pagenumber=1";
                 */
                urlBase = "http://" + hostPort + path + pathsExtendsDefault;

                String rutaX = ENTITY_GLOBAL.Instance.RUTA_ARCHIVOS;

                urlBase = rutaX;

                //de PARAMETROS                
                List<ParametrosMast> listaParam = new List<ParametrosMast>();
                ParametrosMast objParam = new ParametrosMast();
                objParam.Accion = "LISTAR";
                objParam.CompaniaCodigo = "999999";
                objParam.AplicacionCodigo = "WA";//obs
                objParam.ParametroClave = "URL_EXAMD";
                listaParam = SvcParametro.listarParametro(objParam, 0, 0);
                if (listaParam.Count > 0)
                {
                    if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                    {
                        urlBase = (listaParam[0].DescripcionParametro + "").Trim();
                    }
                }
                //Session["PARAM_PATHEXAMENDOCUMENTOS"] = url;
                /////
                List<ENTITY_GENERALHCE> listaAtach = new List<ENTITY_GENERALHCE>();
                var model = new ENTITY_GENERALHCE();
                model.campoStr01 = urlBase + nombreArchivo;
                model.campoStr02 = nombreArchivo;
                model.campoStr03 = hostPort + path;
                model.ACCION = MODO;
                string[] cad = nombreArchivo.Split('.');
                string extension = "";
                if (cad.Length > 1)
                {
                    extension = cad[1];
                }
                model.campoStr04 = extension;
                if (MODO == "DIALOG")
                {
                    return crearWindowRegistro(Form, model, "");
                }
                else
                {
                    model.campoStr10 = "_blank";
                    listaAtach.Add(model);
                    return this.Store(listaAtach);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return this.Direct();
        }
        /*********/


        public System.Web.Mvc.ActionResult ListadoPacienteEpisodioAtencionNoFARMACOLOGICO(int start, int limit, String proceso,
              String profSalud, String txtbuscar, String fechaDesde, String fechaHasta, String tipoBuscar,
              String codigooa, String accion)
        {
            Log.Information("HClinicaControllerSup - ListadoPacienteEpisodioAtencionNoFARMACOLOGICO - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";
            //var field = X.GetCmp<TextField>("txtPaciente");             
            var Listar = new List<V_EpisodioAtenciones>();
            var LocalEnty = new V_EpisodioAtenciones();

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;
            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

            LocalEnty.UsuarioModificacion = getValorFiltroStr(proceso); //AUX para ACCION o FORM
            LocalEnty.UsuarioCreacion = getValorFiltroStr(codigooa); //AUX para código OA
            //  OBS: profSalud
            LocalEnty.FechaModificacion = getValorFiltroDate(fechaDesde); //AUX desde
            LocalEnty.FechaRegistro = getValorFiltroDate(fechaHasta);  ///AUS hasta
            LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;



            //////////////
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            if (ENTITY_GLOBAL.Instance.EpisodioTriaje != null && ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
            }
            else
            {
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            }

            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            // LocalEnty.Id001 = Convert.ToInt32(proceso);

            LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32(proceso);

            LocalEnty.Codigo002 = getValorFiltroStr(proceso);
            LocalEnty.CodigoOA = getValorFiltroStr(codigooa);
            LocalEnty.Accion = LocalEnty.Accion = ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" ? "LISTARPAGTRIAJE" : "LISTARPAG";

            if (accion != null && accion != "")
            {
                LocalEnty.Accion = accion;
            }
            int cantElementos = 0;

            try
            {

                if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF103")
                {
                    LocalEnty.Accion = "LISTARFARMACO";

                    Listar = SvcV_EpisodioAtenciones.ListarV_EpisodioAtenciones(LocalEnty, ini, fin);
                }


            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
            }

            if (Listar.Count > 0)
            {
                int CONT = 0;
                foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                {
                    if (LocalEntyxx.Formato_Codigo == "CCEPF1010")
                    {
                        CONT = 1;
                        break;
                    }

                    //if (LocalEntyxx.Formato_Codigo == "CCEPF100" && LocalEntyxx.Id001 == 2)
                    //{
                    //    CONT = 2;
                    //    break;
                    //}

                }

                if (CONT == 1)
                {
                    var ListarXX1 = new List<V_EpisodioAtenciones>();

                    var valoreArray = Session["ALMACENESXMEDICO"];


                    var ListaAlmacenXmedico = new List<SY_SeguridadAutorizaciones>();


                    var json = JsonConvert.SerializeObject(valoreArray);

                    ListaAlmacenXmedico = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(List<SY_SeguridadAutorizaciones>));

                    //AGREGADO PRA FILTRAR ALMACEN 02/08/2019
                    foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                    {

                        foreach (SY_SeguridadAutorizaciones entyalma in ListaAlmacenXmedico)
                        {
                            if (LocalEntyxx.UnidadReplicacionEC == entyalma.Concepto.Trim())
                                ListarXX1.Add(LocalEntyxx);
                        }



                    }

                    cantElementos = ListarXX1[0].contador_filas;
                    return this.Store(ListarXX1, cantElementos);
                }
                else
                {
                    cantElementos = Listar[0].contador_filas;
                }
            }
            //Agregado para listar columnas variantes
            //getColumnasCronologia(proceso, "COLUMNAS_CRONOL");

            return this.Store(Listar, cantElementos);

        }






        public System.Web.Mvc.ActionResult ListadoPacienteEpisodioAtencionverGLASGOW(int start, int limit,
            String proceso, String profSalud, String txtbuscar, String fechaDesde, String fechaHasta,
            String tipoBuscar, String codigooa, String accion)
        {
            Log.Information("HClinicaControllerSup - ListadoPacienteEpisodioAtencionverGLASGOW - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";
            //var field = X.GetCmp<TextField>("txtPaciente");             
            var Listar = new List<V_EpisodioAtenciones>();
            var LocalEnty = new V_EpisodioAtenciones();

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;
            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

            LocalEnty.UsuarioModificacion = getValorFiltroStr(proceso); //AUX para ACCION o FORM
            LocalEnty.UsuarioCreacion = getValorFiltroStr(codigooa); //AUX para código OA
            //  OBS: profSalud
            LocalEnty.FechaModificacion = getValorFiltroDate(fechaDesde); //AUX desde
            LocalEnty.FechaRegistro = getValorFiltroDate(fechaHasta);  ///AUS hasta
            LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;

            //////////////
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            if (ENTITY_GLOBAL.Instance.EpisodioTriaje != null && ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
            }
            else
            {
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            }

            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            LocalEnty.CodigoOA = getValorFiltroStr(codigooa);
            LocalEnty.Accion = LocalEnty.Accion = ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" ? "LISTARPAGTRIAJE" : "LISTARPAG";

            if (accion != null && accion != "")
            {
                LocalEnty.Accion = accion;
            }
            LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32(proceso);
            LocalEnty.Codigo002 = getValorFiltroStr(proceso);
            int cantElementos = 0;

            try
            {
                Listar = SvcV_EpisodioAtenciones.ListarV_EpisodioAtenciones(LocalEnty, ini, fin);
                Listar = Listar.OrderByDescending(x => x.FechaCreacion).ToList();//METODO AGREGADO
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
            }

            if (Listar.Count > 0)
            {
                // int CONT = 0;
                foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                {
                    if (LocalEntyxx.Formato_Codigo == "CCEPF1010")
                    {
                        // CONT = 1;
                        //  break;
                    }
                }

                //if (CONT == 1)
                //{
                //    var ListarXX1 = new List<V_EpisodioAtenciones>();
                //    var valoreArray = Session["ALMACENESXMEDICO"];
                //    var ListaAlmacenXmedico = new List<SY_SeguridadAutorizaciones>();
                //    var json = JsonConvert.SerializeObject(valoreArray);
                //    ListaAlmacenXmedico = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(List<SY_SeguridadAutorizaciones>));
                //    //AGREGADO PRA FILTRAR ALMACEN 02/08/2019
                //    foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                //    {

                //        foreach (SY_SeguridadAutorizaciones entyalma in ListaAlmacenXmedico)
                //        {
                //            if (LocalEntyxx.UnidadReplicacionEC == entyalma.Concepto.Trim())
                //                ListarXX1.Add(LocalEntyxx);
                //        }



                //    }

                //    cantElementos = ListarXX1[0].contador_filas;
                //    return this.Store(ListarXX1, cantElementos);
                //}
                //   else
                // {
                cantElementos = Listar[0].contador_filas;
                //  }
            }
            //Agregado para listar columnas variantes
            //getColumnasCronologia(proceso, "COLUMNAS_CRONOL");

            return this.Store(Listar, cantElementos);

        }





        public System.Web.Mvc.ActionResult ListadoPacienteEpisodioAtencion(int start, int limit, String proceso,
               String profSalud, String txtbuscar, String fechaDesde, String fechaHasta, String tipoBuscar,
               String codigooa, String accion)
        {
            Log.Information("HClinicaControllerSup - ListadoPacienteEpisodioAtencion - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            //var field = X.GetCmp<TextField>("txtPaciente");             
            var Listar = new List<V_EpisodioAtenciones>();
            var LocalEnty = new V_EpisodioAtenciones();

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;
            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

            LocalEnty.UsuarioModificacion = getValorFiltroStr(proceso); //AUX para ACCION o FORM
            LocalEnty.UsuarioCreacion = getValorFiltroStr(codigooa); //AUX para código OA
            //  OBS: profSalud
            LocalEnty.FechaModificacion = getValorFiltroDate(fechaDesde); //AUX desde
            LocalEnty.FechaRegistro = getValorFiltroDate(fechaHasta);  ///AUS hasta
            LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;



            //////////////
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            if (ENTITY_GLOBAL.Instance.EpisodioTriaje != null && ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
            }
            else
            {
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            }

            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            LocalEnty.CodigoOA = getValorFiltroStr(codigooa);
            LocalEnty.Accion = LocalEnty.Accion = ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" ? "LISTARPAGTRIAJE" : "LISTARPAG";

            if (accion != null && accion != "")
            {
                LocalEnty.Accion = accion;
            }
            // LocalEnty.Id001 = Convert.ToInt32(proceso);

            if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF200" && ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE == 1)
            {

                //5332
                //   LocalEnty.Accion = "LISTCOPYALTA";
                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3830");
                LocalEnty.Codigo002 = getValorFiltroStr("3830");
                Session["COPIA_FORMULARIOALTACOP"] = "ACTIVA";


            }
            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF200" && ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE == 2)
            {
                //5333
                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3884");
                LocalEnty.Codigo002 = getValorFiltroStr("3884");
                Session["COPIA_FORMULARIOALTAEXAMEM"] = "ACTIVA";
            }

            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_1" && ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE == 2)
            {

                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3884");
                LocalEnty.Codigo002 = getValorFiltroStr("3884");
                Session["COPIA_FORMULARIOEPICRISISI"] = "ACTIVA";

            }
            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_3")
            {

                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3837");
                LocalEnty.Codigo002 = getValorFiltroStr("3837");

            }
            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_1" && ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE == 1)
            {
                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3830");
                LocalEnty.Codigo002 = getValorFiltroStr("3830");
                Session["COPIA_FORMULARIOEPIDIAG"] = "ACTIVA";


            }
            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201")
            {

                //3805
                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3837");
                LocalEnty.Codigo002 = getValorFiltroStr("3837");

            }
            else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEP9919")
            {

                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32("3837");
                LocalEnty.Codigo002 = getValorFiltroStr("3837");

            }
            else
            {
                LocalEnty.Id001 = proceso == "" ? 0 : Convert.ToInt32(proceso);
                LocalEnty.Codigo002 = getValorFiltroStr(proceso);
            }

            int cantElementos = 0;

            try
            {
                if (LocalEnty.Id001 > 0)
                {
                    Listar = SvcV_EpisodioAtenciones.ListarV_EpisodioAtenciones(LocalEnty, ini, fin);
                    Listar = Listar.OrderByDescending(x => x.FechaCreacion).ToList();//METODO AGREGADO
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
            }

            if (Listar.Count > 0)
            {
                int CONT = 0;
                //if (accion == "LISTARCOPYPAG")
                //{
                //    var Listarr = new List<V_EpisodioAtenciones>();
                //    foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                //    {
                //        if (LocalEntyxx.Descripcion004 == "No Def")
                //        {
                //            LocalEntyxx.IdEpisodioAtencionCodigo = "[000002].000001";
                //        }
                //        Listarr.Add(LocalEntyxx);
                //    }
                //    Listar = Listarr;
                //}

                foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                {
                    if (LocalEntyxx.Formato_Codigo == "CCEPF1010")
                    {
                        CONT = 1;
                        break;
                    }

                    //if (LocalEntyxx.Formato_Codigo == "CCEPF100" && LocalEntyxx.Id001 == 2)
                    //{
                    //    CONT = 2;
                    //    break;
                    //}

                }

                if (CONT == 1)
                {
                    var ListarXX1 = new List<V_EpisodioAtenciones>();
                    var valoreArray = Session["ALMACENESXMEDICO"];
                    var ListaAlmacenXmedico = new List<SY_SeguridadAutorizaciones>();
                    var json = JsonConvert.SerializeObject(valoreArray);
                    ListaAlmacenXmedico = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(List<SY_SeguridadAutorizaciones>));

                    //AGREGADO PRA FILTRAR ALMACEN 02/08/2019
                    foreach (V_EpisodioAtenciones LocalEntyxx in Listar)
                    {
                        foreach (SY_SeguridadAutorizaciones entyalma in ListaAlmacenXmedico)
                        {
                            if (LocalEntyxx.UnidadReplicacionEC == entyalma.Concepto.Trim())
                                ListarXX1.Add(LocalEntyxx);
                        }
                    }
                    cantElementos = ListarXX1[0].contador_filas;
                    return this.Store(ListarXX1, cantElementos);
                }
                else
                {
                    cantElementos = Listar[0].contador_filas;
                }
            }
            //Agregado para listar columnas variantes
            //getColumnasCronologia(proceso, "COLUMNAS_CRONOL");
            return this.Store(Listar, cantElementos);
        }


        public System.Web.Mvc.ActionResult ListadoPacienteCodigoOA(int start, int limit, String componente, String txtbuscar, String tipoBuscar, String codigooa, String accion)
        {
            Log.Information("HClinicaControllerSup - ListadoPacienteCodigoOA - Entrar");
            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;
            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }   
            var Listar = new List<SS_HC_ProcedimientoInformeSPRING>();
            ENTITY_GLOBAL.Instance.GRUPO = string.Empty;
            var localEnty = new SS_HC_ProcedimientoInformeSPRING
            {
                FechaCreacion = DateTime.Now,
                IdPaciente = ENTITY_GLOBAL.Instance.PacienteID ?? 0,
                Paciente = ENTITY_GLOBAL.Instance.NombreCompletoPaciente ?? string.Empty,
                DescripcionComponente = getValorFiltroStr(componente),
                CodigoOA = getValorFiltroStr(codigooa),
                Accion = string.IsNullOrWhiteSpace(accion) ? "LISTARPAG" : accion,
                IdProcedimiento = tipoBuscar == "FILTRO" ? 0 : (start == 0 ? 0 : start + 1),
                IdOrdenAtencion = tipoBuscar == "FILTRO" ? limit : start + limit
            };
            int cantElementos = 0;
            //Listar = Svc_ProcedimientoInformeSPRING.ListarProcedimientoInformeSPRING(LocalEnty, ini, fin);

            var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
            HttpClient clienteHttp = new HttpClient();
            ViewResponse envioJsons = new ViewResponse();
            envioJsons.valor = 1;
            envioJsons.msg = Newtonsoft.Json.JsonConvert.SerializeObject(localEnty);

            clienteHttp.BaseAddress = new Uri(URL_SERVER);
            var request = clienteHttp.PostAsync("Consulta/ListarVisorProcedimientoInforme", envioJsons, new JsonMediaTypeFormatter()).Result;
            if (request.IsSuccessStatusCode)
            {
                var resultString = request.Content.ReadAsStringAsync().Result;
                Listar = (List<SS_HC_ProcedimientoInformeSPRING>)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(List<SS_HC_ProcedimientoInformeSPRING>));
            }

            if (Listar.Count > 0)
            {
                var rutaServidor = Server.MapPath("../resources/DocumentosAdjuntos/compartir/");
                if (!Directory.Exists(rutaServidor))
                {
                    DirectoryInfo di = Directory.CreateDirectory(rutaServidor);
                }

                foreach (SS_HC_ProcedimientoInformeSPRING dtMes in Listar.AsEnumerable())
                {
                    System.IO.FileInfo fi = new System.IO.FileInfo(dtMes.RutaInforme);
                    if (fi.Exists)
                    {
                        var NombreServidor = fi.Name;   
                        var PathServidor = rutaServidor + NombreServidor;
                        System.IO.File.Copy(dtMes.RutaInforme, PathServidor, true);
                        //System.IO.FileInfo fiServidor = new System.IO.FileInfo(PathServidor);
                        var PathOri = "../resources/DocumentosAdjuntos/compartir/" + NombreServidor.Trim();
                        dtMes.Accion = PathOri;
                    }
                }
                cantElementos = Convert.ToInt32(Listar[0].Contador_filas);
            }
            return this.Store(Listar, cantElementos);
        }

        private byte[] PDF_Bytes(string Path)
        {
            string sPath;
            sPath = Path;
            FileStream Ruta = new FileStream(sPath, FileMode.Open, FileAccess.Read);
            byte[] Binario = new byte[Ruta.Length + 1];
            Ruta.Read(Binario, 0, Convert.ToInt32(Ruta.Length));
            Ruta.Close();
            return Binario;
        }

        public System.Web.Mvc.ActionResult getColumnasCronologia(String opcion, String accion)
        {
            Log.Information("HClinicaControllerSup - getColumnasCronologia - Entrar");

            try
            {
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = accion;
                string usu = "";
                string unidadreplicacion = "";
                int idpaciente = 0;
                int episodioclinico = 0;
                int idepisodioatencion = 0;
                int idordenatencion = 0;
                string CodigoOA = "";
                int IdMedico = 0;
                int IdOpcion = Convert.ToInt32(opcion);
                string codigoformato = "";

                var ObjLista = SvcMiscelaneoFormularioCrono.listarMA_MiscelaneosFormularioCrono(detalle, usu, unidadreplicacion, idpaciente, episodioclinico, idepisodioatencion, idordenatencion, CodigoOA, IdMedico, IdOpcion, codigoformato);
                //var Determinacion = this.GetCmp<Column>("Columncompania");
                //Determinacion.Text = (compania);
                if (ObjLista != null)
                {
                    if (ObjLista.Count > 0)
                    {
                        /*
                        var desc1crono = ObjLista[0].ValorCodigo2;
                        var desc2crono = ObjLista[0].ValorCodigo3;
                        var desc3crono = ObjLista[0].ACCION;
                        */
                        return this.Direct(ObjLista[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            //ENTITY_GLOBAL.Instance.Descrono2 = valorentero;
            //var grado = this.GetCmp<Column>("Columncompania");
            //grado.Text = (valorentero);
            //var Nomdesc2  = "Determinacion";
            //ENTITY_GLOBAL.Instance.Descrono2 = Nomdesc2;
            //var Nomdes3 = "Grado de Afección";
            //ENTITY_GLOBAL.Instance.Descrono3 = Nomdes3;

            return this.Direct();

        }

        public System.Web.Mvc.ActionResult ListadoPacienteEpisodio(int start, int limit, String Name, String selection, String Mode)
        {
            Log.Information("HClinicaControllerSup - ListadoPacienteEpisodio - Entrar");
            var field = X.GetCmp<TextField>("txtBuscar");
            var vtxtBuscar = this.GetCmp<TextField>("txtBuscar");
            var xdtDeste = this.GetCmp<DateField>("dtDeste");

            var dtDeste = this.GetCmp<DateField>("dtDeste").Text;
            var dtHasta = this.GetCmp<Button>("dtHasta").Text;


            var personaPaciente = new PERSONAMAST();
            personaPaciente.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
            personaPaciente.ACCION = "LISTARDIAGNOSTICO";
            var list = SvcPersonaMast.GetSelectPersonaMast(personaPaciente).ToList();
            return this.Store(list);
            //return this.Store(SvcPersonaMast.GetSelectPersonaMast(personaPaciente).ToList());
        }
        public System.Web.Mvc.ActionResult CCEP1008_View()
        {
            Log.Information("HClinicaControllerSup - CCEP1008_View - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            TreePanel p = X.GetCmp<TreePanel>("TreeEast");
            p.Refresh();
            p.ClearContent();
            p.RemoveAll();
            //p.LoadContent(Url.Action("View1"));
            this.Direct();
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP1007_View()
        {
            Log.Information("HClinicaControllerSup - CCEP1007_View - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP1003_View()
        {
            Log.Information("HClinicaControllerSup - CCEP1003_View - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            return View();
        }
        public System.Web.Mvc.ActionResult CCEP1004_View()
        {
            Log.Information("HClinicaControllerSup - CCEP1004_View - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            return View();
        }

        public System.Web.Mvc.ActionResult FormView()
        {
            Log.Information("HClinicaControllerSup - FormView - Entrar");

            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            var html = "Html.TextBox(" + "'Textbox1'" + ", " + "'val'" + ")";
            ViewBag.RenderedHtml = html;
            System.Text.StringBuilder htmlOutput = new System.Text.StringBuilder();


            RegistraPagina();

            return View("FormViewCaptura");
        }
        public PartialViewResult PanelWest(string containerId)
        {
            Log.Information("HClinicaControllerSup - PanelWest - Entrar");

            var aler = CargarAlergias();

            ENTITY_GLOBAL.Instance.alergiaExiste = aler;


            return new PartialViewResult
            {

                RenderMode = RenderMode.AddTo,
                ContainerId = containerId,
                Model = ENTITY_GLOBAL.Instance,
                WrapByScriptTag = false // we load the view via Loader with Script mode therefore script tags is not required


            };
        }


        public bool CargarAlergias()
        {
            VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = new VW_ATENCIONPACIENTE_GENERAL();

            var getTipo = Session["VW_ATENCIONPACIENTE_GEN_SELECC"].GetType();


            if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null && getTipo.Name == "VW_ATENCIONPACIENTE_GENERAL")
            {
                var debug = Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
            }
            else
            {
                return false;
            }



            //////////////////////

            ////////////////////////
            var Listar = new List<PERSONAMAST>();
            var LocalEnty = new PERSONAMAST();
            var objDatos = new PERSONAMAST();

            if (Session["Ssesion_ListarPaciiente"] != null)
            {
                Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
            }
            else
            {
                LocalEnty.ACCION = "LISTARPACIENTE";
                LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
            }
            if (Listar.Count > 0)
            {
                foreach (PERSONAMAST objPersona in Listar)
                {
                    objDatos = objPersona;
                    objDatos.NombreCompleto = objDatos.NombreCompleto.Replace("'", string.Empty);
                    ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                }
            }

            ////TIPO PACIENTE
            objDatos.RutaFirma = vistaGenSelec.TipoPacienteNombre; //AUX
            objDatos.NombreCompleto = vistaGenSelec.PacienteNombre;                                                     ////OBTENER ASEGURADORA
            var detalle = new MA_MiscelaneosDetalle();
            detalle.ACCION = "INFOPACIENTE";
            detalle.ValorCodigo1 = "" + ENTITY_GLOBAL.Instance.PacienteID;
            detalle.ValorCodigo1 = "" + vistaGenSelec.IdPaciente;
            detalle.ValorCodigo2 = "" + vistaGenSelec.IdEmpresaAseguradora;
            var ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, 0, 0);

            if (ObjLista.Count > 0)
            {
                objDatos.DireccionReferencia = ObjLista[0].DescripcionLocal; //AUX
            }
            //////////////////////////////////////////////
            objDatos.Direccion = "";
            objDatos.DireccionEmergencia = "";



            /////////////Obtener Alergias///////////////////



            var objAnam = new MA_MiscelaneosDetalle();

            var listaAnam = new List<MA_MiscelaneosDetalle>();
            objAnam.ACCION = "PANELALERGIA";
            objAnam.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            objAnam.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            objAnam.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            objAnam.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
            listaAnam = SvcMiscelaneos.GetUpListadoServicios(objAnam).ToList();
            if (listaAnam.Count > 0)
            {

                string medAux = "";

                string alimAux = "";

                string contactoAux = "";

                string ambientalAux = "";

                foreach (MA_MiscelaneosDetalle obj in listaAnam)
                {

                    switch
                        (obj.ValorEntero1)
                    {
                        case 1:
                            medAux = medAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 2:
                            alimAux = alimAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 3:
                            ambientalAux = ambientalAux + obj.ValorCodigo1 + ", ";
                            break;
                        case 4:
                            contactoAux = contactoAux + obj.ValorCodigo1 + ", ";
                            break;
                    }
                }

                if (medAux.Length > 1)
                {
                    objDatos.Direccion = medAux.Substring(0, medAux.Length - 1);
                }

                if (alimAux.Length > 1)
                {
                    objDatos.DireccionEmergencia = alimAux.Substring(0, alimAux.Length - 1);
                }
                if (contactoAux.Length > 1)
                {
                    objDatos.DireccionContacto = contactoAux.Substring(0, contactoAux.Length - 1);
                }

                if (ambientalAux.Length > 1)
                {
                    objDatos.DireccionAmbiental = ambientalAux.Substring(0, ambientalAux.Length - 1);
                }
            }
            /////////////////////////////////////////////
            objDatos.ClasePersonaCodigo = "";
            objDatos.PersonaClasificacion = "";

            detalle = new MA_MiscelaneosDetalle();
            detalle.ACCION = "TRATACTIVO";
            int paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            paciente = (int)vistaGenSelec.IdPaciente;

            ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, paciente, 0);
            string tratactivo = "";
            foreach (MA_MiscelaneosDetalle objModelx in ObjLista)
            {
                if (tratactivo.Length > 2) tratactivo = tratactivo + ", ";
                tratactivo = tratactivo + (objModelx.DescripcionLocal + "").Trim() + " (" + objModelx.ValorCodigo1.Trim() + " - " + objModelx.ValorCodigo1.Trim() + ")";
            }
            objDatos.CorrelativoSCTR = tratactivo;

            SS_AD_OrdenAtencionPreexistencia objFormato = new SS_AD_OrdenAtencionPreexistencia();
            objFormato.accion = "LISTAR";
            objFormato.IdDiagnostico = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objFormato.IdDiagnostico = (int)vistaGenSelec.IdPaciente;
            var ListarPreEx = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFormato, 0, 0);
            string Preexit = "";
            foreach (SS_AD_OrdenAtencionPreexistencia objModelxx in ListarPreEx)
            {
                if (Preexit.Length > 2) Preexit = Preexit + ", ";
                Preexit = Preexit + (objModelxx.NombreDiagnostico + "").Trim() + " (" + (objModelxx.CodigoDiagnostico + "").Trim() + ")";
            }
            objDatos.CuentaMonedaLocal_tmp = Preexit;
            /////
            objDatos.CodigoBarras = ENTITY_GLOBAL.Instance.CodigoOA; //AUX PARA OA

            if (String.IsNullOrEmpty(objDatos.Direccion) && String.IsNullOrEmpty(objDatos.DireccionEmergencia)
                && String.IsNullOrEmpty(objDatos.DireccionAmbiental) && String.IsNullOrEmpty(objDatos.DireccionContacto))
            {
                return false;
            }
            else
            {
                return true;
            }

        }

        #region PanelEast
        public PartialViewResult PanelEast(string containerId)
        {
            Log.Information("HClinicaControllerSup - PanelEast - Entrar");


            var LocalEnty = new SS_HC_Tabla();
            var Listar = new List<SS_HC_Tabla>();
            var Listar2 = new List<SS_HC_Favorito>();
            var LocalEnty2 = new SS_HC_Favorito();

            ENTITY_GLOBAL.Instance.TIENE_FAVORITOS = null;

            if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO != "0000")
            {
                ////////////////////OBTENER EL ID DE TABLA/////////////////////
                LocalEnty.NombreTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                LocalEnty.Accion = "LISTARxNOM";
                Listar = SvcTabla.listarTabla(LocalEnty, 0, 5);
                ///////////////////////////////////////////////////////////////
                LocalEnty2.IdAgente = ENTITY_GLOBAL.Instance.IDAGENTE;
                LocalEnty2.Estado = 2;
                LocalEnty2.IdFavoritoTabla = Listar[0].IdFavoritoTabla;
                LocalEnty2.Accion = "LISTARxTABLA";
                Listar2 = SvcFavorito.listarFavorito(LocalEnty2, 0, 5);

                if (Listar2.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.TIENE_FAVORITOS = 1;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.TIENE_FAVORITOS = 0;
                }

            }

            var content = JSON.Serialize(ENTITY_GLOBAL.Instance);
            return new PartialViewResult
            {
                Model = ENTITY_GLOBAL.Instance,
                RenderMode = RenderMode.AddTo,
                ContainerId = containerId,
                WrapByScriptTag = false // we load the view via Loader with Script mode therefore script tags is not required
            };
        }

        /***/
        public System.Web.Mvc.ActionResult setActivoFiltro(string text, string id, bool valor)
        {
            if (valor) //ADD
            {
                Session["indicaFavoritos"] = "ACTIVO";
            }
            else
            {
                Session["indicaFavoritos"] = "INACTIVO";
            }
            return this.Direct();
        }
        /***/
        public System.Web.Mvc.ActionResult add_delete_DataSeleccFavoritos(string text, string id, string numero, bool valor)
        {
            Log.Information("HClinicaControllerSup - add_delete_DataSeleccFavoritos - Entrar");

            List<SS_HC_FavoritoNumero> dataSelec = null;
            int idfavorito = Convert.ToInt32(id);
            int idNumero = Convert.ToInt32(numero);
            if (Session["DataFavoritosSelec"] != null)
            {
                dataSelec = (List<SS_HC_FavoritoNumero>)Session["DataFavoritosSelec"];
            }
            else
            {
                dataSelec = new List<SS_HC_FavoritoNumero>();
            }
            if (valor) //ADD
            {
                SS_HC_FavoritoNumero objSelec = new SS_HC_FavoritoNumero();
                try
                {
                    objSelec.IdFavorito = idfavorito;
                    objSelec.NumeroFavorito = idNumero;
                    objSelec.Accion = "";
                    dataSelec.Add(objSelec);
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);
                }
            }
            else//DELETE
            {
                if (dataSelec.Count > 0)
                {
                    foreach (var result in dataSelec)
                    {
                        if (idNumero == result.NumeroFavorito && idfavorito == result.IdFavorito)
                        {
                            dataSelec.Remove(result);
                            break;
                        }
                    }
                }
            }

            Session["DataFavoritosSelec"] = dataSelec;
            return this.Direct();
        }

        /***/
        public System.Web.Mvc.ActionResult eventoMantenFavoritoRegistro(String MODO, String idFavorito, String idNumero, String ItemSeleccionado, String indicaItem)
        {
            Log.Information("HClinicaControllerSup - eventoMantenFavoritoRegistro - Entrar");

            List<vw_favoritos> listaFavoritos = new List<vw_favoritos>();
            vw_favoritos objModel = new vw_favoritos();
            //objModel.Accion = MODO;

            if (MODO == "NUEVO")
            {
                objModel.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                objModel.IdAgente = ENTITY_GLOBAL.Instance.IDAGENTE;
            }
            else
            {
                objModel.Accion = "LISTAR";
                if (getValorFiltroInt(idFavorito) != null)
                {
                    objModel.IdFavorito = Convert.ToInt32(idFavorito);
                }
                if (getValorFiltroInt(idNumero) != null)
                {
                    objModel.NumeroFavorito = Convert.ToInt32(idNumero);
                }

                objModel.IdAgente = ENTITY_GLOBAL.Instance.IDAGENTE;
                listaFavoritos = SvcVw_Favoritos.listarvw_favoritos(objModel, 0, 0);
                if (listaFavoritos.Count == 1)
                {
                    objModel = listaFavoritos[0];
                    /*
                    objModel.CodigoAgente = listaFavoritos[0].CodigoAgente;
                    objModel.IdFavorito = listaFavoritos[0].IdFavorito;
                    objModel.NumeroFavorito = listaFavoritos[0].NumeroFavorito;
                    objModel.Mnemotecnico = listaFavoritos[0].Mnemotecnico;
                    */
                }
                else
                {
                    return showMensajeNotify("Advertencia", "Asegúrese de haber seleccionado algún Bien o Servicio.", "WARNING");
                }

            }

            objModel.NombreTabla = indicaItem; //AUX
            objModel.Version = "" + ItemSeleccionado;
            objModel.Accion = MODO;
            return crearWindowRegistro("AdminFavoritos/AdminFavoritosServicios", objModel, "");
        }

        public System.Web.Mvc.ActionResult save_Addfavorito(vw_favoritos objSave, String MODO, String idWindow, String indicaItem)
        {
            Log.Information("HClinicaControllerSup - save_Addfavorito - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                try
                {
                    if (MODO == "NUEVO")
                    {
                        objSave.Accion = "INSERT";
                        accion = "registró";
                    }
                    else if (MODO == "UPDATE")
                    {
                        objSave.Accion = "INSERT";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objSave.Accion = "DELETEUSER";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encotró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    ///////////SAVE
                    SS_HC_FavoritoDetalle objSaveDetalle = new SS_HC_FavoritoDetalle();
                    int idFavorito = 0;
                    int numeroFavorito = 0;
                    if (MODO == "NUEVO")
                    {

                    }
                    else
                    {
                        idFavorito = objSave.IdFavorito;
                        numeroFavorito = Convert.ToInt32(objSave.NumeroFavorito);
                    }
                    if (idFavorito > 0 && numeroFavorito > 0)
                    {
                        objSaveDetalle.Accion = objSave.Accion;
                        objSaveDetalle.IdFavorito = idFavorito;
                        objSaveDetalle.NumeroFavorito = numeroFavorito;

                        objSaveDetalle.ValorTexto4 = indicaItem;
                        objSaveDetalle.ValorTexto2 = objSave.NombreTabla;
                        objSaveDetalle.ValorTexto1 = objSave.Version;
                        objSaveDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Version != null)
                        {

                            if (objSave.Version.Contains("["))
                            {

                                string[] cadArray = objSave.Version.Trim().Split('|');
                                string cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                if (indicaItem == "ITEMS")
                                {
                                    if (cadenas.Contains("-"))
                                    {
                                        string[] cadArray2 = cadenas.Trim().Split('-');
                                        if (cadArray2.Length > 2)
                                        {
                                            objSaveDetalle.ValorTexto5 = cadArray2[0]; //LINEA
                                            objSaveDetalle.ValorTexto2 = cadArray2[1]; //FAMILIA
                                            objSaveDetalle.ValorTexto3 =
                                                 (cadArray2[2] + "").Trim(); //SUB FAM
                                            if (cadArray2.Length > 3)
                                            {
                                                objSaveDetalle.ValorTexto3 = objSaveDetalle.ValorTexto3 + "|" +
                                                        (cadArray2[3] + "").Trim(); //ITEM para MED                                                                                       
                                            }
                                        }
                                    }
                                }
                                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEP0F90" || ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF154" || ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF005")
                                {

                                    if (!cadenas.Contains("-"))
                                    {

                                        if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEP0F90")
                                        {
                                            objSaveDetalle.ValorTexto4 = "DELETEDIAGFAVORITOS";

                                        }

                                        objSaveDetalle.ValorId = Convert.ToInt32(cadenas);
                                        objSaveDetalle.ValorTexto3 = cadenas;
                                    }
                                }
                                else
                                {
                                    if (!cadenas.Contains("-"))
                                    {
                                        //objSaveDetalle.ValorId = Convert.ToInt32(cadenas);
                                        objSaveDetalle.ValorTexto3 = cadenas;
                                    }
                                }
                                idResultado = SvcFavoritoDetalle.setMantenimiento(objSaveDetalle, Convert.ToInt32(objSave.IdAgente),
                                    Convert.ToInt32(objSave.TipoFavorito));
                            }
                            else
                            {
                                objSaveDetalle.ValorTexto3 = objSave.NombreTabla;
                                objSaveDetalle.ValorTexto5 = objSave.NombreTabla;
                                idResultado = SvcFavoritoDetalle.setMantenimiento(objSaveDetalle, Convert.ToInt32(objSave.IdAgente),
                                    Convert.ToInt32(objSave.TipoFavorito));
                            }

                        }
                    }

                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " el  Elemento (" + objSave.Descripcion + ") satisfactoriamente.";
                    }
                    else
                    {
                        tipoMsg = "ERROR";
                        message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                        tituloMsg = "Error";
                    }
                    Store compoX = X.GetCmp<Ext.Net.Store>("StoreBuscarServicios");
                    Button compoB = X.GetCmp<Ext.Net.Button>("btnBuscarServiviosNota");

                    compoX.Reload();

                    return showMensajeNotify("INFO", message, "INFO");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:";
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    indicaValidacionForm = true;
                    return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    throw;
                }
            }
            return this.Direct();
        }

        /***/

        public string getFiltroFavoritos()
        {
            Log.Information("HClinicaControllerSup - getFiltroFavoritos - Entrar");

            string filtroFav = "";
            string filtroDelimIni = "R";
            string filtroDelimUnion = "y";
            List<SS_HC_FavoritoNumero> dataSelec = null;
            //int idNumero = Convert.ToInt32(id);
            if (Session["DataFavoritosSelec"] != null)
            {
                dataSelec = (List<SS_HC_FavoritoNumero>)Session["DataFavoritosSelec"];
                foreach (var result in dataSelec)
                {
                    filtroFav = filtroFav + filtroDelimIni + result.IdFavorito + "_" + result.NumeroFavorito + filtroDelimUnion;
                }
                filtroFav = filtroFav + "x";
            }
            return filtroFav;
        }


        public System.Web.Mvc.ActionResult AddNewfavorito(String MODO, int idFavorito, String idtipo)
        {
            Log.Information("HClinicaControllerSup - AddNewfavorito - Entrar");
            Session["INDICADOR_TIPO_MED"] = idtipo;
            if (idtipo == "13")
            {
                ENTITY_GLOBAL.Instance.flagFav = "MEDLINEA";
            }
            if (idtipo == "04")
            {
                ENTITY_GLOBAL.Instance.flagFav = "MEDLINEADOS";

            }
            if (string.IsNullOrEmpty(idtipo))
            {
                ENTITY_GLOBAL.Instance.flagFav = "";
            }
            var Listar = new List<SS_HC_FavoritoNumero>();

            SS_HC_FavoritoNumero objfavorito = new SS_HC_FavoritoNumero();
            /*if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objfavorito.Accion = "LISTAR";
                objfavorito.IdFavorito = idFavorito;
                objfavorito.NumeroFavorito = numero;
                objfavorito.Mnemotecnico = mnemotecnico;

                Listar = SvcFavoritoNumero.listarFavoritoNumero(objfavorito, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FavoritoNumero objEntity in Listar)
                    {
                        objfavorito = objEntity;
                    }
                }
            }
            else*/
            if (MODO == "NUEVO")
            {
                objfavorito.IdFavorito = idFavorito;
                objfavorito.Accion = "NUEVO";
            }
            objfavorito.Accion = MODO;
            List<SS_HC_Formato> listFor = new List<SS_HC_Formato>();
            SS_HC_Formato objF = new SS_HC_Formato();
            objF.CodigoFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
            objF.Accion = "LISTAR";
            listFor = SvcFormato.listarFormato(objF, 0, 0);
            if (listFor.Count > 1)
            {
                ENTITY_GLOBAL.Instance.IDFORMATO = listFor[1].IdFormato;
            }
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);


            return crearWindowRegistro("AddNewFavorito", objfavorito, "");

        }

        public System.Web.Mvc.ActionResult save_favorito(String MODO, String idWindow)
        {
            Log.Information("HClinicaControllerSup - save_favorito - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            var Listar = new List<SS_HC_Tabla>();
            var LocalEnty = new SS_HC_Tabla();
            var objSave = new SS_HC_Favorito();




            /* if (objSave != null)
             {
                 ////VALIDACIÓN
                 objSave.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFAVORITO);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }*/
            /* if (objSave == null)
                 {*/
            try
            {

                if (MODO == "NUEVO")
                {
                    objSave.Accion = "INSERT";
                    accion = "registró";
                }
                else if (MODO == "UPDATE")
                {
                    objSave.Accion = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSave.Accion = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                try
                {
                    //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                }
                catch (Exception e)
                {
                    X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                }

                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                objSave.IdAgente = ENTITY_GLOBAL.Instance.IDAGENTE;
                /*  objSave.IdFavoritoTabla = ENTITY_GLOBAL.Instance.CONCEPTO;*/

                ////////////////////OBTENER EL ID DE TABLA/////////////////////
                LocalEnty.NombreTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                LocalEnty.Accion = "LISTARxNOM";
                Listar = SvcTabla.listarTabla(LocalEnty, 0, 5);
                ///////////////////////////////////////////////////////////////

                objSave.IdFavoritoTabla = Listar[0].IdFavoritoTabla;
                objSave.TipoFavorito = 1;
                objSave.Estado = 2;

                objSave.Descripcion = Listar[0].NombreTabla + "_" + ENTITY_GLOBAL.Instance.USUARIO;
                idResultado = SvcFavorito.setMantenimiento(objSave);

                if (idResultado > 0)
                {
                    message = "Se habilitó los favoritos satisfactoriamente.";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                }
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
            //   }
            /*  }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                  tituloMsg = "Error";
              }
  */
            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return showMensajeBox2(message, tituloMsg, tipoMsg, "accionFinal");
                // return terminarShowMensajeBox2(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        public System.Web.Mvc.ActionResult save_favoritonumero(SS_HC_FavoritoNumero objSave, String MODO, String idWindow)
        {
            Log.Information("HClinicaControllerSup - save_favoritonumero - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            var LocalEnty = new SS_HC_Tabla();
            var Listar = new List<SS_HC_Tabla>();
            var Listar2 = new List<SS_HC_Favorito>();
            var LocalEnty2 = new SS_HC_Favorito();

            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFAVORITONUMERO);
                }

                if (msgNoValido.Count > 0)
                {

                    String mensaje = "El Mnemotécnico  (" + objSave.Descripcion + ")  ya  ha sido empleado";
                    //String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: "

                    //message = "El " + accion + " el  memotecnico ingresado (" + objSave.Descripcion + ") ya ha sido empleado."; 
                    message = mensaje;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = false;
                }


                else
                {


                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        ////////////////////OBTENER EL ID DE TABLA/////////////////////
                        LocalEnty.NombreTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                        LocalEnty.Accion = "LISTARxNOM";
                        Listar = SvcTabla.listarTabla(LocalEnty, 0, 5);
                        ///////////////////////////////////////////////////////////////
                        LocalEnty2.IdAgente = ENTITY_GLOBAL.Instance.IDAGENTE;
                        LocalEnty2.Estado = 2;
                        LocalEnty2.IdFavoritoTabla = Listar[0].IdFavoritoTabla;
                        LocalEnty2.Accion = "LISTARxTABLA";
                        Listar2 = SvcFavorito.listarFavorito(LocalEnty2, 0, 5);



                        objSave.IdFavorito = Listar2[0].IdFavorito;

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.IndicadorPorDefecto = 2;
                        objSave.Estado = 2;
                        // objSave.Version = Convert.ToString(ENTITY_GLOBAL.Instance.IDAGENTE);
                        idResultado = SvcFavoritoNumero.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  favorito (" + objSave.Descripcion + ") satisfactoriamente.";
                        }

                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }

                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";

            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox2(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        public System.Web.Mvc.ActionResult UnidadMedidas2(String numero, string Accion)
        {
            Log.Information("HClinicaControllerSup - UnidadMedidas2 - Entrar");
            var numeroX = (string)Session["NumeroStore"];// X.GetCmp<TextField>("NumeroStore").Text;
            /*string varLinea = "txtLinea" + numeroX;
            string varFamilia = "txtFamilia" + numeroX;
            string varSubFamilia = "txtSubFamilia" + numeroX;*/
            var Linea = (string)Session["Linea_Med"];//X.GetCmp<TextField>(varLinea).Text;
            var Familia = (string)Session["Familia_Med"];//X.GetCmp<TextField>(varFamilia).Text;
            var SubFamilia = (string)Session["SubFamilia_Med"];//X.GetCmp<TextField>(varSubFamilia).Text;

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(Linea, Familia, SubFamilia, "", Accion));
        }

        public System.Web.Mvc.ActionResult cargarUnidadMedida(String numero)
        {
            Log.Information("HClinicaControllerSup - cargarUnidadMedida - Entrar");

            string txtCOMBO = "cbIdUnidadMedida" + numero;//(string)Session["NumeroStore"];
            var txtcbUniMed = X.GetCmp<ComboBox>(txtCOMBO);

            /* Session["NumeroStore"] = numero;*/
            txtcbUniMed.GetStore().Reload();

            return this.Direct();

        }

        public System.Web.Mvc.ActionResult cargarNumeroStore(String numero, String linea, String familia, String subfamilia)
        {
            Log.Information("HClinicaControllerSup - cargarNumeroStore - Entrar");

            Session["NumeroStore"] = numero;

            Session["Linea_Med"] = linea;
            Session["Familia_Med"] = familia;
            Session["SubFamilia_Med"] = subfamilia;
            return this.Direct();

        }

        #endregion

        public PartialViewResult PanelNorth(string containerId)
        {
            Log.Information("HClinicaControllerSup - PanelNorth - Entrar");


            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {

                TemporalSesionTriaje VistaTriaje = new TemporalSesionTriaje();
                if (Session["DATA_ALL_PACIENTE_CABECERA"] != null)
                {
                    VistaTriaje = (TemporalSesionTriaje)Session["DATA_ALL_PACIENTE_CABECERA"];

                }

                ////////////////////////
                var Listar = new List<PERSONAMAST>();
                var LocalEnty = new PERSONAMAST();
                var objDatos = new PERSONAMAST();

                if (Session["Ssesion_ListarPaciiente"] != null)
                {
                    Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
                    //if (!string.IsNullOrEmpty(Listar[0].DireccionEmergencia))
                    //{
                    //    Session["EmpresaAseguradoraNombre"] = Listar[0].DireccionEmergencia;
                    //}
                    //else
                    //{
                    //    Session["EmpresaAseguradoraNombre"] = null;
                    //}
                }
                else
                {
                    LocalEnty.ACCION = "LISTARPACIENTE";
                    LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
                }

                if (Listar.Count > 0)
                {
                    foreach (PERSONAMAST objPersona in Listar)
                    {
                        objDatos = objPersona;
                        objDatos.NombreCompleto = objDatos.NombreCompleto.Replace("'", string.Empty);
                        ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                        Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    }
                }
                ////TIPO PACIENTE
                objDatos.RutaFirma = VistaTriaje.Accion; //AUX
                ////OBTENER ASEGURADORA
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "INFOPACIENTE";
                detalle.ValorCodigo1 = "" + ENTITY_GLOBAL.Instance.PacienteID;
                detalle.ValorCodigo1 = "" + VistaTriaje.IdPaciente;
                detalle.ValorCodigo2 = "" + "SEGURO TEST";
                //var ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, 0, 0);
                // if (ObjLista.Count > 0)
                // {
                // objDatos.DireccionReferencia = ObjLista[0].DescripcionLocal; //AUX
                //}
                //////////////////////////////////////////////
                objDatos.Direccion = "";
                objDatos.DireccionEmergencia = "";
                /////////////Obtener Alergias///////////////////



                var objAnam = new MA_MiscelaneosDetalle();

                var listaAnam = new List<MA_MiscelaneosDetalle>();



                objAnam.ACCION = "PANELALERGIA";

                objAnam.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                objAnam.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();

                objAnam.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();

                objAnam.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();

                listaAnam = SvcMiscelaneos.GetUpListadoServicios(objAnam).ToList();



                //var objAnam = new SS_HC_Anamnesis_AP();


                if (listaAnam.Count > 0)
                {

                    string medAux = "";

                    string alimAux = "";

                    foreach (MA_MiscelaneosDetalle obj in listaAnam)
                    {

                        if (obj.ValorEntero1 == 2)
                        {

                            medAux = medAux + obj.ValorCodigo1 + ", ";

                        }

                        if (obj.ValorEntero1 == 1)
                        {

                            alimAux = alimAux + obj.ValorCodigo1 + ", ";

                        }

                    }

                    if (medAux.Length > 1)
                    {

                        objDatos.Direccion = medAux.Substring(0, medAux.Length - 1);

                    }

                    if (alimAux.Length > 1)
                    {

                        objDatos.DireccionEmergencia = alimAux.Substring(0, alimAux.Length - 1);

                    }



                }
                /////////////////////////////////////////////
                objDatos.ClasePersonaCodigo = "";
                objDatos.PersonaClasificacion = "";
                //////////////////obtener registro acompañante////////////

                detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "TRATACTIVO";
                int paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                paciente = (int)VistaTriaje.IdPaciente;

                //  ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, paciente, 0);
                string tratactivo = "";
                //foreach (MA_MiscelaneosDetalle objModelx in ObjLista)
                //{
                //    if (tratactivo.Length > 2) tratactivo = tratactivo + ", ";
                //    tratactivo = tratactivo + (objModelx.DescripcionLocal + "").Trim() + " (" + objModelx.ValorCodigo1.Trim() + " - " + objModelx.ValorCodigo1.Trim() + ")";
                //}
                objDatos.CorrelativoSCTR = tratactivo;

                SS_AD_OrdenAtencionPreexistencia objFormato = new SS_AD_OrdenAtencionPreexistencia();
                objFormato.accion = "LISTAR";
                objFormato.IdDiagnostico = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objFormato.IdDiagnostico = (int)VistaTriaje.IdPaciente;
                var ListarPreEx = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFormato, 0, 0);
                string Preexit = "";
                foreach (SS_AD_OrdenAtencionPreexistencia objModelxx in ListarPreEx)
                {
                    if (Preexit.Length > 2) Preexit = Preexit + ", ";
                    Preexit = Preexit + (objModelxx.NombreDiagnostico + "").Trim() + " (" + (objModelxx.CodigoDiagnostico + "").Trim() + ")";
                }
                objDatos.CuentaMonedaLocal_tmp = Preexit;
                /////
                objDatos.CodigoBarras = ENTITY_GLOBAL.Instance.CodigoOA; //AUX PARA OA


                ENTITY_GLOBAL.Instance.CONTADOR_BORRAR_SESION_CABECERA++;

                if (ENTITY_GLOBAL.Instance.CONTADOR_BORRAR_SESION_CABECERA == 3)
                {
                    // Session["DATA_ALL_PACIENTE_CABECERA"] = null;
                    // ENTITY_GLOBAL.Instance.ACCCION_ABRIR_ARBOL = "NO_ABRIR";
                    ENTITY_GLOBAL.Instance.CONTADOR_BORRAR_SESION_CABECERA = 0;
                }
                ////////////////
                return new PartialViewResult
                {
                    Model = objDatos,
                    ContainerId = containerId,
                    ViewName = "PanelNorth",
                    WrapByScriptTag = false
                };
            }

            else
            {


                VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = new VW_ATENCIONPACIENTE_GENERAL();

                if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                {
                    vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                }



                //////////////////////

                ////////////////////////
                var Listar = new List<PERSONAMAST>();
                var LocalEnty = new PERSONAMAST();
                var objDatos = new PERSONAMAST();

                if (Session["Ssesion_ListarPaciiente"] != null)
                {
                    Listar = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
                }
                else
                {
                    LocalEnty.ACCION = "LISTARPACIENTE";
                    LocalEnty.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Listar = SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList();
                }

                if (Listar.Count > 0)
                {
                    foreach (PERSONAMAST objPersona in Listar)
                    {
                        objDatos = objPersona;
                        ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto.Replace("\r", string.Empty);
                        Session["NOMBREPACIENTE_ACTUAL"] = objDatos.NombreCompleto.Replace("\r", string.Empty);
                    }
                }
                ////TIPO PACIENTE
                objDatos.RutaFirma = vistaGenSelec.TipoPacienteNombre; //AUX
                ////OBTENER ASEGURADORA
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "INFOPACIENTE";
                detalle.ValorCodigo1 = "" + ENTITY_GLOBAL.Instance.PacienteID;
                detalle.ValorCodigo1 = "" + vistaGenSelec.IdPaciente;
                detalle.ValorCodigo2 = "" + vistaGenSelec.IdEmpresaAseguradora;
                var ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, 0, 0);

                if (ObjLista.Count > 0)
                {
                    objDatos.DireccionReferencia = ObjLista[0].DescripcionLocal; //AUX
                }
                //////////////////////////////////////////////
                objDatos.Direccion = "";
                objDatos.DireccionEmergencia = "";



                /////////////Obtener Alergias///////////////////



                var objAnam = new MA_MiscelaneosDetalle();

                var listaAnam = new List<MA_MiscelaneosDetalle>();
                objAnam.ACCION = "PANELALERGIA";
                objAnam.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                objAnam.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                objAnam.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                objAnam.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                listaAnam = SvcMiscelaneos.GetUpListadoServicios(objAnam).ToList();
                if (listaAnam.Count > 0)
                {

                    string medAux = "";

                    string alimAux = "";

                    foreach (MA_MiscelaneosDetalle obj in listaAnam)
                    {

                        if (obj.ValorEntero1 == 2)
                        {

                            medAux = medAux + obj.ValorCodigo1 + ", ";

                        }

                        if (obj.ValorEntero1 == 1)
                        {

                            alimAux = alimAux + obj.ValorCodigo1 + ", ";

                        }

                    }

                    if (medAux.Length > 1)
                    {

                        objDatos.Direccion = medAux.Substring(0, medAux.Length - 1);

                    }

                    if (alimAux.Length > 1)
                    {

                        objDatos.DireccionEmergencia = alimAux.Substring(0, alimAux.Length - 1);

                    }
                }
                /////////////////////////////////////////////
                objDatos.ClasePersonaCodigo = "";
                objDatos.PersonaClasificacion = "";

                detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "TRATACTIVO";
                int paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                paciente = (int)vistaGenSelec.IdPaciente;

                ObjLista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, paciente, 0);
                string tratactivo = "";
                foreach (MA_MiscelaneosDetalle objModelx in ObjLista)
                {
                    if (tratactivo.Length > 2) tratactivo = tratactivo + ", ";
                    tratactivo = tratactivo + (objModelx.DescripcionLocal + "").Trim() + " (" + objModelx.ValorCodigo1.Trim() + " - " + objModelx.ValorCodigo1.Trim() + ")";
                }
                objDatos.CorrelativoSCTR = tratactivo;

                SS_AD_OrdenAtencionPreexistencia objFormato = new SS_AD_OrdenAtencionPreexistencia();
                objFormato.accion = "LISTAR";
                objFormato.IdDiagnostico = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objFormato.IdDiagnostico = (int)vistaGenSelec.IdPaciente;
                var ListarPreEx = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFormato, 0, 0);
                string Preexit = "";
                foreach (SS_AD_OrdenAtencionPreexistencia objModelxx in ListarPreEx)
                {
                    if (Preexit.Length > 2) Preexit = Preexit + ", ";
                    Preexit = Preexit + (objModelxx.NombreDiagnostico + "").Trim() + " (" + (objModelxx.CodigoDiagnostico + "").Trim() + ")";
                }
                objDatos.CuentaMonedaLocal_tmp = Preexit;
                /////
                objDatos.CodigoBarras = ENTITY_GLOBAL.Instance.CodigoOA; //AUX PARA OA

                ////////////////
                return new PartialViewResult
                {
                    Model = objDatos,
                    ContainerId = containerId,
                    ViewName = "PanelNorth",
                    WrapByScriptTag = false
                };


            }

        }
        public System.Web.Mvc.ActionResult ListadoTratamientoActivoPaciente(String idPaciente, String fecha)
        {
            Log.Information("HClinicaControllerSup - ListadoTratamientoActivoPaciente - Entrar");
            var detalle = new MA_MiscelaneosDetalle();
            detalle.ACCION = "TRATACTIVO";
            int paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            var Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, paciente, 0);

            //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
            //Session["ENTITY_PACIENTE"] = Listar;                
            return this.Store(Listar);
        }
        public System.Web.Mvc.ActionResult ListadoPreexistenciasPaciente(String idPaciente, String fecha)
        {
            Log.Information("HClinicaControllerSup - ListadoPreexistenciasPaciente - Entrar");

            var Listar = new List<SS_AD_OrdenAtencionPreexistencia>();
            SS_AD_OrdenAtencionPreexistencia objFormato = new SS_AD_OrdenAtencionPreexistencia();
            objFormato.accion = "LISTAR";
            objFormato.IdDiagnostico = (int)ENTITY_GLOBAL.Instance.PacienteID;
            Listar = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFormato, 0, 0);
            return this.Store(Listar);
        }

        public PartialViewResult PanelSouth(string containerId)
        {
            Log.Information("HClinicaControllerSup - PanelSouth - Entrar");

            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;

            objVistaSeguridad.Accion = "LISTAPROCESOGENERAL";



            /**LISTADO PARA VERIFICAR DOCUMENTOS ADJUNTOS HCE*/
            MA_MiscelaneosDetalle LocalEnty = new MA_MiscelaneosDetalle();
            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.ValorCodigo2 = "" + ENTITY_GLOBAL.Instance.PacienteID;
            LocalEnty.ACCION = "VIRTDOCUMENT";
            LocalEnty.ValorNumerico = 0;
            int result = SvcMiscelaneos.setMantenimiento(LocalEnty);
            objVistaSeguridad.IndicadorObjeto = result;
            /******************************/
            //LocalEnty.GRUPO = "";
            return new PartialViewResult
            {
                ContainerId = containerId,
                ViewName = "PanelSouth",
                WrapByScriptTag = false,
                Model = objVistaSeguridad


            };
        }


        [DirectMethod(IDMode = DirectMethodProxyIDMode.None)]
        public System.Web.Mvc.ActionResult LoadView1()
        {
            TreePanel p = X.GetCmp<TreePanel>("TreeEast");
            p.Refresh();
            //p.LoadContent(Url.Action("View1"));
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult FilterPanel(string recipienteID)
        {
            Log.Information("HClinicaControllerSup - FilterPanel - Entrar");

            PartialViewResult pr = new PartialViewResult(recipienteID);
            pr.RenderMode = RenderMode.AddTo;
            pr.SingleControl = true;
            pr.WrapByScriptTag = true;
            return pr;
        }

        [DirectMethod(IDMode = DirectMethodProxyIDMode.None)]
        public System.Web.Mvc.ActionResult RefreshMenu()
        {
            Log.Information("HClinicaControllerSup - RefreshMenu - Entrar");

            return this.Direct(BuildTree());
        }
        public static Ext.Net.Node BuildTree()
        {
            Log.Information("HClinicaControllerSup - BuildTree - Entrar");

            Ext.Net.Node root = new Ext.Net.Node();
            root.Text = "Root";
            root.Expanded = true;
            string prefix = DateTime.Now.Second + "_";

            for (int i = 0; i < 1; i++)
            {
                Ext.Net.Node node = new Ext.Net.Node();
                node.Text = prefix + i;
                node.Leaf = true;
                root.Children.Add(node);
            }

            return root;
        }
        public PartialViewResult ShowProperties(SEGURIDADCONCEPTO model, String containerId)
        {
            Log.Information("HClinicaControllerSup - ShowProperties - Entrar");

            Ext.Net.MVC.PartialViewResult partialViewResult = new Ext.Net.MVC.PartialViewResult(containerId);
            partialViewResult.RenderMode = RenderMode.AddTo;
            partialViewResult.SingleControl = true;
            partialViewResult.ContainerId = containerId;
            partialViewResult.Model = model;
            return partialViewResult;
        }


        public PartialViewResult LoadFormatos(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - LoadFormatos - Entrar");

            string WEBNUEVO = "";
            string WEBMODIFICAR = "";
            ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO = 0;
            ENTITY_GLOBAL.Instance.INDICA_FORM = 0;
            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            ENTITY_GLOBAL.Instance.bitacora = 0;
            ENTITY_GLOBAL.Instance.INDICADOR_DOACEPTAR = 0;

            List<ParametrosMast> listaParam = new List<ParametrosMast>();
            ParametrosMast objParam = new ParametrosMast();
            objParam.Accion = "LISTAR";
            objParam.CompaniaCodigo = "999999";
            objParam.AplicacionCodigo = "WA";//obs
            objParam.ParametroClave = "DINAMICA";
            listaParam = SvcParametro.listarParametro(objParam, 0, 0);
            if (listaParam.Count > 0)
            {
                if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                {
                    WEBNUEVO = (listaParam[0].DescripcionParametro + "").Trim();
                    WEBMODIFICAR = (listaParam[0].Explicacion + "").Trim();
                }
            }

            Session["indicaFavoritos"] = null;
            Session["DataFavoritosSelec"] = null;
            Session["DataDianosticoValoracionDelete"] = null;

            if (containerId == "Center1_CCEP")
            {
                Session["containerId_ACTUAL"] = "Center1";
                Session["textTree_ACTUAL"] = "6405";
            }
            else
            {
                Session["containerId_ACTUAL"] = containerId;
                Session["textTree_ACTUAL"] = text;
            }


            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            var UrlFormato = "PanelCentralBlanco";
            var model = new SS_HC_EpisodioAtenciones();
            model.IdOpcion = text.Trim();
            //CONSTRUIR COD HCE
            //model.WORKFLAG = String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioClinico) + "." + String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioAtencion);
            model.DescansoMedico = UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo,
                /*ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,*/ ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.EpisodioAtencionBeta, ENTITY_GLOBAL.Instance.PacienteID, "");

            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";
            if (text.Trim() != "root")
            {
                objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
            }

            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            if (resulListado.Count > 0)
            {
                ENTITY_GLOBAL.Instance.CodeForm = resulListado[0].CodigoFormato;
                switch (resulListado[0].TipoFormato)
                {
                    case 2: //ES FIJO
                        UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                        model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";
                        if (resulListado[0].CodigoFormato.Trim() == "CCEP00F2")
                        {
                            ENTITY_GLOBAL.Instance.OPCION_STOCK_DEF = 0;
                        }
                        else { ENTITY_GLOBAL.Instance.OPCION_STOCK_DEF = 1; }

                        break;
                    case 3: //ES DINAMIC
                        string searchForThis = "weasis";
                        int firstCharacter = resulListado[0].UrlOpcion.Trim().IndexOf(searchForThis);
                        model.CONCEPTO = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        model.Accion = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        if (firstCharacter > 0)
                        {
                            model.Url = resulListado[0].UrlOpcion.Trim();
                            UrlFormato = "PanelCenterPACUrl";
                        }
                        else
                        {
                            UrlFormato = "PanelCenterUrl";
                            model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBNUEVO;
                            model.Lectura = "0";
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") model.Lectura = "1";
                            model.IdForm = resulListado[0].IdFormatoDinamico.ToString().Trim();
                            model.IdOpcion = text.Trim();
                            model.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                            model.TransID = "0";
                            model.URLFLAG = 0;
                            //////////////////OBTENER ID TRANSACCIONAL/////////////
                            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            obj.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                            /*obj.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
                            obj.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;*/

                            obj.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencionBeta);//ADD
                            obj.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion;//ADD

                            obj.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                            obj.IdTipoInterConsulta = Convert.ToInt32(model.IdForm); //AUX
                            obj.IdTipoReferencia = Convert.ToInt32(model.IdOpcion); //AUX
                            obj.UsuarioCreacion = model.Usuario;
                            obj.Accion = "ATENCIONFORMATO";
                            List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(obj, 0, 0);
                            if (listaEpi != null)
                            {
                                if (listaEpi.Count > 0)
                                {
                                    if (listaEpi[0].IdProcedimiento != null)
                                    {
                                        model.URLFLAG = 1;
                                        model.TransID = "" + listaEpi[0].IdProcedimiento;
                                        model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBMODIFICAR;
                                    }
                                }
                            }
                            /////////////////////
                            //SS_HC_EpisodioAtencionFormato ooo;
                        }
                        break;
                    case 4: //ES LINK

                        if (containerId == "Center1_CCEP")
                        {
                            UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                            //resulListado[0].CodigoFormato = "CCEPF327";
                            model.CONCEPTO = "CCEPF327_View";
                            model.Accion = "CCEPF327_View";
                            ENTITY_GLOBAL.Instance.URLlink = (resulListado[0].UrlOpcion != null ? resulListado[0].UrlOpcion.Trim() : "");
                        }
                        else
                        {
                            UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                            model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                            model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";
                            ENTITY_GLOBAL.Instance.URLlink = (resulListado[0].UrlOpcion != null ? resulListado[0].UrlOpcion.Trim() : "");

                        }
                        break;
                    default:

                        if (containerId == "Center1_CCEP")
                        {
                            resulListado[0].CodigoFormato = "CCEPF327";
                            model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        }
                        else
                        {
                            if (resulListado[0].CodigoFormato != null)
                            {
                                model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                            }
                        }
                        UrlFormato = "PanelCentralBlanco";
                        break;

                }

                //ADD
                ENTITY_GLOBAL.Instance.TIPOFORMATO = Convert.ToInt32(resulListado[0].TipoFormato);
                ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL = resulListado[0].IdOpcion;
                ENTITY_GLOBAL.Instance.IDOPCION_PADRE = resulListado[0].IdOpcionPadre;
                ENTITY_GLOBAL.Instance.MODULOBLIGATORIO = resulListado[0].Modulo;

                ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO =
                    resulListado[0].IdObjetoAsociado != null ? (int)resulListado[0].IdObjetoAsociado : 0; //AUX PARA INDICAR SI ES COMPARTIDO

                if (text == "6372")
                {
                    objVistaSeguridad.CodigoFormato = "CCEPF200";
                    resulListado[0].CodigoFormato = "CCEPF200";
                }

                if (resulListado[0].CodigoFormato == null)
                {
                    UrlFormato = "PanelCentralBlanco";
                }
                else
                {
                    model.DESCRIPCION = resulListado[0].NombreOpcion;
                    model.Version = resulListado[0].NombreOpcion;
                    model.GRUPO = "REG0000";
                    if (resulListado[0].NombreOpcion != null)
                    {
                        ENTITY_GLOBAL.Instance.CONCEPTO = (resulListado[0].CodigoFormato + "").Trim();
                        ENTITY_GLOBAL.Instance.IDFORMATO = resulListado[0].IdFormato;
                        ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION = resulListado[0].NombreOpcion.Trim();
                        //   ENTITY_GLOBAL.Instance.CODOPCION_GUARDADO = Convert.ToString(resulListado[0].IdOpcion);
                    }
                    objVistaSeguridad = new SS_CHE_VistaSeguridad();
                    objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                    objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                    objVistaSeguridad.Accion = "DATOSRECURSOS";

                    //esto se podria reemplazar creo pqero dejemosloahi se va tener que validar bien or todos lados
                    objVistaSeguridad.CodigoFormato = resulListado[0].CodigoFormato.Trim();

                    if (objVistaSeguridad.CodigoFormato == "DinamicsComp")
                    {

                        if (text == "3813")
                        {
                            objVistaSeguridad.CodigoFormato = "CCEP0F90";
                        }
                        else
                        {
                            objVistaSeguridad.CodigoFormato = "CCEPF150";
                        }
                    }

                    if (objVistaSeguridad.CodigoFormato == "CCEPF200")
                    {
                        if (text == "6372")
                        {
                            objVistaSeguridad.CodigoFormato = "CCEP0F90";
                        }
                        else
                        {
                            objVistaSeguridad.CodigoFormato = "CCEPF150";
                        }
                    }

                    if (objVistaSeguridad.CodigoFormato == "CCEPF201_3")
                    {

                        if (text == "3805")
                        {
                            objVistaSeguridad.CodigoFormato = "CCEPF101";
                        }
                        else
                        {
                            objVistaSeguridad.CodigoFormato = "CCEP0F90";
                        }
                        //objVistaSeguridad.CodigoFormato = "CCEP0F90";
                    }
                    if (objVistaSeguridad.CodigoFormato == "CCEPF201_2")
                    {
                        objVistaSeguridad.CodigoFormato = "CCEPF101";
                    }
                    if (objVistaSeguridad.CodigoFormato == "CCEPF319")
                    {
                        if (text == "3567")
                        {
                            objVistaSeguridad.CodigoFormato = "CCEPF150";
                        }
                        else
                        {
                            objVistaSeguridad.CodigoFormato = "CCEP0F90";
                        }

                    }


                    if (objVistaSeguridad.CodigoFormato == "CCEPF323_1")
                    {
                        if (text == "3567")
                        {
                            objVistaSeguridad.CodigoFormato = "CCEPF150";
                        }
                        else
                        {
                            objVistaSeguridad.CodigoFormato = "CCEP0F90";
                        }
                    }

                    resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                    if (containerId == "Center1_CCEP")
                    {
                        objVistaSeguridad.CodigoFormato = "CCEPF327";
                        resulListado[0].CodigoFormato = "CCEPF327";
                        ENTITY_GLOBAL.Instance.CONCEPTO = "CCEPF327";
                    }
                    ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                    Session["RecursosActivos"] = resulListado;

                    //ADD APFRA BIENES Y SERV
                    Session["ESCOLLAPSED_BIENSERV"] = "S";
                    //POR DEFECTO COLAPSADO
                    Panel panelServ = X.GetCmp<Panel>("East1");
                    if (panelServ != null)
                    {
                        panelServ.Collapse();
                    }

                    if (resulListado.Count > 0)
                    {
                        ENTITY_GLOBAL.Instance.MENUREC_CODIGO = resulListado[0].Nombre;
                        ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = resulListado[0].DescripcionAgente;
                        //ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
                        ENTITY_GLOBAL.Instance.indicadorUI = false;
                        if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO == "MM000")
                        {
                            // ENTITY_GLOBAL.Instance.indicadorAuxiliar = true;  //¿?
                            ENTITY_GLOBAL.Instance.indicadorUI = true;
                        }
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.MENUREC_CODIGO = "0000";
                        ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = "SIN RECURSOS";
                    }
                }
            }
            /////OBJ MODEL      
            Session["ESTADOANTERIOR"] = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            model.ESTADOFORMULARIO = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            model.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            model.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            model.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;
            model.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            model.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
            if (Session["NOMBREPACIENTE_ACTUAL"] != null)
            {
                model.ObservacionFirma = (String)Session["NOMBREPACIENTE_ACTUAL"];
            }
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != null && ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != 0)
            {
                model.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
                model.FlagFirma = ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
            }
            else
            {
                //model.Clinico = null;
                model.FlagFirma = null;
            }
            if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
            {
                // model.TIPODEOBJETO =  (String)Session["TIPOTRABAJADOR_ACTUAL"];
                model.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
            }
            //OBS
            UTILES_MENSAJES.setParametro_Form("EPI_CLINICO_CREADO", ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo);
            //VALIDAR EXISTENCIA DE EPI CLINICOS PARA CONTINUAR
            SS_HC_EpisodioClinico objEPiCLin = new SS_HC_EpisodioClinico();
            objEPiCLin.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEPiCLin.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            objEPiCLin.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion; //NO USADO
            objEPiCLin.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO; //NO USADO
            objEPiCLin.ACCION = "VALIDAR_EPICONTINUAR";
            //OBS: SE DIJO UNA OA NO PUEDE ESTAR EN OTRO EPI ClÍNICO....09/17
            int indica = SvcEpisodioClinico.setMantenimiento(objEPiCLin);
            if (indica > 0) //EXisten Epi clínicos para continuar
            {
                model.IdTipoInterConsulta = 1; //AUX PARA INDICAR (mostrar) BOTON CONTINUAR
            }
            else
            {
                model.IdTipoInterConsulta = 0; //AUX PARA INDICAR (ocultar) BOTON CONTINUAR
            }
            setCodigoFormatosPaginas("GENERAL", text);

            //CONFIG DECOPIAR FORM

            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 0;
            if (getIndicaFormatosCopiar(ENTITY_GLOBAL.Instance.CONCEPTO))
            {
                if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF103")
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 2;
                }
                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF200")
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 3;
                }

                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_1")
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 3;
                }

                else
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 1;
                }

            }


            //CONFIG DE SEGURIDAD DE IMPRESION
            cargarPermisosFormato(true);

            return new PartialViewResult
            {
                ViewName = UrlFormato,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }
        /// <summary>
        /// arboles
        /// </summary>
        /// <returns></returns>
        /// 

        /***************************************************************************/

        public PartialViewResult LoadFormatosBita(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - LoadFormatosBita - Entrar");
            string WEBNUEVO = "";
            string WEBMODIFICAR = "";

            ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO = 0;

            List<ParametrosMast> listaParam = new List<ParametrosMast>();
            ParametrosMast objParam = new ParametrosMast();
            objParam.Accion = "LISTAR";
            objParam.CompaniaCodigo = "999999";
            objParam.AplicacionCodigo = "WA";//obs
            objParam.ParametroClave = "DINAMICA";
            listaParam = SvcParametro.listarParametro(objParam, 0, 0);
            if (listaParam.Count > 0)
            {
                if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                {
                    WEBNUEVO = (listaParam[0].DescripcionParametro + "").Trim();
                    WEBMODIFICAR = (listaParam[0].Explicacion + "").Trim();
                }
            }

            Session["indicaFavoritos"] = null;
            Session["DataFavoritosSelec"] = null;
            Session["containerId_ACTUAL2"] = containerId;
            Session["textTree_ACTUAL2"] = text;
            //ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            var UrlFormato = "PanelCentralBlanco";
            var model = new SS_HC_EpisodioAtenciones();
            model.IdOpcion = text.Trim();
            //CONSTRUIR COD HCE
            //model.WORKFLAG = String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioClinico) + "." + String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioAtencion);
            model.DescansoMedico = UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo,
                /*ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,*/ ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.EpisodioAtencionBeta, ENTITY_GLOBAL.Instance.PacienteID, "");

            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";
            if (text.Trim() != "root")
            {
                objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
            }

            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            if (resulListado.Count > 0)
            {
                ENTITY_GLOBAL.Instance.CodeForm = resulListado[0].CodigoFormato;
                switch (resulListado[0].TipoFormato)
                {
                    case 2: //ES FIJO
                        UrlFormato = "PanelCenterBita"; //resulListado[0].CodigoFormato;
                        model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";
                        if (resulListado[0].CodigoFormato.Trim() == "CCEP00F2")
                        {
                            ENTITY_GLOBAL.Instance.OPCION_STOCK_DEF = 0;
                        }
                        else { ENTITY_GLOBAL.Instance.OPCION_STOCK_DEF = 1; }

                        break;
                    case 3: //ES DINAMIC
                        string searchForThis = "weasis";
                        int firstCharacter = resulListado[0].UrlOpcion.Trim().IndexOf(searchForThis);
                        model.CONCEPTO = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        model.Accion = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        if (firstCharacter > 0)
                        {
                            model.Url = resulListado[0].UrlOpcion.Trim();
                            UrlFormato = "PanelCenterPACUrl";
                        }
                        else
                        {
                            UrlFormato = "PanelCenterUrl";
                            model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBNUEVO;
                            model.Lectura = "0";
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") model.Lectura = "1";
                            model.IdForm = resulListado[0].IdFormatoDinamico.ToString().Trim();
                            model.IdOpcion = text.Trim();
                            model.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                            model.TransID = "0";
                            model.URLFLAG = 0;
                            //////////////////OBTENER ID TRANSACCIONAL/////////////
                            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            obj.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                            /*obj.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
                            obj.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;*/

                            obj.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencionBeta);//ADD
                            obj.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion;//ADD

                            obj.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                            obj.IdTipoInterConsulta = Convert.ToInt32(model.IdForm); //AUX
                            obj.IdTipoReferencia = Convert.ToInt32(model.IdOpcion); //AUX
                            obj.UsuarioCreacion = model.Usuario;
                            obj.Accion = "ATENCIONFORMATO";
                            List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(obj, 0, 0);
                            if (listaEpi != null)
                            {
                                if (listaEpi.Count > 0)
                                {
                                    if (listaEpi[0].IdProcedimiento != null)
                                    {
                                        model.URLFLAG = 1;
                                        model.TransID = "" + listaEpi[0].IdProcedimiento;
                                        model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBMODIFICAR;
                                    }
                                }
                            }
                            /////////////////////
                            //SS_HC_EpisodioAtencionFormato ooo;
                        }
                        break;
                    case 4: //ES LINK
                        UrlFormato = "PanelCenterBita"; //resulListado[0].CodigoFormato;
                        model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";

                        ENTITY_GLOBAL.Instance.URLlink = (resulListado[0].UrlOpcion != null ? resulListado[0].UrlOpcion.Trim() : "");
                        break;
                    default:
                        if (resulListado[0].CodigoFormato != null)
                        {
                            model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        }
                        UrlFormato = "PanelCentralBlanco";
                        break;

                }

                //ADD
                ENTITY_GLOBAL.Instance.TIPOFORMATO = Convert.ToInt32(resulListado[0].TipoFormato);
                ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL = resulListado[0].IdOpcion;
                ENTITY_GLOBAL.Instance.IDOPCION_PADRE = resulListado[0].IdOpcionPadre;
                ENTITY_GLOBAL.Instance.MODULOBLIGATORIO = resulListado[0].Modulo;

                ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO =
                    resulListado[0].IdObjetoAsociado != null ? (int)resulListado[0].IdObjetoAsociado : 0; //AUX PARA INDICAR SI ES COMPARTIDO
                if (resulListado[0].CodigoFormato == null)
                {
                    UrlFormato = "PanelCentralBlanco";
                }
                else
                {
                    model.DESCRIPCION = resulListado[0].NombreOpcion;
                    model.Version = resulListado[0].NombreOpcion;
                    model.GRUPO = "REG0000";
                    if (resulListado[0].NombreOpcion != null)
                    {
                        ENTITY_GLOBAL.Instance.CONCEPTO = (resulListado[0].CodigoFormato + "").Trim();
                        ENTITY_GLOBAL.Instance.IDFORMATO = resulListado[0].IdFormato;
                        ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION = resulListado[0].NombreOpcion.Trim();
                    }
                    objVistaSeguridad = new SS_CHE_VistaSeguridad();
                    objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                    objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                    objVistaSeguridad.Accion = "DATOSRECURSOS";
                    objVistaSeguridad.CodigoFormato = resulListado[0].CodigoFormato.Trim();
                    resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                    ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                    Session["RecursosActivos"] = resulListado;


                }
            }
            ///////OBJ MODEL      
            //model.ESTADOFORMULARIO = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            //model.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            //model.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            //model.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            //model.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;
            //model.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            //model.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
            //if (Session["NOMBREPACIENTE_ACTUAL"] != null)
            //{
            //    model.ObservacionFirma = (String)Session["NOMBREPACIENTE_ACTUAL"];
            //}
            //if (ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != null && ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != 0)
            //{
            //    model.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
            //    model.FlagFirma = ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
            //}
            //else
            //{
            //    //model.Clinico = null;
            //    model.FlagFirma = null;
            //}
            //if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
            //{
            //    // model.TIPODEOBJETO =  (String)Session["TIPOTRABAJADOR_ACTUAL"];
            //    model.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
            //}

            setCodigoFormatosPaginas("GENERAL", text);

            //CONFIG DECOPIAR FORM
            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 0;
            if (getIndicaFormatosCopiar(ENTITY_GLOBAL.Instance.CONCEPTO))
            {
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 1;
            }
            //CONFIG DE SEGURIDAD DE IMPRESION

            cargarPermisosFormato(true);

            return new PartialViewResult
            {
                ViewName = UrlFormato,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }
        /**************************************************************************/


        public PartialViewResult LoadFormatosArbol(string containerId, string opc)
        {
            Log.Information("HClinicaControllerSup - LoadFormatosArbol - Entrar");

            string WEBNUEVO = "";
            string WEBMODIFICAR = "";
            string text = ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL;
            // ENTITY_GLOBAL.Instance.CODOPCION_GUARDADO = ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL;

            if (opc == "Bita")
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 1;
            }
            else
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION2;
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 2;
            }


            ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO = 0;

            List<ParametrosMast> listaParam = new List<ParametrosMast>();
            ParametrosMast objParam = new ParametrosMast();
            objParam.Accion = "LISTAR";
            objParam.CompaniaCodigo = "999999";
            objParam.AplicacionCodigo = "WA";//obs
            objParam.ParametroClave = "DINAMICA";
            listaParam = SvcParametro.listarParametro(objParam, 0, 0);
            if (listaParam.Count > 0)
            {
                if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                {
                    WEBNUEVO = (listaParam[0].DescripcionParametro + "").Trim();
                    WEBMODIFICAR = (listaParam[0].Explicacion + "").Trim();
                }
            }

            Session["indicaFavoritos"] = null;
            Session["DataFavoritosSelec"] = null;
            Session["containerId_ACTUAL"] = containerId;
            Session["textTree_ACTUAL"] = text;
            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            var UrlFormato = "PanelCentralBlanco";
            var model = new SS_HC_EpisodioAtenciones();
            model.IdOpcion = text.Trim();
            //CONSTRUIR COD HCE
            //model.WORKFLAG = String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioClinico) + "." + String.Format("{0:00000}", ENTITY_GLOBAL.Instance.EpisodioAtencion);
            model.DescansoMedico = UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo,
                /*ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,*/ ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.EpisodioAtencionBeta, ENTITY_GLOBAL.Instance.PacienteID, "");

            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";
            if (text.Trim() != "root")
            {
                objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
            }

            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            if (resulListado.Count > 0)
            {
                switch (resulListado[0].TipoFormato)
                {
                    case 2: //ES FIJO
                        UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                        model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";
                        break;
                    case 3: //ES DINAMIC
                        string searchForThis = "weasis";
                        int firstCharacter = resulListado[0].UrlOpcion.Trim().IndexOf(searchForThis);
                        model.CONCEPTO = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        model.Accion = resulListado[0].UrlOpcion.Trim() + resulListado[0].IdFormatoDinamico.ToString().Trim();
                        if (firstCharacter > 0)
                        {
                            model.Url = resulListado[0].UrlOpcion.Trim();
                            UrlFormato = "PanelCenterPACUrl";
                        }
                        else
                        {
                            UrlFormato = "PanelCenterUrl";
                            model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBNUEVO;
                            model.Lectura = "0";
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") model.Lectura = "1";
                            model.IdForm = resulListado[0].IdFormatoDinamico.ToString().Trim();
                            model.IdOpcion = text.Trim();
                            model.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                            model.TransID = "0";
                            model.URLFLAG = 0;
                            //////////////////OBTENER ID TRANSACCIONAL/////////////
                            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            obj.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                            obj.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
                            obj.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;
                            obj.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                            obj.IdTipoInterConsulta = Convert.ToInt32(model.IdForm); //AUX
                            obj.IdTipoReferencia = Convert.ToInt32(model.IdOpcion); //AUX
                            obj.UsuarioCreacion = model.Usuario;
                            obj.Accion = "ATENCIONFORMATO";
                            List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(obj, 0, 0);
                            if (listaEpi != null)
                            {
                                if (listaEpi.Count > 0)
                                {
                                    if (listaEpi[0].IdProcedimiento != null)
                                    {
                                        model.URLFLAG = 1;
                                        model.TransID = "" + listaEpi[0].IdProcedimiento;
                                        model.Url = resulListado[0].UrlOpcion.Trim() + "/" + WEBMODIFICAR;
                                    }
                                }
                            }
                            /////////////////////
                            //SS_HC_EpisodioAtencionFormato ooo;
                        }
                        break;
                    case 4: //ES LINK
                        UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                        model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        model.Accion = resulListado[0].CodigoFormato.Trim() + "_View";

                        ENTITY_GLOBAL.Instance.URLlink = (resulListado[0].UrlOpcion != null ? resulListado[0].UrlOpcion.Trim() : "");
                        break;
                    default:
                        if (resulListado[0].CodigoFormato != null)
                        {
                            model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                        }
                        UrlFormato = "PanelCentralBlanco";
                        break;

                }

                //ADD
                ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL = resulListado[0].IdOpcion;
                ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO =
                    resulListado[0].IdObjetoAsociado != null ? (int)resulListado[0].IdObjetoAsociado : 0; //AUX PARA INDICAR SI ES COMPARTIDO
                if (resulListado[0].CodigoFormato == null)
                {
                    UrlFormato = "PanelCentralBlanco";
                }
                else
                {
                    model.DESCRIPCION = resulListado[0].NombreOpcion;
                    model.Version = resulListado[0].NombreOpcion;
                    model.GRUPO = "REG0000";
                    if (resulListado[0].NombreOpcion != null)
                    {
                        ENTITY_GLOBAL.Instance.CONCEPTO = (resulListado[0].CodigoFormato + "").Trim();
                        ENTITY_GLOBAL.Instance.IDFORMATO = resulListado[0].IdFormato;
                        ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION = resulListado[0].NombreOpcion.Trim();
                    }
                    objVistaSeguridad = new SS_CHE_VistaSeguridad();
                    objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                    objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                    objVistaSeguridad.Accion = "DATOSRECURSOS";
                    objVistaSeguridad.CodigoFormato = resulListado[0].CodigoFormato.Trim();
                    resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                    ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                    Session["RecursosActivos"] = resulListado;

                    //ADD APFRA BIENES Y SERV
                    Session["ESCOLLAPSED_BIENSERV"] = "S";
                    //POR DEFECTO COLAPSADO
                    Panel panelServ = X.GetCmp<Panel>("East1");
                    if (panelServ != null)
                    {
                        panelServ.Collapse();
                    }
                    if (resulListado.Count > 0)
                    {
                        ENTITY_GLOBAL.Instance.MENUREC_CODIGO = resulListado[0].Nombre;
                        ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = resulListado[0].DescripcionAgente;
                        //ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
                        ENTITY_GLOBAL.Instance.indicadorUI = false;
                        if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO == "MM000")
                        {
                            // ENTITY_GLOBAL.Instance.indicadorAuxiliar = true;  //¿?
                            ENTITY_GLOBAL.Instance.indicadorUI = true;
                        }
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.MENUREC_CODIGO = "0000";
                        ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = "SIN RECURSOS";
                    }
                }
            }
            /////OBJ MODEL      
            model.ESTADOFORMULARIO = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            model.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            model.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            model.EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencionPrim;
            model.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            model.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
            if (Session["NOMBREPACIENTE_ACTUAL"] != null)
            {
                model.ObservacionFirma = (String)Session["NOMBREPACIENTE_ACTUAL"];
            }
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != null && ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo != 0)
            {
                model.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
                model.FlagFirma = ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
            }
            else
            {
                //model.Clinico = null;
                model.FlagFirma = null;
            }
            if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
            {
                // model.TIPODEOBJETO =  (String)Session["TIPOTRABAJADOR_ACTUAL"];
                model.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
            }
            //OBS
            UTILES_MENSAJES.setParametro_Form("EPI_CLINICO_CREADO", ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo);
            //VALIDAR EXISTENCIA DE EPI CLINICOS PARA CONTINUAR
            SS_HC_EpisodioClinico objEPiCLin = new SS_HC_EpisodioClinico();
            objEPiCLin.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEPiCLin.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            objEPiCLin.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion; //NO USADO
            objEPiCLin.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO; //NO USADO
            objEPiCLin.ACCION = "VALIDAR_EPICONTINUAR";
            //OBS: SE DIJO UNA OA NO PUEDE ESTAR EN OTRO EPI ClÍNICO....09/17
            int indica = SvcEpisodioClinico.setMantenimiento(objEPiCLin);
            if (indica > 0) //EXisten Epi clínicos para continuar
            {
                model.IdTipoInterConsulta = 1; //AUX PARA INDICAR (mostrar) BOTON CONTINUAR
            }
            else
            {
                model.IdTipoInterConsulta = 0; //AUX PARA INDICAR (ocultar) BOTON CONTINUAR
            }
            setCodigoFormatosPaginas("GENERAL", text);

            //CONFIG DECOPIAR FORM
            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 0;
            if (getIndicaFormatosCopiar(ENTITY_GLOBAL.Instance.CONCEPTO))
            {
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_COPY = 1;
            }
            //CONFIG DE SEGURIDAD DE IMPRESION
            cargarPermisosFormato(true);

            return new PartialViewResult
            {
                ViewName = UrlFormato,// "PanelCentralBlanco",
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }


        public System.Web.Mvc.ActionResult reloadFormatos()
        {
            Log.Information("HClinicaControllerSup - reloadFormatos - Entrar");

            string containerId = "";
            string text = "0";
            //if (Session["containerId_ACTUAL"] != null && Session["textTree_ACTUAL"] != null)
            //{
            //    containerId = (string)Session["containerId_ACTUAL"];
            //    text = (string)Session["textTree_ACTUAL"];
            //    return LoadFormatos(containerId, text);
            //}
            //else
            //{
            //    return LoadFormatos("", "0");
            //}

            if (ENTITY_GLOBAL.Instance.validarcopiarPanelCancelar == 1)
            {
                containerId = (string)Session["containerId_ACTUAL"];
                text = (string)Session["textTree_ACTUAL"];
                return LoadFormatos(containerId, text);
            }
            else if (ENTITY_GLOBAL.Instance.validarcopiarPanelCancelar == 0)
            {
                string containerId2 = (string)Session["containerIdTemp"];
                string text2 = (string)Session["textTemp"];
                return LoadFormatos(containerId2, text2);
            }
            else
            {
                return LoadFormatos("", "0");
            }





        }

        public PartialViewResult reloadPanelNorthC()
        {
            Log.Information("HClinicaControllerSup - reloadPanelNorthC - Entrar");
            string containerId = "";
            if (Session["containerId_ACTUAL"] != null)
            {
                containerId = (string)Session["containerId_ACTUAL"];
                return PanelNorth(containerId);
            }
            else
            {
                return PanelNorth("");
            }
        }

        public PartialViewResult LoadCentral(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - LoadCentral - Entrar");
            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            //VERSION ANTERIOR
            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new SEGURIDADCONCEPTO();
            string estado = "PanelCentralBlanco";
            objMiscl.ACCION = "TITULO_FORM";
            objMiscl.AplicacionCodigo = "CG";
            objMiscl.CodigoTabla = text.Trim();
            var resulObjMiscl = new MA_MiscelaneosDetalle();
            var resulMiscelaneosTitulo = SvcMiscelaneos.GetFormTitulo(objMiscl);
            if (resulMiscelaneosTitulo.Count > 0)
            {

                foreach (MA_MiscelaneosDetalle obMa_Mis in resulMiscelaneosTitulo)
                {
                    ENTITY_GLOBAL.Instance.MENUREC_CODIGO = obMa_Mis.ValorCodigo1;
                    ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = obMa_Mis.DescripcionExtranjera;
                    ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                    ENTITY_GLOBAL.Instance.NIVEL = 1;
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";

                    if (obMa_Mis.ValorCodigo4 == null)
                    {
                        if (obMa_Mis.ValorEntero1 > 0)
                        {
                            ENTITY_GLOBAL.Instance.CONCEPTO = obMa_Mis.ValorCodigo3.Trim();
                            model.CONCEPTO = obMa_Mis.ValorCodigo3.Trim() + "_View";
                            estado = "PanelCenter";
                        }
                        else
                        {
                            estado = "PanelCentralBlanco";
                        }

                    }
                    else if (obMa_Mis.ValorCodigo4.Trim() == "1")
                    {
                        ENTITY_GLOBAL.Instance.CONCEPTO = obMa_Mis.ValorCodigo3.Trim();
                        model.CONCEPTO = obMa_Mis.ValorCodigo3.Trim() + "_View";
                        estado = "PanelCenter";
                    }
                    else if (obMa_Mis.ValorCodigo4.Trim() == "2")
                    {
                        ENTITY_GLOBAL.Instance.CONCEPTO = obMa_Mis.ValorCodigo2.Trim() + "=" + obMa_Mis.ValorCodigo3.Trim();
                        model.CONCEPTO = obMa_Mis.ValorCodigo2.Trim() + "=" + obMa_Mis.ValorCodigo3.Trim();
                        estado = "PanelCenterUrl";
                    }
                    ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION = obMa_Mis.DescripcionLocal.Trim();
                    model.DESCRIPCION = obMa_Mis.DescripcionLocal;
                    model.GRUPO = "REG0000";
                }
            }
            return new PartialViewResult
            {
                ViewName = estado,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }
        public PartialViewResult EditCentral(string selection, string text)
        {
            Log.Information("HClinicaControllerSup - EditCentral - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new SEGURIDADCONCEPTO();
            string estado = "PanelCentralBlanco";
            if (selection.Length == 0)
            {
                X.Msg.Alert("Mensage", "Seleccione registro episodio", new MessageBoxButtonsConfig
                {
                    Yes = new MessageBoxButtonConfig
                    {
                        //Handler = "CompanyX.MessageBox_Basic.DoYes()",
                        Text = "Aceptar"
                    }
                }).Show();
            }
            else
            {
                /*SelectedRowCollection src = JSON.Deserialize<SelectedRowCollection>(selection);
                List<int> omitIds = new List<int>();
                foreach (SelectedRow row in src)
                {
                    omitIds.Add(Convert.ToInt32(row.RecordID));
                }*/
                ENTITY_GLOBAL.Instance.EpisodioAtencion = Convert.ToInt32(selection.Trim());
                objMiscl.ACCION = "CODIGO_FORM";
                objMiscl.AplicacionCodigo = "CG";
                objMiscl.ValorCodigo1 = text.Trim();
                objMiscl.ValorCodigo2 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                objMiscl.CodigoTabla = text.Trim();
                var resulObjMiscl = new MA_MiscelaneosDetalle();
                var resulMiscelaneosTitulo = SvcMiscelaneos.GetFormTitulo(objMiscl);
                if (resulMiscelaneosTitulo.Count > 0)
                {
                    estado = "PanelCenter";
                    foreach (MA_MiscelaneosDetalle obMa_Mis in resulMiscelaneosTitulo)
                    {
                        ENTITY_GLOBAL.Instance.MENUREC_CODIGO = obMa_Mis.ValorCodigo1;
                        ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = obMa_Mis.DescripcionExtranjera;
                        ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                        ENTITY_GLOBAL.Instance.NIVEL = 1;
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.CONCEPTO = obMa_Mis.CodigoTabla;
                        model.CONCEPTO = obMa_Mis.CodigoTabla.Trim() + "_View";
                        model.DESCRIPCION = obMa_Mis.DescripcionLocal;
                        model.GRUPO = "REG0000";
                    }
                }

            }
            return new PartialViewResult
            {
                ViewName = estado,
                ContainerId = "Center1",
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };


        }
        public class MultipleViewResult : System.Web.Mvc.ActionResult
        {
            public const string ChunkSeparator = "---|||---";
            public IList<PartialViewResult> PartialViewResults { get; private set; }
            public MultipleViewResult(params PartialViewResult[] views)
            {
                if (PartialViewResults == null)
                    PartialViewResults = new List<PartialViewResult>();
                foreach (var v in views)
                    PartialViewResults.Add(v);
            }

            public override void ExecuteResult(System.Web.Mvc.ControllerContext context)
            {
                if (context == null)
                    throw new ArgumentNullException("context");
                var total = PartialViewResults.Count;
                for (var index = 0; index < total; index++)
                {
                    var pv = PartialViewResults[index];
                    pv.ExecuteResult(context);
                    if (index < total - 1)
                        context.HttpContext.Response.Output.Write(ChunkSeparator);
                }
            }
        }


        /*  ClearContainer = true,
           WrapByScriptTag = true,*/
        public System.Web.Mvc.ActionResult GetTreeView()
        {
            Log.Information("HClinicaControllerSup - GetTreeView - Entrar");

            Node root1 = new Node();
            root1.Text = "ds";
            bool submit = true;
            for (int i = 0; i < 10; i++)
            {
                Node node = new Node();
                node.NodeID = (i + 1).ToString();
                node.Text = "Node" + (i + 1);
                node.Leaf = false;
                node.Expandable = true;
                node.Checked = true;
                node.CustomAttributes.Add(new ConfigItem("submit", JSON.Serialize(submit), ParameterMode.Raw));
                for (int j = 0; j < 3; j++)
                {
                    Node childNode = new Node();
                    childNode.NodeID = (j + 1).ToString();
                    childNode.Text = "Node" + (j + 1);
                    childNode.Leaf = true;
                    childNode.Checked = true;
                    childNode.CustomAttributes.Add(new ConfigItem("submit", JSON.Serialize(submit), ParameterMode.Raw));
                    node.Children.Add(childNode);
                    submit = !submit;
                }
                root1.Children.Add(node);
            }
            List<Ext.Net.Node> lstNode = new List<Node>();
            lstNode.Add(root1);
            return View(lstNode);
        }
        public StoreResult GetTreeChild(string node)
        {
            Log.Information("HClinicaControllerSup - GetTreeChild - Entrar");


            //List<Task> duetasks = service.GetAllDueTasks();

            return this.Store(null);
            /*
            Seguridad sp_stores = new Seguridad();
            List<SP_SEGURIDADCONCEPTOResult> objConcepto = new List<SP_SEGURIDADCONCEPTOResult>();
            objConcepto = sp_stores
            NodeCollection nodes = new Ext.Net.NodeCollection();
            foreach(SEGURIDADCONCEPTO conceptos in objConcepto){
                Node asyncNode = new Node();
                asyncNode.Text = conceptos.DESCRIPCION;
                asyncNode.NodeID = conceptos.CONCEPTOPADRE;
                asyncNode.Leaf = Convert.ToInt32(conceptos.TIPODEDETALLE.ToString().Trim()) == 1 ? true : false;
                nodes.Add(asyncNode);
            }
    
            return this.Store(nodes);*/
        }


        public System.Web.Mvc.ActionResult DiscriminaControles(string selection, string accion)
        {
            Log.Information("HClinicaControllerSup - DiscriminaControles - Entrar");

            var combo1 = this.GetCmp<ComboBox>("cmbFiltro");
            combo1.Hidden = true;
            return this.Direct();
        }

        public StoreResult GetListarBusquedaServicios(int start, int limit, string tipofiltro,
              string filtro, string tipoBuscar, string Linea, string Familia, String Stock, string Servicio, string desalmacen)
        {
            Log.Information("HClinicaControllerSup - GetListarBusquedaServicios - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            Session["SESIONALMACEN"] = null;

            var Listar = new List<MA_MiscelaneosDetalle>();
            var LocalEnty = new MA_MiscelaneosDetalle();
            int cantElementos = 0;

            List<SS_CHE_VistaSeguridad> SSListVistaSeguridad = new List<SS_CHE_VistaSeguridad>();
            if (Session["RecursosActivos"] != null)
            {
                SSListVistaSeguridad = (List<SS_CHE_VistaSeguridad>)Session["RecursosActivos"];
            }

            if (SSListVistaSeguridad.Count > 0)
            {
                if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO.Trim() != "0000")
                {
                    LocalEnty.CodigoTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;

                    if (LocalEnty.CodigoTabla == "MM000" && tipoBuscar == "LOAD" && filtro.Length < 1) // && start==0
                    {
                    }
                    else
                    {

                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO;
                        if (tipofiltro == "CO")
                        {
                            LocalEnty.CodigoElemento = filtro;
                            LocalEnty.DescripcionLocal = null;
                        }
                        else
                        {
                            LocalEnty.CodigoElemento = null;
                            LocalEnty.DescripcionLocal = filtro;
                        }
                        LocalEnty.ValorNumerico = 1; //OBS tipo de folder
                        LocalEnty.ACCION = "NIVEL2";

                        int ini = (start == 0 ? start : start + 1);
                        int fin = start + limit;

                        if (tipoBuscar == "FILTRO")
                        {
                            ini = 0; fin = limit;
                        }

                        LocalEnty.ValorCodigo4 = Linea;
                        LocalEnty.ValorCodigo5 = Familia;
                        LocalEnty.ValorCodigo2 = Servicio;
                        LocalEnty.ACCION = "BUSCARSERVICIOS";
                        LocalEnty.ValorCodigo1 = null;

                        if (!string.IsNullOrEmpty(desalmacen))
                        {
                            LocalEnty.UltimoUsuario = desalmacen;

                            Session["SESIONALMACEN"] = desalmacen;

                        }

                        if (Stock == "1")
                        {
                            LocalEnty.ValorEntero7 = 1;

                        }
                        else
                        {
                            LocalEnty.ValorEntero7 = 0;
                        }


                        string filtroFavoritosNum = null;
                        if ((Session["indicaFavoritos"] + "") == "ACTIVO")
                        {
                            LocalEnty.ValorCodigo1 = (Session["indicaFavoritos"] + ""); //AUX indicador
                            filtroFavoritosNum = getFiltroFavoritos();
                        }
                        LocalEnty.ValorCodigo3 = filtroFavoritosNum;
                        //ADD 06/11/15  para Obtener Indicador EPS 
                        LocalEnty.ValorCodigo6 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        var SES = Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                        VW_ATENCIONPACIENTE_GENERAL objAtencionPacSelecc = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];

                        if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                        {
                            //VW_ATENCIONPACIENTE_GENERAL objAtencionPacSelecc = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                            if (objAtencionPacSelecc.IdHospitalizacion != 0)
                            {
                                try
                                {
                                    // var VALOR = objAtencionPacSelecc.PersonaAnt.Trim();
                                    //int numer =int.Parse(VALOR);
                                    // LocalEnty.ValorCodigo7 = Convert.ToString(objAtencionPacSelecc.PersonaAnt.Trim());//AUX para IdContrato
                                    LocalEnty.ValorEntero1 = Convert.ToInt32(objAtencionPacSelecc.IdHospitalizacion);//AUX para IdContrato
                                }
                                catch (Exception ex)
                                {
                                    Log.Error(ex, ex.Message);
                                    EventLog.GenerarLogError(ex);
                                }
                            }
                        }

                        //LocalEnty.ValorEntero1 = Convert.ToString(objAtencionPacSelecc.PersonaAnt.Trim());
                        // var prueba = objAtencionPacSelecc.PersonaAnt;


                        //LocalEnty.ValorEntero1 = Convert.ToInt32(objAtencionPacSelecce.IdHospitalizacion);
                        if (Linea == "A1" && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                        {
                            Linea = "04";
                            ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA = "";
                        }
                        else if (Linea == "A2" && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                        {
                            Linea = "04";
                            ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA = "CP000";
                        }
                        else if (Linea == "A3" && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                        {
                            Linea = "04";
                            ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA = "CP000";
                        }
                        LocalEnty.CodigoTabla = ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA == "" || ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA == null ? ENTITY_GLOBAL.Instance.MENUREC_CODIGO : ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA;
                        Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
                        //   Listar[0].ValorEntero6 = Convert.ToInt32(desalmacen);


                        //cantElementos = SvcMiscelaneos.setMantenimiento(LocalEnty);
                        if (Listar.Count > 0)
                        {
                            cantElementos = Convert.ToInt32(Listar[0].ValorEntero7); //AUX PARA EL CONTADOR
                            //LocalEnty.ACCION = "BUSCARSERVICIOS";
                            //Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);

                        }
                    }
                }
            }
            return this.Store(Listar, cantElementos);
        }
        public StoreResult ArbolMacroProcesos(string node, string filtro)
        {
            //Log.Information("HClinicaControllerSup - ArbolMacroProcesos - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {
                Session["DATA_ALL_FILTRO"] = null;
                Session["DATA_ALL_TRIAJE"] = null;
                long idResultado = 0;
                SS_HC_EpisodioTriaje ObjTrace = new SS_HC_EpisodioTriaje();
                ObjTrace.Accion = "UPDATE_ESTADO";
                ObjTrace.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioTriaje);
                ObjTrace.Estado = 2;
                ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
                {
                    idResultado = SvcEpisodioTriaje.UpdateEspecialidadTriaje(ObjTrace);
                }

                var cap = ENTITY_GLOBAL.Instance.EpisodioTriaje;

                var objVistaSeguridad = new SS_CHE_VistaSeguridad();
                ENTITY_GLOBAL.Instance.NOMBRE_MEDICO = ENTITY_GLOBAL.Instance.MedicoNombre;
                if (Convert.ToInt32(ENTITY_GLOBAL.Instance.IdMedicoaudi) != 0)
                {
                    var Listar = new List<SG_Agente>();
                    SG_Agente objAgente = new SG_Agente();
                    objAgente.ACCION = "LISTARPAG_AUDITORIA";
                    objAgente.IdEmpleado = ENTITY_GLOBAL.Instance.IdMedicoaudi;

                    Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                    Boolean validoLogin = false;
                    if (Listar.Count > 0)
                    {
                        validoLogin = true;
                        foreach (SG_Agente objEntity in Listar)
                        {
                            objAgente = objEntity;
                        }
                    }

                    if (objAgente != null)
                    {
                        //  ENTITY_GLOBAL.Instance.USUARIO = objAgente.UsuarioCreacion;
                        ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA = objAgente.IdAgente;
                    }

                    if ("root" != node.Trim())
                    {
                        //var p = this.GetCmp<TreePanel>("treepanel");
                        //// objEntity.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        ////objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        //objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                        //objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA);
                        ////   objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        //objVistaSeguridad.Accion = "LISTAPROCESOS";
                        //objVistaSeguridad.Nivel = 2;

                        var p = this.GetCmp<TreePanel>("treepanel");
                        objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                        objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                        objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        objVistaSeguridad.Accion = "LISTAPROCESOS";
                        objVistaSeguridad.Nivel = 2;

                        var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                        foreach (var resulenti in resulListado)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Text = resulenti.NombreOpcion;
                            asyncNode.Qtip = resulenti.NombreOpcion;
                            asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                            asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                            asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                            if (resulenti.TipoIcono != null)
                            {
                                if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                            }
                            nodes.Add(asyncNode);
                        }
                    }
                }
                else
                {

                    //OBS:ADD de seguridad
                    objVistaSeguridad.CadenaRecursividad = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objVistaSeguridad.IdEmpleado = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    //objVistaSeguridad.IndicadorPrioridad = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    //objVistaSeguridad.Version = "" + ENTITY_GLOBAL.Instance.EpisodioAtencion; //AUX - OBS
                    ////////////////
                    if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
                    {
                        objVistaSeguridad.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
                    }
                    if (Session["TIPOATENCION_ACTUAL"] != null)
                    {
                        objVistaSeguridad.idTipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                    }
                    //////////////
                    //////ADD PARA CONFIGURACION DE ASIGNACIONES
                    VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = null;
                    TemporalSesionTriaje VistaTriaje = null;
                    if (Session["DATA_ALL_TRIAJE"] != null)
                    {
                        VistaTriaje = (TemporalSesionTriaje)Session["DATA_ALL_TRIAJE"];
                        objVistaSeguridad.IdGrupo = 2;//AUX 
                    }

                    //if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    //{
                    //    vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                    //    objVistaSeguridad.IdGrupo = vistaGenSelec.IdEspecialidad;//AUX 
                    //}
                    objVistaSeguridad.Compania = ENTITY_GLOBAL.Instance.Compania;
                    if (ENTITY_GLOBAL.Instance.Establecimiento != null)
                    {
                        objVistaSeguridad.IdOrganizacion = Convert.ToInt32(ENTITY_GLOBAL.Instance.Establecimiento);
                    }
                    if (Session["IdUnidadServicio_ACTUAL"] != null)
                    {
                        objVistaSeguridad.IdObjetoAsociado = (int)Session["IdUnidadServicio_ACTUAL"];
                    }

                    if (ENTITY_GLOBAL.Instance.NIVEL == 1)
                    {
                        objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                        objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        objVistaSeguridad.Accion = "LISTAPROCESOS";
                        objVistaSeguridad.Nivel = 1;
                        if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
                        {

                        }
                        var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

                        foreach (var resulenti in resulListado)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Text = resulenti.NombreOpcion;
                            asyncNode.Qtip = resulenti.NombreOpcion;
                            asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                            nodes.Add(asyncNode);
                        }
                        ENTITY_GLOBAL.Instance.NIVEL = 2;
                    }
                    else
                    {
                        if ("root" != node.Trim())
                        {
                            var p = this.GetCmp<TreePanel>("treepanel");
                            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                            objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
                            {

                                //QA_ROYAL
                                // objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(3822);
                                //   if (objVistaSeguridad.IdOpcionPadre == Convert.ToInt32(3822) && Session["SESSIONTRIAJE"] == "node")
                                //  {
                                //    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(3823);
                                //  }

                                //QA_SANNA
                                // objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(6236);
                                // if (objVistaSeguridad.IdOpcionPadre == Convert.ToInt32(6236) && Session["SESSIONTRIAJE"] == "node")
                                //   {
                                //     objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(6237);
                                //  }

                                if (Session["SESSIONTRIAJE"] == null)
                                {
                                    Session["SESSIONTRIAJE"] = "node";
                                }
                                else { Session["SESSIONTRIAJE"] = null; }

                            }
                            objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                            objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                            objVistaSeguridad.Accion = "LISTAPROCESOS";
                            objVistaSeguridad.Nivel = 2;

                            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

                            List<SS_CHE_VistaSeguridad> lsitadata = resulListado.Where(x => x.ValorTexto == "T").ToList();

                            // if (objVistaSeguridad.IdOpcionPadre == 3822)
                            //  {
                            //      ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.Clear();
                            //  }
                            //  else
                            //  {
                            // ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.AddRange(resulListado);
                            ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.AddRange(lsitadata);
                            //  }

                            foreach (var resulenti in lsitadata)
                            {
                                Node asyncNode = new Node();
                                asyncNode.Text = resulenti.NombreOpcion;
                                asyncNode.Qtip = resulenti.NombreOpcion;
                                asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                                asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                                asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                                if (resulenti.TipoIcono != null)
                                {
                                    if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                    if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                                }

                                nodes.Add(asyncNode);
                            }
                            //Session["SESSIONTRIAJE"] = null;
                        }

                        ENTITY_GLOBAL.Instance.NIVEL = 2;
                    }

                }
                //ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 2;
                return this.Store(nodes);
            }
            else
            {

                var objVistaSeguridad = new SS_CHE_VistaSeguridad();
                ENTITY_GLOBAL.Instance.NOMBRE_MEDICO = ENTITY_GLOBAL.Instance.MedicoNombre;
                if (Convert.ToInt32(ENTITY_GLOBAL.Instance.IdMedicoaudi) != 0)
                {
                    var Listar = new List<SG_Agente>();
                    SG_Agente objAgente = new SG_Agente();
                    objAgente.ACCION = "LISTARPAG_AUDITORIA";
                    objAgente.IdEmpleado = ENTITY_GLOBAL.Instance.IdMedicoaudi;

                    Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                    Boolean validoLogin = false;
                    if (Listar.Count > 0)
                    {
                        validoLogin = true;
                        foreach (SG_Agente objEntity in Listar)
                        {
                            objAgente = objEntity;
                        }
                    }

                    if (objAgente != null)
                    {
                        //  ENTITY_GLOBAL.Instance.USUARIO = objAgente.UsuarioCreacion;
                        ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA = objAgente.IdAgente;
                    }

                    if ("root" != node.Trim())
                    {
                        //var p = this.GetCmp<TreePanel>("treepanel");
                        //// objEntity.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        ////objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        //objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                        //objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA);
                        ////   objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        //objVistaSeguridad.Accion = "LISTAPROCESOS";
                        //objVistaSeguridad.Nivel = 2;

                        var p = this.GetCmp<TreePanel>("treepanel");
                        objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                        objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                        objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        objVistaSeguridad.Accion = "LISTAPROCESOS";
                        objVistaSeguridad.Nivel = 2;

                        var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);


                        if (objVistaSeguridad.IdOpcionPadre == 3001 || objVistaSeguridad.IdOpcionPadre == 3090)
                        {
                            ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.Clear();
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.AddRange(resulListado);
                        }

                        foreach (var resulenti in resulListado)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Text = resulenti.NombreOpcion;
                            asyncNode.Qtip = resulenti.NombreOpcion;
                            asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                            asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                            asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                            if (resulenti.TipoIcono != null)
                            {
                                if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                            }
                            //nodes.Add(asyncNode);
                            //jordan Mateo 14/12/2020
                            if ((ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AUDITORIA") && ENTITY_GLOBAL.Instance.ListadoOrigen == "Procedimiento")
                            {
                                if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                {
                                    if (resulenti.IndicadorNuevo == 2 || resulenti.IndicadorIngreso == 1)
                                    {
                                        nodes.Add(asyncNode);
                                    }
                                }
                                else
                                {
                                    nodes.Add(asyncNode);
                                }
                            }



                            else if ((ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AUDITORIA") && ENTITY_GLOBAL.Instance.ListadoOrigen == "Consulta")
                            {
                                if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                {
                                    if (resulenti.IndicadorIngreso == 2)
                                    {
                                        nodes.Add(asyncNode);
                                    }
                                }
                                else
                                {
                                    nodes.Add(asyncNode);
                                }

                            }
                            else
                            {
                                nodes.Add(asyncNode);
                            }

                        }
                    }
                }
                else
                {
                    //OBS:ADD de seguridad
                    objVistaSeguridad.CadenaRecursividad = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objVistaSeguridad.IdEmpleado = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objVistaSeguridad.IndicadorPrioridad = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objVistaSeguridad.Version = "" + ENTITY_GLOBAL.Instance.EpisodioAtencion; //AUX - OBS
                    ////////////////
                    if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
                    {
                        objVistaSeguridad.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
                    }
                    if (Session["TIPOATENCION_ACTUAL"] != null)
                    {
                        objVistaSeguridad.idTipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                    }
                    //////////////
                    //////ADD PARA CONFIGURACION DE ASIGNACIONES
                    VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = null;
                    if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    {
                        vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                        objVistaSeguridad.IdGrupo = vistaGenSelec.IdEspecialidad;//AUX 
                    }
                    objVistaSeguridad.Compania = ENTITY_GLOBAL.Instance.Compania;
                    if (ENTITY_GLOBAL.Instance.Establecimiento != null)
                    {
                        objVistaSeguridad.IdOrganizacion = Convert.ToInt32(ENTITY_GLOBAL.Instance.Establecimiento);
                    }
                    if (Session["IdUnidadServicio_ACTUAL"] != null)
                    {
                        objVistaSeguridad.IdObjetoAsociado = (int)Session["IdUnidadServicio_ACTUAL"];
                    }

                    if (ENTITY_GLOBAL.Instance.NIVEL == 1)
                    {
                        objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                        objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                        objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                        objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                        objVistaSeguridad.Accion = "LISTAPROCESOS";
                        objVistaSeguridad.Nivel = 1;
                        var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

                        foreach (var resulenti in resulListado)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Text = resulenti.NombreOpcion;
                            asyncNode.Qtip = resulenti.NombreOpcion;
                            asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                            nodes.Add(asyncNode);
                        }
                        ENTITY_GLOBAL.Instance.NIVEL = 2;
                    }
                    else
                    {
                        if ("root" != node.Trim())
                        {
                            var p = this.GetCmp<TreePanel>("treepanel");
                            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                            objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                            objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                            objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                            objVistaSeguridad.Accion = "LISTAPROCESOS";
                            objVistaSeguridad.Nivel = 2;
                            objVistaSeguridad.IndicadorMultiple = 999;

                            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

                            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA" && vistaGenSelec.ComponenteNombre == "I. Opinión")
                            {

                                resulListado.RemoveAll(x => x.CodigoFormato == "CCEPF200");
                                resulListado.RemoveAll(x => x.CodigoFormato == "CCEPF201");
                            }


                            if (objVistaSeguridad.IdOpcionPadre == 3001 || objVistaSeguridad.IdOpcionPadre == 3090 || objVistaSeguridad.IdOpcionPadre == 3130)
                            {
                                ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.Clear();
                                ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Clear();
                                ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Clear();
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.AddRange(resulListado);
                            }

                            foreach (var resulenti in resulListado)
                            {
                                Node asyncNode = new Node();
                                asyncNode.Text = resulenti.NombreOpcion;
                                asyncNode.Qtip = resulenti.NombreOpcion;
                                asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                                asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                                asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                                if (resulenti.TipoIcono != null)
                                {
                                    if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                    if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                                }

                                //nodes.Add(asyncNode);
                                //jordan Mateo 14/12/2020
                                if ((ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA"
                                || ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AUDITORIA") && ENTITY_GLOBAL.Instance.ListadoOrigen == "Procedimiento")
                                {
                                    var noditoPadre = ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible;
                                    var noditoPadreLleno = noditoPadre.Where(x => x == resulenti.Descripcion).ToList();

                                    if (noditoPadreLleno.Count == 0)
                                    {
                                        if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                        {
                                            var nodito = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                                            var noditoLleno = nodito.Where(x => x == resulenti.CodigoFormato).ToList();

                                            if (noditoLleno.Count == 0)
                                            {
                                                if (resulenti.IndicadorNuevo == 2)
                                                {
                                                    ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Add(resulenti.CodigoFormato);
                                                    nodes.Add(asyncNode);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Add(resulenti.Descripcion);
                                            nodes.Add(asyncNode);
                                        }
                                    }

                                }

                                else if ((ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO"
                                    || ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO"
                                    || ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AUDITORIA") && ENTITY_GLOBAL.Instance.ListadoOrigen == "Consulta")
                                {
                                    var noditoPadre = ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible;
                                    var noditoPadreLleno = noditoPadre.Where(x => x == resulenti.Descripcion).ToList();

                                    if (noditoPadreLleno.Count == 0)
                                    {
                                        if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                        {
                                            var nodito = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                                            var noditoLleno = nodito.Where(x => x == resulenti.CodigoFormato).ToList();

                                            if (noditoLleno.Count == 0)
                                            {
                                                if (resulenti.IndicadorIngreso == 2)
                                                {
                                                    ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Add(resulenti.CodigoFormato);
                                                    nodes.Add(asyncNode);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Add(resulenti.Descripcion);
                                            nodes.Add(asyncNode);
                                        }
                                    }
                                }
                                else if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA" || ENTITY_GLOBAL.Instance.COD_BANDEJA == "HOSPITALIZACION")
                                {


                                    var noditoPadre = ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible;
                                    var noditoPadreLleno = noditoPadre.Where(x => x == resulenti.Descripcion).ToList();

                                    if (noditoPadreLleno.Count == 0)
                                    {
                                        if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                        {

                                            var nodito = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                                            var noditoLleno = nodito.Where(x => x == resulenti.CodigoFormato).ToList();

                                            if (noditoLleno.Count == 0)
                                            {
                                                if (resulenti.IndicadorIngreso == 2)
                                                {
                                                    ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Add(resulenti.CodigoFormato);
                                                    nodes.Add(asyncNode);
                                                }
                                            }
                                        }
                                        else
                                        {

                                            if (resulenti.TipoIcono == 1)
                                            {

                                                var noditoPadre2 = ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible;
                                                var noditoPadreLleno2 = noditoPadre2.Where(x => x == resulenti.NombreOpcion).ToList();

                                                if (noditoPadreLleno2.Count == 0)
                                                {
                                                    ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Add(resulenti.NombreOpcion);
                                                    nodes.Add(asyncNode);

                                                }

                                            }
                                            else
                                            {
                                                if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                                {

                                                    var nodito = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                                                    var noditoLleno = nodito.Where(x => x == resulenti.CodigoFormato).ToList();

                                                    if (noditoLleno.Count == 0)
                                                    {
                                                        if (resulenti.IndicadorIngreso == 2)
                                                        {
                                                            ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Add(resulenti.CodigoFormato);
                                                            nodes.Add(asyncNode);
                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                    else
                                    {
                                        if (resulenti.TipoIcono == 1)
                                        {

                                            var noditoPadre2 = ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible;
                                            var noditoPadreLleno2 = noditoPadre2.Where(x => x == resulenti.NombreOpcion).ToList();

                                            if (noditoPadreLleno2.Count == 0)
                                            {
                                                ENTITY_GLOBAL.Instance.ListarSeguOpcionPadreGlobalVisible.Add(resulenti.NombreOpcion);
                                                nodes.Add(asyncNode);

                                            }

                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                            {

                                                var nodito = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                                                var noditoLleno = nodito.Where(x => x == resulenti.CodigoFormato).ToList();

                                                if (noditoLleno.Count == 0)
                                                {
                                                    if (resulenti.IndicadorIngreso == 2)
                                                    {
                                                        ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Add(resulenti.CodigoFormato);
                                                        nodes.Add(asyncNode);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        ENTITY_GLOBAL.Instance.NIVEL = 2;
                    }

                }
                return this.Store(nodes);

            }


        }




        public System.Web.Mvc.ActionResult setNodoRootServicios(string tipo)
        {
            Log.Information("HClinicaControllerSup - setNodoRootServicios - Entrar");

            Ext.Net.Node root = new Ext.Net.Node();
            root.Text = ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION;
            root.NodeID = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
            string prefix = DateTime.Now.Second + "_";

            /*
            for (int i = 0; i < 10; i++)
            {
                Ext.Net.Node node = new Ext.Net.Node();
                node.Text = prefix + i;
                node.Leaf = true;
                root.Children.Add(node);
            }*/

            //return root;
            return this.Direct(root);
        }

        public System.Web.Mvc.ActionResult setNodoRootGeneral(string tipo, string id, string text, bool leaf)
        {
            Log.Information("HClinicaControllerSup - setNodoRootGeneral - Entrar");

            Ext.Net.Node root = new Ext.Net.Node();
            if (id != null && id != "" && text != null && text != "")
            {
                root.Text = text;
                root.NodeID = id;
            }
            return this.Direct(root);
        }
        public StoreResult GetTreeViewChildRitgh(string node, string filtro)
        {
            Log.Information("HClinicaControllerSup - GetTreeViewChildRitgh - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            var objMiscelaneos = new MA_MiscelaneosDetalle();
            if (ENTITY_GLOBAL.Instance.NIVEL == 1)
            {
                objMiscelaneos.AplicacionCodigo = "CG";
                objMiscelaneos.CodigoTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                objMiscelaneos.CodigoElemento = ENTITY_GLOBAL.Instance.CONCEPTO;
                objMiscelaneos.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO;
                //objMiscelaneos.DescripcionLocal = filtro;
                objMiscelaneos.ACCION = "NIVEL1";
                var resulListado = SvcMiscelaneos.GetUpListadoServicios(objMiscelaneos);
                foreach (var resulenti in resulListado)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DescripcionLocal;
                    asyncNode.NodeID = resulenti.CodigoElemento;
                    nodes.Add(asyncNode);
                }
                ENTITY_GLOBAL.Instance.NIVEL = 2;
            }
            else
            {
                var p = this.GetCmp<TreePanel>("treepanel");

                objMiscelaneos.AplicacionCodigo = "CG";
                objMiscelaneos.CodigoTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                objMiscelaneos.CodigoElemento = node.Trim();
                //objMiscelaneos
                objMiscelaneos.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO;
                objMiscelaneos.DescripcionLocal = filtro;
                objMiscelaneos.ACCION = "NIVEL2";
                //////
                objMiscelaneos.ValorCodigo2 = null;
                string filtroFavoritosNum = null;
                if ((Session["indicaFavoritos"] + "") == "ACTIVO")
                {
                    objMiscelaneos.ValorCodigo2 = (Session["indicaFavoritos"] + ""); //AUX indicador
                    filtroFavoritosNum = getFiltroFavoritos();
                }
                objMiscelaneos.ValorCodigo3 = filtroFavoritosNum;  //AUX filtros favoritos numeros   


                var resulListado = SvcMiscelaneos.GetUpListadoServicios(objMiscelaneos);
                foreach (var resulenti in resulListado)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DescripcionLocal;
                    asyncNode.NodeID = resulenti.CodigoElemento;
                    asyncNode.Href = "javascript:myFunction('" + resulenti.DescripcionLocal + "')";
                    asyncNode.Leaf = resulenti.ValorNumerico == 1 ? true : false;
                    nodes.Add(asyncNode);
                }
                ENTITY_GLOBAL.Instance.NIVEL = 2;
            }

            /*

            
            
            if (node == "0") node = ENTITY_GLOBAL.Instance.CONCEPTO;
            
            if (node == "WA")
            {
                var entidaLocal = new SEGURIDADGRUPO();
                entidaLocal.ACCION = "GRUPO";
                entidaLocal.APLICACIONCODIGO = node;
                var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSeguridadGrupo(entidaLocal);
                foreach (var resulenti in serviceResul)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DESCRIPCION;
                    asyncNode.NodeID = resulenti.GRUPO;
                    nodes.Add(asyncNode);
                }
            }
            else
            {
                var entidaLocal = new SEGURIDADCONCEPTO();
                if (node.Trim().Substring(0, 2) == "GR")
                {
                    entidaLocal.ACCION = "CONCEPTO";
                    entidaLocal.GRUPO = node.Trim();
                    var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                    foreach (var resulenti in serviceResul)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Text = resulenti.DESCRIPCION;
                        asyncNode.NodeID = resulenti.CONCEPTO;
                        
                        nodes.Add(asyncNode);
                    }
                }
                else
                {
                    if (node.Trim().Substring(0, 2) == "CC")
                        entidaLocal.ACCION = "CONCEPTOPADREHCERIGTH";
                        entidaLocal.CONCEPTOPADRE = node.Trim();
                        entidaLocal.GRUPO = ENTITY_GLOBAL.Instance.GRUPO;
                        var serviceResuls = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                        foreach (var resulenti in serviceResuls)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Text = resulenti.DESCRIPCION;
                            asyncNode.NodeID = resulenti.CONCEPTO;
                            asyncNode.Href = "javascript:myFunction('" + resulenti.DESCRIPCION  + "')";
                            entidaLocal.GRUPO = ENTITY_GLOBAL.Instance.GRUPO;
                            asyncNode.Leaf = Convert.ToInt32(resulenti.TIPODEOBJETO.ToString().Trim()) == 1 ? true : false;

                            nodes.Add(asyncNode);
                        }
                }
            }

            //if (ENTITY_GLOBAL.Instance.INTERUPTOR == 1)
            //{
            //    Node asyncNode = new Node();
            //    asyncNode.Text = ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION;
            //    asyncNode.NodeID = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
            //    nodes.Add(asyncNode);
            //    ENTITY_GLOBAL.Instance.INTERUPTOR = 0;
            //}
            //else
            //{ 
            //}
            */
            return this.Store(nodes);
        }
        public StoreResult GetTreeViewChild(string node)
        {
            Log.Information("HClinicaControllerSup - GetTreeViewChild - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            if (node == "WA")
            {
                var entidaLocal = new SEGURIDADGRUPO();
                entidaLocal.ACCION = "GRUPO";
                entidaLocal.APLICACIONCODIGO = node;
                var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSeguridadGrupo(entidaLocal);
                foreach (var resulenti in serviceResul)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DESCRIPCION;
                    asyncNode.NodeID = resulenti.GRUPO;
                    nodes.Add(asyncNode);
                }
            }
            else
            {
                var entidaLocal = new SEGURIDADCONCEPTO();
                /**OBS: APLICACIONCODIGO como usuiario auxiliar*/
                entidaLocal.APLICACIONCODIGO = ENTITY_GLOBAL.Instance.USUARIO;

                if (node.Trim().Substring(0, 2) == "GR")
                {
                    entidaLocal.ACCION = "CONCEPTO";
                    entidaLocal.GRUPO = node.Trim();
                    var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                    foreach (var resulenti in serviceResul)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Text = resulenti.DESCRIPCION;
                        asyncNode.NodeID = resulenti.CONCEPTO;
                        nodes.Add(asyncNode);
                    }
                }
                else
                {
                    if (node.Trim().Substring(0, 2) == "CC")
                        entidaLocal.ACCION = "CONCEPTOPADREHCE";
                    entidaLocal.CONCEPTOPADRE = node.Trim();
                    entidaLocal.GRUPO = "GRUPO018";
                    var serviceResuls = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                    foreach (var resulenti in serviceResuls)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Text = resulenti.DESCRIPCION;
                        asyncNode.NodeID = resulenti.CONCEPTO;
                        if (resulenti.TIPODEDETALLE != null)
                        {
                            if (resulenti.TIPODEDETALLE.Trim() == "5") asyncNode.Icon = Icon.PageGreen;
                            if (resulenti.TIPODEDETALLE.Trim() == "6") asyncNode.Icon = Icon.PageRed;
                        }
                        asyncNode.Leaf = Convert.ToInt32(resulenti.TIPODEOBJETO.ToString().Trim()) == 1 ? true : false;
                        nodes.Add(asyncNode);
                    }
                }
            }


            return this.Store(nodes);
        }
        /**FORM CUIDADO PREVENTIVO && SEG. RIESGOS*/
        public StoreResult GetTreeViewCuidadosPrevSegRiesgos(string node, string tipo)
        {
            Log.Information("HClinicaControllerSup - GetTreeViewCuidadosPrevSegRiesgos - Entrar");

            var ListaMiscel = new List<MA_MiscelaneosDetalle>();

            SS_HC_SeguimientoRiesgoDetalle objSegRiesgoDetalle = new SS_HC_SeguimientoRiesgoDetalle();
            var listaSegRiesgoDetalle = new List<SS_HC_SeguimientoRiesgoDetalle>();
            int TipoPreven = 0;
            /*if (Session["VariableGenerales"] != null)
            {
                ListaMiscel = (List<MA_MiscelaneosDetalle>)Session["VariableGenerales"];
                TipoPreven = (int)ListaMiscel[0].ValorEntero1;
            }*/
            TipoPreven = Convert.ToInt32(getValorFiltroInt(tipo));
            NodeCollection nodes = new Ext.Net.NodeCollection();
            if (node == "WA")//ROOT ........ OBS: HARDCODE
            {

                //var entidaLocal = new SEGURIDADGRUPO();
                var entidaLocal = new SS_HC_CuidadoPreventivo();
                entidaLocal.Accion = "LISTAR";
                //entidaLocal.Nivel = 0;
                //entidaLocal.CodigoCuidadoPreventivoPadre = null;
                //entidaLocal.IdCuidadoPreventivoPadre = null;
                entidaLocal.IdTipoCuidadoPreventivo = TipoPreven;
                entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                // var serviceResul = null; // SoluccionSalud.Service.CuidadoPreventivoService.SvcCuidadoPreventivo.listarCuidadoPreventivo(entidaLocal, 0, 0);
                //var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                /*foreach (var resulenti in null)
                {
                    String cadenaNodoDesc = "|0|0| ";
                    Node asyncNode = new Node
                    {
                        Text = resulenti.Nivel.ToString().Trim() + '|' + resulenti.IdCuidadoPreventivo +
                            '|' + resulenti.Descripcion + cadenaNodoDesc,
                        NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                        //NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                        Leaf = resulenti.Nivel == 1 ? true : false,
                        AttributesObject = new
                        {
                            CodigoCuidadoPreventivo = resulenti.CodigoCuidadoPreventivo,
                            IdCuidadoPreventivo = resulenti.IdCuidadoPreventivo,
                            IdTipoPeriodicidad = resulenti.IdTipoPeriodicidad,
                            Descripcion = resulenti.Descripcion,
                            Version = resulenti.Version,
                            Orden = resulenti.Orden
                        }
                    };
                    nodes.Add(asyncNode);
                }*/
            }
            else
            {

                var entidaLocal = new SS_HC_CuidadoPreventivo();
                /**OBS: usuiario auxiliar*/
                entidaLocal.Accion = "LISTARHIJO";
                string[] cadenas = null;
                cadenas = node.Trim().Split('|');
                //entidaLocal.CodigoCuidadoPreventivoPadre = node;  //OBS
                entidaLocal.IdCuidadoPreventivoPadre = Convert.ToInt32(cadenas[0]);
                entidaLocal.IdTipoCuidadoPreventivo = TipoPreven;
                entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                List<SS_HC_CuidadoPreventivo> serviceResuls = new List<SS_HC_CuidadoPreventivo>();
                //serviceResuls = SoluccionSalud.Service.CuidadoPreventivoService.SvcCuidadoPreventivo.listarCuidadoPreventivo(entidaLocal, 0, 0);
                //bool indicaCargado = false;
                //if (indicaCargado)
                //{              
                //}
                //else
                //{
                //}
                /* foreach (var resulenti in serviceResuls)
                 {
                     objSegRiesgoDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                     objSegRiesgoDetalle.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                     objSegRiesgoDetalle.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                     objSegRiesgoDetalle.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
                     objSegRiesgoDetalle.IdCuidadoPreventivo = resulenti.IdCuidadoPreventivo;
                     objSegRiesgoDetalle.Accion = "LISTARPORIDCUIDADO";
                     listaSegRiesgoDetalle = SvcSeguimientoRiesgoDetalle.listarSeguimientoRiesgoDetalle(objSegRiesgoDetalle);
                     //0: indica que NO debe marcarse en el árbol
                     String cadenaNodoDesc = "|0|0| ";
                     if (listaSegRiesgoDetalle.Count > 0)
                     {
                         //1: indica que SÍ debe marcarse en el árbol
                         cadenaNodoDesc = "|" + "1" + "|" + listaSegRiesgoDetalle[0].Secuencia + "|" + listaSegRiesgoDetalle[0].Comentario;
                     }
                     Node asyncNode = new Node
                     {
                         Text = resulenti.Nivel.ToString().Trim() + '|' + resulenti.IdCuidadoPreventivo +
                             '|' + resulenti.Descripcion + cadenaNodoDesc,
                         NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                         //NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                         Leaf = resulenti.Nivel == 1 ? true : false,
                         AttributesObject = new
                         {
                             CodigoCuidadoPreventivo = resulenti.CodigoCuidadoPreventivo,
                             IdCuidadoPreventivo = resulenti.IdCuidadoPreventivo,
                             IdTipoPeriodicidad = resulenti.IdTipoPeriodicidad,
                             Descripcion = resulenti.Descripcion,
                             Version = resulenti.Version,
                             Orden = resulenti.Orden
                         }
                     };
                     nodes.Add(asyncNode);
                 }*/
            }
            /*
            var tree = X.GetCmp<TreePanel>("TreePanelSegRiesgos");
                    Node asyncNodeX = new Node { 
                        Text="ADULTO HOMBRE",
                        NodeID = "AA",
                        AttributesObject = new
                        {
                            CodigoCuidadoPreventivo = "AA",
                            IdTipoPeriodicidad = 5,
                            Descripcion = "ADULTO HOMBRE",
                            Version = "COMENT...",
                            Orden = 1
                        }
                    };
           
            tree.SetRootNode(asyncNodeX);
            */

            return this.Store(nodes);
        }

        public StoreResult getSeguridadOpciones(string filtro)
        {
            Log.Information("HClinicaControllerSup - getSeguridadOpciones - Entrar");

            SS_CHE_VistaSeguridad objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
            objVistaSeguridad.EstadoFormato = 2;
            objVistaSeguridad.Accion = "LISTAPROCESOGENERAL";
            //objVistaSeguridad.Nivel = 2;
            List<SS_CHE_VistaSeguridad> lista = new List<SS_CHE_VistaSeguridad>();
            //lista = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            lista = ENTITY_GLOBAL.Instance.ListarSeguridadOpcionGlobal.Where(x => x.CodigoFormato != null).ToList();

            return this.Store(lista);
        }

        [DirectMethod]
        public string CreateGridPanel(string path)
        {
            return "yes";
        }

        private void RegistraPagina()
        {
            Log.Information("HClinicaControllerSup - RegistraPagina - Entrar");

            //var path = Path.Combine(Server.MapPath("~/Views/HClinica"), "");
            //file.SaveAs(path);
            String comillas = @"""";
            System.Text.StringBuilder htmlOutput = new System.Text.StringBuilder();
            htmlOutput.Append("@model  SPRING_SALUD.Models.FormPanelEmployee|");
            htmlOutput.Append("@{|");
            htmlOutput.Append("ViewBag.Title = " + comillas + "FormEdit" + comillas + ";|");
            htmlOutput.Append("Layout = " + comillas + "~/Views/Shared/_BaseLayout.cshtml" + comillas + ";|");
            htmlOutput.Append("}|");
            htmlOutput.Append("@section cuerpo|");
            htmlOutput.Append("{|");
            htmlOutput.Append("<h1>Grid with batch saving</h1>|");
            htmlOutput.Append("@Html.Raw(ViewBag.HtmlOutput)|");
            htmlOutput.Append("}|");

            string[] Cadenas = htmlOutput.ToString().Split('|');

            var path = Path.Combine(Server.MapPath("~/Views/HClinica"), "FormViewCaptura.cshtml");
            //if (!System.IO.File.Exists(path))
            //{
            // Create a file to write to. 
            using (StreamWriter sw = System.IO.File.CreateText(path))
            {
                foreach (var scrip in Cadenas)
                    sw.WriteLine(scrip);

            }
            //}


        }





        public System.Web.Mvc.ActionResult cambioSeleccionCronologias(String indica)
        {
            Log.Information("HClinicaControllerSup - cambioSeleccionCronologias - Entrar");

            if (indica == "DESELECCION")
            {
                if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
                {
                    ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                    ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                    ENTITY_GLOBAL.Instance.EpisodioClinico = ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP;
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP;
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP;
                    /// ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 0;
            }

            //return showMensajeBox("INFORMACION EXITO","Mensaje","INFO");
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult validarCambiosFormulario(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - validarCambiosFormulario - Entrar");


            Session["containerIdTemp"] = containerId;
            Session["textTemp"] = text;

            ENTITY_GLOBAL.Instance.PANELCENTER_ACTUAL = containerId;

            ENTITY_GLOBAL.Instance.validarcopiarPanelCancelar = 0;

            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";
            if (text.Trim() != "root")
            {
                objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
            }

            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

            if (resulListado[0].CodigoFormato != null)
            {
                ENTITY_GLOBAL.Instance.CODIGODEFORMATO_ACTUAL = resulListado[0].CodigoFormato.Trim();
            }



            ////////////////////////////////////////////////////////////////////////////////////////////////
            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
            {
                ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioClinico = ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioAtencion = ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP;
                //  ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP;
                //ADD
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP;

                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 0;
            }

            //string VALORES = Convert.ToInt32(ENTITY_GLOBAL.Instance.indicadorAuxiliar).ToString() + ' ' + ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            if (ENTITY_GLOBAL.Instance.indicadorAuxiliar && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA" || Session["DATA_COPIA_FORM"] != null)
            {
                /*****/



                /*****/
                if ((ENTITY_GLOBAL.Instance.CONCEPTO + "").Trim() != (text + "").Trim())
                {
                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "DinamicsForm" || ENTITY_GLOBAL.Instance.CONCEPTO == "DinamicsComp")
                    {
                        return showMensajeConfirmacionValidaCambios("Confirmación",
                           "¿Estás seguro que deseas salir?, recuerda GUARDAR para no perder lo registrado en " +
                                   ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + ".",
                            "Sí",
                            "LoadFormatos('" + containerId + "', '" + text + "')", "DoNoAcepta()");
                    }
                    //else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEP0F90" || ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF001")
                    //{
                    //    return showMensajeConfirmacionValidaCambios("Confirmación",
                    //       "¿Estás seguro que deseas salir sin Guardar?" +
                    //               ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + ".",
                    //        "Sí",
                    //        "LoadFormatos('" + containerId + "', '" + text + "')", "DoNoAcepta()");

                    //}
                    else
                    {
                        Session.Remove("DATA_COPIA_FORM");

                        return JavaScript("DoAcepta()");  // AUTOGUARDADO SIN MENSAJE
                        //  return null;
                        //return showMensajeConfirmacion("Confirmación",
                        //   "Existen modificaciones sin guardar. ¿Desea salir del formulario " +
                        //           ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + " ?.",
                        //    "Sí", "No",
                        //    //     "DoAcepta()", "LoadFormatos('" + containerId + "', '" + text + "');", "DoNoAcepta()"); //AUTOGUADADO LoadFormatos('" + containerId + "', '" + text + "');
                        //  "LoadFormatos('" + containerId + "', '" + text + "')", "DoSave()", "DoCancel()");

                    }





                }
                else
                {
                    return this.Direct();
                }
            }

            else
            {
                return LoadFormatos(containerId, text);
            }
        }


        public System.Web.Mvc.ActionResult validarCambiosFormularioFirma(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - validarCambiosFormularioFirma - Entrar");

            Session["containerIdTemp"] = containerId;
            Session["textTemp"] = text;

            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
            {
                ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioClinico = ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioAtencion = ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP;
                //  ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP;
                //ADD
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP;

                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 0;
            }

            string VALORES = Convert.ToInt32(ENTITY_GLOBAL.Instance.indicadorAuxiliar).ToString() + ' ' + ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            if (ENTITY_GLOBAL.Instance.indicadorAuxiliar == true) { JavaScript("DoAcepta()"); }
            if (ENTITY_GLOBAL.Instance.indicadorAuxiliar && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA" || Session["DATA_COPIA_FORM"] != null)
            {
                if ((ENTITY_GLOBAL.Instance.CONCEPTO + "").Trim() != (text + "").Trim())
                {
                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "DinamicsForm")
                    {
                        return showMensajeConfirmacionValidaCambios("Confirmación",
                           "¿Estás seguro que deseas salir?, recuerda GUARDAR para no perder lo registrado en " +
                                   ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + ".",
                            "Sí", "LoadFormatos('" + containerId + "', '" + text + "')", "DoNoAcepta()");
                    }
                    else
                    {
                        Session.Remove("DATA_COPIA_FORM");
                        if (Session["modifica"] != null)
                        {
                            if (Convert.ToBoolean(Session["modifica"]) == true)
                            {
                                return JavaScript("DoFirma3(2)");
                            }
                            else
                            {
                                return JavaScript("DoFirma3(1)");
                            }
                        }
                        else
                        {
                            return eventoFirmaActoMedicoRegistro("UPDATE", "", "", "", "");
                        }
                        // AUTOGUARDADO SIN MENSAJE 
                    }
                }
                else
                {
                    return this.Direct();
                }
            }
            else
            {
                JavaScript("DoAcepta()");
                return eventoFirmaActoMedicoRegistro("UPDATE", "", "", "", "");
            }
        }


        public System.Web.Mvc.ActionResult validarCambiosFormularioInicio(string containerId, string text)
        {
            Log.Information("HClinicaControllerSup - validarCambiosFormularioInicio - Entrar");

            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
            {
                ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioClinico = ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioAtencion = ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP;
                //ADD
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP;

                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 0;
            }

            if (ENTITY_GLOBAL.Instance.indicadorAuxiliar && ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
            {
                if ((ENTITY_GLOBAL.Instance.CONCEPTO + "").Trim() != (text + "").Trim())
                {
                    return showMensajeConfirmacion("Confirmación",
                         "Existen modificaciones sin guardar. ¿Desea salir del formulario" +
                          ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + "?.",
                         "Sí", "No",
                          "DoInicio()", "DoNoInicio()", "DoNoInicio()");
                    //'" +
                    //        ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION + "'
                }
                else
                {
                    return this.Direct();
                }
            }
            else
            {
                return LoadBandejaEntrada();
            }
        }
        public System.Web.Mvc.ActionResult eventoResizeForm(string height, string indica)
        {
            Log.Information("HClinicaControllerSup - eventoResizeForm - Entrar");

            var form = this.GetCmp<TreePanel>("center");

            form.SetHeight(600);
            form.Reload();
            return this.Direct();
        }

        public class checkMenu
        {
            public string ID { get; set; }
            public string Text { get; set; }
            public static List<Ext.Net.CheckMenuItem> getCheckMenuBienesServ(string valor)
            {
                var Listar = new List<SS_HC_FavoritoNumero>();
                var LocalEnty = new SS_HC_FavoritoNumero();

                var LocalEnty1 = new SS_HC_Tabla();
                var Listar1 = new List<SS_HC_Tabla>();

                ////////////////////OBTENER EL ID DE TABLA/////////////////////
                LocalEnty1.NombreTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                LocalEnty1.Accion = "LISTARxNOM";
                Listar1 = SvcTabla.listarTabla(LocalEnty1, 0, 5);
                ///////////////////////////////////////////////////////////////

                if (Listar1.Count > 0)
                {
                    LocalEnty.Version = Convert.ToString(Listar1[0].IdFavoritoTabla);
                }
                else { LocalEnty.Version = "0"; }


                int idAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                int tipoFav = 1;
                LocalEnty.Accion = "LISTARMENUFAV";
                Listar = SvcFavoritoNumero.listarFavoritoNumero(LocalEnty, idAgente, tipoFav);
                List<Ext.Net.CheckMenuItem> listaCheckMenu = new List<Ext.Net.CheckMenuItem>();

                foreach (var result in Listar)
                {
                    Ext.Net.CheckMenuItem objCheckMenu = new Ext.Net.CheckMenuItem();
                    objCheckMenu.ID = (result.IdFavorito + "|" + result.NumeroFavorito);
                    objCheckMenu.Text = (result.Descripcion + "").Trim();
                    //objCheckMenu.Checked
                    objCheckMenu.Hidden = false;
                    //objCheckMenu.Icon =
                    listaCheckMenu.Add(objCheckMenu);
                }
                return listaCheckMenu;
            }
            public static List<Ext.Net.MenuItem> getMenuBienesServ(string valor)
            {
                var Listar = new List<SS_HC_FavoritoNumero>();
                var LocalEnty = new SS_HC_FavoritoNumero();

                var LocalEnty1 = new SS_HC_Tabla();
                var Listar1 = new List<SS_HC_Tabla>();

                ////////////////////OBTENER EL ID DE TABLA/////////////////////
                LocalEnty1.NombreTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                LocalEnty1.Accion = "LISTARxNOM";
                Listar1 = SvcTabla.listarTabla(LocalEnty1, 0, 5);
                ///////////////////////////////////////////////////////////////
                if (Listar1.Count > 0)
                {
                    LocalEnty.Version = Convert.ToString(Listar1[0].IdFavoritoTabla);
                }
                else { LocalEnty.Version = "0"; }
                int idAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                int tipoFav = 1;

                LocalEnty.Accion = "LISTARMENUFAV";
                Listar = SvcFavoritoNumero.listarFavoritoNumero(LocalEnty, idAgente, tipoFav);
                List<Ext.Net.MenuItem> listaMenu = new List<Ext.Net.MenuItem>();

                foreach (var result in Listar)
                {
                    Ext.Net.MenuItem objMenu = new Ext.Net.MenuItem();
                    objMenu.ID = (result.IdFavorito + "|" + result.NumeroFavorito) + "|_item";
                    objMenu.Text = (result.Descripcion + "").Trim();
                    //objCheckMenu.Checked
                    objMenu.Hidden = false;
                    objMenu.Icon = Ext.Net.Icon.ApplicationFormAdd;
                    listaMenu.Add(objMenu);
                }
                return listaMenu;
            }

            public static List<Ext.Net.CheckMenuItem> getCheckMenuCHE(string valor)
            {

                List<Ext.Net.CheckMenuItem> lista = new List<Ext.Net.CheckMenuItem>();
                Ext.Net.CheckMenuItem obj;
                for (int i = 0; i <= 10; i++)
                {
                    obj = new Ext.Net.CheckMenuItem();
                    obj.ID = "a" + i.ToString().Trim();
                    obj.Text = "aaa";
                    obj.Hidden = false;
                    lista.Add(obj);
                }
                return lista;
            }
        }


        /****ADD MENSAJES VALIDACIÓN **/
        public System.Web.Mvc.ActionResult addRecursosValidacion(String data, String indica)
        {
            Log.Information("HClinicaControllerSup - addRecursosValidacion - Entrar");

            /*******SET PROP. FORMULARIO*****************************/
            Session["MENSAJES_VALFORM"] = null;
            if (data != null && Session["RECURSOS_VALFORM"] != null)
            {
                List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataRecursosForm;
                List<ENTITY_MENSAJES> dataMensajesValidacion = new List<ENTITY_MENSAJES>();
                List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataFields;
                dataFields = (List<VW_SS_HC_TABLAFORMATO_VALIDACION>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<VW_SS_HC_TABLAFORMATO_VALIDACION>));
                foreach (var resultMsg in dataFields)
                {
                    dataMensajesValidacion.Add(new ENTITY_MENSAJES
                    {
                        DESCRIPCION = resultMsg.ValorTexto,
                        IDCOMPONENTE = resultMsg.NombreCampo,
                        NIVEL = 1
                    });

                }
                Session["MENSAJES_VALFORM"] = dataMensajesValidacion;
            }
            /*************************************************************/
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
            //return this.Store(listaResources);
            return showMensajeBotton(msgNoValido, "", "");
            //return this.Direct();
        }

        public System.Web.Mvc.ActionResult addRecursosValidacionMedicamento(String data, String indica)
        {
            Log.Information("HClinicaControllerSup - addRecursosValidacionMedicamento - Entrar");

            /*******SET PROP. FORMULARIO*****************************/
            Session["MENSAJES_VALFORM"] = null;

            if (data != null)
            {
                List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataRecursosForm;
                List<ENTITY_MENSAJES> dataMensajesValidacion = new List<ENTITY_MENSAJES>();
                List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataFields;
                dataFields = (List<VW_SS_HC_TABLAFORMATO_VALIDACION>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<VW_SS_HC_TABLAFORMATO_VALIDACION>));
                foreach (var resultMsg in dataFields)
                {
                    dataMensajesValidacion.Add(new ENTITY_MENSAJES
                    {
                        DESCRIPCION = resultMsg.ValorTexto,
                        IDCOMPONENTE = resultMsg.NombreCampo,
                        NIVEL = 1
                    });

                }
                Session["MENSAJES_VALFORM"] = dataMensajesValidacion;
            }
            /*************************************************************/
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
            //return this.Store(listaResources);
            return showMensajeBotton(msgNoValido, "", "");
            //return this.Direct();
        }

        public PartialViewResult eventoVerFile(String nombreArchivo, int idRegistro, string Form, string Accion)
        {
            Log.Information("HClinicaControllerSup - eventoVerFile - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new SEGURIDADCONCEPTO();
            string estado = "PanelCentralBlanco";
            string paths = "~/resources/DocumentosAdjuntos/";
            if (idRegistro <= 0)
            {
                X.Msg.Alert("Mensage", "Seleccione registro episodio", new MessageBoxButtonsConfig
                {
                    Yes = new MessageBoxButtonConfig
                    {
                        //Handler = "CompanyX.MessageBox_Basic.DoYes()",
                        Text = "Aceptar"
                    }
                }).Show();
            }
            else
            {
                estado = "VisorDocumentos";
                //String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + nombreArchivo;
                String ruta = "http://localhost:11505/~resources/DocumentosAdjuntos/" + "ResultadoExamen.doc";
                String rutaGoogle = "http://docs.google.com/viewer?url=" + ruta + "&embedded=false&a=bi&w=1820&pagenumber=1";
                model.CONCEPTO = nombreArchivo;
                model.Url = rutaGoogle;
                model.DESCRIPCION = rutaGoogle;
            }
            return new PartialViewResult
            {
                ViewName = estado,
                ContainerId = "South1",
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }

        /*ABOUT DEL SISTEMA**/
        public System.Web.Mvc.ActionResult eventoAbout(string indicador)
        {
            Log.Information("HClinicaControllerSup - eventoAbout - Entrar");

            ENTITY_GENERALHCE objModel = new ENTITY_GENERALHCE();
            objModel.ACCION = "VER";
            /********************/
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            List<MA_MiscelaneosDetalle> listInfoSession = new List<MA_MiscelaneosDetalle>();
            MA_MiscelaneosDetalle InfoSession = new MA_MiscelaneosDetalle();
            InfoSession.ACCION = "INFOABOUT";
            InfoSession.CodigoElemento = "" + ENTITY_GLOBAL.Instance.IDAGENTE;
            InfoSession.AplicacionCodigo = ENTITY_GLOBAL.Instance.APPCODIGO;
            InfoSession.Compania = ENTITY_GLOBAL.Instance.Compania;
            InfoSession.CodigoTabla = ENTITY_GLOBAL.Instance.Sucursal;//AUX            
            InfoSession.ValorCodigo1 = ENTITY_GLOBAL.Instance.Establecimiento;

            if (ENTITY_GLOBAL.Instance.CODPERSONA != null)
            {
                InfoSession.ValorCodigo2 = "" + ENTITY_GLOBAL.Instance.CODPERSONA;
            }
            int paciente = 0;
            if (ENTITY_GLOBAL.Instance.PacienteID != null)
            {
                paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            }

            listInfoSession = SvcMiscelaneos.listarMA_MiscelaneosDetalle(InfoSession, paciente, 0);
            //ver stored: [SP_SS_HC_MA_MiscelaneosDetalle_LISTAR]
            if (listInfoSession.Count > 0)
            {
                objModel.campoStr01 = listInfoSession[0].Compania; //CompaniaSocio desc
                objModel.campoStr02 = listInfoSession[0].CodigoTabla; //Sucursal desc
                objModel.campoStr03 = listInfoSession[0].AplicacionCodigo; //Aplicacion desc

                objModel.campoStr04 = listInfoSession[0].ValorCodigo1; //ESTABLECIMIENTO
                objModel.campoStr05 = listInfoSession[0].ValorCodigo2;     //PERIODO
                objModel.campoStr06 = listInfoSession[0].ValorCodigo3;  //DB

                objModel.campoStr07 = listInfoSession[0].ValorCodigo4; //TipoTrabajador desc                
                objModel.USUARIO = listInfoSession[0].UltimoUsuario;//USUARIO
                objModel.campoStr08 = listInfoSession[0].DescripcionLocal; //NOMBRE EMPLEADO
                objModel.campoInt01 = Convert.ToInt32(listInfoSession[0].ValorEntero1);
                objModel.campoStr08 = listInfoSession[0].ValorCodigo5; // módulo prueba
                objModel.campoStr09 = listInfoSession[0].ValorCodigo6; //sistema prueba
                objModel.campoStr10 = listInfoSession[0].ValorCodigo7; //DESARROLLADO POR
            }
            /********************/
            string Form = "AboutView";
            return crearWindowRegistro(Form, objModel, "");
        }
        /**EPISODIOS CLINICOS****/
        public System.Web.Mvc.ActionResult EstadoClinico(Nullable<int> selection, string accion)
        {
            try
            {
                Log.Information("HClinicaControllerSup - EstadoClinico - Entrar");

                int registro = -1;
                int registro2 = -1;
                string mensaje = "";

                if (accion == "Medico")
                {
                    List<SG_Agente> list = new List<SG_Agente>();

                    SG_Agente objUsuario = new SG_Agente();
                    objUsuario.ACCION = "VALIDAR_MEDICO";
                    objUsuario.IdEmpleado = selection;

                    list = SvcEpisodioTriaje.listarSG_AgenteLogin(objUsuario, 0, 0);
                    if (list.Count > 0)
                    {
                        SS_HC_EpisodioClinico objEpClinico = new SS_HC_EpisodioClinico();
                        objEpClinico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objEpClinico.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                        objEpClinico.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                        objEpClinico.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        objEpClinico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objEpClinico.FlagMedico = selection;

                        objEpClinico.ACCION = "UPDATE_MEDICO";

                        registro = SvcEpisodioClinico.setMantenimiento(objEpClinico);
                        ENTITY_GLOBAL.Instance.COD_MEDICO = Convert.ToInt32(objEpClinico.FlagMedico);
                        string message = "Asignación de NUEVO MEDICO satisfactorio.";
                        return JavaScript("InicioMedico('" + message + "')");
                        // return showMensajeNotify("Medicos", "Asignación de NUEVO MEDICO satisfactorio.", "ERROR");
                    }
                    else
                    {
                        return showMensajeNotify("Medicos", "No se puede asignar médico porque no posee usuario y contraseña en HCE.", "ERROR");
                    }

                }

                if (accion == "Nuevo")
                {
                    SS_HC_EpisodioClinico objEpClinico = new SS_HC_EpisodioClinico();
                    objEpClinico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEpClinico.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                    objEpClinico.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                    objEpClinico.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    objEpClinico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                    objEpClinico.ACCION = "UPDATE_EPINUEVO";
                    registro = SvcEpisodioClinico.setMantenimiento(objEpClinico);
                    mensaje = "Asignación de NUEVO EPISODIO satisfactorio. Episodio Clínico creado:";
                    ENTITY_GLOBAL.Instance.EpisodioAtencionBeta = ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    SS_HC_EpisodioAtencion epiAtencionObjSave = new SS_HC_EpisodioAtencion();
                    epiAtencionObjSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    epiAtencionObjSave.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                    epiAtencionObjSave.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    epiAtencionObjSave.Accion = "LISTAR";
                    List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(epiAtencionObjSave, 0, 0);
                    int a = 0;
                    if (listaEpi.Count > 0)
                    {
                        foreach (SS_HC_EpisodioAtencion Obj_EpisodioAtencion in listaEpi)
                        {
                            if (ENTITY_GLOBAL.Instance.EpisodioClinico == Obj_EpisodioAtencion.EpisodioClinico)
                            {

                            }
                            else
                            {
                                a++;
                                SS_HC_EpisodioClinico objClinico = new SS_HC_EpisodioClinico();
                                objClinico.UnidadReplicacion = Obj_EpisodioAtencion.UnidadReplicacion;
                                objClinico.EpisodioClinico = Obj_EpisodioAtencion.EpisodioClinico;
                                objClinico.IdPaciente = Obj_EpisodioAtencion.IdPaciente;
                                objClinico.IdOrdenAtencion = Obj_EpisodioAtencion.IdOrdenAtencion;
                                objClinico.CodigoEpisodioClinico = registro;
                                objClinico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                int registro3 = 0;
                                objClinico.ACCION = "UPDATE_EPICONTINUAR";
                                registro3 = SvcEpisodioClinico.setMantenimiento(objClinico);

                                /***********************/
                                objClinico.ACCION = "UPDATE_ATECONTINUAR";
                                registro3 = SvcEpisodioClinico.setMantenimiento(objClinico);
                            }
                        }
                    }
                }
                else if (accion == "Continuar")
                {
                    if (selection != null)
                    {

                        SS_HC_EpisodioClinico objEpClinico = new SS_HC_EpisodioClinico();
                        objEpClinico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objEpClinico.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                        objEpClinico.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                        objEpClinico.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        objEpClinico.CodigoEpisodioClinico = selection;
                        objEpClinico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        objEpClinico.ACCION = "UPDATE_EPICONTINUAR";
                        registro = SvcEpisodioClinico.setMantenimiento(objEpClinico);

                        /***********************/
                        objEpClinico.ACCION = "UPDATE_ATECONTINUAR";
                        registro2 = SvcEpisodioClinico.setMantenimiento(objEpClinico);
                        /*************************/

                        SS_HC_EpisodioAtencion epiAtencionObjSave = new SS_HC_EpisodioAtencion();
                        epiAtencionObjSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        epiAtencionObjSave.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                        epiAtencionObjSave.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        epiAtencionObjSave.Accion = "LISTAR";
                        List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(epiAtencionObjSave, 0, 0);
                        int a = 0;
                        if (listaEpi.Count > 0)
                        {
                            foreach (SS_HC_EpisodioAtencion Obj_EpisodioAtencion in listaEpi)
                            {
                                if (ENTITY_GLOBAL.Instance.EpisodioClinico == Obj_EpisodioAtencion.EpisodioClinico)
                                {

                                }
                                else
                                {
                                    a++;
                                    SS_HC_EpisodioClinico objClinico = new SS_HC_EpisodioClinico();
                                    objClinico.UnidadReplicacion = Obj_EpisodioAtencion.UnidadReplicacion;
                                    objClinico.EpisodioClinico = Obj_EpisodioAtencion.EpisodioClinico;
                                    objClinico.IdPaciente = Obj_EpisodioAtencion.IdPaciente;
                                    objClinico.IdOrdenAtencion = Obj_EpisodioAtencion.IdOrdenAtencion;
                                    objClinico.CodigoEpisodioClinico = selection;
                                    objClinico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    int registro3 = 0;
                                    objClinico.ACCION = "UPDATE_EPICONTINUAR";
                                    registro3 = SvcEpisodioClinico.setMantenimiento(objClinico);

                                    /***********************/
                                    objClinico.ACCION = "UPDATE_ATECONTINUAR";
                                    registro3 = SvcEpisodioClinico.setMantenimiento(objClinico);
                                }
                            }
                        }

                        mensaje = "Asignación de EPISODIO CONTINUADO satisfactorio. Episodio Clínico asignado:";
                        ENTITY_GLOBAL.Instance.EpisodioAtencionBeta = ENTITY_GLOBAL.Instance.EpisodioAtencionBeta2;
                    }
                }


                if (registro > 0)
                {
                    ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo = registro;
                    ENTITY_GLOBAL.Instance.EpisodioAtencionBeta = registro2;
                    Label labelX = X.GetCmp<Ext.Net.Label>("lblNumEpsiodioHCE");
                    Button btnNuevo = X.GetCmp<Ext.Net.Button>("btnNewEpisodio_HCE");
                    btnNuevo.Hidden = true;
                    Button btnCont = X.GetCmp<Ext.Net.Button>("btnContEpisodio_HCE");
                    btnCont.Hidden = true;

                    labelX.Text = UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo,
                        /*ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,*/
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.EpisodioAtencionBeta,
                                    0, ENTITY_GLOBAL.Instance.CodigoOA);

                    UTILES_MENSAJES.setParametro_Form("EPI_CLINICO_CREADO", ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo);

                    return showMensajeNotify("Ventana de Mensajes",
                   mensaje +
                    registro, "INFO");
                }
                else
                {
                    return showMensajeNotify("Ventana de Mensajes",
                        "No se pudo asignar el episodio. Error inesperado.", "ERROR");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult EstadoClinicoMedicamento(Nullable<int> selection, string accion)
        {
            Log.Information("HClinicaControllerSup - EstadoClinicoMedicamento - Entrar");

            Label labelX = X.GetCmp<Ext.Net.Label>("lblNumEpsiodioHCE");
            Button btnNuevo = X.GetCmp<Ext.Net.Button>("btnNewEpisodio_HCE");
            btnNuevo.Hidden = true;
            Button btnCont = X.GetCmp<Ext.Net.Button>("btnContEpisodio_HCE");
            btnCont.Hidden = true;

            try
            {
                int registro = -1;
                string mensaje = "";

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult ListadoAtenciones(String MODO, int paciente, string nombre, string codigooa)
        {
            Log.Information("HClinicaControllerSup - ListadoAtenciones - Entrar");
            var objModel = new VW_ATENCIONPACIENTE();
            objModel.IdPaciente = paciente;
            objModel.NombreCompleto = nombre;
            objModel.CodigoOA = codigooa;
            objModel.Accion = "Continuar";
            objModel.Persona = Convert.ToInt32(ENTITY_GLOBAL.Instance.CODPERSONA);

            objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            objModel.IdEpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion;

            objModel.IdPersonalSalud = ENTITY_GLOBAL.Instance.TIPOAGENTE;
            return crearWindowRegistro("Procesos/ContinuarEpisodio", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult eventoRenderController(String codigo, String data, String indica)
        {
            Log.Information("HClinicaControllerSup - eventoRenderController - Entrar");

            if (indica == "ORIGENDIAGNOSTICO")
            {
                if (codigo == "IMPRESIONDIAG")
                {
                    Panel panelServ = X.GetCmp<Panel>("East1");
                    if (panelServ != null)
                    {
                        panelServ.Collapse();
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult GrillaListadoAtencionPacientesContinuar(int start, int limit,
     string txtFecha1, string txtFecha2, string txtCodigoOA, string txtPaciente,
     string tipoConsulta, string tipoEstado, string idPaciente, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - GrillaListadoAtencionPacientesContinuar - Entrar");

            int cantElementos = 0;
            var Listar = new List<VW_ATENCIONPACIENTE>();
            try
            {
                ////////////////
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");                             
                var LocalEnty = new VW_ATENCIONPACIENTE();
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                ////////////////            
                if (tipoConsulta != null)
                {
                    if (tipoConsulta == "null")
                    {
                        tipoConsulta = null;
                    }
                    else if (tipoConsulta.Trim().Length == 0)
                    {
                        tipoConsulta = null;
                    }
                }
                if (txtFecha1 != null)
                {
                    if (txtFecha1 == "null")
                    {
                        txtFecha1 = null;
                    }
                    else if (txtFecha1.Trim().Length == 0)
                    {
                        txtFecha1 = null;
                    }
                }
                if (txtFecha1 != null)
                {
                    txtFecha1 = txtFecha1.Replace("\"", "");
                    LocalEnty.FecIniDiscamec = Convert.ToDateTime(txtFecha1);
                }
                if (txtFecha2 != null)
                {
                    if (txtFecha2 == "null")
                    {
                        txtFecha2 = null;
                    }
                    else if (txtFecha2.Trim().Length == 0)
                    {
                        txtFecha2 = null;
                    }
                }
                if (txtFecha2 != null)
                {
                    //DateTime jj = new DateTime();                
                    txtFecha2 = txtFecha2.Replace("\"", "");
                    LocalEnty.FecFinDiscamec = Convert.ToDateTime(txtFecha2);
                }

                LocalEnty.CodigoOA = ((txtCodigoOA + "").Trim().Length == 0 ? null : txtCodigoOA);
                LocalEnty.NombreCompleto = ((txtPaciente + "").Trim().Length == 0 ? null : txtPaciente);
                LocalEnty.Estado = getValorFiltroInt(tipoEstado);

                LocalEnty.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.CODPERSONA;
                LocalEnty.IdPaciente = getValorFiltroInt(idPaciente);

                /**ADD CONFIGURACIÓN*/
                //LocalEnty.Compania = ENTITY_GLOBAL.Instance.Compania;
                //LocalEnty.Sucursal = ENTITY_GLOBAL.Instance.Sucursal;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdEstablecimientoSalud = Convert.ToInt32(ENTITY_GLOBAL.Instance.Establecimiento);
                if (Session["IDCONFIG_TRABAJADOR_ACTUAL"] != null)
                {
                    LocalEnty.TipoOrdenAtencion = (int)Session["IDCONFIG_TRABAJADOR_ACTUAL"];
                }
                ///////////
                var ACCIONlistado = "LISTARPAGCONTINUAR";
                if (tipoConsulta == "CONTINUAR")
                {
                    LocalEnty.Servicio = "EPISODIO"; //AUX para listar solo los Creados como EPISODIOS
                    ACCIONlistado = "LISTARPAGCONTINUAR";
                }

                LocalEnty.Accion = ACCIONlistado;
                cantElementos = SvcVw_AtencionPaciente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = ACCIONlistado;
                    Listar = SvcVw_AtencionPaciente.listarVwAtencionPaciente(LocalEnty, ini, fin);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;  
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
            return this.Store(Listar, cantElementos);
        }

        // MOTOR DE REGLAS
        /**Regla: SP_RGN_07_AlertaDescansoMedico*/
        public System.Web.Mvc.ActionResult POSaludDescansoMedico(int PacienteID, int dias, String regla, String arrays)
        {
            Log.Information("HClinicaControllerSup - POSaludDescansoMedico - Entrar");
            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVORULE") != null ?
                    (String)UTILES_MENSAJES.getParametro_Form("ACTIVORULE") : null);
            if (PARAM == "S")
            {
                try
                {
                    int tiempoDescanso = 0;
                    /******* MISCELANEOS AQUILES INFORMACION*****************************/
                    HC_RuleGetCollectionStore objEnv = new HC_RuleGetCollectionStore();
                    List<MA_MiscelaneosDetalle> objLista = new List<MA_MiscelaneosDetalle>();
                    objLista = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(arrays, typeof(List<MA_MiscelaneosDetalle>));
                    objEnv.AplicacionCodigo = "999";
                    objEnv.CodigoElemento = "11111";
                    objEnv.CodigoTabla = "0000";
                    objEnv.ValorFechaFinal = objLista[0].ValorFecha;
                    objEnv.ValorEntero1 = ENTITY_GLOBAL.Instance.PacienteID;
                    objEnv.ACCION = "DESCANSOMEDICO";
                    var Result = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);
                    tiempoDescanso = (int)objLista[0].ValorEntero1;
                    if (Result.Count > 0) tiempoDescanso = tiempoDescanso + ((int)Result[0].ValorEntero2);

                    /*******INVOCA REGLA*****************************/
                    MA_MiscelaneosDetalleRule objRegla = new MA_MiscelaneosDetalleRule();
                    objRegla.CodigoTabla = regla;
                    objRegla.Dias = tiempoDescanso;
                    objRegla = ServiciosRules.POSaludDescansoMedico(objRegla);

                    /*************************************************************/
                    ENTITY_MENSAJES mostMensaje = new ENTITY_MENSAJES();
                    mostMensaje.DESCRIPCION = "El Paciente excede el número de días de descanso.";
                    if (objRegla != null)
                        mostMensaje.ESTADOBOOL = objRegla.resultBool;
                    List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
                    msgNoValido.Add(mostMensaje);
                    //return this.Store(listaResources);
                    return showMensajeBotton(msgNoValido, "", "");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
                return this.Direct();
            }
            else
            {
                return this.Direct();
            }

        }
        /**Regla : SP_RGN_02_ExamenGinecologico*/
        public System.Web.Mvc.ActionResult POSaludControlGinecologia(int PacienteID, int valor, String regla, String arrays)
        {
            Log.Information("HClinicaControllerSup - POSaludControlGinecologia - Entrar");

            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVORULE") != null ?
                    (String)UTILES_MENSAJES.getParametro_Form("ACTIVORULE") : null);
            if (PARAM == "S")
            {
                try
                {
                    int tiempoDescanso = 0;
                    /******* MISCELANEOS AQUILES INFORMACION*****************************/
                    HC_RuleGetCollectionStore objEnv = new HC_RuleGetCollectionStore();
                    List<MA_MiscelaneosDetalle> objLista = new List<MA_MiscelaneosDetalle>();
                    //  objLista = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(arrays, typeof(List<MA_MiscelaneosDetalle>));
                    objEnv.AplicacionCodigo = "999";
                    objEnv.CodigoElemento = "11111";
                    objEnv.CodigoTabla = "0000";
                    objEnv.ValorEntero1 = ENTITY_GLOBAL.Instance.PacienteID;
                    objEnv.ACCION = "CONTROLGINECOLOGIA";
                    var Result = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);

                    /*******INVOCA REGLA*****************************/
                    MA_MiscelaneosDetalleRule objRegla = new MA_MiscelaneosDetalleRule();
                    objRegla.CodigoTabla = regla;
                    if (Result.Count > 0)
                    {
                        objRegla.SexoPaciente = Result[0].ValorCodigo1;
                        objRegla.EdadPaciente = (int)Result[0].ValorEntero2;
                        objRegla.TipoAtencion = (int)Result[0].ValorEntero3;
                        objRegla.CodigoComponente = Result[0].ValorCodigo2;
                        objRegla.FechaUltimoExamen = (Result[0].ValorFecha != null ? ((DateTime)(Result[0].ValorFecha)) : DateTime.Now);
                        objRegla.Annos = (DateTime.Now.Year - objRegla.FechaUltimoExamen.Year);
                    }
                    objRegla = ServiciosRules.POSaludControlGinecologia(objRegla);

                    /*************************************************************/
                    ENTITY_MENSAJES mostMensaje = new ENTITY_MENSAJES();
                    mostMensaje.DESCRIPCION = "El Paciente No registra control de ginecología.";
                    if (objRegla != null)
                        mostMensaje.ESTADOBOOL = objRegla.resultBool;
                    List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
                    msgNoValido.Add(mostMensaje);
                    //return this.Store(listaResources);
                    return showMensajeBotton(msgNoValido, "", "");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
                return this.Direct();
            }
            else
            {
                return this.Direct();
            }
        }

        /**Regla : SP_RGN_06_ReportarDiagnostico*/
        public System.Web.Mvc.ActionResult POSaludDiagnosticoInformado(int PacienteID, int valor, String regla, String arrays)
        {
            Log.Information("HClinicaControllerSup - POSaludDiagnosticoInformado - Entrar");
            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVORULE") != null ?
        (String)UTILES_MENSAJES.getParametro_Form("ACTIVORULE") : null);
            if (PARAM == "S")
            {
                try
                {
                    int tiempoDescanso = 0;
                    /******* MISCELANEOS AQUILES INFORMACION*****************************/
                    HC_RuleGetCollectionStore objEnv = new HC_RuleGetCollectionStore();
                    List<MA_MiscelaneosDetalle> objLista = new List<MA_MiscelaneosDetalle>();
                    //  objLista = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(arrays, typeof(List<MA_MiscelaneosDetalle>));
                    objEnv.AplicacionCodigo = "999";
                    objEnv.CodigoElemento = "11111";
                    objEnv.CodigoTabla = "0000";
                    objEnv.ValorCodigo1 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEnv.ValorEntero1 = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnv.ValorEntero2 = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnv.ValorEntero3 = Convert.ToInt32("" + ENTITY_GLOBAL.Instance.EpisodioAtencion);
                    objEnv.ACCION = "REPDIAGNOSTICO";
                    var Result = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);

                    /*******INVOCA REGLA*****************************/
                    MA_MiscelaneosDetalleRule objRegla = new MA_MiscelaneosDetalleRule();
                    objRegla.CodigoTabla = regla;
                    if (Result.Count > 0)
                    {
                        objRegla.UnidadReplicacion = Result[0].ValorCodigo1;
                        //objRegla.IdPaciente = (int)Result[0].ValorEntero1;
                        objRegla.EpisodioClinico = (int)Result[0].ValorEntero2;
                        objRegla.EpisodioAtencion = (int)Result[0].ValorEntero3;
                        objRegla.Secuencia = (int)Result[0].ValorEntero4;
                        objRegla.CodigoDiagnostico = Result[0].ValorCodigo2;
                        objRegla.DeterminacionDiagnostico = Result[0].ValorCodigo3;
                    }
                    objRegla = ServiciosRules.POSaludDiagnosticoInformado(objRegla);

                    /*************************************************************/
                    ENTITY_MENSAJES mostMensaje = new ENTITY_MENSAJES();
                    mostMensaje.DESCRIPCION = "No registró Diagnóstico Definitivo.";
                    if (objRegla != null)
                    {
                        mostMensaje.ESTADOBOOL = objRegla.resultBool;
                        if (objRegla.resultBool != null ? Convert.ToBoolean(objRegla.resultBool) : false)
                        {
                            //...
                            objEnv.ValorEntero4 = objRegla.Secuencia;
                            objEnv.ACCION = "REPDIAGNOSTICO_UP";
                            var Result2 = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);
                        }
                    }
                    List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
                    msgNoValido.Add(mostMensaje);
                    //return this.Store(listaResources);
                    return showMensajeBotton(msgNoValido, "", "");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
                return this.Direct();
            }
            else
            {
                return this.Direct();
            }

        }

        /**Regla: SP_RGN_05_AlertaPrioridadEspera*/
        public System.Web.Mvc.ActionResult POSaludEmergenciaEspera(int PacienteID, int valor, String regla, String arrays)
        {
            Log.Information("HClinicaControllerSup - POSaludEmergenciaEspera - Entrar");

            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVORULE") != null ?
                (String)UTILES_MENSAJES.getParametro_Form("ACTIVORULE") : null);
            if (PARAM == "S")
            {
                try
                {
                    int tiempoDescanso = 0;
                    /******* MISCELANEOS AQUILES INFORMACION*****************************/
                    HC_RuleGetCollectionStore objEnv = new HC_RuleGetCollectionStore();
                    List<MA_MiscelaneosDetalle> objLista = new List<MA_MiscelaneosDetalle>();
                    //  objLista = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(arrays, typeof(List<MA_MiscelaneosDetalle>));
                    objEnv.AplicacionCodigo = "999";
                    objEnv.CodigoElemento = "11111";
                    objEnv.CodigoTabla = "0000";
                    objEnv.ValorCodigo1 = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                    objEnv.ACCION = "PRIORIDADESPERA";
                    var Result = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);

                    /*******INVOCA REGLA*****************************/
                    MA_MiscelaneosDetalleRule objRegla = new MA_MiscelaneosDetalleRule();
                    objRegla.CodigoTabla = regla;
                    if (Result.Count > 0)
                    {
                        objRegla.UnidadReplicacion = Result[0].ValorCodigo1;
                        objRegla.IdOrdenAtencion = (int)Result[0].ValorEntero1;
                        objRegla.TipoAtencion = (int)Result[0].ValorEntero2;
                        objRegla.FechaInicio = (Result[0].ValorFecha != null ? ((DateTime)(Result[0].ValorFecha)) : DateTime.Now);
                        objRegla.Prioridad = (int)Result[0].ValorEntero3;
                    }
                    objRegla = ServiciosRules.POSaludEmergenciaEspera(objRegla);

                    /*************************************************************/
                    ENTITY_MENSAJES mostMensaje = new ENTITY_MENSAJES();
                    mostMensaje.DESCRIPCION = "Atención prioritaria.";
                    if (objRegla != null)
                        mostMensaje.ESTADOBOOL = objRegla.resultBool;
                    List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
                    msgNoValido.Add(mostMensaje);
                    //return this.Store(listaResources);
                    return showMensajeBotton(msgNoValido, "", "");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
                return this.Direct();
            }
            else
            {
                return this.Direct();
            }

        }

        /*Regla : SP_RGN_01_ExamenLaboratorio**/
        public System.Web.Mvc.ActionResult POSaludExamenLaboratorio(int PacienteID, int valor, String regla, String arrays)
        {
            Log.Information("HClinicaControllerSup - POSaludExamenLaboratorio - Entrar");

            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVORULE") != null ?
                (String)UTILES_MENSAJES.getParametro_Form("ACTIVORULE") : null);
            if (PARAM == "S")
            {
                try
                {
                    int tiempoDescanso = 0;
                    /******* MISCELANEOS AQUILES INFORMACION*****************************/
                    HC_RuleGetCollectionStore objEnv = new HC_RuleGetCollectionStore();
                    List<MA_MiscelaneosDetalle> objLista = new List<MA_MiscelaneosDetalle>();
                    //  objLista = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(arrays, typeof(List<MA_MiscelaneosDetalle>));
                    objEnv.AplicacionCodigo = "999";
                    objEnv.CodigoElemento = "11111";
                    objEnv.CodigoTabla = "0000";
                    objEnv.ValorCodigo1 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEnv.ValorEntero1 = ENTITY_GLOBAL.Instance.PacienteID;
                    objEnv.ACCION = "PO_EXAMENPERIODO";
                    var Result = SvcMiscelaneos.getRuleGetCollectionStore(objEnv);

                    /*******INVOCA REGLA*****************************/
                    MA_MiscelaneosDetalleRule objRegla = new MA_MiscelaneosDetalleRule();
                    objRegla.CodigoTabla = regla;
                    if (Result.Count > 0)
                    {
                        //objRegla.IdPaciente = (int)Result[0].ValorEntero1;
                        objRegla.TipoOrdenAtencion = (int)Result[0].ValorEntero2;
                        objRegla.CodigoComponente = Result[0].ValorCodigo3;
                        objRegla.FechaUltimoExamen = (Result[0].ValorFecha != null ? ((DateTime)(Result[0].ValorFecha)) : DateTime.Now);
                        objRegla.Annos = (DateTime.Now.Year - objRegla.FechaUltimoExamen.Year);
                    }
                    objRegla = ServiciosRules.POSaludExamenLaboratorio(objRegla);

                    /*************************************************************/
                    ENTITY_MENSAJES mostMensaje = new ENTITY_MENSAJES();
                    mostMensaje.DESCRIPCION = "El Paciente no registra exámenes de Laboratorio.";
                    if (objRegla != null)
                        mostMensaje.ESTADOBOOL = objRegla.resultBool;
                    List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
                    msgNoValido.Add(mostMensaje);
                    //return this.Store(listaResources);
                    return showMensajeBotton(msgNoValido, "", "");
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
                return this.Direct();
            }
            else
            {
                return this.Direct();
            }
        }


        /******FORMULARIOS ADD****/


        /**PRUEBA*/
        public System.Web.Mvc.ActionResult CCEX0001_View()
        {
            Log.Information("HClinicaControllerSup - CCEX0001_View - Entrar");


            try
            {
                /////
                var LocalEnty = new SS_HC_Anamnesis_EA();
                var Listar = new List<SS_HC_Anamnesis_EA>();
                LocalEnty.Accion = "LISTAR";

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosHCE/CCEX0001_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }




        /****FORMU: EVOLUCIÓN OBJETIVA***/
        public System.Web.Mvc.ActionResult CCEP2010_View()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP2010_View - Entrar");
                SS_HC_EvolucionObjetiva LocalObj = null;
                var LocalEnty = new SS_HC_EvolucionObjetiva();
                var Listar = new List<SS_HC_EvolucionObjetiva>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                //Listar = SvcEvolucionObjetivaService.getPorId_SS_HC_EvolucionObjetiva(LocalEnty);
                bool hallado = false;
                LocalObj = SvcEvolucionObjetivaService.getPorId_SS_HC_EvolucionObjetiva(LocalEnty);
                if (LocalObj != null)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = 0;
                    LocalEnty.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    /* var fecha = Convert.ToString(LocalObj.FechaIngreso);
                     LocalObj.FechaIngreso = DateTime.Parse(fecha);*/

                    /*
                    Listar = SvcEvolucionObjetivaService.listarSS_HC_EvolucionObjetiva(LocalEnty);
                    String HISTORICO_EVOL = "";
                    if (Listar.Count > 0)
                    {
                        int contador = 0;

                        foreach (SS_HC_EvolucionObjetiva objEntity in Listar)
                        {
                            if (objEntity.EvolucionObjetiva != null && LocalObj.IdEpisodioAtencion != objEntity.IdEpisodioAtencion)
                            {
                                contador++;
                                HISTORICO_EVOL = HISTORICO_EVOL + contador + ".-" + objEntity.EvolucionObjetiva
                                    + "(Dic.Riesgo:" + objEntity.DictamenRiesgo + ")" + "\n"
                                    ;
                            }
                        }
                    }*/
                    LocalEnty = LocalObj;
                    LocalEnty.Version = ""; //AUX PARA MOSTRAR PREVIOS
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }

                /*
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EvolucionObjetiva objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }*/
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (SS_HC_EvolucionObjetiva)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F1, LocalEnty.EvolucionObjetiva);
                    SS_HC_EvolucionObjetiva lista = new SS_HC_EvolucionObjetiva();
                    lista = (SS_HC_EvolucionObjetiva)objetoGen;
                    if (objetoGen != null)
                    {
                        /* String objCopy = (String)objetoGen;*/
                        LocalEnty.EvolucionObjetiva = lista.EvolucionObjetiva;
                        LocalEnty.FechaIngreso = lista.FechaIngreso;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }


                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA + "FormulariosHCE/", "");
                return View("FormulariosHCE/CCEP2010_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult Save_EvolucionObjetiva(SS_HC_EvolucionObjetiva objSave, String HoraIngreso)
        {
            /*  var fechavalida = false;
              try { 



                 var fecha= DateTime.Parse(objSave.FechaIngreso.ToString());

                 if (fecha.Year < 1900) { 
                     fechavalida = false; }
                 else { 
                     fechavalida = true; }
                  //fechavalida = true;
              }
              catch
              {
                  fechavalida = false;
              }

              if (fechavalida == false) { return null; }
              */

            Log.Information("HClinicaControllerSup - Save_EvolucionObjetiva - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        if (objSave.FechaIngreso == null)
                        {
                            eventoPostFormulario(true, "");

                            return showMensajeNotifyData("Mensaje", "Por favor seleccione una fecha de ingreso...", "ERROR", false);


                        }

                        if (objSave.EvolucionObjetiva == null)
                        {


                            eventoPostFormulario(true, "");

                            return showMensajeNotifyData("Mensaje", "Por favor ingrese una Evolucion...", "ERROR", false);


                        }
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;

                        /*char[] MyChar = {'\ '};*/
                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";
                        registro = SvcEvolucionObjetivaService.setMantenimiento(objSave);
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }


            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }
        /****FORMU: ANTECEDENTES FAMILIARES, MODIFICADA***/
        public System.Web.Mvc.ActionResult CCEP0055_View()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP0055_View - Entrar");
                Session["DataSS_Antic_FamiliaresDelete"] = null;
                Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                Session["DataSS_Antec_FamiliaresMainDelete"] = null;
                Session["DataSS_Antec_FamiliaresMain"] = null;
                var LocalEnty = new SS_HC_Anamnesis_AFAM();
                var Listar = new List<SS_HC_Anamnesis_AFAM>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    /*
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.VistaEpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.VistaEpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    */
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcAnamnesisAFService.AnamnesisAFListar(LocalEnty).ToList();
                ////////////
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    LocalEnty.Accion = "UPDATE";
                    /*
                    foreach (SS_HC_Anamnesis_AFAM objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";

                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }*/
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA + "FormulariosHCE/", "");
                return View("FormulariosHCE/CCEP0055_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                //throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEP0055_ANTEC_FAMILIARES_MAIN()
        {
            Log.Information("HClinicaControllerSup - CCEP0055_ANTEC_FAMILIARES_MAIN - Entrar");
            var LocalEnty = new SS_HC_Anamnesis_AFAM();
            var Listar = new List<SS_HC_Anamnesis_AFAM>();
            LocalEnty.Accion = "LISTAR";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                /*
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.VistaEpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.VistaEpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                 */
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            Listar = SvcAnamnesisAFService.AnamnesisAFListar(LocalEnty).ToList();
            ////////////
            if (Listar.Count > 0)
            {
                foreach (SS_HC_Anamnesis_AFAM objEntity in Listar)
                {
                    objEntity.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        objEntity.Accion = "VISTA";
                    }
                }
            }
            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult CCEP0055_ANTEC_FAMILIARES(String secuenciaFamilia)
        {
            Log.Information("HClinicaControllerSup - CCEP0055_ANTEC_FAMILIARES - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ListarShow = new List<MA_MiscelaneosDetalle>();
            LocalEnty.ACCION = "ANTEC_FAMILIARES_ALT";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                /*
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.VistaEpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.VistaEpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                 */
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            //
            LocalEnty.ValorNumerico = Convert.ToDouble(getValorFiltroInt(secuenciaFamilia != null ? secuenciaFamilia : "0"));
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            if (Session["DATASS_HC_Anamnesis_AF_sec"] != null)
            {
                ObjListar = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                if (ObjListar.Count > 0)
                {
                    foreach (var result in ObjListar)
                    {
                        if (("" + result.ValorEntero5) == secuenciaFamilia)
                        {
                            ListarShow.Add(result);
                        }
                    }
                }

            }
            if (ListarShow.Count == 0)
            {
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    ObjListar.AddRange(Listar);
                    Session["DATASS_HC_Anamnesis_AF_sec"] = ObjListar;
                }
            }
            else
            {
                Listar.AddRange(ListarShow);
            }

            return this.Store(Listar.ToList());
        }
        /***/
        public System.Web.Mvc.ActionResult Save_Antic_FamiliaresAlt(SS_HC_Anamnesis_AFAM objAnamEA, String selection, String selectionMain, string text)
        {
            Log.Information("HClinicaControllerSup - Save_Antic_FamiliaresAlt - Entrar");

            String mensaje = "";
            SS_HC_Anamnesis_AFAM_Enfermedad objEnt;
            string mensage = "";
            long secActual = -1;
            long IdEpisodioAtencionID = -1;
            string cadenas = "";
            String[] cadArray;
            List<MA_MiscelaneosDetalle> ObjListar = null;
            List<SS_HC_Anamnesis_AFAM> ObjListarMain = null;
            // TRANSACCIONALES
            List<SS_HC_Anamnesis_AFAM> ObjCabecera = new List<SS_HC_Anamnesis_AFAM>();
            List<SS_HC_Anamnesis_AFAM_Enfermedad> ObjDetalle = new List<SS_HC_Anamnesis_AFAM_Enfermedad>();


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (text == "O")
                {
                    addDataUpdate_Antic_FamiliaresAlt("UPDATEDETALLE", selection, 1);
                    /*
                    Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                    if (selection != "[]")
                    {
                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
                        Session["DATASS_HC_Anamnesis_AF_sec"] = ObjListar; //Detalle
                    }*/

                    Session["DataSS_Antec_FamiliaresMain"] = null;
                    if (selectionMain != "[]")
                    {
                        ObjListarMain = (List<SS_HC_Anamnesis_AFAM>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionMain, typeof(List<SS_HC_Anamnesis_AFAM>));
                        Session["DataSS_Antec_FamiliaresMain"] = ObjListarMain; //Detalle
                    }
                    ////////////
                }
                else
                {
                    try
                    {
                        ///////////INICIO
                        addDataUpdate_Antic_FamiliaresAlt("UPDATEDETALLE", selection, 1);
                        /*
                        Session["DATASS_HC_Anamnesis_AF_sec"] = null;
                        if (selection != "[]")
                        {
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
                            Session["DATASS_HC_Anamnesis_AF_sec"] = ObjListar; //Detalle
                        }*/

                        Session["DataSS_Antec_FamiliaresMain"] = null;
                        if (selectionMain != "[]")
                        {
                            ObjListarMain = (List<SS_HC_Anamnesis_AFAM>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionMain, typeof(List<SS_HC_Anamnesis_AFAM>));
                            Session["DataSS_Antec_FamiliaresMain"] = ObjListarMain; //Detalle
                        }

                        ////////////
                        objAnamEA = new SS_HC_Anamnesis_AFAM();
                        //BLOQUE MAIN
                        if (Session["DataSS_Antec_FamiliaresMain"] != null || Session["DataSS_Antec_FamiliaresMainDelete"] != null)
                        {
                            if (Session["DataSS_Antec_FamiliaresMain"] != null)
                            {
                                ObjListarMain = (List<SS_HC_Anamnesis_AFAM>)Session["DataSS_Antec_FamiliaresMain"];
                                foreach (SS_HC_Anamnesis_AFAM objMain in ObjListarMain)
                                {
                                    //int secAux = 0;
                                    if (objMain.Accion == "NUEVO")
                                    {
                                        objMain.FechaCreacion = DateTime.Now;
                                        objMain.Estado = 2;
                                    }
                                    //objMain.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                    objMain.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objMain.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objMain.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objMain.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objMain.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objMain.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objMain.FechaModificacion = DateTime.Now;
                                    ObjCabecera.Add(objMain);
                                }
                            }


                            //objAnamEA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //BLOQUE MAIN - DELETE
                            List<SS_HC_Anamnesis_AFAM> dataDeleteMain = null;
                            if (Session["DataSS_Antec_FamiliaresMainDelete"] != null)
                            {
                                dataDeleteMain = (List<SS_HC_Anamnesis_AFAM>)Session["DataSS_Antec_FamiliaresMainDelete"];
                            }
                            // BORRAR  - MAIN
                            if (dataDeleteMain != null)
                            {
                                foreach (var objDel in dataDeleteMain)
                                {
                                    // SvcAnamnesisAFService.setMantAnamnesisAF(objDel);
                                    ObjCabecera.Add(objDel);
                                }
                            }

                            /*
                            objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objAnamEA.FechaModificacion = DateTime.Now;
                            long secAux = 0;
                            if (objAnamEA.Accion == "NUEVO")
                            {
                                objAnamEA.FechaCreacion = DateTime.Now;
                                objAnamEA.Estado = 2;
                            }
                            ObjCabecera.Add(objAnamEA);
                             */
                            //IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objAnamEA);

                            /**********************************************************************/
                            //BLOQUE DELETE
                            List<SS_HC_Anamnesis_AFAM_Enfermedad> dataDelete = null;
                            if (Session["DataSS_Antic_FamiliaresDelete"] != null)
                            {
                                dataDelete = (List<SS_HC_Anamnesis_AFAM_Enfermedad>)Session["DataSS_Antic_FamiliaresDelete"];
                            }

                            //BLOQUE DETALLE
                            if (Session["DATASS_HC_Anamnesis_AF_sec"] != null)
                            {
                                ObjListar = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                                if (ObjListar.Count > 0)
                                {
                                    if (ObjListar[0].ValorCodigo2.Trim().Length > 0)
                                    {
                                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                        {
                                            objEnt = new SS_HC_Anamnesis_AFAM_Enfermedad();
                                            objEnt.Accion = objEntity.ACCION;// "DETALLE";
                                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                            cadArray = objEntity.ValorCodigo2.Trim().Split('|');
                                            cadenas = cadArray[1].Replace("[", "");
                                            cadenas = cadenas.Replace("]", "").Trim();
                                            objEnt.IdDiagnostico = Convert.ToInt32(cadenas);
                                            objEnt.Observaciones = objEntity.ValorCodigo3.Trim();
                                            objEnt.SecuenciaFamilia = Convert.ToInt32(objEntity.ValorEntero5);
                                            if ((objEntity.ACCION.Trim() + "") == "NUEVO")
                                            {
                                                objEnt.Accion = "DETALLE";
                                            }
                                            if ((objEntity.ACCION.Trim() + "") != "DETALLE")
                                            {
                                                objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                            }
                                            ObjDetalle.Add(objEnt);
                                            //IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objEnt);

                                        }
                                    }
                                }
                            }
                            // BORRAR DETALLE
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    // SvcAnamnesisAFService.setMantAnamnesisAF(objDel);
                                    ObjDetalle.Add(objDel);
                                }
                            }
                            ///////////
                            IdEpisodioAtencionID = SvcAnamnesisAFService.setMantAnamnesisAF(objAnamEA, ObjCabecera, ObjDetalle);
                            if (IdEpisodioAtencionID > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = (int)IdEpisodioAtencionID;
                                mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                Session["DataSS_Antec_FamiliaresMain"] = null;
                                Session["DataSS_Antec_FamiliaresMainDelete"] = null;
                                Session["DataSS_Antic_FamiliaresDelete"] = null;
                                Session["DATASS_HC_Anamnesis_AF_sec"] = null;

                                //eventoLoadPostFormulario(true, "storeEnfermedad", null);
                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Alerta ", "No se detectaron cambios para guardar", "WARNING", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                    }
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;            
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult addEliminar_Antic_FamiliaresMainAlt(String MODO, String secuenciaFamilia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_Antic_FamiliaresMainAlt - Entrar");
            List<SS_HC_Anamnesis_AFAM> dataDelete = null;
            if ((secuenciaFamilia + "").Length > 0)
            {
                if (Session["DataSS_Antec_FamiliaresMainDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_AFAM>)Session["DataSS_Antec_FamiliaresMainDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_AFAM>();
                }
                SS_HC_Anamnesis_AFAM objDelete = new SS_HC_Anamnesis_AFAM();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string cadenas = secuenciaFamilia;
                    objDelete.SecuenciaFamilia = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    dataDelete.Add(objDelete);
                    Session["DataSS_Antec_FamiliaresMainDelete"] = dataDelete;
                    //UPDATE DETALLE ENERMEDAD                    
                    List<MA_MiscelaneosDetalle> objLista = null;
                    objLista = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                    if (objLista != null)
                    {
                        foreach (var result in objLista)
                        {
                            if (result.ACCION != "DELETEDETALLE")
                            {
                                if (("" + result.ValorEntero5) == ("" + objDelete.SecuenciaFamilia))
                                {
                                    if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                    {
                                        result.ACCION = "DELETEDETALLE";
                                    }
                                }
                            }
                        }
                        if (objLista.Count > 0)
                        {
                            Session["DATASS_HC_Anamnesis_AF_sec"] = objLista;
                        }
                    }

                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        /**METODO PARA GUARDAR EN MEMORIA CAMBIOS Y ACTUALIZACIONES*/
        public bool addDataUpdate_Antic_FamiliaresAlt(string MODO, String data, int tipo)
        {
            Log.Information("HClinicaControllerSup - addDataUpdate_Antic_FamiliaresAlt - Entrar");

            if (data != null)
            {
                List<MA_MiscelaneosDetalle> objLista = null;
                List<MA_MiscelaneosDetalle> ObjListarUpdateNew = new List<MA_MiscelaneosDetalle>();
                List<MA_MiscelaneosDetalle> ObjListarUpdate = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));
                objLista = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                if (tipo == 1)//UPDATE
                {
                    if (objLista == null)
                    {
                        objLista = ObjListarUpdate;
                    }
                    else if (objLista != null && ObjListarUpdate != null)
                    {
                        foreach (var result in objLista)
                        {
                            bool hallado = false;
                            if (result.ACCION != "DELETEDETALLE")
                            {
                                foreach (var resultUpd in ObjListarUpdate)
                                {
                                    if (result.ValorEntero5 == resultUpd.ValorEntero5
                                        && result.CodigoElemento == resultUpd.CodigoElemento)//AUX SEC FAMILIA)//AUX SEC FAMILIA
                                    {
                                        result.CodigoElemento = resultUpd.CodigoElemento;
                                        result.ValorCodigo2 = resultUpd.ValorCodigo2;
                                        result.ValorCodigo3 = resultUpd.ValorCodigo3;
                                        result.ValorEntero5 = resultUpd.ValorEntero5;
                                        if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                        {
                                            result.ACCION = MODO;
                                        }
                                        hallado = true;
                                        break;
                                    }
                                }
                                ///

                            }
                        }
                    }
                }
                else if (tipo == 2)//UPDATE
                {
                    if (objLista == null)
                    {
                        objLista = new List<MA_MiscelaneosDetalle>();
                    }
                    if (ObjListarUpdate.Count > 0)
                    {
                        objLista.AddRange(ObjListarUpdate);
                    }
                }
                //TERMINAR
                if (ObjListarUpdate.Count > 0)
                {
                    Session["DATASS_HC_Anamnesis_AF_sec"] = objLista;
                }
                //objUpd.GetAll();
            }
            return true;
        }
        public System.Web.Mvc.ActionResult addEliminar_Antic_FamiliaresAlt(String MODO, String codigo,
            String secuencia, String secuenciaFam, int tipo)
        {
            Log.Information("HClinicaControllerSup - addEliminar_Antic_FamiliaresAlt - Entrar");

            List<SS_HC_Anamnesis_AFAM_Enfermedad> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                Nullable<int> SecFamilia = getValorFiltroInt(secuenciaFam);
                List<MA_MiscelaneosDetalle> objLista = null;
                if (tipo == 1)
                {
                    objLista = (List<MA_MiscelaneosDetalle>)Session["DATASS_HC_Anamnesis_AF_sec"];
                }
                if (objLista != null)
                {
                    foreach (var result in objLista)
                    {
                        if (result.ACCION != "DELETEDETALLE")
                        {
                            if (result.ValorEntero5 == SecFamilia
                                && result.CodigoElemento == secuencia)//AUX SEC FAMILIA
                            {
                                try
                                {
                                    if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                    {
                                        result.ACCION = MODO;
                                    }
                                }
                                catch (Exception ee)
                                {
                                }
                                break;
                            }
                        }
                    }
                    if (objLista.Count > 0)
                    {
                        Session["DATASS_HC_Anamnesis_AF_sec"] = objLista;
                    }
                }
            }
            return this.Direct();
        }
        /**erportes partialview**/
        public System.Web.Mvc.ActionResult HCEReportesPartialView(String Accion)
        {
            Log.Information("HClinicaControllerSup - HCEReportesPartialView - Entrar");

            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                //AUX
                campoStr01 = "localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                campoStr02 = (ENTITY_GLOBAL.Instance.CONCEPTO).Trim()
            };

            if (ENTITY_GLOBAL.Instance.CONCEPTO != null)
            {
                string host = System.Web.HttpContext.Current.Request.Url.Host;
                string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                string path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                String UrlPathReporte = hostPort + path;
                objReporte.campoStr01 = UrlPathReporte;
                objReporte.campoStr03 = "SINGLE";
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                //model.UsuarioModificacion = hostPort + path;                                 

            }
            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 2;


            /************************************************/
            //////////      
            /* return new Ext.Net.MVC.PartialViewResult
             {
                 ViewName = "HCReportes/HCEReportesPartialView",
                 Model = objReporte
             };
             */
            //cerrarWindow("WindowVisorCronologiasForm");
            return crearWindowRegistro("HCReportes/HCEReportesPartialView", objReporte, "");

        }

        /**PARA REPORTES BITACORA**/
        public System.Web.Mvc.ActionResult HCEReportesBitacoraView(String containerId)
        {
            Log.Information("HClinicaControllerSup - HCEReportesBitacoraView - Entrar");

            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                //AUX
                //campoStr01 = "localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                campoStr02 = ENTITY_GLOBAL.Instance.CONCEPTO
            };

            if (ENTITY_GLOBAL.Instance.CONCEPTO != null)
            {
                string host = System.Web.HttpContext.Current.Request.Url.Host;
                string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                string path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                String UrlPathReporte = hostPort + path;
                objReporte.campoStr01 = UrlPathReporte;
                objReporte.campoStr03 = "SINGLE";
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                //model.UsuarioModificacion = hostPort + path;
            }

            /************************************************/
            //////////       
            return View("HCReportes/HCEReportesBitacoraView", "", objReporte);
            //return crearWindowRegistro("HCReportes/HCEReportesBitacoraView", objReporte, "", "Center1");

            /* return new PartialViewResult
             {
                 ViewName = "HCReportes/HCEReportesBitacoraView",
                 ContainerId = "Center1",
                 Model = objReporte,
                 //SingleControl = true,
                 ClearContainer = true,
                 WrapByScriptTag = true,
                 RenderMode = RenderMode.AddTo
             };*/
        }

        /**PARA REPORTES VIEW**/
        public System.Web.Mvc.ActionResult HCEReportesView()
        {
            Log.Information("HClinicaControllerSup - HCEReportesView - Entrar");

            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                //AUX
                //campoStr01 = "localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                campoStr02 = ENTITY_GLOBAL.Instance.CONCEPTO
            };

            if (ENTITY_GLOBAL.Instance.CONCEPTO != null)
            {
                string host = System.Web.HttpContext.Current.Request.Url.Host;
                string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                string path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                String UrlPathReporte = hostPort + path;
                objReporte.campoStr01 = UrlPathReporte;
                objReporte.campoStr03 = "SINGLE";
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                //model.UsuarioModificacion = hostPort + path;
            }

            /************************************************/
            //////////       
            return View("HCReportes/HCEReportesView", objReporte);
        }
        /**PARA REPORTES VIEW TOTAL HC**/
        public System.Web.Mvc.ActionResult HCEReportesView_total()
        {
            Log.Information("HClinicaControllerSup - HCEReportesView_total - Entrar");

            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                //AUX
                //campoStr01 = "localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                campoStr02 = ENTITY_GLOBAL.Instance.CONCEPTO
            };
            if (ENTITY_GLOBAL.Instance.CONCEPTO != null)
            {
                string host = System.Web.HttpContext.Current.Request.Url.Host;
                string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                string path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                String UrlPathReporte = hostPort + path;
                objReporte.campoStr01 = UrlPathReporte;
                objReporte.campoStr03 = "TOTALHC";
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                //model.UsuarioModificacion = hostPort + path;                                 

            }
            /************************************************/
            //////////       
            return View("HCReportes/HCEReportesView", objReporte);
        }


        public System.Web.Mvc.ActionResult HCEReportesView_totalTriaje()
        {
            Log.Information("HClinicaControllerSup - HCEReportesView_totalTriaje - Entrar");

            ENTITY_GLOBAL.Instance.indicadorAuxiliar = false;
            ENTITY_GENERALHCE objReporte = new ENTITY_GENERALHCE
            {
                IDENTIY_GEN = 1,
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                EpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion,
                PacienteID = ENTITY_GLOBAL.Instance.PacienteID,
                //AUX
                //campoStr01 = "localhost:11505/Reportes/VisorReportesHCE.aspx?ReportID=CCEP0003&Visor=I",
                campoStr02 = ENTITY_GLOBAL.Instance.CONCEPTO
            };
            if (ENTITY_GLOBAL.Instance.CONCEPTO != null)
            {
                string host = System.Web.HttpContext.Current.Request.Url.Host;
                string hostPort = System.Web.HttpContext.Current.Request.Url.Authority;
                //string hostPort = System.Web.HttpContext.Current.Request.Url.AbsolutePath;
                string path = System.Web.HttpContext.Current.Request.ApplicationPath;
                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                String UrlPathReporte = hostPort + path;
                objReporte.campoStr01 = UrlPathReporte;
                objReporte.campoStr03 = "TOTALHCTRIAJE";

                /**MANDAR EN UN CAMPO SI ES NECESARIO*/
                //model.UsuarioModificacion = hostPort + path;                                 

            }
            /************************************************/
            //////////       
            return View("HCReportes/HCEReportesView", objReporte);
        }


        /**Prepara los Códigos Formatos VIEW para recueparar la vista anterior*/
        public Boolean setCodigoFormatosPaginas(String indicadorEtapa, String opcionView)
        {
            Log.Information("HClinicaControllerSup - setCodigoFormatosPaginas - Entrar");

            Boolean result = true;
            if (opcionView != null)
            {
                if (indicadorEtapa == "GENERAL")
                {
                    String temporal = ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL;
                    ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_PREVIA = temporal;
                    ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL = opcionView;
                    ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_SGTE = null;

                }
            }
            return result;
        }
        public System.Web.Mvc.ActionResult initLoadFormatos(String container)
        {
            Log.Information("HClinicaControllerSup - initLoadFormatos - Entrar");

            string containerId = "";
            string text = "0";
            if (ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL != null)
            {
                containerId = container;
                /* text = ENTITY_GLOBAL.Instance.CODOPCION_PAGINA_ACTUAL;*/
                return LoadFormatos(containerId, text);
            }
            else
            {
                return this.Direct();
            }
        }

        /****ADD PERMISOS AL FORMATO **/
        public System.Web.Mvc.ActionResult addPermisosFormatos(String data, String indica)
        {
            Log.Information("HClinicaControllerSup - addPermisosFormatos - Entrar");

            /*******SET PROP. FORMULARIO*****************************/
            List<ENTITY_GENERALHCE> listaRecursosPermisos = new List<ENTITY_GENERALHCE>();
            if (Session["RECURSOS_PERMISOSFORMATOS"] == null) cargarPermisosFormato(true);
            if (Session["RECURSOS_PERMISOSFORMATOS"] != null)
            {
                listaRecursosPermisos = (List<ENTITY_GENERALHCE>)Session["RECURSOS_PERMISOSFORMATOS"];
            }
            /*************************************************************/
            return this.Store(listaRecursosPermisos);
            //return this.Direct();
        }

        /**CARGA LAS PROPEDADES DE PERMISOS DEL FORMATO ***********/
        public bool cargarPermisosFormato(bool activo)
        {
            Log.Information("HClinicaControllerSup - cargarPermisosFormato - Entrar");

            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 0;
            if (Convert.ToInt32(ENTITY_GLOBAL.Instance.IdMedicoaudi) != 0)
            {

                if (activo)
                {
                    Session["RECURSOS_PERMISOSFORMATOS"] = null;
                    var CodFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
                    var idFormato = ENTITY_GLOBAL.Instance.IDFORMATO;
                    var idOpcion = ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;


                    List<SS_CHE_VistaSeguridad> serviceResuls = new List<SS_CHE_VistaSeguridad>();
                    SS_CHE_VistaSeguridad entidaLocal = new SS_CHE_VistaSeguridad();
                    entidaLocal.Accion = "LISTAROPCIONESCAGENTE";

                    entidaLocal.IdFormato = idFormato;
                    entidaLocal.IdOpcion = Convert.ToInt32(idOpcion);
                    entidaLocal.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA);
                    entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    entidaLocal.NivelOpcion = -2; //FORMATOS  - OPCIONES SIN PLANTILLA

                    int indAsignado = 0;
                    int indNuevo = 0;
                    int indModificar = 0;
                    int indEliminar = 0;
                    int indVisible = 0;
                    int indIngreso = 0;
                    int indAcceso = 0;
                    int indHabilitado = 0;
                    int indObligatorio = 0;
                    int indPrioridadAgOPcion = 0;
                    int indImpresion = 0;

                    serviceResuls = SvcSeguridadConcepto.ListarSeguridadOpcion(entidaLocal, 0, 0);
                    if (serviceResuls.Count > 0)
                    {
                        indAsignado = Convert.ToInt32(serviceResuls[0].IndicadorAsignacion);
                        indNuevo = Convert.ToInt32(serviceResuls[0].IndicadorNuevo);
                        indModificar = Convert.ToInt32(serviceResuls[0].IndicadorModificar);
                        indEliminar = Convert.ToInt32(serviceResuls[0].IndicadorEliminar);
                        indVisible = Convert.ToInt32(serviceResuls[0].IndicadorVisible);
                        indIngreso = Convert.ToInt32(serviceResuls[0].IndicadorIngreso);
                        indAcceso = Convert.ToInt32(serviceResuls[0].IndicadorAcceso);
                        indHabilitado = Convert.ToInt32(serviceResuls[0].IndicadorHabilitado);
                        indObligatorio = Convert.ToInt32(serviceResuls[0].IndicadorObligatorio);
                        indPrioridadAgOPcion = Convert.ToInt32(serviceResuls[0].IndicadorPrioridad);
                        indImpresion = Convert.ToInt32(serviceResuls[0].IndicadorImprimir);
                    }

                    List<ENTITY_GENERALHCE> listaPermisos = new List<ENTITY_GENERALHCE>();
                    ENTITY_GENERALHCE objPermiso = new ENTITY_GENERALHCE();
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ASIGNACION", campoStr01 = "A", campoInt01 = indAsignado });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "NUEVO", campoStr01 = "N", campoInt01 = indNuevo });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "MODIFICAR", campoStr01 = "M", campoInt01 = indModificar });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ELIMINAR", campoStr01 = "E", campoInt01 = indEliminar });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "VER", campoStr01 = "V", campoInt01 = indIngreso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "INGRESO", campoStr01 = "I", campoInt01 = indIngreso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "BUSCAR", campoStr01 = "B", campoInt01 = 2 });//HARD
                    ////////
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ACCESO", campoStr01 = "S", campoInt01 = indAcceso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "HABILITADO", campoStr01 = "H", campoInt01 = indHabilitado });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "OBLIGA", campoStr01 = "O", campoInt01 = indObligatorio });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "PRIORIDADAGOPCION", campoStr01 = "P", campoInt01 = indPrioridadAgOPcion });
                    ///ADD PRINT
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "IMPRIMIR", campoStr01 = "R", campoInt01 = indImpresion });

                    Session["RECURSOS_PERMISOSFORMATOS"] = listaPermisos;

                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = indImpresion;
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_OBLIGATORIO = indObligatorio;
                }


            }
            else
            {
                if (activo)
                {
                    Session["RECURSOS_PERMISOSFORMATOS"] = null;
                    var CodFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
                    var idFormato = ENTITY_GLOBAL.Instance.IDFORMATO;
                    var idOpcion = ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;


                    List<SS_CHE_VistaSeguridad> serviceResuls = new List<SS_CHE_VistaSeguridad>();
                    SS_CHE_VistaSeguridad entidaLocal = new SS_CHE_VistaSeguridad();
                    entidaLocal.Accion = "LISTAROPCIONESCAGENTE";

                    entidaLocal.IdFormato = idFormato;
                    entidaLocal.IdOpcion = Convert.ToInt32(idOpcion);
                    entidaLocal.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                    entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    entidaLocal.NivelOpcion = -2; //FORMATOS  - OPCIONES SIN PLANTILLA

                    int indAsignado = 0;
                    int indNuevo = 0;
                    int indModificar = 0;
                    int indEliminar = 0;
                    int indVisible = 0;
                    int indIngreso = 0;
                    int indAcceso = 0;
                    int indHabilitado = 0;
                    int indObligatorio = 0;
                    int indPrioridadAgOPcion = 0;
                    int indImpresion = 0;

                    serviceResuls = SvcSeguridadConcepto.ListarSeguridadOpcion(entidaLocal, 0, 0);
                    if (serviceResuls.Count > 0)
                    {
                        indAsignado = Convert.ToInt32(serviceResuls[0].IndicadorAsignacion);
                        indNuevo = Convert.ToInt32(serviceResuls[0].IndicadorNuevo);
                        indModificar = Convert.ToInt32(serviceResuls[0].IndicadorModificar);
                        indEliminar = Convert.ToInt32(serviceResuls[0].IndicadorEliminar);
                        indVisible = Convert.ToInt32(serviceResuls[0].IndicadorVisible);
                        indIngreso = Convert.ToInt32(serviceResuls[0].IndicadorIngreso);
                        indAcceso = Convert.ToInt32(serviceResuls[0].IndicadorAcceso);
                        indHabilitado = Convert.ToInt32(serviceResuls[0].IndicadorHabilitado);
                        indObligatorio = Convert.ToInt32(serviceResuls[0].IndicadorObligatorio);
                        indPrioridadAgOPcion = Convert.ToInt32(serviceResuls[0].IndicadorPrioridad);
                        indImpresion = Convert.ToInt32(serviceResuls[0].IndicadorImprimir);
                    }

                    List<ENTITY_GENERALHCE> listaPermisos = new List<ENTITY_GENERALHCE>();
                    ENTITY_GENERALHCE objPermiso = new ENTITY_GENERALHCE();
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ASIGNACION", campoStr01 = "A", campoInt01 = indAsignado });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "NUEVO", campoStr01 = "N", campoInt01 = indNuevo });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "MODIFICAR", campoStr01 = "M", campoInt01 = indModificar });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ELIMINAR", campoStr01 = "E", campoInt01 = indEliminar });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "VER", campoStr01 = "V", campoInt01 = indIngreso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "INGRESO", campoStr01 = "I", campoInt01 = indIngreso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "BUSCAR", campoStr01 = "B", campoInt01 = 2 });//HARD
                    ////////
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ACCESO", campoStr01 = "S", campoInt01 = indAcceso });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "HABILITADO", campoStr01 = "H", campoInt01 = indHabilitado });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "OBLIGA", campoStr01 = "O", campoInt01 = indObligatorio });
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "PRIORIDADAGOPCION", campoStr01 = "P", campoInt01 = indPrioridadAgOPcion });
                    ///ADD PRINT
                    listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "IMPRIMIR", campoStr01 = "R", campoInt01 = indImpresion });

                    Session["RECURSOS_PERMISOSFORMATOS"] = listaPermisos;

                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = indImpresion;
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_OBLIGATORIO = indObligatorio;
                }



            }



            return true;
        }
        /***************************************************************************/
        /***************************************************************************/
        /*********************SEGUNDA ETAPA****************************/

        /**COPIAR FORMULARIOS : (FASE II)*/
        public System.Web.Mvc.ActionResult visorHCECopiarFormularios(string Accion, string nombrePaciente,
            string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - visorHCECopiarFormularios - Entrar");

            Session["COPIA_FORMULARIO"] = "INACTIVA";
            ENTITY_GLOBAL.Instance.validarcopiarPanelCancelar = 1;
            Session["DATA_COPIA_FORM"] = null;
            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.UsuarioModificacion = ENTITY_GLOBAL.Instance.CONCEPTO;

            model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;

            //ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
            /**CONTROL DE CAMPOS FILTROS DE LA CRONOLOG SELECCIONDA (PARA COPIAR)**/
            ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
            ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
            ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            /************************************/

            string estado = "PanelCentralBlanco";
            //return crearWindowRegistro(Form, model, "", FormContainer);
            return crearWindowRegistro(Form, model, "");

        }


        public System.Web.Mvc.ActionResult visorHCECVerEscalaGlasgow(string Accion, string opcionCodigo, string nombrePaciente,
            string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - visorHCECVerEscalaGlasgow - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";

            objVistaSeguridad.IdOpcion = Convert.ToInt32(opcionCodigo);


            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

            if (resulListado.Count > 0)
            {

                //ENTITY_GLOBAL.Instance.CONCEPTO = (resulListado[0].CodigoFormato + "").Trim();
                //ENTITY_GLOBAL.Instance.IDFORMATO = resulListado[0].IdFormato;
                ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCIONGLASGOW = resulListado[0].NombreOpcion.Trim();
                ENTITY_GLOBAL.Instance.IDOPCION_ACTUALGLASGOW = resulListado[0].IdOpcion;
            }

            // model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;
            //ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
            /**CONTROL DE CAMPOS FILTROS DE LA CRONOLOG SELECCIONDA (PARA COPIAR)**/
            ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
            ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
            ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            /************************************/

            string estado = "PanelCentralBlanco";
            //return crearWindowRegistro(Form, model, "", FormContainer);
            return crearWindowRegistro(Form, model, "");

        }




        public System.Web.Mvc.ActionResult visorHCECopiarFormulariosINFORMEALTA(string Accion, string nombrePaciente,
           string Form, string FormContainer, int indica)
        {
            Log.Information("HClinicaControllerSup - visorHCECopiarFormulariosINFORMEALTA - Entrar");

            Session["COPIA_FORMULARIO"] = "INACTIVA";
            Session["DATA_COPIA_FORM"] = null;
            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE = indica;


            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.UsuarioModificacion = ENTITY_GLOBAL.Instance.CONCEPTO;

            model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;

            //ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
            /**CONTROL DE CAMPOS FILTROS DE LA CRONOLOG SELECCIONDA (PARA COPIAR)**/
            ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
            ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
            ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            /************************************/

            string estado = "PanelCentralBlanco";
            //return crearWindowRegistro(Form, model, "", FormContainer);
            return crearWindowRegistro(Form, model, "");

        }






        public System.Web.Mvc.ActionResult VistaDinamicos(string Accion, string nombrePaciente,
            string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - VistaDinamicos - Entrar");


            var model = new V_EpisodioAtenciones();

            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.UsuarioModificacion = ENTITY_GLOBAL.Instance.CONCEPTO;

            model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;
            /************************************/
            string vista = Form;



            return crearWindowRegistro(vista, model, "");


        }

        /**COPIAR FORMULARIOS : (FASE II)*/
        public System.Web.Mvc.ActionResult eventoRegistroHistorialForm(string Accion, string nombrePaciente,
            string Form, string FormContainer)
        {
            Log.Information("HClinicaControllerSup - eventoRegistroHistorialForm - Entrar");

            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new V_EpisodioAtenciones();
            //ENTITY_GLOBAL.Instance.NombreCompletoPaciente = objDatos.NombreCompleto;
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.UsuarioModificacion = ENTITY_GLOBAL.Instance.CONCEPTO;

            model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;

            //ENTITY_GLOBAL.Instance.EpisodioAtencion = Atencion;
            /**CONTROL DE CAMPOS FILTROS DE LA CRONOLOG SELECCIONDA (PARA COPIAR)**/
            ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
            ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
            ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;

            /************************************/
            string vista = Form;
            if (ENTITY_GLOBAL.Instance.CodeForm == "DinamicsComp")
            {
                ///model.Accion = "LISTAR_DIN";
                vista = "Procesos/VisorHistorialDinamicosCompartidos";
            }

            string estado = "PanelCentralBlanco";
            //return crearWindowRegistro(Form, model, "", FormContainer);
            return crearWindowRegistro(vista, model, "");

        }



        public System.Web.Mvc.ActionResult eventoRegistroHistoricoFormularioHISTORY(string formato, string accion, string idWindow, Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy, String data, string EpisodioAtencionAmbu)
        {
            Log.Information("HClinicaControllerSup - eventoRegistroHistoricoFormularioHISTORY - Entrar");

            int Contador = 0;
            bool dupli = false;
            string repetidos = "";

            if ("HISTORIAL" == accion)
            {

                ENTITY_GLOBAL.Instance.UnidadReplicacion = UnidadReplicacionCopy;
                ENTITY_GLOBAL.Instance.EpisodioClinico = idEpiClinicoCopy;

                if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO" || ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO" || ENTITY_GLOBAL.Instance.COD_BANDEJA == "EMERGENCIA")
                {
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = Convert.ToInt32(EpisodioAtencionAmbu);
                }
                else
                {
                    ENTITY_GLOBAL.Instance.EpisodioAtencion = idEpiAtencionCopy;
                }
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                if (data != null)
                {
                    ENTITY_GLOBAL.Instance.DinamicSecuencia = Convert.ToInt32(data);
                }

            }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult eventoRegistroHistoricoFormulario(string formato, string accion, string idWindow, Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy, String data)
        {
            Log.Information("HClinicaControllerSup - eventoRegistroHistoricoFormulario - Entrar");

            int Contador = 0;
            bool dupli = false;
            string repetidos = "";


            int Contador2 = 0;
            bool dupli2 = false;
            string repetidos2 = "";

            ENTITY_GLOBAL.Instance.INDICADORCOPYARDOBLE = 0;

            if ("COPIAR" == accion)
            {
                ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 1;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            }
            else if ("PEGAR" == accion)
            {
                if ((data != null) || (data.Length > 0))
                {

                    Session["DATA_COPIA_FORM"] = data;
                    List<BE_Medicamento_FE> objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<V_EpisodioAtenciones>));


                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_3")
                    {
                        List<BE_MedicamentoEpicrisis_FE> objListaMedEpicri = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];

                        if (objListaMedEpicri != null)
                        {

                            if (listaCopiaForm.Count == 0)
                            {
                                return this.Direct();
                            }
                            foreach (var frmPrinc in objListaMedEpicri)
                            {
                                foreach (var copydata in listaCopiaForm)
                                {
                                    if (frmPrinc.CodigoComponente == copydata.Codigo004 && frmPrinc.Linea == copydata.Codigo001
                                        && frmPrinc.Familia == copydata.Codigo002 && frmPrinc.SubFamilia == copydata.Codigo003)
                                    {
                                        Contador2++;
                                        dupli2 = true;
                                        repetidos2 += " * " + copydata.Descripcion001 + " * ";
                                    }
                                }
                            }
                            if (dupli2 == true)
                            {
                                return showMensajeBox(Contador2 + " MEDICAMENTO DUPLICADO:  " + repetidos,
                                    "Advertencia", "WARNING");
                            }

                        }
                    }

                    if (objListaMed == null)
                    {
                        var objListaAnt = new List<SS_HC_Medicamento_FE>();
                        var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                        SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                        objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objEnt.Accion = "LISTAR";
                        objEnt.TipoMedicamento = 1; //para Medicina

                        objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                        objEnt.TipoMedicamento = 4;
                        objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
                        objListaAnt.AddRange(objListaAnt2);

                        string cadenas = "";
                        String[] cadArray;
                        if (objListaAnt.Count > 0)
                        {
                            objListaMed = new List<BE_Medicamento_FE>();
                            BE_Medicamento_FE obtemp;
                            foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                            {

                                obtemp = new BE_Medicamento_FE();
                                obtemp.Linea = intobj.Linea;
                                obtemp.Familia = intobj.Familia;
                                obtemp.SubFamilia = intobj.SubFamilia;
                                cadArray = intobj.Version.Trim().Split('|');
                                obtemp.LineaDescripcion = cadArray[0];
                                obtemp.FamiliaDescripcion = cadArray[1];
                                obtemp.SubFamiliaDescripcion = cadArray[2];
                                obtemp.MedicamentoDescripcion = cadArray[3];
                                obtemp.Secuencia = intobj.Secuencia;
                                obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                obtemp.Dosis = intobj.Dosis;
                                obtemp.IdVia = intobj.IdVia;
                                obtemp.Cantidad = intobj.Cantidad;
                                obtemp.Frecuencia = intobj.Frecuencia;
                                obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                                if (intobj.GrupoMedicamento == 4 || intobj.GrupoMedicamento == null)
                                {
                                    obtemp.GrupoMedicamento = 0;
                                }
                                obtemp.Presentacion = intobj.Presentacion;
                                obtemp.TipoComida = intobj.TipoComida;
                                /////ADD 25/09
                                obtemp.Estado = intobj.Estado;
                                obtemp.CodigoComponente = intobj.CodigoComponente;
                                obtemp.Medicamento = intobj.CodigoComponente;
                                obtemp.Comentario = intobj.Comentario;
                                obtemp.TipoReceta = intobj.TipoReceta;
                                obtemp.Periodo = intobj.Periodo;
                                obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                obtemp.Indicacion = intobj.Indicacion;
                                obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                obtemp.Accion = "UPDATEINDIV";
                                objListaMed.Add(obtemp);
                            }
                        }
                        Session["HC_MedicamentoList"] = objListaMed;
                    }

                    if (objListaMed != null)
                    {

                        ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
                        if (listaCopiaForm.Count == 0)
                        {
                            return this.Direct();
                        }
                        foreach (var frmPrinc in objListaMed)
                        {
                            foreach (var copydata in listaCopiaForm)
                            {
                                if (frmPrinc.CodigoComponente == copydata.Codigo004 && frmPrinc.Linea == copydata.Codigo001
                                    && frmPrinc.Familia == copydata.Codigo002 && frmPrinc.SubFamilia == copydata.Codigo003)
                                {
                                    Contador++;
                                    dupli = true;
                                    repetidos += " * " + copydata.Descripcion001 + " * ";
                                }
                            }
                        }
                        if (dupli == true)
                        {
                            return showMensajeBox(Contador + " MEDICAMENTO DUPLICADO:  " + repetidos,
                                "Advertencia", "WARNING");
                        }
                    }

                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF101")
                    {
                        Session["DATA_COPIA_FORM"] = null;
                        Session["HC_MedicamentoList"] = null;
                        List<BE_Medicamento_FE> listaCopia = new List<BE_Medicamento_FE>();
                        //PARA DIETAS Y MICRO NUT
                        if (listaCopiaForm != null)
                        {
                            foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                            {

                                ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                                SS_HC_Medicamento_FE objAdd = new SS_HC_Medicamento_FE();
                                var objLista = new List<BE_Medicamento_FE>();
                                var objListaAnt = new List<SS_HC_Medicamento_FE>();
                                var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                                objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                                objEnt.IdPaciente = obj.IdPaciente;
                                objEnt.EpisodioClinico = obj.EpisodioClinico;
                                objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                objEnt.Secuencia = obj.Id002;
                                objEnt.Accion = "LISTARCOPIADO";
                                //    objEnt.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                                //objEnt.Accion = "LISTAR";

                                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                                BE_Medicamento_FE obtemp;
                                int x = 0;
                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                                {

                                    String[] cadArray;

                                    obtemp = new BE_Medicamento_FE();
                                    obtemp.Linea = intobj.Linea;
                                    obtemp.Familia = intobj.Familia;
                                    obtemp.SubFamilia = intobj.SubFamilia;
                                    /**/
                                    cadArray = intobj.Version.Trim().Split('|');
                                    obtemp.LineaDescripcion = cadArray[0];
                                    obtemp.FamiliaDescripcion = cadArray[1];
                                    obtemp.SubFamiliaDescripcion = cadArray[2];
                                    obtemp.MedicamentoDescripcion = cadArray[3];
                                    obtemp.Secuencia = intobj.Secuencia;
                                    obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                    obtemp.Dosis = intobj.Dosis;///////////// Editado
                                    obtemp.IdVia = intobj.IdVia;
                                    obtemp.Cantidad = intobj.Cantidad;
                                    obtemp.Frecuencia = intobj.Frecuencia;
                                    obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                    obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                    /////ADD 25/09
                                    obtemp.Estado = intobj.Estado;
                                    obtemp.CodigoComponente = intobj.CodigoComponente;
                                    obtemp.Medicamento = intobj.CodigoComponente;//ADD
                                    obtemp.Comentario = intobj.Comentario;//ADD
                                    obtemp.CodAlmacen = intobj.CodAlmacen; // angel 02/08/2019
                                    obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                                    {
                                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                                    }
                                    obtemp.Periodo = intobj.Periodo;
                                    obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                    obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                    obtemp.TipoComida = intobj.TipoComida;
                                    obtemp.Indicacion = intobj.Indicacion;
                                    obtemp.TipoReceta = intobj.TipoReceta;
                                    obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                    obtemp.Accion = "NUEVO";
                                    listaCopia.Add(obtemp);
                                    x = x + 1;
                                }
                            }

                            foreach (SS_HC_Medicamento_FE intobj in listaCopia)
                            {
                                intobj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                intobj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                intobj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                intobj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                intobj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                intobj.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                intobj.Version = "CCEPF101";
                                SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(1, intobj);
                            }
                        }
                    }
                }

                ENTITY_GLOBAL.Instance.UNIDREPLICACION_COPY = UnidadReplicacionCopy;
                ENTITY_GLOBAL.Instance.IDPACIENTE_COPY = ENTITY_GLOBAL.Instance.PacienteID;
                ENTITY_GLOBAL.Instance.EPISODIOCLINICO_COPY = idEpiClinicoCopy;
                ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_COPY = idEpiAtencionCopy;
                if (ENTITY_GLOBAL.Instance.CONCEPTO != "CCEPF101")
                {
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                var win = X.GetCmp<Window>(idWindow);
                if (win != null)
                {
                    win.Hide();
                }
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
                cambioSeleccionCronologias("DESELECCION");
                return reloadFormatos();
            }
            else if ("HISTORIAL" == accion)
            {

                ENTITY_GLOBAL.Instance.UnidadReplicacion = UnidadReplicacionCopy;
                ENTITY_GLOBAL.Instance.EpisodioClinico = idEpiClinicoCopy;
                ENTITY_GLOBAL.Instance.EpisodioAtencion = idEpiAtencionCopy;
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                if (data != null)
                {
                    ENTITY_GLOBAL.Instance.DinamicSecuencia = Convert.ToInt32(data);
                }

            }

            return this.Direct();
        }
        /********EVENTO DE EXAMENESADICIONALES**************/

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormulario(string formato, string accion, string idWindow,
            Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
            String data
            )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormulario - Entrar");


            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario");
            }



        }


        /************************/
        public Object getObjetoMiscelaneoFormulario_de_Historial(String data,
         string accion, string codigoForm, Object dataValidacion
         )
        {
            Log.Information("HClinicaControllerSup - getObjetoMiscelaneoFormulario_de_Historial - Entrar");

            if (accion == "PEGAR" && data != null)
            {
                List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<V_EpisodioAtenciones>));
                //List<V_EpisodioAtenciones> dataSave = null;
                Session["DATA_COPIA_FORM"] = data;
                //PARA DIAGNóSTICOS
                if (codigoForm == UTILES_MENSAJES.FORM_DIAGNOSTICO_F1)
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;
                            foreach (MA_MiscelaneosDetalle objValidar in listaValidar)
                            {
                                String codigoVal = getCodigoElementoForm(objValidar.ValorCodigo1, codigoForm);
                                if (codigoCopy.Length > 0 && codigoVal == codigoCopy)
                                {
                                    hallado = true;
                                    break;
                                }
                            }
                            if (!hallado)
                            {

                                //OBTENER POR ID (SE PIDIÓ TODOS LOS VALORES DEL REGISTRO)
                                SS_HC_Diagnostico objFiltro = new SS_HC_Diagnostico();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                objFiltro = SvcDiagnosticoService.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    MA_MiscelaneosDetalle objAdd = new MA_MiscelaneosDetalle();
                                    objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ACCION = "NUEVO";
                                    objAdd.UltimoUsuario = "COPIA";//AUX
                                    //
                                    objAdd.CodigoElemento = "" + objFiltro.Secuencia;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorCodigo2 = objFiltro.DeterminacionDiagnostica;
                                    objAdd.ValorCodigo3 = "" + (objFiltro.IdDiagnosticoPrincipal != null ? objFiltro.IdDiagnosticoPrincipal : 0);
                                    objAdd.ValorCodigo4 = objFiltro.GradoAfeccion;
                                    objAdd.ValorCodigo5 = objFiltro.TipoAntecedente;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorEntero5 = objFiltro.IndicadorPreExistencia;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;

                                    listaCopia.Add(objAdd);
                                }

                            }
                        }
                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_MEDICAMENTOS_F1)
                {
                    List<HC_Medicamento> listaCopia = new List<HC_Medicamento>();
                    //PARA MEDICAMENTOS
                    if (listaCopiaForm != null)
                    {
                        List<HC_Medicamento> listaValidar = new List<HC_Medicamento>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<HC_Medicamento>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Codigo001 != null ? obj.Codigo001.Trim() : "") +
                                (obj.Codigo002 != null ? obj.Codigo002.Trim() : "") +
                                (obj.Codigo003 != null ? obj.Codigo003.Trim() : "") +
                                (obj.Codigo004 != null ? obj.Codigo004.Trim() : "")
                                ;
                            Boolean hallado = false;
                            foreach (HC_Medicamento objValidar in listaValidar)
                            {
                                String codigoVal = (objValidar.Linea != null ? objValidar.Linea.Trim() : "") +
                                      (objValidar.Familia != null ? objValidar.Familia.Trim() : "") +
                                      (objValidar.SubFamilia != null ? objValidar.SubFamilia.Trim() : "") +
                                      (objValidar.CodigoComponente != null ? objValidar.CodigoComponente.Trim() : "")
                                      ;
                                if (codigoCopy.Length > 0 && codigoVal == codigoCopy)
                                {
                                    hallado = true;
                                    break;
                                }
                            }
                            if (!hallado)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                                HC_Medicamento objAdd = new HC_Medicamento();
                                objAdd.SubFamiliaDescripcion = obj.Descripcion001;
                                //objAdd.IndicadorEPS = obj.Id002;
                                objAdd.Linea = obj.Codigo001;
                                objAdd.Familia = obj.Codigo002;
                                objAdd.SubFamilia = obj.Codigo003;
                                objAdd.CodigoComponente = obj.Codigo004;

                                objAdd.TipoMedicamento = obj.Id001;
                                objAdd.Secuencia = obj.Id002;
                                //objAdd.Version = obj.Codigo004;
                                //objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";

                                objAdd.Accion = "NUEVO";
                                objAdd.UsuarioModificacion = "COPIA";//AUX
                                listaCopia.Add(objAdd);
                            }
                        }
                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_2"
                        || codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_3"
                    )
                {
                    //VERIFICAR QUE TIPO DE MEDICAMENT ES
                    int tipoMed = 0;
                    if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_2"
                    )
                    {
                        tipoMed = 2;
                    }
                    else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_3")
                    {
                        tipoMed = 3;
                    }


                    List<HC_Medicamento> listaCopia = new List<HC_Medicamento>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<HC_Medicamento> listaValidar = new List<HC_Medicamento>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<HC_Medicamento>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            if (obj.Id001 == tipoMed)
                            {
                                String codigoCopy = (obj.Codigo001 != null ? obj.Codigo001.Trim() : "") +
                                    (obj.Codigo002 != null ? obj.Codigo002.Trim() : "") +
                                    (obj.Codigo003 != null ? obj.Codigo003.Trim() : "") +
                                    (obj.Codigo004 != null ? obj.Codigo004.Trim() : "")
                                    ;
                                Boolean hallado = false;
                                foreach (HC_Medicamento objValidar in listaValidar)
                                {
                                    String codigoVal = (objValidar.Linea != null ? objValidar.Linea.Trim() : "") +
                                          (objValidar.Familia != null ? objValidar.Familia.Trim() : "") +
                                          (objValidar.SubFamilia != null ? objValidar.SubFamilia.Trim() : "") +
                                          (objValidar.CodigoComponente != null ? objValidar.CodigoComponente.Trim() : "")
                                          ;
                                    if (codigoCopy.Length > 0 && codigoVal == codigoCopy)
                                    {
                                        hallado = true;
                                        break;
                                    }
                                }
                                if (!hallado)
                                {
                                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                                    HC_Medicamento objAdd = new HC_Medicamento();
                                    objAdd.SubFamiliaDescripcion = obj.Descripcion001;
                                    //objAdd.IndicadorEPS = obj.Id002;
                                    objAdd.Linea = obj.Codigo001;
                                    objAdd.Familia = obj.Codigo002;
                                    objAdd.SubFamilia = obj.Codigo003;
                                    objAdd.CodigoComponente = obj.Codigo004;


                                    objAdd.TipoMedicamento = obj.Id001;
                                    objAdd.Secuencia = obj.Id002;

                                    //objAdd.Version = obj.Codigo004;
                                    //objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";

                                    objAdd.Accion = "NUEVO";
                                    objAdd.UsuarioModificacion = "COPIA";//AUX
                                    listaCopia.Add(objAdd);
                                }
                            }
                        }
                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F1)////EVOLUCION OBJETIVA
                {

                    String objValidar = "";
                    if (dataValidacion != null)
                    {
                        objValidar = (String)dataValidacion;
                    }
                    /*objCopia = objValidar*/
                    SS_HC_EvolucionObjetiva objCopia = new SS_HC_EvolucionObjetiva();
                    /*****/
                    SS_HC_EvolucionObjetiva objFiltro = new SS_HC_EvolucionObjetiva();
                    objFiltro.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                    objFiltro.IdPaciente = listaCopiaForm[0].IdPaciente;
                    objFiltro.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                    objFiltro.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                    // objFiltro.CodigoSegus = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);

                    objFiltro = SvcEvolucionObjetivaService.getPorId_SS_HC_EvolucionObjetiva(objFiltro);

                    /*****/


                    //   foreach (SS_HC_EvolucionObjetiva obj in objFiltro)
                    //  {
                    /* if (objValidar.Trim() != obj.Descripcion001.Trim())
                     {
                         objCopia = "" + objCopia + "\n" +
                             obj.Descripcion001 + "(Copia)";
                     }*/

                    objCopia.EvolucionObjetiva = objFiltro.EvolucionObjetiva;
                    objCopia.FechaIngreso = objFiltro.FechaIngreso;
                    //}
                    return objCopia;
                }

                else if (codigoForm == UTILES_MENSAJES.FORM_NOTAENFERMERIA)///DIAGNOSTICO
                {
                    List<SS_HC_NotasEnfermeria_FE> listaCopia = new List<SS_HC_NotasEnfermeria_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<SS_HC_NotasEnfermeria_FE> listaValidar = new List<SS_HC_NotasEnfermeria_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<SS_HC_NotasEnfermeria_FE>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;

                            if (!hallado)
                            {

                                String cadenas = "";
                                String[] cadArray;
                                //OBTENER POR ID (SE PIDIÓ TODOS LOS VALORES DEL REGISTRO)
                                SS_HC_NotasEnfermeria_FE objFiltro = new SS_HC_NotasEnfermeria_FE();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                // objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                // objFiltro = SvcDiagnosticoFE.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    SS_HC_NotasEnfermeria_FE objAdd = new SS_HC_NotasEnfermeria_FE();
                                    objAdd.NotaEnfermeria = obj.Descripcion001;
                                    listaCopia.Add(objAdd);
                                }

                            }
                        }
                    }
                    return listaCopia;

                }

                else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2)
                {
                    //String objValidar = "";
                    //if (dataValidacion != null)
                    //{
                    //    objValidar = (String)dataValidacion;
                    //}
                    ///*objCopia = objValidar*/
                    //SS_HC_EvolucionMedica_FE objCopia = new SS_HC_EvolucionMedica_FE();
                    //List<SS_HC_EvolucionMedica_FE> listCop = new List<SS_HC_EvolucionMedica_FE>();
                    ///*****/
                    //SS_HC_EvolucionMedica_FE objFiltro = new SS_HC_EvolucionMedica_FE();
                    //objFiltro.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                    //objFiltro.IdPaciente = listaCopiaForm[0].IdPaciente;
                    //objFiltro.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                    //objFiltro.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                    //listCop = SvcEvolucionObjetivaFEService.listarSS_HC_EvolucionObjetiva(objFiltro);
                    //objCopia.EvolucionObjetiva = listCop[0].EvolucionObjetiva;
                    //objCopia.FechaIngreso = listCop[0].FechaIngreso;
                    ////}
                    //return objCopia;


                    List<SS_HC_EvolucionMedica_FE> listaCopia = new List<SS_HC_EvolucionMedica_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<SS_HC_EvolucionMedica_FE> listaValidar = new List<SS_HC_EvolucionMedica_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<SS_HC_EvolucionMedica_FE>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;

                            if (!hallado)
                            {

                                String cadenas = "";
                                String[] cadArray;
                                //OBTENER POR ID (SE PIDIÓ TODOS LOS VALORES DEL REGISTRO)
                                SS_HC_EvolucionMedica_FE objFiltro = new SS_HC_EvolucionMedica_FE();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                // objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                // objFiltro = SvcDiagnosticoFE.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    SS_HC_EvolucionMedica_FE objAdd = new SS_HC_EvolucionMedica_FE();
                                    objAdd.EvolucionObjetiva = obj.Descripcion001;
                                    listaCopia.Add(objAdd);
                                }

                            }
                        }
                    }
                    return listaCopia;



                }



                else if (codigoForm == UTILES_MENSAJES.FORM_MED_EPICRISIS201_1_F2)///DIAGNOSTICO
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;

                            if (!hallado)
                            {

                                String cadenas = "";
                                String[] cadArray;
                                //OBTENER POR ID (SE PIDIÓ TODOS LOS VALORES DEL REGISTRO)
                                SS_HC_Diagnostico_FE objFiltro = new SS_HC_Diagnostico_FE();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                objFiltro = SvcDiagnosticoFE.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    MA_MiscelaneosDetalle objAdd = new MA_MiscelaneosDetalle();
                                    // objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ValorCodigo5 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";


                                    cadArray = objAdd.ValorCodigo5.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();
                                    objAdd.ValorCodigo1 = cadenas;


                                    objAdd.ACCION = "NUEVO";
                                    objAdd.UltimoUsuario = "COPIA";//AUX
                                    //
                                    objAdd.CodigoElemento = "" + objFiltro.Secuencia;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorCodigo2 = objFiltro.DeterminacionDiagnostica;
                                    objAdd.ValorCodigo3 = "" + (objFiltro.IdDiagnosticoPrincipal != null ? objFiltro.IdDiagnosticoPrincipal : 0);
                                    objAdd.ValorCodigo4 = objFiltro.GradoAfeccion;
                                    objAdd.ValorCodigo7 = objFiltro.TipoAntecedente;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorEntero5 = objFiltro.IndicadorPreExistencia;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;

                                    listaCopia.Add(objAdd);
                                }

                            }
                        }
                    }
                    return listaCopia;
                }




                else if (codigoForm == UTILES_MENSAJES.FORM_DIAGNOSTICO_F2)///DIAGNOSTICO
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;
                            /*  foreach (MA_MiscelaneosDetalle objValidar in listaValidar)
                              {
                                  String codigoVal = getCodigoElementoForm(objValidar.ValorCodigo1, codigoForm);
                                  if (codigoCopy.Length > 0 && codigoVal == codigoCopy)
                                  {
                                      hallado = true;
                                      break;
                                  }
                              }*/
                            if (!hallado)
                            {

                                //OBTENER POR ID (SE PIDIÓ TODOS LOS VALORES DEL REGISTRO)
                                SS_HC_Diagnostico_FE objFiltro = new SS_HC_Diagnostico_FE();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                objFiltro = SvcDiagnosticoFE.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    MA_MiscelaneosDetalle objAdd = new MA_MiscelaneosDetalle();
                                    objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ValorCodigo7 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ACCION = "NUEVO";
                                    objAdd.UltimoUsuario = "COPIA";//AUX
                                    //
                                    objAdd.CodigoElemento = "" + objFiltro.Secuencia;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorCodigo2 = objFiltro.DeterminacionDiagnostica;
                                    objAdd.ValorCodigo3 = "" + (objFiltro.IdDiagnosticoPrincipal != null ? objFiltro.IdDiagnosticoPrincipal : 0);
                                    objAdd.ValorCodigo4 = objFiltro.GradoAfeccion;
                                    objAdd.ValorCodigo5 = objFiltro.TipoAntecedente;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorEntero5 = objFiltro.IndicadorPreExistencia;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;

                                    listaCopia.Add(objAdd);
                                }

                            }
                        }
                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_MEDICAMENTOS_F2)
                {
                    /*  //List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                      List<BE_Medicamento_FE> listaCopia = new List<BE_Medicamento_FE>();
                      //PARA MEDICAMENTOS
                      if (listaCopiaForm != null)
                      {
                          List<BE_Medicamento_FE> listaValidar = new List<BE_Medicamento_FE>();
                          if (dataValidacion != null)
                          {
                              listaValidar = (List<BE_Medicamento_FE>)dataValidacion;
                          }
                          foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                          {
                              String codigoCopy = (obj.Codigo001 != null ? obj.Codigo001.Trim() : "") +
                                  (obj.Codigo002 != null ? obj.Codigo002.Trim() : "") +
                                  (obj.Codigo003 != null ? obj.Codigo003.Trim() : "") +
                                  (obj.Codigo004 != null ? obj.Codigo004.Trim() : "")
                                  ;
                              Boolean hallado = false;
                              foreach (BE_Medicamento_FE objValidar in listaValidar)
                              {
                                  String codigoVal = (objValidar.Linea != null ? objValidar.Linea.Trim() : "") +
                                        (objValidar.Familia != null ? objValidar.Familia.Trim() : "") +
                                        (objValidar.SubFamilia != null ? objValidar.SubFamilia.Trim() : "") +
                                        (objValidar.CodigoComponente != null ? objValidar.CodigoComponente.Trim() : "")
                                        ;
                                  if (codigoCopy.Length > 0 && codigoVal == codigoCopy)
                                  {
                                      hallado = true;
                                      break;
                                  }
                              }
                              if (!hallado)
                              {
                                  ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                                  BE_Medicamento_FE objAdd = new BE_Medicamento_FE();
                                  objAdd.SubFamiliaDescripcion = obj.Descripcion001;
                                  //objAdd.IndicadorEPS = obj.Id002;
                                  objAdd.Linea = obj.Codigo001;
                                  objAdd.Familia = obj.Codigo002;
                                  objAdd.SubFamilia = obj.Codigo003;
                                  objAdd.CodigoComponente = obj.Codigo004;

                                  objAdd.TipoMedicamento = obj.Id001;
                                  objAdd.Secuencia = obj.Id002;
                                  //objAdd.Version = obj.Codigo004;
                                  //objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";

                                  objAdd.Accion = "NUEVO";
                                  objAdd.UsuarioModificacion = "COPIA";//AUX
                                  listaCopia.Add(objAdd);
                              }
                          }
                      }
                      //imple
                      return listaCopia;*/
                    List<BE_Medicamento_FE> listaCopia = new List<BE_Medicamento_FE>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<BE_Medicamento_FE> listaValidar = new List<BE_Medicamento_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<BE_Medicamento_FE>)dataValidacion;
                        }
                        if (listaValidar.Count > 0)
                        {
                            listaCopia.AddRange(listaValidar);
                        }

                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Medicamento_FE objAdd = new SS_HC_Medicamento_FE();
                            var objLista = new List<BE_Medicamento_FE>();
                            var objListaAnt = new List<SS_HC_Medicamento_FE>();
                            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                            objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            objEnt.IdPaciente = obj.IdPaciente;
                            objEnt.EpisodioClinico = obj.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            objEnt.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                            objEnt.Accion = "LISTAR";

                            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            objEnt.TipoMedicamento = 4;

                            objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            objListaAnt.AddRange(objListaAnt2);

                            if (objListaAnt.Count > 0)
                            {

                                int x = 0;
                                BE_Medicamento_FE obtemp;
                                String[] cadArray;
                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                                {
                                    if (intobj.Secuencia == obj.Id002)
                                    {
                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea;
                                        obtemp.Familia = intobj.Familia;
                                        obtemp.SubFamilia = intobj.SubFamilia;
                                        /**/
                                        cadArray = intobj.Version.Trim().Split('|');
                                        obtemp.LineaDescripcion = cadArray[0];
                                        obtemp.FamiliaDescripcion = cadArray[1];
                                        obtemp.SubFamiliaDescripcion = cadArray[2];
                                        obtemp.MedicamentoDescripcion = cadArray[3];
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        /////ADD 25/09
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                                        obtemp.Comentario = intobj.Comentario;//ADD
                                        obtemp.CodAlmacen = intobj.CodAlmacen; // angel 02/08/2019
                                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                                        {
                                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                                        }
                                        obtemp.Periodo = intobj.Periodo;
                                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        obtemp.Indicacion = intobj.Indicacion;
                                        obtemp.TipoReceta = intobj.TipoReceta;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.Accion = "NUEVO";
                                        listaCopia.Add(obtemp);
                                    }
                                    x = x + 1;
                                }

                            }
                        }
                    }
                    return listaCopia;

                }

                else if (codigoForm == "CCEP9919MEDICA")
                {

                    List<BE_Medicamento_FE> listaCopia = new List<BE_Medicamento_FE>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<BE_Medicamento_FE> listaValidar = new List<BE_Medicamento_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<BE_Medicamento_FE>)dataValidacion;
                        }
                        if (listaValidar.Count > 0)
                        {
                            listaCopia.AddRange(listaValidar);
                        }

                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            //SS_HC_Medicamento_FE objAdd = new SS_HC_Medicamento_FE();
                            //var objLista = new List<BE_Medicamento_FE>();
                            var objListaAnt = new List<SS_HC_Medicamento_FE>();
                            //var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                            //SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                            //objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            //objEnt.IdPaciente = obj.IdPaciente;
                            //objEnt.EpisodioClinico = obj.EpisodioClinico;
                            //objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            //objEnt.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                            //objEnt.Accion = "LISTAR";

                            //objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            //objEnt.TipoMedicamento = 4;

                            //objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            //objListaAnt.AddRange(objListaAnt2);


                            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                            objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            objEnt.IdPaciente = obj.IdPaciente;
                            objEnt.EpisodioClinico = obj.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            objEnt.Accion = "LISTAR";
                            objEnt.TipoMedicamento = getValorFiltroInt("1"); //para Medicina
                            /*objEnt.GrupoMedicamento = grupo;*/
                            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);



                            if (objListaAnt.Count > 0)
                            {

                                int x = 0;
                                BE_Medicamento_FE obtemp;
                                String[] cadArray;
                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                                {
                                    if (intobj.Secuencia == obj.Id002)
                                    {
                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea;
                                        obtemp.Familia = intobj.Familia;
                                        obtemp.SubFamilia = intobj.SubFamilia;
                                        /**/
                                        cadArray = intobj.Version.Trim().Split('|');
                                        obtemp.LineaDescripcion = cadArray[0];
                                        obtemp.FamiliaDescripcion = cadArray[1];
                                        obtemp.SubFamiliaDescripcion = cadArray[2];
                                        obtemp.MedicamentoDescripcion = cadArray[3];



                                        /***/
                                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        /////ADD 25/09
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                                        obtemp.Comentario = intobj.Comentario;//ADD
                                        obtemp.CodAlmacen = intobj.CodAlmacen; // angel 02/08/2019

                                        ////
                                        /* Session["NombreMedicoMed"] = intobj.UsuarioCreacion;*/
                                        /////ADD 22/11/16 OES
                                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                                        {
                                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                                        }

                                        ////
                                        obtemp.Periodo = intobj.Periodo;
                                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        obtemp.Indicacion = intobj.Indicacion;
                                        ///


                                        obtemp.TipoReceta = intobj.TipoReceta;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.Accion = "NUEVO";

                                        listaCopia.Add(obtemp);



                                        /* listaCopia.Add(objListaAnt[x]);*/
                                    }
                                    x = x + 1;
                                }

                            }

                            //  listaCopia = objListaAnt;
                        }
                    }
                    return listaCopia;

                }

                else if (codigoForm == "CCEPF201METERIALMED")
                {

                    List<BE_MedicamentoAlta_FE> listaCopia = new List<BE_MedicamentoAlta_FE>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<BE_MedicamentoAlta_FE> listaValidar = new List<BE_MedicamentoAlta_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<BE_MedicamentoAlta_FE>)dataValidacion;
                        }
                        if (listaValidar.Count > 0)
                        {
                            listaCopia.AddRange(listaValidar);
                        }


                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Medicamento_FE objAdd = new SS_HC_Medicamento_FE();
                            var objLista = new List<BE_Medicamento_FE>();
                            var objListaAnt = new List<SS_HC_Medicamento_FE>();
                            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                            objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            objEnt.IdPaciente = obj.IdPaciente;
                            objEnt.EpisodioClinico = obj.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            objEnt.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                            objEnt.Accion = "LISTAR";

                            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            objEnt.TipoMedicamento = 4;

                            objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            objListaAnt.AddRange(objListaAnt2);

                            if (objListaAnt.Count > 0)
                            {

                                int x = 0;
                                BE_MedicamentoAlta_FE obtemp;
                                String[] cadArray;
                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                                {
                                    if (intobj.Secuencia == obj.Id002)
                                    {
                                        obtemp = new BE_MedicamentoAlta_FE();
                                        obtemp.Linea = intobj.Linea;
                                        obtemp.Familia = intobj.Familia;
                                        obtemp.SubFamilia = intobj.SubFamilia;
                                        /**/
                                        cadArray = intobj.Version.Trim().Split('|');
                                        obtemp.LineaDescripcion = cadArray[0];
                                        obtemp.FamiliaDescripcion = cadArray[1];
                                        obtemp.SubFamiliaDescripcion = cadArray[2];
                                        obtemp.MedicamentoDescripcion = cadArray[3];



                                        /***/
                                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        /////ADD 25/09
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                                        obtemp.Comentario = intobj.Comentario;//ADD
                                        //   obtemp.CodAlmacen = intobj.CodAlmacen; // angel 02/08/2019

                                        ////
                                        /* Session["NombreMedicoMed"] = intobj.UsuarioCreacion;*/
                                        /////ADD 22/11/16 OES
                                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                                        {
                                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                                        }

                                        ////
                                        obtemp.Periodo = intobj.Periodo;
                                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        obtemp.Indicacion = intobj.Indicacion;
                                        ///


                                        obtemp.TipoReceta = intobj.TipoReceta;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.Accion = "NUEVO";

                                        listaCopia.Add(obtemp);



                                        /* listaCopia.Add(objListaAnt[x]);*/
                                    }
                                    x = x + 1;
                                }

                            }

                            //  listaCopia = objListaAnt;
                        }

                    }
                    return listaCopia;

                }

                else if (codigoForm == UTILES_MENSAJES.FORM_MEDICAMENTOSEPICRISIS_F2)
                {
                    List<BE_MedicamentoEpicrisis_FE> listaCopia = new List<BE_MedicamentoEpicrisis_FE>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<BE_MedicamentoEpicrisis_FE> listaValidar = new List<BE_MedicamentoEpicrisis_FE>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<BE_MedicamentoEpicrisis_FE>)dataValidacion;
                        }
                        if (listaValidar.Count > 0)
                        {
                            listaCopia.AddRange(listaValidar);
                        }

                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Medicamento_FE_Epi2 objAdd = new SS_HC_Medicamento_FE_Epi2();
                            var objLista = new List<BE_MedicamentoEpicrisis_FE>();
                            var objListaAnt = new List<SS_HC_Medicamento_FE>();
                            var objListaAnt2 = new List<SS_HC_Medicamento_FE_Epi2>();

                            SS_HC_Medicamento_FE_Epi2 objEnt = new SS_HC_Medicamento_FE_Epi2();
                            //objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            //objEnt.IdPaciente = obj.IdPaciente;
                            //objEnt.EpisodioClinico = obj.EpisodioClinico;
                            //objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;

                            //objEnt.UnidadReplicacion =ENTITY_GLOBAL.Instance.UnidadReplicacion ;
                            //objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            //objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            //objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //objEnt.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                            //objEnt.Accion = "LISTAREPI2";
                            //objListaAnt = SvcMedicamentoFE.MedicamentoListarEPICRISIS(objEnt);

                            SS_HC_Medicamento_FE objEntEEEE = new SS_HC_Medicamento_FE();
                            objEntEEEE.UnidadReplicacion = obj.UnidadReplicacion;
                            objEntEEEE.IdPaciente = obj.IdPaciente;
                            objEntEEEE.EpisodioClinico = obj.EpisodioClinico;
                            objEntEEEE.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            objEntEEEE.TipoMedicamento = 1;// tipoMed; //para micronutrientes
                            objEntEEEE.Accion = "LISTAR";

                            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEntEEEE);



                            // objEnt.TipoMedicamento = 1;

                            //objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);

                            //objListaAnt.AddRange(objListaAnt2);

                            if (objListaAnt.Count > 0)
                            {

                                int x = 0;
                                BE_MedicamentoEpicrisis_FE obtemp;
                                String[] cadArray;
                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                                {
                                    if (intobj.Secuencia == obj.Id002)
                                    {
                                        obtemp = new BE_MedicamentoEpicrisis_FE();
                                        obtemp.Linea = intobj.Linea;
                                        obtemp.Familia = intobj.Familia;
                                        obtemp.SubFamilia = intobj.SubFamilia;
                                        /**/
                                        cadArray = intobj.Version.Trim().Split('|');
                                        obtemp.LineaDescripcion = cadArray[0];
                                        obtemp.FamiliaDescripcion = cadArray[1];
                                        obtemp.SubFamiliaDescripcion = cadArray[2];
                                        obtemp.MedicamentoDescripcion = cadArray[3];
                                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        /////ADD 25/09
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                                        obtemp.Comentario = intobj.Comentario;//ADD
                                        obtemp.CodAlmacen = intobj.CodAlmacen; // angel 02/08/2019

                                        ////
                                        /* Session["NombreMedicoMed"] = intobj.UsuarioCreacion;*/
                                        /////ADD 22/11/16 OES
                                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                                        {
                                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                                        }
                                        ////
                                        obtemp.Periodo = intobj.Periodo;
                                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        obtemp.Indicacion = intobj.Indicacion;
                                        ///
                                        obtemp.TipoReceta = intobj.TipoReceta;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.Accion = "NUEVO";

                                        listaCopia.Add(obtemp);
                                        /* listaCopia.Add(objListaAnt[x]);*/
                                    }
                                    x = x + 1;
                                }

                            }
                            //  listaCopia = objListaAnt;
                        }
                    }
                    return listaCopia;
                }


                else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2)
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    return listaCopia;
                }
                //else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2)
                else if (codigoForm == UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2)/*EXAMEN DE APOYO AL DIAGNOSTICO*/
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        /**/
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;


                            LocalEntyMD.ACCION = "EXAMENESLIST";
                            LocalEntyMD.ValorCodigo4 = obj.UnidadReplicacion;
                            LocalEntyMD.ValorCodigo1 = Convert.ToString(obj.IdPaciente);
                            LocalEntyMD.ValorCodigo2 = Convert.ToString(obj.EpisodioClinico);
                            LocalEntyMD.ValorCodigo3 = Convert.ToString(obj.IdEpisodioAtencion);
                            LocalEntyMD.ValorCodigo5 = "S";

                            ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();




                            if (ListarMisc.Count > 0)
                            {

                                int x = 0;
                                foreach (var algo in ListarMisc)
                                {
                                    if (algo.CodigoElemento == Convert.ToString(obj.Id002))
                                    {
                                        listaCopia.Add(ListarMisc[x]);
                                    }
                                    x = x + 1;
                                }

                            }

                            //  listaCopia = objListaAnt;
                        }


                        /**/
                        /*     LocalEntyMD.ACCION = "EXAMENESLIST";
                             LocalEntyMD.ValorCodigo1 = listaCopiaForm[0].IdPaciente.ToString().Trim();
                             LocalEntyMD.ValorCodigo3 = listaCopiaForm[0].IdEpisodioAtencion.ToString().Trim();
                             LocalEntyMD.ValorCodigo2 = listaCopiaForm[0].EpisodioClinico.ToString().Trim();
                             LocalEntyMD.ValorCodigo4 = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                             LocalEntyMD.ValorCodigo5 = "S";
                             ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                             if (ListarMisc.Count > 0)
                             {

                                 int x = 0;
                                 foreach (var algo in ListarMisc)
                                 {
                                     if (algo.Secuencia == obj.Id002)
                                     {
                                         listaCopia.Add(ListarMisc[x]);
                                     }
                                     x = x + 1;
                                 }

                             }
                             */

                        //  listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }

                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF201_1" && codigoForm == "CCEPF201_1_EXA")/*EXAMEN DE APOYO AL DIAGNOSTICO*/
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        //List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        //if (dataValidacion != null)
                        //{
                        //    listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        //}


                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        /**/
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;


                            LocalEntyMD.ACCION = "EXAMENESLIST";
                            LocalEntyMD.ValorCodigo4 = obj.UnidadReplicacion;
                            LocalEntyMD.ValorCodigo1 = Convert.ToString(obj.IdPaciente);
                            LocalEntyMD.ValorCodigo2 = Convert.ToString(obj.EpisodioClinico);
                            LocalEntyMD.ValorCodigo3 = Convert.ToString(obj.IdEpisodioAtencion);
                            LocalEntyMD.ValorCodigo5 = "S";

                            ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();




                            if (ListarMisc.Count > 0)
                            {

                                int x = 0;
                                foreach (var algo in ListarMisc)
                                {
                                    if (algo.CodigoElemento == Convert.ToString(obj.Id002))
                                    {
                                        listaCopia.Add(ListarMisc[x]);
                                    }
                                    x = x + 1;
                                }

                            }
                        }
                    }
                    return listaCopia;
                }

                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF200" && codigoForm == "CCEPF200D")/*EXAMEN DE APOYO AL DIAGNOSTICO*/
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        /**/
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            String codigoCopy = (obj.Id001 != null ? obj.Id001.ToString() : "");
                            Boolean hallado = false;

                            if (!hallado)
                            {
                                String cadenas = "";
                                String[] cadArray;

                                SS_HC_Diagnostico_FE objFiltro = new SS_HC_Diagnostico_FE();
                                objFiltro.UnidadReplicacion = obj.UnidadReplicacion;
                                objFiltro.IdPaciente = obj.IdPaciente;
                                objFiltro.EpisodioClinico = obj.EpisodioClinico;
                                objFiltro.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                                objFiltro.Secuencia = (obj.Id002 != null ? Convert.ToInt32(obj.Id002) : 0);
                                objFiltro = SvcDiagnosticoFE.obtenerPorId(objFiltro);
                                if (objFiltro != null)
                                {
                                    MA_MiscelaneosDetalle objAdd = new MA_MiscelaneosDetalle();
                                    // objAdd.ValorCodigo1 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ValorCodigo5 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";

                                    cadArray = objAdd.ValorCodigo5.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();
                                    objAdd.ValorCodigo1 = cadenas;

                                    objAdd.ACCION = "NUEVO";
                                    objAdd.UltimoUsuario = "COPIA";//AUX
                                    //
                                    objAdd.CodigoElemento = "" + objFiltro.Secuencia;
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorCodigo2 = objFiltro.DeterminacionDiagnostica;
                                    objAdd.ValorCodigo3 = "" + (objFiltro.IdDiagnosticoPrincipal != null ? objFiltro.IdDiagnosticoPrincipal : 0);
                                    objAdd.ValorCodigo4 = objFiltro.GradoAfeccion;
                                    objAdd.ValorCodigo7 = (obj.Descripcion001 != null ? obj.Descripcion001.Trim() : "") + "|" + "[" + (obj.Id001 != null ? obj.Id001.ToString() : "") + "]";
                                    objAdd.ValorCodigo6 = objFiltro.Observacion;
                                    objAdd.ValorEntero5 = objFiltro.IndicadorPreExistencia;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;
                                    objAdd.ValorEntero6 = objFiltro.IndicadorCronico;

                                    listaCopia.Add(objAdd);
                                }


                            }
                        }
                    }
                    return listaCopia;
                }
                else if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF200" && codigoForm == "CCEPF200EXA")/*EXAMEN DE APOYO AL DIAGNOSTICO*/
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        /**/
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            LocalEntyMD.ACCION = "EXAMENESLIST";
                            LocalEntyMD.ValorCodigo4 = obj.UnidadReplicacion;
                            LocalEntyMD.ValorCodigo1 = Convert.ToString(obj.IdPaciente);
                            LocalEntyMD.ValorCodigo2 = Convert.ToString(obj.EpisodioClinico);
                            LocalEntyMD.ValorCodigo3 = Convert.ToString(obj.IdEpisodioAtencion);
                            LocalEntyMD.ValorCodigo5 = "S";
                            ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                            if (ListarMisc.Count > 0)
                            {

                                int x = 0;
                                foreach (var algo in ListarMisc)
                                {
                                    if (algo.CodigoElemento == Convert.ToString(obj.Id002))
                                    {
                                        listaCopia.Add(ListarMisc[x]);
                                    }
                                    x = x + 1;
                                }
                            }
                        }
                    }
                    return listaCopia;
                }


                else if (codigoForm == UTILES_MENSAJES.FORM_INTERCONSULTAS)
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        LocalEntyMD.ACCION = "INTERCONSUFE";
                        LocalEntyMD.ValorCodigo1 = listaCopiaForm[0].IdPaciente.ToString().Trim();
                        LocalEntyMD.ValorCodigo2 = listaCopiaForm[0].IdEpisodioAtencion.ToString().Trim();
                        LocalEntyMD.ValorCodigo3 = listaCopiaForm[0].EpisodioClinico.ToString().Trim();
                        LocalEntyMD.ValorCodigo4 = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                        LocalEntyMD.ValorCodigo5 = "S";
                        ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                        listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_2"
                        || codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_3"
                    )
                {
                    //VERIFICAR QUE TIPO DE MEDICAMENT ES
                    int tipoMed = 0;
                    if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_2"
                    )
                    {
                        tipoMed = 2;
                    }
                    else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_3")
                    {
                        tipoMed = 3;
                    }


                    List<SS_HC_Medicamento_FE> listaCopia = new List<SS_HC_Medicamento_FE>();
                    //PARA DIETAS Y MICRO NUT
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        foreach (V_EpisodioAtenciones obj in listaCopiaForm)
                        {

                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Medicamento_FE objAdd = new SS_HC_Medicamento_FE();
                            var objLista = new List<BE_Medicamento_FE>();
                            var objListaAnt = new List<SS_HC_Medicamento_FE>();

                            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                            objEnt.UnidadReplicacion = obj.UnidadReplicacion;
                            objEnt.IdPaciente = obj.IdPaciente;
                            objEnt.EpisodioClinico = obj.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = obj.IdEpisodioAtencion;
                            objEnt.TipoMedicamento = tipoMed; //para micronutrientes
                            objEnt.Accion = "LISTAR";

                            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);


                            if (objListaAnt.Count > 0)
                            {

                                int x = 0;
                                foreach (var algo in objListaAnt)
                                {
                                    if (algo.Secuencia == obj.Id002)
                                    {
                                        listaCopia.Add(objListaAnt[x]);
                                    }
                                    x = x + 1;
                                }

                            }


                            //  listaCopia = objListaAnt;
                        }
                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_ALERGIAS + "_MA"
                        || codigoForm == UTILES_MENSAJES.FORM_ALERGIAS + "_RE")
                {
                    string tipoMed = "";
                    if (codigoForm == UTILES_MENSAJES.FORM_ALERGIAS + "_MA"
                    )
                    {
                        tipoMed = "MA";
                    }
                    else if (codigoForm == UTILES_MENSAJES.FORM_ALERGIAS + "_RE")
                    {
                        tipoMed = "RE";
                    }
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        LocalEntyMD.ACCION = "ALERGIA";
                        LocalEntyMD.ValorCodigo1 = listaCopiaForm[0].IdPaciente.ToString().Trim();
                        LocalEntyMD.ValorCodigo2 = listaCopiaForm[0].IdEpisodioAtencion.ToString().Trim();
                        LocalEntyMD.ValorCodigo3 = listaCopiaForm[0].EpisodioClinico.ToString().Trim();
                        LocalEntyMD.ValorCodigo4 = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                        LocalEntyMD.ValorCodigo5 = tipoMed;
                        ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                        listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_FISIOLOGICOS)
                {
                    List<SS_HC_AntecedentesPersonalesFisiologicos_FE> listaCopia = new List<SS_HC_AntecedentesPersonalesFisiologicos_FE>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //    listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new SS_HC_AntecedentesPersonalesFisiologicos_FE();
                        var ListarMisc = new List<SS_HC_AntecedentesPersonalesFisiologicos_FE>();
                        LocalEntyMD.Accion = "LISTAR";
                        LocalEntyMD.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEntyMD.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEntyMD.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEntyMD.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                        //LocalEntyMD.ValorCodigo5 = "S";
                        ListarMisc = SvnAntecendentesPersonalesFisiologicosService.listarEntidad(LocalEntyMD);

                        listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_PATOLOGICOS_GE)
                {

                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new MA_MiscelaneosDetalle();
                        var ListarMisc = new List<MA_MiscelaneosDetalle>();
                        LocalEntyMD.ACCION = "PATOGRAL";
                        LocalEntyMD.ValorCodigo1 = listaCopiaForm[0].IdPaciente.ToString().Trim();
                        LocalEntyMD.ValorCodigo3 = listaCopiaForm[0].IdEpisodioAtencion.ToString().Trim();
                        LocalEntyMD.ValorCodigo2 = listaCopiaForm[0].EpisodioClinico.ToString().Trim();
                        LocalEntyMD.ValorCodigo5 = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                        // LocalEntyMD.ValorCodigo5 = tipoMed;
                        ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                        listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_FISIOLOGICOS_PE)
                {
                    List<SS_HC_Ant_Fisiologico_Pediatrico_FE> listaCopia = new List<SS_HC_Ant_Fisiologico_Pediatrico_FE>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //    listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }


                        var LocalEntyMD = new SS_HC_Ant_Fisiologico_Pediatrico_FE();
                        var ListarMisc = new List<SS_HC_Ant_Fisiologico_Pediatrico_FE>();
                        LocalEntyMD.Accion = "LISTAR";
                        LocalEntyMD.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEntyMD.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEntyMD.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEntyMD.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                        //LocalEntyMD.ValorCodigo5 = "S";
                        ListarMisc = SvcAntecedentesFisiologicoPediatricoFE.listarEntidad(LocalEntyMD);

                        listaCopia = ListarMisc;

                    }
                    return listaCopia;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_1"
                        || codigoForm == UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_2")
                {
                    string tipoMed = "";
                    if (codigoForm == UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_1"
                    )
                    {
                        List<SS_HC_Anamnesis_AFAM_FE> listaCopia = new List<SS_HC_Anamnesis_AFAM_FE>();
                        //imple
                        if (listaCopiaForm != null)
                        {
                            List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                            if (dataValidacion != null)
                            {
                                // listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                            }


                            var LocalEntyMD = new SS_HC_Anamnesis_AFAM_FE();
                            var ListarMisc = new List<SS_HC_Anamnesis_AFAM_FE>();
                            LocalEntyMD.Accion = "LISTAR";
                            LocalEntyMD.IdPaciente = listaCopiaForm[0].IdPaciente;
                            LocalEntyMD.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                            LocalEntyMD.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                            LocalEntyMD.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();
                            // LocalEntyMD.ValorCodigo5 = tipoMed;
                            ListarMisc = SvcAnamnesisAFFEService.AnamnesisAFListar(LocalEntyMD).ToList();

                            listaCopia = ListarMisc;

                        }
                        return listaCopia;
                    }
                    else if (codigoForm == UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_2")
                    {
                        List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                        //imple
                        if (listaCopiaForm != null)
                        {
                            List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                            if (dataValidacion != null)
                            {
                                //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                            }


                            var LocalEntyMD = new MA_MiscelaneosDetalle();
                            var ListarMisc = new List<MA_MiscelaneosDetalle>();
                            LocalEntyMD.ACCION = "ANTEC_FAMILIARES_ALT_FE";
                            LocalEntyMD.ValorCodigo1 = listaCopiaForm[0].IdPaciente.ToString().Trim();
                            LocalEntyMD.ValorCodigo3 = listaCopiaForm[0].IdEpisodioAtencion.ToString().Trim();
                            LocalEntyMD.ValorCodigo2 = listaCopiaForm[0].EpisodioClinico.ToString().Trim();
                            LocalEntyMD.ValorCodigo4 = listaCopiaForm[0].UnidadReplicacion.ToString().Trim();

                            LocalEntyMD.ValorNumerico = Convert.ToDouble((int)Session["secuenciaFamilia"] != null ? (int)Session["secuenciaFamilia"] : 0);

                            //LocalEntyMD.ValorCodigo5 = tipoMed;
                            ListarMisc = SvcMiscelaneos.GetUpListadoServicios(LocalEntyMD).ToList();

                            listaCopia = ListarMisc;

                        }
                        return listaCopia;
                    }

                }



            }
            return null;
        }
        /***************************/
        public Object getObjetoCabeceras_de_Historial(String data,
        string accion, string codigoForm, Object dataValidacion
        )
        {
            Log.Information("HClinicaControllerSup - getObjetoCabeceras_de_Historial - Entrar");


            if (accion == "PEGAR" && data != null)
            {
                List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<V_EpisodioAtenciones>));
                //List<V_EpisodioAtenciones> dataSave = null;
                Session["DATA_COPIA_FORM"] = data;
                //PARA DIAGNóSTICOS
                if (codigoForm == UTILES_MENSAJES.FORM_DIAGNOSTICO_F1)
                {

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_MEDICAMENTOS_F1)
                {

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_2"
                        || codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1 + "_3"
                    )
                {

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F1)////EVOLUCION OBJETIVA
                {

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_DIAGNOSTICO_F2)
                {

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_MEDICAMENTOS_F2)
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    var ListarCab = new List<SS_HC_Medicamento_FE>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_Medicamento_FE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        LocalEnty.TipoMedicamento = 1;
                        ListarCab = SvcMedicamentoFE.MedicamentoListar(LocalEnty);



                    }
                    return ListarCab;

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2)
                {

                }
                //else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2)
                else if (codigoForm == UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2)/*EXAMEN DE APOYO AL DIAGNOSTICO*/
                {
                    List<MA_MiscelaneosDetalle> listaCopia = new List<MA_MiscelaneosDetalle>();
                    var ListarCab = new List<SS_HC_ExamenSolicitadoFE>();
                    //imple
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_ExamenSolicitadoFE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        ListarCab = SvcExamenSolicitadoServiceFE.Examen_Listar(LocalEnty).ToList();



                    }
                    return ListarCab;
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2)
                {
                }
                else if (codigoForm == UTILES_MENSAJES.FORM_INTERCONSULTAS)
                {
                    var ListarCab = new List<SS_HC_InterConsulta_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_InterConsulta_FE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        ListarCab = SvcInterConsultaFE.InterConsultaListar(LocalEnty).ToList();



                    }
                    return ListarCab;

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_ALERGIAS)
                {
                    var ListarCab = new List<SS_HC_Alergia_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_Alergia_FE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        ListarCab = SvcAlergiaService.Alergia_Listar(LocalEnty).ToList();



                    }
                    return ListarCab;

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_PATOLOGICOS_GE)
                {
                    var ListarCab = new List<SS_HC_Anam_AP_PatologicosGenerales_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_Anam_AP_PatologicosGenerales_FE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        ListarCab = SvcPatologicosGeneralesFEService.listarEntidad(LocalEnty);



                    }
                    return ListarCab;

                }
                else if (codigoForm == UTILES_MENSAJES.FORM_ANTECEDENTES_FA)
                {
                    var ListarCab = new List<SS_HC_Anamnesis_AFAM_CAB_FE>();
                    if (listaCopiaForm != null)
                    {
                        List<MA_MiscelaneosDetalle> listaValidar = new List<MA_MiscelaneosDetalle>();
                        if (dataValidacion != null)
                        {
                            //listaValidar = (List<MA_MiscelaneosDetalle>)dataValidacion;
                        }
                        /******/
                        var LocalEnty = new SS_HC_Anamnesis_AFAM_CAB_FE();

                        LocalEnty.IdPaciente = listaCopiaForm[0].IdPaciente;
                        LocalEnty.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = listaCopiaForm[0].IdEpisodioAtencion;
                        LocalEnty.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion;
                        LocalEnty.Accion = "LISTAR";
                        ListarCab = SvcAnamnesisAFFEService.listarEntidad(LocalEnty).ToList();



                    }
                    return ListarCab;

                }

            }
            return null;
        }
        /**************************/
        public String getCodigoElementoForm(string segmentoCadena, string codigoForm)
        {
            Log.Information("HClinicaControllerSup - getCodigoElementoForm - Entrar");

            String codigo = "";
            try
            {
                if (segmentoCadena.Contains("|"))
                {
                    String[] vectorCadena = segmentoCadena.Split('|');
                    if (vectorCadena.Length > 1)
                    {
                        codigo = vectorCadena[1];
                    }
                    codigo = codigo.Replace("[", "");
                    codigo = codigo.Replace("]", "");
                }
                return codigo;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        /**Prepara los Códigos Formatos VIEW para recueparar la vista anterior*/
        public Boolean getIndicaFormatosCopiar(String codigoFormato)
        {
            Log.Information("HClinicaControllerSup - getIndicaFormatosCopiar - Entrar");

            Boolean result = false;
            if (codigoFormato != null)
            {
                //MEJORAR **
                if (codigoFormato == UTILES_MENSAJES.FORM_ANAMNESIS_EA_F1)
                {
                    result = false;//ESTE NOVA
                }
                else if (codigoFormato == UTILES_MENSAJES.FORM_DIAGNOSTICO_F1)
                {
                    result = true;
                }
                else if (codigoFormato == UTILES_MENSAJES.FORM_MEDICAMENTOS_F1)
                {
                    result = true;
                }
                else if (codigoFormato == UTILES_MENSAJES.FORM_DIETAS_MNUT_F1)
                {
                    result = true;
                }
                else if (codigoFormato == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F1)
                {
                    result = true;
                }
                else if (codigoFormato == UTILES_MENSAJES.FORM_DIAGNOSTICO_F2
                     || codigoFormato == UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2
                     || codigoFormato == UTILES_MENSAJES.FORM_NOTAENFERMERIA

                    || codigoFormato == UTILES_MENSAJES.FORM_MEDICAMENTOS_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_MEDICAMENTOS_NO_FARMACOLOGICOS_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_MED_EPICRISIS201_3_F2

                    || codigoFormato == UTILES_MENSAJES.FORM_MED_EPICRISIS201_1_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_INFORMEALTA_TRATAMIENTO_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_RECETAGRUPAL_F2


                    || codigoFormato == UTILES_MENSAJES.FORM_MED_INFORMEALTA_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_DIETAS_MNUT_F2
                    || codigoFormato == UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2
                    )
                {
                    result = true;
                }

            }
            return result;
        }

        /**TEST FORM**/
        public System.Web.Mvc.ActionResult CCEP0003_View_X()
        {
            Log.Information("HClinicaControllerSup - CCEP0003_View_X - Entrar");

            try
            {
                SS_HC_Anamnesis_EA objModel = new SS_HC_Anamnesis_EA();

                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                /*
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                 */
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                //setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");

                return View("CCEP0003_PRUEBA_View", objModel);
            }
            catch (Exception ex)
            {
                return showMsgTratamientoExcepcion(ex, "TEST");
            }
        }

        /**PARA EL LISATDO DE LA BITACORA*/
        public StoreResult ArbolMacroProcesosBitacora(string node, string filtro)
        {
            Log.Information("HClinicaControllerSup - ArbolMacroProcesosBitacora - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            var objVistaSeguridad = new SS_CHE_VistaSeguridad();


            if (Convert.ToInt32(ENTITY_GLOBAL.Instance.IdMedicoaudi) != 0)
            {
                var Listar = new List<SG_Agente>();
                SG_Agente objAgente = new SG_Agente();
                objAgente.ACCION = "LISTARPAG_AUDITORIA";
                objAgente.IdEmpleado = ENTITY_GLOBAL.Instance.IdMedicoaudi;

                Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                Boolean validoLogin = false;
                if (Listar.Count > 0)
                {
                    validoLogin = true;
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }

                if (objAgente != null)
                {

                    //  ENTITY_GLOBAL.Instance.USUARIO = objAgente.UsuarioCreacion;
                    ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA = objAgente.IdAgente;

                }

                if (node == "root")
                {
                    SS_HC_EpisodioAtencion objEpisodio = new SS_HC_EpisodioAtencion();
                    objEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    //OBS: se filtra por tipo de ATENCIÓN
                    Nullable<int> TipoAtencion = null;
                    if (Session["TIPOATENCION_ACTUAL"] != null)
                    {
                        TipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                    }
                    objEpisodio.TipoAtencion = TipoAtencion;
                    objEpisodio.Accion = "LISTAR";
                    objEpisodio.Estado = UTILES_MENSAJES.ESTADO_EPI_ENATENCION;
                    Dictionary<String, String> DICT_ATENCION = new Dictionary<String, String>();
                    List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(objEpisodio, 0, 0);
                    foreach (SS_HC_EpisodioAtencion resulenti in listaEpi)
                    {
                        if (!DICT_ATENCION.ContainsKey("" + resulenti.CodigoOA))
                        {
                            DICT_ATENCION["" + resulenti.CodigoOA] = resulenti.CodigoOA;
                        }
                    }
                    foreach (var obj in DICT_ATENCION)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Leaf = false;
                        asyncNode.Icon = Icon.Note;

                        asyncNode.Text = "OA: " + obj.Value;
                        asyncNode.NodeID = "0|" +     //[0] nivel
                                           obj.Value       //[1]
                                        ;
                        foreach (var resulenti in listaEpi)
                        {
                            if (obj.Value == resulenti.CodigoOA)
                            {
                                string codigoEpi = UTILES_MENSAJES.getCodigoTransaccionHCE((long)(resulenti.FlagFirma != null ? resulenti.FlagFirma : 0),
                                       resulenti.EpisodioAtencion,/*resulenti.EpisodioClinico*/ resulenti.IdEpisodioAtencion, resulenti.IdPaciente, "");

                                Node asyncNodeHijo = new Node();
                                asyncNodeHijo.Leaf = false;
                                asyncNodeHijo.Icon = Icon.NoteGo;
                                asyncNodeHijo.Text = "Atención:" + codigoEpi + ": " + (resulenti.FechaRegistro != null ? Convert.ToDateTime(resulenti.FechaRegistro).ToString("yyyy-MM-dd HH:mm") : " [fecha no especif.]") + "  /  " + resulenti.ObservacionFirma + " / " + resulenti.ObservacionOrden;
                                asyncNodeHijo.NodeID = "1|" +     //[0] nivel
                                                    resulenti.EpisodioClinico + "|" +      //[1]
                                                   resulenti.EpisodioAtencion + "|" + //resulenti.IdEpisodioAtencion + "|" +       //[2]
                                                    resulenti.IdOrdenAtencion + "|" +      //[3]
                                                    resulenti.LineaOrdenAtencion        //[4]                                  
                                                    ;
                                asyncNode.Children.Add(asyncNodeHijo);
                                //asyncNodeHijos.Add(asyncNodeHijo);                              
                            }
                        }
                        nodes.Add(asyncNode);
                    }
                }
                else
                {
                    if (node.Length > 0)
                    {
                        string nivel = "";
                        string idEpiClinico = "";
                        string idEpiAtencion = "";
                        string idOa = "";
                        string lineaOa = "";
                        string idOpcion = "";
                        string[] vector = node.Split('|');
                        if (vector.Length > 0)
                        {
                            nivel = vector[0];
                            if (vector.Length > 4)
                            {
                                idEpiClinico = vector[1];
                                idEpiAtencion = vector[2];
                                idOa = vector[3];
                                lineaOa = vector[4];
                                if (vector.Length > 5)
                                {
                                    idOpcion = vector[5];
                                }
                            }


                            if (nivel == "0")
                            {
                                //NO HACER NADA
                            }
                            else
                            {
                                /***********FILTROS ****/

                                //OBS:ADD de seguridad
                                objVistaSeguridad.CadenaRecursividad = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objVistaSeguridad.IdEmpleado = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objVistaSeguridad.IndicadorPrioridad = Convert.ToInt32(idEpiClinico);
                                objVistaSeguridad.Version = "" + idEpiAtencion;

                                ////////////////
                                if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
                                {
                                    objVistaSeguridad.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
                                }
                                if (Session["TIPOATENCION_ACTUAL"] != null)
                                {
                                    objVistaSeguridad.idTipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                                }
                                //////////////
                                //////ADD PARA CONFIGURACION DE ASIGNACIONES
                                VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = null;
                                if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                                {
                                    vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                                    objVistaSeguridad.IdGrupo = vistaGenSelec.IdEspecialidad;//AUX 
                                }
                                objVistaSeguridad.Compania = ENTITY_GLOBAL.Instance.Compania;
                                if (ENTITY_GLOBAL.Instance.Establecimiento != null)
                                {
                                    objVistaSeguridad.IdOrganizacion = Convert.ToInt32(ENTITY_GLOBAL.Instance.Establecimiento);
                                }
                                if (Session["IdUnidadServicio_ACTUAL"] != null)
                                {
                                    objVistaSeguridad.IdObjetoAsociado = (int)Session["IdUnidadServicio_ACTUAL"];
                                }
                                objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                                objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                                objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE_AUDITORIA);
                                objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                                objVistaSeguridad.Accion = "LISTAPROCESOS";
                                objVistaSeguridad.Nivel = 2;

                                List<SS_CHE_VistaSeguridad> resulListado = new List<SS_CHE_VistaSeguridad>();
                                List<SS_CHE_VistaSeguridad> resulListadoform = new List<SS_CHE_VistaSeguridad>();

                                if (nivel == "1")
                                {
                                    objVistaSeguridad.Accion = "LISTAPROCESOS";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(ENTITY_GLOBAL.Instance.OPCION_PADRE != null ? ENTITY_GLOBAL.Instance.OPCION_PADRE : "0");
                                    resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                }
                                else
                                {

                                    objVistaSeguridad.Accion = "LISTAPROCESOS";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(idOpcion.Length > 0 ? idOpcion : "0");
                                    resulListadoform = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                    foreach (var resulenti in resulListadoform)
                                    {

                                        if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                        {

                                        }
                                        else
                                        {
                                            resulListado.Add(resulenti);
                                        }
                                    }

                                    objVistaSeguridad.Accion = "LISTAPROCESOSBITACORA";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(idOpcion.Length > 0 ? idOpcion : "0");
                                    resulListadoform = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                    foreach (var resulenti in resulListadoform)
                                    {
                                        resulListado.Add(resulenti);
                                    }
                                }
                                /***********************/
                                //  resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                foreach (var resulenti in resulListado)
                                {
                                    Node asyncNode = new Node();
                                    asyncNode.Text = resulenti.NombreOpcion;
                                    //asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                                    asyncNode.NodeID = "2|" +     //[0] nivel
                                                        idEpiClinico + "|" +      //[1]
                                                        idEpiAtencion + "|" +       //[2]
                                                        idOa + "|" +      //[3]
                                                        lineaOa + "|" +        //[4]    
                                                        resulenti.IdOpcion.ToString().Trim(); //[5]    
                                    ;

                                    asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                                    asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                                    if (resulenti.TipoIcono != null)
                                    {
                                        if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                        if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                                    }

                                    nodes.Add(asyncNode);
                                }
                            }
                        }
                    }
                }
            }
            else
            {


                if (node == "root")
                {
                    SS_HC_EpisodioAtencion objEpisodio = new SS_HC_EpisodioAtencion();
                    objEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    //OBS: se filtra por tipo de ATENCIÓN
                    Nullable<int> TipoAtencion = null;
                    if (Session["TIPOATENCION_ACTUAL"] != null)
                    {
                        TipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                    }
                    //   objEpisodio.TipoAtencion = TipoAtencion;
                    objEpisodio.Accion = objEpisodio.Accion = ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" ? "LISTARTRIAJE" : "LISTAR";
                    //  objEpisodio.TipoAtencion = ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA" ? 3 : 1;
                    //objEpisodio.Accion = "LISTAR";
                    objEpisodio.Estado = UTILES_MENSAJES.ESTADO_EPI_ENATENCION;
                    Dictionary<String, String> DICT_ATENCION = new Dictionary<String, String>();
                    // List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(objEpisodio, 0, 0);
                    List<SS_HC_EpisodioAtencion> listaEpi;
                    try
                    {
                        listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(objEpisodio, 0, 0);

                        List<SS_HC_EpisodioAtencion> filteredList = listaEpi.Where(x => x.CodigoOA == "0002526678").ToList();
                        foreach (SS_HC_EpisodioAtencion resulenti in listaEpi)
                        {
                            if (!DICT_ATENCION.ContainsKey("" + resulenti.CodigoOA))
                            {
                                DICT_ATENCION["" + resulenti.CodigoOA] = resulenti.CodigoOA;
                            }
                        }
                        foreach (var obj in DICT_ATENCION)
                        {
                            Node asyncNode = new Node();
                            asyncNode.Leaf = false;
                            asyncNode.Icon = Icon.Note;

                            asyncNode.Text = ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" ? "OT: " + obj.Value : "OA: " + obj.Value;
                            asyncNode.NodeID = "0|" +     //[0] nivel
                                               obj.Value       //[1]
                                            ;
                            foreach (var resulenti in listaEpi)
                            {
                                if (obj.Value == resulenti.CodigoOA)
                                {
                                    string codigoEpi;
                                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
                                    {
                                        codigoEpi = UTILES_MENSAJES.getCodigoTransaccionTriajeHCE((long)(resulenti.FlagFirma != null ? resulenti.FlagFirma : 0),
                                            resulenti.EpisodioAtencion,/*resulenti.EpisodioClinico*/ resulenti.IdEpisodioAtencion, resulenti.IdPaciente, "");
                                    }
                                    else
                                    {
                                        //codigoEpi = UTILES_MENSAJES.getCodigoTransaccionHCE((long)(resulenti.FlagFirma != null ? resulenti.FlagFirma : 0),
                                        //  resulenti.TipoAtencion == 3 ? resulenti.IdEpisodioAtencion : resulenti.EpisodioAtencion,/*resulenti.EpisodioClinico*/ resulenti.IdEpisodioAtencion, resulenti.IdPaciente, "");

                                        codigoEpi = UTILES_MENSAJES.getCodigoTransaccionHCE((long)(resulenti.FlagFirma != null ? resulenti.FlagFirma : 0),
                                            resulenti.TipoAtencion == 2 ? resulenti.IdEpisodioAtencion : resulenti.TipoAtencion == 3 ? resulenti.IdEpisodioAtencion : resulenti.EpisodioAtencion,/*resulenti.EpisodioClinico*/ resulenti.IdEpisodioAtencion, resulenti.IdPaciente, "");


                                    }


                                    var tipoate = "";

                                    if (resulenti.TipoAtencion == 1)
                                    {

                                        tipoate = "AMBULATORIO";
                                    }
                                    else if (resulenti.TipoAtencion == 2)
                                    {
                                        tipoate = "EMERGENCIA";
                                    }
                                    else if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
                                    {
                                        tipoate = "TRIAJE";
                                    }
                                    else if (resulenti.TipoAtencion == 3)
                                    {

                                        tipoate = "HOSPITALIZACIÓN";
                                    }


                                    Node asyncNodeHijo = new Node();
                                    asyncNodeHijo.Leaf = false;
                                    asyncNodeHijo.Icon = Icon.NoteGo;
                                    asyncNodeHijo.Text = tipoate + " " + "Atención:" + codigoEpi + ": " + (resulenti.FechaRegistro != null ? Convert.ToDateTime(resulenti.FechaRegistro).ToString("yyyy-MM-dd HH:mm") : " [fecha no especif.]") + "  /  " + resulenti.ObservacionFirma + " / " + resulenti.ObservacionOrden;
                                    asyncNodeHijo.NodeID = "1|" +     //[0] nivel
                                                        resulenti.EpisodioClinico + "|" +      //[1]
                                        //  (resulenti.TipoAtencion == 3 ? resulenti.IdEpisodioAtencion : resulenti.EpisodioAtencion) + "|" + //resulenti.IdEpisodioAtencion + "|" +       //[2]
                                                     (resulenti.TipoAtencion == 2 ? resulenti.IdEpisodioAtencion : resulenti.TipoAtencion == 3 ? resulenti.IdEpisodioAtencion : resulenti.EpisodioAtencion) + "|" + //resulenti.IdEpisodioAtencion + "|" +       //[2]  
                                                     resulenti.IdOrdenAtencion + "|" +      //[3]
                                                        resulenti.LineaOrdenAtencion        //[4]                                  
                                                        ;
                                    asyncNode.Children.Add(asyncNodeHijo);
                                    //asyncNodeHijos.Add(asyncNodeHijo);                              
                                }
                            }
                            nodes.Add(asyncNode);
                        }
                    }
                    catch (Exception e)
                    {
                        Log.Error(e, e.Message);
                    }


                }
                else
                {
                    if (node.Length > 0)
                    {
                        string nivel = "";
                        string idEpiClinico = "";
                        string idEpiAtencion = "";
                        string idOa = "";
                        string lineaOa = "";
                        string idOpcion = "";
                        string[] vector = node.Split('|');
                        if (vector.Length > 0)
                        {
                            nivel = vector[0];
                            if (vector.Length > 4)
                            {
                                idEpiClinico = vector[1];
                                idEpiAtencion = vector[2];
                                idOa = vector[3];
                                lineaOa = vector[4];
                                if (vector.Length > 5)
                                {
                                    idOpcion = vector[5];
                                }
                            }


                            if (nivel == "0")
                            {
                                //NO HACER NADA
                            }
                            else
                            {
                                /***********FILTROS ****/

                                //OBS:ADD de seguridad
                                objVistaSeguridad.CadenaRecursividad = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objVistaSeguridad.IdEmpleado = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objVistaSeguridad.IndicadorPrioridad = Convert.ToInt32(idEpiClinico);
                                objVistaSeguridad.Version = "" + idEpiAtencion;

                                ////////////////
                                if (Session["TIPOTRABAJADOR_ACTUAL"] != null)
                                {
                                    objVistaSeguridad.TipoTrabajador = (String)Session["TIPOTRABAJADOR_ACTUAL"];
                                }
                                if (Session["TIPOATENCION_ACTUAL"] != null)
                                {
                                    //      objVistaSeguridad.idTipoAtencion = (int)Session["TIPOATENCION_ACTUAL"];
                                }
                                //////////////
                                //////ADD PARA CONFIGURACION DE ASIGNACIONES
                                VW_ATENCIONPACIENTE_GENERAL vistaGenSelec = null;
                                if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null && ENTITY_GLOBAL.Instance.COD_BANDEJA != "TRIAJE")
                                {
                                    vistaGenSelec = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                                    objVistaSeguridad.IdGrupo = vistaGenSelec.IdEspecialidad;//AUX 
                                }
                                objVistaSeguridad.Compania = ENTITY_GLOBAL.Instance.Compania;
                                if (ENTITY_GLOBAL.Instance.Establecimiento != null)
                                {
                                    objVistaSeguridad.IdOrganizacion = Convert.ToInt32(ENTITY_GLOBAL.Instance.Establecimiento);
                                }
                                if (Session["IdUnidadServicio_ACTUAL"] != null)
                                {
                                    objVistaSeguridad.IdObjetoAsociado = (int)Session["IdUnidadServicio_ACTUAL"];
                                }
                                objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                                objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                                objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                                objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                                objVistaSeguridad.Accion = "LISTAPROCESOS";
                                objVistaSeguridad.Nivel = 2;

                                List<SS_CHE_VistaSeguridad> resulListado = new List<SS_CHE_VistaSeguridad>();
                                List<SS_CHE_VistaSeguridad> resulListadoform = new List<SS_CHE_VistaSeguridad>();

                                if (nivel == "1")
                                {
                                    objVistaSeguridad.Accion = "LISTAPROCESOS";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(ENTITY_GLOBAL.Instance.OPCION_PADRE != null ? ENTITY_GLOBAL.Instance.OPCION_PADRE : "0");
                                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" && objVistaSeguridad.IdOpcionPadre != 3822)
                                    {
                                        objVistaSeguridad.IdOpcionPadre = 3822;
                                    }
                                    resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                }
                                else
                                {



                                    objVistaSeguridad.Accion = "LISTAPROCESOSBITACORA";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(idOpcion.Length > 0 ? idOpcion : "0");
                                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE" && objVistaSeguridad.IdOpcionPadre != 3822)
                                    {
                                        objVistaSeguridad.IdOpcionPadre = 3823;
                                        objVistaSeguridad.Plataforma = "TRIAJE";
                                    }
                                    resulListadoform = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                    foreach (var resulenti in resulListadoform)
                                    {
                                        resulListado.Add(resulenti);
                                    }

                                    objVistaSeguridad.Accion = "LISTAPROCESOS";
                                    objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(idOpcion.Length > 0 ? idOpcion : "0");
                                    resulListadoform = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                    foreach (var resulenti in resulListadoform)
                                    {

                                        if (!string.IsNullOrEmpty(resulenti.CodigoFormato))
                                        {

                                        }
                                        else
                                        {
                                            resulListado.Add(resulenti);
                                        }
                                    }
                                }
                                /***********************/
                                //  resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                                foreach (var resulenti in resulListado)
                                {
                                    Node asyncNode = new Node();
                                    asyncNode.Text = resulenti.NombreOpcion;
                                    //asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                                    asyncNode.NodeID = "2|" +     //[0] nivel
                                                        idEpiClinico + "|" +      //[1]
                                                        idEpiAtencion + "|" +       //[2]
                                                        idOa + "|" +      //[3]
                                                        lineaOa + "|" +        //[4]    
                                                        resulenti.IdOpcion.ToString().Trim(); //[5]    
                                    ;

                                    asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                                    asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                                    if (resulenti.TipoIcono != null)
                                    {
                                        if (resulenti.TipoIcono == 5) asyncNode.Icon = Icon.PageGreen;
                                        if (resulenti.TipoIcono == 6) asyncNode.Icon = Icon.PageRed;
                                    }

                                    nodes.Add(asyncNode);
                                }
                            }
                        }
                    }
                }


            }




            //ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION = 1;
            return this.Store(nodes);
        }

        /**Cargar un formato seleccionado de la bitácora, sin alterar las variables de la atención actual*/
        public System.Web.Mvc.ActionResult LoadFormatoBitacora(string containerId, string node)
        {
            Log.Information("HClinicaControllerSup - LoadFormatoBitacora - Entrar");
            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 0)
            {
                ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
                ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
                ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                //ADD
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            }

            string idOpcion = "";
            //SI ESTÁ ACTIVO EL NIVEL HISTÓRICO
            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
            {
                string nivel = "";
                string idEpiClinico = "";
                string idEpiAtencion = "";
                string idOa = "";
                string lineaOa = "";

                string[] vector = node.Split('|');
                if (vector.Length > 0)
                {
                    nivel = vector[0];
                    if (vector.Length > 4)
                    {
                        idEpiClinico = vector[1];
                        idEpiAtencion = vector[2];
                        idOa = vector[3];
                        lineaOa = vector[4];
                        if (vector.Length > 5)
                        {
                            idOpcion = vector[5];
                        }
                    }
                }

                ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioClinico = Convert.ToInt32(idEpiClinico.Length > 0 ? idEpiClinico : "0");
                ENTITY_GLOBAL.Instance.EpisodioAtencion = Convert.ToInt32(idEpiAtencion.Length > 0 ? idEpiAtencion : "0");
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                //ADD
                //ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP;                
            }

            if (idOpcion.Length > 0)
            {
                return LoadFormatos(containerId, idOpcion);
            }
            else
            {
                return this.Direct();
            }
        }

        // public System.Web.Mvc.ActionResult verAcompanante(String MODO)
        // {
        //     var objModel = new SS_HC_RegistroAcompanante();

        //     objModel.Accion = MODO;
        //     objModel.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
        //     objModel.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
        //     objModel.Nombres = Convert.ToString(ENTITY_GLOBAL.Instance.NombreCompletoPaciente);

        //     //aqui me quede

        //     return crearWindowRegistro("Acompanante/VerAcompanante", objModel, "");
        //     //return View("UsuarioRegistro", LocalEnty);

        // }


        // public System.Web.Mvc.ActionResult getGrillaVerAcompanantes(int start, int limit,
        //string idpaciente, string tipoBuscar)
        // {
        //     ENTITY_GLOBAL.Instance.GRUPO = "";
        //     var Listar = new List<SS_HC_RegistroAcompanante>();

        //     var LocalEnty = new SS_HC_RegistroAcompanante();

        //     LocalEnty.IdPaciente = Convert.ToInt32(idpaciente);

        //     int inicio = (start == 0 ? start : start + 1);
        //     int final = start + limit;


        //     LocalEnty.Accion = "LISTARPORPACIENTE";
        //     Listar = SvcRegistroAcompanante.listarRegistroAcompanante(LocalEnty,inicio,final);

        //     return this.Store(Listar);
        // }


        /******************************************************************************************/




        public System.Web.Mvc.ActionResult RefreshProgress()
        {
            Log.Information("HClinicaControllerSup - RefreshProgress - Entrar");

            object progress = HttpContext.Cache["Task1"];
            if (progress != null)
            {
                X.Msg.UpdateProgress(((int)progress) / 5f, string.Format("Step {0} of {1}...", progress, 5));
            }
            else
            {
                this.GetCmp<TaskManager>("TaskManager1").StopTask("Task1");
                X.MessageBox.Hide();

                //X.AddScript("Ext.Msg.notify('Done', 'Your items were loaded!');");
            }

            return this.Direct();
        }

        /**PARA EL LISATDO DE LA BITACORA*/

        private void StartLongAction()
        {
            Log.Information("HClinicaControllerSup - StartLongAction - Entrar");

            HttpContext.Cache["Task1"] = 0;
            ThreadPool.QueueUserWorkItem(LongAction);

            this.GetCmp<TaskManager>("TaskManager1").StartTask("Task1");
        }

        private void LongAction(object state)
        {
            Log.Information("HClinicaControllerSup - LongAction - Entrar");

            for (int i = 0; i < 5; i++)
            {
                Thread.Sleep(500);
                HttpContext.Cache["Task1"] = i + 1;
            }
            HttpContext.Cache.Remove("Task1");
        }
        public System.Web.Mvc.ActionResult Button5_Click()
        {
            Log.Information("HClinicaControllerSup - Button5_Click - Entrar");

            X.Msg.Show(new MessageBoxConfig
            {
                Title = "Espere Por Favor",
                Message = "Cargando...",
                ProgressText = "Inicializando...",
                Width = 300,
                Progress = true,
                Closable = false
            });
            StartLongAction();
            return this.Direct();
        }




        public System.Web.Mvc.ActionResult LoadFormatoBita(string containerId, string node)
        {
            Log.Information("HClinicaControllerSup - LoadFormatoBita - Entrar");

            Button5_Click();
            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 0)
            {
                ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
                ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
                ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                //ADD
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1;
            }

            string idOpcion = "";
            //SI ESTÁ ACTIVO EL NIVEL HISTÓRICO
            if (ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS == 1)
            {
                string nivel = "";
                string idEpiClinico = "";
                string idEpiAtencion = "";
                string idOa = "";
                string lineaOa = "";

                string[] vector = node.Split('|');
                if (vector.Length > 0)
                {
                    nivel = vector[0];
                    if (vector.Length > 4)
                    {
                        idEpiClinico = vector[1];
                        idEpiAtencion = vector[2];
                        idOa = vector[3];
                        lineaOa = vector[4];
                        if (vector.Length > 5)
                        {
                            idOpcion = vector[5];
                        }
                    }
                }

                ENTITY_GLOBAL.Instance.UnidadReplicacion = ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP;
                ENTITY_GLOBAL.Instance.PacienteID = ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP;
                ENTITY_GLOBAL.Instance.EpisodioClinico = Convert.ToInt32(idEpiClinico.Length > 0 ? idEpiClinico : "0");
                ENTITY_GLOBAL.Instance.EpisodioAtencion = Convert.ToInt32(idEpiAtencion.Length > 0 ? idEpiAtencion : "0");
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                //ADD
                //ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP;                
            }

            if (idOpcion.Length > 0)
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "VISTA";
                return LoadFormatosBita(containerId, idOpcion);
            }
            else
            {
                return this.Direct();
            }
        }

        /*****************************************************************************************/

        public System.Web.Mvc.ActionResult verDetallePaciente(String MODO)
        {
            Log.Information("HClinicaControllerSup - verDetallePaciente - Entrar");


            //var detalle = new VW_ATENCIONPACIENTE();
            //detalle.Accion = "LISTARPAG";
            //detalle.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            //var ObjLista = SvcVw_AtencionPaciente.listarVwAtencionPaciente(detalle, 0, 10);

            var detalle = new VW_ATENCIONPACIENTE();
            detalle.Accion = "LISTDETPACIENTE";
            detalle.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            detalle.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
            detalle.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            detalle.IdEpisodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion;
            var ObjLista = SvcVw_AtencionPaciente.listarVwAtencionPaciente(detalle, 0, 10);

            if (ObjLista.Count > 0)
            {
                foreach (VW_ATENCIONPACIENTE objEntity in ObjLista)
                {
                    detalle.Religion = objEntity.Religion;
                    detalle.Raza = objEntity.Raza;
                    detalle.Direccion = objEntity.Direccion;
                    detalle.EstadoCivil = objEntity.EstadoCivil;
                    detalle.NivelInstruccion = objEntity.NivelInstruccion;
                    detalle.Ocupacion = objEntity.Ocupacion;
                    detalle.ParentescoEmergencia = objEntity.ParentescoEmergencia;
                    detalle.NombreCompleto = objEntity.NombreCompleto;
                    detalle.CodigoOA = objEntity.CodigoOA;

                }
            }


            return crearWindowRegistro("DetallePaciente/verDetallePaciente", detalle, "");


        }





        public System.Web.Mvc.ActionResult ExamenesAdicionales(String MODO)
        {
            Log.Information("HClinicaControllerSup - ExamenesAdicionales - Entrar");

            var objModel = new SS_HC_BANDEJA_NOTIFI_DETALLE();

            objModel.Accion = MODO;
            objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("ExamenesAdicionales", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);

        }
        public System.Web.Mvc.ActionResult getGrillaNotificacionDetalle(int start, int limit, string desc,
              string tipoBuscar, string estado)
        {
            Log.Information("HClinicaControllerSup - getGrillaNotificacionDetalle - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            //ConsultaCita();
            var Listar = new List<SS_HC_BANDEJA_NOTIFI_DETALLE>();

            var LocalEnty = new SS_HC_BANDEJA_NOTIFI_DETALLE();
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            LocalEnty.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            LocalEnty.Descripcion01 = desc;
            LocalEnty.Estado = estado;
            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;
            //Si la búsqueda proviene de filtros
            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

            LocalEnty.Accion = "LISTARDETALLE";
            Listar = SvcNotificacionDetalle.listarNotificacionDetalle(LocalEnty, inicio, final);

            return this.Store(Listar);



        }

        public System.Web.Mvc.ActionResult CCEP9913_View()
        {
            Log.Information("HClinicaControllerSup - CCEP9913_View - Entrar");

            /***ADD PERMISOS******/

            Session["DATA"] = "";
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("CCEP9913_View");
        }


        public System.Web.Mvc.ActionResult CCEP9924_View()
        {
            Log.Information("HClinicaControllerSup - CCEP9924_View - Entrar");

            SS_HC_KardexEnfermeria ObjSP;
            var fieldCod = X.GetCmp<TextField>("txtPaciente");
            fieldCod.SetValue(ENTITY_GLOBAL.Instance.NombreCompletoPaciente);


            var fieldCod2 = X.GetCmp<TextField>("txtCodigoOA");
            fieldCod2.SetValue(ENTITY_GLOBAL.Instance.CodigoOA);

            var fieldCod3 = X.GetCmp<DateField>("txtFecha1");
            fieldCod3.SetValue(ENTITY_GLOBAL.Instance.FechaReceta);

            ObjSP = new SS_HC_KardexEnfermeria();
            ObjSP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ObjSP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ObjSP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            ObjSP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

            /***ADD PERMISOS******/

            Session["DATA"] = "";
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("PAE/CCEP9924_View");
        }
        public System.Web.Mvc.ActionResult DinamicsForm_View()
        {
            Log.Information("HClinicaControllerSup - DinamicsForm_View - Entrar");

            /***ADD PERMISOS******/

            Session["DATA"] = "";
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            ENTITY_GLOBAL.Instance.indicadorAuxiliar = true;
            cargarPermisosFormato(true);
            /*********************/
            return View("DinamicsForm_View");
        }


        public System.Web.Mvc.ActionResult DinamicsComp_View()
        {
            Log.Information("HClinicaControllerSup - DinamicsComp_View - Entrar");

            /***ADD PERMISOS******/

            Session["DATA"] = "";
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            ENTITY_GLOBAL.Instance.indicadorAuxiliar = true;
            cargarPermisosFormato(true);
            /*********************/
            return View("DinamicsComp_View");
        }

        //public System.Web.Mvc.ActionResult CCEP9914_View()
        //{
        //    /***ADD PERMISOS******/
        //    Session["RECURSOS_PERMISOSFORMATOS"] = null;
        //    cargarPermisosFormato(true);
        //    /*********************/
        //    return View("FormulariosHCE/CCEP9914_View");
        //}

        public System.Web.Mvc.ActionResult CCEP9914_View() //FORMATO REGISTRAR ACOMPAÑANTE
        {
            Log.Information("HClinicaControllerSup - CCEP9914_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_RegistroAcompanante();
                var Listar = new List<SS_HC_RegistroAcompanante>();

                LocalEnty.Accion = "LISTARPAG";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                Listar = SvcRegistroAcompanante.listarRegistroAcompanante(LocalEnty, 0, 0).ToList();



                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_RegistroAcompanante objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }

                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);

                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                // return View("", "", LocalEnty);
                return View("FormulariosHCE/CCEP9914_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult postWindowAcompanante(String id, String idPaciente)
        {
            Log.Information("HClinicaControllerSup - postWindowAcompanante - Entrar");

            PERSONAMAST objAg = new PERSONAMAST();
            var Listar = new List<PERSONAMAST>();


            var field = X.GetCmp<TextField>("txtPacienteN");
            var fieldCod = X.GetCmp<TextField>("txtCodigoOA");
            fieldCod.SetValue(ENTITY_GLOBAL.Instance.CodigoOA);


            if (field != null)
            {
                objAg.ACCION = "LISTAR";
                objAg.Persona = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                Listar = SvcPersonaMast.listarPersonaMast(objAg, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (PERSONAMAST objEntity in Listar)
                    {
                        objAg = objEntity;
                        field.SetValue(objAg.NombreCompleto);

                    }
                }
            }

            setPropiedadesFormulario(true);

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult save_RegistroAcompanante(SS_HC_RegistroAcompanante objRegistroAcompanante)
        {
            Log.Information("HClinicaControllerSup - save_RegistroAcompanante - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();

            }
            else
            {
                try
                {
                    int registro = -1;
                    objRegistroAcompanante.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objRegistroAcompanante.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objRegistroAcompanante.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objRegistroAcompanante.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objRegistroAcompanante.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objRegistroAcompanante.FechaModificacion = DateTime.Now;
                    objRegistroAcompanante.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objRegistroAcompanante.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;

                    string mensage = "";
                    registro = SvcRegistroAcompanante.setMantenimientoRegistroAcompanante(objRegistroAcompanante);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        //ActivaDescativaButtonSave(true);
                        eventoPostFormulario(true, "");


                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);                                        
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    eventoPostFormulario(false, "");
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }







        /**Método para el evento del uso de un Bien y servicio */
        public System.Web.Mvc.ActionResult eventoSeleccionarBienServicio(String codigoFormato)
        {
            Log.Information("HClinicaControllerSup - eventoSeleccionarBienServicio - Entrar");
            try
            {
                //Session["ESCOLLAPSED_BIENSERV"] = "S"; //Se podría usar
                Panel panelServ = X.GetCmp<Panel>("East1");
                if (panelServ != null)
                {
                    panelServ.Expand();
                    //panelServ.Collapse();
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEP9915_View() //FORMATO REGISTRAR NANDA
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP9915_View - Entrar");

                var LocalEnty = new SS_HC_NANDA();
                var Listar = new List<SS_HC_NANDA>();
                var tipoBuscar = "FILTRO";
                int start = 0;
                int limit = 15;


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcNanda.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcNanda.listarNanda(LocalEnty, inicio, final);
                }


                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_NANDA objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }

                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);

                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                // return View("", "", LocalEnty);
                return View("PAE/CCEP9915_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEP9915_DIAGNOSTICONANDA()
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP9915_DIAGNOSTICONANDA - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGNOSTICONANDAPAE";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIAGNOSTICO_F1, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                return showMsgTratamientoExcepcion(ex, "Diagnóstico Nanda");
            }

        }

        public System.Web.Mvc.ActionResult Save_DianosticoValoracionNanda(String selection, string text)
        {
            Log.Information("HClinicaControllerSup - Save_DianosticoValoracionNanda - Entrar");

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    /////TRANSACTION
                    List<SS_HC_NANDA> listaCab = new List<SS_HC_NANDA>();
                    List<SS_HC_NANDA> listaDetalle = new List<SS_HC_NANDA>();

                    int registro = -1;
                    string mensage = "";
                    var Envio = new List<MA_MiscelaneosDetalle>();
                    SS_HC_NANDA Entity;

                    string cadenas = "";
                    String[] cadArray;

                    Entity = new SS_HC_NANDA();

                    List<SS_HC_NANDA> dataDelete = null;
                    if (Session["DataDianosticoValoracionDeleteNanda"] != null)
                    {
                        dataDelete = (List<SS_HC_NANDA>)Session["DataDianosticoValoracionDeleteNanda"];
                    }
                    if (dataDelete != null)
                    {
                        foreach (var objDel in dataDelete)
                        {

                            listaDetalle.Add(objDel);
                        }
                    }




                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                    {
                        Entity = new SS_HC_NANDA();

                        Entity.Accion = objEntity.ACCION;


                        Entity.IdNanda = Convert.ToInt32(objEntity.CodigoElemento);
                        Entity.Codigo = objEntity.ValorCodigo1.Trim();
                        Entity.Descripcion = objEntity.ValorCodigo2.Trim();

                        Entity.CadenaRecursiva = Convert.ToString(objEntity.ValorCodigo3.Trim());
                        Entity.Estado = Convert.ToInt32(objEntity.ValorCodigo4);

                        Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        Entity.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objEntity.ACCION != "NUEVO")
                        {
                            Entity.IdNanda = Convert.ToInt32(objEntity.CodigoElemento);
                        }

                        //ADD PARA MANTENER EL CODIGO DE FORMATO
                        Entity.Version = ENTITY_GLOBAL.Instance.CONCEPTO;
                        /////////////////////////////////
                        listaDetalle.Add(Entity);
                    }
                    //TRANSACT
                    registro = SvcNanda.setMantenimiento(new SS_HC_NANDA(), null, listaDetalle);

                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        //X.Msg.Notify("Ventana de Mensajes ",mensaje ).Show();
                        //ActivaDescativaButtonSave(true);
                        Session["DataDianosticoValoracionDelete"] = null;

                        eventoLoadPostFormulario(true, "storeValoracionNanda", null);
                        eventoPostFormulario(true, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");

                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addEliminar_DianosticoValoracionNanda(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaControllerSup - addEliminar_DianosticoValoracionNanda - Entrar");

            List<SS_HC_NANDA> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataDianosticoValoracionDeleteNanda"] != null)
                {
                    dataDelete = (List<SS_HC_NANDA>)Session["DataDianosticoValoracionDeleteNanda"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_NANDA>();
                }
                SS_HC_NANDA objDelete = new SS_HC_NANDA();

                try
                {


                    objDelete.Accion = "DELETE";
                    objDelete.IdNanda = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataDianosticoValoracionDeleteNanda"] = dataDelete;
                }
                catch (Exception ee)
                {
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEP9916_View() //FORMATO REGISTRAR NANDA
        {
            Log.Information("HClinicaControllerSup - CCEP9916_View - Entrar");

            try
            {
                var LocalEnty = new SS_HC_NANDA();
                var Listar = new List<SS_HC_NANDA>();
                var tipoBuscar = "FILTRO";
                int start = 0;
                int limit = 15;


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcNanda.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcNanda.listarNanda(LocalEnty, inicio, final);
                }


                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_NANDA objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }


                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                ENTITY_GLOBAL.Instance.CONCEPTO = Listar[0].Descripcion;
                //  var txtComp = X.GetCmp<TextField>("RecepcionaRecurso");
                // txtComp.SetValue(JSON.Serialize(LocalEnty));

                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
                // return View("", "", LocalEnty);
                return View("PAE/CCEP9916_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }


        }


        public System.Web.Mvc.ActionResult getPaneles(String accion)
        {
            try
            {
                Log.Information("HClinicaControllerSup - getPaneles - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var ObjLista = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGNOSTICONANDAPAE";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                ObjLista = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (ObjLista != null)
                {
                    if (ObjLista.Count > 0)
                    {

                        return this.Direct(ObjLista[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

            }


            return this.Direct();

        }


        public System.Web.Mvc.ActionResult cargar_planf(int idNanda)
        {
            Log.Information("HClinicaControllerSup - cargar_planf - Entrar");

            var lista = new List<SS_HC_NANDA>();

            var LocalEnty = new SS_HC_NANDA();
            //LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // LocalEnty.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            // LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            // LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            LocalEnty.IdNanda = idNanda;
            LocalEnty.Accion = "LISTAR";


            //lista = SvcDiagnosticoPAE.listarDiagnosticoPAE(LocalEnty, 0, 1);
            lista = SvcNanda.listarNanda(LocalEnty, 0, 1);

            /* if (lista.Count > 0)
             {
               
                 for (int i = 0; i < lista.Count; i++)
                 {
                     Panel panel = new Panel
                     {
                         ID = "Panel" + i,
                         Title = "<table style='width:100%';><col width='70%'><col witdh='30%'><tr><td><span>" + (i + 1) + ") " + lista[i].UsuarioCreacion + " - " + lista[i].Accion + "</span></td><td>Dominio: " + lista[i].Version +" Clase: "+lista[i].Observacion+ "</td></tr></table>",
                         Html = "<div id='subpanel"+i+"'></div>",
                         BodyPadding = 5,
                         Border = false
                     };

                     panel.AddTo(this.GetCmp<Panel>("Paneles"));

                     panel.Expand();
                 }
                 ENTITY_GLOBAL.Instance.CANTIDAD_PANEL = lista.Count;
                 Session["cantidad-panel"] = lista.Count;
             }
             */

            return this.Store(lista);

            // return this.Direct();
        }

        public System.Web.Mvc.ActionResult cargar_NOC(int idNOC)
        {
            Log.Information("HClinicaControllerSup - cargar_NOC - Entrar");

            var lista = new List<SS_HC_NOC2>();

            var LocalEnty = new SS_HC_NOC2();
            //LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // LocalEnty.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            // LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            // LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            LocalEnty.IdNoc = idNOC;
            LocalEnty.Accion = "LISTAR";


            //lista = SvcDiagnosticoPAE.listarDiagnosticoPAE(LocalEnty, 0, 1);
            lista = SvcNoc.listarNoc(LocalEnty, 0, 1);

            /* if (lista.Count > 0)
             {
               
                 for (int i = 0; i < lista.Count; i++)
                 {
                     Panel panel = new Panel
                     {
                         ID = "Panel" + i,
                         Title = "<table style='width:100%';><col width='70%'><col witdh='30%'><tr><td><span>" + (i + 1) + ") " + lista[i].UsuarioCreacion + " - " + lista[i].Accion + "</span></td><td>Dominio: " + lista[i].Version +" Clase: "+lista[i].Observacion+ "</td></tr></table>",
                         Html = "<div id='subpanel"+i+"'></div>",
                         BodyPadding = 5,
                         Border = false
                     };

                     panel.AddTo(this.GetCmp<Panel>("Paneles"));

                     panel.Expand();
                 }
                 ENTITY_GLOBAL.Instance.CANTIDAD_PANEL = lista.Count;
                 Session["cantidad-panel"] = lista.Count;
             }
             */

            return this.Store(lista);

            // return this.Direct();
        }

        public System.Web.Mvc.ActionResult cargar_NIC(int idNOC, int idNic)
        {
            Log.Information("HClinicaControllerSup - cargar_NIC - Entrar");

            var lista = new List<SS_HC_NocNic>();

            var LocalEnty = new SS_HC_NocNic();
            //LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // LocalEnty.IdEpisodioAtencion = Convert.ToInt64(ENTITY_GLOBAL.Instance.EpisodioAtencion);
            // LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
            // LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
            LocalEnty.IdNoc = idNOC;
            LocalEnty.IdNic = idNic;
            LocalEnty.Accion = "LISTAR";


            //lista = SvcDiagnosticoPAE.listarDiagnosticoPAE(LocalEnty, 0, 1);
            lista = SvcNocNic.listarNocNic(LocalEnty, 0, 1);



            return this.Store(lista);

        }

        public System.Web.Mvc.ActionResult getGrillaFactores(int start, int limit, int desc,
              string tipoBuscar, string estado)
        {
            Log.Information("HClinicaControllerSup - getGrillaFactores - Entrar");


            ENTITY_GLOBAL.Instance.GRUPO = "";
            //ConsultaCita();
            var Listar = new List<SS_HC_FactorRelacionadoNanda>();

            var LocalEnty = new SS_HC_FactorRelacionadoNanda();
            //LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // LocalEnty.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // LocalEnty.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            LocalEnty.IdNanda = desc;
            LocalEnty.Accion = "FACTORRELACIONADO";
            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;
            //Si la búsqueda proviene de filtros
            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

            LocalEnty.Accion = "LISTARDETALLE";
            Listar = SvcFactorRelacionadoNanda.listarFactorRelacionadoNanda(LocalEnty, inicio, final);

            return this.Store(Listar);



        }


        public System.Web.Mvc.ActionResult AdicionarFactor(String MODO, String IdNanda)
        {
            Log.Information("HClinicaControllerSup - AdicionarFactor - Entrar");

            var objModel = new SS_HC_FactorRelacionadoNanda();

            objModel.Accion = MODO;
            objModel.IdNanda = Convert.ToInt32(IdNanda);
            //objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("PAE/AdicionarFactor", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);

        }


        public System.Web.Mvc.ActionResult getGrillaFactorRelacionadoNanda(int start, int limit,
             string IdNanda, string IdFactorRelacionado, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaFactorRelacionadoNanda - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_FactorRelacionadoNanda>();

                var LocalEnty = new SS_HC_FactorRelacionadoNanda();


                LocalEnty.IdNanda = Convert.ToInt32(getValorFiltroStr(IdNanda));


                //LocalEnty.IdFactorRelacionado = Convert.ToInt32(getValorFiltroStr(IdFactorRelacionado));

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                /*if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "FACTORRELACIONADO";
                int cantElementos = SvcFactorRelacionadoNanda.setMantenimientoFRN(LocalEnty);
                if (cantElementos > 0)
                {*/
                LocalEnty.Accion = "LISTARFACTORNANDA";
                Listar = SvcFactorRelacionadoNanda.listarFactorRelacionadoNanda(LocalEnty, inicio, final);
                // }
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }




        public System.Web.Mvc.ActionResult CCEP9916_FACTORES(String IdNanda)
        {
            try
            {
                Log.Information("HClinicaControllerSup - CCEP9916_FACTORES - Entrar");

                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new SS_HC_FactorRelacionadoNanda();
                var Listar = new List<SS_HC_FactorRelacionadoNanda>();
                LocalEnty.Accion = "LISTARFACTORNANDA";
                //LocalEnty.IdNanda = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                // LocalEnty. = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                // LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                // LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                // LocalEnty.ValorCodigo5 = tipoCodigo;

                // ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                //  Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    /*if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "VISTA")
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }*/
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult getGrillaFactorRelacionado(int start, int limit,
                string IdNanda, string descripcion, string codigo, bool tipo, string tipoNivel, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaFactorRelacionado - Entrar");

            Boolean indicaValidacionForm = false;
            int contador = 0;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_FactorRelacionado>();

                var LocalEnty = new SS_HC_FactorRelacionado();
                /// LocalEnty.Codigo = getValorFiltroStr(codigo);
                //LocalEnty.N = getValorFiltroStr(descripcion);

                LocalEnty.Version = codigo;
                LocalEnty.Descripcion = descripcion;
                if (tipo == true)
                {
                    LocalEnty.Orden = 0;
                }
                else
                {
                    LocalEnty.Orden = Convert.ToInt32(IdNanda);
                }




                //LocalEnty.Orden = Convert.ToInt32(IdNanda);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                //  LocalEnty.Accion = "LISTARFACTORNANDA";
                // int cantElementos = SvcFactorRelacionado.setMantenimientoFR(LocalEnty);
                // if (cantElementos > 0)
                //{
                LocalEnty.Accion = "LISTARFACTORNANDA";
                Listar = SvcFactorRelacionado.listarFactorRelacionado(LocalEnty, inicio, final);
                // }
                if (Listar.Count > 0)
                {
                    contador = Convert.ToInt32(Listar[0].Version);
                }

                return this.Store(Listar, contador);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /****************************/

        public System.Web.Mvc.ActionResult AdicionarObjetivo(String MODO, String IdNanda)
        {
            Log.Information("HClinicaControllerSup - AdicionarObjetivo - Entrar");

            var objModel = new SS_HC_NandaNoc();

            objModel.Accion = MODO;
            objModel.IdNanda = Convert.ToInt32(IdNanda);
            //objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("PAE/AdicionarObjetivo", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);

        }

        public System.Web.Mvc.ActionResult AdicionarIntervencion(String MODO, String idNanda, String idNoc)
        {
            Log.Information("HClinicaControllerSup - AdicionarIntervencion - Entrar");

            var objModel = new SS_HC_NocNic();

            objModel.Accion = MODO;
            objModel.IdNoc = Convert.ToInt32(idNoc);

            objModel.Version = idNanda;
            //objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("PAE/AdicionarIntervencion", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);

        }

        public System.Web.Mvc.ActionResult AdicionarActividad(String MODO, String idNanda, String idNoc, String idNic)
        {
            Log.Information("HClinicaControllerSup - AdicionarActividad - Entrar");

            var objModel = new SS_HC_NICActividad();

            objModel.Accion = MODO;
            objModel.IdNic = Convert.ToInt32(idNic);
            objModel.Version = idNoc;
            objModel.Accion = idNanda;
            //objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("PAE/AdicionarActividad", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);

        }

        public System.Web.Mvc.ActionResult getGrillaObjetivo(int start, int limit,
                 string IdNanda, string descripcion, string codigo, bool tipo, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaObjetivo - Entrar");

            Boolean indicaValidacionForm = false;
            int contador = 0;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_NOC2>();

                var LocalEnty = new SS_HC_NOC2();
                //    LocalEnty.IdNanda = Convert.ToInt32(getValorFiltroStr(IdNanda));
                /*  LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));*/

                LocalEnty.Version = codigo;
                LocalEnty.Descripcion = descripcion;

                if (tipo == true)
                {
                    LocalEnty.Orden = 0;
                }
                else
                {
                    LocalEnty.Orden = Convert.ToInt32(IdNanda);
                }

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARNOCNANDA";
                Listar = SvcNoc.listarNoc(LocalEnty, inicio, final);
                if (Listar.Count > 0)
                {

                    contador = Convert.ToInt32(Listar[0].Version);
                }
                return this.Store(Listar, contador);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult getGrillaNocNic(int start, int limit,
               string IdNoc, string IdNic, string descripcion, string codigo, bool tipo, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaNocNic - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_NocNic>();

                var LocalEnty = new SS_HC_NocNic();

                // LocalEnty.Version = codigo;
                LocalEnty.Descripcion = descripcion;

                if (tipo == true)
                {
                    LocalEnty.IdNoc = 0;
                }
                else
                {
                    LocalEnty.IdNoc = Convert.ToInt32(IdNoc);
                }
                if (codigo.Length > 0)
                {
                    LocalEnty.IdNic = Convert.ToInt32(codigo);
                    // LocalEnty.IdNoc = 0;
                }
                else
                {
                    LocalEnty.IdNic = 0;
                }


                /* LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));*/
                // LocalEnty.IdNic = Convert.ToInt32(getValorFiltroStr(IdNic));

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcNocNic.setMantenimientoNocNic(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcNocNic.listarNocNic(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /*****************************/

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormulario2(string formato, string accion, string idWindow,
            Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
            String data
            )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormulario2 - Entrar");


            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;
                            varPasarDetalle.ValorEntero3 = objadd.ValorEntero3;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso2");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario2");
            }



        }

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormulario3(string formato, string accion, string idWindow,
            Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
            String data
            )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormulario3 - Entrar");
            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso3");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario3");
            }



        }

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormulario4(string formato, string accion, string idWindow,
           Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
           String data
           )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormulario4 - Entrar");


            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso4");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario4");
            }



        }

        public System.Web.Mvc.ActionResult eventoAgregarFormularioX(string formato, string accion, string idWindow,
        Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
        String data
        )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarFormularioX - Entrar");

            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecursoX");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarFormularioX");
            }



        }

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormulario5(string formato, string accion, string idWindow,
          Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
          String data
          )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormulario5 - Entrar");

            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;
                            varPasarDetalle.ValorEntero3 = objadd.ValorEntero3;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso5");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario4");
            }



        }

        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormularioX(string formato, string accion, string idWindow,
           Nullable<long> idEpiAtencionCopy, Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy,
           String data
           )
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormularioX - Entrar");


            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();

            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));


            try
            {
                if (ObjListar != null)
                {

                    if (ObjListar.Count > 0)
                    {

                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;

                            var txtComp = X.GetCmp<TextField>("RecepcionaRecurso4");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));

                        }


                    }

                    //cerrarWindow(idWindow);

                }

                return cerrarWindow(idWindow);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormulario4");
            }



        }

        /*********************/

        public StoreResult COMBOS(String valor)
        {
            Log.Information("HClinicaControllerSup - COMBOS - Entrar");

            var lista = new List<svccombo>();
            lista = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericos(valor, "");

            return this.Store(lista);
        }

        public StoreResult COMBOS2(String valor2)
        {
            Log.Information("HClinicaControllerSup - COMBOS2 - Entrar");

            var lista = new List<svccombo>();
            lista = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico(valor2);

            return this.Store(lista);
        }

        public System.Web.Mvc.ActionResult eventoFirmaActoMedicoRegistro(String MODO, String idpaciente, String codigooa, String paciente, String password)
        {
            Log.Information("HClinicaControllerSup - eventoFirmaActoMedicoRegistro - Entrar");
            //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;


            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TRIAJE")
            {
                SS_HC_EpisodioAtencion objEpisodio = new SS_HC_EpisodioAtencion();
                try
                {
                    objEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEpisodio.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEpisodio.NombrePacienteTriaje = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
                    objEpisodio.CodigoOrdenTriaje = ENTITY_GLOBAL.Instance.CodigoOrdenTriaje;
                    objEpisodio.Accion = "LISTARPORID";
                    string nombre = (string)Session["NOMBREPACIENTE_HEAD"];
                    int longitud = 10;
                    objEpisodio.Accion = MODO;
                    objEpisodio.idMedicoFirma = ENTITY_GLOBAL.Instance.CODPERSONA;
                    objEpisodio.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;

                    List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
                    VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
                    obj.Persona = Convert.ToInt32(ENTITY_GLOBAL.Instance.CODPERSONA);
                    obj.ACCION = "LISTARPORID";
                    lista = SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
                    if (lista.Count == 1)
                    {
                        foreach (var result in lista)
                        {
                            obj = result;
                            objEpisodio.DescansoMedico = obj.NombreCompleto; ///nombre del medico
                        }
                    }

                    //ENTIDAD DE TRIAJE DE EMERGENCIA
                    var LocalEnty = new SS_HC_TriajeEmergencia_FE();
                    var Listar = new List<SS_HC_TriajeEmergencia_FE>();
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;

                    //VALIDAMOS SI EXISTE UN TRIAJE DE EMERGENCIAS
                    Listar = SvcTriajeEmergenciaFEService.listarEntidad(LocalEnty);
                    if (Listar.Count == 0)
                    {
                        //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                        return showMensajeBox("Existen formatos obligatorios para firmar la atencion" + "",
                     "Advertencia", "WARNING");
                    }

                    //ENTIDAD DE TRIAJE DE ANT Y ALERGIAS
                    var LocalEnty2 = new SS_HC_Triaje_Ant_Alergia_FE();
                    var Listar2 = new List<SS_HC_Triaje_Ant_Alergia_FE>();
                    LocalEnty2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty2.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                    LocalEnty2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty2.Accion = "LISTAR";

                    //VALIDAMOS SI EXISTE UN TRIAJE DE ANT Y ALERGIAS
                    Listar2 = SvcTriajeAntAlergia.TriajeAlergia_Listar(LocalEnty2).ToList();
                    if (Listar2.Count == 0)
                    {
                        return showMensajeBox("Debe Asignar Triaje de Antecedentes y alergias." + "",
                     "Advertencia", "WARNING");
                    }

                    //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                    return crearWindowRegistro("Procesos/FirmarActoMedicoTriaje", objEpisodio, "");
                }
                catch (Exception ex)
                {
                    //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                    Log.Error(ex, ex.Message);
                    EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Ocurrió una excepción en la ejecución.";
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    throw;
                }
            }
            else
            {
                #region CodigoFirmaAmbulatorio_etc
                SS_HC_EpisodioAtencion objEpisodio = new SS_HC_EpisodioAtencion();
                if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
                {
                    try
                    {
                        /////
                        objEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objEpisodio.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objEpisodio.Accion = "LISTARPORID";
                        if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                        {
                            objEpisodio.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            objEpisodio.Accion = "LISTARPORIDEMER";
                        }
                        List<SS_HC_EpisodioAtencion> listaEpi = SvcEpisodioAtencion.listarSS_HC_EpisodioAtencion(objEpisodio, 0, 0);
                        if (listaEpi != null)
                        {
                            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                            {
                                objEpisodio.DescansoMedico = ENTITY_GLOBAL.Instance.NOMBRE_MEDICO;

                                List<SS_HC_EpisodioAtencion> listaTrabajador = listaEpi.Where(x => x.EpisodioClinico == (int)ENTITY_GLOBAL.Instance.EpisodioClinico && x.IdEpisodioAtencion == (long)ENTITY_GLOBAL.Instance.EpisodioAtencion).ToList();
                                if (listaTrabajador[0].TipoTrabajador == "08")
                                {
                                    List<SS_HC_EpisodioAtencion> listaInfomeAlta = listaEpi.Where(x => x.IdTipoReferencia == 2 && x.IdEpisodioAtencion == (long)ENTITY_GLOBAL.Instance.EpisodioAtencion && x.IdUbicacion != 3).ToList();
                                    if (listaInfomeAlta.Count > 0)
                                    {
                                        int contador = 0;
                                        foreach (var resultado in listaEpi)
                                        {
                                            contador++;
                                        }
                                        if (contador == listaEpi.Count)
                                        {
                                            ENTITY_GLOBAL.Instance.INDICADOR_HOSPI = 3;
                                        }
                                    }
                                }
                            }
                            foreach (var result in listaEpi)
                            {
                                objEpisodio = result;
                            }
                        }
                        objEpisodio.DescansoMedico = ENTITY_GLOBAL.Instance.NOMBRE_MEDICO;
                        objEpisodio.Version = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
                        var msg = Newtonsoft.Json.JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance);

                    }
                    catch (Exception ex)
                    {
                        //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Ocurrió una excepción en la ejecución.";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }

                objEpisodio.Accion = MODO;
                var episodio = ENTITY_GLOBAL.Instance.EpisodioClinicoCodigo;
                if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_HOSP_CIRUGIA" || ENTITY_GLOBAL.Instance.COD_BANDEJA == "EMERGENCIA")
                {
                    episodio = 1;
                }
                List<SS_CHE_VistaSeguridad> serviceResuls = new List<SS_CHE_VistaSeguridad>();
                SS_CHE_VistaSeguridad entidaLocal = new SS_CHE_VistaSeguridad();
                entidaLocal.Accion = "LISTAROPCIONESCAGENTEOBLIGATORIO";
                entidaLocal.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                entidaLocal.IdOpcionPadre = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDOPCION_PADRE);
                entidaLocal.Modulo = ENTITY_GLOBAL.Instance.MODULOBLIGATORIO;
                //entidaLocal.NivelOpcion = -2;  //FORMATOS  - OPCIONES SIN PLANTILLA

                // VALIDAR FORMULARIOS OBLIGATORIOS 
                var formularioMarcroprocesos = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible;
                try
                {
                    serviceResuls = SvcSeguridadConcepto.ListarSeguridadOpcion(entidaLocal, 0, 0);

                    int vari = 0;
                    string formula = "";
                    string fSeguimiento = "";
                    if (serviceResuls.Count > 0)
                    {
                        foreach (var result in serviceResuls)
                        {
                            if (result.IndicadorObligatorio == 2)
                            {
                                var Listars = new List<V_EpisodioAtenciones>();
                                var LocalEntys = new V_EpisodioAtenciones();

                                LocalEntys.UsuarioModificacion = Convert.ToString(result.IdOpcion); //AUX para ACCION o FORM
                                LocalEntys.UsuarioCreacion = ENTITY_GLOBAL.Instance.CodigoOA; //AUX para código OA
                                LocalEntys.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                //////////////
                                LocalEntys.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                LocalEntys.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                LocalEntys.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                LocalEntys.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                LocalEntys.Formato_Codigo = Convert.ToString(result.CodigoFormato);

                                LocalEntys.Codigo002 = Convert.ToString(result.IdOpcion);
                                //  LocalEntys.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
                                LocalEntys.Accion = "LISTARPAGOBLIGATORIO";

                                DataTable listaFormulario = new DataTable();
                                if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                                {

                                    listaFormulario = ListarReporteEpisodioClinicoEmergencia(result.CodigoFormato,
                                        ENTITY_GLOBAL.Instance.UnidadReplicacion, (int)ENTITY_GLOBAL.Instance.PacienteID,
                                        ENTITY_GLOBAL.Instance.CodigoOA, (int)ENTITY_GLOBAL.Instance.EpisodioClinico,
                                        (long)ENTITY_GLOBAL.Instance.EpisodioAtencion);

                                    if (listaFormulario.Rows.Count == 0)
                                    {
                                        if (ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION_EMER != "Procedimiento")
                                        {
                                            vari++;
                                        }

                                        formula = result.Descripcion + ' ' + "<br/>" + ' ' + formula + ' ';
                                    }
                                }
                                else
                                {
                                    //listaFormulario = ListarReporteEpisodioClinico(result.CodigoFormato, ENTITY_GLOBAL.Instance.UnidadReplicacion, (int)ENTITY_GLOBAL.Instance.PacienteID, ENTITY_GLOBAL.Instance.CodigoOA);
                                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO" && ENTITY_GLOBAL.Instance.ListadoOrigen == "Procedimiento")
                                    {
                                        var node = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Where(x => x == LocalEntys.Formato_Codigo).ToList();
                                        if (node.Count > 0)
                                        {
                                            listaFormulario = ListarReporteEpisodioClinico(result.CodigoFormato, ENTITY_GLOBAL.Instance.UnidadReplicacion, (int)ENTITY_GLOBAL.Instance.PacienteID, ENTITY_GLOBAL.Instance.CodigoOA, (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion);
                                            if (listaFormulario.Rows.Count == 0)
                                            {
                                                if (ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION_EMER != "Procedimiento")
                                                {
                                                    vari++;
                                                }
                                                //vari++;
                                                formula = result.Descripcion + ' ' + "<br/>" + ' ' + formula + ' ';
                                            }
                                        }
                                    }
                                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "AMBULATORIO" && ENTITY_GLOBAL.Instance.ListadoOrigen == "Consulta")
                                    {
                                        var node = ENTITY_GLOBAL.Instance.ListarSeguOpcionGlobalVisible.Where(x => x == LocalEntys.Formato_Codigo).ToList();
                                        if (node.Count > 0)
                                        {
                                            listaFormulario = ListarReporteEpisodioClinico(result.CodigoFormato, ENTITY_GLOBAL.Instance.UnidadReplicacion, (int)ENTITY_GLOBAL.Instance.PacienteID, ENTITY_GLOBAL.Instance.CodigoOA, (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion);
                                            if (listaFormulario.Rows.Count == 0)
                                            {
                                                if (ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION_EMER != "Procedimiento")
                                                {
                                                    vari++;
                                                }
                                                //vari++;
                                                formula = result.Descripcion + ' ' + "<br/>" + ' ' + formula + ' ';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (vari > 0)
                    {
                        //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                        return showMensajeBox("" + fSeguimiento + " " + "Existen formularios Obligatorios que no contienen registros :" + "<br/>" + "\n" + "\r\n" + "\r\n" + formula + " " + " ",
                        "Advertencia", "WARNING");
                    }

                    var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
                    var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
                    if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
                    {
                        //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                        return showMensajeBox("Debe Asignar un Medico." + fSeguimiento,
                          "Advertencia", "WARNING");
                    }

                    if (episodio == null)
                    {
                        //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                        return showMensajeBox("Debe Asignar un Episodio." + fSeguimiento,
                          "Advertencia", "WARNING");

                    }

                    //this.GetCmp<Button>("btnGuardarFirma").Disabled = false;
                    return crearWindowRegistro("Procesos/FirmarActoMedico", objEpisodio, "");
                }
                catch (Exception ex)
                {
                    EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Ocurrió una excepción en la ejecución.";
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    throw;
                }
                #endregion
            }
        }

        public static DataTable ListarReporteEpisodioClinico(string Formato, string UnidadReplicacion, int PacienteID, string CodigoOA, int Linea)
        {
            Log.Information("HClinicaControllerSup - ListarReporteEpisodioClinico - Entrar");

            using (SqlConnection conx = new SqlConnection(ConfigurationManager.ConnectionStrings["ConexionReportes"].ToString()))
            {
                conx.Open();
                string sql = @"SELECT ECLI.UnidadReplicacion, ECLI.FechaAtencion, ECLI.TipoAtencion, ECLI.IdOrdenAtencion, " +
                " ECLI.LineaOrdenAtencion, ECLI.TipoOrdenAtencion,ECLI.Persona, ECLI.ApellidoPaterno,   " +
                " ECLI.ApellidoMaterno, ECLI.Nombres,  ECLI.CodigoOA   ,'' Documento,ECLI.Accion,ECLI.Accion Version ," +
                " ECLI.EpisodioClinico,ECLI.Episodio_Atencion EpisodioAtencion," +
                " 'GENERICO_HCE' as TipoFormulario,'' Ruta,FO.Descripcion Formulario FROM V_EpisodioAtenciones  ECLI" +
                " INNER JOIN SS_HC_Formato FO		 ON FO.CodigoFormato = ECLI.Accion  where UnidadReplicacion='" + UnidadReplicacion +
                " ' and IdPaciente=" + PacienteID + " and ECLI.LineaOrdenAtencion=" + Linea + " and  CodigoOA= '" + CodigoOA + "' and ECLI.Accion= '" + Formato + "' "; //ADD 05.06.2017 ORLANDO
                SqlDataAdapter adapter = new SqlDataAdapter(sql, conx);
                DataSet ds_Result = new DataSet();
                adapter.Fill(ds_Result, "Agrupador");
                if (ds_Result == null || ds_Result.Tables.Count == 0)
                {
                    return null;
                }
                return ds_Result.Tables[0];

            }
        }

        public static DataTable ListarReporteEpisodioClinicoEmergencia(string Formato, string UnidadReplicacion, int PacienteID, string CodigoOA, int Clinico, long IdEpisodio)
        {
            Log.Information("HClinicaControllerSup - ListarReporteEpisodioClinicoEmergencia - Entrar");


            using (SqlConnection conx = new SqlConnection(ConfigurationManager.ConnectionStrings["ConexionReportes"].ToString()))
            {
                conx.Open();
                string sql = @"SELECT ECLI.UnidadReplicacion, ECLI.FechaAtencion, ECLI.TipoAtencion, ECLI.IdOrdenAtencion, " +
                " ECLI.LineaOrdenAtencion, ECLI.TipoOrdenAtencion,ECLI.Persona, ECLI.ApellidoPaterno,   " +
                " ECLI.ApellidoMaterno, ECLI.Nombres,  ECLI.CodigoOA   ,'' Documento,ECLI.Accion,ECLI.Accion Version ," +
                " 'http://localhost:11505/Reportes/VisorReportesHCE.aspx?' as Tabla,ECLI.EpisodioClinico,ECLI.Episodio_Atencion EpisodioAtencion," +
                " 'GENERICO_HCE' as TipoFormulario,'' Ruta,FO.Descripcion Formulario FROM V_EpisodioAtenciones  ECLI" +
                " INNER JOIN SS_HC_Formato FO		 ON FO.CodigoFormato = ECLI.Accion  where UnidadReplicacion='" + UnidadReplicacion + "' and IdPaciente=" + PacienteID + " and EpisodioClinico=" + Clinico + " and IdEpisodioAtencion=" + IdEpisodio + " and  CodigoOA= '" + CodigoOA + "' and ECLI.Accion= '" + Formato + "' "; //ADD 05.06.2017 ORLANDO
                SqlDataAdapter adapter = new SqlDataAdapter(sql, conx);
                DataSet ds_Result = new DataSet();
                adapter.Fill(ds_Result, "Agrupador");
                if (ds_Result == null || ds_Result.Tables.Count == 0)
                {
                    return null;
                }
                return ds_Result.Tables[0];

            }
        }

        public System.Web.Mvc.ActionResult eventoProcesoInteroperabilidad(string modo)
        {
            Log.Information("HClinicaControllerSup - eventoProcesoInteroperabilidad - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();

            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            obj.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
            obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

            obj.Accion = "PROC_INTEROPERABILIDAD";

            var result = SvcEpisodioAtencion.setMantenimiento(obj);
            if (result > 0)
            {
                message = "El proceso se ejecutó exitosamente.";
            }
            else
            {
                indicaValidacionForm = true;
                tipoMsg = "ERROR";
                tituloMsg = "Error";
                message = "Ocurrió un error en el proceso.";
            }
            if (indicaValidacionForm)
            {
                return showMensajeNotify(tituloMsg, message, tipoMsg);
            }
            else
            {
                return showMensajeNotify(tituloMsg, message, tipoMsg);
            }
        }

        public System.Web.Mvc.ActionResult GrillaListadoMedicamentoPacientes(int start, int limit, string txtFecha1, string txtFecha2,
            string txtPaciente, string tipoEstado, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - GrillaListadoMedicamentoPacientes - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                //ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_ATENCIONPACIENTEMEDICAMENTO>();
                var LocalEnty = new VW_ATENCIONPACIENTEMEDICAMENTO();
                LocalEnty.FechaCreacion = Convert.ToDateTime(getValorFiltroStr(txtFecha1));
                LocalEnty.IngresoFechaRegistro = Convert.ToDateTime(getValorFiltroStr(txtFecha2));
                LocalEnty.NombreCompleto = getValorFiltroStr(txtPaciente);
                LocalEnty.Estado = getValorFiltroInt(tipoEstado);
                if (tipoEstado == "-1")
                {
                    LocalEnty.Estado = null;
                }
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO")
                {
                    inicio = 0;
                    final = limit;
                }
                LocalEnty.Familia = "LISTARPAG";
                Listar = svcVw_AtencionPacienteMedicamento.listarVwAtencionPacienteMedicamento(LocalEnty, inicio, final);
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult GrillaListadoMedicamentoKardex(int start, int limit, string txtFecha1, string txtFecha2,
         string txtPaciente, string tipoEstado, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - GrillaListadoMedicamentoKardex - Entrar");

            Boolean indicaValidacionForm = false;
            var objLista = new List<SS_FA_SolicitudProductoDetalle>();
            try
            {
                var Listar = new List<VW_ATENCIONPACIENTEMEDICAMENTO>();
                var NewLista = new List<VW_ATENCIONPACIENTEMEDICAMENTO>();
                var varLocal = new VW_ATENCIONPACIENTEMEDICAMENTO();
                var LocalEnty = new VW_ATENCIONPACIENTEMEDICAMENTO();
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.FechaCreacion = Convert.ToDateTime(getValorFiltroStr(txtFecha1));
                LocalEnty.IngresoFechaRegistro = Convert.ToDateTime(getValorFiltroStr(txtFecha2));
                LocalEnty.NombreCompleto = getValorFiltroStr(txtPaciente);
                LocalEnty.Estado = getValorFiltroInt(tipoEstado);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                if (tipoEstado == "-1")
                {
                    LocalEnty.Estado = null;
                }
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.Familia = "LISTARKARDEX";
                Listar = svcVw_AtencionPacienteMedicamento.listarVwAtencionPacienteMedicamento(LocalEnty, inicio, final);
                int grupoAnt = 0;
                int countG = 0;
                foreach (VW_ATENCIONPACIENTEMEDICAMENTO objEnt in Listar)
                {
                    varLocal = objEnt;
                    if (objEnt.GrupoMedicamento != grupoAnt & objEnt.GrupoMedicamento != 0)
                    {
                        if (objEnt.GrupoMedicamento == null)
                        {
                            grupoAnt = 0;
                        }
                        else
                        {
                            grupoAnt = (int)objEnt.GrupoMedicamento;
                        }
                        countG = 0;
                    }
                    if (objEnt.GrupoMedicamento == grupoAnt & objEnt.GrupoMedicamento != 0 & grupoAnt != 0 & countG == 1)
                    {
                        varLocal.Celular = "Ocultar";
                    }
                    if (objEnt.GrupoMedicamento == grupoAnt)
                    {
                        countG = 1;
                    }
                    if (objEnt.CodigoOA != null)
                    {
                        DateTime fechaBase = Convert.ToDateTime(getValorFiltroStr(txtFecha1));
                        DateTime fechaEval = Convert.ToDateTime(objEnt.CodigoOA);
                        DateTime newfechaBase = Convert.ToDateTime(fechaBase.Day + "/" + fechaBase.Month + "/" + fechaBase.Year);
                        DateTime newfechaEval = Convert.ToDateTime(fechaEval.Day + "/" + fechaEval.Month + "/" + fechaEval.Year);

                        if (newfechaEval < newfechaBase || newfechaEval == newfechaBase)
                        {
                            varLocal.Estado = 4;
                        }
                    }
                    NewLista.Add(varLocal);
                }
                return this.Store(NewLista);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult Save_Kardex(String selectionArray1, String selectionArray2)
        {
            Log.Information("HClinicaControllerSup - Save_Kardex - Entrar");


            List<SS_HC_KardexEnfermeria> ObjLista1 = new List<SS_HC_KardexEnfermeria>();
            List<SS_HC_KardexEnfermeriaDetalle> ObjLista2 = new List<SS_HC_KardexEnfermeriaDetalle>();
            string mensage = "";
            if (selectionArray1.Trim().Length > 0)
            {
                try
                {
                    if (selectionArray1.Trim().Length > 0)
                    {
                        ObjLista1 = (List<SS_HC_KardexEnfermeria>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_KardexEnfermeria>));
                    }
                    if (selectionArray2.Trim().Length > 0)
                    {
                        ObjLista2 = (List<SS_HC_KardexEnfermeriaDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_KardexEnfermeriaDetalle>));
                    }

                    SS_HC_KardexEnfermeria ObjSP;
                    SS_HC_KardexEnfermeriaDetalle ObjSPD;
                    SS_HC_KardexEnfermeria cabeceraMed = new SS_HC_KardexEnfermeria();
                    List<SS_HC_KardexEnfermeriaDetalle> listadetalleMed = new List<SS_HC_KardexEnfermeriaDetalle>();

                    foreach (SS_HC_KardexEnfermeria objEntity1 in ObjLista1)
                    {
                        ObjSP = new SS_HC_KardexEnfermeria();
                        ObjSP = objEntity1;
                        ObjSP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjSP.UsuarioModificacion = Convert.ToString(ENTITY_GLOBAL.Instance.IDAGENTE);
                        ObjSP.FechaModificacion = DateTime.Now;
                        ObjSP.Accion = "UPDATEX";
                        cabeceraMed = ObjSP;
                    }

                    foreach (SS_HC_KardexEnfermeriaDetalle objEntity2 in ObjLista2)
                    {
                        ObjSPD = new SS_HC_KardexEnfermeriaDetalle();
                        ObjSPD = objEntity2;
                        ObjSPD.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjSPD.UnidadReplicacionReferencia = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjSPD.IdEpisodioAtencionReferencia = objEntity2.IdEpisodioAtencion;
                        ObjSPD.EpisodioClinicoReferencia = objEntity2.EpisodioClinico;
                        if (objEntity2.FechaCorte != null & objEntity2.Estado == 4)
                        {
                            ObjSPD.FechaCorte = DateTime.Now;
                        }
                        if (objEntity2.Accion == "NUEVO" || objEntity2.Accion == "UPDATE")
                        {
                            if (objEntity2.UsuarioModificacion != null)
                            {
                                var horas = DateTime.Parse(objEntity2.UsuarioModificacion);
                                var fechaincio = Convert.ToDateTime(objEntity2.HoraInicioProg);
                                fechaincio = fechaincio.AddHours(horas.Hour);
                                ObjSPD.HoraInicioProg = fechaincio;
                            }
                            ObjSPD.UsuarioModificacion = Convert.ToString(ENTITY_GLOBAL.Instance.IDAGENTE);
                            ObjSPD.FechaModificacion = DateTime.Now;
                            ObjSPD.Accion = "UPDATEX";
                        }
                        else
                        {
                            if (objEntity2.UsuarioModificacion != null)
                            {
                                var horas = DateTime.Parse(objEntity2.UsuarioModificacion);
                                DateTime fechaincio = Convert.ToDateTime(objEntity2.HoraInicioProg);
                                fechaincio = fechaincio.AddHours(horas.Hour);
                                ObjSPD.HoraInicioProg = fechaincio;
                                ObjSPD.UsuarioModificacion = null;
                            }
                            ObjSPD.UsuarioCreacion = Convert.ToString(ENTITY_GLOBAL.Instance.IDAGENTE);
                            ObjSPD.FechaCreacion = DateTime.Now;
                            ObjSPD.Accion = "UPDATEX";
                        }
                        if (objEntity2.Version == "99")
                        {
                            ObjSPD.TipoComponente = "M";
                        }
                        listadetalleMed.Add(ObjSPD);
                    }
                    /********elimina**********/
                    if (Session["HC_SolMedicamentoDetListDELETE"] != null)
                    {
                        List<SS_HC_KardexEnfermeriaDetalle> listaDel = (List<SS_HC_KardexEnfermeriaDetalle>)Session["HC_SolMedicamentoDetListDELETE"];
                        foreach (var result2 in listaDel)
                        {
                            listadetalleMed.Add(result2);
                        }
                    }
                    /************/
                    int result = svcSS_HC_KardexEnfermeria.setMantenimiento(cabeceraMed, listadetalleMed);
                    if (result > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                           UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                           ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                           ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getOpcionDefault(string accion)
        {
            Log.Information("HClinicaControllerSup - getOpcionDefault - Entrar");
            bool encontrado = false;
            /************OBTENER OPCION POR DEFECTO DE CRONOLOGIA***ADD**21-02-17*ORLANDO***********/
            string codigo = "";
            SS_CHE_VistaSeguridad objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            objVistaSeguridad.Modulo = ENTITY_GLOBAL.Instance.MODULO;
            objVistaSeguridad.Accion = "LISTAPROCESOGENERAL";
            //objVistaSeguridad.Nivel = 2;
            List<SS_CHE_VistaSeguridad> lista = new List<SS_CHE_VistaSeguridad>();
            lista = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            if (lista.Count > 0)
            {
                foreach (SS_CHE_VistaSeguridad lista2 in lista)
                {
                    if (lista2.Descripcion == "DIAGNÓSTICO")
                    {
                        if (lista2.CodigoOpcion == "3012" || lista2.CodigoOpcion == "3425")
                        {
                            codigo = lista2.CodigoOpcion;
                        }
                    }
                }
                ENTITY_GLOBAL.Instance.OPCION_PROC_DEF = Convert.ToInt32(codigo);
            }
            /**************************************************************************************/
            return this.Direct(codigo);
        }

        public System.Web.Mvc.ActionResult terminarShowMensajeBox2(String idWindow, String message, String titulo, String tipo, String nombrefno)
        {
            Log.Information("HClinicaControllerSup - terminarShowMensajeBox2 - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            return showMensajeBox2(message, titulo, tipo, nombrefno);
        }
        /**MENSAJES*/

        public System.Web.Mvc.ActionResult showMensajeBox2(String message, String titulo, String tipo, String nombrefn)
        {
            Log.Information("HClinicaControllerSup - showMensajeBox2 - Entrar");

            X.Msg.Show(new MessageBoxConfig
           {
               Title = titulo,
               Message = message,
               Buttons = MessageBox.Button.OK,
               Icon = (MessageBox.Icon)Enum.Parse(typeof(MessageBox.Icon), tipo),

               Fn = new JFunction
               {
                   Fn = nombrefn//"accionFinal"
               }
           });
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getGrillaNicActividad(int start, int limit,
         string IdNic, string IdActividad, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaNicActividad - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_NICActividad>();
                var LocalEnty = new SS_HC_NICActividad();
                LocalEnty.IdNic = Convert.ToInt32(getValorFiltroStr(IdNic));
                LocalEnty.IdActividad = Convert.ToInt32(getValorFiltroStr(IdActividad));
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO")
                {
                    inicio = 0;
                    final = limit;
                }
                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcNicActividad.setMantenimientoNicActividad(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcNicActividad.listarNicActividad(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaNicActividadPAE(int start, int limit,
         string IdNanda, string IdNoc, string IdNic, string IdActividad, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaNicActividadPAE - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                int cantidad = 0;
                var Listar = new List<SS_HC_PAE_Actividad>();
                var LocalEnty = new SS_HC_PAE_Actividad();
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdNanda = Convert.ToInt32(getValorFiltroStr(IdNanda));
                LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));
                LocalEnty.IdNic = Convert.ToInt32(getValorFiltroStr(IdNic));
                LocalEnty.IdActividad = Convert.ToInt32(getValorFiltroStr(IdActividad));

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                return this.Store(Listar, cantidad);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }



        public System.Web.Mvc.ActionResult eventoAgregarHistoricoFormularioXY(
            string formato, string accion, string idWindow, Nullable<long> idEpiAtencionCopy,
            Nullable<int> idEpiClinicoCopy, string UnidadReplicacionCopy, String data)
        {
            Log.Information("HClinicaControllerSup - eventoAgregarHistoricoFormularioXY - Entrar");

            List<MA_MiscelaneosDetalle> dataSave = null;
            var varPasarDetalle = new MA_MiscelaneosDetalle();
            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));
            try
            {
                if (ObjListar != null)
                {
                    if (ObjListar.Count > 0)
                    {
                        foreach (MA_MiscelaneosDetalle objadd in ObjListar)
                        {
                            varPasarDetalle.CodigoElemento = objadd.CodigoElemento;
                            varPasarDetalle.ValorCodigo5 = objadd.ValorCodigo5;
                            varPasarDetalle.DescripcionLocal = objadd.DescripcionLocal;
                            varPasarDetalle.ValorCodigo1 = objadd.ValorCodigo1;
                            varPasarDetalle.ValorCodigo2 = objadd.ValorCodigo2;
                            varPasarDetalle.ValorCodigo3 = objadd.ValorCodigo3;
                            varPasarDetalle.ValorCodigo4 = objadd.ValorCodigo4;
                            varPasarDetalle.ValorCodigo7 = objadd.ValorCodigo7;
                            varPasarDetalle.ValorEntero1 = objadd.ValorEntero1;
                            varPasarDetalle.ValorEntero2 = objadd.ValorEntero2;
                            var txtComp = X.GetCmp<TextField>("RecepcionaRecursoX");
                            txtComp.SetValue(JSON.Serialize(varPasarDetalle));
                        }
                    }
                }
                return cerrarWindow(idWindow);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "EXC: eventoAgregarHistoricoFormularioXY");
            }
        }



        public System.Web.Mvc.ActionResult AdicionarIndicador(String MODO, String idNanda, String idNoc)
        {
            Log.Information("HClinicaControllerSup - AdicionarIndicador - Entrar");
            var objModel = new SS_HC_NOCIndicador();
            objModel.Accion = MODO;
            objModel.IdNoc = Convert.ToInt32(idNoc);
            objModel.Version = idNanda;
            return crearWindowRegistro("PAE/AdicionarIndicador", objModel, "");
        }


        public System.Web.Mvc.ActionResult getGrillaIndicadorPae(int start, int limit,
             string IdNoc, string IdNIN, string IdNanda, string descripcion, string codigo, bool tipo, string tipoBuscar)
        {
            Log.Information("HClinicaControllerSup - getGrillaIndicadorPae - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_NOCIndicador>();
                var LocalEnty = new SS_HC_NOCIndicador();
                LocalEnty.Descripcion = descripcion;
                if (tipo == true)
                {
                    LocalEnty.IdNoc = 0;
                }
                else
                {
                    LocalEnty.IdNoc = Convert.ToInt32(IdNoc);
                }
                if (codigo.Length > 0)
                {
                    LocalEnty.IdNIN = Convert.ToInt32(codigo);
                }
                else
                {
                    LocalEnty.IdNIN = 0;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcNocIndicador.setMantenimientoNocIndicador(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcNocIndicador.listarNocIndicador(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEP9916_LISTARNOTAS()
        {
            Log.Information("HClinicaControllerSup - CCEP9916_LISTARNOTAS - Entrar");

            try
            {
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "ENFER_ACTUAL";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult LogMessage(string msg)
        {
            Log.Information("HClinicaControllerSup - LogMessage - Entrar");

            // Log the message somewhere...
            var Listar = new List<SG_Agente>();
            SG_Agente objUsuario = new SG_Agente();
            objUsuario.IdAgente = Convert.ToInt32(msg);
            objUsuario.ACCION = "LISTAR";
            Listar = SvcSG_Agente.listarSG_Agente(objUsuario, 0, 0);

            if (Listar.Count > 0)
            {
                msg = Listar[0].Nombre;
            }

            return this.Direct(msg);
        }

        public System.Web.Mvc.ActionResult Save_MedicamentosEpi(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentosEpi - Entrar");

            List<SS_HC_Indicaciones_FE> ObjLista2 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjLista12 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjListaGuarda = new List<SS_HC_Indicaciones_FE>();
            if (Evento == "Temp")
            {
                if (ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP != null)
                {
                    ObjLista12 = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpi"];
                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista12)
                    {
                        if (ObjLista2.Count > 0)
                        {
                            if (ObjLista2[0].SecuenciaMedicamento != objEntity1.SecuenciaMedicamento)
                            {
                                if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                {
                                    objEntity1.Accion = "UPDATE";
                                }
                                ObjListaGuarda.Add(objEntity1);
                            }
                        }
                    }
                    Session["HC_MedicamentoDetalleListEpi"] = ObjListaGuarda;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    Session["HC_MedicamentoDetalleListEpi"] = ObjLista2;
                }
            }
            else if (Evento == "ListarDetalle")
            {
                Session["HC_MedicamentoID"] = Id;
                var nombreStore = "";
                if (idgrupo == 0)
                {
                    nombreStore = "storeExamenesDetalleIndic0";
                }
                else
                {
                    nombreStore = "storeExamenesDetalleIndicGrupo";
                }
                var store = X.GetCmp<Store>(nombreStore);
                store.Reload();
            }
            else if (Evento == "Server")
            {
                try
                {
                    List<SS_HC_Medicamento_FE> cabeceraMed = new List<SS_HC_Medicamento_FE>();
                    List<SS_HC_Indicaciones_FE> listadetalleMed = new List<SS_HC_Indicaciones_FE>();
                    List<SS_HC_Indicaciones_FE> listaTraceDetalleMed = new List<SS_HC_Indicaciones_FE>();
                    int IdSecuencia = 0;
                    addDataUpdateMedicamentos("UPDATEINDIV", selectionArray1, 1);
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_Medicamento_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;
                        if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        {
                            List<BE_Medicamento_FE> objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                            List<BE_Medicamento_FE> objListaMed2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi2"];
                            List<SS_HC_Indicaciones_FE> objListaMedDell = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpi"];
                            //med
                            foreach (BE_Medicamento_FE objEntity1 in objListaMed)
                            {
                                objEnt = new SS_HC_Medicamento_FE();
                                objEnt = objEntity1;
                                objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                                objEnt.Comentario = selectionArray2;
                                objEnt.Version = Version;
                                cabeceraMed.Add(objEnt);

                                SecuenciaMedica = objEnt.Secuencia; // si es individual

                                ////BLOQUE DELETE
                                if (Session["HC_MedicamentoDetalleListEpiDELETE"] != null)
                                {
                                    List<SS_HC_Indicaciones_FE> listaDel = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpiDELETE"];
                                    foreach (var result in listaDel)
                                    {
                                        listadetalleMed.Add(result);
                                    }
                                }
                                ////////////////
                                if (objEntity1.Accion != "DELETEINDIV")
                                {

                                    if (objListaMedDell != null)
                                    {

                                        if (objListaMedDell.Count > 0)
                                        {
                                            foreach (SS_HC_Indicaciones_FE objEntity2 in objListaMedDell)
                                            {
                                                if (objEntity2.GrupoMedicamento == 0)
                                                {

                                                    if (objEntity1.Secuencia == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                                else
                                                {
                                                    if (objEntity1.GrupoMedicamento == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica; //(int)objEntity1.GrupoMedicamento;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        IdSecuencia = SvcMedicamentoFE.setMantenimientoEpi2(new SS_HC_Medicamento_FE(), cabeceraMed, null, listaTraceDetalleMed, listadetalleMed);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registró ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        
                            Session["HC_MedicamentoListEpi"] = null;
                            Session["HC_MedicamentoDetalleListEpi"] = null;
                            Session["HC_MedicamentoDetalleListEpiDELETE"] = null;
                            eventoLoadPostFormulario(true, "storeExamenes0", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }



        public System.Web.Mvc.ActionResult addDataEliminarMedicamentos_201_3(string MODO, int id, int tipo, String hc)
        {
            Log.Information("HClinicaControllerSup - addDataEliminarMedicamentos_201_3 - Entrar");


            if (Session["HC_MedicamentoListEpi2"] != null)
            {


                if (id > 0)
                {
                    List<BE_MedicamentoEpicrisis_FE> objListaMed = null;
                    List<BE_MedicamentoEpicrisis_FE> objListaMedDetail = null;

                    if (tipo == 3 || tipo == 1)
                    {
                        objListaMed = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                    }
                    if (objListaMed != null)
                    {
                        foreach (var result in objListaMed)
                        {
                            if (result.Secuencia == id)
                            {
                                result.Accion = "DELETEINDIV";
                                break;
                            }
                        }
                    }
                }


            }
            else
            {


                if (id > 0)
                {
                    List<BE_Medicamento_FE> objListaMed = null;
                    List<BE_Medicamento_FE> objListaMedDetail = null;

                    if (tipo == 3 || tipo == 1)
                    {
                        objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    }
                    if (objListaMed != null)
                    {
                        foreach (var result in objListaMed)
                        {
                            if (result.Secuencia == id)
                            {
                                result.Accion = "DELETEINDIV";
                                break;
                            }
                        }
                    }
                }


            }

            return this.Direct();

        }








        public System.Web.Mvc.ActionResult addDataEliminarMedicamentos_201_2(string MODO, int id, int tipo)
        {
            Log.Information("HClinicaControllerSup - addDataEliminarMedicamentos_201_2 - Entrar");

            if (id > 0)
            {
                List<BE_Medicamento_FE> objListaMed = null;
                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;

                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                    if (tipo == 1)
                    {
                        objListaMedDetail = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpiDELETE"];
                        if (objListaMedDetail != null)
                        {

                        }
                    }
                }
                //else if (tipo == 2)
                //{
                //    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaList"];
                //}
                if (objListaMed != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Secuencia == id)
                        {
                            result.Accion = "DELETEINDIV";
                            break;
                        }
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_CCEP0201_2(BE_Medicamento_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Editar_MedicamentoTemp_CCEP0201_2 - Entrar");

            string mensage = "";
            var objLista = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoListEpi"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";

                //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));

                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");

                string nomvia = "";
                //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                var univia = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));


                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                foreach (BE_Medicamento_FE result in objLista)
                {
                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }

                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATEINDIV"; }


                    }
                    objLista2.Add(result);
                }
                Session["HC_MedicamentoListEpi"] = objLista2;
            }

            var store = X.GetCmp<Store>("storeExamenes0");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            txtAIndicacion.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");


            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");

        }

        public System.Web.Mvc.ActionResult Save_MedicamentoTempEpi201_2(BE_Medicamento_FE objMedicamento, String id)
        {
            Log.Information("HClinicaControllerSup - Save_MedicamentoTempEpi201_2 - Entrar");

            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (id == "")
                {
                    id = "0";
                }


                if ((objMedicamento.Dosis != null && objMedicamento.Cantidad != null && id == "0"))
                {
                    int registro = -1;
                    //


                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();

                    objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_Medicamento_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    //var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    string JSONstringTIEMPO = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_UNITIEMPO);
                    var unidadtiempo = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringTIEMPO, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }

                    }
                    string nomvia = "";
                    //var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    //foreach (var result in univia)
                    string JSONstringVIA = JsonConvert.SerializeObject(ENTITY_GLOBAL.Instance.Session_TIPOVIA);
                    List<SvcMiscelaneos.comboModelGenerico> listVIA = (List<SvcMiscelaneos.comboModelGenerico>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstringVIA, typeof(List<SvcMiscelaneos.comboModelGenerico>));
                    foreach (var result in listVIA)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToString(objMedicamento.Dosis); }
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + /*Convert.ToInt32(*/Math.Round((decimal)objMedicamento.Frecuencia, 2, MidpointRounding.AwayFromZero)/*)*/; }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                    objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                    objMedicamento.TipoReceta = ENTITY_GLOBAL.Instance.MODALIDAD_TEMP;

                    int regItems = 0;
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoListEpi"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoListEpi"] = objLista;
                    }

                    /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                        ActivaDescativaButtonSave(true);
                    }*/

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    var textd = "storeExamenes" + id;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel1");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("Dosis");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("Cantidad");
                    Cantidad.SetValue(0);
                    var IdVia = X.GetCmp<NumberField>("IdVia");
                    IdVia.SetValue(0);
                    var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                    IdUnidadMedida.SetValue(0);
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("Accion");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("Presentacion");
                    Presentacion.SetValue("");
                    var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
                    UnidadTiempo.SetValue(0);
                    var Periodo = X.GetCmp<NumberField>("Periodo");
                    Periodo.SetValue(0);
                    var TipoComida = X.GetCmp<NumberField>("TipoComida");
                    TipoComida.SetValue(0);
                    var Indicacion = X.GetCmp<TextField>("Indicacion");
                    Indicacion.SetValue("");

                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEP0201_2_MEDICAMENTO_EPI2(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaControllerSup - CCEP0201_2_MEDICAMENTO_EPI2 - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoListEpi"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo/* result.Linea.Trim()==linea*/)
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;

                        //objLista.AddRange(ListarCopy);
                        //Session["HC_MedicamentoList"] = objLista;

                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                        objLista.AddRange(ListarCopy);




                        objListaShow.AddRange(objLista);
                        Session["HC_MedicamentoListEpi"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAREPI2";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);


                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];



                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        ////
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///


                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";

                        objLista.Add(obtemp);


                    }
                    Session["HC_MedicamentoListEpi"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleListEpi"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<BE_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                   UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        //objLista.AddRange(ListarCopy);
                        //Session["HC_MedicamentoList"] = objLista;

                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                        objLista.AddRange(ListarCopy);

                        Session["HC_MedicamentoListEpi"] = objLista;

                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["HC_MedicamentoListEpi"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            objListaShow2.Add(result);
                        }
                    }

                    /*ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                        if (objetoGen != null)
                        {
                            List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoList"] = objListaShow;
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }*/
                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }




                return this.Store(objLista.ToList());
            }

        }

        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTO_EPI2(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaControllerSup - CCEP0304_MEDICAMENTO_EPI2 - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoListEpi"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo/* result.Linea.Trim()==linea*/)
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;

                        //objLista.AddRange(ListarCopy);
                        //Session["HC_MedicamentoList"] = objLista;

                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                        objLista.AddRange(ListarCopy);




                        objListaShow.AddRange(objLista);
                        Session["HC_MedicamentoListEpi"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAREPI2";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);


                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];



                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        ////
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///


                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";

                        objLista.Add(obtemp);


                    }
                    Session["HC_MedicamentoListEpi"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleListEpi"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<BE_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                   UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        //objLista.AddRange(ListarCopy);
                        //Session["HC_MedicamentoList"] = objLista;

                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                        objLista.AddRange(ListarCopy);

                        Session["HC_MedicamentoListEpi"] = objLista;

                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["HC_MedicamentoListEpi"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoListEpi"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            objListaShow2.Add(result);
                        }
                    }

                    /*ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                        if (objetoGen != null)
                        {
                            List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoList"] = objListaShow;
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }*/
                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }
                return this.Store(objLista.ToList());
            }

        }




        public System.Web.Mvc.ActionResult CCEP0201_2_MEDICAMENTO_EPI_LIST(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaControllerSup - CCEP0201_2_MEDICAMENTO_EPI_LIST - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var objLista = new List<BE_MedicamentoEpicrisis_FE>();
            var objListaEPI = new List<BE_MedicamentoEpicrisis_FE>();
            var objListaShow = new List<BE_MedicamentoEpicrisis_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();


            var objLista2COPY = new List<BE_MedicamentoEpicrisis_FE>();

            var objLista2Epicri = new List<BE_MedicamentoEpicrisis_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();
            var objListaShowEPI2 = new List<BE_MedicamentoEpicrisis_FE>();


            var objListSowDATACOPY = new List<BE_MedicamentoEpicrisis_FE>();


            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaEpicrisis = new List<SS_HC_Medicamento_FE_Epi2>();

            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();

            SS_HC_Medicamento_FE_Epi2 objEntEPICRISIS = new SS_HC_Medicamento_FE_Epi2();



            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
            /*objEnt.GrupoMedicamento = grupo;*/
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);



            objEntEPICRISIS.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEntEPICRISIS.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEntEPICRISIS.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEntEPICRISIS.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEntEPICRISIS.Accion = "LISTAREPI2";
            objEntEPICRISIS.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
            /*objEnt.GrupoMedicamento = grupo;*/
            objListaEpicrisis = SvcMedicamentoFE.MedicamentoListarEpicrisis(objEntEPICRISIS);


            String[] cadArray;
            if (objListaEpicrisis.Count > 0)
            {

                if (Session["HC_MedicamentoListEpi2"] != null && tipoRecurso == "1")
                {
                    objLista2Epicri = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                    foreach (var result in objLista2Epicri)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            objListaShowEPI2.Add(result);
                        }
                    }

                    //////////////////////////////////////////////*/
                    return this.Store(objListaShowEPI2.ToList());
                }
                else
                {



                    BE_MedicamentoEpicrisis_FE obtemp;
                    foreach (SS_HC_Medicamento_FE_Epi2 intobj in objListaEpicrisis)
                    {

                        obtemp = new BE_MedicamentoEpicrisis_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];

                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        ////
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///

                        obtemp.tipoRecetaMedica = intobj.tipoRecetaMedica;
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";

                        objListaEPI.Add(obtemp);


                    }
                    Session["HC_MedicamentoListEpi2"] = objListaEPI;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";


                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<BE_MedicamentoEpicrisis_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_MEDICAMENTOSEPICRISIS_F2, objListaEPI);


                        var objListaAnt2 = new List<SS_HC_Medicamento_FE_Epi2>();
                        if (objetoGen != null)
                        {


                            List<BE_MedicamentoEpicrisis_FE> ListarCopy = (List<BE_MedicamentoEpicrisis_FE>)objetoGen;
                            //objLista.AddRange(ListarCopy);
                            //Session["HC_MedicamentoList"] = objLista;
                            // List<BE_MedicamentoEpicrisis_FE> listaCopiaForm = (List<BE_MedicamentoEpicrisis_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<BE_MedicamentoEpicrisis_FE>));

                            objListSowDATACOPY.AddRange(ListarCopy);

                            int contador = 0;
                            foreach (var result in objListSowDATACOPY)
                            {
                                contador++;

                                result.Secuencia = contador;

                                objLista2COPY.Add(result);

                            }

                            // Session["HC_MedicamentoListEpi2"] = objListaEPI;

                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                        Session["HC_MedicamentoListEpi2"] = objLista2COPY;

                        return this.Store(objLista2COPY.ToList());
                    }
                    ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////
                    return this.Store(objListaEPI.ToList());




                }

            }
            else
            {



                if (Session["HC_MedicamentoListEpi2"] != null && tipoRecurso == "1")
                {
                    objLista = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];
                    foreach (var result in objLista)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo/* result.Linea.Trim()==linea*/)
                        {
                            objListaShow.Add(result);
                        }
                    }
                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                        if (objetoGen != null)
                        {
                            List<BE_MedicamentoEpicrisis_FE> ListarCopy = (List<BE_MedicamentoEpicrisis_FE>)objetoGen;
                            //objLista.AddRange(ListarCopy);
                            //Session["HC_MedicamentoList"] = objLista;
                            List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));
                            objLista.AddRange(ListarCopy);
                            objListaShow.AddRange(objLista);





                            Session["HC_MedicamentoListEpi2"] = objListaShow;
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }
                    ///////////////////////////////////////////////
                    return this.Store(objListaShow.ToList());
                }
                else
                {


                    BE_MedicamentoEpicrisis_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {

                        ENTITY_GLOBAL.Instance.INDICA_VALIDAMEDICAMENTO = 0;
                        obtemp = new BE_MedicamentoEpicrisis_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        ////
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "NUEVO";
                        objLista.Add(obtemp);


                    }
                    Session["HC_MedicamentoListEpi2"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                }

            }
            ///ADD LA OPCIÓN DE COPIA
            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {
                object objetoGen = (List<BE_MedicamentoEpicrisis_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
               UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                if (objetoGen != null)
                {
                    List<BE_MedicamentoEpicrisis_FE> ListarCopy = (List<BE_MedicamentoEpicrisis_FE>)objetoGen;
                    //objLista.AddRange(ListarCopy);
                    //Session["HC_MedicamentoList"] = objLista;

                    List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                    objLista.AddRange(ListarCopy);

                    Session["HC_MedicamentoListEpi2"] = objLista;


                }
                Session["COPIA_FORMULARIO"] = "INACTIVA";
            }
            ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

            return this.Store(objLista.ToList());


        }


        public System.Web.Mvc.ActionResult addEliminar_CCEP0201_2_MEDICAMENTODETALLEINDI(String accion, String codigo, String secuenciaMed, String secuenciaIndica)
        {
            Log.Information("HClinicaControllerSup - addEliminar_CCEP0201_2_MEDICAMENTODETALLEINDI - Entrar");

            List<SS_HC_Indicaciones_FE> listaDelete = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> listaSave = new List<SS_HC_Indicaciones_FE>();
            SS_HC_Indicaciones_FE objDelete = new SS_HC_Indicaciones_FE();
            if (Session["HC_MedicamentoDetalleListEpiDELETE"] != null)
            {
                listaDelete = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpiDELETE"];
            }
            if (Session["HC_MedicamentoDetalleListEpi"] != null && secuenciaIndica != null && secuenciaMed != null)
            {
                listaSave = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListEpi"];
                foreach (SS_HC_Indicaciones_FE objEntity1 in listaSave)
                {
                    if (objEntity1.Secuencia == Convert.ToInt32(secuenciaIndica) &&
                        objEntity1.SecuenciaMedicamento == Convert.ToInt32(secuenciaMed))
                    {
                        if ((objEntity1.Accion + "").Trim() != "NUEVO")
                        {
                            objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objDelete.SecuenciaMedicamento = objEntity1.SecuenciaMedicamento;
                            objDelete.Secuencia = objEntity1.Secuencia;
                            objDelete.Accion = accion;
                            listaDelete.Add(objDelete);
                        }
                        //////////////                        
                        listaSave.Remove(objEntity1);
                        break;
                    }
                }
                Session["HC_MedicamentoDetalleListEpiDELETE"] = listaDelete;
                Session["HC_MedicamentoDetalleListEpi"] = listaSave;
            }
            return this.Direct();
        }

    }
}