using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web.UI;
using Ext.Net;
using Ext.Net.MVC;
using SoluccionSalud.Entidades.Entidades;
using SoluccionSalud.RepositoryReport;
using Serilog;

namespace AppSaludMVC.Controllers
{

    using AppSaludMVC.Models;
    using SoluccionSalud.Service.FormulariosService;
    using System.Collections;
    using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
    using Microsoft.Practices.EnterpriseLibrary.Logging;
    using System.Data.SqlClient;
    using SoluccionSalud.Componentes;
    using System.Web;
    using SoluccionSalud.Service.VWEspecialidadMedicoService;
    using System.Diagnostics;
    using System.Data;
    using Newtonsoft.Json;
    using SoluccionSalud.Service.SeguridadAutorizacionService;
    using SoluccionSalud.Service.EpisodioAtencionService;
    using System.Threading;
    using System.Threading.Tasks;
    using Serilog;
    using System.CodeDom;
    using Microsoft.Ajax.Utilities;
    using System.Net.Http;
    using System.Configuration;
    using System.Net.Http.Formatting;
    using System.ServiceModel.Security.Tokens;
    using SoluccionSalud.Service.AccionesServiceRules;
    using SoluccionSalud.Service._FormularioNuevo;

    using SvcMiscelaneos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos;
    using SvcParametro = SoluccionSalud.Service.ParametroService.SvcParametro;
    //* Inicio - Agregado de Using Nuevo  
    // De los formularios Extras*   
    using SvcEpisodioClinico = SoluccionSalud.Service.EpisodioClinicoService.SvcEpisodioClinico;
    using SOA_AtencionesSpring = SoluccionSalud.Service.ServiciosAlternoSOA.SOA_AtencionesSpring;
    using SvcVw_AtencionPaciente = SoluccionSalud.Service.VW_ATENCIONPACIENTEService.SvcVw_AtencionPaciente;
    using SvcDescansoMedicoServiceFE = SoluccionSalud.Service._FormularioNuevo.SvcDescansoMedicoServiceFE;

    using SvcExamenSolicitadoServiceFE = SoluccionSalud.Service._FormularioNuevo.SvcExamenSolicitadoServiceFE;
    using SvcAlergiaService = SoluccionSalud.Service._FormularioNuevo.SvcAlergiaService;
    using SvcAlergia = SoluccionSalud.Service._FormularioNuevo.SvcAlergia;
    using SvcAnamnesisAFFEService = SoluccionSalud.Service._FormularioNuevo.SvcAnamnesisAFFEService;
    using SvcPersonaMast = SoluccionSalud.Service.PersonaMastService.SvcPersonaMast;
    using SvcEspecialidad = SoluccionSalud.Service.EspecialidadService.SvcEspecialidad;
    using svcSS_FA_SolicitudProducto = SoluccionSalud.Service.SS_FA_SolicitudProductos.svcSS_FA_SolicitudProducto;
    using SvcAuditoria = SoluccionSalud.Service.AuditoriaService.SvcAuditoria;

    using SvcVisorReportesHCE = AppSaludMVC.Reportes.VisorReportesHCE;


    using System.Web.Mvc;


    //* Fin - Agregado de Using Nuevo

    public class HClinicaController : HClinicaControllerSup
    {
        // GET: /HClinica/
        private double angle = 0;
        private double start = 0;

        public HClinicaController()
        {
        }

        /**FORMULARIOS II FASE*/
        /****FORMU: INTERCONSULTA - FORMU. EXTRA , MODIFICADA***/

        #region CCEPF319_Formulario

        public System.Web.Mvc.ActionResult CCEPF319_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF319_View - Entrar");
                var LocalEnty = new SS_HC_Nota_Ingreso_FE();
                var Listar = new List<SS_HC_Nota_Ingreso_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcNotaIngresoService.lista_Cabecera(LocalEnty);
                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Nota_Ingreso_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                        if (ENTITY_GLOBAL.Instance.MedicoNombre != null)
                        {
                            LocalEnty.UsuarioCreacion = (string)ENTITY_GLOBAL.Instance.MedicoNombre;

                        }
                    }
                }
                Session["Accion_201_3"] = LocalEnty.Accion;
                Session["SEC_TOP_90"] = 0;
                Session["Data_ExamenSolicitadoDelete"] = null;
                Session["DataDianosticoValoracionDelete"] = null;
                Session["Session_ExamenNotadeIngreso"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF319_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult GetPlants2(int start, string tipoBuscar, string tipofiltro, int limit, int page, string query)
        {
            // Paging<MA_MiscelaneosDetalle> plants = SvcMiscelaneos.GetUpListadoServicios(start, limit, "", "", query);
            Log.Information("HClinicaController - GetPlants2 - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<MA_MiscelaneosDetalle>();
            var LocalEnty = new MA_MiscelaneosDetalle();
            int cantElementos = 0;
            if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO.Trim() != "0000")
            {
                LocalEnty.CodigoTabla = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;

                //LocalEnty.CodigoElemento = node.Trim();
                //objMiscelaneos

                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO;
                if (tipofiltro == "CO")
                {
                    /// LocalEnty.CodigoElemento = null;
                    LocalEnty.CodigoElemento = query;
                }
                else
                {
                    LocalEnty.CodigoElemento = query;
                    //   LocalEnty.CodigoElemento = null;
                }
                LocalEnty.ValorNumerico = 1; //OBS tipo de folder
                //LocalEnty.ACCION = "NIVEL2";

                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                //LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                //LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION;



                //    LocalEnty.ValorCodigo4 = Linea;
                //  LocalEnty.ValorCodigo5 = Familia;

                //     LocalEnty.ValorCodigo2 = Servicio;
                LocalEnty.ACCION = "DIAGNOSTICOS2";
                LocalEnty.ValorCodigo1 = null;
                // LocalEnty.ValorCodigo2 = "ACTIVO";
                //if (Stock == "1")
                //{
                //    LocalEnty.ValorEntero7 = 1;

                //}
                //else { LocalEnty.ValorEntero7 = 0; }

                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
                //cantElementos = SvcMiscelaneos.setMantenimiento(LocalEnty);
                if (Listar.Count > 0)
                {
                    cantElementos = Convert.ToInt32(Listar[0].ValorEntero7); //AUX PARA EL CONTADOR
                    //LocalEnty.ACCION = "BUSCARSERVICIOS";
                    //Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
                }
            }
            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult CCEPF319_DIAGNOSTICO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF319_DIAGNOSTICO - Entrar");

                List<SS_HC_NotaIngreso_Diagnostico_FE> listDiagnostico = new List<SS_HC_NotaIngreso_Diagnostico_FE>();
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGN_NOTA_F";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        //Listar[x].ACCION = "UPDATEDETALLE";
                        var ObjDi = new SS_HC_NotaIngreso_Diagnostico_FE();

                        // if (objEntity.ACCION.Trim() == null) { }

                        if (objEntity.CodigoTabla.Trim() == "INSERTDETALLE")
                        {
                            ObjDi.Accion = "EXISTE_INSERTDETALLE";
                        }
                        else if (objEntity.CodigoTabla.Trim() == "UPDATE")
                        {
                            ObjDi.Accion = "UPDATE";
                        }


                        ObjDi.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        ObjDi.Codigo = objEntity.ValorCodigo1;
                        ObjDi.DiagnosticoDescripcion = objEntity.ValorCodigo2;
                        ObjDi.DeterminacionDiagnostica = objEntity.ValorCodigo3;
                        ObjDi.GradoAfeccion = objEntity.ValorCodigo4;
                        ObjDi.IdDiagnosticoPrincipal = objEntity.ValorEntero5;

                        listDiagnostico.Add(ObjDi);

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_90"])
                        {
                            Session["SEC_TOP_90"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIAGNOSTICO_F2, Listar);
                    if (objetoGen != null)
                    {
                        int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        foreach (var objEntity in ListarCopy)
                        {
                            ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                            ListarCopy[x].ACCION = "NUEVO";

                            CODIGOTEMP = CODIGOTEMP + 1;
                            x = x + 1;
                        }

                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }
                ///////////////////////////////////////////////
                return this.Store(listDiagnostico.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF319_EXAMEN_APOYO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF319_EXAMEN_APOYO - Entrar");



                List<SS_HC_NotaIngreso_Diagnostico_FE> listaDiag = new List<SS_HC_NotaIngreso_Diagnostico_FE>();

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "ORDENINTER_319_FE";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        //   Listar[x].ACCION = "UPDATEDETALLE";
                        var objNota = new SS_HC_NotaIngreso_Diagnostico_FE();

                        if (objEntity.CodigoTabla.Trim() == "NUEVO")
                        {
                            objNota.Accion = "INSERTADO";
                        }


                        objNota.Codigo = objEntity.ValorCodigo4;
                        objNota.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        objNota.DiagnosticoDescripcion = objEntity.ValorCodigo1;

                        listaDiag.Add(objNota);







                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_90"])
                        {
                            Session["SEC_TOP_90"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }


                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIAGNOSTICO_F2, Listar);
                    if (objetoGen != null)
                    {
                        int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        foreach (var objEntity in ListarCopy)
                        {
                            ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                            ListarCopy[x].ACCION = "NUEVO";

                            CODIGOTEMP = CODIGOTEMP + 1;
                            x = x + 1;
                        }

                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }
                ///////////////////////////////////////////////
                return this.Store(listaDiag.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult addEliminar_DianosticoValoracionCCEPF319(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - addEliminar_DianosticoValoracionCCEPF319 - Entrar");
            List<SS_HC_NotaIngreso_Diagnostico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataDianosticoValoracionDelete"] != null)
                {
                    dataDelete = (List<SS_HC_NotaIngreso_Diagnostico_FE>)Session["DataDianosticoValoracionDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_NotaIngreso_Diagnostico_FE>();
                }
                SS_HC_NotaIngreso_Diagnostico_FE objDelete = new SS_HC_NotaIngreso_Diagnostico_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    // objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataDianosticoValoracionDelete"] = dataDelete;


                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF319_Eliminar_ExamenNotaIngreso(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF319_Eliminar_ExamenNotaIngreso - Entrar");
            List<SS_HC_NotaIngreso_ExamenApoyo_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_ExamenNotadeIngreso"] != null)
                {
                    dataDelete = (List<SS_HC_NotaIngreso_ExamenApoyo_FE>)Session["Session_ExamenNotadeIngreso"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_NotaIngreso_ExamenApoyo_FE>();
                }
                SS_HC_NotaIngreso_ExamenApoyo_FE objDelete = new SS_HC_NotaIngreso_ExamenApoyo_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_ExamenNotadeIngreso"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_F319(String selectionArray0, String selectionArray2, String selectionArray3, string Evento, String Version)
        {

            Log.Information("HClinicaController - Save_F319 - Entrar");

            List<SS_HC_NotaIngreso_ExamenApoyo_FE> ObjLista2 = new List<SS_HC_NotaIngreso_ExamenApoyo_FE>();
            List<SS_HC_NotaIngreso_Diagnostico_FE> ObjLista3 = new List<SS_HC_NotaIngreso_Diagnostico_FE>();
            List<SS_HC_Nota_Ingreso_FE> ObjLista0 = new List<SS_HC_Nota_Ingreso_FE>();

            SS_HC_Nota_Ingreso_FE objAnamEA = new SS_HC_Nota_Ingreso_FE();

            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {


                    List<SS_HC_NotaIngreso_ExamenApoyo_FE> listaPrincipal = new List<SS_HC_NotaIngreso_ExamenApoyo_FE>();
                    List<SS_HC_NotaIngreso_Diagnostico_FE> listaSecundario = new List<SS_HC_NotaIngreso_Diagnostico_FE>();


                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_Nota_Ingreso_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Nota_Ingreso_FE>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.Fecha = ObjLista0[0].Fecha;
                    objAnamEA.Hora = ObjLista0[0].Hora;
                    objAnamEA.GradoAsistencia = ObjLista0[0].GradoAsistencia;
                    objAnamEA.MotivoIngreso = ObjLista0[0].MotivoIngreso;
                    objAnamEA.GradoAsistencia_Enfermedad = ObjLista0[0].GradoAsistencia_Enfermedad;
                    objAnamEA.CursoEnfermedad = ObjLista0[0].CursoEnfermedad;
                    objAnamEA.TiempoEnfermedad = ObjLista0[0].TiempoEnfermedad;
                    objAnamEA.TiempoEnfermedadUnidad = ObjLista0[0].TiempoEnfermedadUnidad;
                    objAnamEA.RelatoCronologico = ObjLista0[0].RelatoCronologico;
                    objAnamEA.PresionArterialMSD1 = ObjLista0[0].PresionArterialMSD1;
                    objAnamEA.PresionArterialMSD2 = ObjLista0[0].PresionArterialMSD1;

                    objAnamEA.PresionArterialMSI = ObjLista0[0].PresionArterialMSI;
                    objAnamEA.PresionArterialMS2 = ObjLista0[0].PresionArterialMS2;
                    objAnamEA.FrecuenciaCardiaca = ObjLista0[0].FrecuenciaCardiaca;
                    objAnamEA.FrecuenciaRespiratoria = ObjLista0[0].FrecuenciaRespiratoria;
                    objAnamEA.Temperatura = ObjLista0[0].Temperatura;
                    objAnamEA.SaturacionOxigeno = ObjLista0[0].SaturacionOxigeno;
                    objAnamEA.Fi02 = ObjLista0[0].Fi02;
                    objAnamEA.FrecuenciaCardFetal_Flag = ObjLista0[0].FrecuenciaCardFetal_Flag;
                    objAnamEA.FrecuenciaCard_FetalAdd = ObjLista0[0].FrecuenciaCard_FetalAdd;

                    objAnamEA.Peso = ObjLista0[0].Peso;
                    objAnamEA.Talla = ObjLista0[0].Talla;
                    objAnamEA.IMC = ObjLista0[0].IMC;
                    objAnamEA.Antecedentes_Importancia = ObjLista0[0].Antecedentes_Importancia;
                    objAnamEA.Examen_Fisico = ObjLista0[0].Examen_Fisico;
                    objAnamEA.Plantrabajo_Inicial = ObjLista0[0].Plantrabajo_Inicial;
                    objAnamEA.Cristerios_Hospitalizacion = ObjLista0[0].Cristerios_Hospitalizacion;
                    objAnamEA.Comentarios = ObjLista0[0].Comentarios;
                    objAnamEA.Version = ObjLista0[0].Version;
                    objAnamEA.Estado = 2;
                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.FechaCreacion = DateTime.Now;
                    objAnamEA.FechaModificacion = DateTime.Now;
                    objAnamEA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    //objAnamEA.Version

                    //objAnamEA.Accion = (string)Session["Accion_402"];

                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (Session["Session_ExamenNotadeIngreso"] != null)
                        {
                            List<SS_HC_NotaIngreso_ExamenApoyo_FE> listaDel = (List<SS_HC_NotaIngreso_ExamenApoyo_FE>)Session["Session_ExamenNotadeIngreso"];
                            foreach (var result in listaDel)
                            {
                                listaPrincipal.Add(result);
                            }
                        }


                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_NotaIngreso_ExamenApoyo_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_NotaIngreso_ExamenApoyo_FE>));


                            foreach (var algo in ObjLista2)
                            {
                                SS_HC_NotaIngreso_ExamenApoyo_FE temp = new SS_HC_NotaIngreso_ExamenApoyo_FE();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.Accion = algo.Accion;//ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                temp.CodigoSegus = algo.CodigoSegus;
                                temp.Secuencia = algo.Secuencia;
                                temp.TipoOrdenAtencion = algo.TipoOrdenAtencion;

                                temp.IndicadorEPS = algo.IndicadorEPS;
                                temp.CodigoComponente = algo.CodigoComponente;
                                temp.ExamenDescripcion = algo.ExamenDescripcion;

                                temp.Version = ObjLista0[0].Version;

                                temp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.FechaCreacion = DateTime.Now;
                                temp.FechaModificacion = DateTime.Now;
                                listaPrincipal.Add(temp);

                            }

                        }



                        if (Session["DataDianosticoValoracionDelete"] != null)
                        {
                            List<SS_HC_NotaIngreso_Diagnostico_FE> listaDel = (List<SS_HC_NotaIngreso_Diagnostico_FE>)Session["DataDianosticoValoracionDelete"];
                            foreach (var result in listaDel)
                            {
                                listaSecundario.Add(result);
                            }
                        }

                        if (selectionArray3.Trim().Length > 0)
                        {
                            ObjLista3 = (List<SS_HC_NotaIngreso_Diagnostico_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_NotaIngreso_Diagnostico_FE>));


                            foreach (var algo in ObjLista3)
                            {
                                SS_HC_NotaIngreso_Diagnostico_FE temp = new SS_HC_NotaIngreso_Diagnostico_FE();
                                //temp = algo;

                                if (algo.Accion == "EXISTE_INSERTDETALLE")
                                {
                                    temp.Accion = "UPDATE"
;
                                }
                                else if (algo.Accion == "UPDATE")
                                {
                                    temp.Accion = "UPDATE";
                                }
                                else
                                {
                                    temp.Accion = "NUEVO";
                                }

                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

                                temp.Codigo = algo.Codigo;
                                temp.Secuencia = algo.Secuencia;
                                temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                temp.DeterminacionDiagnostica = algo.DeterminacionDiagnostica;
                                temp.GradoAfeccion = algo.GradoAfeccion;
                                temp.IdDiagnosticoPrincipal = algo.IdDiagnosticoPrincipal;
                                temp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.FechaCreacion = DateTime.Now;
                                temp.FechaModificacion = DateTime.Now;
                                temp.Version = ObjLista0[0].Version;
                                listaSecundario.Add(temp);

                            }

                        }


                        // }

                        IdSecuencia = SvcNotaIngresoService.setMantenimiento(objAnamEA, listaPrincipal, listaSecundario);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);     

                            Session["Data_SS_HC_DiagnosticoDelete"] = null;
                            Session["Data_SS_HC_SecundarioDelete"] = null;
                            Session["Data_SS_HC_PrincipalDelete"] = null;




                            eventoLoadPostFormulario(true, "storeBalanceNeo1", null);
                            //ActivaDescativaButtonSave(true);

                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            //LoadFormatos(containerIds, textSd);

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }


        #endregion

        #region CCEP0F90_Formulario

        public System.Web.Mvc.ActionResult CCEP0F90_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEP0F90_View - Entrar");
                var LocalEnty = new SS_HC_Diagnostico_FE();
                var Listar = new List<SS_HC_Diagnostico_FE>();
                LocalEnty.Accion = "LISTAR";
                ENTITY_GLOBAL.Instance.bitacora = 3;
                Session["SEC_TOP_90"] = 0;
                Session["SEC_F90"] = "1";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim(); // SE AGREGRO
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    Listar = SvcDiagnosticoFE.DiagnosticoListar(LocalEnty);
                    bool hallado = false;

                    if (SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA == 0
                        //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 2
                        //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 3
                        )
                    {

                        if (Listar.Count > 0)
                        {


                            foreach (SS_HC_Diagnostico_FE objEntity in Listar)
                            {
                                LocalEnty = objEntity;
                                LocalEnty.Accion = "UPDATE";
                                hallado = true;
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                                {
                                    LocalEnty.Accion = "VISTA";
                                }
                                else
                                {
                                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                }
                            }
                        }
                        if (!hallado)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                                LocalEnty.Accion = "NUEVO";

                            }
                        }
                        if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                        }
                    }
                    else
                    {
                        if (Listar.Count > 0)
                        {


                            foreach (SS_HC_Diagnostico_FE objEntity in Listar)
                            {
                                LocalEnty = objEntity;
                                LocalEnty.Accion = "UPDATE";
                                hallado = true;
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                                {
                                    LocalEnty.Accion = "VISTA";
                                }
                                else
                                {
                                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                }
                            }
                        }
                        if (!hallado)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                                LocalEnty.Accion = "NUEVO";

                            }
                        }
                        if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                        }
                    }

                    ////////////


                }
                else
                {
                    //ADD 11/15 : ESTADO = 100 : Selección del Formulario desde las Cronologías
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEP0F90_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult GetPlants(int start, string tipoBuscar, string tipofiltro, int limit, int page, string query)
        {
            // Paging<MA_MiscelaneosDetalle> plants = SvcMiscelaneos.GetUpListadoServicios(start, limit, "", "", query);
            Log.Information("HClinicaController - GetPlants - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<MA_MiscelaneosDetalle>();
            var LocalEnty = new MA_MiscelaneosDetalle();
            int cantElementos = 0;
            if (ENTITY_GLOBAL.Instance.MENUREC_CODIGO.Trim() != "0000")
            {
                LocalEnty.CodigoTabla = ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF327" ? "DD000" : ENTITY_GLOBAL.Instance.MENUREC_CODIGO;

                //LocalEnty.CodigoElemento = node.Trim();
                //objMiscelaneos

                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF327" ? "CCEP0F90" : ENTITY_GLOBAL.Instance.CONCEPTO;
                if (tipofiltro == "CO")
                {
                    /// LocalEnty.CodigoElemento = null;
                    LocalEnty.CodigoElemento = query;
                }
                else
                {
                    LocalEnty.CodigoElemento = query;
                    //   LocalEnty.CodigoElemento = null;
                }
                LocalEnty.ValorNumerico = 1; //OBS tipo de folder
                //LocalEnty.ACCION = "NIVEL2";

                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                //LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.MENUREC_CODIGO;
                //LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION;



                //    LocalEnty.ValorCodigo4 = Linea;
                //  LocalEnty.ValorCodigo5 = Familia;

                //     LocalEnty.ValorCodigo2 = Servicio;
                LocalEnty.ACCION = "DIAGNOSTICOS2";
                LocalEnty.ValorCodigo1 = null;
                // LocalEnty.ValorCodigo2 = "ACTIVO";
                //if (Stock == "1")
                //{
                //    LocalEnty.ValorEntero7 = 1;

                //}
                //else { LocalEnty.ValorEntero7 = 0; }

                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
                //cantElementos = SvcMiscelaneos.setMantenimiento(LocalEnty);
                if (Listar.Count > 0)
                {
                    cantElementos = Convert.ToInt32(Listar[0].ValorEntero7); //AUX PARA EL CONTADOR
                    //LocalEnty.ACCION = "BUSCARSERVICIOS";
                    //Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
                }
            }
            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult CCEP0F90_DIAGNOSTICO()
        {
            try
            {
                Log.Information("HClinicaController - CCEP0F90_DIAGNOSTICO - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGNOSTICOFE";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 && Session["SEC_F90"] == "1")
                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 && ENTITY_GLOBAL.Instance.TIPOATENCION != "1")
                {

                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        if (SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA == 0
                            //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 2
                            //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 3
                            )
                        {
                            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                        }

                    }
                }
                if (SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA == 0
                    //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 2
                    //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 3
                    )
                {
                    if (Listar.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar)
                        {
                            Listar[x].ACCION = "UPDATEDETALLE";

                            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_90"])
                            {
                                Session["SEC_TOP_90"] = Convert.ToInt32(Listar[x].CodigoElemento);
                            }
                            x = x + 1;
                        }
                    }
                }
                else
                {

                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIAGNOSTICO_F2, Listar);
                    if (objetoGen != null)
                    {
                        int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        foreach (var objEntity in ListarCopy)
                        {
                            ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                            ListarCopy[x].ACCION = "NUEVO";

                            CODIGOTEMP = CODIGOTEMP + 1;
                            x = x + 1;
                        }

                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }
                Session["SEC_F90"] = "";
                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addEliminar_DianosticoValoracionCCEP0F90(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - addEliminar_DianosticoValoracionCCEP0F90 - Entrar");
            List<SS_HC_Diagnostico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataDianosticoValoracionDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Diagnostico_FE>)Session["DataDianosticoValoracionDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Diagnostico_FE>();
                }
                SS_HC_Diagnostico_FE objDelete = new SS_HC_Diagnostico_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataDianosticoValoracionDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message + " Data Error ::" + Newtonsoft.Json.JsonConvert.SerializeObject(objDelete));
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_DianosticoValoracionCCEP0F90(String selection, string text)
        {
            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    Log.Information("HClinicaController - Save_DianosticoValoracionCCEP0F90 - Entrar");
                    /////TRANSACTION
                    List<SS_HC_Diagnostico_FE> listaCab = new List<SS_HC_Diagnostico_FE>();
                    List<SS_HC_Diagnostico_FE> listaDetalle = new List<SS_HC_Diagnostico_FE>();
                    var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;
                    //var firmaInt = firmita.Length;
                    var firmaInt = 0;
                    int registro = -1;
                    string mensage = "";
                    var Envio = new List<MA_MiscelaneosDetalle>();
                    SS_HC_Diagnostico_FE Entity;

                    string cadenas = "";
                    String[] cadArray;

                    Entity = new SS_HC_Diagnostico_FE();

                    //BLOQUE DELETE
                    List<SS_HC_Diagnostico_FE> dataDelete = null;
                    if (Session["DataDianosticoValoracionDelete"] != null)
                    {
                        dataDelete = (List<SS_HC_Diagnostico_FE>)Session["DataDianosticoValoracionDelete"];
                    }
                    if (dataDelete != null)
                    {
                        foreach (var objDel in dataDelete)
                        {
                            listaDetalle.Add(objDel);
                        }
                    }
                    ////////////

                    if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA" && ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION_EMER == "Interconsulta")
                    {
                        int response2 = 0;
                        var objGenral2 = new SS_HCE_ConsultaExterna();
                        objGenral2.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        objGenral2.Linea = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        objGenral2.Accion = "DELETE_DIAG_INT";

                        response2 = SOA_AtencionesSpring.ListaConsultaExternaEmergencia(objGenral2);
                    }

                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                    {
                        Entity = new SS_HC_Diagnostico_FE();
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                        {
                            Entity.Accion = ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 ? ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION : objEntity.ACCION;
                        }
                        else
                        {
                            Entity.Accion = objEntity.ACCION;
                        }
                        Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        Entity.Version = "CCEP0F90";
                        cadArray = objEntity.ValorCodigo1.Trim().Split('|');

                        var countara = cadArray.Count();
                        if (countara != 2)
                        {
                            this.GetCmp<TextField>("txtdata").Text = "error";
                            return showMensajeNotify("Advertencia", "Debe Ingresar un Diagnostico Correcto", "ERROR");
                        }
                        else
                        {

                            this.GetCmp<TextField>("txtdata").Text = "";
                        }


                        cadenas = cadArray[1].Replace("[", "");
                        cadenas = cadenas.Replace("]", "").Trim();
                        Entity.IdDiagnostico = Convert.ToInt32(cadenas);
                        Entity.DeterminacionDiagnostica = objEntity.ValorCodigo2.Trim();

                        Entity.IdDiagnosticoPrincipal = Convert.ToInt32(objEntity.ValorCodigo3.Trim());
                        Entity.GradoAfeccion = objEntity.ValorCodigo4.Trim();
                        Entity.TipoAntecedente = objEntity.ValorCodigo5.Trim();

                        //if (objEntity.ValorCodigo6.Length > 249)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "El campo Observaciones solo admite 250 caracteres.", "ERROR", false);

                        //    //eventoPostFormulario(false, "");
                        //    //return showMensajeNotify("Error", "El campo Observaciones solo admite 250 caracteres.", "ERROR");
                        //}

                        Entity.Observacion = objEntity.ValorCodigo6.Trim();
                        Entity.IndicadorPreExistencia = objEntity.ValorEntero5;
                        Entity.IndicadorCronico = objEntity.ValorEntero6;
                        Entity.IndicadorNuevo = objEntity.ValorEntero7;
                        Entity.DetalleDiagnostico = objEntity.ValorEntero8;
                        Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        Entity.FechaCreacion = DateTime.Now;
                        Entity.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        Entity.FechaModificacion = DateTime.Now;
                        Entity.Estado = 2;
                        if (objEntity.ACCION != "NUEVO")
                        {
                            Entity.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                        }
                        listaDetalle.Add(Entity);
                    }
                    //TRANSACT
                    registro = SvcDiagnosticoFE.setMantenimiento(new SS_HC_Diagnostico_FE(), null, listaDetalle);

                    SS_HC_Diagnostico_FE Local = new SS_HC_Diagnostico_FE();
                    List<SS_HC_Diagnostico_FE> Listar = new List<SS_HC_Diagnostico_FE>();
                    Local.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    Local.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    Local.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    Local.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    Local.Accion = "LISTAR";
                    Listar = SvcDiagnosticoFE.DiagnosticoListar(Local);

                    List<SS_IT_SaludDiagnosticoIngreso> ListaMirth = new List<SS_IT_SaludDiagnosticoIngreso>();
                    foreach (SS_HC_Diagnostico_FE objEntity in Listar)
                    {
                        if (objEntity.Accion != "DELETE")
                        {
                            SS_IT_SaludDiagnosticoIngreso EntyMIrth = new SS_IT_SaludDiagnosticoIngreso();
                            EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            EntyMIrth.Secuencia = objEntity.Secuencia;
                            EntyMIrth.IdDiagnostico = objEntity.IdDiagnostico;
                            if (objEntity.DeterminacionDiagnostica.Trim() == "1")
                            {
                                EntyMIrth.Determinacion = "P";
                            }
                            else
                            {
                                EntyMIrth.Determinacion = "D";
                            }
                            EntyMIrth.TIPOORDENATENCION = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;
                            EntyMIrth.ObservacionDIAGNOSTICO = objEntity.Observacion;
                            EntyMIrth.TIPOIT = "M";
                            EntyMIrth.UsuarioCreacion = Entity.UsuarioCreacion;
                            EntyMIrth.FechaCreacion = Entity.FechaCreacion;
                            EntyMIrth.UsuarioModificacion = Entity.UsuarioModificacion;
                            EntyMIrth.FechaModificacion = Entity.FechaModificacion;
                            EntyMIrth.Estado = Entity.Estado;
                            ListaMirth.Add(EntyMIrth);
                        }
                    }

                    SS_HC_AuditRoyal objAudit = new SS_HC_AuditRoyal();
                    Boolean rrr = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_DiagnosticoIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                    dynamic DataKey;
                    DataKey = new
                    {
                        UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                        IdEpisodioAtencion = ENTITY_GLOBAL.Instance.IdEpisodioAtencion,
                        EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico,
                        IdPaciente = ENTITY_GLOBAL.Instance.PacienteID,
                        IdMedico = ENTITY_GLOBAL.Instance.IdMedico
                    };
                    objAudit.PrimaryKeyData = Newtonsoft.Json.JsonConvert.SerializeObject(DataKey);
                    objAudit.Aplicacion = ENTITY_GLOBAL.Instance.APPCODIGO;
                    objAudit.Modulo = ENTITY_GLOBAL.Instance.MODULO;
                    objAudit.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                    objAudit.HostName = ENTITY_GLOBAL.Instance.HostName;
                    objAudit.TableName = "SaludDiagnosticoIngreso";
                    objAudit.Type = "N";
                    objAudit.UpdateDate = DateTime.Now;
                    objAudit.VistaData = Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth);
                    objAudit.Accion = "INSERT";
                    SvcAuditoria.setMantenimiento(objAudit);

                    //if (registro == 0)
                    //{
                    //    return showMensajeNotifyData("Advertencia", "Comunicarse con el area de sistemas.", "INFO", false);
                    //}

                    if (dataDelete != null)
                    {
                        DataTable dtValida = new DataTable();
                        HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                        HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
                        String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                        (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                        if (PARAM == "S")
                        {
                            WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            // (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            WsEpisodio.UsuarioCreacion = "DELETEDIAX";
                            WsEpisodio.FechaCreacion = DateTime.Now;
                            WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        }
                        else
                        {
                            dtValida.Columns.Add("CustLName", typeof(String));
                            dtValida.Columns.Add("CustFName", typeof(String));
                            dtValida.Columns.Add("Purchases", typeof(String));
                            dtValida.Columns.Add("CustLName2", typeof(String));
                            dtValida.Columns.Add("CustFName2", typeof(String));
                            dtValida.Columns.Add("Purchases2", typeof(String));
                        }
                        foreach (var objDel in dataDelete)
                        {
                            WsEpisodio.IdEpisodioAtencion = objDel.IdDiagnostico;
                            dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                        }
                    }

                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                        UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                        Session["COPIA_FORMULARIO"] = null;
                        Session["DATA_COPIA_FORM"] = null;
                        Session["DataDianosticoValoracionDelete"] = null;
                        Session["CON_DATA_1"] = null;
                        Session["CON_DATA_2"] = null;

                        //var containerIds = "PanelCenter";
                        //var textSd = Convert.ToString(ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL);

                        //eventoLoadPostFormulario(true, "storeValoracion", null);
                        eventoLoadPostFormulario(true, "storeMedNut", null); //Mateo Pizarro

                        eventoPostFormulario(true, "");
                        //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        //LoadFormatos(containerIds, textSd);

                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                        {
                            string containertemp = (string)Session["containerIdTemp"];
                            string txttemp = (string)Session["textTemp"];
                            LoadFormatos(containertemp, txttemp);
                            this.GetCmp<TextField>("txtdata").Text = "";

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }

                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", "Comunicarse con el Area de Sistemas, No se ingresaron datos para guardar.", "ERROR");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", "Comunicarse con el area de sistemas. " + mostrarExc, "ERROR");
                    throw;
                }
            }
            return this.Direct();
        }

        #endregion

        #region CCEPF100_Formulario
        public System.Web.Mvc.ActionResult CCEPF100_View()
        {
            Log.Information("HClinicaController - CCEPF100_View - Entrar");
            ENTITY_GLOBAL.Instance.INDICA_FORM = 2;
            ENTITY_GLOBAL.Instance.bitacora = 3;
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
            var LocalEnty = new BE_Medicamento_FE();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = 2; //para Medicina
            bool hallado = false;
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
            objEnt.TipoMedicamento = 3;
            objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
            objListaAnt.AddRange(objListaAnt2);

            if (objListaAnt.Count > 0)
            {
                int contador = 0;

                foreach (SS_HC_Medicamento_FE objEntity in objListaAnt)
                {
                    LocalEnty = new BE_Medicamento_FE();
                    hallado = true;
                    LocalEnty.Accion = "UPDATE";
                    // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }
            }
            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                }

            }

            List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();

            var LocalEntyAuto = new SY_SeguridadAutorizaciones();

            LocalEntyAuto.AplicacionCodigo = "SY";
            // int inicio = Convert.ToInt32(IdAgente);
            int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;

            LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

            CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);


            for (int x = 0; x < CodigoAlma.Count(); x++)
            {
                string val = CodigoAlma[x].MasterBrowseFlag;
                string COD = CodigoAlma[x].Concepto;
                if (val.Trim() == "1")
                {
                    Session["OPCIONALMACENDIETAS"] = COD.Trim();
                }
                else
                {

                }
            }

            Session["HC_MedicamentoDietaList"] = null; //OBS
            Session["HC_MedicamentoDietaTemporal"] = null; //OBS
            Session["HC_MedicamentoList"] = null; //OBS  
            Session["Session_HC_MedicamentoDetalleDeleteList"] = null;
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {

                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                ENTITY_GLOBAL.Instance.INDICA_FORM = 1;

                Session["COPIA_FORMULARIO"] = "ACTIVA";
            }
            return View("FormulariosExtras/CCEPF100_View", "", LocalEnty);

        }

        public System.Web.Mvc.ActionResult ReturnFindSubFamiliaFE(string modo, string linea, string familia, string subFamilia,
                string descripcion, string descripLinea, string descripFamilia, Nullable<int> indicadoreps, string idWindow)
        {
            Log.Information("HClinicaController - ReturnFindSubFamiliaFE - Entrar");
            int index = subFamilia.IndexOf("|");
            if (index > 0)
            {
                var objMiscl = new MA_MiscelaneosDetalle();
                objMiscl.ACCION = "MEDICAMENTOS";
                objMiscl.AplicacionCodigo = "CG";
                objMiscl.CodigoTabla = "SUBFAMILIA";
                string[] cadArray = subFamilia.Trim().Split('|');
                string cadenas = cadArray[1].Replace("[", "");
                cadenas = cadenas.Replace("]", "").Trim();
                cadArray = cadenas.Trim().Split('-');
                objMiscl.ValorCodigo1 = cadArray[0];
                objMiscl.ValorCodigo2 = cadArray[1];
                objMiscl.ValorCodigo3 = cadArray[2];
                if (cadArray.Length > 3)
                {
                    objMiscl.CodigoElemento = cadArray[3];
                }
                var resulMiscelaneosTitulo = SvcMiscelaneos.GetUpListadoServicios(objMiscl);
                if (resulMiscelaneosTitulo.Count > 0)
                {
                    if (resulMiscelaneosTitulo[0].ACCION == "MED")
                    {

                    }
                    else
                    {

                    }
                }

            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF100_MED_MICRONUTRIENTES_KARDEX(string VALOR, string tipoRecurso)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF100_MED_MICRONUTRIENTES_KARDEX - Entrar");

                //   if (Session["HC_MedicamentoDietaTemporal"] != null && tipoRecurso == "2")
                //   {
                //     List<BE_Medicamento_FE> objLista2 = null;

                //     objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
                //     return this.Store(objLista2.ToList());
                //  }
                //  else
                //    {
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                var objLista = new List<BE_Medicamento_FE>();
                var objListaShow = new List<BE_Medicamento_FE>();
                var objListaAnt = new List<SS_HC_Medicamento_FE>();
                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.CodigoComponente = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                // objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                // objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                objEnt.Accion = "LISTARK1";

                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;

                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea.Trim();
                        obtemp.Familia = intobj.Familia.Trim();
                        obtemp.SubFamilia = intobj.SubFamilia.Trim();
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Comentario = intobj.Indicacion; //ANGEL
                        obtemp.Indicacion = intobj.Comentario; //ANGEL
                        //obtemp.Comentario = intobj.Comentario;
                        //obtemp.Indicacion = intobj.Indicacion;
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.VolumenDia = intobj.VolumenDia;
                        obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                        obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                        obtemp.Presentacion = intobj.Presentacion; //diferente
                        obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                        obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                        obtemp.Hora = intobj.Hora;
                        //obtemp.Accion = "UPDATEINDIV";
                        obtemp.Accion = "UPDATEDETALLE";
                        objLista.Add(obtemp);
                    }
                }


                //if (objEnt.TipoMedicamento == 3)
                //{
                //    Session["HC_MedicamentoList"] = objLista;
                //}
                //else if (objEnt.TipoMedicamento == 2)
                //{
                //    Session["HC_MedicamentoDietaList"] = objLista;
                //}

                //}
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_" + tipoRecurso, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Medicamento_FE> objListaAnt2 = (List<SS_HC_Medicamento_FE>)objetoGen;
                        /* Listar.AddRange(ListarCopy);*/
                        if (objListaAnt2.Count > 0)
                        {
                            BE_Medicamento_FE obtemp;

                            foreach (SS_HC_Medicamento_FE intobj in objListaAnt2)
                            {
                                int kk = 0;
                                //foreach (var item in objListaAnt)//Anthony
                                //{
                                //    if (item.CodigoComponente == intobj.CodigoComponente)
                                //    {
                                //        kk = 1;
                                //    }
                                //} comentado x Angel Chavez

                                if (kk == 0)
                                {

                                    obtemp = new BE_Medicamento_FE();
                                    obtemp.Linea = intobj.Linea.Trim();
                                    obtemp.Familia = intobj.Familia.Trim();
                                    obtemp.SubFamilia = intobj.SubFamilia.Trim();
                                    obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                                    obtemp.Secuencia = intobj.Secuencia;
                                    obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                    obtemp.Dosis = intobj.Dosis;
                                    obtemp.IdVia = intobj.IdVia;
                                    obtemp.Cantidad = intobj.Cantidad;
                                    obtemp.Frecuencia = intobj.Frecuencia;
                                    obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                    obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                    obtemp.TipoComida = intobj.TipoComida;

                                    obtemp.Comentario = intobj.Indicacion; //ANGEL
                                    obtemp.Indicacion = intobj.Comentario; //ANGEL
                                    //obtemp.Comentario = intobj.Comentario;
                                    //obtemp.Indicacion = intobj.Indicacion;
                                    obtemp.Estado = intobj.Estado;
                                    obtemp.CodigoComponente = intobj.CodigoComponente;
                                    obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                    obtemp.VolumenDia = intobj.VolumenDia;
                                    obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                                    obtemp.Presentacion = intobj.Presentacion;
                                    obtemp.Hora = intobj.Hora;
                                    //obtemp.Accion = "UPDATEINDIV";
                                    obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                                    obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                                    obtemp.Accion = "NUEVO";
                                    objLista.Add(obtemp);
                                }
                            }
                        }
                    }
                    if (tipoRecurso == "2")
                    {
                        Session["CON_DATA_1"] = "SI";
                    }
                    if (tipoRecurso == "3")
                    {
                        Session["CON_DATA_2"] = "SI";
                    }
                    if (Session["CON_DATA_1"] != null && Session["CON_DATA_2"] != null)
                    {
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }
                }


                if (tipoRecurso == "2")
                {
                    Session["HC_MedicamentoDietaTemporal"] = objLista;
                }
                return this.Store(objLista.ToList());
                //return this.Store(objListaAnt.ToList());

                //  }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF100_MED_MICRONUTRIENTES(string VALOR, string tipoRecurso)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF100_MED_MICRONUTRIENTES - Entrar");

                if (Session["HC_MedicamentoDietaTemporal"] != null && tipoRecurso == "2")
                {
                    List<BE_Medicamento_FE> objLista2 = null;

                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
                    return this.Store(objLista2.ToList());
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    var objLista = new List<BE_Medicamento_FE>();
                    var objListaShow = new List<BE_Medicamento_FE>();
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                    objEnt.Accion = "LISTAR";

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    if (objListaAnt.Count > 0)
                    {
                        BE_Medicamento_FE obtemp;

                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {
                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea.Trim();
                            obtemp.Familia = intobj.Familia.Trim();
                            obtemp.SubFamilia = intobj.SubFamilia.Trim();
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Comentario = intobj.Indicacion; //ANGEL
                            obtemp.Indicacion = intobj.Comentario; //ANGEL
                            //obtemp.Comentario = intobj.Comentario;
                            //obtemp.Indicacion = intobj.Indicacion;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.VolumenDia = intobj.VolumenDia;
                            obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                            obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                            obtemp.Presentacion = intobj.Presentacion; //diferente
                            obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                            obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                            obtemp.Hora = intobj.Hora;
                            //obtemp.Accion = "UPDATEINDIV";
                            obtemp.Accion = "UPDATEDETALLE";
                            objLista.Add(obtemp);
                        }
                    }


                    //if (objEnt.TipoMedicamento == 3)
                    //{
                    //    Session["HC_MedicamentoList"] = objLista;
                    //}
                    //else if (objEnt.TipoMedicamento == 2)
                    //{
                    //    Session["HC_MedicamentoDietaList"] = objLista;
                    //}

                    //}
                    /////////////////////////////////////////////////
                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_" + tipoRecurso, Listar);
                        if (objetoGen != null)
                        {
                            List<SS_HC_Medicamento_FE> objListaAnt2 = (List<SS_HC_Medicamento_FE>)objetoGen;
                            /* Listar.AddRange(ListarCopy);*/
                            if (objListaAnt2.Count > 0)
                            {
                                BE_Medicamento_FE obtemp;

                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt2)
                                {
                                    int kk = 0;
                                    //foreach (var item in objListaAnt)//Anthony
                                    //{
                                    //    if (item.CodigoComponente == intobj.CodigoComponente)
                                    //    {
                                    //        kk = 1;
                                    //    }
                                    //} comentado x Angel Chavez

                                    if (kk == 0)
                                    {

                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea.Trim();
                                        obtemp.Familia = intobj.Familia.Trim();
                                        obtemp.SubFamilia = intobj.SubFamilia.Trim();
                                        obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        obtemp.TipoComida = intobj.TipoComida;

                                        obtemp.Comentario = intobj.Indicacion; //ANGEL
                                        obtemp.Indicacion = intobj.Comentario; //ANGEL
                                        //obtemp.Comentario = intobj.Comentario;
                                        //obtemp.Indicacion = intobj.Indicacion;
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.VolumenDia = intobj.VolumenDia;
                                        obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                                        obtemp.Presentacion = intobj.Presentacion;
                                        obtemp.Hora = intobj.Hora;
                                        //obtemp.Accion = "UPDATEINDIV";
                                        obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                                        obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                                        obtemp.Accion = "NUEVO";
                                        objLista.Add(obtemp);
                                    }
                                }
                            }
                        }
                        if (tipoRecurso == "2")
                        {
                            Session["CON_DATA_1"] = "SI";
                        }
                        if (tipoRecurso == "3")
                        {
                            Session["CON_DATA_2"] = "SI";
                        }
                        if (Session["CON_DATA_1"] != null && Session["CON_DATA_2"] != null)
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }


                    if (tipoRecurso == "2")
                    {
                        Session["HC_MedicamentoDietaTemporal"] = objLista;
                    }
                    return this.Store(objLista.ToList());
                    //return this.Store(objListaAnt.ToList());

                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF100_MEDNUT(string VALOR, string tipoRecurso)
        {
            // Session["HC_MedicamentoDietaTemporal"] = null;
            try
            {
                Log.Information("HClinicaController - CCEPF100_MEDNUT - Entrar");

                if (Session["HC_MedicamentoDietaTemporal"] != null && tipoRecurso == "2")
                {
                    List<BE_Medicamento_FE> objLista2 = null;
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
                    return this.Store(objLista2.ToList());
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    var objLista = new List<BE_Medicamento_FE>();
                    var objListaShow = new List<BE_Medicamento_FE>();
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                    objEnt.Accion = "LISTAR";

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    if (objListaAnt.Count > 0)
                    {
                        BE_Medicamento_FE obtemp;

                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {
                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea.Trim();
                            obtemp.Familia = intobj.Familia.Trim();
                            obtemp.SubFamilia = intobj.SubFamilia.Trim();
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.TipoComida = intobj.TipoComida;
                            //obtemp.Comentario = intobj.Comentario;
                            //obtemp.Indicacion = intobj.Indicacion;
                            obtemp.Comentario = intobj.Indicacion;
                            obtemp.Indicacion = intobj.Comentario;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.VolumenDia = intobj.VolumenDia;
                            obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                            obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                            obtemp.Presentacion = intobj.Presentacion; //diferente
                            obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                            obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                            obtemp.Hora = intobj.Hora;
                            // obtemp.Accion = "UPDATEINDIV";
                            obtemp.Accion = "UPDATEDETALLE";
                            objLista.Add(obtemp);
                        }
                    }
                    //if (objEnt.TipoMedicamento == 3)
                    //{
                    //    Session["HC_MedicamentoList"] = objLista;
                    //}
                    //else if (objEnt.TipoMedicamento == 2)
                    //{
                    //    Session["HC_MedicamentoDietaList"] = objLista;
                    //}

                    //}
                    /////////////////////////////////////////////////
                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_" + tipoRecurso, Listar);
                        if (objetoGen != null)
                        {
                            List<SS_HC_Medicamento_FE> objListaAnt2 = (List<SS_HC_Medicamento_FE>)objetoGen;
                            /* Listar.AddRange(ListarCopy);*/
                            if (objListaAnt2.Count > 0)
                            {
                                BE_Medicamento_FE obtemp;

                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt2)
                                {
                                    int kk = 0;
                                    foreach (var item in objListaAnt)//Anthony
                                    {
                                        if (item.CodigoComponente == intobj.CodigoComponente)
                                        {
                                            kk = 1;
                                        }
                                    }

                                    if (kk == 0)
                                    {

                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea.Trim();
                                        obtemp.Familia = intobj.Familia.Trim();
                                        obtemp.SubFamilia = intobj.SubFamilia.Trim();
                                        obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        //obtemp.Comentario = intobj.Comentario;
                                        //obtemp.Indicacion = intobj.Indicacion;
                                        obtemp.Comentario = intobj.Indicacion; //ANGEL
                                        obtemp.Indicacion = intobj.Comentario; //ANGEL
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.VolumenDia = intobj.VolumenDia;
                                        obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                                        obtemp.Presentacion = intobj.Presentacion;
                                        obtemp.Hora = intobj.Hora;
                                        //obtemp.Accion = "UPDATEINDIV";
                                        obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                                        obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                                        obtemp.Accion = "NUEVO";
                                        objLista.Add(obtemp);
                                    }
                                }
                            }
                        }
                        if (tipoRecurso == "2")
                        {
                            Session["CON_DATA_1"] = "SI";
                        }
                        if (tipoRecurso == "3")
                        {
                            Session["CON_DATA_2"] = "SI";
                        }

                        if (Session["CON_DATA_1"] != null && Session["CON_DATA_2"] != null)
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }
                    if (tipoRecurso == "2")
                    {
                        Session["HC_MedicamentoDietaTemporal"] = objLista;
                    }
                    return this.Store(objLista.ToList());
                    //return this.Store(objListaAnt.ToList());
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF100_MEDNUT_KARDEX(string VALOR, string tipoRecurso)
        {
            // Session["HC_MedicamentoDietaTemporal"] = null;
            try
            {
                Log.Information("HClinicaController - CCEPF100_MEDNUT_KARDEX - Entrar");
                if (Session["HC_MedicamentoDietaTemporal"] != null && tipoRecurso == "2")
                {
                    List<BE_Medicamento_FE> objLista2 = null;
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
                    return this.Store(objLista2.ToList());
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    var objLista = new List<BE_Medicamento_FE>();
                    var objListaShow = new List<BE_Medicamento_FE>();
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                    objEnt.Accion = "LISTARK1";

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    if (objListaAnt.Count > 0)
                    {
                        BE_Medicamento_FE obtemp;

                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {
                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea.Trim();
                            obtemp.Familia = intobj.Familia.Trim();
                            obtemp.SubFamilia = intobj.SubFamilia.Trim();
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.TipoComida = intobj.TipoComida;
                            //obtemp.Comentario = intobj.Comentario;
                            //obtemp.Indicacion = intobj.Indicacion;
                            obtemp.Comentario = intobj.Indicacion;
                            obtemp.Indicacion = intobj.Comentario;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.VolumenDia = intobj.VolumenDia;
                            obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                            obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                            obtemp.Presentacion = intobj.Presentacion; //diferente
                            obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                            obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                            obtemp.Hora = intobj.Hora;
                            // obtemp.Accion = "UPDATEINDIV";
                            obtemp.Accion = "UPDATEDETALLE";
                            objLista.Add(obtemp);
                        }
                    }
                    //if (objEnt.TipoMedicamento == 3)
                    //{
                    //    Session["HC_MedicamentoList"] = objLista;
                    //}
                    //else if (objEnt.TipoMedicamento == 2)
                    //{
                    //    Session["HC_MedicamentoDietaList"] = objLista;
                    //}

                    //}
                    /////////////////////////////////////////////////
                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_" + tipoRecurso, Listar);
                        if (objetoGen != null)
                        {
                            List<SS_HC_Medicamento_FE> objListaAnt2 = (List<SS_HC_Medicamento_FE>)objetoGen;
                            /* Listar.AddRange(ListarCopy);*/
                            if (objListaAnt2.Count > 0)
                            {
                                BE_Medicamento_FE obtemp;

                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt2)
                                {
                                    int kk = 0;
                                    foreach (var item in objListaAnt)//Anthony
                                    {
                                        if (item.CodigoComponente == intobj.CodigoComponente)
                                        {
                                            kk = 1;
                                        }
                                    }

                                    if (kk == 0)
                                    {

                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea.Trim();
                                        obtemp.Familia = intobj.Familia.Trim();
                                        obtemp.SubFamilia = intobj.SubFamilia.Trim();
                                        obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        //obtemp.Comentario = intobj.Comentario;
                                        //obtemp.Indicacion = intobj.Indicacion;
                                        obtemp.Comentario = intobj.Indicacion; //ANGEL
                                        obtemp.Indicacion = intobj.Comentario; //ANGEL
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.VolumenDia = intobj.VolumenDia;
                                        obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                                        obtemp.Presentacion = intobj.Presentacion;
                                        obtemp.Hora = intobj.Hora;
                                        //obtemp.Accion = "UPDATEINDIV";
                                        obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                                        obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                                        obtemp.Accion = "NUEVO";
                                        objLista.Add(obtemp);
                                    }
                                }
                            }
                        }
                        if (tipoRecurso == "2")
                        {
                            Session["CON_DATA_1"] = "SI";
                        }
                        if (tipoRecurso == "3")
                        {
                            Session["CON_DATA_2"] = "SI";
                        }

                        if (Session["CON_DATA_1"] != null && Session["CON_DATA_2"] != null)
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }
                    if (tipoRecurso == "2")
                    {
                        Session["HC_MedicamentoDietaTemporal"] = objLista;
                    }
                    return this.Store(objLista.ToList());
                    //return this.Store(objListaAnt.ToList());
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF100_MED_MICRONUTRIENTESX(string VALOR, string tipoRecurso)
        {

            Log.Information("HClinicaController - CCEPF100_MED_MICRONUTRIENTESX - Entrar");
            // Session["HC_MedicamentoDietaTemporal"] = null;


            if (ENTITY_GLOBAL.Instance.COD_BANDEJA != "EMERGENCIA")
            {
                DataTable dtValida = new DataTable();
                HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                WsEpisodio.FechaCreacion = DateTime.Now;
                WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                ENTITY_GLOBAL.Instance.dataExamenMedicamentos = dtValida;
            }

            try
            {
                if (Session["HC_MedicamentoDietaTemporal"] != null && tipoRecurso == "2")
                {
                    List<BE_Medicamento_FE> objLista2 = null;

                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
                    return this.Store(objLista2.ToList());
                }



                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    var objLista = new List<BE_Medicamento_FE>();
                    var objListaShow = new List<BE_Medicamento_FE>();
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                    objEnt.Accion = "LISTAR";

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    if (objListaAnt.Count > 0)
                    {
                        BE_Medicamento_FE obtemp;

                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {
                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea.Trim();
                            obtemp.Familia = intobj.Familia.Trim();
                            obtemp.SubFamilia = intobj.SubFamilia.Trim();

                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.TipoComida = intobj.TipoComida;
                            obtemp.Comentario = intobj.Comentario;
                            obtemp.Indicacion = intobj.Indicacion;
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.VolumenDia = intobj.VolumenDia;
                            obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                            obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                            obtemp.Presentacion = intobj.Presentacion; //diferente
                            obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                            obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                            obtemp.Hora = intobj.Hora;
                            obtemp.CodAlmacen = intobj.CodAlmacen;
                            obtemp.SecuencialHCE = intobj.SecuencialHCE;
                            // obtemp.Accion = "UPDATEINDIV";
                            obtemp.Accion = "UPDATEDETALLE";
                            objLista.Add(obtemp);
                        }
                    }

                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" || Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_DIETAS_MNUT_F2 + "_" + tipoRecurso, Listar);
                        if (objetoGen != null)
                        {
                            List<SS_HC_Medicamento_FE> objListaAnt2 = (List<SS_HC_Medicamento_FE>)objetoGen;
                            /* Listar.AddRange(ListarCopy);*/
                            if (objListaAnt2.Count > 0)
                            {
                                BE_Medicamento_FE obtemp;

                                foreach (SS_HC_Medicamento_FE intobj in objListaAnt2)
                                {
                                    int kk = 0;
                                    foreach (var item in objListaAnt)//Anthony
                                    {
                                        if (item.CodigoComponente == intobj.CodigoComponente)
                                        {
                                            kk = 1;
                                        }
                                    }

                                    if (kk == 0)
                                    {

                                        obtemp = new BE_Medicamento_FE();
                                        obtemp.Linea = intobj.Linea.Trim();
                                        obtemp.Familia = intobj.Familia.Trim();
                                        obtemp.SubFamilia = intobj.SubFamilia.Trim();
                                        obtemp.SubFamiliaDescripcion = intobj.Version; //diferente
                                        obtemp.Secuencia = intobj.Secuencia;
                                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                        obtemp.Dosis = intobj.Dosis;
                                        obtemp.IdVia = intobj.IdVia;
                                        obtemp.Cantidad = intobj.Cantidad;
                                        obtemp.Frecuencia = intobj.Frecuencia;
                                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                        obtemp.TipoComida = intobj.TipoComida;
                                        obtemp.Comentario = intobj.Comentario;
                                        obtemp.Indicacion = intobj.Indicacion;
                                        obtemp.Estado = intobj.Estado;
                                        obtemp.CodigoComponente = intobj.CodigoComponente;
                                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                        obtemp.VolumenDia = intobj.VolumenDia;
                                        obtemp.FrecuenciaToma = intobj.FrecuenciaToma;
                                        obtemp.Presentacion = intobj.Presentacion;
                                        obtemp.Hora = intobj.Hora;
                                        //obtemp.Accion = "UPDATEINDIV";
                                        obtemp.CodAlmacen = intobj.CodAlmacen;
                                        obtemp.SecuencialHCE = intobj.SecuencialHCE;

                                        obtemp.IdPadreNutriente = intobj.IdPadreNutriente; //diferente
                                        obtemp.IdHijoNutriente = intobj.IdHijoNutriente;
                                        obtemp.Accion = "NUEVO";

                                        objLista.Add(obtemp);
                                    }
                                }
                            }
                        }
                        if (tipoRecurso == "2")
                        {
                            Session["CON_DATA_1"] = "SI";
                        }
                        if (tipoRecurso == "3")
                        {
                            Session["CON_DATA_2"] = "SI";
                        }

                        if (Session["CON_DATA_1"] != null && Session["CON_DATA_2"] != null)
                        {
                            Session["COPIA_FORMULARIO"] = "INACTIVA";
                        }
                    }

                    if (tipoRecurso == "2")
                    {
                        Session["HC_MedicamentoDietaTemporal"] = objLista;
                    }
                    return this.Store(objLista.ToList());
                    //return this.Store(objListaAnt.ToList());

                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addDataEliminarMedicamentos_CCEPF100(string MODO, int id, int tipo)
        {
            Log.Information("HClinicaController - addDataEliminarMedicamentos_CCEPF100 - Entrar");

            #region
            //Session["Session_HC_MedicamentoDetalleDeleteList"] = null;
            //List<BE_Medicamento_FE> dataDelete = null;

            //if (Session["Session_HC_MedicamentoDetalleDeleteList"] != null)
            //{
            //    dataDelete = (List<BE_Medicamento_FE>)Session["Session_HC_MedicamentoDetalleDeleteList"];
            //}
            //if (dataDelete == null)
            //{
            //    dataDelete = new List<BE_Medicamento_FE>();
            //}

            //BE_Medicamento_FE objDelete = new BE_Medicamento_FE();

            //objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            //objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            //objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            //try
            //{
            //    objDelete.Accion = MODO; //"DELETEDETALLE"  
            //    objDelete.Accion = "DELETEINDIV";
            //    objDelete.Secuencia = id;
            //    objDelete.TipoMedicamento = tipo;
            //    dataDelete.Add(objDelete);
            //    Session["Session_HC_MedicamentoDetalleDeleteList"] = dataDelete;

            //    List<BE_Medicamento_FE> objListaReal = new List<BE_Medicamento_FE>();
            //    if (Session["HC_MedicamentoDietaTemporal"] != null && tipo == 2)
            //    {
            //        List<BE_Medicamento_FE> objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];

            //        foreach (BE_Medicamento_FE intobj in objLista2)
            //        { //objLista2.Remove(objDelete);
            //            if (objDelete.Secuencia != intobj.Secuencia && objDelete.TipoMedicamento == intobj.TipoMedicamento)
            //            {
            //                objListaReal.Add(intobj);
            //            }
            //        }
            //    }
            //    Session["HC_MedicamentoDietaTemporal"] = objListaReal;
            //}


            //catch (Exception e)
            //{

            //}

            //return this.Direct();
            #endregion

            if (id > 0)
            {

                List<BE_Medicamento_FE> objListaMed = new List<BE_Medicamento_FE>();

                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;
                objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                if (objListaMed == null)
                {
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.Accion = "LISTAR";
                    // objEnt.TipoMedicamento = getValorFiltroInt(tipo); //para Medicina
                    ///AUMENTADO
                    objEnt.TipoMedicamento = 2; //para Medicina

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    objEnt.TipoMedicamento = 3;
                    objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
                    objListaAnt.AddRange(objListaAnt2);

                    string cadenas = "";
                    String[] cadArray;
                    if (objListaAnt.Count > 0)
                    {

                        objListaMed = new List<BE_Medicamento_FE>();
                        BE_Medicamento_FE obtemp;
                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {

                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            //cadArray = intobj.Version.Trim().Split('|');
                            //obtemp.LineaDescripcion = cadArray[0];
                            //obtemp.FamiliaDescripcion = cadArray[1];
                            //obtemp.SubFamiliaDescripcion = cadArray[2];
                            //obtemp.MedicamentoDescripcion = cadArray[3];
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                            if (intobj.GrupoMedicamento == 4 || intobj.GrupoMedicamento == null)
                            {
                                obtemp.GrupoMedicamento = 0;
                            }

                            obtemp.Presentacion = intobj.Presentacion;
                            obtemp.TipoComida = intobj.TipoComida;
                            /////ADD 25/09
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.Medicamento = intobj.CodigoComponente;
                            obtemp.Comentario = intobj.Indicacion; //ANGEL
                            obtemp.Indicacion = intobj.Comentario; //ANGEL
                            //obtemp.Comentario = intobj.Comentario;    
                            //obtemp.Indicacion = intobj.Indicacion;
                            ////
                            obtemp.TipoReceta = intobj.TipoReceta;
                            obtemp.Periodo = intobj.Periodo;
                            obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                            obtemp.UnidadTiempo = intobj.UnidadTiempo;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.Accion = "UPDATEINDIV";
                            objListaMed.Add(obtemp);
                        }
                    }
                    Session["HC_MedicamentoList"] = objListaMed;
                }


                List<BE_Medicamento_FE> objListaReal = new List<BE_Medicamento_FE>();
                BE_Medicamento_FE objDelete = new BE_Medicamento_FE();

                if (Session["Session_HC_MedicamentoDetalleDeleteList"] != null && tipo == 2)
                {
                    objListaReal = (List<BE_Medicamento_FE>)Session["Session_HC_MedicamentoDetalleDeleteList"];
                }
                if (Session["Session_HC_MedicamentoDetalleDeleteList"] != null && tipo == 3)
                {
                    objListaReal = (List<BE_Medicamento_FE>)Session["Session_HC_MedicamentoDetalleDeleteList"];
                }


                if (Session["HC_MedicamentoList"] != null && tipo == 2)
                {

                    List<BE_Medicamento_FE> objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];

                    foreach (BE_Medicamento_FE intobj in objLista2)
                    { //objLista2.Remove(objDelete);
                        if (intobj.Secuencia == id)
                        {
                            intobj.Accion = "DELETEINDIV";
                            objListaReal.Add(intobj);
                        }
                    }
                }
                if (Session["HC_MedicamentoList"] != null && tipo == 3)
                {

                    List<BE_Medicamento_FE> objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];

                    foreach (BE_Medicamento_FE intobj in objLista2)
                    { //objLista2.Remove(objDelete);
                        if (intobj.Secuencia == id)
                        {
                            intobj.Accion = "DELETEINDIV";
                            objListaReal.Add(intobj);
                        }
                    }
                }

                Session["Session_HC_MedicamentoDetalleDeleteList"] = objListaReal;


                //if (objListaMed != null)
                //{
                //    foreach (var result in objListaMed)
                //    {
                //        if (result.Secuencia == id)
                //        {
                //            result.Accion = "DELETEINDIV";
                //            break;
                //        }
                //    }
                //}
            }
            return this.Direct();

        }

        public System.Web.Mvc.ActionResult Save_MedDietasMicroNutrientes_CCEPF100(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, string text)
        {
            Log.Information("HClinicaController - Save_MedDietasMicroNutrientes_CCEPF100 - Entrar");
            // TRABA
            var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
            var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
            if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
            {
                //     eventoPostFormulario(true, "");
                //     return showMensajeBox("" + " " + "Asigne un medico" + " ",
                //"Advertencia", "WARNING");
                return showMensajeNotifyData("Error", "Asigne un Medico Por favor", "ERROR", false);
            }
            String valoreArray;
            if (text == "0")
            {
                Session["HC_MedicamentoDietaList"] = selectionArray1;
                Session["HC_MedicamentoList"] = selectionArray2;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                // TRANSACCIONALES
                List<SS_HC_Medicamento_FE> ObjDetalle = new List<SS_HC_Medicamento_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        List<SS_HC_Medicamento_FE> detalleDietaMed = new List<SS_HC_Medicamento_FE>();
                        List<SS_HC_Medicamento_FE> detalleMed = new List<SS_HC_Medicamento_FE>();
                        SS_HC_Medicamento_FE objEnt;
                        string mensage = "";
                        int SecuenciaMedica = 0;
                        if (Session["HC_MedicamentoList"] != null)
                        {
                            List<BE_Medicamento_FE> objListaDietaMed;
                            List<BE_Medicamento_FE> objListaMed;

                            //DIETAS y NUTRI DELETE
                            List<BE_Medicamento_FE> dataDelete = null;
                            if (Session["Session_HC_MedicamentoDetalleDeleteList"] != null)
                            {
                                dataDelete = (List<BE_Medicamento_FE>)Session["Session_HC_MedicamentoDetalleDeleteList"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (BE_Medicamento_FE objDelEntity1 in dataDelete)
                                {
                                    objEnt = new SS_HC_Medicamento_FE();
                                    objEnt = objDelEntity1;
                                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.Secuencia = objDelEntity1.Secuencia;
                                    objEnt.TipoMedicamento = objDelEntity1.TipoMedicamento;
                                    objEnt.Version = "CCEPF100";
                                    if (objDelEntity1.TipoMedicamento == 2)
                                    {
                                        detalleDietaMed.Add(objEnt);
                                    }
                                    if (objDelEntity1.TipoMedicamento == 3)
                                    {
                                        detalleMed.Add(objEnt);
                                    }
                                }
                            }

                            // DIETAS UPDATE Y INSERT
                            valoreArray = (string)Session["HC_MedicamentoDietaList"];
                            objListaDietaMed = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<BE_Medicamento_FE>));
                            if (objListaDietaMed.Count > 0)
                            {
                                foreach (BE_Medicamento_FE objEntity1 in objListaDietaMed)
                                {
                                    objEnt = new SS_HC_Medicamento_FE();
                                    objEnt = objEntity1;
                                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.CodAlmacen = "";
                                    objEnt.Version = "CCEPF100";
                                    // ReturnFindSubFamilia
                                    //string subFamilia = "";
                                    //subFamilia = objEntity1.SubFamiliaDescripcion;                                   
                                    //objEnt.IdPadreNutriente = objEntity1.IdPadreNutriente;
                                    //objEnt.IdHijoNutriente = objEntity1.IdHijoNutriente;
                                    //int index = subFamilia.IndexOf("|");
                                    //if (index > 0)
                                    //{
                                    //    var objMiscl = new MA_MiscelaneosDetalle();
                                    //    objMiscl.ACCION = "MEDICAMENTOS";
                                    //    objMiscl.AplicacionCodigo = "CG";
                                    //    objMiscl.CodigoTabla = "SUBFAMILIA";
                                    //    string[] cadArray = subFamilia.Trim().Split('|');
                                    //    string cadenas = cadArray[1].Replace("[", "");
                                    //    cadenas = cadenas.Replace("]", "").Trim();
                                    //    cadArray = cadenas.Trim().Split('-');
                                    //}

                                    detalleDietaMed.Add(objEnt);
                                }
                            }

                            // MICRONUTRIENTES UPDATE Y INSERT
                            valoreArray = (string)Session["HC_MedicamentoList"];
                            objListaMed = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<BE_Medicamento_FE>));

                            //if (objListaMed[0].Comentario.Length > 250) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "El campo Indicaciones solo admite 250 caracteres.", "ERROR", false); } 
                            if (objListaMed.Count > 0)
                            {
                                foreach (BE_Medicamento_FE objEntity1 in objListaMed)
                                {
                                    objEnt = new SS_HC_Medicamento_FE();
                                    objEnt = objEntity1;
                                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEnt.CodAlmacen = objEntity1.CodAlmacen;
                                    objEnt.Indicacion = objListaMed[0].Comentario;

                                    objEnt.Version = "CCEPF100";
                                    //  if (objEntity1.Comentario.Length > 250) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "El campo Indicaciones solo admite 250 caracteres.", "ERROR", false); } 
                                    if (objEntity1.Presentacion.Trim() == "") { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Presentación", "ERROR", false); } else { objEnt.Presentacion = objEntity1.Presentacion; }
                                    if (objEntity1.Dosis == "" || objEnt.Dosis == "0") { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Dosis", "ERROR", false); } else { objEnt.Dosis = objEntity1.Dosis; }
                                    // ReturnFindSubFamilia
                                    string subFamilia = "";
                                    subFamilia = objEntity1.SubFamiliaDescripcion;
                                    int index = subFamilia.IndexOf("|");
                                    if (index > 0)
                                    {
                                        var objMiscl = new MA_MiscelaneosDetalle();
                                        objMiscl.ACCION = "MEDICAMENTOS";
                                        objMiscl.AplicacionCodigo = "CG";
                                        objMiscl.CodigoTabla = "SUBFAMILIA";
                                        string[] cadArray = subFamilia.Trim().Split('|');
                                        string cadenas = cadArray[1].Replace("[", "");
                                        cadenas = cadenas.Replace("]", "").Trim();
                                        cadArray = cadenas.Trim().Split('-');
                                    }

                                    detalleMed.Add(objEnt);
                                }
                            }
                        }


                        if ((detalleDietaMed.Count > 0) || (detalleMed.Count > 0))
                        {
                            //TRANSAT
                            SecuenciaMedica = SvcMedicamentoFE.setMantenimientoNutriente(detalleDietaMed, detalleMed);

                            if (SecuenciaMedica > 0)
                            {
                                Session["HC_MedicamentoDietaTemporal"] = null;
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                                Session["HC_MedicamentoList"] = null;
                                Session["HC_MedicamentoDietaList"] = null;
                                Session["Session_HC_MedicamentoDetalleDeleteList"] = null;
                                //jordan 2018/09/18  <-----
                                Session["COPIA_FORMULARIO"] = null;
                                Session["DATA_COPIA_FORM"] = null;
                                Session["CON_DATA_1"] = null;
                                Session["CON_DATA_2"] = null;
                                // ----> jordan 2018/09/18  

                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult GuardarDieta_Temp(String selectionArray1)
        {
            Log.Information("HClinicaController - GuardarDieta_Temp - Entrar");

            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjLista2 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjListaT = new List<BE_Medicamento_FE>();
            bool encontrado = false;
            /* if (Session["HC_MedicamentoDietaListTemp"] != null)
             {
                 ObjLista1 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaListTemp"];
             }*/
            if (Session["HC_MedicamentoDietaTemporal"] != null)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
            }

            if (selectionArray1.Trim().Length > 0)
            {
                ObjLista2 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<BE_Medicamento_FE>));
            }


            int x = 0;
            foreach (BE_Medicamento_FE intobj in ObjLista1)
            {
                foreach (BE_Medicamento_FE intobj2 in ObjLista2)
                {
                    if (intobj.Secuencia == intobj2.Secuencia)
                    {
                        /*intobj.Linea = intobj2.Linea.Trim();
                        intobj.Familia = intobj2.Familia.Trim();
                        intobj.SubFamilia = intobj2.SubFamilia.Trim();*/

                        /*objLista[x].Secuencia = intobj.Secuencia;*/
                        ObjLista1[x].IdUnidadMedida = intobj2.IdUnidadMedida;
                        ObjLista1[x].Dosis = intobj2.Dosis;
                        ObjLista1[x].IdVia = intobj2.IdVia;
                        ObjLista1[x].Cantidad = intobj2.Cantidad;
                        ObjLista1[x].Frecuencia = intobj2.Frecuencia;
                        ObjLista1[x].DiasTratamiento = intobj2.DiasTratamiento;
                        ObjLista1[x].TipoMedicamento = intobj2.TipoMedicamento;
                        ObjLista1[x].TipoComida = intobj2.TipoComida;
                        ObjLista1[x].Comentario = intobj2.Comentario;
                        ObjLista1[x].Indicacion = intobj2.Indicacion;
                        ObjLista1[x].Estado = intobj2.Estado;
                        ObjLista1[x].CodigoComponente = intobj2.CodigoComponente;
                        ObjLista1[x].IndicadorEPS = intobj2.IndicadorEPS;
                        ObjLista1[x].VolumenDia = intobj2.VolumenDia;
                        ObjLista1[x].FrecuenciaToma = intobj2.FrecuenciaToma;
                        ObjLista1[x].SubFamiliaDescripcion = intobj2.Version; //diferente
                        ObjLista1[x].Presentacion = intobj2.Presentacion; //diferente
                        ObjLista1[x].IdPadreNutriente = intobj2.IdPadreNutriente; //diferente
                        ObjLista1[x].IdHijoNutriente = intobj2.IdHijoNutriente;
                        ObjLista1[x].Hora = intobj2.Hora;
                        //obtemp.Accion = "UPDATEINDIV";
                        /*ObjLista1[x].Accion = "NUEVO";*/
                        encontrado = true;
                    }
                    x = x + 1;
                }

            }

            if (encontrado == false)
            {
                ObjLista2[0].Accion = "NUEVO";
                ObjLista1.Add(ObjLista2[0]);
            }


            Session["HC_MedicamentoDietaTemporal"] = ObjLista1;


            return this.Direct();
        }

        public System.Web.Mvc.ActionResult InsertarDieta_Temp(String selectionArray1)
        {
            Log.Information("HClinicaController - InsertarDieta_Temp - Entrar");

            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjLista2 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjListaT = new List<BE_Medicamento_FE>();

            /* if (Session["HC_MedicamentoDietaListTemp"] != null)
             {
                 ObjLista1 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaListTemp"];
             }*/
            if (Session["HC_MedicamentoDietaTemporal"] != null)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaTemporal"];
            }

            if (selectionArray1.Trim().Length > 0)
            {
                ObjLista2 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<BE_Medicamento_FE>));
            }


            ObjLista2[0].Accion = "NUEVO";
            ObjLista1.Add(ObjLista2[0]);



            Session["HC_MedicamentoDietaTemporal"] = ObjLista1;


            return this.Direct();
        }

        public System.Web.Mvc.ActionResult GuardarDieta_Temp2(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaController - GuardarDieta_Temp2 - Entrar");

            List<BE_Medicamento_FE> ObjLista1 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjLista2 = new List<BE_Medicamento_FE>();
            List<BE_Medicamento_FE> ObjListaGuarda = new List<BE_Medicamento_FE>();
            bool encontrado = false;
            if (Session["HC_MedicamentoDietaListTemp"] != null)
            {
                ObjLista1 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaListTemp"];
            }

            if (selectionArray1.Trim().Length > 0)
            {
                ObjLista2 = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<BE_Medicamento_FE>));
            }


            int x = 0;
            foreach (BE_Medicamento_FE intobj in ObjLista1)
            {
                foreach (BE_Medicamento_FE intobj2 in ObjLista2)
                {
                    if (intobj.Secuencia == intobj2.Secuencia)
                    {
                        /*intobj.Linea = intobj2.Linea.Trim();
                        intobj.Familia = intobj2.Familia.Trim();
                        intobj.SubFamilia = intobj2.SubFamilia.Trim();*/

                        /*objLista[x].Secuencia = intobj.Secuencia;*/
                        ObjLista1[x].IdUnidadMedida = intobj2.IdUnidadMedida;
                        ObjLista1[x].Dosis = intobj2.Dosis;
                        ObjLista1[x].IdVia = intobj2.IdVia;
                        ObjLista1[x].Cantidad = intobj2.Cantidad;
                        ObjLista1[x].Frecuencia = intobj2.Frecuencia;
                        ObjLista1[x].DiasTratamiento = intobj2.DiasTratamiento;
                        ObjLista1[x].TipoMedicamento = intobj2.TipoMedicamento;
                        ObjLista1[x].TipoComida = intobj2.TipoComida;
                        ObjLista1[x].Comentario = intobj2.Comentario;
                        ObjLista1[x].Indicacion = intobj2.Indicacion;
                        ObjLista1[x].Estado = intobj2.Estado;
                        ObjLista1[x].CodigoComponente = intobj2.CodigoComponente;
                        ObjLista1[x].IndicadorEPS = intobj2.IndicadorEPS;
                        ObjLista1[x].VolumenDia = intobj2.VolumenDia;
                        ObjLista1[x].FrecuenciaToma = intobj2.FrecuenciaToma;
                        ObjLista1[x].SubFamiliaDescripcion = intobj2.Version; //diferente
                        ObjLista1[x].Presentacion = intobj2.Presentacion; //diferente
                        ObjLista1[x].IdPadreNutriente = intobj2.IdPadreNutriente; //diferente
                        ObjLista1[x].IdHijoNutriente = intobj2.IdHijoNutriente;
                        ObjLista1[x].Hora = intobj2.Hora;
                        //obtemp.Accion = "UPDATEINDIV";
                        ObjLista1[x].Accion = "NUEVO";
                        encontrado = true;
                    }
                    x = x + 1;
                }

            }

            if (encontrado == false)
            {
                ObjLista1.Add(ObjLista2[0]);
            }


            Session["HC_MedicamentoDietaListTemp"] = ObjLista1;


            return this.Direct();
        }


        #endregion

        #region CCEPF102_Formulario

        public System.Web.Mvc.ActionResult CCEPF102_View()
        {
            Log.Information("HClinicaController - CCEPF102_View - Entrar");
            ENTITY_GLOBAL.Instance.INDICA_FORM = 0;
            ENTITY_GLOBAL.Instance.bitacora = 3;

            Session["SEC_TOP_101"] = 0;
            DataTable dtValida = new DataTable();
            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                          (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

            //if (PARAM == "S")
            //{
            //    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            //    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
            //    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
            //    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            //    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            //    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
            //    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
            //    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            //    WsEpisodio.FechaCreacion = DateTime.Now;
            //    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            //    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
            //}
            //else
            //{

            //    dtValida.Columns.Add("CustLName", typeof(String));
            //    dtValida.Columns.Add("CustFName", typeof(String));
            //    dtValida.Columns.Add("Purchases", typeof(String));
            //    dtValida.Columns.Add("CustLName2", typeof(String));
            //    dtValida.Columns.Add("CustFName2", typeof(String));
            //    dtValida.Columns.Add("Purchases2", typeof(String));
            //}

            dtValida.Columns.Add("CustLName", typeof(String));
            dtValida.Columns.Add("CustFName", typeof(String));
            dtValida.Columns.Add("Purchases", typeof(String));
            dtValida.Columns.Add("CustLName2", typeof(String));
            dtValida.Columns.Add("CustFName2", typeof(String));
            dtValida.Columns.Add("Purchases2", typeof(String));
            ENTITY_GLOBAL.Instance.dataExamenMedicamentos = dtValida;

            var btn1 = X.GetCmp<Button>("btnAgregar");
            var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
            var guardar = X.GetCmp<Button>("cmdGuardar");


            var LocalEnty2 = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            LocalEnty2.ACCION = "DIAGNOSTICOFE";
            LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

            if (Listar.Count == 0)
            {
                btn1 = X.GetCmp<Button>("btnAgregar");
                btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                guardar = X.GetCmp<Button>("cmdGuardar");
                btn1.Disable(true);
                btn2.Disable(true);
                guardar.Disable(true);
                showMensajeBox("Por favor,Debe Agregar Diagnóstico para Suministrar Receta", "Advertencia", "WARNING");
            }

            if (ENTITY_GLOBAL.Instance.TIPOATENCION == "2")  //INDICA_TIPO_ORDENATENCION_EMER
            {
                if (!string.IsNullOrEmpty(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString()))
                {
                    SS_FA_SolicitudProducto objProducto = new SS_FA_SolicitudProducto();
                    objProducto.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objProducto.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.IdEpisodioAtencion;
                    objProducto.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objProducto.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

                    var respprodu = new List<SS_FA_SolicitudProducto>();
                    respprodu = svcSS_FA_SolicitudProducto.ListarSolicitudProductoListar(objProducto);
                    if (respprodu.Count > 0)
                    {
                        btn1.Disable(true);
                        btn2.Disable(true);
                        guardar.Disable(true);
                        showMensajeBox("Validación!,Ya se encuentra dispensado la visita", "Advertencia", "WARNING");
                    }
                }
            }
            var datos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEA");
            for (int x = 0; x < datos.Count(); x++)
            {
                string num = datos[x].Codigo;
                if (num.Trim() == "04")
                {

                }
                else
                {
                    Session["OPCION"] = num.Trim();
                }
            }

            List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();

            var LocalEntyAuto = new SY_SeguridadAutorizaciones();

            LocalEntyAuto.AplicacionCodigo = "SY";
            // int inicio = Convert.ToInt32(IdAgente);
            int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
            LocalEntyAuto.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
            LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

            CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
            for (int x = 0; x < CodigoAlma.Count(); x++)
            {
                string val = CodigoAlma[x].MasterBrowseFlag;
                string COD = CodigoAlma[x].Concepto;
                if (val.Trim() == "1")
                {
                    Session["OPCIONALMACEN"] = COD.Trim();
                }
                else
                {

                }
            }

            Session["HC_MedicamentoDetalleList"] = null;
            Session["HC_MedicamentoList"] = null;
            Session["HC_MedicamentoID"] = null;

            var LocalEnty = new BE_Medicamento_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            /*********************************/
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = 1; //para Medicina
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

            objEnt.TipoMedicamento = 4;
            objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
            objListaAnt.AddRange(objListaAnt2);

            //   Session["MEDICONOM"] = objListaAnt2[0].UsuarioCreacion; ;

            bool hallado = false; //ADD 19/12/16
            if (objListaAnt.Count > 0)
            {
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                {
                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }

                    /**ADD 19/12/16**/
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                    LocalEnty.CodAlmacen = intobj.CodAlmacen;
                    LocalEnty.Linea = intobj.Linea;
                    LocalEnty.Familia = intobj.Familia;
                    LocalEnty.SubFamilia = intobj.SubFamilia;
                    Session["Comentario"] = intobj.Comentario;
                    if (!string.IsNullOrEmpty(intobj.Comentario)) LocalEnty.Comentario = intobj.Comentario.Trim();
                    LocalEnty.TipoReceta = intobj.TipoReceta;
                    LocalEnty.Accion = "UPDATE";
                    /**/
                }
                hallado = true;

                LocalEnty.Accion = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

            }
            ///////////////

            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }

                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";
                }
            }

            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA

            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {

                BE_Medicamento_FE obtemp;

                object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR", UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaAnt);

                if (objetoGen != null)
                {
                    List<BE_Medicamento_FE> objLista = new List<BE_Medicamento_FE>();

                    List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;

                }
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                ENTITY_GLOBAL.Instance.INDICA_FORM = 1;
                Session["COPIA_FORMULARIO"] = "ACTIVA";
            }
            Session["HC_MedicamentoDetalleListDELETE"] = null;

            JavaScript("desavilitarCopiar()");
            return View("FormulariosExtras/CCEPF102_View", "", LocalEnty);

        }
        #endregion

        #region CCEPF103_Formulario

        public System.Web.Mvc.ActionResult CCEPF103_View()
        {
            Log.Information("HClinicaController - CCEPF103_View - Entrar");


            ENTITY_GLOBAL.Instance.INDICA_FORM = 0;
            ENTITY_GLOBAL.Instance.bitacora = 3;

            Session["SEC_TOP_101"] = 0;
            DataTable dtValida = new DataTable();
            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                          (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

            //if (PARAM == "S" && ENTITY_GLOBAL.Instance.COD_BANDEJA != "EMERGENCIA")
            //{
            //    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            //    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
            //    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
            //    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            //    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            //    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
            //    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
            //    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            //    WsEpisodio.FechaCreacion = DateTime.Now;
            //    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            //    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
            //}
            //else
            //{

            //    dtValida.Columns.Add("CustLName", typeof(String));
            //    dtValida.Columns.Add("CustFName", typeof(String));
            //    dtValida.Columns.Add("Purchases", typeof(String));
            //    dtValida.Columns.Add("CustLName2", typeof(String));
            //    dtValida.Columns.Add("CustFName2", typeof(String));
            //    dtValida.Columns.Add("Purchases2", typeof(String));
            //}
            dtValida.Columns.Add("CustLName", typeof(String));
            dtValida.Columns.Add("CustFName", typeof(String));
            dtValida.Columns.Add("Purchases", typeof(String));
            dtValida.Columns.Add("CustLName2", typeof(String));
            dtValida.Columns.Add("CustFName2", typeof(String));
            dtValida.Columns.Add("Purchases2", typeof(String));
            ENTITY_GLOBAL.Instance.dataExamenMedicamentos = dtValida;

            var LocalEnty2 = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            LocalEnty2.ACCION = "DIAGNOSTICOFE";
            LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

            if (Listar.Count == 0)
            {

                var btn1 = X.GetCmp<Button>("btnAgregar");
                var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                var guardar = X.GetCmp<Button>("cmdGuardar");
                // var copiar = X.GetCmp<Button>("parent.App.btnCopyForm_HCE");

                btn1.Disable(true);
                btn2.Disable(true);
                guardar.Disable(true);

                // copiar.Disable(true);
                showMensajeBox("Por favor,Debe Agregar Diagnóstico para Suministrar Receta", "Advertencia", "WARNING");

            }

            var datos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEA");
            for (int x = 0; x < datos.Count(); x++)
            {
                string num = datos[x].Codigo;
                if (num.Trim() == "04")
                {

                }
                else
                {
                    Session["OPCION"] = num.Trim();
                }
            }

            List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();

            var LocalEntyAuto = new SY_SeguridadAutorizaciones();

            LocalEntyAuto.AplicacionCodigo = "SY";
            // int inicio = Convert.ToInt32(IdAgente);
            int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
            LocalEntyAuto.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
            LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

            CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
            for (int x = 0; x < CodigoAlma.Count(); x++)
            {
                string val = CodigoAlma[x].MasterBrowseFlag;
                string COD = CodigoAlma[x].Concepto;
                if (val.Trim() == "1")
                {
                    Session["OPCIONALMACEN"] = COD.Trim();
                }
                else
                {

                }
            }

            Session["HC_MedicamentoDetalleList"] = null;
            Session["HC_MedicamentoList"] = null;
            Session["HC_MedicamentoID"] = null;
            // Session["HC_MedicamentoNoFarmaco"] = null;

            var LocalEnty = new BE_Medicamento_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            /*********************************/
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
            var objListaAnt3 = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR_FARMACO";
            // objEnt.TipoMedicamento = 1; //para Medicina
            //objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

            objEnt.TipoMedicamento = 4;
            //objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
            objListaAnt.AddRange(objListaAnt2);
            bool hallado = false; //ADD 19/12/16
            if (objEnt.Accion == "LISTAR_FARMACO")
            {

                objEnt.TipoMedicamento = 1; //para Medicina
                objListaAnt3 = SvcMedicamentoFE.MedicamentoListar(objEnt);


                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null && objListaAnt3.Count == 0)
                {

                    List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));


                    if (listaCopiaForm != null)
                    {
                        // int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                        // List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)listaCopiaForm;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        String concatcopy = LocalEnty.Comentario;
                        string datitoConCOPY = "";

                        foreach (var objEntity in listaCopiaForm)
                        {

                            datitoConCOPY += objEntity.Descripcion001;

                            LocalEnty.Comentario = datitoConCOPY;


                            Session["Comentario"] = LocalEnty.Comentario;

                        }

                        // Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }





                if (objListaAnt3.Count > 0)
                {
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt3)
                    {
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        /**ADD 19/12/16**/
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                        LocalEnty.CodAlmacen = intobj.CodAlmacen;
                        LocalEnty.Linea = intobj.Linea;
                        LocalEnty.Familia = intobj.Familia;
                        LocalEnty.SubFamilia = intobj.SubFamilia;
                        Session["Comentario"] = intobj.Comentario;
                        if (!string.IsNullOrEmpty(intobj.Comentario)) LocalEnty.Comentario = intobj.Comentario.Trim();


                        if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                        {


                            List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));
                            //Object listaCopiaForm = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                            //UTILES_MENSAJES.FORM_DIAGNOSTICO_F2, objListaAnt3);


                            if (listaCopiaForm != null)
                            {
                                // int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                                // List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)listaCopiaForm;
                                int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                                int x = 0;
                                String concatcopy = intobj.Comentario;
                                string datitoConCOPY = "";

                                foreach (var objEntity in listaCopiaForm)
                                {
                                    //ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                                    //ListarCopy[x].ACCION = "NUEVO";
                                    datitoConCOPY += " " + objEntity.Descripcion001;

                                    LocalEnty.Comentario = concatcopy + " " + datitoConCOPY;
                                    Session["Comentario"] = LocalEnty.Comentario;

                                    //CODIGOTEMP = CODIGOTEMP + 1;
                                    //x = x + 1;

                                }

                                // Listar.AddRange(ListarCopy);
                            }
                            Session["COPIA_FORMULARIO"] = "INACTIVA";

                        }


                        //Session["Comentario"] = intobj.Comentario;
                        //if (!string.IsNullOrEmpty(intobj.Comentario)) LocalEnty.Comentario = intobj.Comentario.Trim();



                        LocalEnty.TipoReceta = intobj.TipoReceta;
                        LocalEnty.Accion = "UPDATE";
                        /**/
                    }
                    hallado = true;

                    LocalEnty.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }

                }
            }

            //   Session["MEDICONOM"] = objListaAnt2[0].UsuarioCreacion; ;



            ///////////////

            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }

                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";
                }
            }

            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA

            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {

                BE_Medicamento_FE obtemp;

                object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR", UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaAnt);

                if (objetoGen != null)
                {
                    List<BE_Medicamento_FE> objLista = new List<BE_Medicamento_FE>();

                    List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;

                }
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                ENTITY_GLOBAL.Instance.INDICA_FORM = 1;
                Session["COPIA_FORMULARIO"] = "ACTIVA";
            }
            Session["HC_MedicamentoDetalleListDELETE"] = null;

            JavaScript("desavilitarCopiar()");
            return View("FormulariosExtras/CCEPF103_View", "", LocalEnty);
        }

        public System.Web.Mvc.ActionResult CCEPF103_Save_Medicamentos(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaController - CCEPF103_Save_Medicamentos - Entrar");

            BE_Medicamento_FE obtemp;
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objLista = new List<BE_Medicamento_FE>();





            obtemp = new BE_Medicamento_FE();

            obtemp.Comentario = selectionArray2;

            obtemp.Accion = "NUEVO";
            objLista.Add(obtemp);




            var objListaTT = Session["HC_MedicamentoNoFarmaco"];

            List<BE_Medicamento_FE> objListaMediNuevito = (List<BE_Medicamento_FE>)Session["HC_MedicamentoNoFarmaco"];




            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_Indicaciones_FE> ObjLista2 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjLista12 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjListaGuarda = new List<SS_HC_Indicaciones_FE>();

            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/


            if (Evento == "Temp")
            {
                if (ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP != null)
                {
                    ObjLista12 = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];


                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista12)
                    {
                        if (ObjLista2.Count > 0)
                        {
                            if (ObjLista2[0].SecuenciaMedicamento != objEntity1.SecuenciaMedicamento)
                            {
                                if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                {
                                    objEntity1.Accion = "UPDATE";
                                }
                                ObjListaGuarda.Add(objEntity1);
                            }
                        }
                    }
                    Session["HC_MedicamentoDetalleList"] = ObjListaGuarda;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    Session["HC_MedicamentoDetalleList"] = ObjLista2;
                }
            }
            else if (Evento == "ListarDetalle")
            {
                Session["HC_MedicamentoID"] = Id;
                var nombreStore = "";
                if (idgrupo == 0)
                {
                    nombreStore = "storeExamenesDetalleIndic0";
                }
                else
                {
                    nombreStore = "storeExamenesDetalleIndicGrupo";
                }
                var store = X.GetCmp<Store>(nombreStore);
                store.Reload();
            }
            else if (Evento == "Server")
            {
                try
                {
                    //transact
                    List<SS_HC_Medicamento_FE> cabeceraMed = new List<SS_HC_Medicamento_FE>();
                    List<SS_HC_Indicaciones_FE> listadetalleMed = new List<SS_HC_Indicaciones_FE>();

                    List<SS_HC_Indicaciones_FE> listaTraceDetalleMed = new List<SS_HC_Indicaciones_FE>();

                    int Indicador = 0;
                    int IdSecuencia = 0;
                    addDataUpdateMedicamentos("UPDATEINDIV", selectionArray1, 1);
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_Medicamento_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String mensaje = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;

                        if (objLista.Count > 0)
                        {


                            SS_HC_Medicamento_FE objEntFarmaco;
                            List<SS_HC_Medicamento_FE> cabeceraMedFarmaco = new List<SS_HC_Medicamento_FE>();
                            foreach (BE_Medicamento_FE objEntity1 in objListaMediNuevito)
                            {
                                objEntFarmaco = new SS_HC_Medicamento_FE();
                                objEntFarmaco = objEntity1;
                                // objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEntFarmaco.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEntFarmaco.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEntFarmaco.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEntFarmaco.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objEntFarmaco.TipoMedicamento = 1;
                                objEntFarmaco.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" ? "NUEVOFARMACO" : "UPDATEFARMACO";
                                if (objEntFarmaco.Accion == "NUEVOFARMACO")
                                {

                                    objEntFarmaco.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEntFarmaco.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objEntFarmaco.FechaModificacion = DateTime.Now;
                                    objEntFarmaco.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }


                                objEntFarmaco.Comentario = selectionArray2;

                                objEntFarmaco.Version = Version;
                                cabeceraMedFarmaco.Add(objEntFarmaco);

                            }
                            //SS_HC_EpisodioAtencion objFarmaco = new SS_HC_EpisodioAtencion();
                            //objFarmaco.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            //objFarmaco.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            //objFarmaco.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            //objFarmaco.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //objFarmaco.Accion = "PROC_FIRMARRECETA";
                            //long idResultadoFarma = 0;
                            //IdSecuencia = SvcMedicamentoFE.setMantenimientoGrupo(new SS_HC_Medicamento_FE(), cabeceraMedFarmaco, null, listaTraceDetalleMed, listadetalleMed);
                            // idResultadoFarma = SvcEpisodioAtencion.setMantenimiento(obj);

                            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            obj.Accion = "PROC_FIRMARRECETA";
                            long idResultados = 0;
                            IdSecuencia = SvcMedicamentoFE.setMantenimientoGrupo(new SS_HC_Medicamento_FE(), cabeceraMedFarmaco, null, listaTraceDetalleMed, listadetalleMed);
                        }








                        //if (dataDelete != null)
                        //{

                        //    long idResultado = 0;

                        //    idResultado = SvcEpisodioAtencion.setMantenimiento(obj);

                        //}

                        if (IdSecuencia > 0 || Indicador == 1)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            mensaje = mensaje + " Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                               UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                               ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                               ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
                            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                            ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();

                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoNoFarmaco"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["HC_MedicamentoDietaList"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;

                            //eventoLoadPostFormulario(true, "storeExamenes0", null); //jordan 2018/09/18
                            //ActivaDescativaButtonSave(true);

                            eventoPostFormulario(true, "");
                            this.GetCmp<Button>("cmdGuardar").Disabled = true;


                            //jordan 2018/09/18    
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }


                        }

                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    //string mostrarExc = "Excepción genérica:" + ex.Message;
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF101_Formulario

        public System.Web.Mvc.ActionResult CCEPF101_View()
        {
            Log.Information("HClinicaController - CCEPF101_View - Entrar");
            ENTITY_GLOBAL.Instance.INDICA_FORM = 0;
            ENTITY_GLOBAL.Instance.bitacora = 3;

            Session["SEC_TOP_101"] = 0;
            DataTable dtValida = new DataTable();
            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                          (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

            //if (PARAM == "S" && ENTITY_GLOBAL.Instance.COD_BANDEJA != "EMERGENCIA")
            //{
            //    try
            //    {
            //        HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            //        HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
            //        WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
            //        WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //        WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            //        WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            //        WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
            //        WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
            //        WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            //        WsEpisodio.FechaCreacion = DateTime.Now;
            //        WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            //        dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

            //    }
            //    catch (Exception ex)
            //    {
            //        Log.Error(ex, ex.Message);
            //        dtValida.Columns.Add("CustLName", typeof(String));
            //        dtValida.Columns.Add("CustFName", typeof(String));
            //        dtValida.Columns.Add("Purchases", typeof(String));
            //        dtValida.Columns.Add("CustLName2", typeof(String));
            //        dtValida.Columns.Add("CustFName2", typeof(String));
            //        dtValida.Columns.Add("Purchases2", typeof(String));
            //        Log.Information("LoginController - Login Bloque Catch ");
            //        Log.Error(ex, ex.Message);
            //        EventLog.GenerarLogError(ex);
            //        // showMensajeNotifyData("Error", "No se pudo enviar por el servicio  ");
            //    }
            //}
            //else
            //{

            //    dtValida.Columns.Add("CustLName", typeof(String));
            //    dtValida.Columns.Add("CustFName", typeof(String));
            //    dtValida.Columns.Add("Purchases", typeof(String));
            //    dtValida.Columns.Add("CustLName2", typeof(String));
            //    dtValida.Columns.Add("CustFName2", typeof(String));
            //    dtValida.Columns.Add("Purchases2", typeof(String));
            //}

            dtValida.Columns.Add("CustLName", typeof(String));
            dtValida.Columns.Add("CustFName", typeof(String));
            dtValida.Columns.Add("Purchases", typeof(String));
            dtValida.Columns.Add("CustLName2", typeof(String));
            dtValida.Columns.Add("CustFName2", typeof(String));
            dtValida.Columns.Add("Purchases2", typeof(String));

            ENTITY_GLOBAL.Instance.dataExamenMedicamentos = dtValida;

            var LocalEnty2 = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            LocalEnty2.ACCION = "DIAGNOSTICOFE";
            LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
            LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
            LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
            LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
            ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

            if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO")
            {
                var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
                var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
                //var btn1 = X.GetCmp<Button>("btnAgregar");
                var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                var guardar = X.GetCmp<Button>("cmdGuardar");
                if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
                {
                    //     eventoPostFormulario(true, "");
                    //     return showMensajeBox("" + " " + "Asigne un medico" + " ",
                    //"Advertencia", "WARNING");
                    //btn1.Disable(true);
                    btn2.Disable(true);
                    guardar.Disable(true);
                    showMensajeBox("Por favor, debe asignar un médico.", "Advertencia", "WARNING");
                }
            }

            //if (Listar.Count == 0)
            //{
            //    var btn1 = X.GetCmp<Button>("btnAgregar");
            //    var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
            //    var guardar = X.GetCmp<Button>("cmdGuardar");
            //    // var copiar = X.GetCmp<Button>("parent.App.btnCopyForm_HCE");
            //    btn1.Disable(true);
            //    btn2.Disable(true);
            //    guardar.Disable(true);
            //    // copiar.Disable(true);
            //    showMensajeBox("Por favor,Debe Agregar Diagnóstico para Suministrar Receta", "Advertencia", "WARNING");
            //}

            var datos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEA");
            for (int x = 0; x < datos.Count(); x++)
            {
                string num = datos[x].Codigo;
                if (num.Trim() == "04")
                {

                }
                else
                {
                    Session["OPCION"] = num.Trim();
                }
            }

            List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();

            var LocalEntyAuto = new SY_SeguridadAutorizaciones();

            LocalEntyAuto.AplicacionCodigo = "SY";
            // int inicio = Convert.ToInt32(IdAgente);
            int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
            LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
            LocalEntyAuto.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
            LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

            CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
            for (int x = 0; x < CodigoAlma.Count(); x++)
            {
                string val = CodigoAlma[x].MasterBrowseFlag;
                string COD = CodigoAlma[x].Concepto;
                if (val.Trim() == "1")
                {
                    Session["OPCIONALMACEN"] = COD.Trim();
                }
                else
                {

                }
            }

            if (CodigoAlma.Count == 0)
            {
                var btn1 = X.GetCmp<Button>("btnAgregar");
                var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                var guardar = X.GetCmp<Button>("cmdGuardar");
                // var copiar = X.GetCmp<Button>("parent.App.btnCopyForm_HCE");
                btn1.Disable(true);
                btn2.Disable(true);
                guardar.Disable(true);
                // copiar.Disable(true);
                showMensajeBox("Por favor, Deben Asignarle un Almacen para Suministrar Receta", "Advertencia", "WARNING");
            }



            Session["HC_MedicamentoDetalleList"] = null;
            Session["HC_MedicamentoList"] = null;
            Session["HC_MedicamentoID"] = null;
            // Session["HC_MedicamentoNoFarmaco"] = null;

            var LocalEnty = new BE_Medicamento_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /***************************************************/
            /**ADD para config del PATH del form*/
            setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");
            /*********************************/
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
            var objListaAnt3 = new List<SS_HC_Medicamento_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            objEnt.TipoMedicamento = 1; //para Medicina
            objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

            objEnt.TipoMedicamento = 4;
            objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
            objListaAnt.AddRange(objListaAnt2);
            bool hallado = false; //ADD 19/12/16
            if (objListaAnt.Count == 0 && objListaAnt2.Count == 0)
            {
                objEnt.Accion = "LISTAR_FARMACO";
                objEnt.TipoMedicamento = 1; //para Medicina
                objListaAnt3 = SvcMedicamentoFE.MedicamentoListar(objEnt);
                if (objListaAnt3.Count > 0)
                {
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt3)
                    {
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        /**ADD 19/12/16**/
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                        LocalEnty.CodAlmacen = intobj.CodAlmacen;
                        LocalEnty.Linea = intobj.Linea;
                        LocalEnty.Familia = intobj.Familia;
                        LocalEnty.SubFamilia = intobj.SubFamilia;
                        Session["Comentario"] = intobj.Comentario;
                        if (!string.IsNullOrEmpty(intobj.Comentario)) LocalEnty.Comentario = intobj.Comentario.Trim();
                        LocalEnty.TipoReceta = intobj.TipoReceta;
                        LocalEnty.Accion = "UPDATE";
                        /**/
                    }
                    hallado = true;

                    LocalEnty.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }

                }
            }

            //   Session["MEDICONOM"] = objListaAnt2[0].UsuarioCreacion; ;

            string w_indicador_despachado = "N";
            if (objListaAnt.Count > 0)
            {
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                {
                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }

                    /**ADD 19/12/16**/
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                    LocalEnty.CodAlmacen = intobj.CodAlmacen;
                    LocalEnty.Linea = intobj.Linea;
                    LocalEnty.Familia = intobj.Familia;
                    LocalEnty.SubFamilia = intobj.SubFamilia;
                    Session["Comentario"] = intobj.Comentario;
                    if (!string.IsNullOrEmpty(intobj.Comentario)) LocalEnty.Comentario = intobj.Comentario.Trim();
                    LocalEnty.TipoReceta = intobj.TipoReceta;
                    LocalEnty.Accion = "UPDATE";

                    if (ENTITY_GLOBAL.Instance.TIPOATENCION == "2")
                    {
                        //si existe un despacho de enfermería, indicador="S"
                        if (intobj.FrecuenciaToma != "N")
                            w_indicador_despachado = "S";
                        /**/
                    }

                }
                hallado = true;

                LocalEnty.Accion = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

            }
            ///////////////

            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }

                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";
                }
            }

            //si el indicador de despacho es "S" bloquear lista de medicamentos
            if (w_indicador_despachado == "S")
                LocalEnty.Accion = "VISTA";


            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA

            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {

                BE_Medicamento_FE obtemp;

                object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR", UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaAnt);

                if (objetoGen != null)
                {
                    List<BE_Medicamento_FE> objLista = new List<BE_Medicamento_FE>();

                    List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;

                }
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                ENTITY_GLOBAL.Instance.INDICA_FORM = 1;
                Session["COPIA_FORMULARIO"] = "ACTIVA";
            }
            Session["HC_MedicamentoDetalleListDELETE"] = null;


            JavaScript("desavilitarCopiar()");
            return View("FormulariosExtras/CCEPF101_View", "", LocalEnty);
        }

        public System.Web.Mvc.ActionResult CCEPF101_MEDICAMENTOS(string VALOR, string tipoRecurso)
        {
            Log.Information("HClinicaController - CCEPF101_MEDICAMENTOS - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV")
                    {
                        objListaShow.Add(result);
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;






                        objListaShow.AddRange(ListarCopy);

                        Session["HC_MedicamentoList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {
                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                string cadenas = "";
                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        obtemp.Presentacion = intobj.Presentacion;
                        obtemp.TipoComida = intobj.TipoComida;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;
                        obtemp.Comentario = intobj.Comentario;
                        ////
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.Indicacion = intobj.Indicacion;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";
                        objLista.Add(obtemp);

                        if (obtemp.Secuencia > (int)Session["SEC_TOP_101"])
                        {
                            Session["SEC_TOP_101"] = obtemp.Secuencia;
                        }


                    }
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ////////////////////////////ADD LA OPCIÓN DE COPIA///////////////////////////////////////////////////////////////////////////////////////
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;
                        // var ListarCopy2 = new List<SS_HC_Medicamento_FE>();
                        //objLista.AddRange(ListarCopy);
                        // Session["HC_MedicamentoList"] = objLista;
                        /*****/
                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));



                        String[] cadArray2;
                        if (ListarCopy.Count > 0)
                        {
                            /******GRABA EN LA BASE DE DATOS****/
                            BE_Medicamento_FE obtemp1;
                            int x = 0;
                            int IdSecuencia1 = 0;
                            int regItems = 0;
                            foreach (SS_HC_Medicamento_FE intobj1 in ListarCopy)
                            {
                                obtemp1 = new BE_Medicamento_FE();

                                obtemp1.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                obtemp1.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                obtemp1.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                obtemp1.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                obtemp1.Accion = "NUEVO";  //OBS
                                obtemp1.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                                obtemp1.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                                obtemp1.Comentario = (string)Session["Comentario"];
                                //var objLista = new List<BE_Medicamento_FE>();
                                Random rnd = new Random();
                                obtemp1.Secuencia = Convert.ToInt32(rnd.Next());

                                regItems = regItems + 1;
                                obtemp1.Secuencia = regItems;
                                ListarCopy[x].Secuencia = regItems;
                                obtemp1.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                obtemp1.FechaCreacion = DateTime.Now;

                                obtemp1.Linea = intobj1.Linea;
                                obtemp1.Familia = intobj1.Familia;
                                obtemp1.SubFamilia = intobj1.SubFamilia;
                                obtemp1.TipoComponente = intobj1.TipoComponente;
                                //cadArray2 = intobj.Version.Trim().Split('|');
                                //obtemp1.LineaDescripcion = intobj1.li;
                                // obtemp1.FamiliaDescripcion = cadArray2[1];
                                // obtemp1.SubFamiliaDescripcion = cadArray2[2];
                                //obtemp1.MedicamentoDescripcion = intobj1.m
                                // obtemp1.Secuencia = intobj.Secuencia;
                                obtemp1.FrecuenciaToma = intobj1.FrecuenciaToma;
                                obtemp1.IdUnidadMedida = intobj1.IdUnidadMedida;
                                obtemp1.Dosis = intobj1.Dosis;
                                obtemp1.IdVia = intobj1.IdVia;
                                obtemp1.Cantidad = intobj1.Cantidad;
                                obtemp1.Frecuencia = intobj1.Frecuencia;
                                obtemp1.DiasTratamiento = intobj1.DiasTratamiento;
                                // obtemp1.TipoMedicamento = intobj1.TipoMedicamento;
                                obtemp1.Presentacion = intobj1.Presentacion;
                                obtemp1.TipoComida = intobj1.TipoComida;
                                obtemp1.Estado = intobj1.Estado;
                                obtemp1.CodigoComponente = intobj1.CodigoComponente;
                                obtemp1.Medicamento = intobj1.CodigoComponente;
                                obtemp1.Comentario = (string)Session["Comentario"];
                                obtemp1.TipoReceta = intobj1.TipoReceta;
                                obtemp1.Periodo = intobj1.Periodo;
                                obtemp1.UsuarioAuditoria = intobj1.UsuarioAuditoria;
                                obtemp1.UnidadTiempo = intobj1.UnidadTiempo;
                                obtemp1.Indicacion = intobj1.Indicacion;
                                obtemp1.IndicadorEPS = intobj1.IndicadorEPS;



                                IdSecuencia1 = SvcMedicamentoFE.setMantenimiento(obtemp1);

                                x = x + 1;
                            }


                            /**********************************/
                            BE_Medicamento_FE obtemp;
                            foreach (SS_HC_Medicamento_FE intobj in ListarCopy)
                            {
                                obtemp = new BE_Medicamento_FE();
                                obtemp.Linea = intobj.Linea;
                                obtemp.Familia = intobj.Familia;
                                obtemp.SubFamilia = intobj.SubFamilia;
                                cadArray2 = intobj.Version.Trim().Split('|');
                                obtemp.LineaDescripcion = cadArray2[0];
                                obtemp.FamiliaDescripcion = cadArray2[1];
                                obtemp.SubFamiliaDescripcion = cadArray2[2];
                                obtemp.MedicamentoDescripcion = cadArray2[3];
                                obtemp.Secuencia = intobj.Secuencia;
                                obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                obtemp.Dosis = intobj.Dosis;
                                obtemp.IdVia = intobj.IdVia;
                                obtemp.Cantidad = intobj.Cantidad;
                                obtemp.Frecuencia = intobj.Frecuencia;
                                obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                obtemp.Presentacion = intobj.Presentacion;
                                obtemp.TipoComida = intobj.TipoComida;
                                obtemp.Estado = intobj.Estado;
                                obtemp.CodigoComponente = intobj.CodigoComponente;
                                obtemp.Medicamento = intobj.CodigoComponente;
                                obtemp.Comentario = (string)Session["Comentario"];
                                obtemp.TipoReceta = intobj.TipoReceta;
                                obtemp.Periodo = intobj.Periodo;
                                obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                obtemp.Indicacion = intobj.Indicacion;
                                obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                obtemp.Accion = "NUEVO";
                                objLista.Add(obtemp);

                                Session["Comentario"] = "";
                            }
                            Session["HC_MedicamentoList"] = objLista;
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                            objEntIndi.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion; // ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            objEntIndi.IdPaciente = listaCopiaForm[0].IdPaciente; //(int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEntIndi.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEntIndi.IdEpisodioAtencion = (long)listaCopiaForm[0].IdEpisodioAtencion; //(long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objEntIndi.Accion = "LISTAR";
                            objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                            if (objListaAntDetall.Count > 0)
                            {
                                Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                            }
                            //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                        /****/
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                return this.Store(objLista.ToList());
            }
        }

        public System.Web.Mvc.ActionResult addDataEliminar_CCEPF101(string MODO, int id, int tipo)
        {
            Log.Information("HClinicaController - addDataEliminar_CCEPF101 - Entrar");

            if (id > 0)
            {
                List<BE_Medicamento_FE> objListaMed = null;
                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;

                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    if (tipo == 1)
                    {
                        objListaMedDetail = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (objListaMedDetail != null)
                        {

                        }
                    }
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaList"];
                }
                if (objListaMed != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Secuencia == id)
                        {
                            result.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            result.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            result.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            result.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            result.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            result.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                            result.Accion = "DELETEINDIV";
                            string mensage = "";
                            int IdSecuencia = 0;
                            try
                            {
                                IdSecuencia = SvcMedicamentoFE.setMantenimiento(result);
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                                if (IdSecuencia > 0)
                                {
                                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                    else mensage = " actualizó ";
                                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                    String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                    Session["HC_MedicamentoList"] = null;
                                    Session["HC_MedicamentoDetalleList"] = null;
                                    Session["HC_MedicamentoDetalleListDELETE"] = null;
                                    eventoLoadPostFormulario(true, "storeExamenes", null);
                                    eventoPostFormulario(true, "");
                                    //showMensajeBox                           
                                    //X.Msg.Alert("Ventana de Mensajes ", mensaje).Show();
                                    if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                    {
                                        string containertemp = (string)Session["containerIdTemp"];
                                        string txttemp = (string)Session["textTemp"];

                                        LoadFormatos(containertemp, txttemp);
                                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                                    }
                                    else
                                    {

                                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                                    }
                                }
                                else
                                {
                                    eventoPostFormulario(false, "");
                                    X.Msg.Alert("Ventana de Mensajes ", "Sucedió un error inesperado").Show();
                                    return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, ex.Message);
                                //EventLog.GenerarLogError(ex);
                                var sqlException = ex.InnerException as SqlException;
                                var detalle = new MA_MiscelaneosDetalle();
                                detalle.ACCION = "ERRORES";
                                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                                if (sqlException != null)
                                {
                                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                                }
                                else
                                {
                                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                                }
                                string mostrarExc = "Excepción genérica:" + ex.Message;
                                if (resultado.Count > 0)
                                {
                                    mostrarExc = resultado[0].DescripcionLocal;
                                }
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                                throw; ;
                            }

                        }
                    }

                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addDataEliminarMedicamentos(string MODO, int id, int tipo, String hc)
        {
            Log.Information("HClinicaController - addDataEliminarMedicamentos - Entrar");

            var datosFirma = ENTITY_GLOBAL.Instance.FECHA_FIRMA;



            var dtValida = ENTITY_GLOBAL.Instance.dataExamenMedicamentos;
            string JSONstring = string.Empty;
            JSONstring = JsonConvert.SerializeObject(dtValida);
            List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
            List<EpisodioAtencion> listxx = result.Where(x => x.SecuenciaHCE == hc).ToList();
            if (listxx.Count > 0)
            {
                String datos = Convert.ToString(listxx[0].IndicadorCobrado);
                if (datos == "2")
                {
                    this.GetCmp<TextField>("txtdata").Text = "error";

                    return showMensajeNotify("Advertencia", "El Artículo " + id + " Ya esta Cobrado.", "ERROR");
                }
                else
                {
                    this.GetCmp<TextField>("txtdata").Text = "";
                }

            }
            else
            {
                this.GetCmp<TextField>("txtdata").Text = "";
            }


            if (id > 0)
            {

                List<BE_Medicamento_FE> objListaMed = new List<BE_Medicamento_FE>();

                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;
                objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                if (objListaMed == null)
                {
                    var objListaAnt = new List<SS_HC_Medicamento_FE>();
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();

                    SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                    objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEnt.Accion = "LISTAR";
                    // objEnt.TipoMedicamento = getValorFiltroInt(tipo); //para Medicina
                    ///AUMENTADO
                    objEnt.TipoMedicamento = 1; //para Medicina

                    objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);

                    objEnt.TipoMedicamento = 4;
                    objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
                    objListaAnt.AddRange(objListaAnt2);

                    string cadenas = "";
                    String[] cadArray;
                    if (objListaAnt.Count > 0)
                    {

                        objListaMed = new List<BE_Medicamento_FE>();
                        BE_Medicamento_FE obtemp;
                        foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                        {

                            obtemp = new BE_Medicamento_FE();
                            obtemp.Linea = intobj.Linea;
                            obtemp.Familia = intobj.Familia;
                            obtemp.SubFamilia = intobj.SubFamilia;
                            cadArray = intobj.Version.Trim().Split('|');
                            obtemp.LineaDescripcion = cadArray[0];
                            obtemp.FamiliaDescripcion = cadArray[1];
                            obtemp.SubFamiliaDescripcion = cadArray[2];
                            obtemp.MedicamentoDescripcion = cadArray[3];
                            obtemp.Secuencia = intobj.Secuencia;
                            obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                            obtemp.Dosis = intobj.Dosis;
                            obtemp.IdVia = intobj.IdVia;
                            obtemp.Cantidad = intobj.Cantidad;
                            obtemp.Frecuencia = intobj.Frecuencia;
                            obtemp.DiasTratamiento = intobj.DiasTratamiento;
                            obtemp.TipoMedicamento = intobj.TipoMedicamento;
                            obtemp.GrupoMedicamento = intobj.GrupoMedicamento;

                            if (intobj.GrupoMedicamento == 4 || intobj.GrupoMedicamento == null)
                            {
                                obtemp.GrupoMedicamento = 0;
                            }


                            obtemp.Presentacion = intobj.Presentacion;
                            obtemp.TipoComida = intobj.TipoComida;
                            /////ADD 25/09
                            obtemp.Estado = intobj.Estado;
                            obtemp.CodigoComponente = intobj.CodigoComponente;
                            obtemp.Medicamento = intobj.CodigoComponente;
                            obtemp.Comentario = intobj.Comentario;
                            ////
                            obtemp.TipoReceta = intobj.TipoReceta;
                            obtemp.Periodo = intobj.Periodo;
                            obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                            obtemp.UnidadTiempo = intobj.UnidadTiempo;
                            obtemp.Indicacion = intobj.Indicacion;
                            obtemp.IndicadorEPS = intobj.IndicadorEPS;
                            obtemp.Accion = "UPDATEINDIV";
                            objListaMed.Add(obtemp);
                        }
                    }
                    Session["HC_MedicamentoList"] = objListaMed;
                }


                if (objListaMed != null)
                {
                    foreach (var results in objListaMed)
                    {
                        if (results.Secuencia == id)
                        {
                            results.Accion = "DELETEINDIV";
                            HceService.SoaServiceSoapClient ObtenerTramaOAx = new HceService.SoaServiceSoapClient();
                            HceService.SS_HC_WS_EpisodioAtencion WsEpisodiox = new HceService.SS_HC_WS_EpisodioAtencion();
                            DataTable dtValidax = new DataTable();
                            WsEpisodiox.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            WsEpisodiox.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            WsEpisodiox.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            WsEpisodiox.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            WsEpisodiox.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            WsEpisodiox.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            WsEpisodiox.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            WsEpisodiox.FechaCreacion = DateTime.Now;
                            WsEpisodiox.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            try
                            {
                                int IdSecuencia = 0;
                                if (results.Accion == "DELETEINDIV")
                                {
                                    WsEpisodiox.UsuarioCreacion = "DELETERECETA";
                                    WsEpisodiox.SecuenciaHCE = results.SecuencialHCE;
                                    dtValidax = ObtenerTramaOAx.SoaValidaFacturacion(1, WsEpisodiox);

                                    Log.Information("HClinicaController DELETEINDIV- SoaValidaFacturacion - Entrar");
                                    Log.Debug("HClinicaController DELETEINDIV- SoaValidaFacturacion - objSave {A} ", WsEpisodiox);
                                    SS_HC_Medicamento_FE objSC = new SS_HC_Medicamento_FE();
                                    objSC = results;
                                    objSC.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    objSC.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objSC.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objSC.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    IdSecuencia = SvcMedicamentoFE.setMantenimiento(objSC);

                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Information("HClinicaController DELETEINDIV - SoaValidaFacturacion - Entrar");
                                Log.Debug("HClinicaController DELETEINDIV- SoaValidaFacturacion - objSave {A} ", ex.Message);
                            }

                            break;
                        }
                    }
                }
            }
            var console = Session["HC_MedicamentoList"];
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_MedicamentoTemp_CCEPF101(BE_Medicamento_FE objMedicamento)
        {
            Log.Information("HClinicaController - Save_MedicamentoTemp_CCEPF101 - Entrar");

            var store = X.GetCmp<Store>("storeExamenes");
            store.Reload();
            var Comentario = X.GetCmp<TextField>("Comentario");

            string mensage = "";
            var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
            var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
            if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
            {
                return showMensajeNotifyData("Error", "Asigne un Medico Por favor", "ERROR", false);
            }

            List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                int registro = -1;
                objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objMedicamento.Accion = "NUEVO";  //OBS
                objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                objMedicamento.Comentario = Comentario.Text;
                var objLista = new List<BE_Medicamento_FE>();
                Random rnd = new Random();
                objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                int regItems = 0;
                regItems = regItems + 1;
                objMedicamento.Secuencia = regItems;
                objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                objLista.Add(objMedicamento);


                /**** INTEROPERABILIDAD MIRTH ***/
                SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                EntyMIrth.Secuencia = objMedicamento.Secuencia;
                EntyMIrth.Componente = objMedicamento.CodigoComponente;
                EntyMIrth.SubFamilia = objMedicamento.SubFamilia.Trim();
                EntyMIrth.Familia = objMedicamento.Familia.Trim();
                EntyMIrth.Linea = objMedicamento.Linea.Trim();
                EntyMIrth.UnidadMedida = objMedicamento.IdUnidadMedida;
                EntyMIrth.Cantidad = objMedicamento.Cantidad;
                EntyMIrth.Via = objMedicamento.IdVia.ToString();
                EntyMIrth.Dosis = objMedicamento.Dosis;
                EntyMIrth.DiasTratamiento = objMedicamento.DiasTratamiento.ToString();
                EntyMIrth.Frecuencia = objMedicamento.Frecuencia.ToString();
                EntyMIrth.IndicadorEPS = objMedicamento.IndicadorEPS;
                EntyMIrth.TipoReceta = objMedicamento.TipoReceta;
                EntyMIrth.INDICACIONESPECIFICA = objMedicamento.Indicacion;
                EntyMIrth.SECUENCIALHCE = objMedicamento.SecuencialHCE;

                EntyMIrth.Estado = objMedicamento.Estado;
                EntyMIrth.UsuarioCreacion = objMedicamento.UsuarioCreacion;
                EntyMIrth.FechaCreacion = objMedicamento.FechaCreacion;
                EntyMIrth.UsuarioModificacion = objMedicamento.UsuarioModificacion;
                EntyMIrth.FechaModificacion = objMedicamento.FechaModificacion;

                ListaMirth.Add(EntyMIrth);
            }


            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            //var Comentario = X.GetCmp<TextField>("Comentario");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");

            Comentario.SetValue("");
            int IdSecuencia = 0;
            try
            {
                IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);

                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                if (IdSecuencia > 0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                    else mensage = " actualizó ";
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                    ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                    Session["HC_MedicamentoList"] = null;
                    Session["HC_MedicamentoDetalleList"] = null;
                    Session["HC_MedicamentoDetalleListDELETE"] = null;
                    eventoLoadPostFormulario(true, "storeExamenes", null);
                    eventoPostFormulario(true, "");
                    //showMensajeBox                           
                    X.Msg.Alert("Ventana de Mensajes ", mensaje).Show();

                    if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                    {
                        string containertemp = (string)Session["containerIdTemp"];
                        string txttemp = (string)Session["textTemp"];

                        LoadFormatos(containertemp, txttemp);
                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                    else
                    {

                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                    }
                }
                else
                {
                    eventoPostFormulario(false, "");
                    X.Msg.Alert("Ventana de Mensajes ", "Sucedió un error inesperado").Show();
                    return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                //EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:" + ex.Message;
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                eventoPostFormulario(false, "");
                return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                //throw;
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_CCEPF101(BE_Medicamento_FE objMedicamento)
        {
            Log.Information("HClinicaController - Editar_MedicamentoTemp_CCEPF101 - Entrar");
            string mensage = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }

            List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();
            int IdSecuencia = objMedicamento.Secuencia;
            if (objMedicamento.Accion != "NUEVO")
            {
                objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                objMedicamento.CodigoComponente = objMedicamento.Medicamento;
                objMedicamento.Accion = "UPDATEINDIV";


                /**** INTEROPERABILIDAD MIRTH ***/
                SS_IT_SaludRecetaIngreso EntyMIrth = new SS_IT_SaludRecetaIngreso();
                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                EntyMIrth.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                EntyMIrth.Secuencia = objMedicamento.Secuencia;
                EntyMIrth.Componente = objMedicamento.CodigoComponente;
                EntyMIrth.SubFamilia = objMedicamento.SubFamilia.Trim();
                EntyMIrth.Familia = objMedicamento.Familia.Trim();
                EntyMIrth.Linea = objMedicamento.Linea.Trim();
                EntyMIrth.UnidadMedida = objMedicamento.IdUnidadMedida;
                EntyMIrth.Cantidad = objMedicamento.Cantidad;
                EntyMIrth.Via = objMedicamento.IdVia.ToString();
                EntyMIrth.Dosis = objMedicamento.Dosis;
                EntyMIrth.DiasTratamiento = objMedicamento.DiasTratamiento.ToString();
                EntyMIrth.Frecuencia = objMedicamento.Frecuencia.ToString();
                EntyMIrth.IndicadorEPS = objMedicamento.IndicadorEPS;
                EntyMIrth.TipoReceta = objMedicamento.TipoReceta;
                EntyMIrth.INDICACIONESPECIFICA = objMedicamento.Indicacion;
                EntyMIrth.SECUENCIALHCE = objMedicamento.SecuencialHCE;

                EntyMIrth.Estado = objMedicamento.Estado;
                EntyMIrth.UsuarioCreacion = objMedicamento.UsuarioCreacion;
                EntyMIrth.FechaCreacion = objMedicamento.FechaCreacion;
                EntyMIrth.UsuarioModificacion = objMedicamento.UsuarioModificacion;
                EntyMIrth.FechaModificacion = objMedicamento.FechaModificacion;

                ListaMirth.Add(EntyMIrth);
            }

            objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
            objMedicamento.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

            var store = X.GetCmp<Store>("storeExamenes");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");


            IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);
            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

            if (IdSecuencia > 0)
            {

                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                else mensage = " actualizó ";
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                Session["HC_MedicamentoList"] = null;
                Session["HC_MedicamentoDetalleList"] = null;
                Session["HC_MedicamentoDetalleListDELETE"] = null;
                eventoLoadPostFormulario(true, "storeExamenes", null);
                eventoPostFormulario(true, "");

                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                {
                    string containertemp = (string)Session["containerIdTemp"];
                    string txttemp = (string)Session["textTemp"];

                    LoadFormatos(containertemp, txttemp);
                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                }
                else
                {

                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                }
            }
            else
            {
                eventoPostFormulario(false, "");
                return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
            }
        }

        public System.Web.Mvc.ActionResult MEDICAMENTODETALLEINDI_CCEPF101(string VALOR)
        {
            try
            {
                Log.Information("HClinicaController - MEDICAMENTODETALLEINDI_CCEPF101 - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Indicaciones_FE>();
                var objLista = new List<SS_HC_Indicaciones_FE>();
                var objListaLlega = new List<SS_HC_Indicaciones_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    if (Session["HC_MedicamentoDetalleList"] != null)
                    {
                        objListaLlega = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            int Secuencia = (int)Session["HC_MedicamentoID"];
                            foreach (SS_HC_Indicaciones_FE objEntity1 in objListaLlega)
                            {
                                if (objEntity1.SecuenciaMedicamento == Secuencia)
                                {
                                    if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                    {
                                        objEntity1.Accion = "UPDATE";
                                    }
                                    objLista.Add(objEntity1);
                                }
                            }
                        }
                    }
                    else
                    {
                        var LocalIndicaciones = new SS_HC_Indicaciones_FE();
                        int Secuencia = 0;
                        LocalIndicaciones.Accion = "LISTAR";
                        LocalIndicaciones.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalIndicaciones.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalIndicaciones.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            Secuencia = (int)Session["HC_MedicamentoID"];
                        }
                        LocalIndicaciones.SecuenciaMedicamento = Secuencia;
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        objLista = SvcMedicamentoFE.MedicamentoIndicacionesListar(LocalIndicaciones).ToList();
                        foreach (SS_HC_Indicaciones_FE result in objLista)
                        {
                            result.Accion = "UPDATE";
                        }
                        if (Listar.Count > 0)
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                return this.Store(objLista.ToList());

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult Save_Medicamentos_CCEPF101(BE_Medicamento_FE objMedicamento_EA, String selectionArray1, String selectionArray2, String Id, String Evento)
        {
            Log.Information("HClinicaController - Save_Medicamentos_CCEPF101 - Entrar");
            // TRABA
            var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
            var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
            if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
            {

                return showMensajeBox("Debe Asignar un Medico.",
                  "Advertencia", "WARNING");
            }
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            if (ObjListar == null)
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                return this.Direct();
            }

            if (Evento == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<BE_Medicamento_FE> ObjCabecera = new List<BE_Medicamento_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        objMedicamento_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objMedicamento_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objMedicamento_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objMedicamento_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objMedicamento_EA.FechaModificacion = DateTime.Now;
                        objMedicamento_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objMedicamento_EA.TipoMedicamento = 1;
                        objMedicamento_EA.Estado = 2;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                        {
                            objMedicamento_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objMedicamento_EA.FechaCreacion = DateTime.Now;
                            objMedicamento_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        objMedicamento_EA.Comentario = selectionArray2;
                        objMedicamento_EA.Accion = "UPDATE";
                        ObjCabecera.Add(objMedicamento_EA);
                        registro = 1;
                        string mensage = "";
                        // int reg= svc
                        if (registro > 0)
                        {

                            //TRANSACT
                            registro = SvcMedicamentoFE.setMantenimiento(objMedicamento_EA);
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                Session["ValoresTemporal"] = null;
                                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                                Session["COPIA_FORMULARIO"] = null;
                                Session["DATA_COPIA_FORM"] = null;
                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    //LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                //eventoPostFormulario(false, "");
                                return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF101 al Guardar :" + objMedicamento_EA, "ERROR", false);
                                //return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            //eventoPostFormulario(false, "");
                            return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF101 Cabeccera :" + valoreArray, "ERROR", false);
                            //return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                        //tring mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw;
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF101_Save_Medicamentos(SS_HC_Medicamento_FE objAnamEA, String selectionArray1, String selectionArray2, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaController - CCEPF101_Save_Medicamentos - Entrar");
            BE_Medicamento_FE obtemp;
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objLista = new List<BE_Medicamento_FE>();

            var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
            var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;


            foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
            {
                obtemp = new BE_Medicamento_FE();

                obtemp.Comentario = selectionArray2;

                obtemp.Accion = "NUEVO";
                objLista.Add(obtemp);

            }


            var objListaTT = Session["HC_MedicamentoNoFarmaco"];

            List<BE_Medicamento_FE> objListaMediNuevito = (List<BE_Medicamento_FE>)Session["HC_MedicamentoNoFarmaco"];


            var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;

            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_Indicaciones_FE> ObjLista2 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjLista12 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjListaGuarda = new List<SS_HC_Indicaciones_FE>();

            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/


            if (Evento == "Temp")
            {
                if (ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP != null)
                {
                    ObjLista12 = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];


                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista12)
                    {
                        if (ObjLista2.Count > 0)
                        {
                            if (ObjLista2[0].SecuenciaMedicamento != objEntity1.SecuenciaMedicamento)
                            {
                                if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                {
                                    objEntity1.Accion = "UPDATE";
                                }
                                ObjListaGuarda.Add(objEntity1);
                            }
                        }
                    }
                    Session["HC_MedicamentoDetalleList"] = ObjListaGuarda;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    Session["HC_MedicamentoDetalleList"] = ObjLista2;
                }
            }
            else if (Evento == "ListarDetalle")
            {
                Session["HC_MedicamentoID"] = Id;
                var nombreStore = "";
                if (idgrupo == 0)
                {
                    nombreStore = "storeExamenesDetalleIndic0";
                }
                else
                {
                    nombreStore = "storeExamenesDetalleIndicGrupo";
                }
                var store = X.GetCmp<Store>(nombreStore);
                store.Reload();
            }
            else if (Evento == "Server")
            {
                try
                {
                    //transact
                    List<SS_HC_Medicamento_FE> cabeceraMed = new List<SS_HC_Medicamento_FE>();
                    List<SS_HC_Indicaciones_FE> listadetalleMed = new List<SS_HC_Indicaciones_FE>();

                    List<SS_HC_Indicaciones_FE> listaTraceDetalleMed = new List<SS_HC_Indicaciones_FE>();

                    int Indicador = 0;
                    int IdSecuencia = 0;
                    addDataUpdateMedicamentos("UPDATEINDIV", selectionArray1, 1);
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_Medicamento_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String mensaje = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;

                        if (Session["HC_MedicamentoList"] != null)
                        {
                            var VARIA = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];

                            List<BE_Medicamento_FE> objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];

                            List<SS_HC_Indicaciones_FE> objListaMedDell = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];

                            List<BE_Medicamento_FE> objListaMediNuevo = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                            DataTable dtValida = new DataTable();

                            //foreach (BE_Medicamento_FE objEntity1 in objListaMed)
                            //{
                            //    objEntity1.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            //    objEntity1.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            //    objEntity1.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            //    objEntity1.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //    IdSecuencia = SvcMedicamentoFE.setMantenimientoMedicamentosAuditoria(2,objEntity1);
                            //}
                            List<EpisodioAtencion> listaDatito = new List<EpisodioAtencion>();
                            try
                            {

                                String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                              (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                                if (ENTITY_GLOBAL.Instance.COD_BANDEJA != "EMERGENCIA")
                                {
                                    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
                                    if (PARAM == "S")
                                    {
                                        WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                        WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                        WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                        WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                        WsEpisodio.FechaCreacion = DateTime.Now;
                                        WsEpisodio.UsuarioCreacion = null;
                                        WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    }
                                    else
                                    {

                                        dtValida.Columns.Add("CustLName", typeof(String));
                                        dtValida.Columns.Add("CustFName", typeof(String));
                                        dtValida.Columns.Add("Purchases", typeof(String));
                                        dtValida.Columns.Add("CustLName2", typeof(String));
                                        dtValida.Columns.Add("CustFName2", typeof(String));
                                        dtValida.Columns.Add("Purchases2", typeof(String));
                                    }
                                    //Guardar SOA
                                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                                    string JSONString = JsonConvert.SerializeObject(dtValida);
                                    listaDatito = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONString, typeof(List<EpisodioAtencion>));
                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, ex.Message);
                            }

                            foreach (BE_Medicamento_FE objEntity1 in objListaMed)
                            {
                                objEnt = new SS_HC_Medicamento_FE();
                                objEnt = objEntity1;
                                objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                                {
                                    objEnt.TipoReceta = 1;// 1;//OBS:  TIPO MEDICINA
                                }
                                objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                                objEnt.Comentario = selectionArray2;
                                objEnt.CodAlmacen = objEntity1.CodAlmacen; //ANGEL 16/07/2019
                                objEnt.Version = Version;


                                //if (firmita.Length > 0)
                                //{
                                if (objEntity1.Accion == "DELETEINDIV" || objEntity1.Accion == "UPDATEINDIV")
                                {
                                    int f = 0;
                                    foreach (EpisodioAtencion lista in listaDatito)
                                    {

                                        if (objEntity1.SecuencialHCE == lista.SecuenciaHCE && lista.IndicadorCobrado == 2)
                                        {
                                            f = 1;

                                            mensaje += "No se puede guardar medicamentos cobrados" + objEntity1.FamiliaDescripcion + " ";
                                            Indicador = 1;
                                        }
                                    }
                                    if (f == 0)
                                    {
                                        cabeceraMed.Add(objEnt);
                                    }
                                }
                                else
                                {
                                    cabeceraMed.Add(objEnt);

                                }
                                //}
                                //else
                                //{
                                //    cabeceraMed.Add(objEnt);

                                //}


                                SecuenciaMedica = objEnt.Secuencia; // si es individual
                                List<SS_HC_Indicaciones_FE> listaDel = null;
                                ////////////////
                                if (objEntity1.Accion != "DELETEINDIV")
                                {
                                    if (objListaMedDell != null)
                                    {

                                        if (objListaMedDell.Count > 0)
                                        {
                                            foreach (SS_HC_Indicaciones_FE objEntity2 in objListaMedDell)
                                            {
                                                if (objEntity2.GrupoMedicamento == 0)
                                                {

                                                    if (objEntity1.Secuencia == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                                else
                                                {
                                                    if (objEntity1.GrupoMedicamento == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica; //(int)objEntity1.GrupoMedicamento;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (selectionArray1 == null)
                        {
                            SS_HC_Medicamento_FE objEntFarmaco;
                            List<SS_HC_Medicamento_FE> cabeceraMedFarmaco = new List<SS_HC_Medicamento_FE>();
                            foreach (BE_Medicamento_FE objEntity1 in objListaMediNuevito)
                            {
                                objEntFarmaco = new SS_HC_Medicamento_FE();
                                objEntFarmaco = objEntity1;
                                // objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEntFarmaco.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEntFarmaco.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEntFarmaco.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEntFarmaco.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objEntFarmaco.TipoMedicamento = 1;
                                objEntFarmaco.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" ? "NUEVOFARMACO" : "UPDATEFARMACO";
                                if (objEntFarmaco.Accion == "NUEVOFARMACO")
                                {
                                    objEntFarmaco.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objEntFarmaco.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objEntFarmaco.FechaModificacion = DateTime.Now;
                                    objEntFarmaco.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                objEntFarmaco.Comentario = selectionArray2;
                                objEntFarmaco.Version = Version;
                                cabeceraMedFarmaco.Add(objEntFarmaco);
                            }
                            //SS_HC_EpisodioAtencion objFarmaco = new SS_HC_EpisodioAtencion();
                            //objFarmaco.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            //objFarmaco.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            //objFarmaco.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            //objFarmaco.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //objFarmaco.Accion = "PROC_FIRMARRECETA";
                            //long idResultadoFarma = 0;
                            //IdSecuencia = SvcMedicamentoFE.setMantenimientoGrupo(new SS_HC_Medicamento_FE(), cabeceraMedFarmaco, null, listaTraceDetalleMed, listadetalleMed);
                            // idResultadoFarma = SvcEpisodioAtencion.setMantenimiento(obj);

                        }
                        //if (selectionArray2.Length > 0)
                        //{
                        //    List<SS_HC_Medicamento_FE> objListaCabecera = new List<SS_HC_Medicamento_FE>();                        
                        //    foreach (SS_HC_Medicamento_FE objEntity1 in cabeceraMed)
                        //    {
                        //        objEntity1.Comentario = selectionArray2;
                        //        objListaCabecera.Add(objEntity1);
                        //    }
                        //    cabeceraMed = objListaCabecera;
                        //}
                        //Guarda en las Tablas HCEWEB
                        SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                        obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        obj.Accion = "PROC_FIRMARRECETA";
                        long idResultados = 0;
                        IdSecuencia = SvcMedicamentoFE.setMantenimientoGrupo(new SS_HC_Medicamento_FE(), cabeceraMed, null, listaTraceDetalleMed, listadetalleMed);

                        if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA")
                        {
                            if (cabeceraMed.Where(x => x.Accion == "NUEVO").ToList().Count() > 0)
                            {
                                SS_HC_Medicamento_FE objMedic = new SS_HC_Medicamento_FE();
                                objMedic.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                objMedic.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objMedic.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objMedic.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objMedic.Accion = "LISTAR";
                                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objMedic);

                                List<SS_HC_Medicamento_FE> LISTNEWCAB = new List<SS_HC_Medicamento_FE>();
                                foreach (SS_HC_Medicamento_FE objEntity1 in objListaAnt.Where(x => x.Accion == "NUEVO").ToList())
                                {
                                    if (objEntity1.TipoMedicamento == 1 || objEntity1.TipoMedicamento == 4)
                                    {
                                        objEnt = new SS_HC_Medicamento_FE();
                                        objEnt = objEntity1;
                                        objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                        objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                        objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                        objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                                        objEnt.Comentario = selectionArray2;
                                        objEnt.CodAlmacen = objEntity1.CodAlmacen; //ANGEL 16/07/2019
                                        objEnt.Version = Version;
                                        LISTNEWCAB.Add(objEnt);
                                    }
                                }
                                SS_FA_SolicitudProductoDetalle objEntity2 = new SS_FA_SolicitudProductoDetalle();
                                int flat = 1;
                                idResultados = SvcMedicamentoFE.setMantenimientoNotificaciones(flat, LISTNEWCAB, objEntity2);
                            }
                        }


                        SS_IT_SaludRecetaIndicacionesGENIngreso EntyMIrth = new SS_IT_SaludRecetaIndicacionesGENIngreso();
                        List<SS_IT_SaludRecetaIngreso> ListaMirth = new List<SS_IT_SaludRecetaIngreso>();


                        foreach (SS_HC_Medicamento_FE objEntity in cabeceraMed)
                        {
                            if (objEntity.Accion != "DELETEINDIV")
                            {
                                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                EntyMIrth.Secuencia = objEntity.Secuencia;
                                EntyMIrth.TipoIndicacion = 2;
                                EntyMIrth.Descripcion = objEntity.Comentario;
                                EntyMIrth.UsuarioCreacion = objEntity.UsuarioCreacion;
                                EntyMIrth.FechaCreacion = objEntity.FechaCreacion;
                                EntyMIrth.UsuarioModificacion = objEntity.UsuarioModificacion;
                                EntyMIrth.FechaModificacion = objEntity.FechaModificacion;
                                EntyMIrth.Estado = objEntity.Estado;

                                SS_IT_SaludRecetaIngreso EntyMIrth111 = new SS_IT_SaludRecetaIngreso();
                                EntyMIrth111.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                EntyMIrth111.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                EntyMIrth111.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                EntyMIrth111.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                EntyMIrth111.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                EntyMIrth111.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                EntyMIrth111.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;

                                EntyMIrth111.Secuencia = objEntity.Secuencia;
                                EntyMIrth111.Componente = objEntity.CodigoComponente;
                                EntyMIrth111.SubFamilia = objEntity.SubFamilia.Trim();
                                EntyMIrth111.Familia = objEntity.Familia.Trim();
                                EntyMIrth111.Linea = objEntity.Linea.Trim();
                                EntyMIrth111.UnidadMedida = objEntity.IdUnidadMedida;
                                EntyMIrth111.Cantidad = objEntity.Cantidad;
                                EntyMIrth111.Via = objEntity.IdVia.ToString();
                                EntyMIrth111.Dosis = objEntity.Dosis;
                                if (!string.IsNullOrEmpty(objEntity.TipoComida.ToString()))
                                {
                                    if (objEntity.TipoComida == 64)
                                    {
                                        var calculo = Convert.ToDouble(objEntity.Periodo) * 0.042;
                                        EntyMIrth111.DiasTratamiento = calculo.ToString();
                                    }
                                    if (objEntity.TipoComida == 65)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Periodo);
                                        EntyMIrth111.DiasTratamiento = calculo.ToString();
                                    }
                                    if (objEntity.TipoComida == 66)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Periodo) * 7;
                                        EntyMIrth111.DiasTratamiento = calculo.ToString();
                                    }
                                    if (objEntity.TipoComida == 67)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Periodo) * 30;
                                        EntyMIrth111.DiasTratamiento = calculo.ToString();
                                    }
                                }

                                if (!string.IsNullOrEmpty(objEntity.UnidadTiempo.ToString()))
                                {
                                    if (objEntity.UnidadTiempo == 64)
                                    {
                                        var calculo = Convert.ToDouble(objEntity.Frecuencia);
                                        EntyMIrth111.Frecuencia = calculo.ToString();
                                    }
                                    if (objEntity.UnidadTiempo == 65)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Frecuencia) * 24;
                                        EntyMIrth111.Frecuencia = calculo.ToString();
                                    }
                                    if (objEntity.UnidadTiempo == 66)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Frecuencia) * 168;
                                        EntyMIrth111.Frecuencia = calculo.ToString();
                                    }
                                    if (objEntity.UnidadTiempo == 67)
                                    {
                                        var calculo = Convert.ToDecimal(objEntity.Frecuencia) * 720;
                                        EntyMIrth111.Frecuencia = calculo.ToString();
                                    }
                                }

                                EntyMIrth111.IndicadorEPS = objEntity.IndicadorEPS;
                                EntyMIrth111.TipoReceta = objEntity.TipoReceta;
                                EntyMIrth111.INDICACIONESPECIFICA = objEntity.Indicacion;
                                EntyMIrth111.SECUENCIALHCE = objEntity.SecuencialHCE;

                                EntyMIrth111.Estado = objEntity.Estado;
                                EntyMIrth111.UsuarioCreacion = objEntity.UsuarioCreacion;
                                EntyMIrth111.FechaCreacion = DateTime.Now;
                                EntyMIrth111.UsuarioModificacion = objEntity.UsuarioModificacion;
                                EntyMIrth111.FechaModificacion = DateTime.Now;
                                ListaMirth.Add(EntyMIrth111);


                            }
                        }

                        int registro = 0;

                        Boolean rrr = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIndicacionesGENIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(EntyMIrth));

                        //if (LocalEnty.valor == 0)
                        //{
                        //    return showMensajeNotifyData("Error", "Vuelva a Guardar, No se ha podido migrar la información.", "INFO", false);
                        //}

                        HceService.SoaServiceSoapClient ObtenerTramaOAx = new HceService.SoaServiceSoapClient();
                        HceService.SS_HC_WS_EpisodioAtencion WsEpisodiox = new HceService.SS_HC_WS_EpisodioAtencion();
                        DataTable dtValidax = new DataTable();
                        WsEpisodiox.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodiox.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodiox.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodiox.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodiox.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodiox.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodiox.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        WsEpisodiox.FechaCreacion = DateTime.Now;
                        WsEpisodiox.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        try
                        {
                            foreach (BE_Medicamento_FE objEntity1 in cabeceraMed)
                            {
                                if (objEntity1.Accion == "DELETEINDIV")
                                {
                                    WsEpisodiox.UsuarioCreacion = "DELETERECETA";
                                    WsEpisodiox.SecuenciaHCE = objEntity1.SecuencialHCE;
                                    dtValidax = ObtenerTramaOAx.SoaValidaFacturacion(1, WsEpisodiox);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, ex.Message);
                        }

                        Boolean rrr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludRecetaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                        //if (dataDelete != null)
                        //{
                        // long idResultado = 0;
                        // idResultado = SvcEpisodioAtencion.setMantenimiento(obj);
                        //}

                        if (IdSecuencia > 0 || Indicador == 1)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            mensaje = mensaje + " Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                               UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                               ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                               ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
                            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                            ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();

                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoNoFarmaco"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["HC_MedicamentoDietaList"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;

                            //eventoLoadPostFormulario(true, "storeExamenes0", null); //jordan 2018/09/18
                            //ActivaDescativaButtonSave(true);

                            eventoPostFormulario(true, "");
                            this.GetCmp<Button>("cmdGuardar").Disabled = true;

                            //jordan 2018/09/18    
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    //string mostrarExc = "Excepción genérica:" + ex.Message;
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult mesaje()
        {

            showMensajeBox("Registrado", "Advertencia", "INFO");

            return this.Direct();
        }

        #endregion

        /**FORMULARIO FASE MIRTH*/

        #region CCEPF154_Formulario

        public System.Web.Mvc.ActionResult CCEPF154_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF154_View - Entrar");
                Session["PARAM_PATHEXAMENDOCUMENTOS"] = null;
                Session["PARAM_PATHEXAMENDOCUMENTOS_NUEVO"] = null;
                Session["Valores"] = null;
                Session["Data_154ArchivoDelete"] = null;

                ENTITY_GLOBAL.Instance.bitacora = 3;
                /////
                var LocalEnty = new SS_HC_ApoyoDiagnostico_FE();
                var Listar = new List<SS_HC_ApoyoDiagnostico_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                //LocalEnty.Secuencia = 1;
                Listar = SvcApoyoDiagnosticoFE.ApoyoCabecera_Listar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ApoyoDiagnostico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                    Session["154_numero"] = LocalEnty.NroInforme;
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }

                    Session["154_numero"] = "0";
                }
                /**CARGAR PATH como PARÁMETRO*/
                //defecto

                HttpPostedFile hpf = null;
                // string folderName = hpf.FileName.Split('_').ToArray().First();

                // CONFIGURAR ADJUNTO
                string paths = "~/resources/DocumentosAdjuntos/";
                paths = Server.MapPath(paths);
                if (!Directory.Exists(paths))
                {
                    //Directory.CreateDirectory(Server.MapPath(paths));
                }
                String PATH = paths;

                //de PARAMETROS
                List<ParametrosMast> listaParam = new List<ParametrosMast>();
                ParametrosMast objParam = new ParametrosMast();
                objParam.Accion = "LISTAR";
                objParam.CompaniaCodigo = "999999";
                objParam.AplicacionCodigo = "WA";//obs
                //objParam.ParametroClave = "PATH_EXAMD";
                objParam.ParametroClave = "PATH_IAD";

                listaParam = SvcParametro.listarParametro(objParam, 0, 0);
                if (listaParam.Count > 0)
                {
                    if ((listaParam[0].Texto + "").Trim() == "S")//USAR PARÁMETRO
                    {
                        PATH = (listaParam[0].DescripcionParametro + "").Trim();
                    }
                    else
                    {
                        showMensajeNotify("Excepción", listaParam[0].DescripcionParametro, "ERROR");
                    }

                }
                Session["PARAM_PATHEXAMENDOCUMENTOS"] = PATH;
                ENTITY_GLOBAL.Instance.RUTA_ARCHIVOS = PATH;

                // FIN ADJUNTO
                String PATH2 = "";
                List<ParametrosMast> listaParamNuevo = new List<ParametrosMast>();
                ParametrosMast objParamNuevo = new ParametrosMast();
                objParamNuevo.Accion = "LISTAR";
                objParamNuevo.CompaniaCodigo = "999999";
                objParamNuevo.AplicacionCodigo = "WA";//obs
                //objParam.ParametroClave = "PATH_EXAMD";
                objParamNuevo.ParametroClave = "PATH_NUEVO";

                listaParamNuevo = SvcParametro.listarParametro(objParamNuevo, 0, 0);
                if (listaParamNuevo.Count > 0)
                {
                    if ((listaParamNuevo[0].Texto + "").Trim() == "A")//USAR PARÁMETRO
                    {
                        PATH2 = (listaParamNuevo[0].DescripcionParametro + "").Trim();
                    }
                    else
                    {
                        showMensajeNotify("Excepción", listaParamNuevo[0].DescripcionParametro, "ERROR");
                    }

                }
                Session["PARAM_PATHEXAMENDOCUMENTOS_NUEVO"] = PATH2;
                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                Session["Data_154ArchivoDelete"] = null;
                Session["Valores_Archivos"] = null;
                Session["Data_154ArchivoDelete"] = null;
                Session["Data_154ArchivoSave"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEPF154_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF154_LISTADETALLE()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF154_LISTADETALLE - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                {

                    LocalEnty.ACCION = "APOYODIAG2";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;


                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    //Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                }
                else if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE"))
                {

                    LocalEnty.ACCION = "APOYODIAG2";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                    if (Listar.Count > 0)
                    {
                        if (Listar.Count > 0)
                        {
                            foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                            {
                                ObjTra.ACCION = "UPDATE";
                            }
                        }

                    }

                    if (Listar.Count == 0)
                    {
                        LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                        if (Listar.Count > 0)
                        {
                            foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                            {
                                ObjTra.ValorCodigo3 = ObjTra.ValorCodigo1;
                                ObjTra.ACCION = "NUEVO";
                            }
                        }

                    }



                }
                if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"))
                {
                    LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    if (Listar.Count > 0)
                    {
                        foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                        {
                            ObjTra.ACCION = "NUEVO";
                        }
                    }
                }

                //LocalEnty.ACCION = "APOYODIAG";
                //LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                //LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                //LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                //LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                //ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                //Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF154_ARCHIVOS(string tipoListado)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF154_ARCHIVOS - Entrar");

                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                var LocalEnty = new SS_HC_ApoyoDiagnosticoFile_FE();
                List<SS_HC_ApoyoDiagnosticoFile_FE> Listar = new List<SS_HC_ApoyoDiagnosticoFile_FE>();
                List<SS_HC_ApoyoDiagnosticoFile_FE> ListarDataTempAdd = new List<SS_HC_ApoyoDiagnosticoFile_FE>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID);
                LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico);
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                if (Session["154_numero"] != null)
                {
                    LocalEnty.NroInforme = (string)Session["154_numero"];
                }


                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcApoyoDiagnosticoFE.Archivos_Listar(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    var x = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }

                Session["Data_154ArchivoSave"] = Listar;

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addEliminar_CCEPF154(String MODO, String codigo, String secuencia, String idDiagnostico, String accion)
        {
            Log.Information("HClinicaController - addEliminar_CCEPF154 - Entrar");
            List<SS_HC_ApoyoDiagnosticoDet_FE> dataDelete = null;
            if ((codigo + "").Length > 0 && accion != "NUEVO")
            {
                if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                {
                    dataDelete = (List<SS_HC_ApoyoDiagnosticoDet_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ApoyoDiagnosticoDet_FE>();
                }
                SS_HC_ApoyoDiagnosticoDet_FE objDelete = new SS_HC_ApoyoDiagnosticoDet_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objDelete.IdDiagnostico = Convert.ToInt32(idDiagnostico);
                try
                {
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.CodigoComponente = cadenas;
                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Anamnesis_EADelete"] = dataDelete;
                }

                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();

        }


        public System.Web.Mvc.ActionResult AddGrilla(String selectionArray1, String selectionArray2, String text)
        {
            if (text == "CCEPF154")
            {
                Session["Valores"] = selectionArray1;
            }
            else if (text == "CCEPF150")
            {
                Session["Valores_CCEPF150"] = selectionArray1;
            }
            else if (text == "CCEPF200a")
            {
                Session["Valores_CCEPF200a"] = selectionArray1;
            }
            else if (text == "CCEPF200b")
            {
                Session["Valores_CCEPF200b"] = selectionArray1;
            }
            else if (text == "CCEPF200c")
            {
                Session["Valores_CCEPF200c"] = selectionArray1;
            }
            else if (text == "CCEPF150_Diag")
            {
                Session["Valores_CCEPF150_Diag"] = selectionArray2;
            }
            return null;
        }

        public System.Web.Mvc.ActionResult AddGrilla2(String selectionArray1, String selectionArray2, String text)
        {
            if (text == "CCEPF154")
            {
                Session["Valores"] = selectionArray1;

                Session["Valores_Archivos"] = selectionArray2;
            }
            return null;
        }

        public System.Web.Mvc.ActionResult UploadClick()
        {
            Log.Information("HClinicaController - UploadClick - Entrar");
            string tpl = "Uploaded file: {0}<br/>Size: {1} bytes";

            if (this.GetCmp<FileUploadField>("FileUploadField1").HasFile)
            {

                var archivo = this.GetCmp<FileUploadField>("FileUploadField1").FileBytes;

                X.Msg.Show(new MessageBoxConfig
                {
                    Buttons = MessageBox.Button.OK,
                    Icon = MessageBox.Icon.INFO,
                    Title = "Success",
                    Message = string.Format(tpl, this.GetCmp<FileUploadField>("FileUploadField1").PostedFile.FileName, this.GetCmp<FileUploadField>("FileUploadField1").PostedFile.ContentLength)
                });
            }
            else
            {
                X.Msg.Show(new MessageBoxConfig
                {
                    Buttons = MessageBox.Button.OK,
                    Icon = MessageBox.Icon.ERROR,
                    Title = "Fail",
                    Message = "No file uploaded"
                });
            }
            DirectResult result = new DirectResult();
            result.IsUpload = true;
            return result;
        }

        public System.Web.Mvc.ActionResult addEliminar_154Archivo(String MODO, int secuencia, int secuenciaInforme, string nombreFile)
        {
            Log.Information("HClinicaController - addEliminar_154Archivo - Entrar");

            List<SS_HC_ApoyoDiagnosticoFile_FE> dataDelete = null;
            List<SS_HC_ApoyoDiagnosticoFile_FE> dataSave = null;
            if ((MODO + "").Length > 0)
            {
                if (Session["Data_154ArchivoSave"] != null)
                {
                    dataSave = (List<SS_HC_ApoyoDiagnosticoFile_FE>)Session["Data_154ArchivoSave"];
                }
                if (dataSave == null)
                {
                    dataSave = new List<SS_HC_ApoyoDiagnosticoFile_FE>();
                }
                ///////////
                if (Session["Data_154ArchivoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ApoyoDiagnosticoFile_FE>)Session["Data_154ArchivoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ApoyoDiagnosticoFile_FE>();
                }
                SS_HC_ApoyoDiagnosticoFile_FE objDelete = new SS_HC_ApoyoDiagnosticoFile_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    objDelete.Secuencia = secuencia;
                    /* objDelete.SecuenciaInforme = secuenciaInforme;*/
                    objDelete.Accion = MODO;
                    //objDelete.RutaInforme = nombreFile;

                    objDelete.Nombre = nombreFile;
                    dataDelete.Add(objDelete);
                    Session["Data_154ArchivoDelete"] = dataDelete;

                    foreach (var result in dataSave)
                    {
                        if (result.Secuencia == secuencia)
                        {
                            dataSave.Remove(result);
                            break;
                        }
                    }
                    Session["Data_154ArchivoSave"] = dataSave;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_CCEPF154(SS_HC_ApoyoDiagnostico_FE objAnamnesis_EA)
        {
            Log.Information("HClinicaController - Save_CCEPF154 - Entrar");
            // TRABA
            String valoreArray = (string)Session["Valores"];
            SS_HC_ApoyoDiagnosticoDet_FE objDetalleEA;
            List<SS_HC_ApoyoDiagnosticoDet_FE> dataDelete1 = (List<SS_HC_ApoyoDiagnosticoDet_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            List<SS_HC_ApoyoDiagnosticoFile_FE> dataSaveTransact = new List<SS_HC_ApoyoDiagnosticoFile_FE>();
            List<SS_HC_ApoyoDiagnosticoFile_FE> dataSaveTemp = null;
            List<SS_HC_ApoyoDiagnosticoFile_FE> dataDeleteA = null;


            // service
            DataTable dtValida = new DataTable();
            HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();
            //if (valoreArray == "[]")
            //{
            //    eventoPostFormulario(false, "");
            //    return showMensajeNotifyData("Error", "Error: Falta agregar diagnóstico de referencia.", "ERROR", false);
            //}
            //else
            //{
            // TRANSACCIONALES
            SS_HC_ApoyoDiagnostico_FE ObjCabecera = new SS_HC_ApoyoDiagnostico_FE();
            List<SS_HC_ApoyoDiagnosticoDet_FE> ObjDetalle = new List<SS_HC_ApoyoDiagnosticoDet_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objAnamnesis_EA.FechaModificacion = DateTime.Now;
                    objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    if (objAnamnesis_EA.Accion == "NUEVO")
                    {
                        objAnamnesis_EA.Estado = 2;
                        objAnamnesis_EA.FechaCreacion = DateTime.Now;
                        objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    }
                    String VarRutaInforme = objAnamnesis_EA.RutaInforme;
                    //ObjCabecera.Add(objAnamnesis_EA);
                    registro = 1;
                    string mensage = "";
                    // int reg= svc
                    if (registro > 0)
                    {
                        //BLOQUE DELETE
                        List<SS_HC_ApoyoDiagnosticoDet_FE> dataDelete = null;
                        if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                        {
                            dataDelete = (List<SS_HC_ApoyoDiagnosticoDet_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                        }
                        if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                        {


                            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                          (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                            if (PARAM == "S")
                            {
                                WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                //  = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                WsEpisodio.UsuarioCreacion = "DELETEDIAX";
                                WsEpisodio.FechaCreacion = DateTime.Now;
                                WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            }
                            else
                            {
                                dtValida.Columns.Add("CustLName", typeof(String));
                                dtValida.Columns.Add("CustFName", typeof(String));
                                dtValida.Columns.Add("Purchases", typeof(String));
                                dtValida.Columns.Add("CustLName2", typeof(String));
                                dtValida.Columns.Add("CustFName2", typeof(String));
                                dtValida.Columns.Add("Purchases2", typeof(String));
                            }

                            foreach (var objDel in dataDelete)
                            {
                                WsEpisodio.IdEpisodioAtencion = objDel.IdDiagnostico;
                                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                                ObjDetalle.Add(objDel);
                                //registro = SvcFormularios.setMantenimiento(objDel);
                            }
                        }
                        ////////////
                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                        {
                            objDetalleEA = new SS_HC_ApoyoDiagnosticoDet_FE();
                            objDetalleEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            objDetalleEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objDetalleEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objDetalleEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                            string cadenas = cadArray[1].Replace("[", "");
                            cadenas = cadenas.Replace("]", "").Trim();
                            objDetalleEA.IdDiagnostico = Convert.ToInt32(cadenas);
                            objDetalleEA.DiagnosticoText = objEntity.ValorCodigo1.Trim();
                            objDetalleEA.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);

                            // CABECERA

                            if (objDetalleEA.Accion == "NUEVO")
                            {
                                objDetalleEA.Estado = 2;
                                objDetalleEA.FechaCreacion = DateTime.Now;
                                objDetalleEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            objDetalleEA.Accion = objEntity.ACCION;
                            objDetalleEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objDetalleEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objDetalleEA.FechaModificacion = DateTime.Now;
                            if (objDetalleEA.Accion != "NUEVO")
                            {
                                //objDetalleEA.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                objDetalleEA.FechaCreacion = objEntity.ValorFecha;
                            }
                            ObjDetalle.Add(objDetalleEA);
                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }

                        // ARCHIVOS ADJUNTO 
                        String pathFile;
                        ParametrosMast param = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Formulario("PATH_RPHCE", "");
                        if (param != null)
                        {
                            if ((param.Estado + "").Trim() == "2")
                            {
                                if ((param.Texto + "").Trim() == "S")
                                {
                                    pathFile = param.Explicacion;
                                }
                            }
                        }

                        //showMensajeNotify("Mensaje", pathFile, "INFO");
                        //PRIMERO: GRABAR LOS ARCHIVOS CARGADOS:
                        string mensaje;
                        if (Session["Data_154ArchivoDelete"] != null)
                        {


                            dataDeleteA = (List<SS_HC_ApoyoDiagnosticoFile_FE>)Session["Data_154ArchivoDelete"];
                            if (dataDeleteA.Count > 0)
                            {
                                var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;
                                var firmaInt = firmita.Length;
                                if (firmaInt > 0)
                                {
                                    //foreach (var reselimi in dataDeleteA)
                                    //{
                                    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                    WsEpisodio.UsuarioCreacion = "DELETEINFORME";
                                    //WsEpisodio.SecuenciaHCE = reselimi.Nombre;                                        
                                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                                    //}
                                }
                            }
                            dataSaveTransact.AddRange(dataDeleteA);
                        }

                        if (Session["Valores_Archivos"] != null)
                        {
                            dataSaveTemp = (List<SS_HC_ApoyoDiagnosticoFile_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["Valores_Archivos"], typeof(List<SS_HC_ApoyoDiagnosticoFile_FE>));

                            dataSaveTransact.AddRange(dataSaveTemp);
                        }

                        if (dataSaveTransact.Count > 0)
                        {
                            string PATHnuevo = Server.MapPath("../resources/DocumentosAdjuntos/");//Server.MapPath("ControllersImp/");
                            string PATH = (string)Session["PARAM_PATHEXAMENDOCUMENTOS"];
                            string PATH_NUEVO = (string)Session["PARAM_PATHEXAMENDOCUMENTOS_NUEVO"];
                            var sucursal = ENTITY_GLOBAL.Instance.Sucursal.Trim();
                            PATH_NUEVO = PATH_NUEVO + "" + sucursal + "\\";

                            var x = 0;
                            foreach (var result in dataSaveTransact)
                            {

                                dataSaveTransact[x].UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                dataSaveTransact[x].IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                dataSaveTransact[x].EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                dataSaveTransact[x].IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                dataSaveTransact[x].NroInforme = objAnamnesis_EA.NroInforme;
                                dataSaveTransact[x].RutaInforme = PATH_NUEVO + "" + result.Nombre;

                                if (dataSaveTransact[x].Nombre == "" && dataSaveTransact[x].Accion != "DELETE")
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Error", "Por Favor Ingrese un Archivo.", "ERROR", false);
                                }

                                if (result.Accion == "NUEVO")
                                {
                                    result.Estado = 2;
                                    result.FechaCreacion = DateTime.Now;
                                    result.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                result.FechaCreacion = DateTime.Now;
                                result.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                result.FechaModificacion = DateTime.Now;
                                result.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                //string destFile = System.IO.Path.Combine(PATH, result.RutaInforme);
                                //string destFile2 = System.IO.Path.Combine(PATHnuevo, result.RutaInforme);
                                if (result.RutaInforme != null)
                                {
                                    try
                                    {
                                        string codifoFile = "FILE_" + result.Secuencia + "_" + result.Secuencia;
                                        if (result.Accion == "DELETE")
                                        {

                                            deleteFileEvento(PATH_NUEVO, codifoFile, result.Nombre, "");
                                            deleteFileEvento(PATHnuevo, codifoFile, result.Nombre, "");
                                        }
                                        else
                                        {
                                            byte[] fileBytes = (byte[])UTILES_MENSAJES.getFilesBytesUploaded_HCE(codifoFile);
                                            if (fileBytes != null)
                                            {
                                                //FileStream fs = System.IO.File.Create(PATHnuevo + result.Nombre);
                                                //foreach (byte b in fileBytes)
                                                //{
                                                //    fs.WriteByte(b);
                                                //}
                                                //fs.Flush();
                                                //fs.Close();

                                                FileStream fs2 = System.IO.File.Create(PATHnuevo + result.Nombre);
                                                foreach (byte b1 in fileBytes)
                                                {
                                                    fs2.WriteByte(b1);
                                                }
                                                fs2.Flush();
                                                fs2.Close();
                                                System.IO.File.Copy(fs2.Name, PATH_NUEVO + result.Nombre, true);
                                                /*  System.IO.File.Copy(PATH + result.RutaInforme, PATHnuevo, true);*/
                                            }
                                        }
                                        registro = 1;
                                    }
                                    catch (Exception ex)
                                    {
                                        Log.Error(ex, ex.Message);
                                        mensaje = "Error en el grabado de los Archivos.";
                                    }
                                }
                                x = x + 1;
                            }
                        }

                        //if (ObjDetalle.Count == 0)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Error: Falta agregar diagnóstico de referencia.", "ERROR", false);
                        //}

                        //TRANSACT
                        //GUARDAR EN DB
                        if (registro > 0)
                        {
                            registro = SvcApoyoDiagnosticoFE.setMantenimiento2(objAnamnesis_EA, ObjDetalle, dataSaveTransact);
                            //Migrar por rest Primero Cabecera

                            if (ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION != 1)
                            {
                                SS_IT_SaludInformePROCIngreso objDetalleMirth = new SS_IT_SaludInformePROCIngreso();
                                objDetalleMirth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                objDetalleMirth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                objDetalleMirth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                objDetalleMirth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objDetalleMirth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objDetalleMirth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objDetalleMirth.Informe = objAnamnesis_EA.Observacion;
                                objDetalleMirth.Estado = 2;
                                objDetalleMirth.UsuarioCreacion = objAnamnesis_EA.UsuarioModificacion;
                                objDetalleMirth.UsuarioModificacion = objAnamnesis_EA.UsuarioModificacion;
                                objDetalleMirth.FechaCreacion = DateTime.Now;
                                objDetalleMirth.FechaModificacion = DateTime.Now;

                                SS_HC_AuditRoyal objAudit = new SS_HC_AuditRoyal();
                                Boolean rrr = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludInformePROCIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(objDetalleMirth));

                                //if (LocalEnty.valor == 0)
                                //{
                                //    return showMensajeNotifyData("Error", "Vuelva a Guardar, No se ha podido migrar la información.", "INFO", false);
                                //}

                                List<SS_IT_SaludInformeRutaIngreso> ListaMirth = new List<SS_IT_SaludInformeRutaIngreso>();
                                foreach (SS_HC_ApoyoDiagnosticoFile_FE objEntity in dataSaveTransact)
                                {
                                    SS_IT_SaludInformeRutaIngreso EntyMIrth = new SS_IT_SaludInformeRutaIngreso();
                                    EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                    EntyMIrth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                    EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    EntyMIrth.RutaInforme = objEntity.RutaInforme;
                                    EntyMIrth.Observacion = objEntity.Nombre;
                                    //EntyMIrth.Estado = objEntity.Estado;
                                    EntyMIrth.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    EntyMIrth.FechaCreacion = DateTime.Now;
                                    EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    EntyMIrth.FechaModificacion = DateTime.Now;
                                    EntyMIrth.Estado = 2;
                                    ListaMirth.Add(EntyMIrth);

                                }

                                Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/SaludInformeRutaIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                                //if (LocalEnty.valor == 0)
                                //{
                                //    return showMensajeNotifyData("Advertencia", "Vuelva a Guardar, No se ha podido migrar la información.", "INFO", false);
                                //}
                            }
                        }
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                        mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        if (registro > 0)
                        {
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            Session["ValoresTemporal"] = null;
                            Session["DataSS_HC_Anamnesis_EADelete"] = null;
                            Session["Data_154ArchivoDelete"] = null;
                            Session["Data_154ArchivoSave"] = null;
                            Session["Data_154ArchivoDelete"] = null;
                            Session["Valores_Archivos"] = null;

                            Session["Valores"] = null;
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEPF154 ", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEPF154 ", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            // }
            return this.Direct();
        }

        #endregion

        #region CCEPF151_Formulario

        public System.Web.Mvc.ActionResult CCEPF151_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF151_View - Entrar");
                /////
                var LocalEnty = new SS_HC_InterConsulta_FE();
                var Listar = new List<SS_HC_InterConsulta_FE>();
                LocalEnty.Accion = "LISTAR";
                ENTITY_GLOBAL.Instance.bitacora = 3;
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcInterConsultaFE.InterConsultaListar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_InterConsulta_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                /*********************************/
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_INTERCONSULTAS, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_InterConsulta_FE> ListarCopy = (List<SS_HC_InterConsulta_FE>)objetoGen;
                        LocalEnty.DiagnosticoText = ListarCopy[0].DiagnosticoText;
                    }
                }
                /********************************/

                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEPF151_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF151_ENFER_ACTUAL()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF151_ENFER_ACTUAL - Entrar");
                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.ACCION = "INTERCONSUFE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "INTERCONSUFE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    for (int i = 0; i < Listar.Count; i++)
                    {
                        Listar[i].ValorCodigo1 = Listar[i].ValorCodigo1.Substring(0, 5);
                    }


                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_INTERCONSULTAS, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                DataTable dtValida = new DataTable();

                String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                        (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                if (PARAM == "S")
                {
                    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    WsEpisodio.FechaCreacion = DateTime.Now;
                    WsEpisodio.UsuarioCreacion = "DATA_INTERCONSULTA";
                    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                }
                else
                {
                    dtValida.Columns.Add("CustLName", typeof(String));
                    dtValida.Columns.Add("CustFName", typeof(String));
                    dtValida.Columns.Add("Purchases", typeof(String));
                    dtValida.Columns.Add("CustLName2", typeof(String));
                    dtValida.Columns.Add("CustFName2", typeof(String));
                    dtValida.Columns.Add("Purchases2", typeof(String));

                }


                ENTITY_GLOBAL.Instance.dataInterconsulta = dtValida;


                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addEliminar_CCEPF151(String MODO, String codigo, String secuencia, String secuenciaHCE, string accion)
        {
            Log.Information("HClinicaController - addEliminar_CCEPF151 - Entrar");

            List<SS_HC_InterConsulta_FE> dataDelete = null;
            Session["ELIMINAR_DATA_INTERCONSULTA"] = codigo;
            var dtValida = ENTITY_GLOBAL.Instance.dataInterconsulta;
            string JSONstring = string.Empty;
            JSONstring = JsonConvert.SerializeObject(dtValida);
            List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
            List<EpisodioAtencion> listxx = result.Where(x => x.SecuenciaHCE == secuenciaHCE).ToList();
            if (listxx.Count > 0)
            {
                String datos = Convert.ToString(listxx[0].IndicadorCobrado1);
                if (listxx[0].IndicadorCobrado1 != null)
                {
                    this.GetCmp<TextField>("data").Text = "error";

                    return showMensajeNotify("Advertencia", "La Interconsulta ya esta Aperturada.", "ERROR");
                }
                else
                {
                    this.GetCmp<TextField>("data").Text = "";
                }

            }
            else
            {
                this.GetCmp<TextField>("data").Text = "";
            }


            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                {
                    dataDelete = (List<SS_HC_InterConsulta_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_InterConsulta_FE>();
                }
                SS_HC_InterConsulta_FE objDelete = new SS_HC_InterConsulta_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.I = Convert.ToInt32(cadenas);

                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.Accion = "DELETE";
                        objDelete.Secuencia = Convert.ToInt32(secuencia);
                        objDelete.ProcedimientoText = secuenciaHCE;
                        dataDelete.Add(objDelete);
                        Session["DataSS_HC_Anamnesis_EADelete"] = dataDelete;

                    }

                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }



        public JsonResult ObtenerExamenes(string sucursal, int tipo)
        {
            List<ExamenQur> examenes = new List<ExamenQur>();

            using (HttpClient clienteHttp = new HttpClient())
            {
                var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                clienteHttp.BaseAddress = new Uri(URL_SERVER);
                try
                {
                    var requestBody = new
                    {
                        sucursal = sucursal,
                        tipo = tipo
                    };
                    var request = clienteHttp.PostAsync("Consulta/obtenerCheckBox", requestBody, new JsonMediaTypeFormatter()).Result;
                    if (request.IsSuccessStatusCode)
                    {
                        var resultString = request.Content.ReadAsStringAsync().Result;
                        ViewResponseContenido Resultado = (ViewResponseContenido)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenido));
                        if (Resultado.valor > 0)
                        {
                            if (Resultado.contenido != null)
                            {
                                examenes = Resultado.contenido;
                            }

                        }
                    }
                    else
                    {
                        Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                }
            }

            return Json(examenes, JsonRequestBehavior.AllowGet);
        }

        public JsonResult TuAccion()
        {

            var examenes = new List<ExamenQur>
            {
                new ExamenQur { Id = 1, Descripcion = "Examen 1" },
                new ExamenQur { Id = 2, Descripcion = "Examen 2" },
                new ExamenQur { Id = 3, Descripcion = "Examen 3" }
            };

            // Creamos los checkboxes dinámicamente
            var checkboxes = examenes.Select(e => new Checkbox
            {
                BoxLabel = e.Descripcion,
                InputValue = e.Id.ToString(),
                Name = "examenes"
            }).ToList();
            // Obtener los datos que necesitas

            return Json(checkboxes, JsonRequestBehavior.AllowGet);
        }


        public ActionResult GetCheckBoxes()
        {
            var examenes = new List<ExamenQur>
            {
                new ExamenQur { Id = 1, Descripcion = "Examen 1" },
                new ExamenQur { Id = 2, Descripcion = "Examen 2" },
                new ExamenQur { Id = 3, Descripcion = "Examen 3" }
            };

            // Creamos los checkboxes dinámicamente
            var checkboxes = examenes.Select(e => new Checkbox
            {
                BoxLabel = e.Descripcion,
                InputValue = e.Id.ToString(),
                Name = "examenes"
            }).ToList();

            return this.Store(checkboxes);
        }

        public System.Web.Mvc.ActionResult Save_CCEPF151(SS_HC_InterConsulta_FE objAnamnesis_EA, String selectionArray0, String selection, String Save_CCEPF151, String text)
        {
            Log.Information("HClinicaController - Save_CCEPF151 - Entrar");

            // TRABA
            String valoreArray;
            String valoreArray1;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            List<SS_HC_InterConsulta_FE> ObjListar1;

            Session["ValoresTemporal0"] = selectionArray0;
            Session["ValoresTemporal"] = selection;
            String mensaje = "";
            int indicador = 0;

            valoreArray1 = (string)Session["ValoresTemporal0"];
            valoreArray = (string)Session["ValoresTemporal"];
            // TRANSACCIONALES
            SS_HC_InterConsulta_FE ObjCab = new SS_HC_InterConsulta_FE();
            List<SS_HC_InterConsulta_FE> ObjCabecera = new List<SS_HC_InterConsulta_FE>();
            List<SS_HC_InterConsulta_FE> ObjDetalle = new List<SS_HC_InterConsulta_FE>();
            List<SS_HC_InterConsulta_FE> lstDetalle = new List<SS_HC_InterConsulta_FE>();

            SS_HC_InterConsulta_FE objgrilla;
            List<EpisodioAtencion> result = new List<EpisodioAtencion>();

            DataTable dtValida = new DataTable();
            string JSONstring = string.Empty;

            HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (valoreArray1 != null)
                    {

                        ObjListar1 = (List<SS_HC_InterConsulta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray1, typeof(List<SS_HC_InterConsulta_FE>));
                        foreach (SS_HC_InterConsulta_FE objEntity in ObjListar1)
                        {
                            ObjCab = new SS_HC_InterConsulta_FE();
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") ObjCab.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objAnamnesis_EA.Version = "CCEPF151";
                            objAnamnesis_EA.DiagnosticoText = objEntity.DiagnosticoText;
                            objAnamnesis_EA.UsuarioCreacion = objEntity.UsuarioCreacion;
                            if (objEntity.Version != "")
                            {
                                objAnamnesis_EA.FechaCreacion = Convert.ToDateTime(objEntity.Version);
                            }
                            if (objAnamnesis_EA.Accion == "NUEVO")
                            {
                                objAnamnesis_EA.Estado = 2;
                                objAnamnesis_EA.FechaCreacion = DateTime.Now;
                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            objAnamnesis_EA.FechaModificacion = DateTime.Now;
                            objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            ObjCabecera.Add(objAnamnesis_EA);
                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }
                    }

                    registro = 1;
                    string mensage = "";
                    // int reg= svc
                    if (registro > 0)
                    {
                        String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                        if (PARAM == "S")
                        {
                            WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            WsEpisodio.FechaCreacion = DateTime.Now;
                            WsEpisodio.UsuarioCreacion = "DATA_INTERCONSULTA";
                            WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        else
                        {
                            dtValida.Columns.Add("CustLName", typeof(String));
                            dtValida.Columns.Add("CustFName", typeof(String));
                            dtValida.Columns.Add("Purchases", typeof(String));
                            dtValida.Columns.Add("CustLName2", typeof(String));
                            dtValida.Columns.Add("CustFName2", typeof(String));
                            dtValida.Columns.Add("Purchases2", typeof(String));
                        }

                        dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

                        JSONstring = JsonConvert.SerializeObject(dtValida);
                        result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
                        int ff = 0;
                        //BLOQUE DELETE
                        List<SS_HC_InterConsulta_FE> dataDelete = null;
                        if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                        {
                            dataDelete = (List<SS_HC_InterConsulta_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                        }
                        if (dataDelete != null)
                        {
                            if (result.Count > 0)
                            {
                                foreach (var deletes in dataDelete)
                                {
                                    foreach (EpisodioAtencion lista in result)
                                    {
                                        if (lista.SecuenciaHCE == deletes.ProcedimientoText)
                                        {//'500101' ELSE  '500203'
                                            if ((lista.Componente.Trim() == "500101" || lista.Componente.Trim() == "500201" || lista.Componente.Trim() == "500204" || lista.Componente.Trim() == "500203") && lista.IndicadorCobrado1 != null)
                                            {
                                                ff = 1;  //'500201' ELSE '500204'
                                                // mensaje += " No Puede Modificar Interconsultas Aperturadas. " + deletes.ProcedimientoText + " ";
                                                break;
                                            }
                                            else
                                            {
                                                WsEpisodio.UsuarioCreacion = "DELETEINTER";
                                                WsEpisodio.SecuenciaHCE = lista.SecuenciaHCE;
                                                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                                            }
                                        }
                                    }
                                    if (ff == 0)
                                    {
                                        ObjDetalle.Add(deletes);
                                    }
                                }
                            }
                            else
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);
                                }
                            }

                        }
                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                        {
                            objgrilla = new SS_HC_InterConsulta_FE();
                            objgrilla.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            objgrilla.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objgrilla.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objgrilla.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objgrilla.CodigoComponente = ENTITY_GLOBAL.Instance.CodigoOA;
                            objgrilla.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            objgrilla.IdDiagnostico = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            var secuenciales = objEntity.ValorCodigo5;
                            foreach (var objValor in ObjCabecera)
                            {
                                objgrilla.DiagnosticoText = objValor.DiagnosticoText;
                            }
                            /******************Modificado 05/12/2016: Orlando*****************/
                            var horas = "00:00:00";
                            horas = objEntity.ValorCodigo1;
                            //  }
                            string fechaReco = "1900-01-01 " + horas;
                            objgrilla.FechaPlaneada = DateTime.Parse(fechaReco);
                            //agregado por Joel - Fecha: 15-12-16

                            objgrilla.Accion = objEntity.ACCION;
                            objgrilla.Version = "CCEPF151";
                            objgrilla.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objgrilla.FechaCreacion = objEntity.ValorFecha;
                            //objgrilla.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;   
                            objgrilla.Estado = 2;
                            if (objgrilla.Accion != "NUEVO")
                            {
                                objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            }
                            else
                            {
                                objgrilla.FechaCreacion = DateTime.Now;
                                objgrilla.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }

                            objgrilla.FechaModificacion = DateTime.Now;
                            objgrilla.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;


                            if (objEntity.ValorCodigo2 == null)
                            {

                                this.GetCmp<TextField>("txtdata").Text = "error";
                                return showMensajeNotify("Advertencia", "Debe Ingresar una especialidad correcta", "ERROR");
                            }
                            else
                            {

                                this.GetCmp<TextField>("txtdata").Text = "";
                            }
                            int f1 = 0;

                            if ((result != null && result.Count > 0) && objgrilla.Accion != "NUEVO")
                            {
                                foreach (EpisodioAtencion lista in result)
                                {
                                    if (lista.SecuenciaHCE == secuenciales && (lista.Componente.Trim() == "500101" || lista.Componente.Trim() == "500201" || lista.Componente.Trim() == "500204" || lista.Componente.Trim() == "500203") && lista.IndicadorCobrado1 != null)
                                    {
                                        f1 = 1;
                                        mensaje += " No Puede Editar Interconsultas Aperturadas.";
                                        indicador = 2;
                                        break;
                                    }
                                }
                                if (f1 == 0)
                                {
                                    objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                    if (objEntity.ValorCodigo4.Length < 1 || objEntity.ValorCodigo4 == "")
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Debe ingresar el campo: Motivo de Interconsulta", "ERROR", false);
                                    }
                                    else { objgrilla.Observacion = Convert.ToString(objEntity.ValorCodigo4); }
                                    if (objEntity.ValorCodigo2.Trim() == "" || objEntity.ValorCodigo2.Trim() == "0")
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Debe seleccionar una opción en Especialidad", "ERROR", false);
                                    }
                                    else
                                    { objgrilla.IdEspecialidad = Convert.ToInt32(objEntity.ValorCodigo2); }
                                    //
                                    if (!string.IsNullOrEmpty(objEntity.ValorCodigo2))
                                        if (!string.IsNullOrEmpty(objEntity.ValorCodigo3)) objgrilla.IdTipoInterConsulta = Convert.ToInt32(objEntity.ValorCodigo3);
                                    ObjDetalle.Add(objgrilla);
                                }
                            }
                            else
                            {
                                objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);

                                if (objEntity.ValorCodigo4.Length < 1 || objEntity.ValorCodigo4 == "")
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Error", "Debe ingresar el campo: Motivo de Interconsulta", "ERROR", false);
                                }

                                else { objgrilla.Observacion = Convert.ToString(objEntity.ValorCodigo4); }

                                if (objEntity.ValorCodigo2.Trim() == "" || objEntity.ValorCodigo2.Trim() == "0")
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Error", "Debe seleccionar una opción en Especialidad", "ERROR", false);
                                }
                                else
                                { objgrilla.IdEspecialidad = Convert.ToInt32(objEntity.ValorCodigo2); }
                                //
                                if (!string.IsNullOrEmpty(objEntity.ValorCodigo2))
                                    if (!string.IsNullOrEmpty(objEntity.ValorCodigo3)) objgrilla.IdTipoInterConsulta = Convert.ToInt32(objEntity.ValorCodigo3);
                                ObjDetalle.Add(objgrilla);
                            }

                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }
                        //TRANSACT
                        SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
                        obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        obj.EpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion; //ADD 05.06.2017 OES Motivo: Modificacion en continuar episodio
                        obj.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
                        obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        string FEX = "";
                        FEX = DateTime.Now.ToShortDateString();
                        obj.FechaFirma = Convert.ToDateTime(FEX);

                        if (dataDelete != null)
                        {
                            long idResultado = 0;
                            idResultado = SvcEpisodioAtencion.setMantenimiento(obj);
                        }

                        obj.Accion = "PROC_FIRMARINTER";
                        long idResultados = 0;
                        registro = SvcInterConsultaFE.setMantenimiento(objAnamnesis_EA, ObjDetalle);
                        //Lista_InterConsultaSalida

                        var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                        HttpClient clienteHttp = new HttpClient();
                        clienteHttp.BaseAddress = new Uri(URL_SERVER);

                        SP_SS_HC_InterConsultaSalida_Lista_Result LocalEnty = new SP_SS_HC_InterConsultaSalida_Lista_Result();
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        LocalEnty.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        LocalEnty.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                        var xxListar = new List<SP_SS_HC_InterConsultaSalida_Lista_Result>();
                        var request = clienteHttp.PostAsync("Formato/Lista_InterConsultaSalida", LocalEnty, new JsonMediaTypeFormatter()).Result;
                        if (request.IsSuccessStatusCode)
                        {
                            var resultString = request.Content.ReadAsStringAsync().Result;
                            ViewResponse Resultado = (ViewResponse)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponse));
                            if (Resultado.valor > 0)
                            {
                                string Jsons = Newtonsoft.Json.JsonConvert.SerializeObject(Resultado.msg);
                                xxListar = (List<SP_SS_HC_InterConsultaSalida_Lista_Result>)Newtonsoft.Json.JsonConvert.DeserializeObject(Resultado.msg.ToString(), typeof(List<SP_SS_HC_InterConsultaSalida_Lista_Result>));
                            }
                        }

                        List<SS_IT_SaludProcedimientoIngreso> ListaMirth = new List<SS_IT_SaludProcedimientoIngreso>();
                        foreach (SP_SS_HC_InterConsultaSalida_Lista_Result objEntity in xxListar)
                        {
                            SS_IT_SaludProcedimientoIngreso EntyMIrth = new SS_IT_SaludProcedimientoIngreso();
                            EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            EntyMIrth.Secuencia = objEntity.Secuencia;
                            EntyMIrth.Componente = objEntity.CodigoSegus;
                            EntyMIrth.idtipoordenatencion = objEntity.IdTipoOrdenAtencion;
                            EntyMIrth.Cantidad = objEntity.Cantidad;
                            EntyMIrth.IndicadorEPS = objEntity.IndicadorEPS;
                            EntyMIrth.IdMedico = objEntity.Medico;
                            EntyMIrth.Especialidad = objEntity.IdEspecialidad;
                            EntyMIrth.IdCita = 0;
                            EntyMIrth.Observacion = objEntity.Observacion;
                            EntyMIrth.SecuencialHCE = objEntity.SecuencialHCE;
                            EntyMIrth.UsuarioCreacion = objEntity.UsuarioCreacion;
                            EntyMIrth.FechaCreacion = objEntity.FechaCreacion;
                            EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            EntyMIrth.FechaModificacion = DateTime.Now;
                            EntyMIrth.EstadoDocumento = 7;
                            EntyMIrth.Estado = 2;
                            ListaMirth.Add(EntyMIrth);
                        }

                        Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_ProcedimientoIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                        //if (MirthEnty.valor == 0)
                        //{                
                        //    return showMensajeNotifyData("Error", "Vuelva a Guardar, No se ha podido migrar la información.", "INFO", false);
                        //}

                        //idResultados = SvcEpisodioAtencion.setMantenimiento(obj);
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                        mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                           UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                           ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                           ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "") + mensaje;

                        if (registro > 0 || indicador == 2)
                        {
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            Session["ValoresTemporal"] = null;
                            Session["DataSS_HC_Anamnesis_EADelete"] = null;


                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                this.GetCmp<TextField>("txtdata").Text = "";
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Debe Ingresar Datos en la Grilla.", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw; ;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF152_Formulario

        public System.Web.Mvc.ActionResult CCEPF152_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF152_View - Entrar");
                /////
                var LocalEnty = new SS_HC_ProximaAtencion_FE();
                var Listar = new List<SS_HC_ProximaAtencion_FE>();
                LocalEnty.Accion = "LISTAR";
                ENTITY_GLOBAL.Instance.bitacora = 3;
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcProximaAtencionFE.ProximaAtencionListar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ProximaAtencion_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEPF152_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult seleccionadorMedicoServicio(String accionSeleccion, String accionListado)
        {
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorMedico", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoServicio(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionMedicoServicio - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdResponsableSer");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfResNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfResNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorMedicoPersonal(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaController - seleccionadorMedicoPersonal - Entrar");

            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorMedico", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoPersonal(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionMedicoPersonal - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdResponsableAco");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfacoNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfacoNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorPersonal(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaController - seleccionadorPersonal - Entrar");

            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorMedico", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionPersonal(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionPersonal - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdResponsableRec");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfrecNomMed");
            if (nombre != null && nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfrecNroMed");
            if (cmp != null && cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getSeleccionMedicoTres(String MODO, int persona, String cmp, String nombre, String idesp, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionMedicoTres - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var ValorNuevo = X.GetCmp<TextField>("ValorNuevo");
            if (cmp != null && cmp != "") { ValorNuevo.SetValue(persona.ToString() + '|' + cmp + '|' + nombre + '|' + idesp); }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF152_ENFER_ACTUAL()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF152_ENFER_ACTUAL - Entrar");

                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "PROXATENCIONFE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "PROXATENCIONFE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addEliminar_CCEPF152(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - addEliminar_CCEPF152 - Entrar");
            List<SS_HC_ProximaAtencion_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                {
                    dataDelete = (List<SS_HC_ProximaAtencion_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ProximaAtencion_FE>();
                }
                SS_HC_ProximaAtencion_FE objDelete = new SS_HC_ProximaAtencion_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.I = Convert.ToInt32(cadenas);  
                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    //objDelete.Secuencia = Convert.ToInt32(objDelete.CodigoElemento);
                    //objDelete.FechaSolicitada = Convert.ToDateTime(objDelete.ValorFecha);
                    //objDelete.IdEspecialidad = Convert.ToInt32(objDelete.ValorCodigo1);
                    //objDelete.IdPersonalSalud = Convert.ToInt32(objDelete.ValorCodigo2);
                    //if (!string.IsNullOrEmpty(objDelete.ValorCodigo4)) objDelete.Observacion = objDelete.ValorCodigo4.Trim();


                    objDelete.Accion = "DELETE";
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Anamnesis_EADelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_CCEPF152(SS_HC_ProximaAtencion_FE objAnamnesis_EA, String selection, String Save_CCEPF151, String text)
        {
            Log.Information("HClinicaController - Save_CCEPF152 - Entrar");
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            if (selection != null)
            {
                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selection, typeof(List<MA_MiscelaneosDetalle>));

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        /////TRANSACTION
                        List<SS_HC_ProximaAtencion_FE> listaCab = new List<SS_HC_ProximaAtencion_FE>();
                        List<SS_HC_ProximaAtencion_FE> listaDetalle = new List<SS_HC_ProximaAtencion_FE>();

                        int registro = -1;
                        string mensage = "";
                        var Envio = new List<MA_MiscelaneosDetalle>();
                        SS_HC_ProximaAtencion_FE Entity;

                        //string cadenas = "";
                        //String[] cadArray;

                        objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objAnamnesis_EA.FechaModificacion = DateTime.Now;
                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objAnamnesis_EA.Accion == "NUEVO")
                        {
                            objAnamnesis_EA.Estado = 2;
                            objAnamnesis_EA.FechaCreacion = DateTime.Now;
                            objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        listaCab.Add(objAnamnesis_EA);


                        Entity = new SS_HC_ProximaAtencion_FE();

                        //BLOQUE DELETE
                        List<SS_HC_ProximaAtencion_FE> dataDelete = null;
                        if (Session["DataSS_HC_Anamnesis_EADelete"] != null)
                        {
                            dataDelete = (List<SS_HC_ProximaAtencion_FE>)Session["DataSS_HC_Anamnesis_EADelete"];
                        }
                        if (dataDelete != null)
                        {
                            foreach (var objDel in dataDelete)
                            {
                                //registro = SvcDiagnosticoService.setMantenimiento(Entity);
                                listaDetalle.Add(objDel);
                            }
                        }
                        ////////////

                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                        {
                            Entity = new SS_HC_ProximaAtencion_FE();
                            //Entity.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;  //OBS
                            //Entity.Accion = "NUEVO";
                            Entity.Accion = objEntity.ACCION;
                            Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            Entity.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            //     Entity.FechaSolicitada = Convert.ToDateTime(objEntity.ValorFecha);
                            DateTime hoy = DateTime.Today;
                            if (objEntity.ValorFecha < hoy)
                            { /*eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "La Fecha Solicitada no puede ser menor a la fecha actual.", "ERROR", false);
                            */
                                eventoPostFormulario(false, "");
                                string mensaje3 = "La Fecha Solicitada no puede ser menor a la fecha actual.";
                                var field = X.GetCmp<TextField>("DBRecargar");
                                field.SetValue("NO");
                                return showMensajeNotify("Mensaje", mensaje3, "ERROR");
                            }
                            else
                            {
                                Entity.FechaSolicitada = Convert.ToDateTime(objEntity.ValorFecha);
                            }
                            try
                            {
                                if (objEntity.ValorCodigo1.Trim() == "" || objEntity.ValorCodigo1.Trim() == null)
                                { }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, ex.Message);
                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Error", "Debe seleccionar una opción de la lista Especialidad", "ERROR", false);
                            }
                            Entity.IdEspecialidad = Convert.ToInt32(objEntity.ValorCodigo1);
                            Entity.IdPersonalSalud = Convert.ToInt32(objEntity.ValorCodigo2);
                            if (!string.IsNullOrEmpty(objEntity.ValorCodigo4)) Entity.Observacion = objEntity.ValorCodigo4.Trim();
                            Entity.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            Entity.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            if (objEntity.ACCION != "NUEVO")
                            {
                                Entity.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            }
                            listaDetalle.Add(Entity);
                        }
                        //TRANSACT
                        registro = SvcProximaAtencionFE.setMantenimiento(objAnamnesis_EA, listaDetalle, null);

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        if (registro > 0)
                        {
                            //X.Msg.Notify("Ventana de Mensajes ",mensaje ).Show();
                            //ActivaDescativaButtonSave(true);
                            Session["DataSS_HC_Anamnesis_EADelete"] = null;
                            //  eventoLoadPostFormulario(true, "storeValoracion", null);
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                        }
                        else
                        {
                            //eventoPostFormulario(false, "");
                            //return showMensajeNotifyData("Error", "Debe seleccionar una opción de la lista Especialidad", "ERROR");
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            // int reg= svc
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            return this.Direct();
        }

        #endregion

        #region CCEPF202_FORMULARIO


        public System.Web.Mvc.ActionResult CCEPF202_View()
        {
            Session["Session_SS_HC_ReferenciaDetalle_Delete"] = null;
            try
            {
                Log.Information("HClinicaController - CCEPF202_View - Entrar");
                SS_HC_Referencia_FE LocalObj = null;
                var LocalEnty = new SS_HC_Referencia_FE();
                var Listar = new List<SS_HC_Referencia_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                }

                bool hallado = false;
                LocalObj = null;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcReferencia_FEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.ID_REFERENCIA = Listar[0].IdReferencia;
                    var field = X.GetCmp<TextField>("tfNomMed");
                    var tfNum = X.GetCmp<TextField>("tfNroMed");

                    var RestfNum = X.GetCmp<TextField>("tfResNroMed");
                    var Resfield = X.GetCmp<TextField>("tfResNomMed");

                    var acotfNum = X.GetCmp<TextField>("tfacoNroMed");
                    var acofield = X.GetCmp<TextField>("tfacoNomMed");



                    hallado = true;
                    int contador = 0;
                    LocalEnty.Accion = "UPDATE";
                    foreach (SS_HC_Referencia_FE objEntity in Listar)
                    {
                        VW_SS_GE_ESPECIALIDADMEDICO objFiltro = new VW_SS_GE_ESPECIALIDADMEDICO();
                        objFiltro.ACCION = "LISTARPAG";
                        var ListarMedico = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                        LocalEnty = objEntity;

                        if (!string.IsNullOrEmpty(objEntity.IdResponsableRef.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdResponsableRef);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    field.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.IdResponsableSer.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdResponsableSer);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    Resfield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    RestfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.IdResponsableAco.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdResponsableAco);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    acofield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    acotfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }




                    }
                }
                LocalEnty.Version = "CCEPF202";
                LocalEnty.Accion = "NUEVO";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                Session["Session_SS_HC_ReferenciaDetalle_FE_Delete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF202_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF202_LISTAR_GRILLA(String CodigoElemento)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF202_LISTAR_GRILLA - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.ACCION = "REFERENCIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = Convert.ToString(ENTITY_GLOBAL.Instance.ID_REFERENCIA);
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "REFERENCIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = Convert.ToString(ENTITY_GLOBAL.Instance.ID_REFERENCIA);
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }


                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF202_Eliminar_ReferencialDetalle(String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaController - CCEPF202_Eliminar_ReferencialDetalle - Entrar");
            List<SS_HC_ReferenciaDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_ReferenciaDetalle_Delete"] != null)
                {
                    dataDelete = (List<SS_HC_ReferenciaDetalle_FE>)Session["Session_SS_HC_ReferenciaDetalle_Delete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ReferenciaDetalle_FE>();
                }
                SS_HC_ReferenciaDetalle_FE objDelete = new SS_HC_ReferenciaDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = MODO; //"DELETEDETALLE"   
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.IdReferencia = Convert.ToInt32(ENTITY_GLOBAL.Instance.ID_REFERENCIA);

                    dataDelete.Add(objDelete);
                    Session["Session_SS_HC_ReferenciaDetalle_Delete"] = dataDelete;
                }
                catch (Exception ee)
                {

                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF202_Save_Referencia(SS_HC_Referencia_FE objSave, String selectionArray1, String text)
        {
            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                Session["ValoresTemporal1"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {

                // TRANSACCIONALES SS_HC_ReferenciaDetalle_FE
                List<SS_HC_ReferenciaDetalle_FE> ObjDetalle = new List<SS_HC_ReferenciaDetalle_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //objSave.HoraReferencia
                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;
                            string mensage = "";
                            registro = 1;
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_ReferenciaDetalle_FE> dataDelete = null;
                                if (Session["Session_SS_HC_ReferenciaDetalle_Delete"] != null)
                                {
                                    dataDelete = (List<SS_HC_ReferenciaDetalle_FE>)Session["Session_SS_HC_ReferenciaDetalle_Delete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);
                                    }
                                }

                                // Bloque UPDATE Y INSERT
                                var objReferenciaDetalle = new SS_HC_ReferenciaDetalle_FE();
                                valoreArray = (string)Session["ValoresTemporal1"];
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                {

                                    objReferenciaDetalle = new SS_HC_ReferenciaDetalle_FE();
                                    objReferenciaDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objReferenciaDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objReferenciaDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objReferenciaDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objReferenciaDetalle.Accion = objEntity.ACCION;
                                    objReferenciaDetalle.IdReferencia = Convert.ToInt32(objEntity.Compania);

                                    if (objReferenciaDetalle.Accion != "DETALLE")
                                    {
                                        objReferenciaDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                    }
                                    cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();
                                    objReferenciaDetalle.IdDiagnostico = Convert.ToInt32(cadenas);
                                    objReferenciaDetalle.Version = "CCEPF202";
                                    ObjDetalle.Add(objReferenciaDetalle);
                                    registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                }

                            }
                            //if (ObjDetalle.Count > 0)
                            //{
                            registro = SvcReferencia_FEService.setMantenimiento(objSave, ObjDetalle);
                            //}
                            //else {
                            //    registro = SvcReferencia_FEService.setMantenimientoCabecera(objSave);
                            //}


                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                                Session["ValoresTemporal1"] = null;
                                Session["Session_SS_HC_ReferenciaDetalle_Delete"] = null;
                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }



        #endregion

        #region CCEPF302_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF302_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF319_View - Entrar");
                var LocalEnty = new SS_HC_HojaRecienNacido_FE();
                var Listar = new List<SS_HC_HojaRecienNacido_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                }
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcHojaRecienNacidoFEService.listarEntidad(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_HojaRecienNacido_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;


                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF302_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }




        }

        public System.Web.Mvc.ActionResult CCEPF302_LISTAR_GRILLA()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF302_LISTAR_GRILLA - Entrar");
                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.ACCION = "HOJANACIDO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "HOJANACIDO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF302_Eliminar_Detalle(String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaController - CCEPF302_Eliminar_Detalle - Entrar");
            List<SS_HC_HojaRecienNacidoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"] != null)
                {
                    dataDelete = (List<SS_HC_HojaRecienNacidoDetalle_FE>)Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_HojaRecienNacidoDetalle_FE>();
                }
                SS_HC_HojaRecienNacidoDetalle_FE objDelete = new SS_HC_HojaRecienNacidoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"   
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.IdSecuencia = Convert.ToInt32(secuencia);
                    objDelete.IdRecienNacido = Convert.ToInt32(tipoRegistro);
                    dataDelete.Add(objDelete);
                    Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF302_Save_HojaRecienNacido(SS_HC_HojaRecienNacido_FE objSave, String selectionArray1, String text)
        {
            Log.Information("HClinicaController - CCEPF302_Save_HojaRecienNacido - Entrar");
            // TRABA
            String valoreArray;
            String dato, varFinal;
            int datolength;
            List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                Session["ValoresTemporal1"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                // TRANSACCIONALES SS_HC_ReferenciaDetalle_FE
                List<SS_HC_HojaRecienNacidoDetalle_FE> ObjDetalle = new List<SS_HC_HojaRecienNacidoDetalle_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.IdRecienNacido = 1;
                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;
                            Decimal peso = Convert.ToDecimal(objSave.Peso);
                            objSave.Peso = peso;

                            #region
                            //fecha nacimiento   
                            if (objSave.FechaNacimiento != null)
                            {
                                dato = Convert.ToString(objSave.FechaNacimiento).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.FechaNacimiento = Convert.ToDateTime(varFinal);
                            }
                            if (objSave.HoraNacimiento != null)
                            {
                                //hora nacimiento 
                                dato = Convert.ToString(objSave.HoraNacimiento).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.HoraNacimiento = Convert.ToDateTime(varFinal);
                            }
                            //fecha modificacion
                            //if (objSave.FechaModificacion != null)
                            //{
                            //    dato = Convert.ToString(objSave.FechaModificacion).Replace("{", "").Replace("}", "");
                            //    datolength = dato.Length;
                            //    varFinal = dato.Substring(0, 19);
                            //    objSave.FechaModificacion = Convert.ToDateTime(varFinal);
                            //}
                            //fecha RPRFecha
                            if (objSave.RPRFecha != null)
                            {
                                dato = Convert.ToString(objSave.RPRFecha).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.RPRFecha = Convert.ToDateTime(varFinal);
                            }
                            //fecha HIVFecha
                            if (objSave.HIVFecha != null)
                            {
                                dato = Convert.ToString(objSave.HIVFecha).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.HIVFecha = Convert.ToDateTime(varFinal);
                            }
                            // FechaUltima
                            if (objSave.FechaUltima != null)
                            {
                                dato = Convert.ToString(objSave.FechaUltima).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.FechaUltima = Convert.ToDateTime(varFinal);
                            }
                            // FUR
                            if (objSave.FUR != null)
                            {
                                dato = Convert.ToString(objSave.FUR).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.FUR = Convert.ToDateTime(varFinal);
                            }
                            // HoraDuracion
                            if (objSave.HoraDuracion != null)
                            {
                                dato = Convert.ToString(objSave.HoraDuracion).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.HoraDuracion = Convert.ToDateTime(varFinal);
                            }
                            // HoraMembranas
                            if (objSave.HoraMembranas != null)
                            {
                                dato = Convert.ToString(objSave.HoraMembranas).Replace("{", "").Replace("}", "");
                                datolength = dato.Length;
                                varFinal = dato.Substring(0, 19);
                                objSave.HoraMembranas = Convert.ToDateTime(varFinal);
                            }
                            objSave.Peso = Convert.ToDecimal(objSave.Peso);
                            //// FechaCreacion
                            //dato = Convert.ToString(objSave.FechaCreacion).Replace("{", "").Replace("}", "");
                            //datolength = dato.Length;
                            //varFinal = dato.Substring(0, 19);
                            //objSave.FechaCreacion = Convert.ToDateTime(varFinal);
                            #endregion

                            string mensage = "";
                            registro = 1;
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_HojaRecienNacidoDetalle_FE> dataDelete = null;
                                if (Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"] != null)
                                {
                                    dataDelete = (List<SS_HC_HojaRecienNacidoDetalle_FE>)Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);
                                    }
                                }

                                // Bloque UPDATE Y INSERT
                                var objReferenciaDetalle = new SS_HC_HojaRecienNacidoDetalle_FE();
                                valoreArray = (string)Session["ValoresTemporal1"];
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                {
                                    objReferenciaDetalle = new SS_HC_HojaRecienNacidoDetalle_FE();
                                    objReferenciaDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objReferenciaDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objReferenciaDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objReferenciaDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objReferenciaDetalle.Accion = objEntity.ACCION;
                                    objReferenciaDetalle.IdRecienNacido = 1;
                                    if (objReferenciaDetalle.Accion != "DETALLE")
                                    {
                                        objReferenciaDetalle.IdSecuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                    }
                                    //cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                    //cadenas = cadArray[1].Replace("[", "");
                                    //cadenas = cadenas.Replace("]", "").Trim();
                                    objReferenciaDetalle.Tiempo = objEntity.ValorCodigo1;
                                    objReferenciaDetalle.Frecuencia = Convert.ToInt32(objEntity.ValorCodigo2);
                                    objReferenciaDetalle.Esfuerzo = Convert.ToInt32(objEntity.ValorCodigo3);
                                    objReferenciaDetalle.Tono = Convert.ToInt32(objEntity.ValorEntero4);
                                    objReferenciaDetalle.Irritabilidad = Convert.ToInt32(objEntity.ValorEntero5);
                                    objReferenciaDetalle.Color = Convert.ToInt32(objEntity.ValorEntero6);
                                    objReferenciaDetalle.Total = Convert.ToInt32(objEntity.ValorEntero7);
                                    objReferenciaDetalle.Estado = 1;

                                    objReferenciaDetalle.Version = "CCEPF302";
                                    ObjDetalle.Add(objReferenciaDetalle);
                                    registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                }
                            }

                            registro = SvcHojaRecienNacidoFEService.setMantenimiento(objSave, ObjDetalle);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                Session["ValoresTemporal1"] = null;
                                Session["Session_SS_HC_HojaRecienNacidoDetalle_Delete"] = null;
                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }


        #endregion

        #region CCEPF303_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF303_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF303_View - Entrar");

                /////
                var LocalEnty = new SS_HC_Anamnesis_AP();
                var Listar = new List<SS_HC_Anamnesis_AP>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                }

                Listar = SvcFormularioAnamnesisAP.AnamnesisAP_Listar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_AP objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;

                    }
                }
                Session["APPatologicos"] = null;
                Session["APTrabajo"] = null;
                Session["APQuirurgicas"] = null;
                Session["APEpidomiologia"] = null;
                Session["APGenerales"] = null;
                Session["DataSS_HC_Anamnesis_APDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);


                var Listado = new List<PERSONAMAST>();
                var paciente = new PERSONAMAST();
                var objPaciente = new PERSONAMAST();
                paciente.ACCION = "LISTARPACIENTE";

                paciente.Persona = (int)ENTITY_GLOBAL.Instance.PacienteID;
                Listado = SvcPersonaMast.GetSelectPersonaMast(paciente).ToList();
                var sexoFemenino = "F";
                var edadpediatrica = 14;
                var edadmenor = 18;
                var edadadultomayor = 60;

                if (Listado.Count > 0)
                {
                    foreach (PERSONAMAST objeto in Listado)
                    {
                        objPaciente = objeto;
                        /*********contenedor 1************/
                        if (objPaciente.Sexo == sexoFemenino && objPaciente.edad > edadpediatrica && objPaciente.edad < edadadultomayor && objPaciente.edad != null)
                        {
                            var fsDos = this.GetCmp<FieldSet>("fsAntecedenteGestacion");
                            fsDos.Hidden = false;
                            var fsTres = this.GetCmp<FieldSet>("fsAntecedenteParto");
                            fsTres.Hidden = false;
                        }
                        else
                        {
                            var fsDos = this.GetCmp<FieldSet>("fsAntecedenteGestacion");
                            fsDos.Hidden = true;
                            var fsTres = this.GetCmp<FieldSet>("fsAntecedenteParto");
                            fsTres.Hidden = true;
                        }
                        /*********contenedor 2************/
                        if (objPaciente.edad < edadmenor)
                        {
                            var fsCuatro = this.GetCmp<FieldSet>("fsAntecedenteNacimiento");
                            fsCuatro.Hidden = false;
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedentePatologico");
                            fsCinco.Hidden = false;
                        }
                        else
                        {
                            var fsCuatro = this.GetCmp<FieldSet>("fsAntecedenteNacimiento");
                            fsCuatro.Hidden = true;
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedentePatologico");
                            fsCinco.Hidden = true;
                        }
                        /*********contenedor 3************/
                        if (objPaciente.edad < edadmenor)
                        {
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedenteLactancia");
                            fsCinco.Hidden = false;
                        }
                        else
                        {
                            var fsCinco = this.GetCmp<FieldSet>("fsAntecedenteLactancia");
                            fsCinco.Hidden = true;
                        }
                        if (objPaciente.Sexo == sexoFemenino && objPaciente.edad > edadpediatrica && objPaciente.edad < edadadultomayor && objPaciente.edad != null)
                        {
                            var fsSeis = this.GetCmp<FieldSet>("fsEsferaSexual");
                            fsSeis.Hidden = false;
                            var fsSiete = this.GetCmp<FieldSet>("fsGinecoObstetrico");
                            fsSiete.Hidden = false;
                        }
                        else
                        {
                            var fsSeis = this.GetCmp<FieldSet>("fsEsferaSexual");
                            fsSeis.Hidden = true;
                            var fsSiete = this.GetCmp<FieldSet>("fsGinecoObstetrico");
                            fsSiete.Hidden = true;
                        }
                        /***********contenedor 5***********/
                        if (objPaciente.edad <= edadpediatrica && objPaciente.edad != null)
                        {
                            var fsOcho = this.GetCmp<FieldSet>("fsInmunizaciones");
                            fsOcho.Hidden = false;
                            var fsNueve = this.GetCmp<FieldSet>("fsHabitos");
                            fsNueve.Hidden = true;
                        }
                        else
                        {
                            var fsOcho = this.GetCmp<FieldSet>("fsInmunizaciones");
                            fsOcho.Hidden = true;
                            var fsNueve = this.GetCmp<FieldSet>("fsHabitos");
                            fsNueve.Hidden = false;
                        }

                        /***********contenedor 7***********/
                        if (objPaciente.edad != null && objPaciente.edad >= edadadultomayor)
                        {
                            var fsDiez = this.GetCmp<FieldSet>("fsActividades");
                            fsDiez.Hidden = false;
                            var fsDoce = this.GetCmp<FieldSet>("fsEstadoCognitivo");
                            fsDoce.Hidden = false;
                            var fsTrece = this.GetCmp<FieldSet>("fsEstadoAfectivo");
                            fsTrece.Hidden = false;
                            var fsCatorce = this.GetCmp<Label>("lbActividades");
                            fsCatorce.Hidden = false;
                        }
                        else
                        {
                            var fsDiez = this.GetCmp<FieldSet>("fsActividades");
                            fsDiez.Hidden = true;
                            var fsDoce = this.GetCmp<FieldSet>("fsEstadoCognitivo");
                            fsDoce.Hidden = true;
                            var fsTrece = this.GetCmp<FieldSet>("fsEstadoAfectivo");
                            fsTrece.Hidden = true;
                            var fsCatorce = this.GetCmp<Label>("lbActividades");
                            fsCatorce.Hidden = true;
                        }
                        /***********contenedor 8***********/
                        if (objPaciente.edad != null && objPaciente.edad >= edadadultomayor)
                        {
                            var fsOnce = this.GetCmp<FieldSet>("fsValoracionSocio");
                            fsOnce.Hidden = false;
                        }
                        else
                        {
                            var fsOnce = this.GetCmp<FieldSet>("fsValoracionSocio");
                            fsOnce.Hidden = true;
                        }
                        /**********************************/
                    }
                }
                /***************************************************/
                return View("FormulariosExtras/CCEPF303_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        #endregion

        #region CCEPF201_FORMULARIO

        #endregion

        #region CCEPF323_FORMULARIO

        #endregion

        /**** INICIO FORMULARIO DINAMICO - FIJO: (MEDICOS) ***/
        #region CCEPF330_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF330_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF330_View - Entrar");
                var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");

                HttpClient clienteHttp = new HttpClient();
                clienteHttp.BaseAddress = new Uri(URL_SERVER);

                var LocalEnty = new SS_HC_InformeConsultaExterna_FE();
                var Listar = new List<SS_HC_InformeConsultaExterna_FE>();
                var ListarExamen = new List<SS_HC_InformeConsultaExterna_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                var request = clienteHttp.PostAsync("Formato/ListarInformeConsultaExterna", LocalEnty, new JsonMediaTypeFormatter()).Result;
                if (request.IsSuccessStatusCode)
                {
                    var resultString = request.Content.ReadAsStringAsync().Result;
                    ViewResponse Resultado = (ViewResponse)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponse));
                    if (Resultado.valor > 0)
                    {
                        string Jsons = Newtonsoft.Json.JsonConvert.SerializeObject(Resultado.msg);
                        List<SS_HC_InformeConsultaExterna_FE> xxListar = (List<SS_HC_InformeConsultaExterna_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(Resultado.msg.ToString(), typeof(List<SS_HC_InformeConsultaExterna_FE>));
                        Listar = xxListar;
                    }
                }

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_InformeConsultaExterna_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            if (LocalEnty.IdConsultaExterna != 0)
                            {
                                Session["id_informeclinico"] = LocalEnty.IdConsultaExterna + "";
                            }
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF330_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF330_Save_InformeConsultaExterna(SS_HC_InformeConsultaExterna_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF330_Save_InformeConsultaExterna - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        SS_IT_SaludAnamnesisIngreso objMirth = new SS_IT_SaludAnamnesisIngreso();
                        objMirth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objMirth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        objMirth.LineaOrdenAtencion = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        objMirth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objMirth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objMirth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objMirth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objMirth.EXAMENCLINICOOBS = objSave.Observacion;

                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        ViewResponse LocalEnty = new ViewResponse();
                        LocalEnty.valor = 2;
                        if (objSave.Accion == "NUEVO")
                        {
                            objMirth.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objMirth.FechaCreacion = DateTime.Now;

                            LocalEnty.valor = 1;
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        else
                        {
                            objMirth.UsuarioCreacion = objSave.UsuarioCreacion;
                            objMirth.FechaCreacion = objSave.FechaCreacion;
                        }

                        string idexamen = (string)Session["id_informeclinico"];
                        if (idexamen != null && idexamen != "")
                        {
                            objSave.IdConsultaExterna = int.Parse(idexamen);
                            Session["id_informeclinico"] = null;
                        }

                        LocalEnty.msg = Newtonsoft.Json.JsonConvert.SerializeObject(objMirth);
                        var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                        HttpClient clienteHttp = new HttpClient();
                        clienteHttp.BaseAddress = new Uri(URL_SERVER);

                        var request = clienteHttp.PostAsync("Formato/MantenimientoInformeConsultaExterna", LocalEnty, new JsonMediaTypeFormatter()).Result;
                        if (request.IsSuccessStatusCode)
                        {
                            var resultString = request.Content.ReadAsStringAsync().Result;
                            ViewResponse Resultado = (ViewResponse)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponse));
                            if (Resultado.valor > 0)
                            {
                                registro = Convert.ToInt32(Resultado.valor);
                            }
                        }
                        clienteHttp.Dispose();
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F153", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F153", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            return this.Direct();
        }


        #endregion

        #region CCEPF630_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF630_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF630_View - Entrar");
                /////          
                Session["ALERGIA_FLAG"] = null;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                var LocalEnty = new SS_HC_Triaje_Ant_Alergia_FE();
                var Listar = new List<SS_HC_Triaje_Ant_Alergia_FE>();
                var ListarAUX = new List<SS_HC_Triaje_Ant_Alergia_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                    //LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                // LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                Listar = SvcTriajeAntAlergia.TriajeAlergia_Listar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Triaje_Ant_Alergia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Triaje_Ant_Alergia_FE>)getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_ALERGIAS, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Triaje_Ant_Alergia_FE> objListaAnt2 = (List<SS_HC_Triaje_Ant_Alergia_FE>)objetoGen;

                        if (objListaAnt2.Count > 0)
                        {
                            //SS_HC_Alergia_FE obtemp;
                            foreach (SS_HC_Triaje_Ant_Alergia_FE intobj in objListaAnt2)
                            {
                                //obtemp = new SS_HC_Alergia_FE();
                                LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();

                                LocalEnty.Accion = "NUEVO";
                                // LocalEnty.Add(obtemp);
                            }
                        }
                    }
                }
                ///////////////////////////////////////////////

                Session["DataSS_HC_Alergia_FEDelete"] = null;
                Session["DataSS_HC_Alergia_FEDeleteTriaje"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                if (LocalEnty.TieneHistoria == "S"
                    || LocalEnty.TieneAlimento == "S"
                    || LocalEnty.TieneAmbiental == "S"
                    || LocalEnty.TieneContacto == "S"
                    )
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = true;                 

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = false;

                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = false;

                    // var cmdeliminar1 = this.GetCmp<FieldSet>("grillaExamenesManual");
                    // cmdeliminar1.Disabled = false;

                    Session["ALERGIA_FLAG"] = "S";
                }
                else
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = false;
                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = true;

                    // var cmdeliminar1 = this.GetCmp<FieldSet>("grillaExamenesManual");
                    // cmdeliminar1.Disabled = true;

                    Session["ALERGIA_FLAG"] = "N";

                }
                if (LocalEnty.MedicamentoRegular == "N" || LocalEnty.MedicamentoRegular == null)
                {

                    var cmdUno = this.GetCmp<FieldSet>("cmdAgregar2");
                    cmdUno.Disabled = true;

                    //var cmdeliminar = this.GetCmp<FieldSet>("grillaExamenes");
                    //cmdeliminar.Disabled = true;

                }
                else if (LocalEnty.MedicamentoRegular == "S")
                {
                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar2");
                    cmdDos.Disabled = false;

                    // var cmdeliminar = this.GetCmp<FieldSet>("grillaExamenes");
                    // cmdeliminar.Disabled = false;
                }
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEPF630_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF630_addEliminar_SS_HC_Triaje_Alergia_FE(String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaController - CCEPF630_addEliminar_SS_HC_Triaje_Alergia_FE - Entrar");
            codigo = codigo == "" ? "1" : codigo;
            List<SS_HC_Triaje_Ant_Alergia_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Alergia_FEDeleteTriaje"] != null)
                {
                    dataDelete = (List<SS_HC_Triaje_Ant_Alergia_FE>)Session["DataSS_HC_Alergia_FEDeleteTriaje"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Triaje_Ant_Alergia_FE>();
                }
                SS_HC_Triaje_Ant_Alergia_FE objDelete = new SS_HC_Triaje_Ant_Alergia_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                try
                {

                    objDelete.Accion = MODO; // "DELETEDETALLE";
                    objDelete.IdFormaInicio = Convert.ToInt32(secuencia);
                    objDelete.TipoRegistroDet = tipoRegistro;
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Alergia_FEDeleteTriaje"] = dataDelete;

                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF630_Save_SS_HC_Triaje_Alergia_FE(SS_HC_Triaje_Ant_Alergia_FE objAnamnesis_EA, String selectionArray0, String selectionArray1, String selectionArray2, String text)
        {
            Log.Information("HClinicaController - CCEPF630_Save_SS_HC_Triaje_Alergia_FE - Entrar");

            // TRABA
            String valoreArray;
            String valoreArray0;
            List<MA_MiscelaneosDetalle> ObjListar;
            List<SS_HC_Triaje_Ant_Alergia_FE> ObjListar1;

            Session["ValoresTemporal0"] = selectionArray0;
            Session["ValoresTemporal1"] = selectionArray1;
            Session["ValoresTemporal2"] = selectionArray2;

            valoreArray0 = (string)Session["ValoresTemporal0"];

            // TRANSACCIONALES
            List<SS_HC_Triaje_Ant_Alergia_FE> ObjCabecera = new List<SS_HC_Triaje_Ant_Alergia_FE>();
            SS_HC_Triaje_Ant_Alergia_FE ObjCab = new SS_HC_Triaje_Ant_Alergia_FE();
            List<SS_HC_Triaje_Ant_Alergia_FE> ObjDetalle = new List<SS_HC_Triaje_Ant_Alergia_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione Episodio Clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    #region Region_Cabecera

                    if (valoreArray0 != null)
                    {
                        ObjListar1 = (List<SS_HC_Triaje_Ant_Alergia_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray0, typeof(List<SS_HC_Triaje_Ant_Alergia_FE>));
                        foreach (SS_HC_Triaje_Ant_Alergia_FE objEntity in ObjListar1)
                        {
                            ObjCab = new SS_HC_Triaje_Ant_Alergia_FE();
                            // if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO")                           
                            objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                            objAnamnesis_EA.Version = "CCEPF630";
                            objAnamnesis_EA.TieneHistoria = objEntity.TieneHistoria;
                            objAnamnesis_EA.TieneAlimento = objEntity.TieneAlimento;
                            objAnamnesis_EA.TieneAmbiental = objEntity.TieneAmbiental;
                            objAnamnesis_EA.TieneContacto = objEntity.TieneContacto;
                            objAnamnesis_EA.MedicamentoRegular = objEntity.MedicamentoRegular;
                            objAnamnesis_EA.TransfusionSanguinea = objEntity.TransfusionSanguinea;
                            objAnamnesis_EA.ProblemaTransfusion = objEntity.ProblemaTransfusion;
                            objAnamnesis_EA.Comentarios = objEntity.Comentarios;
                            objAnamnesis_EA.UsuarioCreacion = objEntity.UsuarioCreacion;
                            if (objEntity.Version != "")
                            {
                                objAnamnesis_EA.FechaCreacion = Convert.ToDateTime(objEntity.Version);
                            }

                            if (objAnamnesis_EA.Accion == "NUEVO")
                            {
                                objAnamnesis_EA.Estado = 2;
                                objAnamnesis_EA.FechaCreacion = DateTime.Now;
                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            else
                            {
                                objAnamnesis_EA.FechaModificacion = DateTime.Now;
                                objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            // objExamSol.(ObjCab);
                            ObjCabecera.Add(objAnamnesis_EA);
                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }
                    }

                    #endregion

                    if (objAnamnesis_EA.TieneHistoria == null || objAnamnesis_EA.TieneHistoria == "")
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);
                    }

                    int valorTemp = 0;
                    int validaTemp = 0;
                    int validaMedica = 0;
                    int validaTien = 0;
                    int valorTien = 0;
                    int valorMed = 0;
                    if ((string)Session["ValoresTemporal1"] != "[]")
                    {
                        valorTemp += 1;
                        validaTemp += 1;
                    }
                    if ((string)Session["ValoresTemporal2"] != "[]")
                    {
                        valorTemp += 1;
                        validaMedica += 1;
                    }

                    if (objAnamnesis_EA.TieneHistoria == "S" || objAnamnesis_EA.TieneHistoria == "N")
                    {
                        valorTien += 1;
                        if (objAnamnesis_EA.TieneHistoria == "S")
                        {
                            validaTien += 1;
                        }
                    }
                    if (objAnamnesis_EA.TieneAlimento == "S" || objAnamnesis_EA.TieneAlimento == "N")
                    {
                        valorTien += 1;
                        if (objAnamnesis_EA.TieneAlimento == "S")
                        {
                            validaTien += 1;
                        }
                    }
                    if (objAnamnesis_EA.TieneAmbiental == "S" || objAnamnesis_EA.TieneAmbiental == "N")
                    {
                        valorTien += 1;
                        if (objAnamnesis_EA.TieneAmbiental == "S")
                        {
                            validaTien += 1;
                        }
                    }
                    if (objAnamnesis_EA.TieneContacto == "S" || objAnamnesis_EA.TieneContacto == "N")
                    {
                        valorTien += 1;
                        if (objAnamnesis_EA.TieneContacto == "S")
                        {
                            validaTien += 1;
                        }
                    }
                    if (objAnamnesis_EA.MedicamentoRegular == "S" || objAnamnesis_EA.MedicamentoRegular == "N")
                    {
                        valorMed += 1;

                    }

                    if (objAnamnesis_EA.TieneHistoria != null)
                    {
                        registro = 1;
                        string mensage = "";
                        if (registro > 0)
                        {
                            //BLOQUE DETALLE - DELETE
                            List<SS_HC_Triaje_Ant_Alergia_FE> dataDelete = null;
                            if (Session["DataSS_HC_Alergia_FEDeleteTriaje"] != null)
                            {
                                dataDelete = (List<SS_HC_Triaje_Ant_Alergia_FE>)Session["DataSS_HC_Alergia_FEDeleteTriaje"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {

                                    ObjDetalle.Add(objDel);
                                }
                            }
                            if (valorTien > 0)
                            {
                                // BLOQUE DETALLE -  UPDATE Y INSERT  
                                if (validaTemp == 0 && validaTien > 0)
                                {
                                    eventoPostFormulario(false, "");
                                    return showMensajeNotifyData("Mensaje", "Debe registrar datos en las grillas!", "ERROR", false);
                                }

                                if (validaMedica == 0 && objAnamnesis_EA.MedicamentoRegular == "S")
                                {
                                    eventoPostFormulario(false, "");
                                    return showMensajeNotifyData("Mensaje", "Debe registrar datos en las grillas!", "ERROR", false);
                                }

                                if (valorTemp > 0)
                                {
                                    valoreArray = (string)Session["ValoresTemporal1"];
                                    ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objAnamnesis_EA = new SS_HC_Triaje_Ant_Alergia_FE();
                                        objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                                        objAnamnesis_EA.Accion = objEntity.ACCION;
                                        objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.TipoRegistroDet = "MA";
                                        if (objAnamnesis_EA.Accion != "DETALLE")
                                        {
                                            objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        objAnamnesis_EA.IdTipoAlergiaDet = objEntity.ValorEntero1;
                                        objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo1.Trim();
                                        objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorCodigo5;
                                        //VALIDACION
                                        if (objEntity.ValorCodigo1.Length > 50)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Nombre, de la grilla GENERALES", "ERROR", false);
                                        }

                                        if (objEntity.ValorCodigo2.Length > 50)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla GENERALES", "ERROR", false);
                                        }
                                        objAnamnesis_EA.EstudioAlegistaDet = objEntity.ValorEntero2;
                                        objAnamnesis_EA.ObservacionesDet = objEntity.ValorCodigo2;
                                        ObjDetalle.Add(objAnamnesis_EA);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }

                                    if (valorMed > 0)
                                    {
                                        valoreArray = (string)Session["ValoresTemporal2"];
                                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                        {
                                            objAnamnesis_EA = new SS_HC_Triaje_Ant_Alergia_FE();
                                            objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                            objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                            objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
                                            objAnamnesis_EA.Accion = objEntity.ACCION;
                                            objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                            objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                            objAnamnesis_EA.TipoRegistroDet = "RE";
                                            if (objAnamnesis_EA.Accion != "DETALLE")
                                            {
                                                objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                            }
                                            if (objEntity.ValorCodigo7.Length > 50)
                                            {
                                                eventoPostFormulario(true, "");
                                                return showMensajeNotifyData("Error", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla ESPECIFICAS", "ERROR", false);
                                            }
                                            objAnamnesis_EA.TransfusionSanguinea = objEntity.ValorCodigo7;
                                            objAnamnesis_EA.Version = Convert.ToString(objEntity.ValorCodigo4);
                                            objAnamnesis_EA.Estado = objEntity.ValorEntero6;
                                            objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo6;

                                            ObjDetalle.Add(objAnamnesis_EA);
                                            registro = 1;
                                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                        }
                                    }
                                }


                                String valoreArrayValida = (string)Session["ValoresTemporal1"];

                                List<MA_MiscelaneosDetalle> ObjListarvalida = new List<MA_MiscelaneosDetalle>();

                                ObjListarvalida = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArrayValida, typeof(List<MA_MiscelaneosDetalle>));

                                foreach (MA_MiscelaneosDetalle objEntity in ObjListarvalida)
                                {

                                    if (ObjCabecera[0].TieneHistoria == "N" && objEntity.ValorEntero1 == 2)
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Existe una fila de Tipo de Alergia ( Medicamentos ).", "ERROR", false);

                                    }
                                    if (ObjCabecera[0].TieneAlimento == "N" && objEntity.ValorEntero1 == 1)
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Existe una fila de Tipo de Alergia ( Alimentos ).", "ERROR", false);

                                    }

                                    if (ObjCabecera[0].TieneAmbiental == "N" && objEntity.ValorEntero1 == 3)
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Existe una fila de Tipo de Alergia ( Ambiental ).", "ERROR", false);

                                    }

                                    if (ObjCabecera[0].TieneContacto == "N" && objEntity.ValorEntero1 == 4)
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Existe una fila de Tipo de Alergia ( Contacto ).", "ERROR", false);

                                    }


                                }

                                List<MA_MiscelaneosDetalle> ObjListarvalida2 = new List<MA_MiscelaneosDetalle>();

                                String valoreArrayValida2 = (string)Session["ValoresTemporal2"];
                                ObjListarvalida2 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArrayValida2, typeof(List<MA_MiscelaneosDetalle>));
                                foreach (MA_MiscelaneosDetalle objEntity in ObjListarvalida2)
                                {

                                    if (ObjCabecera[0].MedicamentoRegular == "N" && ObjListarvalida2.Count > 0)
                                    {

                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Debe Eliminar los registros de la Tabla, Medicamentos regulares.", "ERROR", false);

                                    }



                                }



                                //TRANSACT
                                registro = SvcTriajeAntAlergia.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);

                                if (registro > 0)
                                {
                                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                    else mensage = " actualizó ";
                                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                    ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                    String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioTriaje,
                                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    Session["ValoresTemporal1"] = null;
                                    Session["ValoresTemporal2"] = null;
                                    Session["DataSS_HC_Alergia_FEDelete"] = null;
                                    Session["DataSS_HC_Alergia_FEDeleteTriaje"] = null;
                                    eventoPostFormulario(true, "");

                                    if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                    {
                                        string containertemp = (string)Session["containerIdTemp"];
                                        string txttemp = (string)Session["textTemp"];

                                        LoadFormatos(containertemp, txttemp);
                                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                                    }
                                    else
                                    {
                                        return showMensajeNotify("Mensaje", mensaje, "INFO");
                                    }
                                }
                                else
                                {
                                    eventoPostFormulario(false, "");
                                    return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
                                }

                            }

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw; ;
                }
            }

            return this.Direct();
        }

        //public System.Web.Mvc.ActionResult CCEPF630_Save_SS_HC_Triaje_Alergia_FE(SS_HC_Triaje_Ant_Alergia_FE objAnamnesis_EA, String selectionArray0, String selectionArray1, String selectionArray2, String text)
        //{

        //    // TRABA
        //    String valoreArray;
        //    String valoreArray0;
        //    List<MA_MiscelaneosDetalle> ObjListar;
        //    List<SS_HC_Triaje_Ant_Alergia_FE> ObjListar1;

        //    Session["ValoresTemporal0"] = selectionArray0;
        //    Session["ValoresTemporal1"] = selectionArray1;
        //    Session["ValoresTemporal2"] = selectionArray2;

        //    valoreArray0 = (string)Session["ValoresTemporal0"];

        //    // TRANSACCIONALES
        //    List<SS_HC_Triaje_Ant_Alergia_FE> ObjCabecera = new List<SS_HC_Triaje_Ant_Alergia_FE>();
        //    SS_HC_Triaje_Ant_Alergia_FE ObjCab = new SS_HC_Triaje_Ant_Alergia_FE();
        //    List<SS_HC_Triaje_Ant_Alergia_FE> ObjDetalle = new List<SS_HC_Triaje_Ant_Alergia_FE>();

        //    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
        //    {
        //        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione Episodio Clínico... ").Show();
        //    }
        //    else
        //    {
        //        try
        //        {
        //            int registro = -1;
        //            #region Region_Cabecera

        //            if (valoreArray0 != null)
        //            {
        //                ObjListar1 = (List<SS_HC_Triaje_Ant_Alergia_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray0, typeof(List<SS_HC_Triaje_Ant_Alergia_FE>));
        //                foreach (SS_HC_Triaje_Ant_Alergia_FE objEntity in ObjListar1)
        //                {
        //                    ObjCab = new SS_HC_Triaje_Ant_Alergia_FE();
        //                    // if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") 
        //                    //ObjCab.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        //                    objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
        //                    objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //                    objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                    objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
        //                    // objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        //                    objAnamnesis_EA.Version = "CCEPF630";
        //                    objAnamnesis_EA.TieneHistoria = objEntity.TieneHistoria;
        //                    objAnamnesis_EA.TieneAlimento = objEntity.TieneAlimento;
        //                    objAnamnesis_EA.TieneAmbiental = objEntity.TieneAmbiental;
        //                    objAnamnesis_EA.TieneContacto = objEntity.TieneContacto;
        //                    objAnamnesis_EA.MedicamentoRegular = objEntity.MedicamentoRegular;
        //                    objAnamnesis_EA.TransfusionSanguinea = objEntity.TransfusionSanguinea;
        //                    objAnamnesis_EA.ProblemaTransfusion = objEntity.ProblemaTransfusion;
        //                    objAnamnesis_EA.Comentarios = objEntity.Comentarios;
        //                    objAnamnesis_EA.UsuarioCreacion = objEntity.UsuarioCreacion;
        //                    if (objEntity.Version != "")
        //                    {
        //                        objAnamnesis_EA.FechaCreacion = Convert.ToDateTime(objEntity.Version);
        //                    }

        //                    if (objAnamnesis_EA.Accion == "NUEVO")
        //                    {
        //                        objAnamnesis_EA.Estado = 2;
        //                        objAnamnesis_EA.FechaCreacion = DateTime.Now;
        //                        objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                    }
        //                    else
        //                    {
        //                        objAnamnesis_EA.FechaModificacion = DateTime.Now;
        //                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                    }
        //                    // objExamSol.(ObjCab);
        //                    ObjCabecera.Add(objAnamnesis_EA);
        //                    registro = 1;
        //                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                }
        //            }


        //            #endregion

        //            if (objAnamnesis_EA.TieneHistoria == null || objAnamnesis_EA.TieneHistoria == "")
        //            {
        //                eventoPostFormulario(true, "");
        //                return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);


        //            }
        //            if (objAnamnesis_EA.TieneHistoria != null)
        //            {
        //                registro = 1;
        //                string mensage = "";
        //                if (registro > 0)
        //                {
        //                    //BLOQUE DETALLE - DELETE
        //                    List<SS_HC_Triaje_Ant_Alergia_FE> dataDelete = null;
        //                    if (Session["DataSS_HC_Alergia_FEDeleteTriaje"] != null)
        //                    {
        //                        dataDelete = (List<SS_HC_Triaje_Ant_Alergia_FE>)Session["DataSS_HC_Alergia_FEDeleteTriaje"];
        //                    }
        //                    if (dataDelete != null)
        //                    {
        //                        foreach (var objDel in dataDelete)
        //                        {

        //                            ObjDetalle.Add(objDel);
        //                        }
        //                    }
        //                    if (objAnamnesis_EA.TieneHistoria == "S")
        //                    {
        //                        // BLOQUE DETALLE -  UPDATE Y INSERT
        //                        if (((string)Session["ValoresTemporal1"] != "[]") || ((string)Session["ValoresTemporal2"] != "[]"))
        //                        {

        //                            valoreArray = (string)Session["ValoresTemporal1"];
        //                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
        //                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
        //                            {
        //                                objAnamnesis_EA = new SS_HC_Triaje_Ant_Alergia_FE();

        //                                objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //                                objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                                objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
        //                                //objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

        //                                objAnamnesis_EA.Accion = objEntity.ACCION;

        //                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                                objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                                objAnamnesis_EA.TipoRegistroDet = "MA";
        //                                if (objAnamnesis_EA.Accion != "DETALLE")
        //                                {
        //                                    objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
        //                                }
        //                                objAnamnesis_EA.IdTipoAlergiaDet = objEntity.ValorEntero1;
        //                                objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo1.Trim();

        //                                objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorCodigo5;
        //                                //VALIDACION
        //                                if (objEntity.ValorCodigo1.Length > 50)
        //                                {
        //                                    eventoPostFormulario(false, "");
        //                                    return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Nombre, de la grilla GENERALES", "ERROR", false);
        //                                }

        //                                if (objEntity.ValorCodigo2.Length > 50)
        //                                {
        //                                    eventoPostFormulario(false, "");
        //                                    return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla GENERALES", "ERROR", false);
        //                                }
        //                                objAnamnesis_EA.EstudioAlegistaDet = objEntity.ValorEntero2;
        //                                objAnamnesis_EA.ObservacionesDet = objEntity.ValorCodigo2;
        //                                ObjDetalle.Add(objAnamnesis_EA);
        //                                registro = 1;
        //                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                            }

        //                            valoreArray = (string)Session["ValoresTemporal2"];
        //                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
        //                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
        //                            {
        //                                objAnamnesis_EA = new SS_HC_Triaje_Ant_Alergia_FE();

        //                                objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //                                objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                                objAnamnesis_EA.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;
        //                                // objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

        //                                objAnamnesis_EA.Accion = objEntity.ACCION;

        //                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                                objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                                objAnamnesis_EA.TipoRegistroDet = "RE";
        //                                if (objAnamnesis_EA.Accion != "DETALLE")
        //                                {
        //                                    objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
        //                                }
        //                                if (objEntity.ValorCodigo7.Length > 50)
        //                                {
        //                                    eventoPostFormulario(true, "");
        //                                    return showMensajeNotifyData("Error", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla ESPECIFICAS", "ERROR", false);
        //                                }
        //                                objAnamnesis_EA.TransfusionSanguinea = objEntity.ValorCodigo7;
        //                                objAnamnesis_EA.Version = Convert.ToString(objEntity.ValorCodigo4);
        //                                objAnamnesis_EA.Estado = objEntity.ValorEntero6;
        //                                objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo6;
        //                                ObjDetalle.Add(objAnamnesis_EA);
        //                                registro = 1;
        //                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                            }

        //                            //TRANSACT
        //                            registro = SvcTriajeAntAlergia.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);

        //                            if (registro > 0)
        //                            {
        //                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
        //                                else mensage = " actualizó ";

        //                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
        //                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

        //                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
        //                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioTriaje,
        //                                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
        //                                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


        //                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                                Session["ValoresTemporal1"] = null;
        //                                Session["ValoresTemporal2"] = null;
        //                                Session["DataSS_HC_Alergia_FEDelete"] = null;
        //                                Session["DataSS_HC_Alergia_FEDeleteTriaje"] = null;

        //                                eventoPostFormulario(true, "");

        //                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
        //                                {
        //                                    string containertemp = (string)Session["containerIdTemp"];
        //                                    string txttemp = (string)Session["textTemp"];

        //                                    LoadFormatos(containertemp, txttemp);
        //                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                                }
        //                                else
        //                                {

        //                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                                }
        //                            }
        //                            else
        //                            {
        //                                eventoPostFormulario(false, "");
        //                                return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            eventoPostFormulario(false, "");
        //                            return showMensajeNotifyData("Mensaje", "Debe registrar datos en las grillas!", "ERROR", false);
        //                        }




        //                    }
        //                    else if (objAnamnesis_EA.TieneHistoria == "N")
        //                    {

        //                        if (((string)Session["ValoresTemporal1"] == "[]") && ((string)Session["ValoresTemporal2"] == "[]"))
        //                        {

        //                            //TRANSACT
        //                            registro = SvcTriajeAntAlergia.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);

        //                            if (registro > 0)
        //                            {
        //                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
        //                                else mensage = " actualizó ";

        //                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
        //                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

        //                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente . Código Transacción: " +
        //                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioTriaje,
        //                                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
        //                                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


        //                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                                Session["ValoresTemporal1"] = null;
        //                                Session["ValoresTemporal2"] = null;
        //                                Session["DataSS_HC_Alergia_FEDelete"] = null;

        //                                eventoPostFormulario(true, "");

        //                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
        //                                {
        //                                    string containertemp = (string)Session["containerIdTemp"];
        //                                    string txttemp = (string)Session["textTemp"];

        //                                    LoadFormatos(containertemp, txttemp);
        //                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                                }
        //                                else
        //                                {

        //                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                                }

        //                            }
        //                            else
        //                            {
        //                                eventoPostFormulario(false, "");
        //                                return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
        //                            };


        //                        }
        //                        else
        //                        {

        //                            return showMensajeNotify("Mensaje", "No se guardarán los cambios, por que existe alergias en las grillas!", "INFO");

        //                        }

        //                    }



        //                }
        //                else
        //                {
        //                    eventoPostFormulario(false, "");
        //                    return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
        //                }
        //            }
        //            else
        //            {
        //                eventoPostFormulario(true, "");
        //                return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);
        //            }
        //        }
        //        catch (Exception ex)
        //        {

        //            var sqlException = ex.InnerException as SqlException;
        //            var detalle = new MA_MiscelaneosDetalle();
        //            detalle.ACCION = "ERRORES";
        //            List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
        //            if (sqlException != null)
        //            {
        //                resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
        //            }
        //            else
        //            {
        //                resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
        //            }
        //            string mostrarExc = "Excepción genérica:" + ex.StackTrace;
        //            if (resultado.Count > 0)
        //            {
        //                mostrarExc = resultado[0].DescripcionLocal;
        //            }
        //            eventoPostFormulario(false, "");
        //            return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
        //            throw; ;
        //        }
        //    }

        //    return this.Direct();
        //}

        public System.Web.Mvc.ActionResult CCEPF630_ALERGIA(String Tipo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF630_ALERGIA - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "ALERGIATRIAJE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioTriaje.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = Tipo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "ALERGIATRIAJE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioTriaje.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = Tipo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 && Session["ALERGIA_FLAG"] == "S" && (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)

                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        object objetoGen = (List<MA_MiscelaneosDetalle>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_ALERGIAS + "_" + Tipo, Listar);
                        if (objetoGen != null)
                        {
                            List<MA_MiscelaneosDetalle> objListaAnt2 = (List<MA_MiscelaneosDetalle>)objetoGen;
                            /* Listar.AddRange(ListarCopy);*/
                            if (objListaAnt2.Count > 0)
                            {
                                //Listar = objListaAnt2;
                                foreach (MA_MiscelaneosDetalle intobj in objListaAnt2)
                                {
                                    var obtemp = new MA_MiscelaneosDetalle();
                                    //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();
                                    obtemp = intobj;
                                    obtemp.ACCION = "NUEVO";
                                    Listar.Add(obtemp);
                                }
                            }
                        }

                    }

                if (Tipo == "RE")
                {
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        #endregion

        #region CCEP00F2_FORMULARIO
        public System.Web.Mvc.ActionResult CCEP00F2_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEP00F2_View - Entrar");
                /////          
                Session["ALERGIA_FLAG"] = null;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                var LocalEnty = new SS_HC_Alergia_FE();
                var Listar = new List<SS_HC_Alergia_FE>();
                var ListarAUX = new List<SS_HC_Alergia_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcAlergia.Alergia_Listar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Alergia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    /*if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    else*/
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcAlergia.Alergia_Listar(LocalEnty).ToList();

                    if (ListarAUX.Count > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.Accion = "LISTAR";
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcAlergia.Alergia_Listar(LocalEnty).ToList();
                    }
                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_Alergia_FE intobj in Listar)
                        {
                            //obtemp = new SS_HC_Alergia_FE();
                            LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();

                            LocalEnty.Accion = "NUEVO";
                            // LocalEnty.Add(obtemp);
                        }
                    }

                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }

                }

                ///////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Alergia_FE>)getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_ALERGIAS, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Alergia_FE> objListaAnt2 = (List<SS_HC_Alergia_FE>)objetoGen;

                        if (objListaAnt2.Count > 0)
                        {
                            //SS_HC_Alergia_FE obtemp;
                            foreach (SS_HC_Alergia_FE intobj in objListaAnt2)
                            {
                                //obtemp = new SS_HC_Alergia_FE();
                                LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();

                                LocalEnty.Accion = "NUEVO";
                                // LocalEnty.Add(obtemp);
                            }
                        }
                    }
                }
                ///////////////////////////////////////////////

                Session["DataSS_HC_Alergia_FEDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                if (LocalEnty.TieneHistoria == "N" || LocalEnty.TieneHistoria == null)
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = true;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = true;

                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = true;
                    Session["ALERGIA_FLAG"] = "N";
                }
                else if (LocalEnty.TieneHistoria == "S")
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = false;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = false;

                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = false;
                    Session["ALERGIA_FLAG"] = "S";
                }
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEP00F2_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEP00F2_ALERGIA(String Tipo)
        {
            try
            {
                Log.Information("HClinicaController - CCEP00F2_ALERGIA - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "ALERGIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = Tipo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "ALERGIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = Tipo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }

                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 && Session["ALERGIA_FLAG"] == "S" && (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    /* List<MA_MiscelaneosDetalle> objListaAntAUX;*/
                    List<SS_HC_Alergia_FE> objListaAntAUX;
                    List<MA_MiscelaneosDetalle> objListaAnt;
                    var LocalEntyTemp = new SS_HC_Alergia_FE();

                    LocalEntyTemp.Accion = "LISTARTOP";

                    LocalEntyTemp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEntyTemp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEntyTemp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEntyTemp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                    /* LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                     LocalEnty.ValorCodigo2 = (ENTITY_GLOBAL.Instance.EpisodioAtencion).ToString().Trim();
                     LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                     LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                     LocalEnty.ValorCodigo5 = Tipo;
                     objListaAntAUX = SvcMiscelaneos.GetUpListadoServicios(LocalEntyTemp).ToList();*/

                    objListaAntAUX = SvcAlergia.Alergia_Listar(LocalEntyTemp).ToList();

                    if (objListaAntAUX.Count > 0)
                    {
                        LocalEnty.ACCION = "ALERGIA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = objListaAntAUX[0].IdEpisodioAtencion.ToString().Trim(); //(ENTITY_GLOBAL.Instance.EpisodioAtencion).ToString().Trim();
                        LocalEnty.ValorCodigo3 = objListaAntAUX[0].EpisodioClinico.ToString().Trim();// ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = objListaAntAUX[0].UnidadReplicacion.ToString().Trim();
                        LocalEnty.ValorCodigo5 = Tipo;
                        objListaAnt = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                        if (objListaAnt.Count > 0)
                        {
                            foreach (MA_MiscelaneosDetalle intobj in objListaAnt)
                            {
                                var obtemp = new MA_MiscelaneosDetalle();
                                //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();
                                obtemp = intobj;
                                obtemp.ACCION = "NUEVO";
                                Listar.Add(obtemp);
                            }
                        }
                    }
                }
                //////////////////////////////////////////////////////////////////////////////

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<MA_MiscelaneosDetalle>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_ALERGIAS + "_" + Tipo, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> objListaAnt2 = (List<MA_MiscelaneosDetalle>)objetoGen;
                        /* Listar.AddRange(ListarCopy);*/
                        if (objListaAnt2.Count > 0)
                        {
                            //Listar = objListaAnt2;
                            foreach (MA_MiscelaneosDetalle intobj in objListaAnt2)
                            {
                                var obtemp = new MA_MiscelaneosDetalle();
                                //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();
                                obtemp = intobj;
                                obtemp.ACCION = "NUEVO";
                                Listar.Add(obtemp);
                            }




                        }

                    }

                }
                if (Tipo == "RE")
                {
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////










                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }



        public System.Web.Mvc.ActionResult CCEP00F2_addEliminar_SS_HC_Alergia_FE(String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaController - CCEP00F2_addEliminar_SS_HC_Alergia_FE - Entrar");
            List<SS_HC_Alergia_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Alergia_FEDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Alergia_FE>)Session["DataSS_HC_Alergia_FEDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Alergia_FE>();
                }
                SS_HC_Alergia_FE objDelete = new SS_HC_Alergia_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = MODO; // "DELETEDETALLE";

                    if (tipoRegistro == "RE")
                    {
                        //RECURSO
                        string[] cadArray = codigo.Trim().Split('|');
                        string cadenas = cadArray[1].Replace("[", "");
                        cadenas = cadenas.Replace("]", "").Trim();
                        cadArray = cadenas.Trim().Split('-');


                        if (cadArray.Length > 3)
                        {
                            objDelete.IdMedicamento = cadArray[3];
                        }

                    }

                    objDelete.IdFormaInicio = Convert.ToInt32(secuencia);
                    objDelete.TipoRegistroDet = tipoRegistro;
                    dataDelete.Add(objDelete);
                    Session["DataSS_HC_Alergia_FEDelete"] = dataDelete;

                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEP00F2_Save_SS_HC_Alergia_FE(SS_HC_Alergia_FE objAnamnesis_EA, String selectionArray0, String selectionArray1, String selectionArray2, String text)
        {
            Log.Information("HClinicaController - CCEP00F2_Save_SS_HC_Alergia_FE - Entrar");

            // TRABA
            String valoreArray;
            String valoreArray0;
            List<MA_MiscelaneosDetalle> ObjListar;
            List<SS_HC_Alergia_FE> ObjListar1;
            //if (text == "0")
            //{
            //    Session["ValoresTemporal1"] = selectionArray2;
            //    Session["ValoresTemporal2"] = selectionArray1;
            //    ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            //}
            Session["ValoresTemporal0"] = selectionArray0;
            Session["ValoresTemporal1"] = selectionArray2;
            Session["ValoresTemporal2"] = selectionArray1;

            valoreArray0 = (string)Session["ValoresTemporal0"];

            // TRANSACCIONALES
            List<SS_HC_Alergia_FE> ObjCabecera = new List<SS_HC_Alergia_FE>();
            SS_HC_Alergia_FE ObjCab = new SS_HC_Alergia_FE();
            List<SS_HC_Alergia_FE> ObjDetalle = new List<SS_HC_Alergia_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione Episodio Clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    #region Region_Cabecera

                    if (valoreArray0 != null)
                    {
                        ObjListar1 = (List<SS_HC_Alergia_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray0, typeof(List<SS_HC_Alergia_FE>));
                        foreach (SS_HC_Alergia_FE objEntity in ObjListar1)
                        {
                            ObjCab = new SS_HC_Alergia_FE();
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") ObjCab.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objAnamnesis_EA.Version = "CCEP00F2";
                            objAnamnesis_EA.TieneHistoria = objEntity.TieneHistoria;
                            objAnamnesis_EA.UsuarioCreacion = objEntity.UsuarioCreacion;
                            if (objEntity.Version != "")
                            {
                                objAnamnesis_EA.FechaCreacion = Convert.ToDateTime(objEntity.Version);
                            }

                            if (objAnamnesis_EA.Accion == "NUEVO")
                            {
                                objAnamnesis_EA.Estado = 2;
                                objAnamnesis_EA.FechaCreacion = DateTime.Now;
                                objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            else
                            {
                                objAnamnesis_EA.FechaModificacion = DateTime.Now;
                                objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            // objExamSol.(ObjCab);
                            ObjCabecera.Add(objAnamnesis_EA);
                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }
                    }


                    #endregion

                    if (objAnamnesis_EA.TieneHistoria == null || objAnamnesis_EA.TieneHistoria == "")
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);


                    }
                    if (objAnamnesis_EA.TieneHistoria != null)
                    {
                        //objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        //objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //objAnamnesis_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        //objAnamnesis_EA.FechaModificacion = DateTime.Now;
                        //objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //if (objAnamnesis_EA.Accion == "NUEVO")
                        //{
                        //    objAnamnesis_EA.Estado = 2;
                        //    objAnamnesis_EA.FechaCreacion = DateTime.Now;
                        //    objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //}
                        //ObjCabecera.Add(objAnamnesis_EA);
                        registro = 1;
                        string mensage = "";
                        if (registro > 0)
                        {
                            //BLOQUE DETALLE - DELETE
                            List<SS_HC_Alergia_FE> dataDelete = null;
                            if (Session["DataSS_HC_Alergia_FEDelete"] != null)
                            {
                                dataDelete = (List<SS_HC_Alergia_FE>)Session["DataSS_HC_Alergia_FEDelete"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {

                                    ObjDetalle.Add(objDel);
                                }
                            }
                            if (objAnamnesis_EA.TieneHistoria == "S")
                            {
                                // BLOQUE DETALLE -  UPDATE Y INSERT

                                // valoreArray = (string)Session["ValoresTemporal1"];
                                if (((string)Session["ValoresTemporal1"] != "[]") || ((string)Session["ValoresTemporal2"] != "[]"))
                                {

                                    valoreArray = (string)Session["ValoresTemporal1"];
                                    ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objAnamnesis_EA = new SS_HC_Alergia_FE();

                                        objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                        objAnamnesis_EA.Accion = objEntity.ACCION;

                                        objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.TipoRegistroDet = "MA";
                                        if (objAnamnesis_EA.Accion != "DETALLE")
                                        {
                                            objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        objAnamnesis_EA.IdTipoAlergiaDet = objEntity.ValorEntero1;

                                        //string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                        ///string cadenas = cadArray[1].Replace("[", "");
                                        // cadenas = cadenas.Replace("]", "").Trim();
                                        //cadArray = cadenas.Trim().Split('-');
                                        //                  objAnamnesis_EA.LineaDet = cadArray[0];
                                        //    objAnamnesis_EA.FamiliaDet = cadArray[1];
                                        //   objAnamnesis_EA.SubFamiliaDet = cadArray[2];

                                        //       if (cadArray.Length > 3)
                                        //  {
                                        //      objAnamnesis_EA.IdMedicamento = cadArray[3];
                                        //  }
                                        objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo1.Trim();

                                        objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorCodigo5;
                                        //VALIDACION

                                        if (objEntity.ValorCodigo1 == "" || objEntity.ValorCodigo1 == null)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Por favor ingresar datos en la columna ,Nombre, de la grilla GENERALES", "ERROR", false);
                                        }
                                        else
                                        {
                                            objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo1;
                                        }

                                        if (objEntity.ValorCodigo1.Length > 50)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Nombre, de la grilla GENERALES", "ERROR", false);
                                        }

                                        if (objEntity.ValorCodigo2.Length > 50)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla GENERALES", "ERROR", false);
                                        }

                                        if (objEntity.ValorCodigo5.Length > 75)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,¿Desde Cuándo?, de la grilla GENERALES", "ERROR", false);
                                        }
                                        //DateTime hoy = DateTime.Now;
                                        //if (objEntity.ValorFecha > hoy)
                                        //{
                                        //    string mensaje3 = "La fecha, Desde cuándo, en grilla GENERALES no puede ser mayor a la fecha actual.";
                                        //    eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", mensaje3, "ERROR", false);
                                        //}
                                        //else
                                        //{
                                        //    objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorFecha;
                                        //}
                                        //objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorFecha;
                                        //VALIDACION
                                        /* if (objEntity.ValorEntero2 == 0 || objEntity.ValorEntero2 == null)
                                         {
                                             eventoPostFormulario(true, "");
                                             return showMensajeNotifyData("Mensaje", "Por favor Seleccione dato en la columna, Estudio por alergista, en grilla GENERALES", "ERROR", false);
                                         }
                                         else
                                         {*/
                                        objAnamnesis_EA.EstudioAlegistaDet = objEntity.ValorEntero2;
                                        /*  }*/



                                        objAnamnesis_EA.ObservacionesDet = objEntity.ValorCodigo2;


                                        ObjDetalle.Add(objAnamnesis_EA);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }

                                    valoreArray = (string)Session["ValoresTemporal2"];
                                    ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objAnamnesis_EA = new SS_HC_Alergia_FE();

                                        objAnamnesis_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objAnamnesis_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objAnamnesis_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objAnamnesis_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                        objAnamnesis_EA.Accion = objEntity.ACCION;

                                        objAnamnesis_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objAnamnesis_EA.TipoRegistroDet = "RE";
                                        if (objAnamnesis_EA.Accion != "DETALLE")
                                        {
                                            objAnamnesis_EA.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        if (objEntity.ValorCodigo2.Length > 50)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Error", "Excedio el Numero de Caracteres en la columna ,Observaciones, de la grilla ESPECIFICAS", "ERROR", false);
                                        }


                                        if (objEntity.ValorCodigo5.Length > 75)
                                        {
                                            eventoPostFormulario(false, "");
                                            return showMensajeNotifyData("Mensaje", "Excedio el Numero de Caracteres en la columna ,¿Desde Cuándo?, de la grilla ESPECIFICAS", "ERROR", false);
                                        }

                                        objAnamnesis_EA.IdTipoAlergiaDet = objEntity.ValorEntero1;

                                        string[] cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                        string cadenas = cadArray[1].Replace("[", "");
                                        cadenas = cadenas.Replace("]", "").Trim();
                                        cadArray = cadenas.Trim().Split('-');
                                        objAnamnesis_EA.LineaDet = cadArray[0];
                                        objAnamnesis_EA.FamiliaDet = cadArray[1];
                                        objAnamnesis_EA.SubFamiliaDet = cadArray[2];

                                        if (cadArray.Length > 3)
                                        {
                                            objAnamnesis_EA.IdMedicamento = cadArray[3];
                                        }

                                        // objAnamnesis_EA.DescripcionManualDet = objEntity.ValorCodigo1.Trim();

                                        //DateTime hoy = DateTime.Now;
                                        //if (objEntity.ValorFecha > hoy)
                                        //{
                                        //    string mensaje3 = "La fecha, Desde cuándo, en grilla ESPECIFICA no puede ser mayor a la fecha actual.";
                                        //    eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", mensaje3, "ERROR", false);
                                        //}
                                        //else
                                        //{
                                        objAnamnesis_EA.DesdeCuandoDet = objEntity.ValorCodigo5;
                                        //}
                                        //VALIDACION
                                        //   if (objEntity.ValorCodigo1 == "" || objEntity.ValorCodigo1 == null)
                                        //   {
                                        //       eventoPostFormulario(true, "");
                                        //       return showMensajeNotifyData("Mensaje", "Por favor ingresar datos en la columna <Nombre> de la grilla Otros", "ERROR", false);
                                        //}
                                        //   else
                                        //    {
                                        //        objAnamnesis_EA.EstudioAlegistaDet = objEntity.ValorEntero2;
                                        //   }

                                        //if (objEntity.ValorEntero2 == 0 || objEntity.ValorEntero2 == null)
                                        //{
                                        //    string mensaje4 = "Por favor Seleccione dato en la columna, Estudio por alergista, en grilla ESPECIFICA";
                                        //    eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", mensaje4, "ERROR", false);
                                        //}
                                        //else
                                        //{
                                        objAnamnesis_EA.EstudioAlegistaDet = objEntity.ValorEntero2;
                                        // }


                                        objAnamnesis_EA.ObservacionesDet = objEntity.ValorCodigo2;
                                        ObjDetalle.Add(objAnamnesis_EA);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }

                                    //TRANSACT
                                    registro = SvcAlergia.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);

                                    if (registro > 0)
                                    {
                                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                        else mensage = " actualizó ";

                                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                        Session["ValoresTemporal1"] = null;
                                        Session["ValoresTemporal2"] = null;
                                        Session["DataSS_HC_Alergia_FEDelete"] = null;

                                        eventoPostFormulario(true, "");

                                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                        {
                                            string containertemp = (string)Session["containerIdTemp"];
                                            string txttemp = (string)Session["textTemp"];

                                            LoadFormatos(containertemp, txttemp);
                                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                                        }
                                        else
                                        {

                                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                                        }


                                    }
                                    else
                                    {
                                        eventoPostFormulario(false, "");
                                        return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
                                    }
                                }
                                else
                                {
                                    eventoPostFormulario(false, "");
                                    return showMensajeNotifyData("Mensaje", "Debe registrar datos en las grillas!", "ERROR", false);
                                }




                            }
                            else if (objAnamnesis_EA.TieneHistoria == "N")
                            {

                                if (((string)Session["ValoresTemporal1"] == "[]") && ((string)Session["ValoresTemporal2"] == "[]"))
                                {

                                    //TRANSACT
                                    registro = SvcAlergia.setMantenimiento(objAnamnesis_EA, ObjCabecera, ObjDetalle);

                                    if (registro > 0)
                                    {
                                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                        else mensage = " actualizó ";

                                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente . Código Transacción: " +
                                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                        Session["ValoresTemporal1"] = null;
                                        Session["ValoresTemporal2"] = null;
                                        Session["DataSS_HC_Alergia_FEDelete"] = null;

                                        eventoPostFormulario(true, "");

                                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                        {
                                            string containertemp = (string)Session["containerIdTemp"];
                                            string txttemp = (string)Session["textTemp"];

                                            LoadFormatos(containertemp, txttemp);
                                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                                        }
                                        else
                                        {

                                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                                        }

                                    }
                                    else
                                    {
                                        eventoPostFormulario(false, "");
                                        return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
                                    };


                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", "No se guardarán los cambios, por que existe alergias en las grillas!", "INFO");

                                }

                            }



                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado -- CCEP00F2", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor seleccionar: ¿Tiene usted historia?!", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw; ;
                }
            }

            return this.Direct();
        }
        #endregion // FIN CCEP00F2_FORMULARIO

        #region CCEPF327_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF327_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF327_View - Entrar");

                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_OrdenIntervencionQuirurgicaCab_FE();
                var Listar = new List<SS_HC_OrdenIntervencionQuirurgicaCab_FE>();
                var ListarAux = new List<SS_HC_OrdenIntervencionQuirurgicaCab_FE>();
                var lst = new List<PERSONAMAST>();
                LocalEnty.Accion = "LISTAR";
                Session["SEC_TOP_327"] = 0;


                if (Session["Ssesion_ListarPaciiente"] != null)
                {
                    lst = (List<PERSONAMAST>)Session["Ssesion_ListarPaciiente"];
                    if (!string.IsNullOrEmpty(lst[0].DireccionReferencia))
                    {
                        Session["EmpresaAseguradoraNombre"] = lst[0].DireccionReferencia;
                    }
                    else
                    {
                        Session["EmpresaAseguradoraNombre"] = null;
                    }
                }

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //Listar = SvnOrdenIntervencionQuirurgicaService.listarOrdenIntervencion(LocalEnty).ToList();

                var dtlista = SvcVisorReportesHCE.rptVistas_FE("SS_HC_OrdenIntervencionQuirurgicaCab_FE",
                    LocalEnty.UnidadReplicacion,
                         LocalEnty.IdPaciente,
                    LocalEnty.EpisodioClinico,
                    LocalEnty.IdEpisodioAtencion
                    , null, 0, "",
                    ENTITY_GLOBAL.Instance.USUARIO);

                foreach (DataRow obj_Seleccionados in dtlista.Rows)
                {
                    if (!string.IsNullOrEmpty(obj_Seleccionados["UnidadReplicacion"].ToString())) LocalEnty.UnidadReplicacion = obj_Seleccionados["UnidadReplicacion"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["IdEpisodioAtencion"].ToString())) LocalEnty.IdEpisodioAtencion = Convert.ToInt32(obj_Seleccionados["IdEpisodioAtencion"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["IdPaciente"].ToString())) LocalEnty.IdPaciente = Convert.ToInt32(obj_Seleccionados["IdPaciente"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["EpisodioClinico"].ToString())) LocalEnty.EpisodioClinico = Convert.ToInt32(obj_Seleccionados["EpisodioClinico"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["IdCirugia"].ToString())) LocalEnty.IdCirugia = Convert.ToInt32(obj_Seleccionados["IdCirugia"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["CirugiaCompleja"].ToString())) LocalEnty.CirugiaCompleja = obj_Seleccionados["CirugiaCompleja"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["DuracionAprox"].ToString())) LocalEnty.DuracionAprox = obj_Seleccionados["DuracionAprox"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["TipoDeHospitalizacion"].ToString())) LocalEnty.TipoDeHospitalizacion = obj_Seleccionados["TipoDeHospitalizacion"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["DiasAproximados"].ToString())) LocalEnty.DiasAproximados = obj_Seleccionados["DiasAproximados"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["TipoAnastesia"].ToString())) LocalEnty.TipoAnastesia = obj_Seleccionados["TipoAnastesia"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["NumeroAyudantes"].ToString())) LocalEnty.NumeroAyudantes = obj_Seleccionados["NumeroAyudantes"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["NumeroInstrumentos"].ToString())) LocalEnty.NumeroInstrumentos = obj_Seleccionados["NumeroInstrumentos"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["EquipoHumano"].ToString())) LocalEnty.EquipoHumano = obj_Seleccionados["EquipoHumano"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["Comentario"].ToString())) LocalEnty.Comentario = obj_Seleccionados["Comentario"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["Estado"].ToString())) LocalEnty.Estado = Convert.ToInt32(obj_Seleccionados["Estado"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["UsuarioCreacion"].ToString())) LocalEnty.UsuarioCreacion = obj_Seleccionados["UsuarioCreacion"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["FechaCreacion"].ToString())) LocalEnty.FechaCreacion = Convert.ToDateTime(obj_Seleccionados["FechaCreacion"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["UsuarioModificacion"].ToString())) LocalEnty.UsuarioModificacion = obj_Seleccionados["UsuarioModificacion"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["FechaModificacion"].ToString())) LocalEnty.FechaModificacion = Convert.ToDateTime(obj_Seleccionados["FechaModificacion"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["Accion"].ToString())) LocalEnty.Accion = obj_Seleccionados["Accion"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["Version"].ToString())) LocalEnty.Version = obj_Seleccionados["Version"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["OrdIntNinguna"].ToString())) LocalEnty.OrdIntNinguna = obj_Seleccionados["OrdIntNinguna"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["OrdIntOtro"].ToString())) LocalEnty.OrdIntOtro = obj_Seleccionados["OrdIntOtro"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["OrdAnastesiologo"].ToString())) LocalEnty.OrdAnastesiologo = obj_Seleccionados["OrdAnastesiologo"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["TiempoEnfermedad"].ToString())) LocalEnty.TiempoEnfermedad = obj_Seleccionados["TiempoEnfermedad"].ToString();
                    if (!string.IsNullOrEmpty(obj_Seleccionados["FechaIntervencion"].ToString())) LocalEnty.FechaIntervencion = Convert.ToDateTime(obj_Seleccionados["FechaIntervencion"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["flagHospitalaria"].ToString())) LocalEnty.flagHospitalaria = Convert.ToInt32(obj_Seleccionados["flagHospitalaria"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["diaHospitalaria"].ToString())) LocalEnty.diaHospitalaria = Convert.ToInt32(obj_Seleccionados["diaHospitalaria"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["flagUCI"].ToString())) LocalEnty.flagUCI = Convert.ToInt32(obj_Seleccionados["flagUCI"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["diaUCI"].ToString())) LocalEnty.diaUCI = Convert.ToInt32(obj_Seleccionados["diaUCI"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["flagUCIN"].ToString())) LocalEnty.flagUCIN = Convert.ToInt32(obj_Seleccionados["flagUCIN"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["diaUCIN"].ToString())) LocalEnty.diaUCIN = Convert.ToInt32(obj_Seleccionados["diaUCIN"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["flagAmbulatorio"].ToString())) LocalEnty.flagAmbulatorio = Convert.ToInt32(obj_Seleccionados["flagAmbulatorio"].ToString());
                    if (!string.IsNullOrEmpty(obj_Seleccionados["diaAmbulatorio"].ToString())) LocalEnty.diaAmbulatorio = Convert.ToInt32(obj_Seleccionados["diaAmbulatorio"].ToString());
                    Listar.Add(LocalEnty);
                }

                List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();
                var LocalEntyAuto = new SY_SeguridadAutorizaciones();
                LocalEntyAuto.AplicacionCodigo = "SY";
                // int inicio = Convert.ToInt32(IdAgente);
                int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                LocalEntyAuto.UltimoUsuario = ENTITY_GLOBAL.Instance.Sucursal;
                LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";
                CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
                for (int x = 0; x < CodigoAlma.Count(); x++)
                {
                    string val = CodigoAlma[x].MasterBrowseFlag;
                    string COD = CodigoAlma[x].Concepto;
                    if (val.Trim() == "1")
                    {
                        Session["OPCIONALMACEN"] = COD.Trim();
                    }
                    else
                    {

                    }
                }


                if (Listar.Count > 0)
                {
                    //int contador = 0;
                    String version = "CCEPF327";
                    foreach (SS_HC_OrdenIntervencionQuirurgicaCab_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                Session["Session_OrdenInter_Diagnostico"] = null;
                Session["Session_OrdenInter_CirugiaProcemiento"] = null;
                Session["Session_OrdenInter_CirugiaExamenes"] = null;
                Session["Session_OrdenInter_CirUsodeEquipos"] = null;
                Session["CCEPF327_Eliminar_CirugiaMatEspecializado"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF327_View", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF327_GRID_DIAGNOSTICO()
        {
            try
            {
                var ListarFinal = new List<MA_MiscelaneosDetalle>();
                //Llamar al disgnostico guardado en diagnostico
                Log.Information("HClinicaController - CCEPF327_GRID_DIAGNOSTICO - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();


                //lamar diagnostico guardado en detalle de quirugico
                var LocalEntyAux = new MA_MiscelaneosDetalle();
                var ListarAux = new List<MA_MiscelaneosDetalle>();
                LocalEntyAux.ACCION = "DIAGNOSTICOFE_327_AMB_DETALLES";
                LocalEntyAux.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEntyAux.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEntyAux.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEntyAux.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                //NTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                ListarAux = SvcMiscelaneos.GetUpListadoServicios(LocalEntyAux).ToList();
                if (ListarAux.Count == 0)
                {
                    LocalEnty.ACCION = "DIAGNOSTICOFE_327_AMB";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    ListarFinal = Listar;
                }
                else
                {
                    ListarFinal = ListarAux;
                }

                //if (ListarAux.Any())
                //{
                //    Listar = ListarAux;                    
                //    //Listar.RemoveAll(elementoA => ListarAux.Any(elementoB => elementoA.ValorCodigo1== elementoB.ValorCodigo1));
                //    if (Listar.Count > 0)
                //    {
                //        int x = 0;
                //        foreach (var objEntity in Listar)
                //        {
                //            Listar[x].ACCION = "UPDATEDETALLERECUPERADO";
                //            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                //            {
                //                Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                //            }
                //            x = x + 1;
                //        }

                //        ListarFinal.AddRange(Listar);

                //    }

                //    if (ListarAux.Count > 0)
                //    {
                //        int x = 0;
                //        foreach (var objEntity in ListarAux)
                //        {
                //            ListarAux[x].ACCION = "UPDATEDETALLE";
                //            ListarAux[x].CodigoElemento = Listar.Count() > 0 ? (Listar.Count() + x + 1).ToString(): ListarAux[x].CodigoElemento;

                //            if (Convert.ToInt32(ListarAux[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                //            {
                //                Session["SEC_TOP_327"] = Convert.ToInt32(ListarAux[x].CodigoElemento);
                //            }
                //            x = x + 1;
                //        }

                //        ListarFinal.AddRange(ListarAux);
                //    }


                //}
                //else
                //{
                //    if (Listar.Count > 0)
                //    {
                //        int x = 0;
                //        foreach (var objEntity in Listar)
                //        {
                //            Listar[x].ACCION = "UPDATEDETALLERECUPERADO";
                //            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                //            {
                //                Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                //            }
                //            x = x + 1;
                //        }

                //        ListarFinal.AddRange(Listar);
                //    }
                //}              


                ///////////////////////////////////////////////
                return this.Store(ListarFinal.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF327_GRID_CIRUG_PROCEDIMIENTO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF327_GRID_CIRUG_PROCEDIMIENTO - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXA_CIRUGIA_PROCEFE_327";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = "1";
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                //return this.Store(SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList());
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_DIAGNOSTICO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        int CODIGOTEMP = (int)Session["SEC_TOP_90"];
                //        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                //        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                //        int x = 0;
                //        foreach (var objEntity in ListarCopy)
                //        {
                //            ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                //            ListarCopy[x].ACCION = "NUEVO";

                //            CODIGOTEMP = CODIGOTEMP + 1;
                //            x = x + 1;
                //        }

                //        Listar.AddRange(ListarCopy);
                //    }
                //    Session["COPIA_FORMULARIO"] = "INACTIVA";

                //}
                //Session["SEC_F90"] = "";
                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF327_GRID_CIRUG_EXAMENES()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF327_GRID_CIRUG_EXAMENES - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXA_CIRUGIA_EXAMENES_327";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = "2";
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF327_GRID_CIRUG_USOEQUIPOS()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF327_GRID_CIRUG_USOEQUIPOS - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXA_CIRUGIA_EXAMENES_327";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = "3";
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    @ViewBag.FlagArcoC = false;
                    foreach (var item in Listar)
                    {
                        if (item.CodigoElemento == "9")
                        {
                            //arco C

                            @ViewBag.FlagArcoC = true;
                        }
                        else if (item.CodigoElemento == "11")
                        {
                            //"ALQUILER DE EQUIPO LASER SPHINX HOLMIUM (UYCPERU)|[001288]"
                        }
                        else if (item.CodigoElemento == "12")
                        {
                            //"EQUIPO DE LITOTRICIA EXTRACORPOREA|[001266]"
                        }
                        else if (item.CodigoElemento == "13")
                        {
                            //"MICROSCOPIO USO|[000091]"
                        }
                        else if (item.CodigoElemento == "14")
                        {
                            //"EQUIPO DE CIRUGIA NASOENDOSCOPICA|[001264]"
                        }
                        else if (item.CodigoElemento == "15")
                        {
                            //"VIDEO ENDOSCOPIA (INCLUYE DOCUMENTO FOTOGRAFICO) GASTROCITOSCOPIA, HISTEROSCOPIA, BRONCOSCOPIA, ARTROSCOPIA|[001225]"
                        }
                        else if (item.CodigoElemento == "16")
                        {
                            //"CIRUGIA ENDOSCOPICA, INCLUYENDO LAPAROSCOPIA, TORACOSCOPIA, ARTROSCOPIA|[001224]"
                        }
                    }
                }

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF327_GRID_CIRUG_MATESPECI()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF327_GRID_CIRUG_MATESPECI - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXA_CIRUGIA_EXAMENES_327";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = "4";
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEPF327_Save_OrdenIntervencionQuirurgica(SS_HC_OrdenIntervencionQuirurgicaCab_FE objCabecerra, String selectionArrayCabezera,
         String selectionArray1, String selectionArrayCiruProce, String selectionArray2, String selectionUsoEquipos, String selectionMaterEspeciliza, String text
            , String txTiempo, String txDate)
        {

            Log.Information("HClinicaController - CCEPF327_Save_OrdenIntervencionQuirurgica - Entrar");
            List<MA_MiscelaneosDetalle> ObjListarExamen = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarUsoEquipos = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarMaterialEspec = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarCatalogo = new List<MA_MiscelaneosDetalle>(); ;
            List<MA_MiscelaneosDetalle> ObjListarCirugiProce = new List<MA_MiscelaneosDetalle>(); ;

            List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE> ObjDetalle = new List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE>();
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> ObjDetalle2 = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> ObjDetalleDos = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> ObjDetalleUsoEqui = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> ObjDetalleMatEspe = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();

            //return showMensajeNotifyData("Info", "Estas debugeando", "INFO", false);
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objCabecerra != null)
                    {
                        List<SS_HC_OrdenIntervencionQuirurgicaCab_FE> objCabezeraArray = new List<SS_HC_OrdenIntervencionQuirurgicaCab_FE>();
                        objCabezeraArray = (List<SS_HC_OrdenIntervencionQuirurgicaCab_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArrayCabezera, typeof(List<SS_HC_OrdenIntervencionQuirurgicaCab_FE>));
                        objCabecerra.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objCabecerra.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objCabecerra.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objCabecerra.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objCabecerra.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objCabecerra.Version = "CCEPF327";
                        objCabecerra.DuracionAprox = objCabezeraArray[0].DuracionAprox;
                        objCabecerra.NumeroAyudantes = objCabezeraArray[0].NumeroAyudantes;
                        objCabecerra.NumeroInstrumentos = objCabezeraArray[0].NumeroInstrumentos;
                        objCabecerra.OrdAnastesiologo = objCabezeraArray[0].OrdAnastesiologo;
                        objCabecerra.OrdIntOtro = objCabezeraArray[0].OrdIntOtro;
                        objCabecerra.OrdIntNinguna = objCabezeraArray[0].OrdIntNinguna;
                        objCabecerra.Comentario = objCabezeraArray[0].Comentario;
                        objCabecerra.DiasAproximados = objCabezeraArray[0].DiasAproximados;
                        objCabecerra.CirugiaCompleja = objCabezeraArray[0].CirugiaCompleja;
                        objCabecerra.TipoDeHospitalizacion = objCabezeraArray[0].TipoDeHospitalizacion;
                        objCabecerra.TipoAnastesia = objCabezeraArray[0].TipoAnastesia;

                        objCabecerra.diaHospitalaria = objCabezeraArray[0].diaHospitalaria;
                        if (!string.IsNullOrEmpty(objCabezeraArray[0].diaHospitalaria.ToString()))
                        { objCabecerra.flagHospitalaria = 1; }
                        else
                        { objCabecerra.flagHospitalaria = objCabezeraArray[0].flagUCI; }

                        objCabecerra.diaUCI = objCabezeraArray[0].diaUCI;
                        if (!string.IsNullOrEmpty(objCabezeraArray[0].diaUCI.ToString()))
                        { objCabecerra.flagUCI = 1; }
                        else
                        { objCabecerra.flagUCI = objCabezeraArray[0].flagUCI; }

                        objCabecerra.diaUCIN = objCabezeraArray[0].diaUCIN;
                        if (!string.IsNullOrEmpty(objCabezeraArray[0].diaUCIN.ToString()))
                        { objCabecerra.flagUCIN = 1; }
                        else
                        { objCabecerra.flagUCIN = objCabezeraArray[0].flagUCIN; }

                        objCabecerra.diaAmbulatorio = objCabezeraArray[0].diaAmbulatorio;
                        if (!string.IsNullOrEmpty(objCabezeraArray[0].diaAmbulatorio.ToString()))
                        { objCabecerra.flagAmbulatorio = 1; }
                        else
                        { objCabecerra.flagAmbulatorio = objCabezeraArray[0].flagUCIN; }

                        objCabecerra.IdCirugia = 1;
                        objCabecerra.Estado = 2;
                        objCabecerra.TiempoEnfermedad = txTiempo;
                        if (!string.IsNullOrEmpty(txDate)) objCabecerra.FechaIntervencion = Convert.ToDateTime(txDate);
                        if (objCabecerra.Accion == "NUEVO")
                        {
                            objCabecerra.Estado = 2;
                            objCabecerra.FechaCreacion = DateTime.Now;
                            objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        objCabecerra.FechaCreacion = DateTime.Now;
                        objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objCabecerra.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objCabecerra.FechaModificacion = DateTime.Now;
                        string mensage = "";
                        registro = 1;
                        String cadenas = "";
                        String[] cadArray;

                        if (registro > 0)
                        {
                            //BLOQUE DELETE 1
                            List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE> dataDeleteCatalogo = null;
                            if (Session["Session_OrdenInter_Diagnostico"] != null)
                            {
                                dataDeleteCatalogo = (List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE>)Session["Session_OrdenInter_Diagnostico"];
                            }
                            if (dataDeleteCatalogo != null)
                            {
                                foreach (var objDel in dataDeleteCatalogo)
                                {
                                    ObjDetalle.Add(objDel);
                                }
                            }

                            // Bloque UPDATE Y INSERT 1
                            var objDiagnosticoDetalle = new SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE();
                            ObjListarCatalogo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarCatalogo)
                            {
                                objDiagnosticoDetalle = new SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE();
                                objDiagnosticoDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objDiagnosticoDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objDiagnosticoDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objDiagnosticoDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objDiagnosticoDetalle.TipoDiag = 1;
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objDiagnosticoDetalle.Codigo = cadenas;
                                objDiagnosticoDetalle.DiagnosticoDescripcion = objEntity.ValorCodigo1.Trim();
                                objDiagnosticoDetalle.Estado = "2";
                                objDiagnosticoDetalle.DeterminacionDiagnostica = objEntity.ValorCodigo2.Trim();
                                objDiagnosticoDetalle.IdDiagnosticoPrincipal = Convert.ToInt32(objEntity.ValorCodigo3);
                                objDiagnosticoDetalle.GradoAfeccion = objEntity.ValorCodigo4;
                                objDiagnosticoDetalle.TiempoEmfer = objEntity.ValorCodigo6.Trim();
                                objDiagnosticoDetalle.Accion = objEntity.ACCION;
                                if (objCabecerra.Accion == "NUEVO")
                                {
                                    objDiagnosticoDetalle.Accion = "DETALLE";
                                    objDiagnosticoDetalle.FechaCreacion = DateTime.Now;
                                    objDiagnosticoDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    if (objDiagnosticoDetalle.Accion == "DETALLE")
                                    {
                                        objDiagnosticoDetalle.FechaCreacion = DateTime.Now;
                                        objDiagnosticoDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    }
                                    else
                                    {
                                        objDiagnosticoDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                        objDiagnosticoDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                    }
                                }


                                objDiagnosticoDetalle.FechaModificacion = DateTime.Now;
                                objDiagnosticoDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objDiagnosticoDetalle.Accion != "DETALLE")
                                {
                                    objDiagnosticoDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objDiagnosticoDetalle.Version = "CCEPF327";
                                ObjDetalle.Add(objDiagnosticoDetalle);
                                //registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }

                            // Bloque UPDATE Y INSERT 2 CIRUGIA PROCEDIMIENTO
                            //BLOQUE DELETE 2
                            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDeleteCiruPro = null;
                            if (Session["Session_OrdenInter_CirugiaProcemiento"] != null)
                            {
                                dataDeleteCiruPro = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirugiaProcemiento"];
                            }
                            if (dataDeleteCiruPro != null)
                            {
                                foreach (var objDel in dataDeleteCiruPro)
                                {
                                    ObjDetalle2.Add(objDel);
                                }
                            }

                            var objCirugiaProceDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();

                            ObjListarCirugiProce = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArrayCiruProce, typeof(List<MA_MiscelaneosDetalle>));

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarCirugiProce)
                            {
                                objCirugiaProceDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                                objCirugiaProceDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objCirugiaProceDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objCirugiaProceDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objCirugiaProceDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objCirugiaProceDetalle.TipoExamen = 1;
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objCirugiaProceDetalle.Codigo = cadenas;
                                objCirugiaProceDetalle.ExamenDescripcion = objEntity.ValorCodigo1.Trim();
                                objCirugiaProceDetalle.Especificaciones = objEntity.ValorCodigo2;
                                objCirugiaProceDetalle.Accion = objEntity.ACCION;
                                objCirugiaProceDetalle.IndicadorEPS = objEntity.ValorEntero5;

                                if (objCirugiaProceDetalle.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objCirugiaProceDetalle.FechaCreacion = DateTime.Now;
                                    objCirugiaProceDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objCirugiaProceDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                    objCirugiaProceDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objCirugiaProceDetalle.FechaModificacion = DateTime.Now;
                                objCirugiaProceDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objCirugiaProceDetalle.Accion != "DETALLE")
                                {
                                    objCirugiaProceDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objCirugiaProceDetalle.Version = "CCEPF327";
                                ObjDetalle2.Add(objCirugiaProceDetalle);
                                // registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }

                            // Bloque UPDATE Y INSERT 3 EXAMENES

                            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDeleteCiruExamenes = null;
                            if (Session["Session_OrdenInter_CirugiaExamenes"] != null)
                            {
                                dataDeleteCiruExamenes = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirugiaExamenes"];
                            }
                            if (dataDeleteCiruExamenes != null)
                            {
                                foreach (var objDel in dataDeleteCiruExamenes)
                                {
                                    ObjDetalleDos.Add(objDel);
                                }
                            }

                            var objExamenesDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                            ObjListarExamen = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarExamen)
                            {
                                objExamenesDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                                objExamenesDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objExamenesDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objExamenesDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objExamenesDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objExamenesDetalle.TipoExamen = 2;
                                objExamenesDetalle.Accion = objEntity.ACCION;
                                objExamenesDetalle.IndicadorEPS = objEntity.ValorEntero5;

                                if (objExamenesDetalle.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objExamenesDetalle.FechaCreacion = DateTime.Now;
                                    objExamenesDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objExamenesDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                    objExamenesDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objExamenesDetalle.FechaModificacion = DateTime.Now;
                                objExamenesDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;


                                if (objExamenesDetalle.Accion != "DETALLE")
                                {
                                    objExamenesDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);  //Secuencia
                                }
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objExamenesDetalle.Codigo = cadenas;
                                objExamenesDetalle.ExamenDescripcion = objEntity.ValorCodigo1.Trim();
                                objExamenesDetalle.Cantidad = objEntity.ValorEntero6;
                                objExamenesDetalle.Especificaciones = objEntity.ValorCodigo2;
                                objExamenesDetalle.Version = "CCEPF327";
                                ObjDetalleDos.Add(objExamenesDetalle);
                                //  registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                            }

                            // Bloque UPDATE Y INSERT 4 USO DE QUIPOS


                            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDeleteCirUsoEquipos = null;
                            if (Session["Session_OrdenInter_CirUsodeEquipos"] != null)
                            {
                                dataDeleteCirUsoEquipos = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirUsodeEquipos"];
                            }
                            if (dataDeleteCirUsoEquipos != null)
                            {
                                foreach (var objDel in dataDeleteCirUsoEquipos)
                                {
                                    ObjDetalleUsoEqui.Add(objDel);
                                }
                            }


                            var objUsoEquiposDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                            ObjListarUsoEquipos = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionUsoEquipos, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarUsoEquipos)
                            {
                                objUsoEquiposDetalle = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                                objUsoEquiposDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objUsoEquiposDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objUsoEquiposDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objUsoEquiposDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objUsoEquiposDetalle.TipoExamen = 3;
                                objUsoEquiposDetalle.Accion = objEntity.ACCION;

                                objUsoEquiposDetalle.IndicadorEPS = objEntity.ValorEntero5;

                                if (objUsoEquiposDetalle.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objUsoEquiposDetalle.FechaCreacion = DateTime.Now;
                                    objUsoEquiposDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objUsoEquiposDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                    objUsoEquiposDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objUsoEquiposDetalle.FechaModificacion = DateTime.Now;
                                objUsoEquiposDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objUsoEquiposDetalle.Accion != "DETALLE")
                                {
                                    objUsoEquiposDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);  //Secuencia
                                }
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objUsoEquiposDetalle.Codigo = cadenas;
                                objUsoEquiposDetalle.ExamenDescripcion = objEntity.ValorCodigo1.Trim();
                                objUsoEquiposDetalle.Cantidad = objEntity.ValorEntero6;
                                objUsoEquiposDetalle.Especificaciones = objEntity.ValorCodigo2;
                                objUsoEquiposDetalle.Version = "CCEPF327";

                                ObjDetalleUsoEqui.Add(objUsoEquiposDetalle);
                                //  registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                            }

                            // Bloque UPDATE Y INSERT 5 MATERIAL ESPECIALIZADOS

                            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDeleteMatEspec = null;
                            if (Session["CCEPF327_Eliminar_CirugiaMatEspecializado"] != null)
                            {
                                dataDeleteMatEspec = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["CCEPF327_Eliminar_CirugiaMatEspecializado"];
                            }
                            if (dataDeleteMatEspec != null)
                            {
                                foreach (var objDel in dataDeleteMatEspec)
                                {
                                    ObjDetalleMatEspe.Add(objDel);
                                }
                            }



                            var objUsoMaterialEspecializados = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                            ObjListarMaterialEspec = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionMaterEspeciliza, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarMaterialEspec)
                            {
                                objUsoMaterialEspecializados = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();
                                objUsoMaterialEspecializados.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objUsoMaterialEspecializados.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objUsoMaterialEspecializados.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objUsoMaterialEspecializados.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objUsoMaterialEspecializados.TipoExamen = 4;
                                objUsoMaterialEspecializados.Accion = objEntity.ACCION;
                                objUsoMaterialEspecializados.IndicadorEPS = objEntity.ValorEntero5;

                                if (objUsoMaterialEspecializados.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objUsoMaterialEspecializados.FechaCreacion = DateTime.Now;
                                    objUsoMaterialEspecializados.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objUsoMaterialEspecializados.FechaCreacion = objCabecerra.FechaCreacion;
                                    objUsoMaterialEspecializados.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objUsoMaterialEspecializados.FechaModificacion = DateTime.Now;
                                objUsoMaterialEspecializados.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objUsoMaterialEspecializados.Accion != "DETALLE")
                                {
                                    objUsoMaterialEspecializados.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);  //Secuencia
                                }
                                //cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = objEntity.ValorCodigo7.Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objUsoMaterialEspecializados.Codigo = cadenas;
                                objUsoMaterialEspecializados.ExamenDescripcion = objEntity.ValorCodigo1.Trim();
                                objUsoMaterialEspecializados.Cantidad = objEntity.ValorEntero6;
                                objUsoMaterialEspecializados.Especificaciones = objEntity.ValorCodigo2;
                                objUsoMaterialEspecializados.Version = "CCEPF327";
                                ObjDetalleMatEspe.Add(objUsoMaterialEspecializados);
                                //  registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                        }

                        registro = SvnOrdenIntervencionQuirurgicaService.setMantenimientoActualizado(objCabecerra, ObjDetalle, ObjDetalle2, ObjDetalleDos, ObjDetalleUsoEqui, ObjDetalleMatEspe, txTiempo, txDate);

                        if (registro > 0)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //Session["ValoresTemporal1"] = null;
                            //Session["ValoresTemporal2"] = null;

                            Session["Session_OrdenInter_Diagnostico"] = null;
                            Session["Session_OrdenInter_CirugiaProcemiento"] = null;
                            Session["Session_OrdenInter_CirugiaExamenes"] = null;
                            Session["Session_OrdenInter_CirUsodeEquipos"] = null;
                            Session["CCEPF327_Eliminar_CirugiaMatEspecializado"] = null;

                            //Session["DataCatalogoCirugiaGODelete"] = null;
                            //Session["Session_GinecoObstetricos_DiagnosticoDelete"] = null;

                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    HClinicaController.GinecoLog(this, ex);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }
            // }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF327_Eliminar_CirugiaDiagnosticoDetalle(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF327_Eliminar_CirugiaDiagnosticoDetalle - Entrar");

            List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_OrdenInter_Diagnostico"] != null)
                {
                    dataDelete = (List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE>)Session["Session_OrdenInter_Diagnostico"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE>();
                }
                SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE objDelete = new SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_OrdenInter_Diagnostico"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    //var sqlException = ex.InnerException as SqlException;
                    //var detalle = new MA_MiscelaneosDetalle();
                    //detalle.ACCION = "ERRORES";
                    //List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    //if (sqlException != null)
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    //}
                    //else
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    //}
                    //string mostrarExc = "Excepción genérica:";
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    //return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    //throw;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF327_Eliminar_CirugiaProcedimientoDetalle(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF327_Eliminar_CirugiaProcedimientoDetalle - Entrar");
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_OrdenInter_CirugiaProcemiento"] != null)
                {
                    dataDelete = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirugiaProcemiento"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
                }
                SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE objDelete = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_OrdenInter_CirugiaProcemiento"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    //var sqlException = ex.InnerException as SqlException;
                    //var detalle = new MA_MiscelaneosDetalle();
                    //detalle.ACCION = "ERRORES";
                    //List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    //if (sqlException != null)
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    //}
                    //else
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    //}
                    //string mostrarExc = "Excepción genérica:";
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    //return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    //throw;
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF327_Eliminar_CirugiaExamenes(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF327_Eliminar_CirugiaExamenes - Entrar");
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_OrdenInter_CirugiaExamenes"] != null)
                {
                    dataDelete = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirugiaExamenes"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
                }
                SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE objDelete = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_OrdenInter_CirugiaExamenes"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    //var sqlException = ex.InnerException as SqlException;
                    //var detalle = new MA_MiscelaneosDetalle();
                    //detalle.ACCION = "ERRORES";
                    //List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    //if (sqlException != null)
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    //}
                    //else
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    //}
                    //string mostrarExc = "Excepción genérica:";
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    //return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    //throw;
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF327_Eliminar_CirugiaUsodeEquipos(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF327_Eliminar_CirugiaUsodeEquipos - Entrar");

            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_OrdenInter_CirUsodeEquipos"] != null)
                {
                    dataDelete = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["Session_OrdenInter_CirUsodeEquipos"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
                }
                SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE objDelete = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_OrdenInter_CirUsodeEquipos"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    //var sqlException = ex.InnerException as SqlException;
                    //var detalle = new MA_MiscelaneosDetalle();
                    //detalle.ACCION = "ERRORES";
                    //List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    //if (sqlException != null)
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    //}
                    //else
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    //}
                    //string mostrarExc = "Excepción genérica:";
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    //return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    //throw;
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF327_Eliminar_CirugiaMaterialEspecializado(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF327_Eliminar_CirugiaMaterialEspecializado - Entrar");
            List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["CCEPF327_Eliminar_CirugiaMatEspecializado"] != null)
                {
                    dataDelete = (List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>)Session["CCEPF327_Eliminar_CirugiaMatEspecializado"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE>();
                }
                SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE objDelete = new SS_HC_OrdenInterQuiruExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["CCEPF327_Eliminar_CirugiaMatEspecializado"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    //var sqlException = ex.InnerException as SqlException;
                    //var detalle = new MA_MiscelaneosDetalle();
                    //detalle.ACCION = "ERRORES";
                    //List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    //if (sqlException != null)
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    //}
                    //else
                    //{
                    //    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    //}
                    //string mostrarExc = "Excepción genérica:";
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    //return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    //throw;
                }
            }
            return this.Direct();
        }

        #endregion

        #region CCEPF328_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF328_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF328_View - Entrar");
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_NotasEnfermeria_FE();
                var Listar = new List<SS_HC_NotasEnfermeria_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcNotaEnfermeriaServiceFE.NotaEnfermeriaListar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_NotasEnfermeria_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }




                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_NOTAENFERMERIA, Listar);
                    String repetidos2 = "";
                    if (objetoGen != null)
                    {

                        List<SS_HC_NotasEnfermeria_FE> ListarCopy = (List<SS_HC_NotasEnfermeria_FE>)objetoGen;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        foreach (var objEntity in ListarCopy)
                        {
                            LocalEnty.NotaEnfermeria += "- " + objEntity.NotaEnfermeria;

                            //  repetidos2 += "," + objEntity.NotaEnfermeria;

                        }

                        //  Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF328_View", "", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }

        }




        public System.Web.Mvc.ActionResult CCEPF328_Save_NotaEnfermeria(SS_HC_NotasEnfermeria_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF328_Save_NotaEnfermeria - Entrar");


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (ENTITY_GLOBAL.Instance.COD_MEDICO == null)
                        {
                            objSave.IdMedico = Convert.ToString(0);

                        }
                        else
                        {
                            objSave.IdMedico = Convert.ToString(ENTITY_GLOBAL.Instance.COD_MEDICO);
                        }

                        if (ENTITY_GLOBAL.Instance.EnfermeraNombre == null)
                        {
                            objSave.NombreMedico = "";

                        }
                        else
                        {
                            objSave.NombreMedico = ENTITY_GLOBAL.Instance.EnfermeraNombre;
                        }


                        if (ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD == null)
                        {
                            objSave.IdEspecialidad = Convert.ToString(0);

                        }
                        else
                        {
                            objSave.IdEspecialidad = Convert.ToString(ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD);
                        }


                        //objSave.IdMedico = Convert.ToString(ENTITY_GLOBAL.Instance.COD_MEDICO);
                        //objSave.NombreMedico = ENTITY_GLOBAL.Instance.MedicoNombre;
                        //objSave.IdEspecialidad = Convert.ToString(ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD);
                        objSave.NumeroVisitas = 5;


                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;

                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaNota = DateTime.Now;
                            objSave.HoraNota = DateTime.Now;

                        }
                        objSave.FechaNota = DateTime.Now;
                        objSave.HoraNota = DateTime.Now;


                        registro = SvcNotaEnfermeriaServiceFE.setMantenimiento(objSave);


                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F328", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F328", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF328_GRIDNOTAENFERMERA()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF328_GRIDNOTAENFERMERA - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "LISTA_NOTAENFERMERIA_328";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                //LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();

                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                //if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                //{
                //    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                //    {
                //        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                //        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                //        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                //        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                //        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //    }
                //}

                if (Listar.Count > 0)
                {
                    int x = 0;
                    int y = 0;

                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {

                        Listar[x].ACCION = "UPDATEDETALLE";
                        Listar[x].CodigoElemento = Convert.ToString(y);
                        x = x + 1;
                        y = y + 1;
                    }
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }




        #endregion

        #region CCEPF305_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF305_View()
        {
            try
            {
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_Epidemiologia_FE();
                var Listar = new List<SS_HC_Epidemiologia_FE>();
                LocalEnty.Accion = "LISTAR";
                Session["SEC_TOP_305"] = 0;

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = Svc_EpidemiologiaCovid19ServiceFE.listarEntidad(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int contador = 0;

                    String version = "CCEPF305";

                    foreach (SS_HC_Epidemiologia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";

                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                Session["ValoresTemporalPAISES1"] = null;
                Session["ValoresTemporalCASOS2"] = null;
                Session["Session_SS_HC_LugarPaisesDetalle_DELETE"] = null;
                Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF305_View", LocalEnty);
            }
            catch (Exception ex)
            {
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF305_Save_covid19(SS_HC_Epidemiologia_FE objSave, String detalle1, String detalle2, string text)
        {
            // TRABA


            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();

            List<MA_MiscelaneosDetalle> ObjListarCasos = new List<MA_MiscelaneosDetalle>();


            // TRANSACCIONALES
            List<SS_HC_EpidemiologiaDetalleLugar_FE> ObjDetalle = new List<SS_HC_EpidemiologiaDetalleLugar_FE>();
            List<SS_HC_EpidemiologiaDetalleCasos_FE> ObjCasosDetalle2 = new List<SS_HC_EpidemiologiaDetalleCasos_FE>();

            if (text == "0")
            {
                Session["ValoresTemporalPAISES1"] = detalle1;
                Session["ValoresTemporalCASOS2"] = detalle2;

            }
            else
            {

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {

                        String valoreArray1;
                        valoreArray1 = (string)Session["ValoresTemporalPAISES1"];

                        if (valoreArray1 == null)
                        {

                            return showMensajeNotifyData("Excepción", "Por Favor debe Guardar Otra Vez, Sino se Perdaran los Datos", "ERROR", false);
                        }



                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            //objSave.FechaCreacion = DateTime.Now;
                            //objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.Estado = 2;
                                objSave.FechaCreacion = DateTime.Now;
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            }

                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaModificacion = DateTime.Now;

                            //registro = 1;
                            String mensage = "";
                            if (valoreArray1.Length > 5)
                            {
                                // Bloque UPDATE Y INSERT

                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray1, typeof(List<MA_MiscelaneosDetalle>));
                            }
                            //BLOQUE DELETE
                            List<SS_HC_EpidemiologiaDetalleLugar_FE> dataDelete = null;
                            if (Session["Session_SS_HC_LugarPaisesDetalle_DELETE"] != null)
                            {
                                dataDelete = (List<SS_HC_EpidemiologiaDetalleLugar_FE>)Session["Session_SS_HC_LugarPaisesDetalle_DELETE"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);
                                }
                            }

                            SS_HC_EpidemiologiaDetalleLugar_FE objEnfermedadDetalle = new SS_HC_EpidemiologiaDetalleLugar_FE();

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objEnfermedadDetalle = new SS_HC_EpidemiologiaDetalleLugar_FE();
                                objEnfermedadDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnfermedadDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnfermedadDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnfermedadDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objEnfermedadDetalle.Accion = objEntity.ACCION;
                                objEnfermedadDetalle.Pais = objEntity.ValorCodigo6;
                                objEnfermedadDetalle.Ciudad = objEntity.ValorCodigo3;
                                //objEnfermedadDetalle.FechaCreacion = objSave.FechaCreacion;
                                //objEnfermedadDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                //objEnfermedadDetalle.FechaModificacion = DateTime.Now;
                                //objEnfermedadDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objEnfermedadDetalle.Accion == "DETALLE")
                                {
                                    objEnfermedadDetalle.Estado = 2;
                                    objEnfermedadDetalle.FechaCreacion = DateTime.Now;
                                    objEnfermedadDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objEnfermedadDetalle.FechaCreacion = objSave.FechaCreacion;
                                    objEnfermedadDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                }

                                objEnfermedadDetalle.FechaModificacion = DateTime.Now;
                                objEnfermedadDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objEnfermedadDetalle.Accion != "DETALLE")
                                {
                                    objEnfermedadDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                ObjDetalle.Add(objEnfermedadDetalle);
                            }

                            String valoreArray2;
                            valoreArray2 = (string)Session["ValoresTemporalCASOS2"];

                            if (valoreArray2.Length > 5)
                            {
                                // Bloque UPDATE Y INSERT
                                ObjListarCasos = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray2, typeof(List<MA_MiscelaneosDetalle>));
                            }
                            //BLOQUE DELETE
                            List<SS_HC_EpidemiologiaDetalleCasos_FE> dataDeleteCasos = null;

                            if (Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"] != null)
                            {
                                dataDeleteCasos = (List<SS_HC_EpidemiologiaDetalleCasos_FE>)Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"];
                            }
                            if (dataDeleteCasos != null)
                            {
                                foreach (var objDel in dataDeleteCasos)
                                {
                                    ObjCasosDetalle2.Add(objDel);
                                }
                            }



                            SS_HC_EpidemiologiaDetalleCasos_FE objCasosDetalle = new SS_HC_EpidemiologiaDetalleCasos_FE();

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarCasos)
                            {
                                objCasosDetalle = new SS_HC_EpidemiologiaDetalleCasos_FE();
                                objCasosDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objCasosDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objCasosDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objCasosDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objCasosDetalle.Accion = objEntity.ACCION;
                                objCasosDetalle.CampoDescripcion = objEntity.ValorCodigo6;

                                //objCasosDetalle.FechaCreacion = objSave.FechaCreacion;
                                //objCasosDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                //objCasosDetalle.FechaModificacion = DateTime.Now;
                                //objCasosDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objCasosDetalle.Accion == "DETALLE")
                                {
                                    objCasosDetalle.Estado = 2;
                                    objCasosDetalle.FechaCreacion = DateTime.Now;
                                    objCasosDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objCasosDetalle.FechaCreacion = objSave.FechaCreacion;
                                    objCasosDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                }

                                objCasosDetalle.FechaModificacion = DateTime.Now;
                                objCasosDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objCasosDetalle.Accion != "DETALLE")
                                {
                                    objCasosDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                ObjCasosDetalle2.Add(objCasosDetalle);
                            }


                            registro = Svc_EpidemiologiaCovid19ServiceFE.setMantenimiento(objSave, ObjDetalle, ObjCasosDetalle2);
                            //registro = SvcEnfermedadActualServiceFE.setMantenimiento(objSave, ObjDetalle);
                            if (registro > 0)
                            {

                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");




                                Session["ValoresTemporalPAISES1"] = null;
                                Session["ValoresTemporalCASOS2"] = null;
                                Session["Session_SS_HC_LugarPaisesDetalle_DELETE"] = null;
                                Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"] = null;



                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");

                                return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF001 al Guardar :" + ObjDetalle, "ERROR", false);
                                //return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");

                            return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF001 Cabeccera :" + ObjCasosDetalle2, "ERROR", false);
                            //return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        //return showMsgTratamientoExcepcion(ex, "");
                        //throw;

                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                        //string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotify("Error", mostrarExc, "ERROR");
                        throw;
                    }
                }

            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF305_GRID_PAISES_CIUDADES()
        {

            try
            {
                var LocalEnty = new MA_MiscelaneosDetalle();
                List<MA_MiscelaneosDetalle> Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "PAISES_CIUDADES_305";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                //Session["Valores"]= Listar.ToArray();
                //var PRUEBA = Session["Valores"];
                //  Session["Valores"] = Listar;

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_305"])
                        {
                            Session["SEC_TOP_305"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult CCEPF305_LISTADETALLECASOS()
        {

            try
            {
                var LocalEnty = new MA_MiscelaneosDetalle();
                List<MA_MiscelaneosDetalle> Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "CASOS_PROBABLES_305";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                //Session["Valores"]= Listar.ToArray();
                //var PRUEBA = Session["Valores"];
                //  Session["Valores"] = Listar;

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_305"])
                        {
                            Session["SEC_TOP_305"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult addEliminar_CCEPF305(String MODO, String codigo, String secuencia)
        {

            List<SS_HC_EpidemiologiaDetalleLugar_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_LugarPaisesDetalle_DELETE"] != null)
                {
                    dataDelete = (List<SS_HC_EpidemiologiaDetalleLugar_FE>)Session["Session_SS_HC_LugarPaisesDetalle_DELETE"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_EpidemiologiaDetalleLugar_FE>();
                }
                SS_HC_EpidemiologiaDetalleLugar_FE objDelete = new SS_HC_EpidemiologiaDetalleLugar_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    if (MODO != "NUEVO")
                    {
                        objDelete.Accion = MODO;
                        objDelete.Secuencia = Convert.ToInt32(secuencia);
                        dataDelete.Add(objDelete);
                        Session["Session_SS_HC_LugarPaisesDetalle_DELETE"] = dataDelete;
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult addEliminarCasos_CCEPF305(String MODO, String codigo, String secuencia)
        {

            List<SS_HC_EpidemiologiaDetalleCasos_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"] != null)
                {
                    dataDelete = (List<SS_HC_EpidemiologiaDetalleCasos_FE>)Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_EpidemiologiaDetalleCasos_FE>();
                }
                SS_HC_EpidemiologiaDetalleCasos_FE objDelete = new SS_HC_EpidemiologiaDetalleCasos_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    if (MODO != "NUEVO")
                    {
                        objDelete.Accion = MODO;
                        objDelete.Secuencia = Convert.ToInt32(secuencia);
                        dataDelete.Add(objDelete);
                        Session["Session_SS_HC_CasosVisitadosDetalle_DELETE"] = dataDelete;
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }


        #endregion

        #region CCEPF005_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF005_View()
        {
            Log.Information("HClinicaController - CCEPF005_View - Entrar");
            //2016.10.12 - 06:20
            Session["SEC_TOP_005"] = 0;
            try
            {
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_AntePerGinecoObstetricos_FE();
                var Listar = new List<SS_HC_AntePerGinecoObstetricos_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.IdGinecoobstetricos = 1;
                }
                bool hallado = false;
                //LocalObj = null;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = Svc_AntePerGinecoObstetricosFEService.listarEntidad(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    int contador = 0;

                    String version = "CCEPF005";

                    foreach (SS_HC_AntePerGinecoObstetricos_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";

                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }
                Session["DataCatalogoCirugiaGODelete"] = null;
                Session["Session_GinecoObstetricos_DiagnosticoDelete"] = null;
                Session["ValoresTemporal1"] = null;
                Session["ValoresTemporal2"] = null;
                /*********contenedor 1************/
                if (LocalEnty.AntFisioGinecologico_flag == "S")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsGinecologico");
                    fsUno.Hidden = true;
                }
                else
                {
                    var fsUno = this.GetCmp<FieldSet>("fsoGinecologico");
                    fsUno.Hidden = false;
                }

                /*********contenedor 2************/
                if (LocalEnty.AntFisioObstetrico_flag == "S")
                {
                    var fsDos = this.GetCmp<FieldSet>("fsObstetrico");
                    fsDos.Hidden = true;
                }
                else
                {
                    var fsDos = this.GetCmp<FieldSet>("fsObstetrico");
                    fsDos.Hidden = false;
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF005_View", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF005_getGrillaCatalogoCirugiaGO(string agente, string tipoagente, string codagente)
        {
            Log.Information("HClinicaController - CCEPF005_getGrillaCatalogoCirugiaGO - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>();
            var LocalEnty = new SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE();


            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

            LocalEnty.Accion = "LISTAR";

            Listar = Svc_AntePerGinecoObstetricosFEService.listarCatalogoDetalle(LocalEnty, 0, 0);


            foreach (var objData in Listar)
            {
            }
            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult CCEPF005_add_DataDeleteCatalogoCirugiaGO(String MODO, string codigo, string secuencia)
        {
            Log.Information("HClinicaController - CCEPF005_add_DataDeleteCatalogoCirugiaGO - Entrar");

            List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE> dataDelete = null;
            if (Session["DataCatalogoCirugiaGODelete"] != null)
            {
                dataDelete = (List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>)Session["DataCatalogoCirugiaGODelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>();
            }
            SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE objDelete = new SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE();

            objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objDelete.IdGinecoobstetricos = 1; // Similar a J.M.


            objDelete.Accion = MODO; //"DELETEDETALLE"
            objDelete.Secuencia = Convert.ToInt32(secuencia);


            dataDelete.Add(objDelete);
            Session["DataCatalogoCirugiaGODelete"] = dataDelete;


            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF005_LISTAR_GRILLADIAGNOSTICO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF005_LISTAR_GRILLADIAGNOSTICO - Entrar");

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "GINECOOBSTETRICOS";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "GINECOOBSTETRICOS";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_005"])
                        {
                            Session["SEC_TOP_005"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF005_Eliminar_AntePerGinecoObstetricosDetalle(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF005_Eliminar_AntePerGinecoObstetricosDetalle - Entrar");
            List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_GinecoObstetricos_DiagnosticoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE>)Session["Session_GinecoObstetricos_DiagnosticoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE>();
                }
                SS_HC_GINECOOBSTETRICOS_Diagnostico_FE objDelete = new SS_HC_GINECOOBSTETRICOS_Diagnostico_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objDelete.IdGinecoobstetricos = 1;

                try
                {

                    objDelete.Accion = MODO; //"DELETEDETALLE"               


                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();

                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Session_GinecoObstetricos_DiagnosticoDelete"] = dataDelete;
                }


                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:";
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                    throw;
                }
            }
            return this.Direct();
        }


        public static void GinecoLog(object obj, Exception ex)
        {
            Log.Information("HClinicaController - GinecoLog - Entrar");

            string fecha = System.DateTime.Now.ToString("yyyyMMdd");
            string hora = System.DateTime.Now.ToString("HH:mm:ss");
            //string path = HttpContext.Current.Request.MapPath("~/log/" + fecha + ".txt");
            string path = System.Web.HttpContext.Current.Request.MapPath("~/Log/controlError.txt");
            StreamWriter sw = new StreamWriter(path, true);
            StackTrace stacktrace = new StackTrace();
            sw.WriteLine(obj.GetType().FullName + " " + hora);
            sw.WriteLine(stacktrace.GetFrame(1).GetMethod().Name + " - " + ex.Message);
            sw.WriteLine("");
            sw.Flush();
            sw.Close();

        }
        public static void GinecoLogExtra(object obj, string mensaje)
        {
            Log.Information("HClinicaController - GinecoLogExtra - Entrar");

            string fecha = System.DateTime.Now.ToString("yyyyMMdd");
            string hora = System.DateTime.Now.ToString("HH:mm:ss");
            //string path = HttpContext.Current.Request.MapPath("~/log/" + fecha + ".txt");
            string path = System.Web.HttpContext.Current.Request.MapPath("~/Log/controlError.txt");
            StreamWriter sw = new StreamWriter(path, true);
            StackTrace stacktrace = new StackTrace();
            sw.WriteLine(obj.GetType().FullName + " " + hora);
            sw.WriteLine(stacktrace.GetFrame(1).GetMethod().Name + " - " + mensaje);
            sw.WriteLine("");
            sw.Flush();
            sw.Close();

        }

        public System.Web.Mvc.ActionResult CCEPF005_Save_AntePerGinecoObstetricos(SS_HC_AntePerGinecoObstetricos_FE objCabecerra,
            String selectionArray1, String selectionArray2, String text)
        {
            Log.Information("HClinicaController - CCEPF005_Save_AntePerGinecoObstetricos - Entrar");

            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE> ObjListarCatalogo = null;
            if (text == "0")
            {
                Session["ValoresTemporal1"] = selectionArray1;
                Session["ValoresTemporal2"] = selectionArray2;

                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                // TRANSACCIONALES
                valoreArray = (string)Session["ValoresTemporal1"];

                //if (valoreArray == null)
                //{

                //    return showMensajeNotifyData("Excepción", "Por Favor debe Guardar Otra Vez, Sino se Perdaran los Datos", "ERROR", false);
                //}
                List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE> ObjDetalle = new List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>();
                List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE> ObjDetalleDos = new List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objCabecerra != null)
                        {
                            objCabecerra.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objCabecerra.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objCabecerra.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objCabecerra.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objCabecerra.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objCabecerra.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            //objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //objCabecerra.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            objCabecerra.IdGinecoobstetricos = 1;

                            if (objCabecerra.Accion == "NUEVO")
                            {

                                objCabecerra.Estado = 2;
                                objCabecerra.FechaCreacion = DateTime.Now;
                                objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                            }
                            objCabecerra.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objCabecerra.FechaModificacion = DateTime.Now;
                            string mensage = "";
                            registro = 1;
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE 1
                                List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE> dataDeleteCatalogo = null;
                                if (Session["DataCatalogoCirugiaGODelete"] != null)
                                {
                                    dataDeleteCatalogo = (List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>)Session["DataCatalogoCirugiaGODelete"];
                                }
                                if (dataDeleteCatalogo != null)
                                {
                                    foreach (var objDel in dataDeleteCatalogo)
                                    {
                                        ObjDetalle.Add(objDel);

                                    }
                                }

                                // Bloque UPDATE Y INSERT 1
                                var objCatalogoCirugiaDetalle = new SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE();
                                ObjListarCatalogo = (List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE>));

                                foreach (SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE objEntity in ObjListarCatalogo)
                                {

                                    objCatalogoCirugiaDetalle = new SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE();

                                    objCatalogoCirugiaDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objCatalogoCirugiaDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objCatalogoCirugiaDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objCatalogoCirugiaDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    objCatalogoCirugiaDetalle.Accion = objEntity.Accion;
                                    if (objCatalogoCirugiaDetalle.Accion == "DETALLE")
                                    {
                                        //objCatalogoCirugiaDetalle.Estado = 2;
                                        objCatalogoCirugiaDetalle.FechaCreacion = DateTime.Now;
                                        objCatalogoCirugiaDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    }
                                    else
                                    {
                                        objCatalogoCirugiaDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                        objCatalogoCirugiaDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                    }

                                    objCatalogoCirugiaDetalle.FechaModificacion = DateTime.Now;
                                    objCatalogoCirugiaDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                    if (objCatalogoCirugiaDetalle.Accion != "DETALLE")
                                    {
                                        objCatalogoCirugiaDetalle.Secuencia = objEntity.Secuencia;
                                    }
                                    objCatalogoCirugiaDetalle.IdGinecoobstetricos = 1;
                                    objCatalogoCirugiaDetalle.CirugiaGO = objEntity.CirugiaGO;
                                    objCatalogoCirugiaDetalle.Version = "CCEPF005";

                                    ObjDetalle.Add(objCatalogoCirugiaDetalle);

                                    registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                }

                                //BLOQUE DELETE 2
                                List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE> dataDelete = null;
                                if (Session["Session_GinecoObstetricos_DiagnosticoDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_GINECOOBSTETRICOS_Diagnostico_FE>)Session["Session_GinecoObstetricos_DiagnosticoDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalleDos.Add(objDel);

                                    }
                                }
                                // Bloque UPDATE Y INSERT 2
                                var objDiagnosticoDetalle = new SS_HC_GINECOOBSTETRICOS_Diagnostico_FE();
                                selectionArray2 = (string)Session["ValoresTemporal2"];
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<MA_MiscelaneosDetalle>));

                                foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                {
                                    objDiagnosticoDetalle = new SS_HC_GINECOOBSTETRICOS_Diagnostico_FE();

                                    objDiagnosticoDetalle.Accion = objEntity.ACCION;
                                    objDiagnosticoDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objDiagnosticoDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objDiagnosticoDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objDiagnosticoDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objDiagnosticoDetalle.IdGinecoobstetricos = 1;

                                    if (objDiagnosticoDetalle.Accion != "DETALLE")
                                    {
                                        objDiagnosticoDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);  //Secuencia
                                    }
                                    cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();
                                    objDiagnosticoDetalle.IdDiagnostico = Convert.ToInt32(cadenas);

                                    objDiagnosticoDetalle.Sexo = objEntity.ValorCodigo2; //  Sexo
                                    objDiagnosticoDetalle.Anio = objEntity.ValorEntero4; //  Anio
                                    objDiagnosticoDetalle.IdNacidoVivo = objEntity.ValorEntero5; //  Nacido vivo
                                    objDiagnosticoDetalle.IdTipoParto = objEntity.ValorEntero6; //  Tipo de parto
                                    objDiagnosticoDetalle.IdLugarParto = objEntity.ValorEntero7; // Lugar del Parto
                                    objDiagnosticoDetalle.IdAtendidoPor = objEntity.ValorEntero1; // Atendido por
                                    objDiagnosticoDetalle.IdComplicacionesParto = objEntity.ValorEntero2; // Complic. del parto 
                                    objDiagnosticoDetalle.PesoNacer = objEntity.ValorEntero3; // Peso nacer (kg.) 

                                    objDiagnosticoDetalle.Version = "CCEPF005";

                                    ObjDetalleDos.Add(objDiagnosticoDetalle);

                                    registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                }

                            }

                            registro = Svc_AntePerGinecoObstetricosFEService.setMantenimiento(objCabecerra, ObjDetalle, ObjDetalleDos);

                            var dato = registro;

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                Session["ValoresTemporal1"] = null;
                                Session["ValoresTemporal2"] = null;

                                Session["DataCatalogoCirugiaGODelete"] = null;
                                Session["Session_GinecoObstetricos_DiagnosticoDelete"] = null;

                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        HClinicaController.GinecoLog(this, ex);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF012_FORMULARIO
        //Antecedentes Personales - Inmunizaciones Niño F12
        public System.Web.Mvc.ActionResult CCEPF012_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF012_View - Entrar");
                Session["DataInmunizacionesNinioDelete"] = null;

                Session["Check"] = 0;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                SS_HC_AntecedentesPersonalesIN_FE LocalObj = null;
                var LocalEnty = new SS_HC_AntecedentesPersonalesIN_FE();
                var Listar = new List<SS_HC_AntecedentesPersonalesIN_FE>();
                var ListarAUX = new List<SS_HC_AntecedentesPersonalesIN_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcAntecedentesPersonalesINFEService.listarEntidad(LocalEnty);


                String version = "CCEPF012";

                if (Listar.Count > 0)
                {

                    foreach (SS_HC_AntecedentesPersonalesIN_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }
                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcAntecedentesPersonalesINFEService.listarEntidad(LocalEnty);

                    if (ListarAUX.Count > 0)
                    {
                        LocalEnty.Accion = "LISTAR";
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcAntecedentesPersonalesINFEService.listarEntidad(LocalEnty);
                    }

                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_AntecedentesPersonalesIN_FE objEntity in Listar)
                        {

                            LocalEnty = objEntity;
                            LocalEnty.Version = version;
                            LocalEnty.Accion = "NUEVO";
                            hallado = true;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            }
                        }
                    }
                    if (!hallado)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            LocalEnty.Accion = "NUEVO";
                        }
                    }
                }

                ///////////////////////////////////////////////////////////////////////////////

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /*********contenedor 1************/
                if (LocalEnty.INFLUENZA == null)
                {
                    Session["Check"] = 1;
                }
                else { Session["Check1"] = 0; }
                if (LocalEnty.Estado == 1)
                {
                    Session["Check2"] = 1;
                }
                if (LocalEnty.Estado == 0)
                {
                    Session["Check2"] = 0;
                }
                if (LocalEnty.Estado == null)
                {
                    Session["Check2"] = 0;
                }

                if (LocalEnty.VacunaNinioFlag == "N")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsVacuna");
                    var fsDos = this.GetCmp<FieldSet>("fsOtras");
                    fsUno.Hidden = true;
                    fsDos.Hidden = true;
                }
                else if (LocalEnty.VacunaNinioFlag == "S")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsVacuna");
                    var fsDos = this.GetCmp<FieldSet>("fsOtras");
                    fsUno.Hidden = false;
                    fsDos.Hidden = false;
                }

                return View("FormulariosExtras/CCEPF012_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF012_getGrillaInmunizacionesNinio(string agente, string tipoagente, string codagente)
        {
            Log.Information("HClinicaController - CCEPF012_getGrillaInmunizacionesNinio - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_HC_AntecedentesPersonalesINDetalle_FE>();
            var LocalEnty = new SS_HC_AntecedentesPersonalesINDetalle_FE();
            /*var ListarAUX = new List<SS_HC_AntecedentesPersonalesINDetalle_FE>();*/

            var LocalEntyTemp = new SS_HC_AntecedentesPersonalesIN_FE();
            var ListarAUX = new List<SS_HC_AntecedentesPersonalesIN_FE>();

            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

            LocalEnty.Accion = "LISTAR";

            Listar = SvcInmunizacionesNinioDetalle.listarDetalle(LocalEnty, 0, 0);

            if (Listar.Count > 0)
            {
                int x = 0;
                // List<MA_MiscelaneosDetalle> Lista1 = new List<MA_MiscelaneosDetalle>();
                //  int top = 0; Session["SEC_TOP_150"] = 0;
                foreach (SS_HC_AntecedentesPersonalesINDetalle_FE intobj in Listar)
                {

                    //  MA_MiscelaneosDetalle ObjList = new MA_MiscelaneosDetalle();

                    Listar[x].Accion = "UPDATE";
                    //ObjList.CodigoElemento = intobj.Secuencia.ToString();
                    //ObjList.ValorCodigo1 = intobj.OtrasVacunas;
                    //Lista1.Add(ObjList);
                    //Listar[x].Accion = "UPDATE";
                    x = x + 1;
                }
                // string json = null;



                //   json = (string)Newtonsoft.Json.JsonConvert.SerializeObject(Lista1);
                //   Session["ValoresTemporal"] = json;
            }
            //else
            //{

            //    Session["ValoresTemporal"] = "[]";
            //}

            //foreach (var objData in Listar)
            //{
            //}
            //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
            if (Listar.Count < 1 /*&& (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" /*|| ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA"*//*)/*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
            {
                LocalEntyTemp.Accion = "LISTARTOP";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEntyTemp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEntyTemp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEntyTemp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEntyTemp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                ListarAUX = SvcAntecedentesPersonalesINFEService.listarEntidad(LocalEntyTemp);
                /*ListarAUX = SvcInmunizacionesNinioDetalle.listarDetalle(LocalEnty, 0, 0);*/

                if (ListarAUX.Count > 0)
                {
                    LocalEnty.Accion = "LISTAR";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                        LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                    }
                    Listar = SvcInmunizacionesNinioDetalle.listarDetalle(LocalEnty, 0, 0);
                }
                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (SS_HC_AntecedentesPersonalesINDetalle_FE intobj in Listar)
                    {
                        //obtemp = new SS_HC_Alergia_FE();
                        /* LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();*/
                        Listar[x].Accion = "NUEVO";
                        //LocalEnty.Accion 
                        // LocalEnty.Add(obtemp);
                        x = x + 1;
                    }
                }

            }

            ///////////////////////////////////////////////////////////////////////////////

            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult CCEPF012_Save_Grilla(SS_HC_AntecedentesPersonalesIN_FE objSave, String selectionArray1, String text, String estado)
        {
            Log.Information("HClinicaController - CCEPF012_Save_Grilla - Entrar");

            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;

            if (text == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                Session["Estado_012"] = estado;
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF012add_DataDeleteInmunizacionesNinio(String MODO, string codigo, string secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF012add_DataDeleteInmunizacionesNinio - Entrar");

            List<SS_HC_AntecedentesPersonalesINDetalle_FE> dataDelete = null;
            List<SS_HC_AntecedentesPersonalesINDetalle_FE> dataSave = null;
            if (Session["DataInmunizacionesNinioDelete"] != null)
            {
                dataDelete = (List<SS_HC_AntecedentesPersonalesINDetalle_FE>)Session["DataInmunizacionesNinioDelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_AntecedentesPersonalesINDetalle_FE>();
            }




            SS_HC_AntecedentesPersonalesINDetalle_FE objDelete = new SS_HC_AntecedentesPersonalesINDetalle_FE();



            objDelete.Secuencia = Convert.ToInt32(secuencia);


            if ((accion).Trim() != "NUEVO")
            {

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                objDelete.Accion = MODO; //"DELETEDETALLE"


                dataDelete.Add(objDelete);
            }

            Session["DataInmunizacionesNinioDelete"] = dataDelete;


            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF012_Save_AntecedentesPersonalesIN(SS_HC_AntecedentesPersonalesIN_FE objSave, String selectionArray1, String text, String estado)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF012_Save_AntecedentesPersonalesIN - Entrar");

                // TRABA
                String valoreArray;
                List<MA_MiscelaneosDetalle> ObjListar;

                if (text == "0")
                {
                    Session["ValoresTemporal"] = selectionArray1;
                    ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                    Session["Estado_012"] = estado;
                }
                else
                {
                    valoreArray = (string)Session["ValoresTemporal"];
                    // TRANSACCIONALES
                    List<SS_HC_AntecedentesPersonalesINDetalle_FE> ObjDetalle = new List<SS_HC_AntecedentesPersonalesINDetalle_FE>();
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        int registro = -1;
                        if (objSave != null)
                        {
                            if (objSave.VacunaNinioFlag == null)
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Mensaje", "Por favor seleccionar: Vacuna en el Niño", "ERROR", false);
                            }
                            else if (objSave.VacunaNinioFlag == "S")
                            {
                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF012
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (Session["Estado_012"] != null && getValorFiltroInt("" + Session["Estado_012"]) != null)
                                {
                                    objSave.Estado = Convert.ToInt32((string)Session["Estado_012"]);
                                }

                                if (objSave.Accion == "NUEVO")
                                {
                                    objSave.FechaCreacion = DateTime.Now;
                                }
                                objSave.FechaModificacion = DateTime.Now;
                                #region Validacion_Chekbox_Vacios
                                if (
                                    (objSave.BCG_RN_flag == null || objSave.BCG_RN_flag == "N") &&
                                    (objSave.BCG_NoRecuerda_flag == null || objSave.BCG_NoRecuerda_flag == "N") &&
                                    (objSave.HepatitisBRN_RN_flag == null || objSave.HepatitisBRN_RN_flag == "N") &&
                                    (objSave.HepatitisBRN_NoRecuerda_flag == null || objSave.HepatitisBRN_NoRecuerda_flag == "N") &&
                                    (objSave.DPT_1era_flag == null || objSave.DPT_1era_flag == "N") &&
                                    (objSave.DPT_2da_flag == null || objSave.DPT_2da_flag == "N") &&
                                    (objSave.DPT_3era_flag == null || objSave.DPT_3era_flag == "N") &&
                                    (objSave.DPT_1erRef_flag == null || objSave.DPT_1erRef_flag == "N") &&
                                    (objSave.DPT_2doRef_flag == null || objSave.DPT_2doRef_flag == "N") &&
                                    (objSave.DPT_NoRecuerda_flag == null || objSave.DPT_NoRecuerda_flag == "N") &&
                                    (objSave.POLIO_1era_flag == null || objSave.POLIO_1era_flag == "N") &&
                                    (objSave.POLIO_2da_flag == null || objSave.POLIO_2da_flag == "N") &&
                                    (objSave.POLIO_3era_flag == null || objSave.POLIO_3era_flag == "N") &&
                                    (objSave.POLIO_1erRef_flag == null || objSave.POLIO_1erRef_flag == "N") &&
                                    (objSave.POLIO_2doRef_flag == null || objSave.POLIO_2doRef_flag == "N") &&
                                    (objSave.POLIO_NoRecuerda_flag == null || objSave.POLIO_NoRecuerda_flag == "N") &&
                                    (objSave.HiB_1era_flag == null || objSave.HiB_1era_flag == "N") &&
                                    (objSave.HiB_2da_flag == null || objSave.HiB_2da_flag == "N") &&
                                    (objSave.HiB_3era_flag == null || objSave.HiB_3era_flag == "N") &&
                                    (objSave.HiB_1erRef_flag == null || objSave.HiB_1erRef_flag == "N") &&
                                    (objSave.HiB_2doRef_flag == null || objSave.HiB_2doRef_flag == "N") &&
                                    (objSave.HiB_NoRecuerda_flag == null || objSave.HiB_NoRecuerda_flag == "N") &&
                                    (objSave.HEPATITISB_1era_flag == null || objSave.HEPATITISB_1era_flag == "N") &&
                                    (objSave.HEPATITISB_2da_flag == null || objSave.HEPATITISB_2da_flag == "N") &&
                                    (objSave.HEPATITISB_3era_flag == null || objSave.HEPATITISB_3era_flag == "N") &&
                                    (objSave.HEPATITISB_1erRef_flag == null || objSave.HEPATITISB_1erRef_flag == "N") &&
                                    (objSave.HEPATITISB_NoRecuerda_flag == null || objSave.HEPATITISB_NoRecuerda_flag == "N") &&
                                    (objSave.ROTAVIRUS_1era_flag == null || objSave.ROTAVIRUS_1era_flag == "N") &&
                                    (objSave.ROTAVIRUS_2da_flag == null || objSave.ROTAVIRUS_2da_flag == "N") &&
                                    (objSave.ROTAVIRUS_3era_flag == null || objSave.ROTAVIRUS_3era_flag == "N") &&
                                    //CAMBIO INCIDENCIA 2017-07
                                    //(objSave.ROTAVIRUS_1erRef_flag == null || objSave.ROTAVIRUS_1erRef_flag == "N") &&
                                    //(objSave.ROTAVIRUS_2doRef_flag == null || objSave.ROTAVIRUS_2doRef_flag == "N") &&
                                    (objSave.ROTAVIRUS_NoRecuerda_flag == null || objSave.ROTAVIRUS_NoRecuerda_flag == "N") &&
                                    (objSave.SRP_1era_flag == null || objSave.SRP_1era_flag == "N") &&
                                    (objSave.SRP_2da_flag == null || objSave.SRP_2da_flag == "N") &&
                                    (objSave.SRP_NoRecuerda_flag == null || objSave.SRP_NoRecuerda_flag == "N") &&
                                    (objSave.VARICELA_1era_flag == null || objSave.VARICELA_1era_flag == "N") &&
                                    (objSave.VARICELA_2da_flag == null || objSave.VARICELA_2da_flag == "N") &&
                                    (objSave.VARICELA_NoRecuerda_flag == null || objSave.VARICELA_NoRecuerda_flag == "N") &&
                                    (objSave.HEPATITISA_1era_flag == null || objSave.HEPATITISA_1era_flag == "N") &&
                                    (objSave.HEPATITISA_2da_flag == null || objSave.HEPATITISA_2da_flag == "N") &&
                                    (objSave.HEPATITISA_NoRecuerda_flag == null || objSave.HEPATITISA_NoRecuerda_flag == "N") &&
                                    (objSave.NEUMOCOCO_1era_flag == null || objSave.NEUMOCOCO_1era_flag == "N") &&
                                    (objSave.NEUMOCOCO_2da_flag == null || objSave.NEUMOCOCO_2da_flag == "N") &&
                                    (objSave.NEUMOCOCO_3era_flag == null || objSave.NEUMOCOCO_3era_flag == "N") &&
                                    (objSave.NEUMOCOCO_1erRef_flag == null || objSave.NEUMOCOCO_1erRef_flag == "N") &&
                                    (objSave.NEUMOCOCO_NoRecuerda_flag == null || objSave.NEUMOCOCO_NoRecuerda_flag == "N")

                                    )
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Mensaje", "Vacunas del niño: Por favor marcar las vacunas correspondientes. (BGG y Hepatitis B del R.N. deben marcarse)", "ERROR", false);
                                }
                                else
                                {
                                    bool valido = true;
                                    String mensaje = "Vacunas del niño:";
                                    if ((objSave.BCG_RN_flag == null && /*objSave.BCG_RN_flag == "N" ||*/ objSave.BCG_NoRecuerda_flag == null))
                                    {
                                        mensaje = mensaje + " Por favor marcar BCG. ";
                                        valido = false;
                                    }
                                    if ((objSave.HepatitisBRN_RN_flag == null && /*objSave.HepatitisBRN_RN_flag == "N"*/ objSave.HepatitisBRN_NoRecuerda_flag == null))
                                    {
                                        mensaje = mensaje + " Por favor marcar Hepatitis B del R.N.  ";
                                        valido = false;
                                    }
                                    if (!valido)
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Mensaje", mensaje, "ERROR", false);
                                    }
                                }

                                #endregion
                                #region Validacion_Chekbox_NoRecuerda
                                if (objSave.BCG_NoRecuerda_flag == "S") { objSave.BCG_RN_flag = null; }
                                if (objSave.HepatitisBRN_NoRecuerda_flag == "S") { objSave.HepatitisBRN_RN_flag = null; }
                                if (objSave.DPT_NoRecuerda_flag == "S")
                                {
                                    objSave.DPT_1era_flag = null;
                                    objSave.DPT_2da_flag = null;
                                    objSave.DPT_3era_flag = null;
                                    objSave.DPT_1erRef_flag = null;
                                    objSave.DPT_2doRef_flag = null;
                                }
                                if (objSave.POLIO_NoRecuerda_flag == "S")
                                {
                                    objSave.POLIO_1era_flag = null;
                                    objSave.POLIO_2da_flag = null;
                                    objSave.POLIO_3era_flag = null;
                                    objSave.POLIO_1erRef_flag = null;
                                    objSave.POLIO_2doRef_flag = null;
                                }
                                if (objSave.HiB_NoRecuerda_flag == "S")
                                {
                                    objSave.HiB_1era_flag = null;
                                    objSave.HiB_2da_flag = null;
                                    objSave.HiB_3era_flag = null;
                                    objSave.HiB_1erRef_flag = null;
                                    objSave.HiB_2doRef_flag = null;
                                }
                                if (objSave.HEPATITISB_NoRecuerda_flag == "S")
                                {
                                    objSave.HEPATITISB_1era_flag = null;
                                    objSave.HEPATITISB_2da_flag = null;
                                    objSave.HEPATITISB_3era_flag = null;
                                    objSave.HEPATITISB_1erRef_flag = null;
                                }
                                if (objSave.ROTAVIRUS_NoRecuerda_flag == "S")
                                {
                                    objSave.ROTAVIRUS_1era_flag = null;
                                    objSave.ROTAVIRUS_2da_flag = null;
                                    objSave.ROTAVIRUS_3era_flag = null;
                                    objSave.ROTAVIRUS_1erRef_flag = null;
                                    objSave.ROTAVIRUS_2doRef_flag = null;
                                }
                                if (objSave.SRP_NoRecuerda_flag == "S")
                                {
                                    objSave.SRP_1era_flag = null;
                                    objSave.SRP_2da_flag = null;
                                }
                                if (objSave.VARICELA_NoRecuerda_flag == "S")
                                {
                                    objSave.VARICELA_1era_flag = null;
                                    objSave.VARICELA_2da_flag = null;
                                }
                                if (objSave.HEPATITISA_NoRecuerda_flag == "S")
                                {
                                    objSave.HEPATITISA_1era_flag = null;
                                    objSave.HEPATITISA_2da_flag = null;
                                }
                                if (objSave.NEUMOCOCO_NoRecuerda_flag == "S")
                                {
                                    objSave.NEUMOCOCO_1era_flag = null;
                                    objSave.NEUMOCOCO_2da_flag = null;
                                    objSave.NEUMOCOCO_3era_flag = null;
                                    objSave.NEUMOCOCO_1erRef_flag = null;
                                }
                                //if (objSave.ValorOpcional.Length > 300)
                                //{
                                //    eventoPostFormulario(false, "");
                                //    return showMensajeNotifyData("Error", "El Campo no puede exceder los 300 caracteres", "ERROR", false);
                                //}
                                #endregion
                            }
                            else if (objSave.VacunaNinioFlag == "N")
                            {
                                // objSave = Prueba;
                                // objSave.VacunaNinioFlag = "N";
                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF012
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objSave.Accion == "NUEVO")
                                {
                                    objSave.FechaCreacion = DateTime.Now;
                                }
                                objSave.FechaModificacion = DateTime.Now;
                                #region LLenado_de_Entidades_Vacías
                                objSave.BCG_RN_flag = null;
                                objSave.BCG_NoRecuerda_flag = null;
                                objSave.HepatitisBRN_RN_flag = null;
                                objSave.HepatitisBRN_NoRecuerda_flag = null;
                                objSave.DPT_1era_flag = null;
                                objSave.DPT_2da_flag = null;
                                objSave.DPT_3era_flag = null;
                                objSave.DPT_3era_flag = null;
                                objSave.DPT_1erRef_flag = null;
                                objSave.DPT_2doRef_flag = null;
                                objSave.DPT_NoRecuerda_flag = null;
                                objSave.POLIO_1era_flag = null;
                                objSave.POLIO_2da_flag = null;
                                objSave.POLIO_3era_flag = null;
                                objSave.POLIO_1erRef_flag = null;
                                objSave.POLIO_NoRecuerda_flag = null;
                                objSave.HiB_1era_flag = null;
                                objSave.HiB_2da_flag = null;
                                objSave.HiB_3era_flag = null;
                                objSave.HiB_1erRef_flag = null;
                                objSave.HiB_NoRecuerda_flag = null;
                                objSave.HEPATITISA_1era_flag = null;
                                objSave.HEPATITISA_2da_flag = null;
                                objSave.HEPATITISB_3era_flag = null;
                                objSave.HEPATITISB_1erRef_flag = null;
                                objSave.HEPATITISB_NoRecuerda_flag = null;
                                objSave.ROTAVIRUS_1era_flag = null;
                                objSave.ROTAVIRUS_2da_flag = null;
                                objSave.ROTAVIRUS_3era_flag = null;
                                objSave.ROTAVIRUS_1erRef_flag = null;
                                objSave.ROTAVIRUS_NoRecuerda_flag = null;
                                objSave.SRP_1era_flag = null;
                                objSave.SRP_2da_flag = null;
                                objSave.SRP_NoRecuerda_flag = null;
                                objSave.VARICELA_1era_flag = null;
                                objSave.VARICELA_2da_flag = null;
                                objSave.VARICELA_NoRecuerda_flag = null;
                                objSave.HEPATITISA_1era_flag = null;
                                objSave.HEPATITISA_2da_flag = null;
                                objSave.HEPATITISA_NoRecuerda_flag = null;
                                objSave.NEUMOCOCO_1era_flag = null;
                                objSave.NEUMOCOCO_2da_flag = null;
                                objSave.NEUMOCOCO_3era_flag = null;
                                objSave.NEUMOCOCO_1erRef_flag = null;
                                objSave.NEUMOCOCO_NoRecuerda_flag = null;
                                objSave.INFLUENZA = null;
                                #endregion
                            }
                            /* if (check == true) 
                             {
                                 objSave.INFLUENZA = null;
                             }*/

                            registro = 1;
                            String mensage = "";
                            String cadenas = "";
                            String[] cadArray;
                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_AntecedentesPersonalesINDetalle_FE> dataDelete = null;
                                if (Session["DataInmunizacionesNinioDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_AntecedentesPersonalesINDetalle_FE>)Session["DataInmunizacionesNinioDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);
                                    }
                                }

                                // Bloque UPDATE Y INSERT
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));

                                if (objSave.VacunaNinioFlag == "S")
                                {
                                    var objInmunizacioneslDetalle = new SS_HC_AntecedentesPersonalesINDetalle_FE();
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objInmunizacioneslDetalle = new SS_HC_AntecedentesPersonalesINDetalle_FE();
                                        objInmunizacioneslDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objInmunizacioneslDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objInmunizacioneslDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objInmunizacioneslDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        objInmunizacioneslDetalle.Accion = objEntity.ACCION;
                                        objInmunizacioneslDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objInmunizacioneslDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                        if (objInmunizacioneslDetalle.Accion != "DETALLE")
                                        {
                                            objInmunizacioneslDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        objInmunizacioneslDetalle.FechaCreacion = DateTime.Now;
                                        objInmunizacioneslDetalle.FechaModificacion = DateTime.Now;
                                        objInmunizacioneslDetalle.OtrasVacunas = objEntity.ValorCodigo1.Trim();
                                        ObjDetalle.Add(objInmunizacioneslDetalle);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }
                                }
                            }

                            registro = SvcAntecedentesPersonalesINFEService.setMantenimiento(objSave, ObjDetalle);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                }
                return this.Direct();
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMensajeNotify("Excepción CCEPF012", ex.StackTrace, "ERROR");
                throw;
            }
        }


        #endregion

        #region CCEPF013_FORMULARIO
        //Antecedentes Personales - Inmunizaciones Adulto F13
        public System.Web.Mvc.ActionResult CCEPF013_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF013_View - Entrar");
                Session["DataInmunizacionesAdulDelete"] = null;
                Session["Check2"] = 0;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                SS_HC_AntecedentesPersonalesIAdul_FE LocalObj = null;
                var LocalEnty = new SS_HC_AntecedentesPersonalesIAdul_FE();
                var Listar = new List<SS_HC_AntecedentesPersonalesIAdul_FE>();
                var ListarAUX = new List<SS_HC_AntecedentesPersonalesIAdul_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcAntecedentesPersonalesIAdulFEService.listarEntidad(LocalEnty);


                String version = "CCEPF013";
                if (Listar.Count > 0)
                {
                    int contador = 0;

                    foreach (SS_HC_AntecedentesPersonalesIAdul_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcAntecedentesPersonalesIAdulFEService.listarEntidad(LocalEnty);

                    if (ListarAUX.Count > 0)
                    {
                        LocalEnty.Accion = "LISTAR";
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcAntecedentesPersonalesIAdulFEService.listarEntidad(LocalEnty);
                    }
                    if (Listar.Count > 0)
                    {
                        int contador = 0;

                        foreach (SS_HC_AntecedentesPersonalesIAdul_FE objEntity in Listar)
                        {

                            LocalEnty = objEntity;
                            LocalEnty.Version = version;
                            LocalEnty.Accion = "NUEVO";
                            hallado = true;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            }

                        }
                    }
                    if (!hallado)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            LocalEnty.Accion = "NUEVO";
                        }
                    }

                }

                ///////////////////////////////////////////////////////////////////////////////

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /*********contenedor 1************/
                if (LocalEnty.INFLUENZA == null)
                {
                    Session["Check13"] = 1;
                }
                else { Session["Check13"] = 0; }
                if (LocalEnty.Estado == 1)
                {
                    Session["Check132"] = 1;
                }
                if (LocalEnty.Estado == 0)
                {
                    Session["Check132"] = 0;
                }
                if (LocalEnty.Estado == null)
                {
                    Session["Check132"] = 0;
                }
                if (LocalEnty.VacunaNinioFlag == "N")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsVacuna");
                    var fsDos = this.GetCmp<FieldSet>("fsOtras");
                    fsUno.Hidden = true;
                    fsDos.Hidden = true;
                }
                else if (LocalEnty.VacunaNinioFlag == "S")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsVacuna");
                    var fsDos = this.GetCmp<FieldSet>("fsOtras");
                    fsUno.Hidden = false;
                    fsDos.Hidden = false;
                }

                return View("FormulariosExtras/CCEPF013_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF013_getGrillaInmunizacionesAdulto(string agente, string tipoagente, string codagente)
        {
            Log.Information("HClinicaController - CCEPF013_getGrillaInmunizacionesAdulto - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>();
            var LocalEnty = new SS_HC_AntecedentesPersonalesIAdulDetalle_FE();

            /* var ListarAUX = new List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>();*/

            var ListarAUX = new List<SS_HC_AntecedentesPersonalesIAdul_FE>(); /*MOD 30052017 OES*/

            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

            LocalEnty.Accion = "LISTAR";

            Listar = SvcAntecedentesPersonalesIAdulFEService.listarDetalle(LocalEnty, 0, 0);

            if (Listar.Count > 0)
            {
                int x = 0;
                //  int top = 0; Session["SEC_TOP_150"] = 0;
                foreach (SS_HC_AntecedentesPersonalesIAdulDetalle_FE intobj in Listar)
                {
                    Listar[x].Accion = "UPDATE";
                    x = x + 1;
                }
            }

            //foreach (var objData in Listar)
            //{
            //}
            //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
            if (Listar.Count < 1 /*&& (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"/* || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA"*//*)/*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
            {
                var LocalEntyTemp = new SS_HC_AntecedentesPersonalesIAdul_FE();

                LocalEntyTemp.Accion = "LISTARTOP";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEntyTemp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEntyTemp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEntyTemp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEntyTemp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                ListarAUX = SvcAntecedentesPersonalesIAdulFEService.listarEntidad(LocalEntyTemp);
                /*ListarAUX = SvcAntecedentesPersonalesIAdulFEService.listarDetalle(LocalEnty, 0, 0);*/

                if (ListarAUX.Count > 0)
                {
                    LocalEnty.Accion = "LISTAR";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    Listar = SvcAntecedentesPersonalesIAdulFEService.listarDetalle(LocalEnty, 0, 0);
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (SS_HC_AntecedentesPersonalesIAdulDetalle_FE intobj in Listar)
                    {
                        //obtemp = new SS_HC_Alergia_FE();
                        /* LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();*/

                        Listar[x].Accion = "NUEVO";
                        // LocalEnty.Add(obtemp);
                        x = x + 1;
                    }
                }
            }

            ///////////////////////////////////////////////////////////////////////////////



            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult CCEPF013add_DataDeleteInmunizacionesAdulto(String MODO, string codigo, string secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF013add_DataDeleteInmunizacionesAdulto - Entrar");

            List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE> dataDelete = null;
            if (Session["DataInmunizacionesAdulDelete"] != null)
            {
                dataDelete = (List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>)Session["DataInmunizacionesAdulDelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>();
            }
            SS_HC_AntecedentesPersonalesIAdulDetalle_FE objDelete = new SS_HC_AntecedentesPersonalesIAdulDetalle_FE();

            objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

            if (accion.Trim() != "NUEVO")
            {

                objDelete.Accion = MODO; //"DELETEDETALLE"
                objDelete.Secuencia = Convert.ToInt32(secuencia);


                dataDelete.Add(objDelete);
                Session["DataInmunizacionesAdulDelete"] = dataDelete;
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF013_Save_AntecedentesPersonalesIAdul(SS_HC_AntecedentesPersonalesIAdul_FE objSave, String selectionArray1, String text, String estado)
        {
            Log.Information("HClinicaController - CCEPF013_Save_AntecedentesPersonalesIAdul - Entrar");

            // TRABA (2016.10.12-06:16)
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            try
            {
                if (text == "0")
                {
                    Session["ValoresTemporal"] = selectionArray1;
                    ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                    Session["Estado_013"] = estado;
                }
                else
                {
                    valoreArray = (string)Session["ValoresTemporal"];
                    // TRANSACCIONALES
                    List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE> ObjDetalle = new List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>();

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            if (objSave.VacunaNinioFlag == null)
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Mensaje", "Por favor seleccionar: Vacuna en el Adulto", "ERROR", false);
                            }
                            else if (objSave.VacunaNinioFlag == "S")
                            {
                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF013
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objSave.Accion == "NUEVO") { objSave.FechaCreacion = DateTime.Now; }
                                objSave.FechaModificacion = DateTime.Now;
                                if (Session["Estado_013"] != null && getValorFiltroStr("" + Session["Estado_013"]) != null)
                                {
                                    objSave.Estado = Convert.ToInt32((string)Session["Estado_013"]);
                                }
                                //if (objSave.ValorOpcional.Length > 300)
                                //{

                                //    eventoPostFormulario(true, "");
                                //    return showMensajeNotifyData("Excepción", "Solo se admiten 300 Caracteres *INFLUENZA", "ERROR", false);
                                //}

                                #region Validacion_Checkbox_Vacios
                                if (
                                    (objSave.DPT_1era_flag == null || objSave.DPT_1era_flag == "N") &&
                                    (objSave.DPT_2da_flag == null || objSave.DPT_2da_flag == "N") &&
                                    (objSave.DPT_3era_flag == null || objSave.DPT_3era_flag == "N") &&
                                    (objSave.DPT_NoRecuerda_flag == null || objSave.DPT_NoRecuerda_flag == "N") &&
                                    (objSave.SRP_1era_flag == null || objSave.SRP_1era_flag == "N") &&
                                    (objSave.SRP_NoRecuerda_flag == null || objSave.SRP_NoRecuerda_flag == "N") &&
                                    (objSave.VARICELA_1era_flag == null || objSave.VARICELA_1era_flag == "N") &&
                                    (objSave.VARICELA_NoRecuerda_flag == null || objSave.VARICELA_NoRecuerda_flag == "N") &&
                                    (objSave.HEPATITISB_1era_flag == null || objSave.HEPATITISB_1era_flag == "N") &&
                                    (objSave.HEPATITISB_2da_flag == null || objSave.HEPATITISB_2da_flag == "N") &&
                                    (objSave.HEPATITISB_3era_flag == null || objSave.HEPATITISB_3era_flag == "N") &&
                                    (objSave.HEPATITISB_1erRef_flag == null || objSave.HEPATITISB_1erRef_flag == "N") &&
                                    (objSave.HEPATITISB_NoRecuerda_flag == null || objSave.HEPATITISB_NoRecuerda_flag == "N") &&
                                    (objSave.HEPATITISA_1era_flag == null || objSave.HEPATITISA_1era_flag == "N") &&
                                    (objSave.HEPATITISA_2da_flag == null || objSave.HEPATITISA_2da_flag == "N") &&
                                    (objSave.HEPATITISA_NoRecuerda_flag == null || objSave.HEPATITISA_NoRecuerda_flag == "N") &&
                                    (objSave.NEUMOCOCO_1era_flag == null || objSave.NEUMOCOCO_1era_flag == "N") &&
                                    (objSave.NEUMOCOCO_2da_flag == null || objSave.NEUMOCOCO_2da_flag == "N") &&
                                    (objSave.NEUMOCOCO_3era_flag == null || objSave.NEUMOCOCO_3era_flag == "N") &&
                                    (objSave.NEUMOCOCO_NoRecuerda_flag == null || objSave.NEUMOCOCO_NoRecuerda_flag == "N") &&
                                    (objSave.Antitetanica_1era_flag == null || objSave.Antitetanica_1era_flag == "N") &&
                                    (objSave.Antitetanica_2da_flag == null || objSave.Antitetanica_2da_flag == "N") &&
                                    (objSave.Antitetanica_3era_flag == null || objSave.Antitetanica_3era_flag == "N") &&
                                    (objSave.Antitetanica_NoRecuerda_flag == null || objSave.Antitetanica_NoRecuerda_flag == "N") &&
                                    (objSave.Papiloma_1era_flag == null || objSave.Papiloma_1era_flag == "N") &&
                                    (objSave.Papiloma_2da_flag == null || objSave.Papiloma_2da_flag == "N") &&
                                    (objSave.Papiloma_3era_flag == null || objSave.Papiloma_3era_flag == "N") &&
                                    (objSave.Papiloma_NoRecuerda_flag == null || objSave.Papiloma_NoRecuerda_flag == "N")
                                    )
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Mensaje", "Vacunas del Adulto: Por favor marcar al menos una opción", "ERROR", false);
                                }
                                #endregion
                                #region Validacion_Chekbox_NoRecuerda
                                if (objSave.DPT_NoRecuerda_flag == "S")
                                {
                                    objSave.DPT_1era_flag = null;
                                    objSave.DPT_2da_flag = null;
                                    objSave.DPT_3era_flag = null;
                                }
                                if (objSave.SRP_NoRecuerda_flag == "S") { objSave.SRP_1era_flag = null; }
                                if (objSave.VARICELA_NoRecuerda_flag == "S") { objSave.VARICELA_1era_flag = null; }
                                if (objSave.HEPATITISB_NoRecuerda_flag == "S")
                                {
                                    objSave.HEPATITISB_1era_flag = null;
                                    objSave.HEPATITISB_2da_flag = null;
                                    objSave.HEPATITISB_3era_flag = null;
                                    objSave.HEPATITISB_1erRef_flag = null;
                                }
                                if (objSave.HEPATITISA_NoRecuerda_flag == "S")
                                {
                                    objSave.HEPATITISA_1era_flag = null;
                                    objSave.HEPATITISA_2da_flag = null;
                                }
                                if (objSave.NEUMOCOCO_NoRecuerda_flag == "S")
                                {
                                    objSave.NEUMOCOCO_1era_flag = null;
                                    objSave.NEUMOCOCO_2da_flag = null;
                                    objSave.NEUMOCOCO_3era_flag = null;
                                }
                                if (objSave.Antitetanica_NoRecuerda_flag == "S")
                                {
                                    objSave.Antitetanica_1era_flag = null;
                                    objSave.Antitetanica_2da_flag = null;
                                    objSave.Antitetanica_3era_flag = null;
                                }
                                if (objSave.Papiloma_NoRecuerda_flag == "S")
                                {
                                    objSave.Papiloma_1era_flag = null;
                                    objSave.Papiloma_2da_flag = null;
                                    objSave.Papiloma_3era_flag = null;
                                }
                                #endregion

                            }
                            else if (objSave.VacunaNinioFlag == "N")
                            {
                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF013
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objSave.Accion == "NUEVO") { objSave.FechaCreacion = DateTime.Now; }
                                #region LLenado_EntidadesVacias
                                objSave.FechaModificacion = DateTime.Now;
                                objSave.DPT_1era_flag = null;
                                objSave.DPT_2da_flag = null;
                                objSave.DPT_3era_flag = null;
                                objSave.DPT_NoRecuerda_flag = null;
                                objSave.SRP_1era_flag = null;
                                objSave.SRP_NoRecuerda_flag = null;
                                objSave.VARICELA_1era_flag = null;
                                objSave.VARICELA_NoRecuerda_flag = null;
                                objSave.HEPATITISB_1era_flag = null;
                                objSave.HEPATITISB_2da_flag = null;
                                objSave.HEPATITISB_3era_flag = null;
                                objSave.HEPATITISB_1erRef_flag = null;
                                objSave.HEPATITISB_NoRecuerda_flag = null;
                                objSave.HEPATITISA_1era_flag = null;
                                objSave.HEPATITISA_2da_flag = null;
                                objSave.HEPATITISA_NoRecuerda_flag = null;
                                objSave.NEUMOCOCO_1era_flag = null;
                                objSave.NEUMOCOCO_2da_flag = null;
                                objSave.NEUMOCOCO_3era_flag = null;
                                objSave.NEUMOCOCO_NoRecuerda_flag = null;
                                objSave.Antitetanica_1era_flag = null;
                                objSave.Antitetanica_2da_flag = null;
                                objSave.Antitetanica_3era_flag = null;
                                objSave.Antitetanica_NoRecuerda_flag = null;
                                objSave.Papiloma_1era_flag = null;
                                objSave.Papiloma_2da_flag = null;
                                objSave.Papiloma_3era_flag = null;
                                objSave.INFLUENZA = null;

                                #endregion
                            }

                            registro = 1;
                            String mensage = "";
                            //String cadenas = "";
                            //String[] cadArray;

                            if (registro > 0)
                            {
                                var objInmunizacioneslDetalle = new SS_HC_AntecedentesPersonalesIAdulDetalle_FE();
                                if (!string.IsNullOrEmpty(valoreArray))
                                {
                                    if (valoreArray.Trim().Length > 2)
                                    {
                                        // Bloque UPDATE Y INSERT
                                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                    }
                                }

                                //BLOQUE DELETE
                                List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE> dataDelete = null;
                                if (Session["DataInmunizacionesAdulDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_AntecedentesPersonalesIAdulDetalle_FE>)Session["DataInmunizacionesAdulDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);
                                    }
                                }

                                //Guardar detalles
                                if (objSave.VacunaNinioFlag == "S")
                                {
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objInmunizacioneslDetalle = new SS_HC_AntecedentesPersonalesIAdulDetalle_FE();
                                        objInmunizacioneslDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objInmunizacioneslDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objInmunizacioneslDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objInmunizacioneslDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        objInmunizacioneslDetalle.Accion = objEntity.ACCION;
                                        objInmunizacioneslDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objInmunizacioneslDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objInmunizacioneslDetalle.FechaCreacion = DateTime.Now;
                                        objInmunizacioneslDetalle.FechaModificacion = DateTime.Now;
                                        if (objInmunizacioneslDetalle.Accion != "DETALLE")
                                        {
                                            objInmunizacioneslDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }
                                        objInmunizacioneslDetalle.OtrasVacunas = objEntity.ValorCodigo1.Trim();
                                        ObjDetalle.Add(objInmunizacioneslDetalle);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }
                                }
                            }
                            registro = SvcAntecedentesPersonalesIAdulFEService.setMantenimiento(objSave, ObjDetalle);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];
                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                }
                return this.Direct();
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMensajeNotify("Excepción CCEPF013", ex.StackTrace, "ERROR");
                throw;
            }
        }

        #endregion

        #region CCEPF014_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF014_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF014_View - Entrar");
                Session["DataSS_Antic_FamiliaresDelete"] = null;
                Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = null;
                Session["Data_SS_Antec_FamiliaresMainDelete_sec"] = null;
                Session["DataSS_Antec_FamiliaresMain"] = null;
                //  Session["DETALLE"] = null;
                ENTITY_GLOBAL.Instance.bitacora = 3;
                SS_HC_Anamnesis_AFAM_CAB_FE LocalObj = null;
                var LocalEnty = new SS_HC_Anamnesis_AFAM_CAB_FE();
                var Listar = new List<SS_HC_Anamnesis_AFAM_CAB_FE>();
                var ListarAUX = new List<SS_HC_Anamnesis_AFAM_CAB_FE>();


                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcAnamnesisAFFEService.listarEntidad(LocalEnty).ToList();

                ////////////
                bool hallado = false;
                LocalObj = null;

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_AFAM_CAB_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////

                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTAR";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcAnamnesisAFFEService.listarEntidadTOP(LocalEnty).ToList();

                    if (ListarAUX.Count > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcAnamnesisAFFEService.listarEntidad(LocalEnty).ToList();
                    }


                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_Anamnesis_AFAM_CAB_FE objEntity in Listar)
                        {
                            LocalEnty = objEntity;
                            LocalEnty.Accion = "NUEVO";
                            hallado = true;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                            {
                                LocalEnty.Accion = "VISTA";
                            }
                            else
                            {
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                                LocalEnty.Accion = "NUEVO";
                            }
                        }
                    }
                    if (!hallado)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                            LocalEnty.Accion = "NUEVO";
                        }
                    }
                }

                ///////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Anamnesis_AFAM_CAB_FE>)getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_ANTECEDENTES_FA, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Anamnesis_AFAM_CAB_FE> objListaAnt2 = (List<SS_HC_Anamnesis_AFAM_CAB_FE>)objetoGen;

                        if (objListaAnt2.Count > 0)
                        {
                            //SS_HC_Alergia_FE obtemp;
                            foreach (SS_HC_Anamnesis_AFAM_CAB_FE intobj in objListaAnt2)
                            {
                                //obtemp = new SS_HC_Alergia_FE();
                                LocalEnty.AntecedenteFami_flag = intobj.AntecedenteFami_flag.Trim();

                                if (hallado == true)
                                {
                                    LocalEnty.Accion = "NUEVO";
                                }

                                // LocalEnty.Add(obtemp);
                            }
                        }
                    }
                }
                ///////////////////////////////////////////////




                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                /*********contenedor 1************/





                if (LocalEnty.AntecedenteFami_flag == "N" || LocalEnty.AntecedenteFami_flag == null)
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = true;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = true;

                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = true;

                }
                else if (LocalEnty.AntecedenteFami_flag == "S")
                {
                    //var fsUno = this.GetCmp<FieldSet>("fsAlergia");
                    //fsUno.Hidden = false;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = false;

                    var cmdDos = this.GetCmp<FieldSet>("cmdAgregar");
                    cmdDos.Disabled = false;
                }


                if (LocalEnty.AntecedenteFami_flag == "N" || LocalEnty.AntecedenteFami_flag == "X")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsAnteFami");
                    fsUno.Hidden = true;


                }
                else if (LocalEnty.AntecedenteFami_flag == "S")
                {
                    var fsUno = this.GetCmp<FieldSet>("fsAnteFami");
                    fsUno.Hidden = false;


                }

                return View("FormulariosExtras/CCEPF014_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                //throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF014_ANTEC_FAMILIARES_MAIN()
        {
            Log.Information("HClinicaController - CCEPF014_ANTEC_FAMILIARES_MAIN - Entrar");
            var LocalEnty = new SS_HC_Anamnesis_AFAM_FE();
            var Listar = new List<SS_HC_Anamnesis_AFAM_FE>();
            /* var ListarAUX = new List<SS_HC_Anamnesis_AFAM_FE>();*/
            //////
            var LocalEntyTemp = new SS_HC_Anamnesis_AFAM_CAB_FE();

            var ListarAUX = new List<SS_HC_Anamnesis_AFAM_CAB_FE>();

            //////////////
            var ListarDet = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            var LocalEntyD = new MA_MiscelaneosDetalle();
            //////////////
            LocalEnty.Accion = "LISTAR";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            //Listar = SvcAnamnesisAFService.AnamnesisAFListar(LocalEnty).ToList();
            Listar = SvcAnamnesisAFFEService.AnamnesisAFListar(LocalEnty).ToList();

            ////////////
            if (Listar.Count > 0)
            {
                foreach (SS_HC_Anamnesis_AFAM_FE objEntity in Listar)
                {
                    objEntity.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        objEntity.Accion = "VISTA";
                    }
                }
            }
            //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
            if (Listar.Count < 1 && (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA") /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
            {
                LocalEntyTemp.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEntyTemp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEntyTemp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEntyTemp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEntyTemp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                ListarAUX = SvcAnamnesisAFFEService.listarEntidadTOP(LocalEntyTemp).ToList();
                /* ListarAUX = SvcAnamnesisAFFEService.AnamnesisAFListarTOP(LocalEnty).ToList();*/

                LocalEnty.Accion = "LISTAR";
                if (ListarAUX.Count > 0)
                {
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                        LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                    }
                    Listar = SvcAnamnesisAFFEService.AnamnesisAFListar(LocalEnty).ToList();

                    /**************************************/
                    LocalEntyD.ACCION = "ANTEC_FAMILIARES_ALT_FE_ANT";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEntyD.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEntyD.ValorCodigo2 = ListarAUX[0].EpisodioClinico.ToString().Trim();
                        LocalEntyD.ValorCodigo3 = ListarAUX[0].IdEpisodioAtencion.ToString().Trim();
                        LocalEntyD.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarDet = SvcMiscelaneos.GetUpListadoServicios(LocalEntyD).ToList();

                    if (ListarDet.Count > 0)
                    {
                        int x = 0;
                        foreach (var ALGO in ListarDet)
                        {
                            ListarDet[x].ACCION = "NUEVO";
                            x = x + 1;
                        }

                        ObjListar.AddRange(ListarDet);
                        Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = ObjListar;
                    }
                    /********************************************/


                }


                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Anamnesis_AFAM_FE objEntity in Listar)
                    {
                        objEntity.Accion = "NUEVO";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            objEntity.Accion = "VISTA";
                        }
                    }
                }


            }

            ///////////////////////////////////////////////////////////////////////////////
            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA
            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {
                object objetoGen = (List<SS_HC_Anamnesis_AFAM_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_1", Listar);



                if (objetoGen != null)
                {
                    List<SS_HC_Anamnesis_AFAM_FE> objListaAnt2 = (List<SS_HC_Anamnesis_AFAM_FE>)objetoGen;
                    /* Listar.AddRange(ListarCopy);*/
                    if (objListaAnt2.Count > 0)
                    {

                        // Listar = objListaAnt2;

                        foreach (SS_HC_Anamnesis_AFAM_FE intobj in objListaAnt2)
                        {
                            var obtemp = new SS_HC_Anamnesis_AFAM_FE();

                            obtemp = intobj;
                            //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();

                            obtemp.Accion = "NUEVO";
                            //obtemp.ValorCodigo1 = secuenciaFamilia;

                            ////
                            Session["secuenciaFamilia"] = obtemp.SecuenciaFamilia; //secuenciaFamilia;
                            object objetoGen2 = (List<MA_MiscelaneosDetalle>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_2", Listar);

                            List<MA_MiscelaneosDetalle> objListaAnt3 = (List<MA_MiscelaneosDetalle>)objetoGen2;

                            if (objListaAnt3.Count > 0)
                            {
                                //Listar = objListaAnt2;
                                var Listar5 = new List<MA_MiscelaneosDetalle>();
                                foreach (MA_MiscelaneosDetalle intobj2 in objListaAnt3)
                                {
                                    var obtemp2 = new MA_MiscelaneosDetalle();
                                    //var ArrayList = new Array(); 
                                    obtemp2 = intobj2;

                                    int indice = intobj2.ValorCodigo5.IndexOf("|");
                                    int longitud = intobj2.ValorCodigo5.Length;
                                    int longitud2 = longitud - indice;

                                    obtemp2.ValorCodigo2 = intobj2.ValorCodigo5.Substring(0, indice);
                                    obtemp2.ValorCodigo5 = intobj2.ValorCodigo5.Substring(indice, longitud2);
                                    //string prueba = intobj2.ValorCodigo2.Substring(indice, longitud);
                                    // string[,] myArray3 = new string[4, 2];
                                    obtemp2.ACCION = "NUEVO";
                                    Listar5.Add(obtemp2);
                                }
                                //
                                //obtemp.ValorCodigo1 = secuenciaFamilia;

                                CCEPF014_addDataUpdate_Antic_FamiliaresAlt("UPDATEDETALLE", Newtonsoft.Json.JsonConvert.SerializeObject(Listar5), 2);
                                // Listar.Add(obtemp);

                                //


                                //  ObjListar.AddRange(Listar);
                                //   Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = ObjListar;
                            }

                            // }




                            /////
                            Listar.Add(obtemp);
                        }
                    }

                }
                Session["COPIA_FORMULARIO"] = "INACTIVA";

            }

            ///////////////////////////////////////////////



            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult CCEPF014_ANTEC_FAMILIARES(String secuenciaFamilia)
        {
            Log.Information("HClinicaController - CCEPF014_ANTEC_FAMILIARES - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var ListarAUX = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ListarShow = new List<MA_MiscelaneosDetalle>();
            LocalEnty.ACCION = "ANTEC_FAMILIARES_ALT_FE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            //
            LocalEnty.ValorNumerico = Convert.ToDouble(getValorFiltroInt(secuenciaFamilia != null ? secuenciaFamilia : "0"));
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            if (Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] != null)
            {
                ObjListar = (List<MA_MiscelaneosDetalle>)Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"];
                if (ObjListar.Count > 0)
                {
                    foreach (var result in ObjListar)
                    {
                        if (("" + result.ValorEntero5) == secuenciaFamilia)
                        {
                            /* result.ACCION = "UPDATEDETALLE";*/
                            ListarShow.Add(result);
                        }
                    }
                }

            }
            if (ListarShow.Count == 0)
            {
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    var x = 0;
                    foreach (var xy in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";
                        x = x + 1;
                    }

                    ObjListar.AddRange(Listar);
                    Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = ObjListar;
                }
            }
            else
            {
                Listar.AddRange(ListarShow);
            }


            //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
            /*
            if (Listar.Count < 1 )
            {
                LocalEnty.ACCION = "ANTEC_FAMILIARES_ALT_FE_TOP";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = (ENTITY_GLOBAL.Instance.EpisodioAtencion).ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                ListarAUX = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (ListarAUX.Count > 0)
                {

                    LocalEnty.ACCION = "ANTEC_FAMILIARES_ALT_FE";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ListarAUX[0].ValorEntero2.ToString().Trim();
                        LocalEnty.ValorCodigo3 = (ListarAUX[0].ValorEntero3).ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }




                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var ALGO in Listar)
                    {
                        Listar[x].ACCION = "NUEVO";
                        x = x + 1;
                    }

                    ObjListar.AddRange(Listar);
                    Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = ObjListar;
                }
            }
            */
            ///////////////////////////////////////////////////////////////////////////////





            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA
            /* if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
             {
                 Session["secuenciaFamilia"] = secuenciaFamilia;
                 object objetoGen = (List<MA_MiscelaneosDetalle>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                 UTILES_MENSAJES.FORM_ANTECEDENTES_FA + "_2", Listar);
                 if (objetoGen != null)
                 {
                     List<MA_MiscelaneosDetalle> objListaAnt2 = (List<MA_MiscelaneosDetalle>)objetoGen;
                     //** Listar.AddRange(ListarCopy);
                     if (objListaAnt2.Count > 0)
                     {
                         //Listar = objListaAnt2;
                         foreach (MA_MiscelaneosDetalle intobj in objListaAnt2)
                         {
                             var obtemp = new MA_MiscelaneosDetalle();

                             obtemp = intobj;
                             //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();

                             obtemp.ACCION = "NUEVO";
                             //obtemp.ValorCodigo1 = secuenciaFamilia;

                           
                             Listar.Add(obtemp);
                         }
                         //CCEPF014_addDataUpdate_Antic_FamiliaresAlt("UPDATEDETALLE", Newtonsoft.Json.JsonConvert.SerializeObject(Listar), 2);


                         ObjListar.AddRange(Listar);
                         Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = ObjListar;
                     }

                 }
                 //Session["COPIA_FORMULARIO"] = "INACTIVA";
                 ENTITY_GLOBAL.Instance.DETALLE_INT = 1;
             }*/
            //if (Tipo == "RE")
            // {
            //    
            // }
            ///////////////////////////////////////////////


            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult CCEPF014_Save_Antic_FamiliaresAlt(SS_HC_Anamnesis_AFAM_FE objAnamEA, String selectionArray0, String selection, String selectionMain, String text, SS_HC_Anamnesis_AFAM_CAB_FE objAFCabecera)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF014_Save_Antic_FamiliaresAlt - Entrar");

                String[] cadArray;
                String valoreArray0;
                String mensaje = "";
                String mensage = "";
                String cadenas = "";
                long IdEpisodioAtencionID = -1;
                SS_HC_Anamnesis_AFAM_Enfermedad_FE objEnt;
                //SS_HC_Anamnesis_AFAM_CAB_FE objcabecera
                List<SS_HC_Anamnesis_AFAM_FE> ObjListarMain = null;
                List<MA_MiscelaneosDetalle> ObjListar = null;
                List<SS_HC_Anamnesis_AFAM_CAB_FE> ObjListar1;
                SS_HC_Anamnesis_AFAM_CAB_FE ObjCab = new SS_HC_Anamnesis_AFAM_CAB_FE();

                Session["ValoresTemporal0"] = selectionArray0;
                valoreArray0 = (string)Session["ValoresTemporal0"];
                // TRANSACCIONALES
                List<SS_HC_Anamnesis_AFAM_FE> ObjCabecera = new List<SS_HC_Anamnesis_AFAM_FE>();
                List<SS_HC_Anamnesis_AFAM_CAB_FE> ObjCabecera2 = new List<SS_HC_Anamnesis_AFAM_CAB_FE>();

                List<SS_HC_Anamnesis_AFAM_Enfermedad_FE> ObjDetalle = new List<SS_HC_Anamnesis_AFAM_Enfermedad_FE>();

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == null)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione Episodio Clínico... ").Show();
                }
                else
                {

                    if (text == "I")
                    {
                        CCEPF014_addDataUpdate_Antic_FamiliaresAlt("UPDATEDETALLE", selection, 1);

                        //    Session["DataSS_Antec_FamiliaresMain"] = null;
                        if (selectionMain != "[]")
                        {
                            ObjListarMain = (List<SS_HC_Anamnesis_AFAM_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionMain, typeof(List<SS_HC_Anamnesis_AFAM_FE>));
                            Session["DataSS_Antec_FamiliaresMain"] = ObjListarMain; //Detalle
                        }
                        ////////////
                    }

                    //** CABECERRA                        
                    //if (objAFCabecera != null)
                    //{
                    //    objAFCabecera.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    //    objAFCabecera.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //    objAFCabecera.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    //    objAFCabecera.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    //    objAFCabecera.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    //    objAFCabecera.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    //    objAFCabecera.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    //    objAFCabecera.Version = "CCEPF014";
                    //    if (objAFCabecera.Accion == "NUEVO")
                    //    {
                    //        objAFCabecera.FechaCreacion = DateTime.Now;
                    //    }
                    //    objAFCabecera.FechaModificacion = DateTime.Now;

                    //}
                    int registro = -1;
                    if (valoreArray0 != null)
                    {
                        ObjListar1 = (List<SS_HC_Anamnesis_AFAM_CAB_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray0, typeof(List<SS_HC_Anamnesis_AFAM_CAB_FE>));
                        foreach (SS_HC_Anamnesis_AFAM_CAB_FE objEntity in ObjListar1)
                        {

                            if (ObjListar1[0].AntecedenteFami_flag == "S" && selectionMain == "[]")
                            {

                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Mensaje", "Debe Ingresar Datos a la Grilla.", "ERROR", false);

                            }

                            ObjCab = new SS_HC_Anamnesis_AFAM_CAB_FE();
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") ObjCab.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                            objAFCabecera.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objAFCabecera.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAFCabecera.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAFCabecera.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objAFCabecera.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objAFCabecera.Version = "CCEPF014";
                            objAFCabecera.AntecedenteFami_flag = objEntity.AntecedenteFami_flag;

                            objAFCabecera.UsuarioCreacion = objEntity.UsuarioCreacion;

                            if (objEntity.Version != "")
                            {
                                objAFCabecera.FechaCreacion = Convert.ToDateTime(objEntity.Version);
                            }

                            if (objAFCabecera.Accion == "NUEVO")
                            {
                                objAFCabecera.Estado = 2;
                                objAFCabecera.FechaCreacion = DateTime.Now;
                                objAFCabecera.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }

                            else
                            {
                                objAFCabecera.FechaModificacion = DateTime.Now;
                                objAFCabecera.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            // objExamSol.(ObjCab);

                            //   ObjCabecera2.Add(objAFCabecera);

                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }
                    }

                    ////////////
                    objAnamEA = new SS_HC_Anamnesis_AFAM_FE();

                    if (objAFCabecera.AntecedenteFami_flag == null)
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción Si tiene antecendes familiares", "ERROR", false);
                    }
                    if (objAFCabecera.AntecedenteFami_flag.Length == 0)
                    {
                        eventoPostFormulario(true, "");
                        return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción Si tiene antecendes familiares", "ERROR", false);
                    }
                    if (objAFCabecera.AntecedenteFami_flag == "N" || objAFCabecera.AntecedenteFami_flag == "X")
                    {
                        IdEpisodioAtencionID = SvcAnamnesisAFFEService.setMantAnamnesisAF(objAFCabecera, objAnamEA, ObjCabecera, ObjDetalle);
                    }

                    else
                    {
                        //if (Session["DataSS_Antec_FamiliaresMain"] == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Mensaje", "No se ha insertado datos en tipo de parentesco", "ERROR", false);
                        //}
                        //BLOQUE MAIN

                        if (Session["DataSS_Antec_FamiliaresMain"] != null || Session["Data_SS_Antec_FamiliaresMainDelete_sec"] != null)
                        {
                            if (objAFCabecera.AntecedenteFami_flag == "S")
                            {
                                // objAFCabecera.AntecedenteFami_flag = "S";
                                if (Session["DataSS_Antec_FamiliaresMain"] != null)
                                {
                                    ObjListarMain = (List<SS_HC_Anamnesis_AFAM_FE>)Session["DataSS_Antec_FamiliaresMain"];
                                    foreach (SS_HC_Anamnesis_AFAM_FE objMain in ObjListarMain)
                                    {
                                        //VALIDACION
                                        // if (objMain.IdTipoParentesco == 0)
                                        // {
                                        //     eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", "Por favor Seleccione: El tipo de Parentesco", "ERROR", false);
                                        // }
                                        //if (objMain.Edad < 1 || objMain.Edad >= 1000)
                                        //{
                                        //    eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", "Por favor ingresar: La Edad, debe ser mayor a Cero, y de máximo 3 cifras.", "ERROR", false);
                                        //}
                                        //if (objMain.IdVivo != 57 && objMain.IdVivo != 58)
                                        //{
                                        //    eventoPostFormulario(true, "");
                                        //    return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción: Está vivo.", "ERROR", false);
                                        //}

                                        if (objMain.flagDiabetes.Length == 0)
                                        {
                                            Session["DataSS_Antec_FamiliaresMain"] = null;//angel 2019/03/27
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "Debe Ingresar -Tipo Parentesco", "ERROR", false);
                                            //return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción: Está vivo.", "ERROR", false);
                                        }

                                        if (objMain.flagDiabetes.Length > 100)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "El Campo Tipo Parentesco No Puede Exceder Los 100 Caracteres", "ERROR", false);
                                            //return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción: Está vivo.", "ERROR", false);
                                        }
                                        if (objMain.ObsDiabetes.Length > 200)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "El Campo Observacion No Puede Exceder Los 200 Caracteres", "ERROR", false);
                                            //return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción: Está vivo.", "ERROR", false);
                                        }

                                        int secAux = 0;
                                        if (objMain.Accion == "NUEVO")
                                        {
                                            objMain.FechaCreacion = DateTime.Now;
                                            objMain.Estado = 2;
                                        }
                                        objMain.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objMain.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objMain.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objMain.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        objMain.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objMain.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        objMain.FechaModificacion = DateTime.Now;
                                        ObjCabecera.Add(objMain);
                                    }
                                }
                                //else
                                //{
                                //    eventoPostFormulario(false, "");
                                //    return showMensajeNotifyData("Mensaje", "No se ha insertado datos en tipo de parentesco", "ERROR", false);
                                //}

                            }
                            else
                            {
                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Mensaje", "Por favor Seleccione una opción Si tiene antecendes familiares", "ERROR", false);
                            }

                            objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            //BLOQUE MAIN - DELETE
                            List<SS_HC_Anamnesis_AFAM_FE> dataDeleteMain = null;
                            if (Session["Data_SS_Antec_FamiliaresMainDelete_sec"] != null)
                            {
                                dataDeleteMain = (List<SS_HC_Anamnesis_AFAM_FE>)Session["Data_SS_Antec_FamiliaresMainDelete_sec"];
                            }
                            // BORRAR  - MAIN
                            if (dataDeleteMain != null)
                            {
                                foreach (var objDel in dataDeleteMain)
                                {

                                    ObjCabecera.Add(objDel);
                                }
                            }

                            /**********************************************************************/
                            //BLOQUE DELETE
                            List<SS_HC_Anamnesis_AFAM_Enfermedad_FE> dataDelete = new List<SS_HC_Anamnesis_AFAM_Enfermedad_FE>();
                            if (Session["DataSS_Antic_FamiliaresDelete"] != null)
                            {
                                dataDelete = (List<SS_HC_Anamnesis_AFAM_Enfermedad_FE>)Session["DataSS_Antic_FamiliaresDelete"];
                            }


                            //BLOQUE DETALLE
                            if (Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] != null)
                            {
                                ObjListar = (List<MA_MiscelaneosDetalle>)Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"];
                                if (ObjListar.Count > 0)
                                {
                                    if (ObjListar[0].ValorCodigo2.Trim().Length > 0)
                                    {
                                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                        {
                                            objEnt = new SS_HC_Anamnesis_AFAM_Enfermedad_FE();
                                            objEnt.Accion = objEntity.ACCION;// "DETALLE";
                                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                            cadArray = objEntity.ValorCodigo5.Trim().Split('|');
                                            cadenas = cadArray[1].Replace("[", "");
                                            cadenas = cadenas.Replace("]", "").Trim();
                                            objEnt.IdDiagnostico = Convert.ToInt32(cadenas);
                                            objEnt.Observaciones = objEntity.ValorCodigo3.Trim();
                                            objEnt.SecuenciaFamilia = Convert.ToInt32(objEntity.ValorEntero5);
                                            if ((objEntity.ACCION.Trim() + "") == "NUEVO")
                                            {
                                                objEnt.Accion = "DETALLE";
                                            }
                                            if ((objEntity.ACCION.Trim() + "") != "DETALLE")
                                            {
                                                objEnt.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                            }
                                            ObjDetalle.Add(objEnt);
                                        }
                                    }
                                }
                            }

                            // BORRAR DETALLE
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);
                                }
                            }
                        }

                        IdEpisodioAtencionID = SvcAnamnesisAFFEService.setMantAnamnesisAF(objAFCabecera, objAnamEA, ObjCabecera, ObjDetalle);
                    }
                    if (IdEpisodioAtencionID > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = (int)IdEpisodioAtencionID;
                        mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                        UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                        Session["DataSS_Antec_FamiliaresMain"] = null;
                        Session["Data_SS_Antec_FamiliaresMainDelete_sec"] = null;
                        Session["DataSS_Antic_FamiliaresDelete"] = null;
                        Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = null;
                        eventoPostFormulario(true, "");

                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                        {
                            string containertemp = (string)Session["containerIdTemp"];
                            string txttemp = (string)Session["textTemp"];
                            LoadFormatos(containertemp, txttemp);
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                    }
                    //else
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                    //}


                }
                return this.Direct();
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMensajeNotify("Excepción CCEPF014", ex.StackTrace, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF014_addEliminar_Antic_FamiliaresMainAlt(String MODO, String secuenciaFamilia, string accion)
        {
            Log.Information("HClinicaController - CCEPF014_addEliminar_Antic_FamiliaresMainAlt - Entrar");
            List<SS_HC_Anamnesis_AFAM_FE> dataDelete = null;
            if ((secuenciaFamilia + "").Length > 0)
            {
                if (Session["Data_SS_Antec_FamiliaresMainDelete_sec"] != null)
                {
                    dataDelete = (List<SS_HC_Anamnesis_AFAM_FE>)Session["Data_SS_Antec_FamiliaresMainDelete_sec"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Anamnesis_AFAM_FE>();
                }
                SS_HC_Anamnesis_AFAM_FE objDelete = new SS_HC_Anamnesis_AFAM_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    string cadenas = secuenciaFamilia;
                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.SecuenciaFamilia = Convert.ToInt32(cadenas);
                        objDelete.Accion = "DELETE";
                        dataDelete.Add(objDelete);
                        Session["Data_SS_Antec_FamiliaresMainDelete_sec"] = dataDelete;
                    }
                    //UPDATE DETALLE ENERMEDAD                    
                    List<MA_MiscelaneosDetalle> objLista = null;
                    objLista = (List<MA_MiscelaneosDetalle>)Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"];
                    if (objLista != null)
                    {
                        foreach (var result in objLista)
                        {
                            if (result.ACCION != "DELETEDETALLE")
                            {
                                if (("" + result.ValorEntero5) == ("" + objDelete.SecuenciaFamilia))
                                {
                                    if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                    {
                                        result.ACCION = "DELETEDETALLE";
                                    }
                                }
                            }
                        }
                        if (objLista.Count > 0)
                        {
                            Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = objLista;
                        }
                    }

                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public bool CCEPF014_addDataUpdate_Antic_FamiliaresAlt(string MODO, String data, int tipo)
        {
            Log.Information("HClinicaController - CCEPF014_addDataUpdate_Antic_FamiliaresAlt - Entrar");
            if (data != null)
            {
                List<MA_MiscelaneosDetalle> objLista = null;
                List<MA_MiscelaneosDetalle> ObjListarUpdateNew = new List<MA_MiscelaneosDetalle>();
                List<MA_MiscelaneosDetalle> ObjListarUpdate = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));
                objLista = (List<MA_MiscelaneosDetalle>)Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"];
                if (tipo == 1)//UPDATE
                {
                    if (objLista == null)
                    {
                        objLista = ObjListarUpdate;
                    }
                    else if (objLista != null && ObjListarUpdate != null)
                    {
                        foreach (var result in objLista)
                        {
                            bool hallado = false;
                            if (result.ACCION != "DELETEDETALLE")
                            {
                                foreach (var resultUpd in ObjListarUpdate)
                                {
                                    if (result.ValorEntero5 == resultUpd.ValorEntero5
                                        && result.CodigoElemento == resultUpd.CodigoElemento)//AUX SEC FAMILIA)//AUX SEC FAMILIA
                                    {
                                        result.CodigoElemento = resultUpd.CodigoElemento;
                                        result.ValorCodigo2 = resultUpd.ValorCodigo2;
                                        result.ValorCodigo3 = resultUpd.ValorCodigo3;
                                        result.ValorEntero5 = resultUpd.ValorEntero5;
                                        if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                        {
                                            result.ACCION = MODO;
                                        }
                                        hallado = true;
                                        break;
                                    }
                                }
                                ///

                            }
                        }
                    }
                }
                else if (tipo == 2)//UPDATE
                {
                    if (objLista == null)
                    {
                        objLista = new List<MA_MiscelaneosDetalle>();
                    }
                    if (ObjListarUpdate.Count > 0)
                    {
                        objLista.AddRange(ObjListarUpdate);
                    }
                }
                //TERMINAR
                if (ObjListarUpdate.Count > 0)
                {
                    Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = objLista;
                }
                //objUpd.GetAll();
            }

            return true;
        }
        public System.Web.Mvc.ActionResult CCEPF014_addEliminar_Antic_FamiliaresAlt(String MODO, String codigo,
            String secuencia, String secuenciaFam, int tipo, string accion)
        {
            Log.Information("HClinicaController - CCEPF014_addEliminar_Antic_FamiliaresAlt - Entrar");
            List<SS_HC_Anamnesis_AFAM_Enfermedad> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                Nullable<int> SecFamilia = getValorFiltroInt(secuenciaFam);
                List<MA_MiscelaneosDetalle> objLista = null;
                if (tipo == 1)
                {
                    objLista = (List<MA_MiscelaneosDetalle>)Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"];
                }
                if (objLista != null)
                {
                    foreach (MA_MiscelaneosDetalle result in objLista)
                    {
                        if (result.ACCION != "DELETEDETALLE")
                        {
                            if (result.ValorEntero5 == SecFamilia
                                && result.CodigoElemento == secuencia)//AUX SEC FAMILIA
                            {
                                try
                                {
                                    if (result.ACCION != "DETALLE" && result.ACCION != "NUEVO")
                                    {
                                        result.ACCION = MODO;
                                    }
                                    if (accion == "NUEVO")
                                    {
                                        objLista.Remove(result);
                                    }
                                }
                                catch (Exception ee)
                                {
                                    Log.Error(ee, ee.Message);
                                }
                                break;
                            }
                        }
                    }
                    if (objLista.Count > 0)
                    {
                        Session["DATA_SS_HC_Anamnesis_AFAM_Enfermedad_Sec"] = objLista;
                    }
                }
            }
            return this.Direct();
        }

        #endregion

        #region CCEPF015_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF015_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF015_View - Entrar");
                SS_HC_ValoracionFuncionalAM_FE LocalObj = null;
                var LocalEnty = new SS_HC_ValoracionFuncionalAM_FE();
                var Listar = new List<SS_HC_ValoracionFuncionalAM_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }


                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcValoracionFuncionalAMFE.listarEntidad(LocalEnty);


                bool hallado = false;
                if (Listar.Count > 0)
                {
                    int contador = 0;

                    foreach (SS_HC_ValoracionFuncionalAM_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;

                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }


                    }
                }



                LocalEnty.Version = "CCEPF015";


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF015_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF015_Save_ValoracionFuncionalAM(SS_HC_ValoracionFuncionalAM_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF015_Save_ValoracionFuncionalAM - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave.Lavarse == null)
                    {

                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Lavarse", "ERROR", false);

                    }
                    else if (objSave.Vestirse == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Vestirse", "ERROR", false);

                    }
                    else if (objSave.UsoServHigienico == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Uso Serv.Higienico", "ERROR", false);

                    }
                    else if (objSave.Movilizarse == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Movilizarse", "ERROR", false);

                    }
                    else if (objSave.Continencia == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Continencia", "ERROR", false);

                    }
                    else if (objSave.Alimentarse == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Alimentarse", "ERROR", false);

                    }
                    else
                    {


                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;
                            string mensage = "";

                            int valoracion = 0;
                            int ValorP1 = 0;
                            int ValorP2 = 0;
                            int ValorP3 = 0;
                            int ValorP4 = 0;
                            int ValorP5 = 0;
                            int ValorP6 = 0;

                            if (objSave.Lavarse == "D") ValorP1 = 1;
                            else ValorP1 = 0;
                            if (objSave.Vestirse == "D") ValorP2 = 1;
                            else ValorP2 = 0;
                            if (objSave.UsoServHigienico == "D") ValorP3 = 1;
                            else ValorP3 = 0;
                            if (objSave.Movilizarse == "D") ValorP4 = 1;
                            else ValorP4 = 0;
                            if (objSave.Continencia == "D") ValorP5 = 1;
                            else ValorP5 = 0;
                            if (objSave.Alimentarse == "D") ValorP6 = 1;
                            else ValorP6 = 0;

                            valoracion = ValorP1 + ValorP2 + ValorP3 + ValorP4 + ValorP5 + ValorP6;

                            //X.Msg.Alert("CCEPF015_Save_ValoracionFuncionalAM", valoracion).Show();


                            if (valoracion == 0)
                            {
                                objSave.DiagnosticoFuncional = "I";
                            }
                            if (valoracion >= 1 && valoracion <= 5)
                            {
                                objSave.DiagnosticoFuncional = "DP";

                            }
                            if (valoracion == 6)
                            {
                                objSave.DiagnosticoFuncional = "DT";
                            }


                            registro = SvcValoracionFuncionalAMFE.setMantenimiento(objSave);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }


        #endregion

        #region CCEPF016_FORMULARIO
        //Valoración Mental del Adulto Mayor
        public System.Web.Mvc.ActionResult CCEPF016_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF016_View - Entrar");
                SS_HC_ValoracionMentalAM_FE LocalObj = null;
                var LocalEnty = new SS_HC_ValoracionMentalAM_FE();
                var Listar = new List<SS_HC_ValoracionMentalAM_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }


                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcValoracionMentalAMFEService.listarEntidad(LocalEnty);

                bool hallado = false;
                String version = "CCEPF016";
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_ValoracionMentalAM_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }


                    }
                }


                LocalEnty.Version = version;

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF016_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF016_Save_ValoracionMentalAM(SS_HC_ValoracionMentalAM_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF016_Save_ValoracionMentalAM - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF016
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";


                        //ValorCognitiva
                        var valoracion = 0;
                        var valpreg1 = 0;
                        var valpreg2 = 0;
                        var valpreg3 = 0;
                        var valpreg4 = 0;
                        var valpreg5 = 0;
                        var valpreg6 = 0;
                        var valpreg7 = 0;
                        var valpreg8 = 0;
                        var valpreg9 = 0;
                        var valpreg10 = 0;

                        if (Convert.ToInt32(objSave.Cualfecha) == 1) { valpreg1 = 1; } else { valpreg1 = 0; };
                        if (Convert.ToInt32(objSave.QueDiasemana) == 1) { valpreg2 = 1; } else { valpreg2 = 0; };
                        if (Convert.ToInt32(objSave.EnquelugarEstamos) == 1) { valpreg3 = 1; } else { valpreg3 = 0; };
                        if (Convert.ToInt32(objSave.CualNumerotelefono) == 1) { valpreg4 = 1; } else { valpreg4 = 0; };
                        if (Convert.ToInt32(objSave.CuantosAniostiene) == 1) { valpreg5 = 1; } else { valpreg5 = 0; };
                        if (Convert.ToInt32(objSave.DondeNacio) == 1) { valpreg6 = 1; } else { valpreg6 = 0; };
                        if (Convert.ToInt32(objSave.NombrePresidente) == 1) { valpreg7 = 1; } else { valpreg7 = 0; };
                        if (Convert.ToInt32(objSave.NombrePresidenteAnterior) == 1) { valpreg8 = 1; } else { valpreg8 = 0; };
                        if (Convert.ToInt32(objSave.ApellidoMadre) == 1) { valpreg9 = 1; } else { valpreg9 = 0; };
                        if (Convert.ToInt32(objSave.Restar) == 1) { valpreg10 = 1; } else { valpreg10 = 0; };

                        valoracion = valpreg1 + valpreg2 + valpreg3 + valpreg4 + valpreg5 + valpreg6 + valpreg7 + valpreg8 + valpreg9 + valpreg10;
                        if (valoracion <= 2)
                        {
                            objSave.ValorCognitiva = "N";
                        }
                        if (valoracion >= 3 && valoracion <= 4)
                        {
                            objSave.ValorCognitiva = "DCL";
                        }
                        if (valoracion >= 5 && valoracion <= 7)
                        {
                            objSave.ValorCognitiva = "DCM";
                        }
                        if (valoracion >= 8 && valoracion <= 10)
                        {
                            objSave.ValorCognitiva = "DCS";

                        }

                        //EstadoAfectivo
                        var valoracionDepre = 0;
                        var valpregDepre1 = 0;
                        var valpregDepre2 = 0;
                        var valpregDepre3 = 0;
                        var valpregDepre4 = 0;

                        if (Convert.ToInt32(objSave.Satisfecho) == 57) { valpregDepre1 = 1; }
                        else if (Convert.ToInt32(objSave.Satisfecho) == 58) { valpregDepre1 = 0; }
                        else
                        {
                            //eventoPostFormulario(true, ""); 
                            return showMensajeNotifyData("Error", "Seleccione una opción SI o NO en la pregunta ¿Está satisfecho con su vida?", "ERROR", false);
                        };

                        if (Convert.ToInt32(objSave.Impotente) == 57) { valpregDepre2 = 1; }
                        else if (Convert.ToInt32(objSave.Impotente) == 58) { valpregDepre2 = 0; }
                        else
                        {
                            //eventoPostFormulario(true, ""); 
                            return showMensajeNotifyData("Error", "Seleccione una opción SI o NO en la pregunta ¿Se siente impotente o indefenso?", "ERROR", false);
                        };

                        if (Convert.ToInt32(objSave.Memoria) == 57) { valpregDepre3 = 1; }
                        else if (Convert.ToInt32(objSave.Memoria) == 58) { valpregDepre3 = 0; }
                        else
                        {
                            //eventoPostFormulario(true, ""); 
                            return showMensajeNotifyData("Error", "Seleccione una opción SI o NO en la pregunta ¿Tiene problemas de memoria?", "ERROR", false);
                        };

                        if (Convert.ToInt32(objSave.desgano) == 57) { valpregDepre4 = 1; }
                        else if (Convert.ToInt32(objSave.desgano) == 58) { valpregDepre4 = 0; }
                        else
                        {
                            //eventoPostFormulario(true, ""); 
                            return showMensajeNotifyData("Error", "Seleccione una opción SI o NO en la pregunta ¿Siente desgano respecto a la actividades e intereses?", "ERROR", false);
                        };


                        valoracionDepre = valpregDepre1 + valpregDepre2 + valpregDepre3 + valpregDepre4;

                        if (valoracionDepre <= 1)
                        {
                            objSave.EstadoAfectivo = "N";
                        }
                        if (valoracionDepre >= 2)
                        {
                            objSave.EstadoAfectivo = "S";
                        }




                        registro = SvcValoracionMentalAMFEService.setMantenimiento(objSave);


                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");

                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF017_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF017_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF017_View - Entrar");
                SS_HC_ValoracionSocioFamAM_FE LocalObj = null;
                var LocalEnty = new SS_HC_ValoracionSocioFamAM_FE();
                var Listar = new List<SS_HC_ValoracionSocioFamAM_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcValoracionSocioFamAMFEService.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {
                    int contador = 0;

                    foreach (SS_HC_ValoracionSocioFamAM_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;

                    }
                }



                LocalEnty.Version = "CCEPF017"; //AUX PARA MOSTRAR PREVIOS

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF017_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF017_Save_ValoracionAM(SS_HC_ValoracionSocioFamAM_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF017_Save_ValoracionAM - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave.SituacionSocial == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Situación Familiar", "ERROR", false);
                    }
                    else if (objSave.SituacionEconomica == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Situación Económica", "ERROR", false);
                    }
                    else if (objSave.Vivienda == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Vivienda", "ERROR", false);
                    }
                    else if (objSave.RelacionesSociales == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Relaciones Sociales", "ERROR", false);
                    }
                    else if (objSave.ApoyoRedSocial == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar el campo Apoyo RedSocial", "ERROR", false);
                    }
                    else
                    {

                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;
                            string mensage = "";

                            int valoracion = 0;

                            valoracion = Convert.ToInt32(objSave.SituacionSocial) + Convert.ToInt32(objSave.SituacionEconomica) + Convert.ToInt32(objSave.Vivienda) + Convert.ToInt32(objSave.RelacionesSociales) + Convert.ToInt32(objSave.ApoyoRedSocial);

                            if (valoracion >= 5 && valoracion <= 9)
                            {
                                objSave.Valoracion = "1";

                            }
                            if (valoracion >= 10 && valoracion <= 14)
                            {
                                objSave.Valoracion = "2";

                            }
                            if (valoracion > 15)
                            {
                                objSave.Valoracion = "3";
                            }


                            registro = SvcValoracionSocioFamAMFEService.setMantenimiento(objSave);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF018_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF018_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF018_View - Entrar");
                SS_HC_ValoracionAM_FE LocalObj = null;
                var LocalEnty = new SS_HC_ValoracionAM_FE();
                var Listar = new List<SS_HC_ValoracionAM_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcValoracionAMFEService.listarEntidad(LocalEnty);


                String HISTORICO_EVOL = "";
                if (Listar.Count > 0)
                {
                    int contador = 0;
                    foreach (SS_HC_ValoracionAM_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF018"; // Valoración del Adulto Mayor

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF018_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF018_Save_ValoracionAM(SS_HC_ValoracionAM_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF018_Save_ValoracionAM - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave.Categoria == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Por favor seleccione la categoría del adulto mayor", "ERROR", false);
                    };

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";



                        registro = SvcValoracionAMFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF080_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF080_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF080_View - Entrar");

                SS_HC_EvolucionMedica_FE LocalObj = null;

                var LocalEnty = new SS_HC_EvolucionMedica_FE();
                var Listar = new List<SS_HC_EvolucionMedica_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;

                Listar = SvcEvolucionObjetivaFEService.listarSS_HC_EvolucionObjetiva(LocalEnty);


                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EvolucionMedica_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }


                }


                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2, Listar);
                    String repetidos2 = "";
                    if (objetoGen != null)
                    {

                        List<SS_HC_EvolucionMedica_FE> ListarCopy = (List<SS_HC_EvolucionMedica_FE>)objetoGen;
                        int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                        int x = 0;
                        foreach (var objEntity in ListarCopy)
                        {
                            LocalEnty.EvolucionObjetiva += "- " + objEntity.EvolucionObjetiva;

                            //  repetidos2 += "," + objEntity.NotaEnfermeria;

                        }

                        //  Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }


                LocalEnty.Version = "CCEPF080";

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                /////////////////////////////////////////////////

                ///ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)

                //{
                //    object objetoGen = (SS_HC_EvolucionMedica_FE)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EVOL_OBJETIVA_F2, LocalEnty.EvolucionObjetiva);
                //    SS_HC_EvolucionMedica_FE lista = new SS_HC_EvolucionMedica_FE();
                //    lista = (SS_HC_EvolucionMedica_FE)objetoGen;
                //    if (objetoGen != null)
                //    {
                //        /* String objCopy = (String)objetoGen;
                //         LocalEnty.EvolucionObjetiva = "" + objCopy;*/
                //        LocalEnty.EvolucionObjetiva = lista.EvolucionObjetiva;
                //        LocalEnty.FechaIngreso = lista.FechaIngreso;
                //    }
                //    Session["COPIA_FORMULARIO"] = "INACTIVA";
                //}
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF080_View", LocalEnty);

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF080_EVOLUCION_MEDICA()
        {
            try
            {
                Log.Information("HClinicaController - v - Entrar");

                var Listar2 = new List<SS_HC_EvolucionMedica_FE>();
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;




                if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF080")
                {

                    var LocalEnty2 = new SS_HC_EvolucionMedica_FE();
                    LocalEnty2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty2.IdEpisodioAtencion = 0;
                    LocalEnty2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty2.Accion = "EVOLUCION";
                    Listar2 = SvcEvolucionMedicaFE.EvolucionMedicaListar(LocalEnty2).ToList();
                }


                return this.Store(Listar2.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addVer_CCEPF080(String MODO, String secuencia)
        {
            Log.Information("HClinicaController - addVer_CCEPF080 - Entrar");

            List<SS_HC_ProximaAtencion_FE> dataDelete = null;

            string formula = "";
            SS_HC_ProximaAtencion_FE objDelete = new SS_HC_ProximaAtencion_FE();
            objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            return showMensajeBox("" + " " + secuencia + "<br/>" + "\n" + "\r\n" + "\r\n" + formula + " " + " ",
               "Advertencia", "WARNING");

            try
            {
                //string[] cadArray = codigo.Trim().Split('|');
                //string cadenas = cadArray[1].Replace("[", "");
                //cadenas = cadenas.Replace("]", "").Trim();
                //objDelete.I = Convert.ToInt32(cadenas);  
                objDelete.Secuencia = Convert.ToInt32(secuencia);

                //objDelete.Secuencia = Convert.ToInt32(objDelete.CodigoElemento);
                //objDelete.FechaSolicitada = Convert.ToDateTime(objDelete.ValorFecha);
                //objDelete.IdEspecialidad = Convert.ToInt32(objDelete.ValorCodigo1);
                //objDelete.IdPersonalSalud = Convert.ToInt32(objDelete.ValorCodigo2);
                //if (!string.IsNullOrEmpty(objDelete.ValorCodigo4)) objDelete.Observacion = objDelete.ValorCodigo4.Trim();


                objDelete.Accion = "DELETE";
                dataDelete.Add(objDelete);
                Session["DataSS_HC_Anamnesis_EADelete"] = dataDelete;
            }

            catch (Exception ee)
            {
                Log.Error(ee, ee.Message);
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF080_Save_EvolucionObjetiva(SS_HC_EvolucionMedica_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF080_Save_EvolucionObjetiva - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {

                        if (objSave.FechaIngreso == null)
                        {
                            eventoPostFormulario(true, "");

                            return showMensajeNotifyData("Mensaje", "Por favor seleccione una fecha de ingreso...", "ERROR", false);


                        }

                        if (objSave.EvolucionObjetiva == null)
                        {


                            eventoPostFormulario(true, "");

                            return showMensajeNotifyData("Mensaje", "Por favor ingrese una Evolucion...", "ERROR", false);


                        }

                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        int VALR = 0;
                        if (ENTITY_GLOBAL.Instance.EnfermeraNombre == null)
                        {
                            objSave.Medico = "";
                        }
                        else
                        {
                            objSave.Medico = ENTITY_GLOBAL.Instance.EnfermeraNombre.Trim();
                            VALR = ENTITY_GLOBAL.Instance.EnfermeraNombre.Length;
                        }


                        if (ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD == null)
                        {
                            objSave.Especialidad = Convert.ToString(0);

                        }
                        else
                        {
                            objSave.Especialidad = Convert.ToString(ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD);
                        }


                        var hora = HoraIngreso.TrimStart('\"');
                        if (hora == "null")
                        {
                            eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe Ingresar una hora de ingreso.", "ERROR", false);
                        }
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";
                        //registro = 0;
                        registro = SvcEvolucionObjetivaFEService.setMantenimiento(objSave);
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF150_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF150_View()
        {

            Log.Information("HClinicaController - CCEPF150_View - Entrar");
            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {
                ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
            }
            ENTITY_GLOBAL.Instance.bitacora = 3;
            Session["SEC_TOP_150"] = 0;
            try
            {
                var LocalEnty = new SS_HC_ExamenSolicitadoFE();
                var Listar = new List<SS_HC_ExamenSolicitadoFE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcExamenSolicitadoServiceFE.Examen_Listar(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_ExamenSolicitadoFE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                        LocalEnty.Motivo = ListarCopy[0].Motivo;
                        LocalEnty.Resumen = ListarCopy[0].Resumen;
                        LocalEnty.Accion = "NUEVO";
                        //Listar.
                        //Listar.AddRange(Listarnew);

                        //Listar.

                    }
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                /////////////////////////////////////////////



                Session["Data_ExamenSolicitadoDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF150_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }


        }

        public System.Web.Mvc.ActionResult CCEPF150_PERFIL_COMPONENTE(String componente)
        {
            Log.Information("HClinicaController - CCEPF150_PERFIL_COMPONENTE - Entrar");
            string JSONstring = string.Empty;
            List<ENTITY_MENSAJES> lst = new List<ENTITY_MENSAJES>();
            try
            {
                //Json
                DataTable dtValida = new DataTable();
                HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                WsEpisodio.FechaCreacion = DateTime.Now;
                WsEpisodio.SecuenciaHCE = componente;
                WsEpisodio.UsuarioCreacion = "PERFILEXA";

                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

                JSONstring = JsonConvert.SerializeObject(dtValida);
                List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));

                ENTITY_MENSAJES sms = new ENTITY_MENSAJES();
                sms.DESCRIPCION = JSONstring;
                lst.Add(sms);
            }
            catch (Exception ex)
            {
                //EventLog.GenerarLogError(ex);
                Log.Error(ex, ex.Message);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                //string mostrarExc = "Excepción genérica:" + ex.Message;
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                eventoPostFormulario(false, "");
                throw;

            }
            return showMensajeBotton(lst, "", "");
        }

        public System.Web.Mvc.ActionResult CCEPF150_Save_ExamenFE(SS_HC_ExamenSolicitadoFE objExamSol, SS_HC_ExamenSolicitadoDet_FE objApoyoDet_Diag, String selectionArray0, String selectionArray1, String selectionArray2, String CCEPF150_Save_ExamenFE, String text)
        {
            Log.Information("HClinicaController - CCEPF150_Save_ExamenFE - Entrar");
            //X.Msg.Alert("ASP.NET C#", "CCEPF150_Save_ExamenFE ").Show();
            // TRABA
            String valoreArray;
            String valoreArray1;
            String valoreArray2;
            String mensaje = "";
            String mensage = "";
            int indicador = 1;
            List<MA_MiscelaneosDetalle> ObjListar;
            List<MA_MiscelaneosDetalle> ObjListar2;
            List<SS_HC_ExamenSolicitadoFE> ObjListar1;
            DataTable dtValida = new DataTable();
            SS_HC_DescansoMedico_FE objDescansoMedico;
            List<SS_HC_DescansoMedico_FE> ObjDetalle = new List<SS_HC_DescansoMedico_FE>();
            //if (text == "0")
            //{
            //    Session["ValoresTemporal"] = selectionArray1;
            //    ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            //}
            //else
            //{
            Session["ValoresTemporal0"] = selectionArray0;
            Session["ValoresTemporal1"] = selectionArray1;
            Session["ValoresTemporal2"] = selectionArray2;

            valoreArray = (string)Session["ValoresTemporal0"];
            valoreArray1 = (string)Session["ValoresTemporal1"];
            valoreArray2 = (string)Session["ValoresTemporal2"];

            //No tocar este metodo :v
            SS_HC_EpisodioAtencion obj = new SS_HC_EpisodioAtencion();
            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            obj.EpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion; //ADD 05.06.2017 OES Motivo: Modificacion en continuar episodio
            obj.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
            obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
            string FEX = "";
            FEX = DateTime.Now.ToShortDateString();
            obj.FechaFirma = Convert.ToDateTime(FEX);

            //Json
            string JSONstring = string.Empty;

            HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

            // TRANSACCIONALES
            SS_HC_ExamenSolicitadoFE ObjCab = new SS_HC_ExamenSolicitadoFE();
            SS_HC_ExamenSolicitadoFE ObjDet = new SS_HC_ExamenSolicitadoFE();
            List<SS_HC_ExamenSolicitadoFE> lstCabecera = new List<SS_HC_ExamenSolicitadoFE>();
            List<SS_HC_ExamenSolicitadoFE> lstDetalle = new List<SS_HC_ExamenSolicitadoFE>();

            //var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;
            //var firmaInt = firmita.Length;


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }

            else
            {
                try
                {
                    int registro = -1;
                    int registro2 = -1;

                    #region Region_Cabecera

                    if (valoreArray != null)
                    {
                        ObjListar1 = (List<SS_HC_ExamenSolicitadoFE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<SS_HC_ExamenSolicitadoFE>));
                        foreach (SS_HC_ExamenSolicitadoFE objEntity in ObjListar1)
                        {
                            ObjCab = new SS_HC_ExamenSolicitadoFE();
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO")
                                ObjCab.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                            objExamSol.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objExamSol.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objExamSol.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objExamSol.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objExamSol.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objExamSol.Version = "CCEPF150";
                            objExamSol.Resumen = objEntity.Resumen;
                            objExamSol.UsuarioCreacion = objEntity.UsuarioCreacion;
                            objExamSol.FechaCreacion = objEntity.FechaCreacion;
                            if (objEntity.Version != "")
                            {
                                objExamSol.FechaCreacion = Convert.ToDateTime(objEntity.Version);
                            }

                            if (objExamSol.Accion == "NUEVO")
                            {
                                objExamSol.Estado = 2;
                                objExamSol.FechaCreacion = DateTime.Now;
                                objExamSol.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            objExamSol.FechaModificacion = DateTime.Now;
                            objExamSol.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            registro = 1;
                        }
                    }

                    #endregion

                    registro = 1;
                    string cadenas = "";
                    String[] cadArray;
                    if (registro > 0)
                    {
                        //angel 04/03/2019
                        ObjListar2 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray1, typeof(List<MA_MiscelaneosDetalle>));
                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar2)
                        {
                            objApoyoDet_Diag = new SS_HC_ExamenSolicitadoDet_FE();
                            objApoyoDet_Diag.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objApoyoDet_Diag.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objApoyoDet_Diag.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objApoyoDet_Diag.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objApoyoDet_Diag.Accion = objEntity.ACCION;
                            if (objApoyoDet_Diag.Accion == "NUEVO")
                            {
                                objApoyoDet_Diag.FechaCreacion = DateTime.Now;
                                objApoyoDet_Diag.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            else
                            {
                                objApoyoDet_Diag.FechaCreacion = objExamSol.FechaCreacion;
                                objApoyoDet_Diag.UsuarioCreacion = objExamSol.UsuarioCreacion;
                            }
                            objApoyoDet_Diag.FechaModificacion = DateTime.Now;
                            objApoyoDet_Diag.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            registro = 1;
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                        }

                        //BLOQUE DELETE
                        List<SS_HC_ExamenSolicitadoFE> dataDelete = null;
                        if (Session["Data_ExamenSolicitadoDelete"] != null)
                        {
                            dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                        }
                        if (dataDelete != null)
                        {
                            String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                            if (PARAM == "S")
                            {
                                WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                WsEpisodio.FechaCreacion = DateTime.Now;
                                WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            }
                            else
                            {
                                dtValida.Columns.Add("CustLName", typeof(String));
                                dtValida.Columns.Add("CustFName", typeof(String));
                                dtValida.Columns.Add("Purchases", typeof(String));
                                dtValida.Columns.Add("CustLName2", typeof(String));
                                dtValida.Columns.Add("CustFName2", typeof(String));
                                dtValida.Columns.Add("Purchases2", typeof(String));
                            }

                            dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                            JSONstring = JsonConvert.SerializeObject(dtValida);
                            List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
                            if (result.Count > 0)
                            {
                                foreach (var deletes in dataDelete)
                                {
                                    int ff = 0;
                                    foreach (EpisodioAtencion lista in result)
                                    {
                                        if (lista.SecuenciaHCE == deletes.TipoCodigoCab)
                                        {
                                            if (lista.IndicadorCobrado == 2)
                                            {
                                                ff = 1;
                                                mensaje += " No Puede Guardar Examenes Cobrados. " + deletes.CodigoSegusCab + " ";
                                                break;
                                            }
                                            else
                                            {
                                                WsEpisodio.UsuarioCreacion = "DELETEAPOYO";
                                                WsEpisodio.SecuenciaHCE = lista.SecuenciaHCE;
                                                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                                            }
                                        }
                                    }
                                    if (ff == 0)
                                    {
                                        lstDetalle.Add(deletes);
                                    }
                                }
                            }
                            else
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    lstDetalle.Add(objDel);
                                }
                            }
                        }

                        #region Region_Detalle

                        if (valoreArray1 != null)
                        {
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray1, typeof(List<MA_MiscelaneosDetalle>));

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                ObjDet = new SS_HC_ExamenSolicitadoFE();
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO")
                                    ObjDet.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                ObjDet.Accion = objEntity.ACCION;
                                ObjDet.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                ObjDet.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                ObjDet.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                ObjDet.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                var secuenciales = objEntity.ValorCodigo1;
                                DateTime hoy = DateTime.Today;
                                if (objEntity.ValorFecha < hoy)
                                { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "La fecha solicitada no puede ser menor a la fecha actual.", "ERROR", false); }
                                else { ObjDet.FechaSolitadaCab = Convert.ToDateTime(objEntity.ValorFecha); }

                                if (objEntity.DescripcionExtranjera.Length > 200)
                                {
                                    eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "El campo especificaciones solo admite 200 caracteres.", "ERROR", false);
                                }

                                //ObjDet.IdEspecialidadCab = (int)ENTITY_GLOBAL.Instance.IdEspecialidad;

                                ObjDet.IndicadorEPSCab = objEntity.ValorEntero7;
                                ObjDet.TipoCodigoCab = objEntity.ValorCodigo6;
                                ObjDet.CodigoSegusCab = objEntity.ValorCodigo7;
                                ObjDet.CodigoComponenteCab = objEntity.ValorCodigo5; //COrresponde al código CPT
                                if (ObjDet.CodigoComponenteCab == null || ObjDet.CodigoComponenteCab == "")
                                {
                                    ObjDet.CodigoComponenteCab = objEntity.ValorCodigo7; //CASO SEGUS
                                }
                                ObjDet.EspecificacionesCab = objEntity.DescripcionExtranjera;
                                ObjDet.CantidadCab = objEntity.ValorEntero6;
                                ObjDet.ObservacionCab = objEntity.ValorCodigo4;
                                //ADD DESDE LA SELECCIÓN DEL PACIENTE
                                if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                                {
                                    VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                                    ObjDet.IdEspecialidadCab = EpiAtencionTemp.IdEspecialidad;
                                }


                                if ((objEntity.ACCION.Trim() + "") != "DETALLE")   //  NUEVO
                                {
                                    ObjDet.SecuenciaCab = Convert.ToInt32(objEntity.CodigoElemento);
                                    ObjDet.FechaModificacion = DateTime.Now;
                                    ObjDet.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    ObjDet.FechaCreacion = ObjDet.FechaSolitadaCab;
                                    ObjDet.UsuarioCreacion = objExamSol.UsuarioCreacion;

                                    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                    WsEpisodio.FechaCreacion = DateTime.Now;
                                    WsEpisodio.UsuarioCreacion = null;
                                    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

                                    JSONstring = JsonConvert.SerializeObject(dtValida);
                                    List<EpisodioAtencion> results = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
                                    int ff = 0;

                                    if (results.Count > 0)
                                    {


                                        foreach (EpisodioAtencion lista in results)
                                        {

                                            //String datos = Convert.ToString(result[0].IndicadorCobrado);
                                            //String secuencial = Convert.ToString(result[0].CodHCE);
                                            //String datosDelete = Convert.ToString(dataDelete[0].TipoCodigoCab);

                                            if (lista.SecuenciaHCE == secuenciales)
                                            {
                                                ObjDet.CantidadCab = Convert.ToInt32(lista.IndicadorProcedimiento);
                                                if (lista.IndicadorCobrado == 2)
                                                {
                                                    ff = 1;
                                                    mensaje += " No Puede Editar Examenes Cobrados. " + ObjDet.CodigoComponenteCab + " ";
                                                    indicador = 2;
                                                    break;
                                                }
                                                else
                                                {
                                                    ObjDet.CantidadCab = objEntity.ValorEntero6;
                                                }
                                            }
                                        }
                                        if (ff == 0)
                                        {
                                            ObjDet.CantidadCab = objEntity.ValorEntero6;
                                            lstDetalle.Add(ObjDet);
                                        }
                                    }
                                    else
                                    {
                                        lstDetalle.Add(ObjDet);
                                    }
                                }
                                else
                                {
                                    ObjDet.CantidadCab = objEntity.ValorEntero6;
                                    ObjDet.FechaModificacion = DateTime.Now;
                                    ObjDet.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    ObjDet.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    ObjDet.FechaCreacion = DateTime.Now;
                                    lstDetalle.Add(ObjDet);
                                }
                                //lstDetalle.Add(ObjDet);
                                registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                        }
                        #endregion

                        #region detalle2

                        if (valoreArray2 != null)
                        {
                            //BLOQUE DELETE
                            List<SS_HC_DescansoMedico_FE> dataDelete1 = null;
                            if (Session["Data_SS_HC_DescansoMedicoDelete"] != null)
                            {
                                dataDelete1 = (List<SS_HC_DescansoMedico_FE>)Session["Data_SS_HC_DescansoMedicoDelete"];
                            }
                            if (dataDelete1 != null)
                            {
                                foreach (var objDel in dataDelete1)
                                {
                                    ObjDetalle.Add(objDel);

                                }
                            }
                            ////////////
                            ObjListar2 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray2, typeof(List<MA_MiscelaneosDetalle>));

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar2)
                            {
                                objDescansoMedico = new SS_HC_DescansoMedico_FE();
                                objDescansoMedico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objDescansoMedico.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objDescansoMedico.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objDescansoMedico.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") objDescansoMedico.Accion = "INSERTDETALLE";
                                else objDescansoMedico.Accion = objEntity.ACCION;

                                objDescansoMedico.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objDescansoMedico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objDescansoMedico.Accion != "INSERTDETALLE")
                                {
                                    objDescansoMedico.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();

                                objDescansoMedico.IdDiagnostico = Convert.ToInt32(cadenas);
                                ObjDetalle.Add(objDescansoMedico);
                                registro2 = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                        }

                        #endregion

                        if (lstDetalle.Count == 0 && indicador == 1)
                        {
                            return showMensajeNotifyData("Error", "Debe ingresar datos en Detalle - Proc. Médicos SEGUS", "ERROR", false);
                        }
                        if (dataDelete != null)
                        {
                            long idResultado = 0;
                            idResultado = SvcEpisodioAtencion.setMantenimiento(obj);
                        }
                        obj.Accion = "PROC_FIRMARAPOYO";
                        long idResultados = 0;
                        registro = SvcExamenSolicitadoServiceFE.setMantenimiento(objExamSol, lstDetalle, ObjDetalle);
                        string paciente = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        string episodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        string episodioAtencion = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        string unidadRep = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        var LocalEnty = new MA_MiscelaneosDetalle();
                        var Listar = new List<MA_MiscelaneosDetalle>();
                        LocalEnty.ACCION = "EXAMENESLIST";
                        LocalEnty.ValorCodigo1 = paciente;
                        LocalEnty.ValorCodigo2 = episodioClinico;
                        LocalEnty.ValorCodigo3 = episodioAtencion;
                        LocalEnty.ValorCodigo4 = unidadRep;
                        LocalEnty.ValorCodigo5 = "S";

                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                        List<SS_IT_SaludProcedimientoIngreso> ListaMirth = new List<SS_IT_SaludProcedimientoIngreso>();
                        foreach (MA_MiscelaneosDetalle objEntity in Listar)
                        {
                            SS_IT_SaludProcedimientoIngreso EntyMIrth = new SS_IT_SaludProcedimientoIngreso();
                            EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            EntyMIrth.LineaOrdenAtencionConsulta = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            EntyMIrth.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                            EntyMIrth.Componente = objEntity.ValorCodigo7;
                            EntyMIrth.idtipoordenatencion = objEntity.ValorEntero5;
                            EntyMIrth.Cantidad = objEntity.ValorEntero6;
                            EntyMIrth.IndicadorEPS = objEntity.ValorEntero7;
                            if (!string.IsNullOrEmpty(ENTITY_GLOBAL.Instance.IdMedico.ToString())) EntyMIrth.IdMedico = (int)ENTITY_GLOBAL.Instance.IdMedico;
                            if (!string.IsNullOrEmpty(objEntity.ValorCodigo3)) EntyMIrth.Especialidad = Convert.ToInt32(objEntity.ValorCodigo3);
                            EntyMIrth.IdCita = 0;
                            EntyMIrth.Observacion = objEntity.DescripcionExtranjera;
                            EntyMIrth.SecuencialHCE = objEntity.ValorCodigo1;
                            EntyMIrth.UsuarioCreacion = objEntity.UltimoUsuario;
                            EntyMIrth.FechaCreacion = objEntity.ValorFecha;
                            EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            EntyMIrth.FechaModificacion = DateTime.Now;
                            EntyMIrth.EstadoDocumento = 7;
                            EntyMIrth.Estado = 2;
                            ListaMirth.Add(EntyMIrth);

                        }
                        Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_ProcedimientoIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));


                        //INTEROPERABILIDAD MIRTH
                        if (ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_EMERGENCIA" && idResultados > 0)
                        {
                            int idOrdenAtencion = 0;
                            idOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            int linea = 0;
                            linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            int medico = 0;
                            medico = ENTITY_GLOBAL.Instance.CODPERSONA > 0 ? (int)ENTITY_GLOBAL.Instance.CODPERSONA : (int)ENTITY_GLOBAL.Instance.COD_MEDICO;
                            string usuario = ENTITY_GLOBAL.Instance.USUARIO;
                            var timeout = SetTimeout(() =>
                            {
                                if (Listar.Count > 0)
                                {
                                    foreach (MA_MiscelaneosDetalle lstDetalleProce in Listar)
                                    {
                                        var objGenralConsulta = new SS_HCE_ConsultaExterna();
                                        int idResultaConsulta = 0;
                                        objGenralConsulta.IdOrdenAtencion = idOrdenAtencion;
                                        objGenralConsulta.Linea = linea;
                                        objGenralConsulta.Medico = medico;
                                        objGenralConsulta.UsuarioCreacion = usuario;
                                        objGenralConsulta.Componente = lstDetalleProce.ValorCodigo7;
                                        objGenralConsulta.SecuenciaHCE = lstDetalleProce.ValorCodigo1;
                                        objGenralConsulta.Accion = "PROC_EMER";
                                        if (lstDetalleProce.CodigoTabla == "NUEVO")
                                        {
                                            idResultaConsulta = SOA_AtencionesSpring.ListaConsultaExternaEmergencia(objGenralConsulta);
                                        }
                                    }
                                }
                            }, 2000);
                        }
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "") + mensaje;
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                            valoreArray1 = "";
                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            Session.Remove("ValoresTemporal");
                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;
                            Session.Remove("Data_ExamenSolicitadoDelete");
                            Session.Remove("COPIA_FORMULARIO");
                            Session.Remove("DATA_COPIA_FORM");
                            ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                            Session.Remove("Valores_CCEPF150");
                            eventoLoadPostFormulario(true, "storeExamenes", null);
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            //eventoPostFormulario(false, "");
                            return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF150 al Guardar :" + lstDetalle, "ERROR", false);
                        }
                    }
                    else
                    {
                        //eventoPostFormulario(false, "");
                        return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF150 Cabeccera :" + valoreArray, "ERROR", false);
                    }


                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);

                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    //string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            //}

            return this.Direct();


        }

        public CancellationTokenSource SetTimeout(Action action, int millis)
        {

            var cts = new CancellationTokenSource();
            var ct = cts.Token;
            Task.Run(() =>
            {
                Thread.Sleep(millis);
                if (!ct.IsCancellationRequested)
                    action();
            }, ct);

            return cts;
        }
        public System.Web.Mvc.ActionResult CCEPF150_addEliminar_Examen(String MODO, String codigo, String secuencia, string accion, String hc)
        {
            Log.Information("HClinicaController - CCEPF150_addEliminar_Examen - Entrar");
            List<SS_HC_ExamenSolicitadoFE> dataDelete = null;


            Session["ELIMINAR_DATA"] = codigo;

            //var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;
            //var firmitasize = firmita.Length;

            //if (firmitasize > 0)
            //{

            var dtValida = ENTITY_GLOBAL.Instance.dataExamen;
            string JSONstring = string.Empty;
            JSONstring = JsonConvert.SerializeObject(dtValida);
            if (dtValida != null)
            {
                List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
                List<EpisodioAtencion> listxx = result.Where(x => x.SecuenciaHCE == hc).ToList();
                if (listxx.Count > 0)
                {
                    String datos = Convert.ToString(listxx[0].IndicadorCobrado);
                    if (datos == "2")
                    {
                        this.GetCmp<TextField>("data").Text = "error";

                        return showMensajeNotify("Advertencia", "El Examen " + codigo + " Ya esta Cobrado.", "ERROR");
                    }
                    else
                    {
                        this.GetCmp<TextField>("data").Text = "";
                    }

                }
                else
                {
                    this.GetCmp<TextField>("data").Text = "";
                }
            }

            //}

            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ExamenSolicitadoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenSolicitadoFE>();
                }
                SS_HC_ExamenSolicitadoFE objDelete = new SS_HC_ExamenSolicitadoFE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.IdProcedimientoCab = 0;//Convert.ToInt32(cadenas);
                        objDelete.Accion = "DELETE";
                        objDelete.SecuenciaCab = Convert.ToInt32(secuencia);
                        objDelete.TipoCodigoCab = hc;
                        dataDelete.Add(objDelete);
                    }

                    Session["Data_ExamenSolicitadoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            //X.Msg.Alert("Metodo CCEPF150_addEliminar_Examen", "Antes del .. return this.Direct() ..").Show();
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF150_EXAMENES(String tipoCodigo)
        {
            Log.Information("HClinicaController - CCEPF150_EXAMENES - Entrar");
            try
            {

                //var firmita = ENTITY_GLOBAL.Instance.FECHA_FIRMA;
                //var firmitasize = firmita.Length;

                //if (firmitasize > 0)
                //{
                DataTable dtValida = new DataTable();

                String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                        (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                if (PARAM == "S")
                {
                    HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                    WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                    WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                    WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    WsEpisodio.FechaCreacion = DateTime.Now;
                    WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                }
                else
                {
                    dtValida.Columns.Add("CustLName", typeof(String));
                    dtValida.Columns.Add("CustFName", typeof(String));
                    dtValida.Columns.Add("Purchases", typeof(String));
                    dtValida.Columns.Add("CustLName2", typeof(String));
                    dtValida.Columns.Add("CustFName2", typeof(String));
                    dtValida.Columns.Add("Purchases2", typeof(String));

                }


                ENTITY_GLOBAL.Instance.dataExamen = dtValida;
                //}

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.ACCION = "EXAMENESLIST";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = tipoCodigo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {

                    LocalEnty.ACCION = "EXAMENESLIST";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = tipoCodigo;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    if (Listar.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar)
                        {

                            Listar[x].ACCION = "UPDATEDETALLE";

                            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_150"])
                            {
                                Session["SEC_TOP_150"] = Convert.ToInt32(Listar[x].CodigoElemento);
                            }

                            x = x + 1;
                        }
                    }


                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        MA_MiscelaneosDetalle ObjDet;
                        int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                        foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                        {

                            ObjDet = new MA_MiscelaneosDetalle();

                            ObjDet = objEntity;
                            ObjDet.ValorFecha = DateTime.Now; ;
                            ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                            ObjDet.ACCION = "NUEVO";

                            Listar.Add(ObjDet);

                            CODIGOTEMP = CODIGOTEMP + 1;
                        }


                        //  Listar.AddRange(ListarCopy);
                    }
                    //  Session["DATA_COPIA_FORM"] = null;
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                /////////////////////////////////////////////


                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        #endregion


        /**FORMULARIOS FASE MIRTH*/

        #region CCEPF001_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF001_View()
        {
            Log.Information("HClinicaController - CCEPF001_View - Entrar");
            Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] = null;
            //  Session["Valores"] = null;
            ENTITY_GLOBAL.Instance.bitacora = 3;
            try
            {
                var LocalEnty = new SS_HC_EnfermedadActual_FE();
                var Listar = new List<SS_HC_EnfermedadActual_FE>();
                var ListarOA = new List<SS_HC_EnfermedadActual_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnty).ToList();

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 && ENTITY_GLOBAL.Instance.TIPOATENCION != "1")
                {

                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {

                        var objModel = new VW_ATENCIONPACIENTE();
                        objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
                        objModel.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        objModel.Accion = "COMP_ENFERMEDAD";
                        objModel.TipoAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.TIPOATENCION);


                        //LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        //LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        //LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        //LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        //  List<VW_ATENCIONPACIENTE> ListarEnfermedad = SvcVw_AtencionPaciente.listarVwAtencionPaciente(objModel, 0, 0);

                        var LocalEntyOA = new MA_MiscelaneosDetalle();
                        var ListarEnfermedad = new List<MA_MiscelaneosDetalle>();
                        LocalEntyOA.ACCION = "ENFERMEDADACTUFEOA";
                        LocalEntyOA.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEntyOA.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEntyOA.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        // LocalEntyOA.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();

                        ListarEnfermedad = SvcMiscelaneos.GetUpListadoServicios(LocalEntyOA).ToList();
                        if (SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA == 0
                            //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 2
                            //|| SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICADOR_INTERCONSULTA != 3
                            )
                        {
                            if (ListarEnfermedad.Count > 0)
                            {
                                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                LocalEnty.EpisodioClinico = (int)ListarEnfermedad[0].ValorEntero2;
                                LocalEnty.IdEpisodioAtencion = (int)ListarEnfermedad[0].ValorEntero3;
                                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                ListarOA = SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnty).ToList();
                            }
                        }
                        else
                        {

                        }
                    }
                }



                bool hallado = false;
                if (ListarOA.Count > 0)
                {
                    String version = "CCEPF001";
                    foreach (SS_HC_EnfermedadActual_FE objEntity in ListarOA)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "NUEVO";

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                            //  ENTITY_GLOBAL.Instance.INDICA_GUARDAR_FIRMAR = 0;
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_ACTUAL = 0;
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        }
                    }

                }
                else if (Listar.Count > 0)
                {

                    //var peso = X.GetCmp<Radio>("IdPeso");
                    //var Kgr = X.GetCmp<Radio>("lblKgr");
                    //peso.Hidden = false;
                    //Kgr.Hidden = false;

                    String version = "CCEPF001";
                    foreach (SS_HC_EnfermedadActual_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                        //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                            //  ENTITY_GLOBAL.Instance.INDICA_GUARDAR_FIRMAR = 0;
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";


                        }
                    }

                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";

                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_ACTUAL = 0;
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                        //*******  Inicio  2019/03/27 **********//
                        var peso = X.GetCmp<Radio>("IdPeso");
                        var Kgr = X.GetCmp<Radio>("lblKgr");
                        ////peso.Hidden = true;
                        ////Kgr.Hidden = true;
                        //*******  Fin  **********//
                        LocalEnty.Accion = "NUEVO";

                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();
                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                        //  LocalEnty.Motivo = ListarCopy[0].Motivo;
                        //    LocalEnty.Resumen = ListarCopy[0].Resumen;
                        //     //Listar.
                        //Listar.AddRange(Listarnew);

                        //Listar.

                    }
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                /////////////////////////////////////////////
                Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);

                Session["Firmar"] = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                /***************************************************/
                return View("FormulariosExtras/CCEPF001_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF001_LISTADETALLE()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF001_LISTADETALLE - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                var Listitta = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "ENFER_ACTUAL";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 && ENTITY_GLOBAL.Instance.TIPOATENCION != "1")
                {

                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "ENFER_ACTUAL_OA ";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listitta = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listitta.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listitta)
                    {
                        Listitta[x].ACCION = "NUEVO";
                        x = x + 1;
                    }
                    Listar = Listitta;
                    ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_DETALLE_ACTUAL = 0;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_DETALLE_ACTUAL = 1;
                }

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                //Session["Valores"]= Listar.ToArray();
                //var PRUEBA = Session["Valores"];
                //  Session["Valores"] = Listar;
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult addEliminar_CCEPF001(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - addEliminar_CCEPF001 - Entrar");
            List<SS_HC_EnfermedadActualDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] != null)
                {
                    dataDelete = (List<SS_HC_EnfermedadActualDetalle_FE>)Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_EnfermedadActualDetalle_FE>();
                }
                SS_HC_EnfermedadActualDetalle_FE objDelete = new SS_HC_EnfermedadActualDetalle_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.Accion = "DELETE";
                        objDelete.Secuencia = Convert.ToInt32(secuencia);
                        dataDelete.Add(objDelete);
                        Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] = dataDelete;
                    }
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Grilla_CCEPF001(String selectionArray1)
        {
            Session["Valores"] = selectionArray1;
            return this.Direct();

        }

        public System.Web.Mvc.ActionResult CCEPF001_Save_EnfermedadActual(SS_HC_EnfermedadActual_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF001_Save_EnfermedadActual - Entrar");
            // TRABA

            String valoreArray = (string)Session["Valores"];

            if (valoreArray == null)
            {
                //var datosGrid = X.GetCmp<GridPanel>("GridPanelInmunizacion");
                return showMensajeNotifyData("Excepción", "Por Favor debe Guardar Otra Vez, Sino se Perdaran los Datos", "ERROR", false);
                //return showMensajeBox("Por favor,Debe Guardar Otra Vez, Sino se Perdaran los Datos", "Advertencia", "WARNING");
                //return Grilla_CCEPF001((string)Session["Valores"]);
                //return (Grilla_CCEPF001(""));
                //return this.Direct();
            }


            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            // TRANSACCIONALES
            List<SS_HC_EnfermedadActualDetalle_FE> ObjDetalle = new List<SS_HC_EnfermedadActualDetalle_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        #region ValidacionRadioButton

                        //if (objSave.TipoAnamnesis == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Tipo de Anamnesis: Debe seleccionar una opción.", "ERROR", false);
                        //}
                        //if (objSave.TipoAnamnesis == "I")
                        //{
                        //    if (objSave.TipoAnamnesisDescrip == "")
                        //    {
                        //        eventoPostFormulario(true, "");
                        //        return showMensajeNotifyData("Error", "Informante: Debe ingresar datos.", "ERROR", false);
                        //    }
                        //}

                        //if (objSave.MotivoIngreso == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Motivo de Ingreso: Debe ingresar datos en el campo..", "ERROR", false);
                        //}

                        //if (objSave.TiempoEnfermedad == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Motivo de Ingreso: Debe ingresar datos en el campo..", "ERROR", false);
                        //}

                        //if (objSave.Orina == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Orina: Debe seleccionar una opción.", "ERROR", false);
                        //}

                        //if (objSave.Orina == "A" || objSave.Orina == "D")
                        //{
                        //    if (objSave.Orina_Roja == null && objSave.Orina_Espumosa == null && objSave.Orina_Otros == null)
                        //    {
                        //        eventoPostFormulario(true, "");
                        //        return showMensajeNotifyData("Error", "Orina: Debe ingresar datos almenos en un campo, Roja, Espumosa u Otros.", "ERROR", false);
                        //    }
                        //}


                        //if (objSave.Deposiciones == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Deposiciones: Debe ingresar datos.", "ERROR", false);
                        //}

                        //if (objSave.Deposiciones_Moco == null && objSave.Deposiciones_Sangre == null && objSave.Deposiciones_Otros == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Deposiciones: Debe ingresar datos almenos en un campo, Moco, Sangre u Otros.", "ERROR", false);
                        //}
                        //if (objSave.PesoHabitual == null)
                        //{
                        //    eventoPostFormulario(true, "");
                        //    return showMensajeNotifyData("Error", "Peso Habitual: Debe seleccionar una opción.", "ERROR", false);
                        //}
                        //if (objSave.PesoHabitual == "S")
                        //{
                        //    if (objSave.PesoHabitualSub == null)
                        //    {
                        //        eventoPostFormulario(true, "");
                        //        return showMensajeNotifyData("Error", "Peso Habitual Krg: Debe ingresar peso.", "ERROR", false);
                        //    }
                        //}
                        #region Validación
                        if (objSave.PesoHabitual == "S")
                        {
                            if (objSave.PesoHabitualSub == null)
                            {
                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Error", "Debe ingresar valor en el campo: Peso Habitual", "ERROR", false);
                            }
                        }
                        #endregion
                        #endregion

                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;

                        registro = 1;
                        String mensage = "";
                        if (registro > 0)
                        {
                            if (valoreArray.Length > 5)
                            {
                                // Bloque UPDATE Y INSERT
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                            }

                            //BLOQUE DELETE
                            List<SS_HC_EnfermedadActualDetalle_FE> dataDelete = null;
                            if (Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] != null)
                            {
                                dataDelete = (List<SS_HC_EnfermedadActualDetalle_FE>)Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"];
                            }
                            if (dataDelete != null && ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_DETALLE_ACTUAL != 0)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);
                                }
                            }
                            SS_HC_EnfermedadActualDetalle_FE objEnfermedadDetalle = new SS_HC_EnfermedadActualDetalle_FE();

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                objEnfermedadDetalle = new SS_HC_EnfermedadActualDetalle_FE();
                                objEnfermedadDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnfermedadDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnfermedadDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnfermedadDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objEnfermedadDetalle.Accion = ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_DETALLE_ACTUAL == 0 ? "NUEVO" : objEntity.ACCION;
                                if (objEnfermedadDetalle.Accion == "NUEVO")
                                {
                                    objEnfermedadDetalle.Estado = 2;
                                    objEnfermedadDetalle.FechaCreacion = DateTime.Now;
                                    objEnfermedadDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objEnfermedadDetalle.FechaCreacion = objSave.FechaCreacion;
                                    objEnfermedadDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                }

                                objEnfermedadDetalle.FechaModificacion = DateTime.Now;
                                objEnfermedadDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objEnfermedadDetalle.Accion != "DETALLE")
                                {
                                    objEnfermedadDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                if (objEntity.ValorCodigo6.Length > 300)
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Error", "El Campo Descripcion No Puede Exceder Los 300 Caracteres.", "ERROR", false);
                                }
                                if (objEntity.ValorCodigo6.Trim() == "")
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Error", "Campo Síntomas: Existen filas vacias, por favor ingrese datos.", "ERROR", false);
                                }
                                else
                                {
                                    objEnfermedadDetalle.Sintomas = objEntity.ValorCodigo6.Trim();
                                    if (objEnfermedadDetalle.Sintomas.Length > 300)
                                    {
                                        return showMensajeNotifyData("Error", " *Fila N° 1-Sintomas: El tamaño máximo para este campo es de 300.", "ERROR", false);
                                    }
                                }
                                ObjDetalle.Add(objEnfermedadDetalle);
                                registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }
                        }

                        if (ObjDetalle.Count > 0)
                        {
                            ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_DETALLE_ACTUAL = 1;
                        }
                        if (ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_ACTUAL == 1)
                        {
                            objSave.Accion = "UPDATE";
                        }
                        registro = SvcEnfermedadActualServiceFE.setMantenimiento(objSave, ObjDetalle);

                        if (registro > 0)
                        {
                            //Guardar sesión
                            if (ENTITY_GLOBAL.Instance.IdEspecialidad == 22)
                            {
                                SS_IT_SaludOFTALMOLOGICOIngreso ListaMirth = new SS_IT_SaludOFTALMOLOGICOIngreso();

                                ListaMirth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                ListaMirth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                ListaMirth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                ListaMirth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                ListaMirth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                ListaMirth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                ListaMirth.ENFACTUAL = objSave.RelatoCronologico;
                                ListaMirth.Estado = 2;
                                ListaMirth.UsuarioCreacion = objSave.UsuarioCreacion;
                                ListaMirth.FechaCreacion = objSave.FechaCreacion;
                                ListaMirth.UsuarioModificacion = objSave.UsuarioModificacion;
                                ListaMirth.FechaModificacion = objSave.FechaModificacion;

                                Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_OftalmologicoIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                            }
                            else
                            {
                                SS_IT_SaludAnamnesisIngreso EntyMIrth = new SS_IT_SaludAnamnesisIngreso();

                                EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                EntyMIrth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                EntyMIrth.UsuarioCreacion = objSave.UsuarioCreacion;
                                EntyMIrth.FechaCreacion = objSave.FechaCreacion;
                                EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                EntyMIrth.FechaModificacion = DateTime.Now;
                                EntyMIrth.Estado = 2;


                                EntyMIrth.RelatoCronologico = objSave.RelatoCronologico;

                                if (objSave.TiempoEnfermedadUnidad == "1")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Horas";
                                }
                                if (objSave.TiempoEnfermedadUnidad == "2")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Dias";
                                }
                                if (objSave.TiempoEnfermedadUnidad == "3")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Semanas";
                                }
                                if (objSave.TiempoEnfermedadUnidad == "4")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Meses";
                                }
                                if (objSave.TiempoEnfermedadUnidad == "5")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Años";
                                }
                                EntyMIrth.TiempoEnfermedad = objSave.TiempoEnfermedad.ToString() + " " + EntyMIrth.TiempoEnfermedadUnidad;
                                var LocalFuncionesVit = new SS_HC_FuncionesVitales_FE();
                                var ListarFuncionesVit = new List<SS_HC_FuncionesVitales_FE>();
                                LocalFuncionesVit.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                LocalFuncionesVit.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                LocalFuncionesVit.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                LocalFuncionesVit.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                LocalFuncionesVit.Accion = "LISTAR";
                                ListarFuncionesVit = SvcFuncionesVitalesFEService.listarEntidad(LocalFuncionesVit);
                                foreach (SS_HC_FuncionesVitales_FE ObjTraceFunc in ListarFuncionesVit)
                                {
                                    EntyMIrth.PresionArterialMSD1 = ObjTraceFunc.PresionArterialMSD1.ToString();
                                    EntyMIrth.PresionArterialMSD2 = ObjTraceFunc.PresionArterialMSD2;
                                    EntyMIrth.PresionArterialMSI1 = ObjTraceFunc.PresionArterialMSI.ToString();
                                    EntyMIrth.PresionArterialMSI2 = ObjTraceFunc.PresionArterialMS2.ToString();
                                    EntyMIrth.FrecuenciaCardiaca = ObjTraceFunc.FrecuenciaCardiaca.ToString();
                                    EntyMIrth.FrecuenciaRespiratoria = ObjTraceFunc.FrecuenciaRespiratoria;
                                    EntyMIrth.Temperatura = ObjTraceFunc.Temperatura.ToString();
                                    EntyMIrth.SaturacionOxigeno = ObjTraceFunc.SaturacionOxigeno;
                                    EntyMIrth.Peso = ObjTraceFunc.Peso.ToString();
                                    EntyMIrth.Talla = ObjTraceFunc.Talla.ToString();
                                }

                                var LocalExamenCli = new SS_HC_ExamenClinico_FE();
                                var ListarExamenCli = new List<SS_HC_ExamenClinico_FE>();
                                LocalExamenCli.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                LocalExamenCli.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                LocalExamenCli.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                LocalExamenCli.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                LocalExamenCli.Accion = "LISTAR";
                                ListarExamenCli = SvcExamenClinicoServiceFE.ExamenClinicoListar(LocalExamenCli).ToList();

                                foreach (SS_HC_ExamenClinico_FE ObjTraceExamenCli in ListarExamenCli)
                                {
                                    EntyMIrth.EXAMENCLINICOOBS = ObjTraceExamenCli.Observacion;
                                }

                                Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_SaludAnamnesisIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(EntyMIrth));

                            }


                            ENTITY_GLOBAL.Instance.SaludInformeRutaIngresoMantenimiento_Flag = false;

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            ENTITY_GLOBAL.Instance.PARCHE_ENFERMEDAD_ACTUAL = 1;


                            // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            Session["Session_SS_HC_EnfermedadActualDetalle_DELETE"] = null;
                            Session["Valores"] = null;

                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");

                            return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF001 al Guardar :" + ObjDetalle, "ERROR", false);
                            //return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");

                        return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF001 Cabeccera :" + valoreArray, "ERROR", false);
                        //return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    //return showMsgTratamientoExcepcion(ex, "");
                    //throw;
                    Log.Error(ex, ex.Message);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    //string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF051_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF051_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF051_View - Entrar");
                var LocalEnty = new SS_HC_FuncionesVitales_FE();
                var Listar = new List<SS_HC_FuncionesVitales_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcFuncionesVitalesFEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FuncionesVitales_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }
                var listarDatos = new List<SS_HC_FuncionesVitales_FE>();
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                listarDatos = SvcFuncionesVitalesFEService.listarEntidadAnteFuncionesVitales(LocalEnty);
                ENTITY_GLOBAL.Instance.ANTENCIONESFUNCION = listarDatos;


                LocalEnty.Version = "CCEPF051";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF051_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF051_Save_FuncionesVitales(SS_HC_FuncionesVitales_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF051_Save_FuncionesVitales - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                            //var hora = HoraIngreso.TrimStart('\"');
                            //hora = hora.TrimEnd('\"');
                            //var tiempo = DateTime.Parse(hora);

                            //var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                            //fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                            //fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);
                            ////objSave.Fecha = fechaingreso;
                            //objSave.Hora = fechaingreso;

                            objSave.Hora = DateTime.Now;
                        }
                        //objSave.Fecha = objSave.Hora;
                        if (objSave.IMC == null)
                        {
                            objSave.IMC = 0;
                        }
                        else
                        {
                            var cuenta = Convert.ToString(objSave.IMC);
                            var X = int.Parse(cuenta.Split('.')[0]);

                            if (X > 999)
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Calculo de IMC incorrecto, verifique los datos", "ERROR", false);
                            }
                        }
                        // string mensage = "";

                        registro = SvcFuncionesVitalesFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            SS_IT_SaludAnamnesisIngreso EntyMIrth = new SS_IT_SaludAnamnesisIngreso();
                            EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            EntyMIrth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            EntyMIrth.UsuarioCreacion = objSave.UsuarioCreacion;
                            EntyMIrth.FechaCreacion = objSave.FechaCreacion;
                            EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            EntyMIrth.FechaModificacion = DateTime.Now;
                            EntyMIrth.Estado = 2;

                            EntyMIrth.PresionArterialMSD1 = objSave.PresionArterialMSD1.ToString();
                            EntyMIrth.PresionArterialMSD2 = objSave.PresionArterialMSD2;
                            EntyMIrth.PresionArterialMSI1 = objSave.PresionArterialMSI.ToString();
                            EntyMIrth.PresionArterialMSI2 = objSave.PresionArterialMS2.ToString();
                            EntyMIrth.FrecuenciaCardiaca = objSave.FrecuenciaCardiaca.ToString();
                            EntyMIrth.FrecuenciaRespiratoria = objSave.FrecuenciaRespiratoria;
                            EntyMIrth.Temperatura = objSave.Temperatura.ToString();
                            EntyMIrth.SaturacionOxigeno = objSave.SaturacionOxigeno;
                            EntyMIrth.Peso = objSave.Peso.ToString();
                            EntyMIrth.Talla = objSave.Talla.ToString();


                            var LocalEnfermedadAct = new SS_HC_EnfermedadActual_FE();
                            var ListarEnfermedadAct = new List<SS_HC_EnfermedadActual_FE>();
                            LocalEnfermedadAct.Accion = "LISTAR";
                            LocalEnfermedadAct.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnfermedadAct.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnfermedadAct.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalEnfermedadAct.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            ListarEnfermedadAct = SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnfermedadAct).ToList();

                            foreach (SS_HC_EnfermedadActual_FE ObjTraceEnfermedad in ListarEnfermedadAct)
                            {

                                EntyMIrth.RelatoCronologico = ObjTraceEnfermedad.RelatoCronologico;

                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "1")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Horas";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "2")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Dias";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "3")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Semanas";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "4")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Meses";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "5")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Años";
                                }
                                EntyMIrth.TiempoEnfermedad = ObjTraceEnfermedad.TiempoEnfermedad.ToString() + " " + EntyMIrth.TiempoEnfermedadUnidad;
                            }

                            var LocalExamenCli = new SS_HC_ExamenClinico_FE();
                            var ListarExamenCli = new List<SS_HC_ExamenClinico_FE>();
                            LocalExamenCli.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalExamenCli.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalExamenCli.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalExamenCli.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            LocalExamenCli.Accion = "LISTAR";
                            ListarExamenCli = SvcExamenClinicoServiceFE.ExamenClinicoListar(LocalExamenCli).ToList();

                            foreach (SS_HC_ExamenClinico_FE ObjTraceExamenCli in ListarExamenCli)
                            {
                                EntyMIrth.EXAMENCLINICOOBS = ObjTraceExamenCli.Observacion;
                            }

                            Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_SaludAnamnesisIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(EntyMIrth));

                            ENTITY_GLOBAL.Instance.SaludInformeRutaIngresoMantenimiento_Flag = false;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en CCEPF051", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en CCEPF051", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //return showMsgTratamientoExcepcion(ex, "");

                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    //tring mostrarExc = "Excepción genérica:" + ex.Message;
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);


                    throw;
                }

            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF051_GRAFICOESTADISTICO(string Accion, string nombrePaciente, string Form, string FormContainer)
        {
            Log.Information("HClinicaController - CCEPF051_GRAFICOESTADISTICO - Entrar");
            Session["COPIA_FORMULARIO"] = "INACTIVA";
            Session["DATA_COPIA_FORM"] = null;
            var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            var model = new ChartModel();
            model.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
            model.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            model.Accion = Accion;
            model.UnidadReplicacionEC = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            model.UsuarioModificacion = ENTITY_GLOBAL.Instance.CONCEPTO;
            model.UsuarioModificacion = "" + ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;
            string estado = "PanelCentralBlanco";
            return crearWindowRegistro(Form, model, "");
        }

        public StoreResult GetData()
        {
            var datos = X.GetCmp<ComboBox>("ComboBoxCountry");

            return new StoreResult(ChartModel.GenerateData(6, 10));
        }

        public System.Web.Mvc.ActionResult GetChart()
        {
            List<Pair> data = new List<Pair>
            {
                new Pair("Ruby", 40),
                new Pair("JavaScript", 26),
                new Pair("Shell", 5),
                new Pair("Python", 5),
                new Pair("PHP", 4),
                new Pair("C", 4),
                new Pair("Perl", 3),
                new Pair("C++", 2),
                new Pair("Java", 2),
                new Pair("Objective-C", 2)
            };

            return this.ComponentConfig(Draw(data));
        }

        private DrawComponent Draw(List<Pair> data)
        {
            DrawComponent draw = new DrawComponent
            {
                Width = 500,
                Height = 500
            };

            this.angle = 0;
            this.start = 0;

            int total = 0;

            for (int i = 0; i < data.Count; i++)
            {
                total += (int)data[i].Second;
            }
            for (int i = 0; i < data.Count; i++)
            {
                this.Process(draw, i, data[i], total);
            }

            return draw;
        }

        private void Process(DrawComponent draw, int i, Pair item, int total)
        {
            int value = (int)item.Second;
            double angleplus = 360 * value * 1.0 / total;
            double popangle = this.angle + (angleplus / 2);
            System.Drawing.Color color = this.ColorFromHSL(this.start, 0.5, 0.5);
            int delta = 30;
            System.Drawing.Color bcolor = this.ColorFromHSL(this.start, 1, 0.5);
            int r = 200;
            double rad = Math.PI / 180;

            draw.Gradients.Add(new Gradient
            {
                Angle = 90,
                GradientID = "Grd" + i,
                Stops = {
                    new GradientStop{Offset = 0, Color = System.Drawing.ColorTranslator.ToHtml(bcolor)},
                    new GradientStop{Offset = 100, Color = System.Drawing.ColorTranslator.ToHtml(color)}
                }
            });

            Sprite sector = this.Sector(350, 350, r, this.angle, this.angle + angleplus);
            sector.Fill = "url(#Grd" + i + ")";
            sector.Stroke = "#fff";
            sector.StrokeWidth = 3;

            draw.Items.Add(sector);

            Sprite text = new Sprite
            {
                SpriteID = "text" + i,
                Type = SpriteType.Text,
                X = Convert.ToInt32(350 + (r + delta + 55) * Math.Cos(-popangle * rad)),
                Y = Convert.ToInt32(350 + (r + delta + 25) * Math.Sin(-popangle * rad)),
                Text = item.First.ToString(),
                Fill = System.Drawing.ColorTranslator.ToHtml(bcolor),
                Stroke = "none",
                Opacity = 0,
                FontSize = "20"
            };

            draw.Items.Add(text);

            sector.Listeners.MouseOver.Handler = string.Format("onMouseOver(this, {0});", i);
            sector.Listeners.MouseOut.Handler = string.Format("onMouseOut(this, {0});", i);

            this.angle += angleplus;
            this.start += 0.1;
        }

        private Sprite Sector(int cx, int cy, int r, double startAngle, double endAngle)
        {
            double rad = Math.PI / 180;

            string x1 = JSON.Serialize(cx + r * Math.Cos(-startAngle * rad));
            string x2 = JSON.Serialize(cx + r * Math.Cos(-endAngle * rad));
            string y1 = JSON.Serialize(cy + r * Math.Sin(-startAngle * rad));
            string y2 = JSON.Serialize(cy + r * Math.Sin(-endAngle * rad));

            return new Sprite
            {
                Type = SpriteType.Path,
                Path = String.Join<string>(" ", new string[] { "M" + cx, cy.ToString(), "L" + x1, y1.ToString(), "A" + r, r.ToString(), "0", (endAngle - startAngle) > 180 ? "1" : "0", "0", x2, y2, "z" })
            };
        }

        public System.Drawing.Color ColorFromHSL(double h, double sl, double l)
        {
            double v;
            double r, g, b;

            r = l;
            g = l;
            b = l;
            v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);
            if (v > 0)
            {
                double m;
                double sv;
                int sextant;
                double fract, vsf, mid1, mid2;

                m = l + l - v;
                sv = (v - m) / v;
                h *= 6.0;
                sextant = (int)h;
                fract = h - sextant;
                vsf = v * sv * fract;
                mid1 = m + vsf;
                mid2 = v - vsf;
                switch (sextant)
                {
                    case 0:
                        r = v;
                        g = mid1;
                        b = m;
                        break;
                    case 1:
                        r = mid2;
                        g = v;
                        b = m;
                        break;
                    case 2:
                        r = m;
                        g = v;
                        b = mid1;
                        break;
                    case 3:
                        r = m;
                        g = mid2;
                        b = v;
                        break;
                    case 4:
                        r = mid1;
                        g = m;
                        b = v;
                        break;
                    case 5:
                        r = v;
                        g = m;
                        b = mid2;
                        break;
                }
            }
            return System.Drawing.Color.FromArgb(Convert.ToByte(r * 255.0f), Convert.ToByte(g * 255.0f), Convert.ToByte(b * 255.0f));
        }

        #endregion

        #region CCEPF153_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF153_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF153_View - Entrar");
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_ExamenClinico_FE();
                var Listar = new List<SS_HC_ExamenClinico_FE>();
                var ListarExamen = new List<SS_HC_ExamenClinico_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcExamenClinicoServiceFE.ExamenClinicoListar(LocalEnty).ToList();

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 2 && ENTITY_GLOBAL.Instance.TIPOATENCION != "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        //var objModel = new VW_ATENCIONPACIENTE();
                        //objModel.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //objModel.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
                        //objModel.Accion = "COMP_EXAMEN";
                        //objModel.TipoAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.TIPOATENCION);

                        //List<VW_ATENCIONPACIENTE> ListarEnfermedad = SvcVw_AtencionPaciente.listarVwAtencionPaciente(objModel, 0, 0);
                        //if (ListarEnfermedad.Count > 0)
                        //{
                        //    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //    LocalEnty.EpisodioClinico = (int)ListarEnfermedad[0].EpisodioClinico;
                        //    LocalEnty.IdEpisodioAtencion = (int)ListarEnfermedad[0].IdEpisodioAtencion;
                        //    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //    ListarExamen = SvcExamenClinicoServiceFE.ExamenClinicoListar(LocalEnty).ToList();
                        //}


                        var LocalEntyOA = new MA_MiscelaneosDetalle();
                        var ListarExamenClinico = new List<MA_MiscelaneosDetalle>();
                        LocalEntyOA.ACCION = "EXAMENCLINICOOA";
                        LocalEntyOA.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEntyOA.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEntyOA.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        ListarExamenClinico = SvcMiscelaneos.GetUpListadoServicios(LocalEntyOA).ToList();


                        if (ListarExamenClinico.Count > 0)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = (int)ListarExamenClinico[0].ValorEntero2;
                            LocalEnty.IdEpisodioAtencion = (int)ListarExamenClinico[0].ValorEntero3;
                            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            ListarExamen = SvcExamenClinicoServiceFE.ExamenClinicoListar(LocalEnty).ToList();
                            //SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnty).ToList();
                        }



                    }
                }

                bool hallado = false;
                if (ListarExamen.Count > 0)
                {

                    foreach (SS_HC_ExamenClinico_FE objEntity in ListarExamen)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "NUEVO";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        }
                    }
                }
                else if (Listar.Count > 0)
                {
                    foreach (SS_HC_ExamenClinico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            if (LocalEnty.IdExamenClinico != 0)
                            {
                                Session["id_examenclinico"] = LocalEnty.IdExamenClinico + "";
                            }
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF153_View", "", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF153_Save_ExamenClinico(SS_HC_ExamenClinico_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF153_Save_ExamenClinico - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        string idexamen = (string)Session["id_examenclinico"];
                        if (idexamen != null && idexamen != "")
                        {
                            objSave.IdExamenClinico = int.Parse(idexamen);
                            Session["id_examenclinico"] = null;
                        }
                        registro = SvcExamenClinicoServiceFE.setMantenimiento(objSave);
                        if (registro > 0)
                        {
                            SS_IT_SaludAnamnesisIngreso EntyMIrth = new SS_IT_SaludAnamnesisIngreso();
                            EntyMIrth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            EntyMIrth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            EntyMIrth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            EntyMIrth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            EntyMIrth.UsuarioCreacion = objSave.UsuarioCreacion;
                            EntyMIrth.FechaCreacion = objSave.FechaCreacion;
                            EntyMIrth.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            EntyMIrth.FechaModificacion = DateTime.Now;
                            EntyMIrth.Estado = 2;

                            EntyMIrth.EXAMENCLINICOOBS = objSave.Observacion;

                            var LocalFuncionesVit = new SS_HC_FuncionesVitales_FE();
                            var ListarFuncionesVit = new List<SS_HC_FuncionesVitales_FE>();
                            LocalFuncionesVit.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            LocalFuncionesVit.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalFuncionesVit.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalFuncionesVit.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalFuncionesVit.Accion = "LISTAR";
                            ListarFuncionesVit = SvcFuncionesVitalesFEService.listarEntidad(LocalFuncionesVit);
                            foreach (SS_HC_FuncionesVitales_FE ObjTraceFunc in ListarFuncionesVit)
                            {
                                EntyMIrth.PresionArterialMSD1 = ObjTraceFunc.PresionArterialMSD1.ToString();
                                EntyMIrth.PresionArterialMSD2 = ObjTraceFunc.PresionArterialMSD2;
                                EntyMIrth.PresionArterialMSI1 = ObjTraceFunc.PresionArterialMSI.ToString();
                                EntyMIrth.PresionArterialMSI2 = ObjTraceFunc.PresionArterialMS2.ToString();
                                EntyMIrth.FrecuenciaCardiaca = ObjTraceFunc.FrecuenciaCardiaca.ToString();
                                EntyMIrth.FrecuenciaRespiratoria = ObjTraceFunc.FrecuenciaRespiratoria;
                                EntyMIrth.Temperatura = ObjTraceFunc.Temperatura.ToString();
                                EntyMIrth.SaturacionOxigeno = ObjTraceFunc.SaturacionOxigeno;
                                EntyMIrth.Peso = ObjTraceFunc.Peso.ToString();
                                EntyMIrth.Talla = ObjTraceFunc.Talla.ToString();
                            }

                            var LocalEnfermedadAct = new SS_HC_EnfermedadActual_FE();
                            var ListarEnfermedadAct = new List<SS_HC_EnfermedadActual_FE>();
                            LocalEnfermedadAct.Accion = "LISTAR";
                            LocalEnfermedadAct.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnfermedadAct.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnfermedadAct.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalEnfermedadAct.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            ListarEnfermedadAct = SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnfermedadAct).ToList();

                            foreach (SS_HC_EnfermedadActual_FE ObjTraceEnfermedad in ListarEnfermedadAct)
                            {
                                EntyMIrth.RelatoCronologico = ObjTraceEnfermedad.RelatoCronologico;
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "1")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Horas";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "2")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Dias";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "3")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Semanas";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "4")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Meses";
                                }
                                if (ObjTraceEnfermedad.TiempoEnfermedadUnidad == "5")
                                {
                                    EntyMIrth.TiempoEnfermedadUnidad = "Años";
                                }
                                EntyMIrth.TiempoEnfermedad = ObjTraceEnfermedad.TiempoEnfermedad.ToString() + " " + EntyMIrth.TiempoEnfermedadUnidad;
                            }

                            Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_SaludAnamnesisIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(EntyMIrth));

                            ENTITY_GLOBAL.Instance.SaludInformeRutaIngresoMantenimiento_Flag = false;
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F153", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F153", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            return this.Direct();
        }

        #endregion


        /**FORMULARIOS III FASE*/
        #region CCEP00F3_FORMULARIO
        public System.Web.Mvc.ActionResult CCEP00F3_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEP00F3_View - Entrar");
                var LocalEnty = new SS_HC_AntecedentesPersonalesFisiologicos_FE();
                var Listar = new List<SS_HC_AntecedentesPersonalesFisiologicos_FE>();
                var ListarAUX = new List<SS_HC_AntecedentesPersonalesFisiologicos_FE>();
                bool HayData = false;
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvnAntecendentesPersonalesFisiologicosService.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_AntecedentesPersonalesFisiologicos_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                    HayData = true;
                    ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = LocalEnty.IdSecuencia;
                }



                LocalEnty.Version = "CCEP00F3";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    /*if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    else*/
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvnAntecendentesPersonalesFisiologicosService.listarEntidadTOP(LocalEnty);

                    if (ListarAUX.Count > 0)
                    {
                        LocalEnty.Accion = "LISTAR";
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvnAntecendentesPersonalesFisiologicosService.listarEntidad(LocalEnty);
                    }
                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_AntecedentesPersonalesFisiologicos_FE objEntity in Listar)
                        {
                            LocalEnty = objEntity;
                        }
                        LocalEnty.Accion = "NUEVO";
                        hallado = true;
                        HayData = true;
                        ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = LocalEnty.IdSecuencia;
                    }

                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    LocalEnty.Version = "CCEP00F3";

                }

                ///////////////////////////////////////////////////////////////////////////////

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_AntecedentesPersonalesFisiologicos_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_FISIOLOGICOS, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_AntecedentesPersonalesFisiologicos_FE> objListaAnt2 = (List<SS_HC_AntecedentesPersonalesFisiologicos_FE>)objetoGen;
                        /* Listar.AddRange(ListarCopy);*/
                        if (objListaAnt2.Count > 0)
                        {
                            LocalEnty = objListaAnt2[0];
                            if (hallado == false)
                            {
                                LocalEnty.Accion = "NUEVO";
                                if (ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX != null)
                                {
                                    LocalEnty.IdSecuencia = (int)ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX;
                                }
                                else
                                {
                                    ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = objListaAnt2[0].IdSecuencia;
                                }


                            }
                            else { LocalEnty.IdSecuencia = (int)ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX; }
                        }

                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }

                ///////////////////////////////////////////////



                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEP00F3_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }


        }

        public System.Web.Mvc.ActionResult CCEP00F3_Save_AntecendentesPersonales_Fisiologicos(SS_HC_AntecedentesPersonalesFisiologicos_FE objSave)
        {
            Log.Information("HClinicaController - CCEP00F3_Save_AntecendentesPersonales_Fisiologicos - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1) { X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show(); }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";
                        //#region Validacion
                        //if (objSave.GrupoSanguineo == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Grupo Sanguíneo", "ERROR", false); }
                        //if (objSave.FactorRH == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Factor RH", "ERROR", false); }
                        //if (objSave.Alcohol == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Alcohol.", "ERROR", false); }
                        //if (objSave.Alcohol.Trim() == "S")
                        //{
                        //    if (objSave.Alcohol_EspecificarCantidad == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Especificar Tipo y Cantidad.", "ERROR", false); }
                        //}
                        //if (objSave.Tabaco_flag == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Tabaco.", "ERROR", false); }
                        //if (objSave.Tabaco_flag.Trim() == "S")
                        //{
                        //    if (objSave.Tabaco_NroCigarrillos == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Nro de cigarrillos.", "ERROR", false); }
                        //    if (objSave.TiempoConsumo == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Tiempo de Consumo.", "ERROR", false); }
                        //}
                        //if (objSave.Drogas_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Drogas.", "ERROR", false); }
                        //if (objSave.Drogas_flag.Trim() == "S")
                        //{
                        //    if (objSave.Drogas_Especificar == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Especificar drogas.", "ERROR", false); }
                        //}
                        //if (objSave.Cafe_flag == null)
                        //{
                        //    eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Café", "ERROR", false);
                        //}
                        //if (objSave.ActividadFisica_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Actividad física: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ActividadFisica_flag.Trim() == "S")
                        //{
                        //    if (objSave.ActividadFisica_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Actividad física: Ocasional o Regularmente", "ERROR", false); }
                        //}
                        //if (objSave.ConsumoVerduras_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de verduras: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ConsumoVerduras_flag.Trim() == "S")
                        //{
                        //    if (objSave.ConsumoVerduras_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de verduras: Ocasional o Regularmente", "ERROR", false); }
                        //}
                        //if (objSave.ConsumoFrutas_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de frutas: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ConsumoFrutas_flag.Trim() == "S")
                        //{
                        //    if (objSave.ConsumoFrutas_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de frutas: Ocasional o Regularmente", "ERROR", false); }
                        //}
                        //#endregion


                        #region Validacion
                        int g1 = 0, g2 = 0, g3 = 0, g4 = 0, g5 = 0, g6 = 0, g7 = 0, g8 = 0, g9 = 0, g10 = 0, g11 = 0, g12 = 0, g13 = 0, g14 = 0, g15 = 0, g16 = 0;
                        if (objSave.GrupoSanguineo == null || objSave.GrupoSanguineo == "")
                        {
                            g1 = 1;
                            mensage = "Debe ingresar el campo: Grupo Sanguíneo";
                        }
                        if (objSave.FactorRH == null || objSave.FactorRH == "")
                        {
                            g2 = 1;
                            mensage = mensage + " \n " + " Debe ingresar el campo: Factor RH";
                        }
                        if (objSave.Alcohol == null || objSave.Alcohol == "")
                        {
                            g3 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo: Alcohol.";
                        }
                        else
                        {
                            if (objSave.Alcohol.Trim() == "S")
                            {
                                if (objSave.Alcohol_EspecificarCantidad == null || objSave.Alcohol_EspecificarCantidad == "")
                                {
                                    g4 = 1;
                                    mensage = mensage + " \n " + " Debe ingresar el campo: Especificar Tipo y Cantidad.";
                                }
                            }
                        }
                        if (objSave.Tabaco_flag == null || objSave.Tabaco_flag == "")
                        {
                            g5 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo: Tabaco.";
                        }
                        else
                        {
                            if (objSave.Tabaco_flag.Trim() == "S")
                            {
                                if (objSave.Tabaco_NroCigarrillos == null || objSave.Tabaco_NroCigarrillos == "")
                                {
                                    g6 = 1;
                                    mensage = mensage + " \n " + " Debe ingresar el campo: Nro de cigarrillos.";
                                }
                                if (objSave.TiempoConsumo == null || objSave.TiempoConsumo == "")
                                {
                                    g7 = 1;
                                    mensage = mensage + " \n " + " Debe ingresar el campo: Tiempo de Consumo.";
                                }
                            }
                        }
                        if (objSave.Drogas_flag == null || objSave.Drogas_flag == "")
                        {
                            g8 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo: Drogas.";
                        }
                        else
                        {
                            if (objSave.Drogas_flag.Trim() == "S")
                            {
                                if (objSave.Drogas_Especificar == null || objSave.Drogas_Especificar == "")
                                {
                                    g9 = 1;
                                    mensage = mensage + " \n " + " Debe ingresar el campo: Especificar drogas.";
                                }
                            }
                        }
                        if (objSave.Cafe_flag == null || objSave.Cafe_flag == "")
                        {
                            g10 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo: Café";
                        }
                        if (objSave.ActividadFisica_flag == null || objSave.ActividadFisica_flag == "")
                        {
                            g11 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Actividad física: Ninguna o Si";
                        }
                        else
                        {
                            if (objSave.ActividadFisica_flag.Trim() == "S")
                            {
                                if (objSave.ActividadFisica_subflag == null || objSave.ActividadFisica_subflag == "")
                                {
                                    g12 = 1;
                                    mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Actividad física: Ocasional o Regularmente";
                                }
                            }
                        }
                        if (objSave.ConsumoVerduras_flag == null)
                        {
                            g13 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Consumo de verduras: Ninguna o Si";
                        }
                        else
                        {
                            if (objSave.ConsumoVerduras_flag.Trim() == "S")
                            {
                                if (objSave.ConsumoVerduras_subflag == null || objSave.ConsumoVerduras_subflag == "")
                                {
                                    g14 = 1;
                                    mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Consumo de verduras: Ocasional o Regularmente";
                                }
                            }
                        }
                        if (objSave.ConsumoFrutas_flag == null || objSave.ConsumoFrutas_flag == "")
                        {
                            g15 = 1;
                            mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Consumo de frutas: Ninguna o Si";
                        }
                        else
                        {
                            if (objSave.ConsumoFrutas_flag.Trim() == "S")
                            {
                                if (objSave.ConsumoFrutas_subflag == null || objSave.ConsumoFrutas_subflag == "")
                                {
                                    g16 = 1;
                                    mensage = mensage + " \n " + " Debe seleccionar una opción en el campo Consumo de frutas: Ocasional o Regularmente";
                                }
                            }
                        }

                        //if (objSave.FactorRH == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Factor RH", "ERROR", false); }
                        //if (objSave.Alcohol == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Alcohol.", "ERROR", false); }
                        //if (objSave.Alcohol.Trim() == "S")
                        //{
                        //    if (objSave.Alcohol_EspecificarCantidad == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Especificar Tipo y Cantidad.", "ERROR", false); }
                        //}
                        //if (objSave.Tabaco_flag == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Tabaco.", "ERROR", false); }
                        //if (objSave.Tabaco_flag.Trim() == "S")
                        //{
                        //    if (objSave.Tabaco_NroCigarrillos == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Nro de cigarrillos.", "ERROR", false); }
                        //    if (objSave.TiempoConsumo == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Tiempo de Consumo.", "ERROR", false); }
                        //}
                        //if (objSave.Drogas_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Drogas.", "ERROR", false); }
                        //if (objSave.Drogas_flag.Trim() == "S")
                        //{
                        //    if (objSave.Drogas_Especificar == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe ingresar el campo: Especificar drogas.", "ERROR", false); }
                        //}
                        //if (objSave.Cafe_flag == null)
                        //{
                        //    eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo: Café", "ERROR", false);
                        //}
                        //if (objSave.ActividadFisica_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Actividad física: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ActividadFisica_flag.Trim() == "S")
                        //{
                        //    if (objSave.ActividadFisica_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Actividad física: Ocasional o Regularmente", "ERROR", false); }
                        //}
                        //if (objSave.ConsumoVerduras_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de verduras: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ConsumoVerduras_flag.Trim() == "S")
                        //{
                        //    if (objSave.ConsumoVerduras_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de verduras: Ocasional o Regularmente", "ERROR", false); }
                        //}
                        //if (objSave.ConsumoFrutas_flag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de frutas: Ninguna o Si", "ERROR", false); }
                        //if (objSave.ConsumoFrutas_flag.Trim() == "S")
                        //{
                        //    if (objSave.ConsumoFrutas_subflag == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Debe seleccionar una opción en el campo Consumo de frutas: Ocasional o Regularmente", "ERROR", false); }
                        //}

                        if (g1 == 1 || g2 == 1 || g3 == 1 || g4 == 1 || g5 == 1 || g6 == 1 || g7 == 1 || g8 == 1 || g9 == 1 || g10 == 1 || g11 == 1 || g12 == 1 || g13 == 1 || g14 == 1 || g15 == 1 || g16 == 1)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", mensage, "ERROR", false);
                        }
                        #endregion


                        registro = SvnAntecendentesPersonalesFisiologicosService.setMantenimiento(objSave);


                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {

                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF004_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF004_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF004_View - Entrar");
                var LocalEnty = new SS_HC_Ant_Fisiologico_Pediatrico_FE();
                var Listar = new List<SS_HC_Ant_Fisiologico_Pediatrico_FE>();
                var ListarAUX = new List<SS_HC_Ant_Fisiologico_Pediatrico_FE>();

                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcAntecedentesFisiologicoPediatricoFE.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Ant_Fisiologico_Pediatrico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF004";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcAntecedentesFisiologicoPediatricoFE.listarEntidadTOP(LocalEnty);

                    if (ListarAUX.Count > 0)
                    {
                        LocalEnty.Accion = "LISTAR";
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion - 1;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcAntecedentesFisiologicoPediatricoFE.listarEntidad(LocalEnty);
                    }
                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_Ant_Fisiologico_Pediatrico_FE objEntity in Listar)
                        {
                            LocalEnty = objEntity;
                        }
                        LocalEnty.Accion = "NUEVO";
                        hallado = true;
                    }

                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    LocalEnty.Version = "CCEPF004";
                }

                ///////////////////////////////////////////////////////////////////////////////





                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Ant_Fisiologico_Pediatrico_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_FISIOLOGICOS_PE, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Ant_Fisiologico_Pediatrico_FE> objListaAnt2 = (List<SS_HC_Ant_Fisiologico_Pediatrico_FE>)objetoGen;
                        /* Listar.AddRange(ListarCopy);*/
                        if (objListaAnt2.Count > 0)
                        {
                            LocalEnty = objListaAnt2[0];
                            if (hallado == false)
                            {
                                LocalEnty.Accion = "NUEVO";
                            }
                        }

                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";

                }

                ///////////////////////////////////////////////


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF004_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }


        }
        public System.Web.Mvc.ActionResult CCEP00F4_Save_Ant_Fisiologico_Pediatrico_FE(SS_HC_Ant_Fisiologico_Pediatrico_FE objSave)
        {
            Log.Information("HClinicaController - CCEP00F4_Save_Ant_Fisiologico_Pediatrico_FE - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        //#region Validaciones
                        //if (objSave.Gravidez < objSave.Paridad_4)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, la gravidez debe ser mayor o igual a la paridad", "ERROR", false);
                        //}

                        //if (objSave.Peso == null && objSave.PesoNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el peso al nacer o ingrese datos", "ERROR", false);
                        //}

                        //if (objSave.Talla == null && objSave.TallaNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el talla al nacer o ingrese datos", "ERROR", false);
                        //}

                        //if (objSave.PCNacer == null && objSave.PCNacerNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el PC al nacer o ingrese datos", "ERROR", false);
                        //}

                        //if (objSave.APGAR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona el campo APGAR", "ERROR", false);
                        //}


                        //if (objSave.Lactancia == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona el campo lactancia", "ERROR", false);
                        //}
                        //#endregion

                        #region validacion

                        int g1 = 0, g2 = 0, g3 = 0, g4 = 0, g5 = 0, g6 = 0;
                        string mensage = "";
                        if (objSave.Gravidez < objSave.Paridad_4)
                        {
                            g1 = 1;
                            mensage = "Por favor, la gravidez debe ser mayor o igual a la paridad";
                        }
                        if (objSave.Peso == null && objSave.PesoNR == null)
                        {
                            g2 = 1;
                            mensage = mensage + "\n" + " Por favor, selecciona no recuerda el peso al nacer o ingrese datos";
                        }
                        if (objSave.Talla == null && objSave.TallaNR == null)
                        {
                            g3 = 1;
                            mensage = mensage + "\n" + "Por favor, selecciona no recuerda el talla al nacer o ingrese datos";
                        }
                        if (objSave.PCNacer == null && objSave.PCNacerNR == null)
                        {
                            g4 = 1;
                            mensage = mensage + "\n" + "Por favor, selecciona no recuerda el PC al nacer o ingrese datos";
                        }
                        if (objSave.APGAR == null)
                        {
                            g5 = 1;
                            mensage = mensage + "\n" + "Por favor, selecciona el campo APGAR";
                        }

                        if (objSave.Lactancia == null)
                        {
                            g6 = 1;
                            mensage = mensage + "\n" + "Por favor, selecciona el campo lactancia";
                        }

                        //if (objSave.Gravidez < objSave.Paridad_4)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, la gravidez debe ser mayor o igual a la paridad", "ERROR", false);
                        //}
                        //if (objSave.Peso == null && objSave.PesoNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el peso al nacer o ingrese datos", "ERROR", false);
                        //}
                        //if (objSave.Talla == null && objSave.TallaNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el talla al nacer o ingrese datos", "ERROR", false);
                        //}
                        //if (objSave.PCNacer == null && objSave.PCNacerNR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona no recuerda el PC al nacer o ingrese datos", "ERROR", false);
                        //}
                        //if (objSave.APGAR == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona el campo APGAR", "ERROR", false);
                        //}

                        //if (objSave.Lactancia == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Por favor, selecciona el campo lactancia", "ERROR", false);
                        //}
                        if (g1 == 1 || g2 == 1 || g3 == 1 || g4 == 1 || g5 == 1 || g6 == 1)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", mensage, "ERROR", false);
                        }

                        #endregion

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        //string mensage = "";

                        registro = SvcAntecedentesFisiologicoPediatricoFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro ";

                            else
                                mensage = "actualizo ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + "el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF006_FORMULARIO
        //Antecedentes Personales - Inmunizaciones Adulto F06 (SS_HC_Anam_AP_PatologicosGenerales_FE)
        public System.Web.Mvc.ActionResult CCEPF006_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF006_View - Entrar");
                Session["DataPatologicosGeneralesDelete"] = null;
                // DataInmunizacionesAdulDelete x  DataPatologicosGeneralesDelete
                ENTITY_GLOBAL.Instance.bitacora = 3;
                SS_HC_Anam_AP_PatologicosGenerales_FE LocalObj = null;
                var LocalEnty = new SS_HC_Anam_AP_PatologicosGenerales_FE();
                var Listar = new List<SS_HC_Anam_AP_PatologicosGenerales_FE>();
                var ListarAUX = new List<SS_HC_Anam_AP_PatologicosGenerales_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcPatologicosGeneralesFEService.listarEntidad(LocalEnty);


                String version = "CCEPF006";
                if (Listar.Count > 0)
                {
                    int contador = 0;

                    foreach (SS_HC_Anam_AP_PatologicosGenerales_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1 /*&& ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                {
                    LocalEnty.Accion = "LISTARTOP";
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                    {
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    }
                    ListarAUX = SvcPatologicosGeneralesFEService.listarEntidad(LocalEnty);

                    if (ListarAUX.Count > 0)
                    {
                        LocalEnty.Accion = "LISTAR";
                        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                        {
                            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnty.EpisodioClinico = ListarAUX[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnty.IdEpisodioAtencion = ListarAUX[0].IdEpisodioAtencion;// (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalEnty.UnidadReplicacion = ListarAUX[0].UnidadReplicacion;
                        }
                        Listar = SvcPatologicosGeneralesFEService.listarEntidad(LocalEnty);
                    }
                    if (Listar.Count > 0)
                    {
                        foreach (SS_HC_Anam_AP_PatologicosGenerales_FE intobj in Listar)
                        {
                            //obtemp = new SS_HC_Alergia_FE();
                            LocalEnty = intobj;
                            LocalEnty.Version = "CCEPF006";
                            LocalEnty.Accion = "NUEVO";
                            // LocalEnty.Add(obtemp);
                        }
                    }
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }

                }

                ///////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Anam_AP_PatologicosGenerales_FE>)getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_PATOLOGICOS_GE, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_Anam_AP_PatologicosGenerales_FE> objListaAnt2 = (List<SS_HC_Anam_AP_PatologicosGenerales_FE>)objetoGen;

                        if (objListaAnt2.Count > 0)
                        {
                            //SS_HC_Alergia_FE obtemp;
                            foreach (SS_HC_Anam_AP_PatologicosGenerales_FE intobj in objListaAnt2)
                            {
                                //obtemp = new SS_HC_Alergia_FE();
                                LocalEnty = intobj;
                                LocalEnty.Version = "CCEPF006";
                                LocalEnty.Accion = "NUEVO";
                                // LocalEnty.Add(obtemp);
                            }
                        }
                    }
                }
                ///////////////////////////////////////////////



                /*********contenedor 1************/
                if (LocalEnty.EnfermedadesAnteriores_rb == "N" || LocalEnty.EnfermedadesAnteriores_rb == "X" || LocalEnty.EnfermedadesAnteriores_rb == null)
                {
                    var fsUno = this.GetCmp<FieldSet>("fsVacuna");

                    var fsDos = this.GetCmp<FieldSet>("fsOtras");
                    fsUno.Hidden = true;
                    fsDos.Hidden = true;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = true;
                }
                else if (LocalEnty.EnfermedadesAnteriores_rb == "S")
                {
                    var fsUnoRR = this.GetCmp<FieldSet>("fsVacuna");
                    var fsDosRR = this.GetCmp<FieldSet>("fsOtras");
                    fsUnoRR.Hidden = false;
                    fsDosRR.Hidden = false;

                    var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                    cmdUno.Disabled = false;
                }


                // Enfermedades
                if (LocalEnty.HipertensionSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE1").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio1").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel1").Disabled = false;
                    this.GetCmp<FieldSet>("listTD1").Disabled = false;
                }
                else if (LocalEnty.HipertensionSeleccion_ckb == "N" || LocalEnty.HipertensionSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE1").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio1").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel1").Disabled = true;
                    this.GetCmp<FieldSet>("listTD1").Disabled = true;
                }


                if (LocalEnty.DiabetesSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE2").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio2").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel2").Disabled = false;
                    this.GetCmp<FieldSet>("listTD2").Disabled = false;
                }
                else if (LocalEnty.DiabetesSeleccion_ckb == "N" || LocalEnty.DiabetesSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE2").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio2").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel2").Disabled = true;
                    this.GetCmp<FieldSet>("listTD2").Disabled = true;
                }

                if (LocalEnty.AsmaSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE3").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio3").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel3").Disabled = false;
                    this.GetCmp<FieldSet>("listTD3").Disabled = false;
                }
                else if (LocalEnty.AsmaSeleccion_ckb == "N" || LocalEnty.AsmaSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE3").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio3").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel3").Disabled = true;
                    this.GetCmp<FieldSet>("listTD3").Disabled = true;
                }

                if (LocalEnty.SindromeCSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE4").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio4").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel4").Disabled = false;
                    this.GetCmp<FieldSet>("listTD4").Disabled = false;
                }
                else if (LocalEnty.SindromeCSeleccion_ckb == "N" || LocalEnty.SindromeCSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE4").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio4").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel4").Disabled = true;
                    this.GetCmp<FieldSet>("listTD4").Disabled = true;
                }

                if (LocalEnty.SindromeRSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE5").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio5").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel5").Disabled = false;
                    this.GetCmp<FieldSet>("listTD5").Disabled = false;
                }
                else if (LocalEnty.SindromeRSeleccion_ckb == "N" || LocalEnty.SindromeRSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE5").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio5").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel5").Disabled = true;
                    this.GetCmp<FieldSet>("listTD5").Disabled = true;
                }

                if (LocalEnty.GastritisSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE6").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio6").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel6").Disabled = false;
                    this.GetCmp<FieldSet>("listTD6").Disabled = false;
                }
                else if (LocalEnty.GastritisSeleccion_ckb == "N" || LocalEnty.GastritisSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE6").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio6").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel6").Disabled = true;
                    this.GetCmp<FieldSet>("listTD6").Disabled = true;
                }

                if (LocalEnty.ArritmiaSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE7").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio7").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel7").Disabled = false;
                    this.GetCmp<FieldSet>("listTD7").Disabled = false;
                }
                else if (LocalEnty.ArritmiaSeleccion_ckb == "N" || LocalEnty.ArritmiaSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE7").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio7").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel7").Disabled = true;
                    this.GetCmp<FieldSet>("listTD7").Disabled = true;
                }

                if (LocalEnty.HepatitisSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE8").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio8").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel8").Disabled = false;
                    this.GetCmp<FieldSet>("listTD8").Disabled = false;
                }
                else if (LocalEnty.HepatitisSeleccion_ckb == "N" || LocalEnty.HepatitisSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE8").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio8").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel8").Disabled = true;
                    this.GetCmp<FieldSet>("listTD8").Disabled = true;
                }

                if (LocalEnty.TuberculosisSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE9").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio9").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel9").Disabled = false;
                    this.GetCmp<FieldSet>("listTD9").Disabled = false;
                }
                else if (LocalEnty.TuberculosisSeleccion_ckb == "N" || LocalEnty.TuberculosisSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE9").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio9").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel9").Disabled = true;
                    this.GetCmp<FieldSet>("listTD9").Disabled = true;
                }

                if (LocalEnty.HipertiroidismoSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE10").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio10").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel10").Disabled = false;
                    this.GetCmp<FieldSet>("listTD10").Disabled = false;
                }
                else if (LocalEnty.HipertiroidismoSeleccion_ckb == "N" || LocalEnty.HipertiroidismoSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE10").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio10").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel10").Disabled = true;
                    this.GetCmp<FieldSet>("listTD10").Disabled = true;
                }

                if (LocalEnty.HipotiroidismoSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE11").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio11").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel11").Disabled = false;
                    this.GetCmp<FieldSet>("listTD11").Disabled = false;
                }
                else if (LocalEnty.HipotiroidismoSeleccion_ckb == "N" || LocalEnty.HipotiroidismoSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE11").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio11").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel11").Disabled = true;
                    this.GetCmp<FieldSet>("listTD11").Disabled = true;
                }

                if (LocalEnty.InfeccionSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE12").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio12").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel12").Disabled = false;
                    this.GetCmp<FieldSet>("listTD12").Disabled = false;
                }
                else if (LocalEnty.InfeccionSeleccion_ckb == "N" || LocalEnty.InfeccionSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE12").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio12").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel12").Disabled = true;
                    this.GetCmp<FieldSet>("listTD12").Disabled = true;
                }

                if (LocalEnty.CardiopatiasSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE13").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio13").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel13").Disabled = false;
                    this.GetCmp<FieldSet>("listTD13").Disabled = false;
                }
                else if (LocalEnty.CardiopatiasSeleccion_ckb == "N" || LocalEnty.CardiopatiasSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE13").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio13").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel13").Disabled = true;
                    this.GetCmp<FieldSet>("listTD13").Disabled = true;
                }

                if (LocalEnty.EtransmisionSSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE14").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio14").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel14").Disabled = false;
                    this.GetCmp<FieldSet>("listTD14").Disabled = false;
                }
                else if (LocalEnty.EtransmisionSSeleccion_ckb == "N" || LocalEnty.EtransmisionSSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE14").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio14").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel14").Disabled = true;
                    this.GetCmp<FieldSet>("listTD14").Disabled = true;
                }

                if (LocalEnty.DShipoacusiaSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE15").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio15").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel15").Disabled = false;
                    this.GetCmp<FieldSet>("listTD15").Disabled = false;
                }
                else if (LocalEnty.DShipoacusiaSeleccion_ckb == "N" || LocalEnty.DShipoacusiaSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE15").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio15").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel15").Disabled = true;
                    this.GetCmp<FieldSet>("listTD15").Disabled = true;
                }

                if (LocalEnty.DScegueraSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE16").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio16").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel16").Disabled = false;
                    this.GetCmp<FieldSet>("listTD16").Disabled = false;
                }
                else if (LocalEnty.DScegueraSeleccion_ckb == "N" || LocalEnty.DScegueraSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE16").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio16").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel16").Disabled = true;
                    this.GetCmp<FieldSet>("listTD16").Disabled = true;
                }

                if (LocalEnty.DSSordoMudoSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE17").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio17").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel17").Disabled = false;
                    this.GetCmp<FieldSet>("listTD17").Disabled = false;
                }
                else if (LocalEnty.DSSordoMudoSeleccion_ckb == "N" || LocalEnty.DSSordoMudoSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE17").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio17").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel17").Disabled = true;
                    this.GetCmp<FieldSet>("listTD17").Disabled = true;
                }

                if (LocalEnty.DSMiopiaAltaSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE18").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio18").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel18").Disabled = false;
                    this.GetCmp<FieldSet>("listTD18").Disabled = false;
                }
                else if (LocalEnty.DSMiopiaAltaSeleccion_ckb == "N" || LocalEnty.DSMiopiaAltaSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE18").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio18").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel18").Disabled = true;
                    this.GetCmp<FieldSet>("listTD18").Disabled = true;
                }

                if (LocalEnty.CancerSeleccion_ckb == "N")
                {
                    this.GetCmp<FieldSet>("listTE19").Disabled = false;
                    this.GetCmp<FieldSet>("IdRadio19").Disabled = false;
                    this.GetCmp<FieldSet>("IdNivel19").Disabled = false;
                    this.GetCmp<FieldSet>("listTD19").Disabled = false;
                }
                else if (LocalEnty.CancerSeleccion_ckb == "N" || LocalEnty.CancerSeleccion_ckb == null)
                {
                    this.GetCmp<FieldSet>("listTE19").Disabled = true;
                    this.GetCmp<FieldSet>("IdRadio19").Disabled = true;
                    this.GetCmp<FieldSet>("IdNivel19").Disabled = true;
                    this.GetCmp<FieldSet>("listTD19").Disabled = true;
                }



                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/


                return View("FormulariosExtras/CCEPF006_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF006_getGrillaPatologicosGenerales()
        //public System.Web.Mvc.ActionResult CCEPF006_getGrillaPatologicosGenerales(string agente, string tipoagente, string codagente)
        {
            Log.Information("HClinicaController - CCEPF006_getGrillaPatologicosGenerales - Entrar");

            ENTITY_GLOBAL.Instance.INDICA_RECARGAR = 0;
            // Anterior Inicio
            //ENTITY_GLOBAL.Instance.GRUPO = "";
            //var Listar = new List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE>();
            //var LocalEnty = new SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE();


            //LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            //LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            //LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            //LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

            //LocalEnty.Accion = "LISTAR";

            //Listar = SvcPatologicosGeneralesFEService.listarDetalle(LocalEnty, 0, 0);

            //foreach (var objData in Listar)
            //{
            //}
            //return this.Store(Listar);
            // Anterior Fin

            try
            {
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "PATOGRAL";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var ALGO in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";/* Listar[x].CodigoTabla;*/
                        x = x + 1;
                    }
                }

                //////////// OBTENER DATOS DEL EPISODIO ANTERIOR ///// ADD ORLANDO ////////////
                if (Listar.Count < 1)
                {
                    /* List<MA_MiscelaneosDetalle> objListaAntAUX;*/
                    List<SS_HC_Anam_AP_PatologicosGenerales_FE> objListaAntAUX;
                    List<MA_MiscelaneosDetalle> objListaAnt;

                    var LocalEntyTemp = new SS_HC_Anam_AP_PatologicosGenerales_FE();



                    LocalEntyTemp.Accion = "LISTARTOP";
                    LocalEntyTemp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEntyTemp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEntyTemp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEntyTemp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;


                    objListaAntAUX = SvcPatologicosGeneralesFEService.listarEntidad(LocalEntyTemp);
                    /*objListaAntAUX = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();*/

                    if (objListaAntAUX.Count > 0)
                    {

                        LocalEnty.ACCION = "PATOGRAL";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = objListaAntAUX[0].EpisodioClinico.ToString().Trim(); ;// ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo3 = objListaAntAUX[0].IdEpisodioAtencion.ToString().Trim(); ;// (ENTITY_GLOBAL.Instance.EpisodioAtencion - 1).ToString().Trim();
                        LocalEnty.ValorCodigo5 = objListaAntAUX[0].UnidadReplicacion.Trim();
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        objListaAnt = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                        if (objListaAnt.Count > 0)
                        {
                            foreach (MA_MiscelaneosDetalle intobj in objListaAnt)
                            {
                                var obtemp = new MA_MiscelaneosDetalle();
                                //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();
                                obtemp = intobj;
                                obtemp.ACCION = "NUEVO";
                                Listar.Add(obtemp);
                            }
                        }
                    }

                }
                //////////////////////////////////////////////////////////////////////////////




                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<MA_MiscelaneosDetalle>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_PATOLOGICOS_GE, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> objListaAnt2 = (List<MA_MiscelaneosDetalle>)objetoGen;
                        /* Listar.AddRange(ListarCopy);*/
                        if (objListaAnt2.Count > 0)
                        {
                            //Listar = objListaAnt2;
                            foreach (MA_MiscelaneosDetalle intobj in objListaAnt2)
                            {
                                var obtemp = new MA_MiscelaneosDetalle();
                                //LocalEnty.TieneHistoria = intobj.TieneHistoria.Trim();
                                obtemp = intobj;
                                obtemp.ACCION = "NUEVO";
                                Listar.Add(obtemp);
                            }
                        }

                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }

                ///////////////////////////////////////////////
                if (Listar.Count > 0)
                {

                    foreach (var ALGO in Listar)
                    {

                        if (ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX == null)
                        {
                            ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = Convert.ToInt32(ALGO.ValorCodigo3);
                        }
                        else
                        {
                            if (ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX < Convert.ToInt32(ALGO.ValorCodigo3))
                            {
                                ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = Convert.ToInt32(ALGO.ValorCodigo3);
                            }
                        }
                    }
                }
                else
                {
                    ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX = 0;
                }





                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF006add_DataDeletePatologicosGenerales(String MODO, string codigo, string secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF006add_DataDeletePatologicosGenerales - Entrar");

            List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["DataPatologicosGeneralesDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE>)Session["DataPatologicosGeneralesDelete"];
                }
                else
                {
                    dataDelete = new List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE>();
                }

                SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE objDelete = new SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE();

                if (accion.Trim() != "NUEVO")
                {
                    objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                    objDelete.Accion = MODO; //"DELETEDETALLE"
                    objDelete.Secuencia = Convert.ToInt32(secuencia);


                    dataDelete.Add(objDelete);
                }

                Session["DataPatologicosGeneralesDelete"] = dataDelete;

            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF006_Save_PatologicosGenerales(SS_HC_Anam_AP_PatologicosGenerales_FE objSave, String selectionArray1, String text)
        {
            Log.Information("HClinicaController - CCEPF006_Save_PatologicosGenerales - Entrar");
            // TRABA (2016.10.12-06:16)
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;

            if (selectionArray1 != null)
            {
                List<MA_MiscelaneosDetalle> ObjListar0 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));
                bool valido = true;
                foreach (MA_MiscelaneosDetalle objEntity in ObjListar0)
                {
                    if (objEntity.ValorCodigo1 == null || objEntity.ValorCodigo1 == "" || objEntity.ValorCodigo1.Trim().Length < 1)
                    {
                        valido = false;
                    }
                }
                if (valido == false)
                {

                    var mensajes = "";
                    mensajes = mensajes + "*" + "Debe ingresar un diagnostico" + "\n";
                    ENTITY_GLOBAL.Instance.INDICA_RECARGAR = 0;
                    Session["ValoresTemporal"] = null;
                    /*eventoPostFormulario(false, "");*/
                    /* var Comentario = X.GetCmp<TextArea>("taAlerts");
                     Comentario.SetValue(mensajes);
                     Comentario.Visible = true;*/
                    eventoPostFormulario(true, "");
                    return this.Direct();
                }
            }

            if (text == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {


                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE> ObjDetalle = new List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE>();

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            // Bloque UPDATE Y INSERT

                            if (valoreArray == null)
                            {
                                return this.Direct();
                            }



                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                            var objPatologicosDetalle = new SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE();


                            if (objSave.EnfermedadesAnteriores_rb == null)
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Mensaje", "Por favor seleccionar: Enfermedades anteriores", "ERROR", false);
                            }
                            else if (objSave.EnfermedadesAnteriores_rb == "S")
                            {


                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF006
                                objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objSave.Accion == "NUEVO") { objSave.FechaCreacion = DateTime.Now; }
                                objSave.FechaModificacion = DateTime.Now;

                                #region Validacion_Checkbox_Vacios

                                if ((
                                    objSave.HipertensionSeleccion_ckb == null &&
                                    objSave.DiabetesSeleccion_ckb == null &&
                                    objSave.AsmaSeleccion_ckb == null &&
                                    objSave.SindromeCSeleccion_ckb == null &&
                                    objSave.SindromeRSeleccion_ckb == null &&
                                    objSave.GastritisSeleccion_ckb == null &&
                                    objSave.ArritmiaSeleccion_ckb == null &&
                                    objSave.HepatitisSeleccion_ckb == null &&
                                    objSave.TuberculosisSeleccion_ckb == null &&
                                    objSave.HipertiroidismoSeleccion_ckb == null &&
                                    objSave.HipotiroidismoSeleccion_ckb == null &&
                                    objSave.InfeccionSeleccion_ckb == null &&
                                    objSave.CardiopatiasSeleccion_ckb == null &&
                                    objSave.EtransmisionSSeleccion_ckb == null &&
                                    objSave.DShipoacusiaSeleccion_ckb == null &&
                                    objSave.DScegueraSeleccion_ckb == null &&
                                    objSave.DSSordoMudoSeleccion_ckb == null &&
                                    objSave.DSMiopiaAltaSeleccion_ckb == null &&
                                    objSave.CancerSeleccion_ckb == null) && (ObjListar.Count == 0)

                                    )
                                {
                                    eventoPostFormulario(true, "");
                                    return showMensajeNotifyData("Mensaje", "Por favor ingresar al menos una enfermedad", "ERROR", false);

                                }

                                if (objSave.HipertensionSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.HipertensionTiempoenfermedad_list == null ||
                                    //    objSave.HipertensionMedicacion_rb == null
                                    //    //||
                                    //    //objSave.HipertensionTipoDiagn_list == null
                                    //    ) || (objSave.HipertensionMedicacion_rb == "S" && objSave.HipertensionMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Hipertensión arterial: Ingresar datos en el detalle", "ERROR", false);
                                    //}


                                }
                                else
                                {
                                    //var cmdUno = this.GetCmp<FieldSet>("cmdServicios");
                                    // this.GetCmp<FieldSet>("listTE1").Disabled = true;
                                    objSave.HipertensionTiempoenfermedad_list = null;
                                    objSave.HipertensionMedicacion_rb = null;
                                    objSave.HipertensionMedicacion_txt = null;
                                    //objSave.HipertensionTipoDiagn_list = null;
                                }



                                if (objSave.DiabetesSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.DiabetesTiempoenfermedad_list == null ||
                                    //    objSave.DiabetesMedicacion_rb == null //||
                                    //    //objSave.DiabetesTipoDiagn_list == null
                                    //    ) || (objSave.DiabetesMedicacion_rb == "S" && objSave.DiabetesMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Diabetes Mellitus: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.AsmaSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.AsmaTiempoenfermedad_list == null ||
                                    //    objSave.AsmaMedicacion_rb == null //||
                                    //    //objSave.AsmaTipoDiagn_list == null
                                    //    ) || (objSave.AsmaMedicacion_rb == "S" && objSave.AsmaMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Asma: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.SindromeCSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.SindromeCTiempoenfermedad_list == null ||
                                    //    objSave.SindromeCMedicacion_rb == null //||
                                    //    //objSave.SindromeCMedicacion_txt== null ||
                                    //    // objSave.SindromeCTipoDiagn_list == null
                                    //    ) || (objSave.SindromeCMedicacion_rb == "S" && objSave.SindromeCMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Síndrome Cardiaco Congestivo: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.SindromeRSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.SindromeRTiempoenfermedad_list == null ||
                                    //    objSave.SindromeRMedicacion_rb == null //||
                                    //    //objSave.SindromeRTipoDiagn_list == null
                                    //    ) || (objSave.SindromeRMedicacion_rb == "S" && objSave.SindromeRMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Síndrome Renal Crónico: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.GastritisSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.GastritisTiempoenfermedad_list == null ||
                                    //    objSave.GastritisMedicacion_rb == null //||
                                    //    // objSave.GastritisTipoDiagn_list == null
                                    //    ) || (objSave.GastritisMedicacion_rb == "S" && objSave.GastritisMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Gastritis / Ulcera: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.ArritmiaSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.ArritmiaTiempoenfermedad_list == null ||
                                    //    objSave.ArritmiaMedicacion_rb == null //||

                                    //    //objSave.ArritmiaTipoDiagn_list == null
                                    //    ) || (objSave.ArritmiaMedicacion_rb == "S" && objSave.ArritmiaMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Arritmia: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }


                                if (objSave.HepatitisSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.HepatitisTiempoenfermedad_list == null ||
                                    //    objSave.HepatitisMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    // objSave.HepatitisTipoDiagn_list == null
                                    //    ) || (objSave.HepatitisMedicacion_rb == "S" && objSave.HepatitisMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Hepatitis viral: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.TuberculosisSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.TuberculosisTiempoenfermedad_list == null ||
                                    //    objSave.TuberculosisMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    // objSave.TuberculosisTipoDiagn_list == null
                                    //    ) || (objSave.TuberculosisMedicacion_rb == "S" && objSave.TuberculosisMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Tuberculosis: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.HipertiroidismoSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.HipertiroidismoTiempoenfermedad_list == null ||
                                    //    objSave.HipertiroidismoMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.HipertiroidismoTipoDiagn_list == null
                                    //    ) || (objSave.HipertiroidismoMedicacion_rb == "S" && objSave.HipertiroidismoMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Hipertiroidismo: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.HipotiroidismoSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.HipotiroidismoTiempoenfermedad_list == null ||
                                    //    objSave.HipotiroidismoMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    // objSave.HipotiroidismoTipoDiagn_list == null
                                    //    ) || (objSave.HipotiroidismoMedicacion_rb == "S" && objSave.HipotiroidismoMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Hipotiroidismo: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.InfeccionSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.InfeccionTiempoenfermedad_list == null ||
                                    //    objSave.InfeccionMedicacion_rb == null //||
                                    //    //objSave.InfeccionMedicacion_txt== null ||
                                    //    // objSave.InfeccionTipoDiagn_list == null
                                    //    ) || (objSave.InfeccionMedicacion_rb == "S" && objSave.InfeccionMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Infección Urinaria: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.CardiopatiasSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.CardiopatiasTiempoenfermedad_list == null ||
                                    //    objSave.CardiopatiasMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.CardiopatiasTipoDiagn_list == null
                                    //    ) || (objSave.CardiopatiasMedicacion_rb == "S" && objSave.CardiopatiasMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Cardiopatías: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                if (objSave.EtransmisionSSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.EtransmisionSTiempoenfermedad_list == null ||
                                    //    objSave.EtransmisionSMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.EtransmisionSTipoDiagn_list == null
                                    //    ) || (objSave.EtransmisionSMedicacion_rb == "S" && objSave.EtransmisionSMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Enfermedad de transmisión sexual: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.DShipoacusiaSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.DShipoacusiaTiempoenfermedad_list == null ||
                                    //    objSave.DShipoacusiaMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    // objSave.DShipoacusiaTipoDiagn_list == null
                                    //    ) || (objSave.DShipoacusiaMedicacion_rb == "S" && objSave.DShipoacusiaMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Déficit sensorial: hipoacusia: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.DScegueraSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.DScegueraTiempoenfermedad_list == null ||
                                    //    objSave.DScegueraMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.DScegueraTipoDiagn_list == null
                                    //    ) || (objSave.DScegueraMedicacion_rb == "S" && objSave.DScegueraMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Déficit sensorial: ceguera: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.DSSordoMudoSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.DSSordoMudoTiempoenfermedad_list == null ||
                                    //    objSave.DSSordoMudoMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.DSSordoMudoTipoDiagn_list == null
                                    //    ) || (objSave.DSSordoMudoMedicacion_rb == "S" && objSave.DSSordoMudoMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Déficit sensorial: sordo mudo: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.DSMiopiaAltaSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.DSMiopiaAltaTiempoenfermedad_list == null ||
                                    //    objSave.DSMiopiaAltaMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    // objSave.DSMiopiaAltaTipoDiagn_list == null
                                    //    ) || (objSave.DSMiopiaAltaMedicacion_rb == "S" && objSave.DSMiopiaAltaMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Déficit sensorial: Miopía de alta graduación: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }
                                if (objSave.CancerSeleccion_ckb == "S")
                                {
                                    //if ((
                                    //    objSave.CancerTiempoenfermedad_list == null ||
                                    //    objSave.CancerMedicacion_rb == null //||
                                    //    //objSave.== null ||
                                    //    //objSave.CancerTipoDiagn_list == null
                                    //    ) || (objSave.CancerMedicacion_rb == "S" && objSave.CancerMedicacion_txt == null))
                                    //{
                                    //    eventoPostFormulario(true, "");
                                    //    return showMensajeNotifyData("Mensaje", "Cáncer: Ingresar datos en el detalle", "ERROR", false);
                                    //}
                                }

                                #endregion

                                #region Validacion_Chekbox_NoRecuerda

                                if (objSave.HipertensionMedicacion_rb == "N" || objSave.HipertensionMedicacion_rb == "X")
                                {
                                    objSave.HipertensionMedicacion_txt = null;
                                }

                                if (objSave.DiabetesMedicacion_rb == "N" || objSave.DiabetesMedicacion_rb == "X")
                                {
                                    objSave.DiabetesMedicacion_txt = null;
                                }
                                if (objSave.AsmaMedicacion_rb == "N" || objSave.AsmaMedicacion_rb == "X")
                                {
                                    objSave.AsmaMedicacion_txt = null;
                                }
                                if (objSave.SindromeCMedicacion_rb == "N" || objSave.SindromeCMedicacion_rb == "X")
                                {
                                    objSave.SindromeCMedicacion_txt = null;
                                }
                                if (objSave.SindromeRMedicacion_rb == "N" || objSave.SindromeRMedicacion_rb == "X")
                                {
                                    objSave.SindromeRMedicacion_txt = null;
                                }

                                if (objSave.GastritisMedicacion_rb == "N" || objSave.GastritisMedicacion_rb == "X")
                                {
                                    objSave.GastritisMedicacion_txt = null;
                                }
                                if (objSave.ArritmiaMedicacion_rb == "N" || objSave.ArritmiaMedicacion_rb == "X")
                                {
                                    objSave.ArritmiaMedicacion_txt = null;
                                }

                                if (objSave.HepatitisMedicacion_rb == "N" || objSave.HepatitisMedicacion_rb == "X")
                                {
                                    objSave.HepatitisMedicacion_txt = null;
                                }
                                if (objSave.TuberculosisMedicacion_rb == "N" || objSave.TuberculosisMedicacion_rb == "X")
                                {
                                    objSave.TuberculosisMedicacion_txt = null;
                                }

                                if (objSave.HipertiroidismoMedicacion_rb == "N" || objSave.HipertiroidismoMedicacion_rb == "X")
                                {
                                    objSave.HipertiroidismoMedicacion_txt = null;
                                }
                                if (objSave.HipotiroidismoMedicacion_rb == "N" || objSave.HipotiroidismoMedicacion_rb == "X")
                                {
                                    objSave.HipotiroidismoMedicacion_txt = null;
                                }

                                if (objSave.InfeccionMedicacion_rb == "N" || objSave.InfeccionMedicacion_rb == "X")
                                {
                                    objSave.InfeccionMedicacion_txt = null;
                                }
                                if (objSave.CardiopatiasMedicacion_rb == "N" || objSave.CardiopatiasMedicacion_rb == "X")
                                {
                                    objSave.CardiopatiasMedicacion_txt = null;
                                }
                                if (objSave.EtransmisionSMedicacion_rb == "N" || objSave.EtransmisionSMedicacion_rb == "X")
                                {
                                    objSave.EtransmisionSMedicacion_txt = null;
                                }
                                if (objSave.DShipoacusiaMedicacion_rb == "N" || objSave.DShipoacusiaMedicacion_rb == "X")
                                {
                                    objSave.DShipoacusiaMedicacion_txt = null;
                                }
                                if (objSave.DScegueraMedicacion_rb == "N" || objSave.DScegueraMedicacion_rb == "X")
                                {
                                    objSave.DScegueraMedicacion_txt = null;
                                }
                                if (objSave.DSSordoMudoMedicacion_rb == "N" || objSave.DSSordoMudoMedicacion_rb == "X")
                                {
                                    objSave.DSSordoMudoMedicacion_txt = null;
                                }
                                if (objSave.DSMiopiaAltaMedicacion_rb == "N" || objSave.DSMiopiaAltaMedicacion_rb == "X")
                                {
                                    objSave.DSMiopiaAltaMedicacion_txt = null;
                                }

                                if (objSave.CancerMedicacion_rb == "N" || objSave.CancerMedicacion_rb == "X")
                                {
                                    objSave.CancerMedicacion_txt = null;
                                }

                                #endregion

                            }
                            else if (objSave.EnfermedadesAnteriores_rb == "N" || objSave.EnfermedadesAnteriores_rb == "X")
                            {
                                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();  // CCEPF006

                                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objSave.Accion == "NUEVO")
                                {
                                    objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objSave.FechaCreacion = DateTime.Now;
                                    objSave.Estado = 2;
                                }

                                #region LLenado_EntidadesVacias
                                objSave.FechaModificacion = DateTime.Now;
                                objSave.HipertensionSeleccion_ckb = null;
                                objSave.HipertensionTiempoenfermedad_list = null;
                                objSave.HipertensionMedicacion_rb = null;
                                objSave.HipertensionMedicacion_txt = null;
                                objSave.HipertensionTipoDiagn_list = null;
                                objSave.DiabetesSeleccion_ckb = null;
                                objSave.DiabetesTiempoenfermedad_list = null;
                                objSave.DiabetesMedicacion_rb = null;
                                objSave.DiabetesMedicacion_txt = null;
                                objSave.DiabetesTipoDiagn_list = null;
                                objSave.AsmaSeleccion_ckb = null;
                                objSave.AsmaTiempoenfermedad_list = null;
                                objSave.AsmaMedicacion_rb = null;
                                objSave.AsmaMedicacion_txt = null;
                                objSave.AsmaTipoDiagn_list = null;
                                objSave.SindromeCSeleccion_ckb = null;
                                objSave.SindromeCTiempoenfermedad_list = null;
                                objSave.SindromeCMedicacion_rb = null;
                                objSave.SindromeCMedicacion_txt = null;
                                objSave.SindromeCTipoDiagn_list = null;
                                objSave.SindromeRSeleccion_ckb = null;
                                objSave.SindromeRTiempoenfermedad_list = null;
                                objSave.SindromeRMedicacion_rb = null;
                                objSave.SindromeRMedicacion_txt = null;
                                objSave.SindromeRTipoDiagn_list = null;
                                objSave.GastritisSeleccion_ckb = null;
                                objSave.GastritisTiempoenfermedad_list = null;
                                objSave.GastritisMedicacion_rb = null;
                                objSave.GastritisMedicacion_txt = null;
                                objSave.GastritisTipoDiagn_list = null;
                                objSave.ArritmiaSeleccion_ckb = null;
                                objSave.ArritmiaTiempoenfermedad_list = null;
                                objSave.ArritmiaMedicacion_rb = null;
                                objSave.ArritmiaMedicacion_txt = null;
                                objSave.ArritmiaTipoDiagn_list = null;
                                objSave.HepatitisSeleccion_ckb = null;
                                objSave.HepatitisTiempoenfermedad_list = null;
                                objSave.HepatitisMedicacion_rb = null;
                                objSave.HepatitisMedicacion_txt = null;
                                objSave.HepatitisTipoDiagn_list = null;
                                objSave.TuberculosisSeleccion_ckb = null;
                                objSave.TuberculosisTiempoenfermedad_list = null;
                                objSave.TuberculosisMedicacion_rb = null;
                                objSave.TuberculosisMedicacion_txt = null;
                                objSave.TuberculosisTipoDiagn_list = null;
                                objSave.HipertiroidismoSeleccion_ckb = null;
                                objSave.HipertiroidismoTiempoenfermedad_list = null;
                                objSave.HipertiroidismoMedicacion_rb = null;
                                objSave.HipertiroidismoMedicacion_txt = null;
                                objSave.HipertiroidismoTipoDiagn_list = null;
                                objSave.HipotiroidismoSeleccion_ckb = null;
                                objSave.HipotiroidismoTiempoenfermedad_list = null;
                                objSave.HipotiroidismoMedicacion_rb = null;
                                objSave.HipotiroidismoMedicacion_txt = null;
                                objSave.HipotiroidismoTipoDiagn_list = null;
                                objSave.InfeccionSeleccion_ckb = null;
                                objSave.InfeccionTiempoenfermedad_list = null;
                                objSave.InfeccionMedicacion_rb = null;
                                objSave.InfeccionMedicacion_txt = null;
                                objSave.InfeccionTipoDiagn_list = null;
                                objSave.CardiopatiasSeleccion_ckb = null;
                                objSave.CardiopatiasTiempoenfermedad_list = null;
                                objSave.CardiopatiasMedicacion_rb = null;
                                objSave.CardiopatiasMedicacion_txt = null;
                                objSave.CardiopatiasTipoDiagn_list = null;
                                objSave.EtransmisionSSeleccion_ckb = null;
                                objSave.EtransmisionSTiempoenfermedad_list = null;
                                objSave.EtransmisionSMedicacion_rb = null;
                                objSave.EtransmisionSMedicacion_txt = null;
                                objSave.EtransmisionSTipoDiagn_list = null;
                                objSave.DShipoacusiaSeleccion_ckb = null;
                                objSave.DShipoacusiaTiempoenfermedad_list = null;
                                objSave.DShipoacusiaMedicacion_rb = null;
                                objSave.DShipoacusiaMedicacion_txt = null;
                                objSave.DShipoacusiaTipoDiagn_list = null;
                                objSave.DScegueraSeleccion_ckb = null;
                                objSave.DScegueraTiempoenfermedad_list = null;
                                objSave.DScegueraMedicacion_rb = null;
                                objSave.DScegueraMedicacion_txt = null;
                                objSave.DScegueraTipoDiagn_list = null;
                                objSave.DSSordoMudoSeleccion_ckb = null;
                                objSave.DSSordoMudoTiempoenfermedad_list = null;
                                objSave.DSSordoMudoMedicacion_rb = null;
                                objSave.DSSordoMudoMedicacion_txt = null;
                                objSave.DSSordoMudoTipoDiagn_list = null;
                                objSave.DSMiopiaAltaSeleccion_ckb = null;
                                objSave.DSMiopiaAltaTiempoenfermedad_list = null;
                                objSave.DSMiopiaAltaMedicacion_rb = null;
                                objSave.DSMiopiaAltaMedicacion_txt = null;
                                objSave.DSMiopiaAltaTipoDiagn_list = null;
                                objSave.CancerSeleccion_ckb = null;
                                objSave.CancerTiempoenfermedad_list = null;
                                objSave.CancerMedicacion_rb = null;
                                objSave.CancerMedicacion_txt = null;
                                objSave.CancerTipoDiagn_list = null;
                                #endregion
                            }

                            registro = 1;
                            String mensage = "";
                            //String cadenas = "";
                            //String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE> dataDelete = null;
                                if (Session["DataPatologicosGeneralesDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE>)Session["DataPatologicosGeneralesDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);
                                    }
                                }


                                // Bloque UPDATE Y INSERT
                                //ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                                //var objPatologicosDetalle = new SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE();
                                //Guardar detalles
                                if (objSave.EnfermedadesAnteriores_rb == "S")
                                {
                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {
                                        objPatologicosDetalle = new SS_HC_Anam_AP_PatologicosGeneralesDetalle_FE();
                                        objPatologicosDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objPatologicosDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objPatologicosDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objPatologicosDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        objPatologicosDetalle.Accion = objEntity.ACCION;
                                        if (objEntity.ValorCodigo1.Length > 600)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "Exedio el numero maximo de caracteres *Diagnostico Referencia", "ERROR", false);
                                        }

                                        if (objEntity.ValorCodigo6.Length > 100)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "Exedio el numero maximo de caracteres *Medicacion", "ERROR", false);
                                        }

                                        if (objEntity.ValorCodigo7.Length > 500)
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Mensaje", "Exedio el numero maximo de caracteres *Observaciones", "ERROR", false);
                                        }
                                        if (objPatologicosDetalle.Accion != "DETALLE")
                                        {
                                            objPatologicosDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }

                                        //objPatologicosDetalle.OtrasEnfermedades = objEntity.ValorCodigo1.Trim();

                                        /*  string[] cadArray = objEntity.ValorCodigo3.Trim().Split('|');
                                            string cadenas = cadArray[1].Replace("[", "");
                                            cadenas = cadenas.Replace("]", "").Trim();
                                            objPatologicosDetalle.IdDiagnostico = Convert.ToInt32(cadenas); */
                                        objPatologicosDetalle.IdDiagnostico = Convert.ToInt32(objEntity.ValorCodigo3.Trim());
                                        /*objPatologicosDetalle.DiagnosticoText = objEntity.ValorCodigo3.Trim();*/
                                        objPatologicosDetalle.DiagnosticoText = objEntity.ValorCodigo1.Trim();
                                        objPatologicosDetalle.TiempoEnfermedad_list = objEntity.ValorCodigo5.Trim();
                                        objPatologicosDetalle.Medicacion_txt = objEntity.ValorCodigo6.Trim();
                                        objPatologicosDetalle.TipoDiagn_list = objEntity.ValorCodigo7.Trim();
                                        //if (objEntity.ValorCodigo5.Trim() == "")
                                        //{
                                        //    eventoPostFormulario(false, "");
                                        //    return showMensajeNotifyData("Error", "Porfavor seleccione tiempo de enfermedad", "ERROR", false);
                                        //}
                                        if (objPatologicosDetalle.Accion == "DETALLE")
                                        {
                                            objPatologicosDetalle.Estado = 2;
                                            objPatologicosDetalle.FechaCreacion = DateTime.Now;
                                            objPatologicosDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                        }

                                        objPatologicosDetalle.FechaCreacion = objSave.FechaCreacion;
                                        objPatologicosDetalle.UsuarioCreacion = objSave.UsuarioCreacion;
                                        objPatologicosDetalle.FechaModificacion = DateTime.Now;
                                        objPatologicosDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                        ObjDetalle.Add(objPatologicosDetalle);
                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                    }
                                }

                            }


                            if (Session["invalido"] == null)
                            {
                                registro = SvcPatologicosGeneralesFEService.setMantenimiento(objSave, ObjDetalle);

                            }
                            else
                            {
                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Mensaje", "No se pudo obtener el registro Patologico", "ERROR", false);
                                //return this.Direct();
                            }
                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INDICA_RECARGAR = 1;
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                eventoPostFormulario(true, "");

                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }

                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "El campo Observaciones solo admite 500 caracteres.", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }

            }

            return this.Direct();
        }

        #endregion  // fin CCEPF006_FORMULARIO

        #region CCEPF631_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF631_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF631_View - Entrar");
                var LocalEnty = new SS_HC_TriajeEmergencia_FE();
                var Listar = new List<SS_HC_TriajeEmergencia_FE>();
                LocalEnty.Accion = "LISTAR";


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;

                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;

                Listar = SvcTriajeEmergenciaFEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_TriajeEmergencia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }
                var listarDatos = new List<SS_HC_TriajeEmergencia_FE>();
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                listarDatos = SvcTriajeEmergenciaFEService.listarEntidad(LocalEnty);
                ENTITY_GLOBAL.Instance.ANTENCIONESFUNCIONTRIAJE = listarDatos;


                LocalEnty.Version = "CCEPF631";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF631_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF631_Save_TriajeEmergencia(SS_HC_TriajeEmergencia_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF631_Save_TriajeEmergencia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 2)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    long idResultado = 0;
                    SS_HC_EpisodioTriaje ObjTrace = new SS_HC_EpisodioTriaje();

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioTriaje = (int)ENTITY_GLOBAL.Instance.EpisodioTriaje;

                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                            //var hora = HoraIngreso.TrimStart('\"');
                            //hora = hora.TrimEnd('\"');
                            //var tiempo = DateTime.Parse(hora);

                            //var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                            //fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                            //fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);
                            ////objSave.Fecha = fechaingreso;
                            //objSave.Hora = fechaingreso;

                            objSave.Hora = DateTime.Now;
                        }
                        //objSave.Fecha = objSave.Hora;


                        // string mensage = "";

                        registro = SvcTriajeEmergenciaFEService.setMantenimiento(objSave);




                        if (registro > 0)
                        {

                            ///ACTUALIZAR ACÁ
                            ///

                            ObjTrace.Accion = "UPDATE_ESPECIALIDAD";
                            ObjTrace.IdEspecialidad = Convert.ToInt32(objSave.Especialidad);
                            ObjTrace.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioTriaje);
                            ObjTrace.Estado = 2;
                            ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            ObjTrace.IdPrioridad = objSave.Prioridad;

                            idResultado = SvcEpisodioTriaje.UpdateEspecialidadTriaje(ObjTrace);



                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en CCEPF051", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en CCEPF051", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //return showMsgTratamientoExcepcion(ex, "");

                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    //tring mostrarExc = "Excepción genérica:" + ex.Message;
                    //if (resultado.Count > 0)
                    //{
                    //    mostrarExc = resultado[0].DescripcionLocal;
                    //}
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);


                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        /**FORMULARIOS IV FASE*/

        #region CCEPF203b_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF203b_View()
        {
            Log.Information("HClinicaController - CCEPF203b_View - Entrar");
            try
            {
                SS_HC_CONTRARREFERENCIA_FE LocalObj = null;
                var LocalEnty = new SS_HC_CONTRARREFERENCIA_FE();
                var Listar = new List<SS_HC_CONTRARREFERENCIA_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;

                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcContrarreferencia2FEService.listarEntidad(LocalEnty);



                LocalEnty.Version = "CCEPF203";
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_CONTRARREFERENCIA_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF203b_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF203_LISTAR_GRILLADIAGNOSTICO(String Tipo)
        {
            Log.Information("HClinicaController - CCEPF203_LISTAR_GRILLADIAGNOSTICO - Entrar");

            try
            {

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "CONTRARREFERENCIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = Tipo;
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.ACCION = "CONTRARREFERENCIA";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = Tipo;
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF203_Eliminar_ContrarreferencialDetalle(String MODO, String codigo, String secuencia, String tipoRegistro)
        {
            Log.Information("HClinicaController - CCEPF203_Eliminar_ContrarreferencialDetalle - Entrar");
            List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE>)Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE>();
                }
                SS_HC_CONTRARREFERENCIA_Diagnostico_FE objDelete = new SS_HC_CONTRARREFERENCIA_Diagnostico_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = MODO; //"DELETEDETALLE"               


                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);

                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.TipoRegistro = tipoRegistro;

                    dataDelete.Add(objDelete);
                    Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);

                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF203b_Save_CONTRARREFERENCIA(SS_HC_CONTRARREFERENCIA_FE objSave, String selectionArray1, String selectionArray2, String text)
        {
            Log.Information("HClinicaController - CCEPF203b_Save_CONTRARREFERENCIA - Entrar");
            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                Session["ValoresTemporal1"] = selectionArray1;
                Session["ValoresTemporal2"] = selectionArray2;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {

                // TRANSACCIONALES
                List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE> ObjDetalle = new List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;
                            string mensage = "";
                            registro = 1;
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE> dataDelete = null;
                                if (Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_CONTRARREFERENCIA_Diagnostico_FE>)Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);

                                    }
                                }

                                // Bloque UPDATE Y INSERT
                                var objContrarreferencialDetalle = new SS_HC_CONTRARREFERENCIA_Diagnostico_FE();

                                valoreArray = (string)Session["ValoresTemporal1"];
                                if (valoreArray != null)
                                {
                                    ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));


                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {

                                        objContrarreferencialDetalle = new SS_HC_CONTRARREFERENCIA_Diagnostico_FE();

                                        objContrarreferencialDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objContrarreferencialDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objContrarreferencialDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objContrarreferencialDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                        objContrarreferencialDetalle.Accion = objEntity.ACCION;

                                        objContrarreferencialDetalle.TipoRegistro = "IN";

                                        if (objContrarreferencialDetalle.Accion != "DETALLE")
                                        {
                                            objContrarreferencialDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }

                                        cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                        cadenas = cadArray[1].Replace("[", "");
                                        cadenas = cadenas.Replace("]", "").Trim();

                                        objContrarreferencialDetalle.IdDiagnostico = Convert.ToInt32(cadenas);
                                        objContrarreferencialDetalle.Version = "CCEPF203";

                                        ObjDetalle.Add(objContrarreferencialDetalle);

                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                    }
                                }


                                valoreArray = (string)Session["ValoresTemporal2"];
                                if (valoreArray != null)
                                {
                                    ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));

                                    foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                    {

                                        objContrarreferencialDetalle = new SS_HC_CONTRARREFERENCIA_Diagnostico_FE();

                                        objContrarreferencialDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        objContrarreferencialDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        objContrarreferencialDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        objContrarreferencialDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                        objContrarreferencialDetalle.Accion = objEntity.ACCION;

                                        objContrarreferencialDetalle.TipoRegistro = "EG";

                                        if (objContrarreferencialDetalle.Accion != "DETALLE")
                                        {
                                            objContrarreferencialDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        }

                                        cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                        cadenas = cadArray[1].Replace("[", "");
                                        cadenas = cadenas.Replace("]", "").Trim();

                                        objContrarreferencialDetalle.IdDiagnostico = Convert.ToInt32(cadenas);

                                        objContrarreferencialDetalle.Version = "CCEPF203";

                                        ObjDetalle.Add(objContrarreferencialDetalle);

                                        registro = 1;
                                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                    }
                                }


                            }

                            registro = SvcContrarreferencia2FEService.setMantenimiento(objSave, ObjDetalle);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                Session["ValoresTemporal1"] = null;
                                Session["ValoresTemporal2"] = null;
                                Session["Session_SS_HC_CONTRARREFERENCIA_DiagnosticoDelete"] = null;

                                eventoPostFormulario(true, "");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF300_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF300_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF300_View - Entrar");

                List<SoluccionSalud.Entidades.Entidades.ParametrosMast> listaParam = new List<SoluccionSalud.Entidades.Entidades.ParametrosMast>();
                SoluccionSalud.Entidades.Entidades.ParametrosMast objParam = new SoluccionSalud.Entidades.Entidades.ParametrosMast();
                objParam.Accion = "LISTAR";
                objParam.CompaniaCodigo = "999999";
                objParam.AplicacionCodigo = "WA";//obs
                objParam.ParametroClave = "DIDESCACE";
                ENTITY_GLOBAL.Instance.bitacora = 3;
                listaParam = SoluccionSalud.Service.ParametroService.SvcParametro.listarParametro(objParam, 0, 0);
                if (listaParam.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.DIASDES = System.Convert.ToDouble(listaParam[0].Numero);
                }

                var LocalEnty = new SS_HC_DescansoMedico_FE();
                var Listar = new List<SS_HC_DescansoMedico_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcDescansoMedicoServiceFE.DescansoMedicoListar(LocalEnty);


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_DescansoMedico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                Session["ValoresTemporalDetalleMedico"] = null; //Agregado
                Session["Data_SS_HC_DescansoMedicoDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //////////       
                return View("FormulariosExtras/CCEPF300_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF300_DESC_MEDICO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF300_DESC_MEDICO - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                {

                    LocalEnty.ACCION = "DESC_MEDICO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF150")
                    {
                        LocalEnty.ACCION = "DESC_MEDICO_APOYO";
                    }

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                    if (Listar.Count == 0)
                    {
                        LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }

                    //Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                }
                else if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE"))
                {

                    LocalEnty.ACCION = "DESC_MEDICO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF150")
                    {
                        LocalEnty.ACCION = "DESC_MEDICO_APOYO";
                    }

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                    if (Listar.Count == 0)
                    {
                        LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }



                }
                if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"))
                {
                    LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF300_addEliminar_SS_HC_DescansoMedico_FE(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF300_addEliminar_SS_HC_DescansoMedico_FE - Entrar");
            List<SS_HC_DescansoMedico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_DescansoMedicoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_DescansoMedico_FE>)Session["Data_SS_HC_DescansoMedicoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_DescansoMedico_FE>();
                }
                SS_HC_DescansoMedico_FE objDelete = new SS_HC_DescansoMedico_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);

                    objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_DescansoMedicoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF300_Save_SS_HC_DescansoMedicoFE(string HC_Descanso, string selectionArray1, string Evento, string Version)
        {
            Log.Information("HClinicaController - CCEPF300_Save_SS_HC_DescansoMedicoFE - Entrar");

            // Validación inicial
            var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
            if (datito == 0 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "TECNOLOGO")
            {
                return showMensajeNotifyData("Error", "Asigne un Medico Por favor", "ERROR", false);
            }

            // Validar episodio clínico
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episodio clínico...").Show();
                return this.Direct();
            }

            List<SS_HC_DescansoMedico_FE> objCabecera = DeserializarCabecera(HC_Descanso);
            List<SS_HC_DescansoMedico_FE> objDetalle = ObtenerDetalle(selectionArray1);
            List<SS_HC_DescansoMedico_FE> objDetalleBorrado = ObtenerDetalleBorrado(Session["Data_SS_HC_DescansoMedicoDelete"]);

            try
            {
                var registro = SvcDescansoMedicoServiceFE.setMantenimiento(objCabecera.FirstOrDefault(), objCabecera, objDetalle.Concat(objDetalleBorrado).ToList());

                if (registro > 0)
                {
                    // Preparar datos para Mirth
                    List<VW_SS_HCE_VisorDescansoMedico> listaMirth = GenerarListaMirth(objCabecera);

                    // Llamada a MirthHelper
                    bool resultadoMirth = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_SaludDescansoMedicoMantenimiento", JsonConvert.SerializeObject(listaMirth));
                    if (!resultadoMirth)
                    {
                        return MostrarMensajeError("Error en la integración con Mirth");
                    }

                    var mensaje = ObtenerMensajeTransaccion("registro");
                    return MostrarMensajeExitoso(mensaje);
                }
                else
                {
                    return MostrarMensajeError("Sucedió un error inesperado en CCEPF300");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return ManejarExcepcion(ex);
            }
        }

        // Métodos auxiliares

        private List<SS_HC_DescansoMedico_FE> DeserializarCabecera(string HC_Descanso)
        {
            List<SS_HC_DescansoMedico_FE> listCabecera = new List<SS_HC_DescansoMedico_FE>();
            var settings = new JsonSerializerSettings
            {
                DateFormatString = "dd/MM/yyyy HH:mm:ss"
            };
            var Cabecera = JsonConvert.DeserializeObject<List<SS_HC_DescansoMedico_FE>>(HC_Descanso, settings);
            foreach (SS_HC_DescansoMedico_FE objDescansoMedico in Cabecera)
            {
                objDescansoMedico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDescansoMedico.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDescansoMedico.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDescansoMedico.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objDescansoMedico.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                if (objDescansoMedico.Accion == "NUEVO")
                {
                    objDescansoMedico.Estado = 2;
                    objDescansoMedico.FechaCreacion = DateTime.Now;
                    objDescansoMedico.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                }
                objDescansoMedico.FechaModificacion = DateTime.Now;
                objDescansoMedico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                listCabecera.Add(objDescansoMedico);
            }
            return listCabecera;
        }

        private List<SS_HC_DescansoMedico_FE> ObtenerDetalle(string valoreArray)
        {
            if (string.IsNullOrEmpty(valoreArray)) return new List<SS_HC_DescansoMedico_FE>();

            var detalle = JsonConvert.DeserializeObject<List<MA_MiscelaneosDetalle>>(valoreArray);
            return detalle.Select(d => new SS_HC_DescansoMedico_FE
            {
                UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion,
                IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID,
                EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico,
                IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion,
                Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO" ? "INSERTDETALLE" : d.ACCION,
                UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO,
                UsuarioCreacion = d.ACCION != "INSERTDETALLE" ? ENTITY_GLOBAL.Instance.USUARIO : null,
                IdFormaInicio = d.ACCION != "INSERTDETALLE" ? Convert.ToInt32(d.CodigoElemento) : (int?)null,
                IdDiagnostico = Convert.ToInt32(d.ValorCodigo1.Split('|')[1].Replace("[", "").Replace("]", "").Trim())
            }).ToList();
        }


        private List<SS_HC_DescansoMedico_FE> ObtenerDetalleBorrado(object sessionData)
        {
            return sessionData == null ? new List<SS_HC_DescansoMedico_FE>() : (List<SS_HC_DescansoMedico_FE>)sessionData;
        }

        private List<VW_SS_HCE_VisorDescansoMedico> GenerarListaMirth(List<SS_HC_DescansoMedico_FE> objCabecera)
        {
            return objCabecera.Where(o => o.Accion != "DELETE").Select(o => new VW_SS_HCE_VisorDescansoMedico
            {
                Sucursal = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim(),
                IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion,
                LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion,
                IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID,
                FechaInicio = o.FechaInicioDescanso,
                FechaFinal = o.FechaFinDescanso,
                Observaciones = o.Observacion,
                UsuarioCreacion = o.UsuarioCreacion,
                FechaCreacion = o.FechaCreacion,
                UsuarioModificacion = o.UsuarioModificacion,
                FechaModificacion = o.FechaModificacion,
                Estado = o.Estado
            }).ToList();
        }

        private string ObtenerMensajeTransaccion(string accion)
        {
            return "Se " + accion + " el Formulario satisfactoriamente. Código Transacción: " +
                   UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                                           ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                                           ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                                           ENTITY_GLOBAL.Instance.PacienteID, "");
        }

        private ActionResult MostrarMensajeExitoso(string mensaje)
        {
            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
            Session["ValoresTemporalDetalleMedico"] = null;
            return showMensajeNotify("Mensaje", mensaje, "INFO");
        }

        private ActionResult MostrarMensajeError(string mensaje)
        {
            eventoPostFormulario(false, "");
            return showMensajeNotifyData("Error", mensaje, "ERROR", false);
        }

        private ActionResult ManejarExcepcion(Exception ex)
        {
            var sqlException = ex.InnerException as SqlException;
            var detalle = new MA_MiscelaneosDetalle { ACCION = "ERRORES" };
            var resultado = sqlException != null
                ? SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0)
                : SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);

            string mensajeError = resultado.Count > 0 ? resultado[0].DescripcionLocal : ex.StackTrace;
            return showMensajeNotifyData("Error", mensajeError, "ERROR", true);
        }


        //public System.Web.Mvc.ActionResult CCEPF300_Save_SS_HC_DescansoMedicoFE(SS_HC_DescansoMedico_FE objDescansoMedico, String selectionArray1, String CCEPF300_Save_SS_HC_DescansoMedicoFE, String text)
        //{
        //    Log.Information("HClinicaController - CCEPF300_Save_SS_HC_DescansoMedicoFE - Entrar");
        //    // TRABA
        //    String valoreArray="";
        //    List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
        //    if (ObjListar == null)
        //    {
        //        Session["ValoresTemporalDetalleMedico"] = selectionArray1;
        //        ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
        //        return this.Direct();
        //    }
        //    var bandejas = ENTITY_GLOBAL.Instance.COD_BANDEJA;
        //    var datito = Convert.ToInt32(ENTITY_GLOBAL.Instance.COD_MEDICO);
        //    if (datito == null || datito == 0 && bandejas == "TECNOLOGO")
        //    {
        //        return showMensajeNotifyData("Error", "Asigne un Medico Por favor", "ERROR", false);
        //    }

        //    if (text == "0")
        //    {
        //        Session["ValoresTemporalDetalleMedico"] = selectionArray1;
        //        ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
        //    }
        //    else
        //    {
        //        valoreArray = (string)Session["ValoresTemporalDetalleMedico"];
        //        if (valoreArray == null || valoreArray.Length == 0)
        //        {
        //            return showMensajeNotifyData("Error", "Vuelva a Guardar Por favor", "ERROR", false);
        //        }

        //        // TRANSACCIONALES
        //        List<SS_HC_DescansoMedico_FE> ObjCabecera = new List<SS_HC_DescansoMedico_FE>();
        //        List<SS_HC_DescansoMedico_FE> ObjDetalle = new List<SS_HC_DescansoMedico_FE>();
        //        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
        //        {
        //            X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
        //        }
        //        else
        //        {
        //            try
        //            {
        //                int registro = -1;
        //                objDescansoMedico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //                objDescansoMedico.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                objDescansoMedico.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
        //                objDescansoMedico.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        //                objDescansoMedico.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
        //                if (objDescansoMedico.Accion == "NUEVO")
        //                {
        //                    objDescansoMedico.Estado = 2;
        //                    objDescansoMedico.FechaCreacion = DateTime.Now;
        //                    objDescansoMedico.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                }
        //                objDescansoMedico.FechaModificacion = DateTime.Now;
        //                objDescansoMedico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

        //                ObjCabecera.Add(objDescansoMedico);

        //                registro = 1;
        //                String mensage = "";
        //                String cadenas = "";
        //                String[] cadArray;

        //                if (registro > 0)
        //                {

        //                    //BLOQUE DELETE
        //                    List<SS_HC_DescansoMedico_FE> dataDelete = null;
        //                    if (Session["Data_SS_HC_DescansoMedicoDelete"] != null)
        //                    {
        //                        dataDelete = (List<SS_HC_DescansoMedico_FE>)Session["Data_SS_HC_DescansoMedicoDelete"];
        //                    }
        //                    if (dataDelete != null)
        //                    {
        //                        foreach (var objDel in dataDelete)
        //                        {
        //                            ObjDetalle.Add(objDel);

        //                        }
        //                    }
        //                    ////////////

        //                    if (valoreArray != null)
        //                    {
        //                        ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
        //                        foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
        //                        {
        //                            objDescansoMedico = new SS_HC_DescansoMedico_FE();
        //                            objDescansoMedico.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //                            objDescansoMedico.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                            objDescansoMedico.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
        //                            objDescansoMedico.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

        //                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") objDescansoMedico.Accion = "INSERTDETALLE";
        //                            else objDescansoMedico.Accion = objEntity.ACCION;
        //                            objDescansoMedico.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                            if (objDescansoMedico.Accion != "INSERTDETALLE")
        //                            {
        //                                objDescansoMedico.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        //                                objDescansoMedico.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
        //                            }


        //                            cadArray = objEntity.ValorCodigo1.Trim().Split('|');
        //                            cadenas = cadArray[1].Replace("[", "");
        //                            cadenas = cadenas.Replace("]", "").Trim();

        //                            objDescansoMedico.IdDiagnostico = Convert.ToInt32(cadenas);
        //                            ObjDetalle.Add(objDescansoMedico);
        //                            registro = 1;
        //                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                        }
        //                    }

        //                    //TRANSACT
        //                    registro = SvcDescansoMedicoServiceFE.setMantenimiento(objDescansoMedico, ObjCabecera, ObjDetalle);

        //                    List<VW_SS_HCE_VisorDescansoMedico> ListaMirth = new List<VW_SS_HCE_VisorDescansoMedico>();
        //                    foreach (SS_HC_DescansoMedico_FE objEntity in ObjCabecera)
        //                    {
        //                        if (objEntity.Accion != "DELETE")
        //                        {
        //                            VW_SS_HCE_VisorDescansoMedico EntyMIrth = new VW_SS_HCE_VisorDescansoMedico();
        //                            EntyMIrth.Sucursal = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
        //                            EntyMIrth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
        //                            EntyMIrth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
        //                            EntyMIrth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //                            EntyMIrth.FechaInicio = objEntity.FechaInicioDescanso;
        //                            EntyMIrth.FechaFinal = objEntity.FechaFinDescanso;
        //                            EntyMIrth.Observaciones = objEntity.Observacion;
        //                            EntyMIrth.UsuarioCreacion = objEntity.UsuarioCreacion;
        //                            EntyMIrth.FechaCreacion = objEntity.FechaCreacion;
        //                            EntyMIrth.UsuarioModificacion = objEntity.UsuarioModificacion;
        //                            EntyMIrth.FechaModificacion = objEntity.FechaModificacion;
        //                            EntyMIrth.Estado = objEntity.Estado;
        //                            ListaMirth.Add(EntyMIrth);
        //                        }
        //                    }

        //                    Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_SaludDescansoMedicoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

        //                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
        //                    else mensage = " actualizó ";

        //                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
        //                    ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

        //                    String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
        //                        UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
        //                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
        //                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


        //                    if (registro > 0)
        //                    {
        //                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;
        //                        //Session["ValoresTemporal"] = null;
        //                        Session["Data_SS_HC_DescansoMedicoDelete"] = null;
        //                        Session["ValoresTemporalDetalleMedico"] = null;
        //                        eventoPostFormulario(true, "");

        //                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
        //                        {
        //                            string containertemp = (string)Session["containerIdTemp"];
        //                            string txttemp = (string)Session["textTemp"];

        //                            LoadFormatos(containertemp, txttemp);
        //                            return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                        }
        //                        else
        //                        {

        //                            return showMensajeNotify("Mensaje", mensaje, "INFO");
        //                        }


        //                    }
        //                    else
        //                    {
        //                        eventoPostFormulario(false, "");
        //                        return showMensajeNotifyData("Error", "Sucedió un error inesperado en CCEPF300", "ERROR", false);
        //                    }


        //                }
        //                else
        //                {
        //                    eventoPostFormulario(false, "");
        //                    return showMensajeNotifyData("Error", "Sucedió un error inesperado en CCEPF300 ", "ERROR", false);

        //                }

        //            }
        //            catch (Exception ex)
        //            {
        //                Log.Error(ex, ex.Message);

        //                var sqlException = ex.InnerException as SqlException;
        //                var detalle = new MA_MiscelaneosDetalle();
        //                detalle.ACCION = "ERRORES";
        //                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
        //                if (sqlException != null)
        //                {
        //                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
        //                }
        //                else
        //                {
        //                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
        //                }
        //                string mostrarExc = "Excepción genérica:" + ex.StackTrace;
        //                //string mostrarExc = "Excepción genérica:" + ex.Message;
        //                if (resultado.Count > 0)
        //                {
        //                    mostrarExc = resultado[0].DescripcionLocal;
        //                }
        //                eventoPostFormulario(false, "");
        //                return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
        //                throw;
        //            }
        //        }
        //    }
        //    return this.Direct();
        //}

        #endregion
        #region CCEPF360_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF301b_View()
        {
            Log.Information("HClinicaController - CCEPF301b_View - Entrar");
            try
            {
                SS_HC_SolucitudTransfusional_FE LocalObj = null;
                var LocalEnty = new SS_HC_SolucitudTransfusional_FE();
                var Listar = new List<SS_HC_SolucitudTransfusional_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }


                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcSolucitudTransfusionalFEService.listarEntidad(LocalEnty);

                bool hallado = false;
                if (Listar.Count > 0)
                {


                    foreach (SS_HC_SolucitudTransfusional_FE objEntity in Listar)
                    {

                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }
                }


                LocalEnty.Version = "CCEPF301";

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                Session["Data_SS_HC_SolucitudTransfusionalDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF301b_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        #endregion

        #region CCEPF360_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF360_View()
        {
            Log.Information("HClinicaController - CCEPF360_View - Entrar");
            try
            {
                SS_HC_SolicitudTransfusional_2_FE LocalObj = null;
                var LocalEnty = new SS_HC_SolicitudTransfusional_2_FE();
                var Listar = new List<SS_HC_SolicitudTransfusional_2_FE>();
                LocalEnty.Accion = "LISTAR";

                LocalEnty.IdMedico = ENTITY_GLOBAL.Instance.IdPersonalSalud;

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }


                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcSolicitudTransfusionalFE2Service.listarEntidad(LocalEnty);

                bool hallado = false;
                if (Listar.Count > 0)
                {
                    var field = X.GetCmp<TextField>("tfNomMed");
                    var tfNum = X.GetCmp<TextField>("tfNroMed");

                    var RestfNum = X.GetCmp<TextField>("tfResNroMed");
                    var Resfield = X.GetCmp<TextField>("tfResNomMed");

                    var rectfNum = X.GetCmp<TextField>("tfrecNroMed");
                    var recfield = X.GetCmp<TextField>("tfrecNomMed");

                    foreach (SS_HC_SolicitudTransfusional_2_FE objEntity in Listar)
                    {
                        VW_SS_GE_ESPECIALIDADMEDICO objFiltro = new VW_SS_GE_ESPECIALIDADMEDICO();
                        objFiltro.ACCION = "LISTARPAG";
                        var ListarMedico = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                        if (!string.IsNullOrEmpty(objEntity.IdMedico.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdMedico);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count >= 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    field.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.IdFirma.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdFirma);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count >= 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    Resfield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    RestfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }


                        if (!string.IsNullOrEmpty(objEntity.IdMedicoTratante.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdMedicoTratante);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count >= 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    recfield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    rectfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }


                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }
                }


                LocalEnty.Version = "CCEPF360";

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }





                //    LocalEnty.IdMedico = 5;


                Session["Data_SS_HC_SolucitudTransfusionalDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF360_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF360_Save_SolIcitudTransfusional2(SS_HC_SolicitudTransfusional_2_FE objSave, String text)
        {
            Log.Information("HClinicaController - CCEPF360_Save_SolIcitudTransfusional2 - Entrar");
            // TRABA
            String valoreArray;
            // List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                // Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {

                //  valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<SS_HC_SolucitudTransfusionalDiagnostico_FE> ObjDetalle = new List<SS_HC_SolucitudTransfusionalDiagnostico_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION; // Nuevo o Update (cabecera)

                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;

                            registro = 1;
                            String mensage = "";
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_SolucitudTransfusionalDiagnostico_FE> dataDelete = null;
                                if (Session["Data_SS_HC_SolucitudTransfusionalDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_SolucitudTransfusionalDiagnostico_FE>)Session["Data_SS_HC_SolucitudTransfusionalDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);

                                    }
                                }
                            }

                            registro = SvcSolicitudTransfusionalFE2Service.setMantenimiento(objSave);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                //ActivaDescativaButtonSave(true);
                                eventoPostFormulario(true, "");
                                //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error en Solucitud Transfusional", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }










        public System.Web.Mvc.ActionResult CCEPF301_LISTAR_GRILLADIAGNOSTICO()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF301_LISTAR_GRILLADIAGNOSTICO - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {

                    LocalEnty.ACCION = "TRANSFUSIONAL";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }
                else if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE") || (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"))
                {
                    LocalEnty.ACCION = "TRANSFUSIONAL";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF301_addEliminar_SolucitudTransfusional(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF301_addEliminar_SolucitudTransfusional - Entrar");
            List<SS_HC_SolucitudTransfusionalDiagnostico_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_SolucitudTransfusionalDelete"] != null)
                {
                    dataDelete = (List<SS_HC_SolucitudTransfusionalDiagnostico_FE>)Session["Data_SS_HC_SolucitudTransfusionalDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_SolucitudTransfusionalDiagnostico_FE>();
                }
                SS_HC_SolucitudTransfusionalDiagnostico_FE objDelete = new SS_HC_SolucitudTransfusionalDiagnostico_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = MODO; //"DELETEDETALLE"


                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_SolucitudTransfusionalDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF301b_Save_SolucitudTransfusional(SS_HC_SolucitudTransfusional_FE objSave, String selectionArray1, String text)
        {
            Log.Information("HClinicaController - CCEPF301b_Save_SolucitudTransfusional - Entrar");
            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            if (text == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {

                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<SS_HC_SolucitudTransfusionalDiagnostico_FE> ObjDetalle = new List<SS_HC_SolucitudTransfusionalDiagnostico_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        if (objSave != null)
                        {
                            objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                            objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION; // Nuevo o Update (cabecera)

                            objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                            if (objSave.Accion == "NUEVO")
                            {
                                objSave.FechaCreacion = DateTime.Now;
                            }
                            objSave.FechaModificacion = DateTime.Now;

                            registro = 1;
                            String mensage = "";
                            String cadenas = "";
                            String[] cadArray;

                            if (registro > 0)
                            {
                                //BLOQUE DELETE
                                List<SS_HC_SolucitudTransfusionalDiagnostico_FE> dataDelete = null;
                                if (Session["Data_SS_HC_SolucitudTransfusionalDelete"] != null)
                                {
                                    dataDelete = (List<SS_HC_SolucitudTransfusionalDiagnostico_FE>)Session["Data_SS_HC_SolucitudTransfusionalDelete"];
                                }
                                if (dataDelete != null)
                                {
                                    foreach (var objDel in dataDelete)
                                    {
                                        ObjDetalle.Add(objDel);

                                    }
                                }

                                // Bloque UPDATE Y INSERT
                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));

                                var objSolucitudTransfusionalDetalle = new SS_HC_SolucitudTransfusionalDiagnostico_FE();
                                foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                {

                                    objSolucitudTransfusionalDetalle = new SS_HC_SolucitudTransfusionalDiagnostico_FE();

                                    objSolucitudTransfusionalDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objSolucitudTransfusionalDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objSolucitudTransfusionalDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objSolucitudTransfusionalDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    objSolucitudTransfusionalDetalle.Accion = objEntity.ACCION;



                                    if (objSolucitudTransfusionalDetalle.Accion != "DETALLE")
                                    {
                                        objSolucitudTransfusionalDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                    }


                                    cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();

                                    objSolucitudTransfusionalDetalle.IdDiagnostico = Convert.ToInt32(cadenas);


                                    ObjDetalle.Add(objSolucitudTransfusionalDetalle);

                                    registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                }

                            }

                            registro = SvcSolucitudTransfusionalFEService.setMantenimiento(objSave, ObjDetalle);

                            if (registro > 0)
                            {
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                else mensage = " actualizó ";
                                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                                //ActivaDescativaButtonSave(true);
                                eventoPostFormulario(true, "");
                                //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                                if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                                {
                                    string containertemp = (string)Session["containerIdTemp"];
                                    string txttemp = (string)Session["textTemp"];

                                    LoadFormatos(containertemp, txttemp);
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {

                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error en Solucitud Transfusional", "Sucedió un error inesperado", "ERROR", false);

                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        return showMsgTratamientoExcepcion(ex, "");
                        throw;
                    }
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF420_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF420_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF420_View - Entrar");
                SS_HC_EvolucionMedica_FE LocalObj = null;
                var LocalEnty = new SS_HC_ENFER_VIGI_CATETERURINARIO_FE();
                var Listar = new List<SS_HC_ENFER_VIGI_CATETERURINARIO_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;

                // SOLO DISEÑO DE BD Y FORMULARIO, SIN GRABAR NI VALIDACION.
                //Listar = SvcEvolucionObjetivaFEService.listarSS_HC_EvolucionObjetiva(LocalEnty);
                Listar = SvcVigilanciaCateterUrinarioFEService.listarSS_HC_ENFER_VIGI_CATETERURINARIO_FE(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ENFER_VIGI_CATETERURINARIO_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }


                }


                LocalEnty.Version = "CCEPF420";

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF420_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF420_Save_CateterUrinario(SS_HC_ENFER_VIGI_CATETERURINARIO_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF420_Save_CateterUrinario - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;

                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();


                        //objSave.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;

                        string mensage = "";
                        //registro = 0;

                        //registro = SvcEvolucionObjetivaFEService.setMantenimiento(objSave);
                        registro = SvcVigilanciaCateterUrinarioFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF422_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF422_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF422_View - Entrar");
                var LocalEnty = new SS_HC_ENFER_VIGI_CateterPeriferico_FE();
                var Listar = new List<SS_HC_ENFER_VIGI_CateterPeriferico_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                // SOLO DISEÑO DE BD Y FORMULARIO, SIN GRABAR NI VALIDACION.
                //Listar = SvcValoracionAMFEService.listarEntidad(LocalEnty);
                Listar = SvcVigilanciaCateterPerifericoFEService.listarSS_HC_ENFER_VIGI_CateterPeriferico_FE(LocalEnty);


                if (Listar.Count > 0)
                {

                    foreach (SS_HC_ENFER_VIGI_CateterPeriferico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF422";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF422_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF422_Save_CateterPeriferico(SS_HC_ENFER_VIGI_CateterPeriferico_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF422_Save_CateterPeriferico - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    //if (objSave.Categoria == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";


                        // SOLO DISEÑO DE BD Y FORMULARIO, SIN GRABAR NI VALIDACION.
                        //registro = SvcValoracionAMFEService.setMantenimiento(objSave);
                        registro = SvcVigilanciaCateterPerifericoFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF424_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF424_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF424_View - Entrar");
                var LocalEnty = new SS_HC_ENFER_VIGI_VentilacionMecanica_FE();
                var Listar = new List<SS_HC_ENFER_VIGI_VentilacionMecanica_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;



                // SOLO DISEÑO DE BD Y FORMULARIO, SIN GRABAR NI VALIDACION.
                //Listar = SvcEvolucionObjetivaFEService.listarSS_HC_EvolucionObjetiva(LocalEnty);
                Listar = SvcVigilanciaVentilacionMecanicaFEService.listarSS_HC_ENFER_VIGI_VentilacionMecanica_FE(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ENFER_VIGI_VentilacionMecanica_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }

                    }


                }


                LocalEnty.Version = "CCEPF424";

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF424_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF424_Save_VentilacionMecanica(SS_HC_ENFER_VIGI_VentilacionMecanica_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF424_Save_VentilacionMecanica - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;

                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();




                        string mensage = "";
                        //registro = 0;

                        // SOLO DISEÑO DE BD Y FORMULARIO, SIN GRABAR NI VALIDACION.
                        //registro = SvcEvolucionObjetivaFEService.setMantenimiento(objSave);
                        registro = SvcVigilanciaVentilacionMecanicaFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF430_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF430_View()
        {
            Log.Information("HClinicaController - CCEPF430_View - Entrar");
            try
            {
                SS_HC_Evaluacion_DolorEvaNeonatosPrematuros_FE LocalObj = null;
                var LocalEnty = new SS_HC_Evaluacion_DolorEvaNeonatosPrematuros_FE();
                var Listar = new List<SS_HC_Evaluacion_DolorEvaNeonatosPrematuros_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcEvaluacionDolorEvaNeonatosPrematuros_FEService.listarEntidad(LocalEnty);


                String HISTORICO_EVOL = "";
                if (Listar.Count > 0)
                {
                    int contador = 0;
                    foreach (SS_HC_Evaluacion_DolorEvaNeonatosPrematuros_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF430"; // Valoración del Adulto Mayor

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF430_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF430_Save(SS_HC_Evaluacion_DolorEvaNeonatosPrematuros_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF430_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        #region Validación
                        if (objSave.Indicador1 == 1)
                        {
                            if (objSave.SubIndicador1 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Edad Gestinal: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador2 == 1)
                        {
                            if (objSave.SubIndicador2 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Comportamiento 15 seg: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador3 == 1)
                        {
                            if (objSave.SubIndicador3 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Frecuencia Cardiaca: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador4 == 1)
                        {
                            if (objSave.SubIndicador4 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Saturación de oxígeno: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador4 == 1)
                        {
                            if (objSave.SubIndicador4 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Saturación de oxígeno: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador5 == 1)
                        {
                            if (objSave.SubIndicador5 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Entrecejo Fruncido: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador6 == 1)
                        {
                            if (objSave.SubIndicador6 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Aprieta los ojos 20 seg: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        if (objSave.Indicador7 == 1)
                        {
                            if (objSave.SubIndicador7 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Arruga nasolabial 30 seg: Debe seleccionar una opción.", "ERROR", false); }
                        }
                        #endregion

                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";

                        if (objSave.Indicador1 != 1)
                        {
                            objSave.SubIndicador1 = -1;
                        }
                        if (objSave.Indicador2 != 1)
                        {
                            objSave.SubIndicador2 = -1;
                        }
                        if (objSave.Indicador3 != 1)
                        {
                            objSave.SubIndicador3 = -1;
                        }
                        if (objSave.Indicador4 != 1)
                        {
                            objSave.SubIndicador4 = -1;
                        }
                        if (objSave.Indicador5 != 1)
                        {
                            objSave.SubIndicador5 = -1;
                        }
                        if (objSave.Indicador6 != 1)
                        {
                            objSave.SubIndicador6 = -1;
                        }
                        if (objSave.Indicador7 != 1)
                        {
                            objSave.SubIndicador7 = -1;
                        }

                        registro = SvcEvaluacionDolorEvaNeonatosPrematuros_FEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF449_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF449_View()
        {
            Log.Information("HClinicaController - CCEPF449_View - Entrar");
            try
            {
                SS_HC_EscalaWoodDownes_FE LocalObj = null;
                var LocalEnty = new SS_HC_EscalaWoodDownes_FE();
                var Listar = new List<SS_HC_EscalaWoodDownes_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcEscalaWoodDownesServiceFE.listarEntidad(LocalEnty);


                String HISTORICO_EVOL = "";
                if (Listar.Count > 0)
                {
                    int contador = 0;
                    foreach (SS_HC_EscalaWoodDownes_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF449"; // Valoración del Adulto Mayor

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF449_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF449_Save(SS_HC_EscalaWoodDownes_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF449_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AMBULATORIO")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        #region Validación

                        if (objSave.Sibilancias == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Sibilancias: Debe seleccionar una opción.", "ERROR", false); }
                        if (objSave.Tiraje == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Tiraje: Debe seleccionar una opción.", "ERROR", false); }
                        if (objSave.FrecuenciaResp == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Frecuencia Resp: Debe seleccionar una opción.", "ERROR", false); }
                        if (objSave.FrecuenciaCard == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Frecuencia Card: Debe seleccionar una opción.", "ERROR", false); }
                        if (objSave.EntradaAire == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Entrada de Aire: Debe seleccionar una opción.", "ERROR", false); }
                        if (objSave.Cianosis == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Cianosis: Debe seleccionar una opción.", "ERROR", false); }

                        #endregion

                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.Fecha = fechaingreso;
                        objSave.Hora = fechaingreso;

                        string mensage = "";

                        registro = SvcEscalaWoodDownesServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF431_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF431_View()
        {
            Log.Information("HClinicaController - CCEPF431_View - Entrar");
            try
            {
                SS_HC_Evaluacion_DolorEvaAdultos_FE LocalObj = null;
                var LocalEnty = new SS_HC_Evaluacion_DolorEvaAdultos_FE();
                var Listar = new List<SS_HC_Evaluacion_DolorEvaAdultos_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcEvaluacionDolorEvaAdultosFEService.listarEntidad(LocalEnty);


                String HISTORICO_EVOL = "";
                if (Listar.Count > 0)
                {
                    int contador = 0;
                    foreach (SS_HC_Evaluacion_DolorEvaAdultos_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF431"; // Valoración del Adulto Mayor

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF431_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF431_Save_DolorEvaAdultos(SS_HC_Evaluacion_DolorEvaAdultos_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF431_Save_DolorEvaAdultos - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave.Fecha == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta ingresar la fecha de ingreso, no se grabará", "ERROR", false);
                    };

                    if (objSave.Hora == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta ingresar la hora, no se grabará", "ERROR", false);
                    };

                    if (objSave.Turno == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta ingresarel turno, no se grabará", "ERROR", false);
                    };
                    if (objSave.EscalaDolorValor == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta seleccionar escala del dolor", "ERROR", false);
                    };


                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";



                        registro = SvcEvaluacionDolorEvaAdultosFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF432_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF432_View()
        {
            Log.Information("HClinicaController - CCEPF432_View - Entrar");
            try
            {
                SS_HC_Evaluacion_DolorEvaNinios_FE LocalObj = null;
                var LocalEnty = new SS_HC_Evaluacion_DolorEvaNinios_FE();
                var Listar = new List<SS_HC_Evaluacion_DolorEvaNinios_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalObj = null;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcEvaluacionDolorEvaNiniosFEService.listarEntidad(LocalEnty);


                String HISTORICO_EVOL = "";
                if (Listar.Count > 0)
                {
                    int contador = 0;
                    foreach (SS_HC_Evaluacion_DolorEvaNinios_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF432"; // Valoración del Adulto Mayor

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF432_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF432_Save_DolorEvaNinios(SS_HC_Evaluacion_DolorEvaNinios_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF432_Save_DolorEvaNinios - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave.EscalaDolorValor == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    };

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";



                        registro = SvcEvaluacionDolorEvaNiniosFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF435_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF435_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF435_View - Entrar");
                var LocalEnty = new SS_HC_Evaluacion_GradoDependencia_FE();
                var Listar = new List<SS_HC_Evaluacion_GradoDependencia_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;


                Listar = SvcEvaluacionGradoDependenciaFEService.listarEntidad(LocalEnty).ToList();



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Evaluacion_GradoDependencia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF435";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF435_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF435_Save_GradoDependencia(SS_HC_Evaluacion_GradoDependencia_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF435_Save_GradoDependencia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave.GradoDependencia_sel == null)
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    };

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        registro = SvcEvaluacionGradoDependenciaFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF462_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF462_View()
        {
            Log.Information("HClinicaController - CCEPF462_View - Entrar");
            try
            {
                var LocalEnty = new SS_HC_SeguridadCirugia_FE();
                var Listar = new List<SS_HC_SeguridadCirugia_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.TipoCirugia = 2;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.TipoCirugia = 2;

                Listar = SvcSeguridadCirugiaFE.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_SeguridadCirugia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF462";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF462_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF462_Save_SeguridadCirugia(SS_HC_SeguridadCirugia_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF462_Save_SeguridadCirugia - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        if (objSave.Respuesta1 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si todos los equipo programados se han presentado ", "ERROR", false);
                        }
                        else if (objSave.Respuesta2 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el equipo ha confirmado la identidad del Paciente", "ERROR", false);
                        }
                        else if (objSave.Respuesta3 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el equipo ha cumplico con el protocolo", "ERROR", false);
                        }
                        else if (objSave.Respuesta4 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se ha administado profilaxis", "ERROR", false);
                        }
                        else if (objSave.Respuesta5 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione Cuáles son los pasos críticos o inesperados", "ERROR", false);
                        }
                        else if (objSave.Respuesta6 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione Cuánto durara la operación", "ERROR", false);
                        }
                        else if (objSave.Respuesta7 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione Cuánto es la perdida de sangre prevista", "ERROR", false);
                        }
                        else if (objSave.Respuesta8 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si Presenta el paciente algún problema especifico", "ERROR", false);
                        }
                        else if (objSave.Respuesta9 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si Se ha confirmado la esterilidad ", "ERROR", false);
                        }
                        else if (objSave.Respuesta10 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si Hay dudas o problemas relacionados con ellos", "ERROR", false);
                        }
                        else if (objSave.Respuesta11 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se pueden visualizarse las imágenes diagnosticas Esenciales", "ERROR", false);
                        }

                        else
                        {
                            registro = SvcSeguridadCirugiaFE.setMantenimiento(objSave);
                        }
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF463_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF463_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF463_View - Entrar");
                var LocalEnty = new SS_HC_SeguridadCirugia_FE();
                var Listar = new List<SS_HC_SeguridadCirugia_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoCirugia = 3;
                }

                bool hallado = false;

                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.TipoCirugia = 3;

                // Servicios
                Listar = SvcSeguridadCirugiaFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_SeguridadCirugia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }
                LocalEnty.Version = "CCEPF463";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF463_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }



        }

        public System.Web.Mvc.ActionResult CCEPF463_Save_SeguridadCirugia(SS_HC_SeguridadCirugia_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF463_Save_SeguridadCirugia - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";

                        #region Validacion
                        if (objSave.Respuesta1 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Nombre del procedimiento. ", "ERROR", false); }
                        else if (objSave.Respuesta2 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: El recuento de instrumentos, gasas y agujas.", "ERROR", false); }
                        else if (objSave.Respuesta3 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: El etiquetado de las muestras (lectura de la etiqueta En voz alta, incluido el nombre del paciente)", "ERROR", false); }
                        else if (objSave.Respuesta4 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Si hay problemas que resolver mencionados con El instrumental y los equipos.", "ERROR", false); }
                        else if (objSave.Respuesta5 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Cuáles son los aspectos críticos de la recuperación y el tratamiento de este paciente?", "ERROR", false); }
                        else
                        {
                            objSave.TipoCirugia = 3;
                            registro = SvcSeguridadCirugiaFE.setMantenimiento(objSave);
                        }
                        #endregion

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF461_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF461_View()
        {
            Log.Information("HClinicaController - CCEPF461_View - Entrar");
            try
            {
                var LocalEnty = new SS_HC_SeguridadCirugia_FE();
                var Listar = new List<SS_HC_SeguridadCirugia_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoCirugia = 1;
                }

                bool hallado = false;

                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.TipoCirugia = 1;
                Listar = SvcSeguridadCirugiaFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_SeguridadCirugia_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }
                LocalEnty.Version = "CCEPF461";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF461_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }



        }

        public System.Web.Mvc.ActionResult CCEPF461_Save_SeguridadCirugia(SS_HC_SeguridadCirugia_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF461_Save_SeguridadCirugia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";
                        #region Validacion
                        if (objSave.Respuesta1 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Su identidad", "ERROR", false); }
                        else if (objSave.Respuesta2 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Sitio quirúrgico", "ERROR", false); }
                        else if (objSave.Respuesta3 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Procedimiento", "ERROR", false); }
                        else if (objSave.Respuesta4 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: El consentimiento informado", "ERROR", false); }
                        else if (objSave.Respuesta5 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha marcado el sitio quirúrgico? ", "ERROR", false); }
                        else if (objSave.Respuesta6 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha comprobado la disponibilidad de los Equipos de anestesia y de la medicación Anestésica? ", "ERROR", false); }
                        else if (objSave.Respuesta7 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha colocado el pulsioximetro al paciente ? ", "ERROR", false); }
                        else if (objSave.Respuesta8 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Está prendido y funcionando? ", "ERROR", false); }
                        else if (objSave.Respuesta9 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se cuenta con los equipos especiales de la cirugía ?", "ERROR", false); }
                        else if (objSave.Respuesta10 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Alergias conocidas", "ERROR", false); }
                        else if (objSave.Respuesta11 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿En caso de SI, hay instrumental y equipo de ayuda disponible?", "ERROR", false); }
                        else if (objSave.Respuesta12 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Riesgo de hemorragia > 500 ml (7ml/Kg en niños)?", "ERROR", false); }
                        else if (objSave.Respuesta13 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: En este caso de SI, se ha previsto la disponibilidad de sangre, plasma u otros fluidos y 2 vías de acceso (IV/central?", "ERROR", false); }
                        else
                        {
                            registro = SvcSeguridadCirugiaFE.setMantenimiento(objSave);
                        }
                        #endregion

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        /**** FIN DE FORMULARIO EXTRAS: (MEDICOS) ***/
        #endregion

        //#region CCEPF460_2FORMULARIO

        //public System.Web.Mvc.ActionResult CCEPF460_2_View()
        //{
        //    try
        //    {
        //        var LocalEnty = new SS_HC_SeguridadCirugia_FE();
        //        var Listar = new List<SS_HC_SeguridadCirugia_FE>();
        //        LocalEnty.Accion = "LISTAR";

        //        if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
        //        {
        //            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
        //            LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        //            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        //            LocalEnty.TipoCirugia = 1;
        //        }

        //        bool hallado = false;

        //        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        //        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
        //        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        //        LocalEnty.TipoCirugia = 1;
        //        Listar = SvcSeguridadCirugiaFE.listarEntidad(LocalEnty);

        //        if (Listar.Count > 0)
        //        {
        //            foreach (SS_HC_SeguridadCirugia_FE objEntity in Listar)
        //            {
        //                LocalEnty = objEntity;
        //            }
        //            LocalEnty.Accion = "UPDATE";
        //            hallado = true;
        //        }
        //        LocalEnty.Version = "CCEPF460";
        //        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
        //        {
        //            LocalEnty.Accion = "VISTA";
        //        }
        //        else
        //        {
        //            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
        //        }


        //        if (!hallado)
        //        {
        //            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
        //            {
        //                LocalEnty.Accion = "VISTA";
        //            }
        //            else
        //            {
        //                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
        //                LocalEnty.Accion = "NUEVO";
        //            }
        //        }


        //        /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
        //        Session["MENSAJES_VALFORM"] = null;
        //        cargarPropiedadesFormulario(true);
        //        setPropiedadesFormulario(true);
        //        /***************************************************/

        //        return View("FormulariosExtras/CCEPF460_2_View", LocalEnty);


        //    }
        //    catch (Exception ex)
        //    {
        //        return showMsgTratamientoExcepcion(ex, "");
        //        throw;
        //    }



        //}

        ////public System.Web.Mvc.ActionResult CCEPF461_Save_SeguridadCirugia(SS_HC_SeguridadCirugia_FE objSave)
        ////{

        ////    if (ENTITY_GLOBAL.Instance.EpisodioClinico != 1)
        ////    {
        ////        X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
        ////    }
        ////    else
        ////    {
        ////        try
        ////        {
        ////            int registro = -1;
        ////            if (objSave != null)
        ////            {
        ////                objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
        ////                objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
        ////                objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
        ////                objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
        ////                objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
        ////                objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
        ////                objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
        ////                objSave.FechaModificacion = DateTime.Now;
        ////                if (objSave.Accion == "NUEVO")
        ////                {
        ////                    objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
        ////                    objSave.FechaCreacion = DateTime.Now;
        ////                    objSave.Estado = 2;
        ////                }

        ////                string mensage = "";
        ////                #region Validacion
        ////                if (objSave.Respuesta1 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Su identidad", "ERROR", false); }
        ////                else if (objSave.Respuesta2 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Sitio quirúrgico", "ERROR", false); }
        ////                else if (objSave.Respuesta3 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Procedimiento", "ERROR", false); }
        ////                else if (objSave.Respuesta4 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: El consentimiento informado", "ERROR", false); }
        ////                else if (objSave.Respuesta5 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha marcado el sitio quirúrgico? ", "ERROR", false); }
        ////                else if (objSave.Respuesta6 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha comprobado la disponibilidad de los Equipos de anestesia y de la medicación Anestésica? ", "ERROR", false); }
        ////                else if (objSave.Respuesta7 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se ha colocado el pulsioximetro al paciente ? ", "ERROR", false); }
        ////                else if (objSave.Respuesta8 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Está prendido y funcionando? ", "ERROR", false); }
        ////                else if (objSave.Respuesta9 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Se cuenta con los equipos especiales de la cirugía ?", "ERROR", false); }
        ////                else if (objSave.Respuesta10 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: Alergias conocidas", "ERROR", false); }
        ////                else if (objSave.Respuesta11 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿En caso de SI, hay instrumental y equipo de ayuda disponible?", "ERROR", false); }
        ////                else if (objSave.Respuesta12 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: ¿Riesgo de hemorragia > 500 ml (7ml/Kg en niños)?", "ERROR", false); }
        ////                else if (objSave.Respuesta13 == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Seleccione una opción en el campo: En este caso de SI, se ha previsto la disponibilidad de sangre, plasma u otros fluidos y 2 vías de acceso (IV/central?", "ERROR", false); }
        ////                else
        ////                {
        ////                    registro = SvcSeguridadCirugiaFE.setMantenimiento(objSave);
        ////                }
        ////                #endregion

        ////                if (registro > 0)
        ////                {
        ////                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
        ////                        mensage = "registro";
        ////                    else
        ////                        mensage = "actualizo";
        ////                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
        ////                    ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
        ////                    String mensaje = "Se " + mensage + "el Formulario satisfactoriamente.Codigo Transacción:" +
        ////                         UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
        ////                         ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
        ////                         ENTITY_GLOBAL.Instance.EpisodioAtencion,
        ////                         ENTITY_GLOBAL.Instance.PacienteID, "");
        ////                    eventoPostFormulario(true, "");
        ////                    return showMensajeNotify("Mensaje", mensaje, "INFO");
        ////                }
        ////                else
        ////                {
        ////                    eventoPostFormulario(false, "");
        ////                    return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
        ////                }
        ////            }
        ////            else
        ////            {
        ////                eventoPostFormulario(false, "");
        ////                return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
        ////            }
        ////        }
        ////        catch (Exception ex)
        ////        {
        ////            return showMsgTratamientoExcepcion(ex, "");
        ////            throw;
        ////        }

        ////    }
        ////    return this.Direct();
        ////}

        ///**** FIN DE FORMULARIO EXTRAS: (MEDICOS) ***/
        //#endregion

        /* #region CCEPF442_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF442_View()
        {
            try
            {
                var LocalEnty = new SS_HC_Escala_Glasgow_FE();
                var Listar = new List<SS_HC_Escala_Glasgow_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //   Listar = SvcEvaluacionGradoDependenciaFEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Escala_Glasgow_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF442";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/

        //   Session["MENSAJES_VALFORM"] = null;
        //    cargarPropiedadesFormulario(true);
        //    setPropiedadesFormulario(true);
        /***************************************************/

        //    return View("FormulariosExtras/CCEPF442_View", LocalEnty);
        //   }
        //    catch (Exception ex)
        //    {
        //         return showMsgTratamientoExcepcion(ex, "");
        //         throw;
        //      }
        //  }

        //  #endregion*/

        #region CCEPF440_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF440_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF440_View - Entrar");
                var LocalEnty = new SS_HC_Escala_Glasgow_FE();
                var Listar = new List<SS_HC_Escala_Glasgow_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoEscala = "EG";
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaGlasgowServiceFE.listarEntidad(LocalEnty);
                LocalEnty.TipoEscala = "EG";

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Escala_Glasgow_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF440";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF440_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF440_Save(SS_HC_Escala_Glasgow_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF440_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        #region Validación
                        if (objSave.TipoPaciente == "1" || objSave.TipoPaciente == "2") { }
                        else
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Tipo Paciente: Debe seleccionar una opción: ", "ERROR", false);
                        }
                        if (objSave.AO == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Apertura Ocular: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RM == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Motora: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RV == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Verbal: Debe seleccionar una opción: ", "ERROR", false); }
                        #endregion
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.Fecha = fechaingreso;
                        objSave.Hora = fechaingreso;

                        string mensage = "";
                        objSave.TipoEscala = "EG";
                        objSave.Version = "CCEPF440";
                        registro = SvcEscalaGlasgowServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF441_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF441_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF441_View - Entrar");
                var LocalEnty = new SS_HC_Escala_Glasgow_FE();
                var Listar = new List<SS_HC_Escala_Glasgow_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoEscala = "GP";
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.TipoEscala = "GP";
                Listar = SvcEscalaGlasgowServiceFE.listarEntidad(LocalEnty);
                //Servicio
                //Listar = SvcEvaluacionGradoDependenciaFEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Escala_Glasgow_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF441";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF441_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF441_Save(SS_HC_Escala_Glasgow_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF441_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        #region Validación
                        if (objSave.TipoPaciente == "1" || objSave.TipoPaciente == "2") { }
                        else
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Tipo Paciente: Debe seleccionar una opción: ", "ERROR", false);
                        }
                        if (objSave.AO == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Apertura Ocular: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RM == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Motora: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RV == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Verbal: Debe seleccionar una opción: ", "ERROR", false); }
                        #endregion
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.Fecha = fechaingreso;
                        objSave.Hora = fechaingreso;

                        string mensage = "";
                        objSave.TipoEscala = "GP";
                        objSave.Version = "CCEPF441";
                        registro = SvcEscalaGlasgowServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF442_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF442_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF442_View - Entrar");
                var LocalEnty = new SS_HC_Escala_Glasgow_FE();
                var Listar = new List<SS_HC_Escala_Glasgow_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoEscala = "GL";
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.TipoEscala = "GL";
                Listar = SvcEscalaGlasgowServiceFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Escala_Glasgow_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF442";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF442_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF442_Save(SS_HC_Escala_Glasgow_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF442_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        #region Validación
                        if (objSave.TipoPaciente == "1" || objSave.TipoPaciente == "2") { }
                        else
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Tipo Paciente: Debe seleccionar una opción: ", "ERROR", false);
                        }
                        if (objSave.AO == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Apertura Ocular: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RM == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Motora: Debe seleccionar una opción: ", "ERROR", false); }
                        if (objSave.RV == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Respuesta Verbal: Debe seleccionar una opción: ", "ERROR", false); }
                        #endregion
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.Fecha = fechaingreso;
                        objSave.Hora = fechaingreso;

                        objSave.TipoEscala = "GL";
                        objSave.Version = "CCEPF442";
                        string mensage = "";

                        registro = SvcEscalaGlasgowServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF446_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF446_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF446_View - Entrar");
                var LocalEnty = new SS_HC_EscalaBromage_FE();
                var Listar = new List<SS_HC_EscalaBromage_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaBromageFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaBromage_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF446";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF446_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF446_Save(SS_HC_EscalaBromage_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF446_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinico != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AMBULATORIO")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";



                        registro = SvcEscalaBromageFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF444_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF444_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF444_View - Entrar");
                var LocalEnty = new SS_HC_EscalaAldrete_FE();
                var Listar = new List<SS_HC_EscalaAldrete_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcEscalaAldreteFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaAldrete_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF444";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF444_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF444_Save(SS_HC_EscalaAldrete_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF444_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinico != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AMBULATORIO")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";

                        if (objSave.FlagParametro1 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Actividad", "ERROR", false);
                        }
                        if (objSave.FlagParametro2 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Respiración", "ERROR", false);
                        }
                        if (objSave.FlagParametro3 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Circulación", "ERROR", false);
                        }
                        if (objSave.FlagParametro4 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Sauración", "ERROR", false);
                        }
                        if (objSave.FlagParametro5 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Conciencia", "ERROR", false);
                        }


                        registro = SvcEscalaAldreteFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF445_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF445_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF445_View - Entrar");
                var LocalEnty = new SS_HC_EscalaStewart_FE();
                var Listar = new List<SS_HC_EscalaStewart_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaStewartServiceFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaStewart_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF445";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF445_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF445_Save(SS_HC_EscalaStewart_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF445_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinico == 0)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";
                        if (objSave.FlagParametro1 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Actividad", "ERROR", false);
                        }
                        if (objSave.FlagParametro2 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Respiración", "ERROR", false);
                        }
                        if (objSave.FlagParametro3 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en ele campo en la sección Conciencia", "ERROR", false);
                        }

                        registro = SvcEscalaStewartServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF464_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF464_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF464_View - Entrar");
                var LocalEnty = new SS_HC_EscalaAltaCirugiaAmbulatoria_FE();
                var Listar = new List<SS_HC_EscalaAltaCirugiaAmbulatoria_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaAltaCirugiaAmbulatoriaServiceFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaAltaCirugiaAmbulatoria_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF464";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF464_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF464_Save(SS_HC_EscalaAltaCirugiaAmbulatoria_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF464_Save - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinico != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA != "HOSPITALIZACION")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.FechaModificacion = DateTime.Now;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";
                        if (objSave.FlagParametro1 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Seleccione una opción en la sección: Signos vitales(PA / FC).", "ERROR", false); }
                        if (objSave.FlagParametro2 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Seleccione una opción en la sección: Nivel de actividad.", "ERROR", false); }
                        if (objSave.FlagParametro3 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Seleccione una opción en la sección: Dolor, Nauseas, Vómitos.", "ERROR", false); }
                        if (objSave.FlagParametro4 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Seleccione una opción en la sección: Sangrado Quirúrgico.", "ERROR", false); }
                        if (objSave.FlagParametro5 == null) { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "Seleccione una opción en la sección: Ingesta y micción.", "ERROR", false); }

                        registro = SvcEscalaAltaCirugiaAmbulatoriaServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF448_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF448_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF448_View - Entrar");
                var LocalEnty = new SS_HC_EscalaSedacionRass_FE();
                var Listar = new List<SS_HC_EscalaSedacionRass_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaSedacionRassServiceFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaSedacionRass_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF448";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF448_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF448_Save(SS_HC_EscalaSedacionRass_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF448_Save - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        if (objSave.Total == null || objSave.Total == 0)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Criterios: Debe marcar por lo menos una opción", "ERROR", false);
                        }
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = "CCEPF448";
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";

                        registro = SvcEscalaSedacionRassServiceFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF447FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF447_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF447_View - Entrar");
                var LocalEnty = new SS_HC_EscalaRamsay_FE();
                var Listar = new List<SS_HC_EscalaRamsay_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcEscalaRamsayFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaRamsay_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    ENTITY_GLOBAL.Instance.CapIdEscalaRamsay = Listar[0].IdEscalaRamsay;
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }
                else
                {
                    LocalEnty.FlagParametro1 = "0";
                }

                LocalEnty.Version = "CCEPF447";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF447_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF447_Save(SS_HC_EscalaRamsay_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF447_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinico != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AMBULATORIO")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;


                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;

                        string mensage = "";

                        if (objSave.FlagParametro1 == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Seleccione una opción en el campo en la sección NIVEL", "ERROR", false);
                        }




                        registro = SvcEscalaRamsayFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registró";
                            else
                                mensage = "actualizó";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion

        #region CCEPF204FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF204_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF204_View - Entrar");
                var LocalEnty = new SS_HC_RetiroVoluntario_FE();
                var Listar = new List<SS_HC_RetiroVoluntario_FE>();
                LocalEnty.Accion = "LISTAR";

                LocalEnty.IdPersonalSalud = ENTITY_GLOBAL.Instance.IdPersonalSalud;
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcRetiroVoluntarioFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_RetiroVoluntario_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF204";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }

                    if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                    {
                        VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];

                        LocalEnty.IdPersonalSalud = EpiAtencionTemp.IdPersonalSalud;

                        //var varNombre = EpiAtencionTemp.MedicoNombre;
                        //var tfNom = X.GetCmp<TextField>("tfNomMed");
                        //if (varNombre != null && varNombre != "")
                        //{
                        //    tfNom.SetValue(varNombre); 
                        //}

                    }

                    var varNombre = ENTITY_GLOBAL.Instance.MedicoNombre;
                    var tfNom = X.GetCmp<TextField>("tfNomMed");
                    if (varNombre != null && varNombre != "")
                    {
                        tfNom.SetValue(varNombre);
                    }



                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF204_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CCEPF204_Save(SS_HC_RetiroVoluntario_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF204_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;


                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.FechaCreacion = DateTime.Now;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fechaingreso = Convert.ToDateTime(objSave.FechaIngreso);
                        fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        objSave.FechaIngreso = fechaingreso;
                        objSave.HoraIngreso = fechaingreso;
                        objSave.FechaModificacion = DateTime.Now;
                        string mensage = "";

                        if (objSave.RepresentanteLegal == null)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Ingrese el nombre del Pacienete /RepresentanteLegal ", "ERROR", false);
                        }




                        registro = SvcRetiroVoluntarioFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + "el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }
        #endregion



        #region CCEPF501_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF501_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF501_View - Entrar");
                var LocalEnty = new SS_HC_EvolucionObstetricaPuerperio_FE();
                var Listar = new List<SS_HC_EvolucionObstetricaPuerperio_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcEvolucionObstetricaPuerperio_FE.listarEntidad(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_EvolucionObstetricaPuerperio_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_EvolucionObstetricaPuerperio_FE> ListarCopy = (List<SS_HC_EvolucionObstetricaPuerperio_FE>)objetoGen;

                        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                        //  LocalEnty.Motivo = ListarCopy[0].Motivo;
                        //    LocalEnty.Resumen = ListarCopy[0].Resumen;
                        //     //Listar.
                        //Listar.AddRange(Listarnew);

                        //Listar.

                    }
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                /////////////////////////////////////////////


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF501_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF501_Save_EvolucionObstetricaPuerperio(SS_HC_EvolucionObstetricaPuerperio_FE objSave) //, String HoraIngreso
        {
            Log.Information("HClinicaController - CCEPF501_Save_EvolucionObstetricaPuerperio - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        //var hora = HoraIngreso.TrimStart('\"');
                        //hora = hora.TrimEnd('\"');
                        //var tiempo = DateTime.Parse(hora);

                        //var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        //fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        //fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        //objSave.Fecha = fechaingreso;
                        //objSave.Hora = fechaingreso;

                        string mensage = "";

                        registro = SvcEvolucionObstetricaPuerperio_FE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro ";
                            else
                                mensage = "actualizo ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + "el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF443_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF443_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF443_View - Entrar");
                var LocalEnty = new SS_HC_EscalaNorton_FE();
                var Listar = new List<SS_HC_EscalaNorton_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEscalaNortonFE.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_EscalaNorton_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF443";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF443_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF443_Save(SS_HC_EscalaNorton_FE objSave, String HoraIngreso)
        {
            Log.Information("HClinicaController - CCEPF443_Save - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA == "MED_AMBULATORIO")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        if (objSave.Total == null || objSave.Total == 0)
                        {
                            eventoPostFormulario(true, "");
                            return showMensajeNotifyData("Error", "Criterios: Debe marcar por lo menos una opción", "ERROR", false);
                        }
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                        }

                        var hora = HoraIngreso.TrimStart('\"');
                        hora = hora.TrimEnd('\"');
                        var tiempo = DateTime.Parse(hora);

                        var fecharegistro = Convert.ToDateTime(objSave.FechaRegistro);
                        fecharegistro = fecharegistro.AddHours(tiempo.Hour);
                        fecharegistro = fecharegistro.AddMinutes(tiempo.Minute);

                        objSave.FechaRegistro = fecharegistro;
                        objSave.HoraRegistro = fecharegistro;

                        string mensage = "";

                        registro = SvcEscalaNortonFE.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF200_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF200_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF200_View - Entrar");
                var LocalEnty = new SS_HC_InformeAlta_FE();
                var Listar = new List<SS_HC_InformeAlta_FE>();
                LocalEnty.Accion = "LISTAR";

                Session["SEC_TOP_200"] = 0;

                Session["SEC_TOP_200EX"] = 0;

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcInformeAltaFE.lista_Cabecera(LocalEnty).ToList();


                SS_HC_EpisodioAtencion obj2 = new SS_HC_EpisodioAtencion();
                obj2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                obj2.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA;
                obj2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                obj2.Accion = "VALIDA_ALTA_FORM";
                var result = SvcEpisodioAtencion.setMantenimiento(obj2);

                if (result != 0)
                {
                    //return showMensajeNotify("Excepción", "Esta atención ya cuenta con alta Médica.", "ERROR");
                    //return showMensajeNotifyData("Error", "Esta atención ya cuenta con alta Médica.", "ERROR", false);
                    showMensajeBox("Esta atención ya cuenta con alta Médica.", "Advertencia", "WARNING");
                    // FormPanel compoXXX = X.GetCmp<Ext.Net.FormPanel>("" + "FormActual");
                    // compoXXX.Disabled = true;
                    var guardar = X.GetCmp<Button>("cmdGuardar");
                    guardar.Disable(true);

                }

                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_InformeAlta_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        if (ENTITY_GLOBAL.Instance.IdMedico != null)
                        {
                            LocalEnty.IdMedico = (int)ENTITY_GLOBAL.Instance.IdMedico;
                        }
                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_200"] = LocalEnty.Accion;
                Session["InformeAlta_APD_DELETE"] = null;
                Session["Data_ExamenSolicitadoDelete"] = null;

                Session["InformeAlta_DiagAlt"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF200_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF200_DIAGINGRESO(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF200_DIAGINGRESO - Entrar");

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaDiagIng_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaDiagIng_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                // Listar = SvcInformeAltaFE.Listar_DiagIngreso(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                else
                {
                    LocalEnty2.ACCION = "DIAGNOSTICOFE";
                    LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                    var x = 0;
                    var y = 1;

                    if (Listar2.Count > 0)
                    {

                        foreach (var list in Listar2)
                        {
                            SS_HC_InformeAltaDiagIng_FE tempList = new SS_HC_InformeAltaDiagIng_FE();
                            tempList.Secuencia = y;
                            /*tempList.Codigo = Listar2[x].ValorCodigo7;*/
                            tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                            tempList.DiagnosticoDescripcion = Listar2[x].ValorCodigo1;

                            tempList.Accion = "NUEVO";

                            Listar.Add(tempList);
                            x = x + 1;
                            y = y + 1;



                        }
                    }

                }




                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                       if (objetoGen != null)
                       {
                           List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                           MA_MiscelaneosDetalle ObjDet;
                           int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                           foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                           {

                               ObjDet = new MA_MiscelaneosDetalle();

                               ObjDet = objEntity;
                               ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                               ObjDet.ACCION = "NUEVO";

                               Listar.Add(ObjDet);

                               CODIGOTEMP = CODIGOTEMP + 1;
                           }


                           //  Listar.AddRange(ListarCopy);
                       }
                       Session["DATA_COPIA_FORM"] = null;
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                /////////////////////////////////////////////
                Session["InformeAlta_DiagIng"] = Listar;

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF403_1_DIAGPRINCIPAL(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF403_1_DIAGPRINCIPAL - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaDiagIng_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaDiagIng_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();
                LocalEnty2.ACCION = "DIAGNOSTICOFEOA";
                LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                var x = 0;
                var y = 1;

                if (Listar2.Count > 0)
                {

                    foreach (var list in Listar2)
                    {
                        SS_HC_InformeAltaDiagIng_FE tempList = new SS_HC_InformeAltaDiagIng_FE();
                        tempList.Secuencia = y;
                        /*tempList.Codigo = Listar2[x].ValorCodigo7;*/
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                        tempList.DiagnosticoDescripcion = Listar2[x].ValorCodigo1;

                        tempList.Accion = "NUEVO";

                        Listar.Add(tempList);
                        x = x + 1;
                        y = y + 1;
                    }
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF200_DIAGALTA(String tipoCodigo)
        {

            try
            {
                Log.Information("HClinicaController - CCEPF200_DIAGALTA - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaDiagAlt_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaDiagAlt_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                Listar = SvcInformeAltaFE.Listar_DiagAlta(LocalEnty).ToList();

                int xYY = 0;
                foreach (var alg in Listar)
                {
                    //Listar[xYY].Secuencia = xYY;
                    Listar[xYY].Accion = "UPDATE";
                    xYY = xYY + 1;
                }


                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIOALTACOP"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {


                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Secuencia = x;
                        x = x + 1;

                    }

                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MED_INFORMEALTA_F2DIAG, Listar);
                    //FORM_ME xYY = xYY + 1;D_INFORMEALTA_F2DIAG
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        MA_MiscelaneosDetalle ObjDet;
                        int CODIGOTEMP = (int)Session["SEC_TOP_200"];
                        foreach (MA_MiscelaneosDetalle alg in ListarCopy)
                        {

                            SS_HC_InformeAltaDiagAlt_FE tempList = new SS_HC_InformeAltaDiagAlt_FE();
                            tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            //  tempList.Secuencia = Convert.ToInt32(alg.CodigoElemento);
                            tempList.Codigo = alg.ValorCodigo1;
                            tempList.DiagnosticoDescripcion = alg.ValorCodigo7;
                            tempList.Secuencia = (Listar.Count + 1);
                            tempList.Accion = "NUEVO";
                            Listar.Add(tempList);

                            CODIGOTEMP = CODIGOTEMP + 1;
                        }


                        //  Listar.AddRange(ListarCopy);
                    }
                    //  Session["DATA_COPIA_FORM"] = null;
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                    Session["COPIA_FORMULARIOALTACOP"] = "INACTIVA";
                    return this.Store(Listar);

                }




                //int x = 0;
                //foreach (var alg in Listar)
                //{
                //    Listar[x].Accion = "UPDATE";
                //    x = x + 1;
                //}

                Session["InformeAlta_DiagAlt"] = Listar;




                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF200_EXAMENES(String tipoCodigo)
        {

            try
            {
                Log.Information("HClinicaController - CCEPF200_EXAMENES - Entrar");

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaAPD_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaAPD_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();
                var Listar2Nueva = new List<MA_MiscelaneosDetalle>();

                var ListarMostrar = new List<SS_HC_InformeAltaAPD_FE>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                //LocalEnty.ValorCodigo5 = tipoCodigo;
                Listar = SvcInformeAltaFE.Listar_Examenes(LocalEnty).ToList();


                LocalEnty2.ACCION = "EXAMENESLIST";
                LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty2.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty2.ValorCodigo5 = tipoCodigo;
                Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                if (Listar.Count > 0)
                {
                    int xd = 0;

                    var y = 1;
                    foreach (SS_HC_InformeAltaAPD_FE alg in Listar)
                    {

                        Listar2Nueva = Listar2.Where(x => x.ValorCodigo7 == alg.CodigoSegus).ToList();

                        //Listar = Listar.Where(x => x.IdEspecialidad == ENTITY_GLOBAL.Instance.IDESPECIALIDADEMER).ToList();

                        foreach (MA_MiscelaneosDetalle list in Listar2Nueva)
                        {

                            if (alg.CodigoSegus == list.ValorCodigo7)
                            {
                            }
                            else
                            {
                                SS_HC_InformeAltaAPD_FE tempList = new SS_HC_InformeAltaAPD_FE();
                                tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                tempList.Secuencia = y;
                                tempList.CodigoSegus = list.ValorCodigo7;

                                // tempList.Version = list.ValorCodigo5;
                                tempList.ExamenDescripcion = list.ValorCodigo2;
                                tempList.Accion = "NUEVO";
                                ListarMostrar.Add(tempList);
                                xd = xd + 1;
                                y = y + 1;


                            }

                        }
                    }
                    Listar.AddRange(ListarMostrar);



                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIOALTAEXAMEM"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {


                        //int x = 0;
                        //foreach (var alg in Listar)
                        //{
                        //    Listar[x].Secuencia = x;
                        //    x = x + 1;

                        //}
                        String cadenas = "";
                        String[] cadArray;


                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MED_INFORMEALTA_F2EXA, Listar);
                        //FORM_ME xYY = xYY + 1;D_INFORMEALTA_F2DIAG
                        if (objetoGen != null)
                        {
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            MA_MiscelaneosDetalle ObjDet;
                            int CODIGOTEMP = (int)Session["SEC_TOP_200EX"];
                            foreach (MA_MiscelaneosDetalle alg in ListarCopy)
                            {
                                SS_HC_InformeAltaAPD_FE tempList = new SS_HC_InformeAltaAPD_FE();
                                tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                //  tempList.Secuencia = Convert.ToInt32(alg.CodigoElemento);

                                //objAdd.ValorCodigo5 = alg.ValorCodigo2;
                                cadArray = alg.ValorCodigo2.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                alg.ValorCodigo1 = cadenas;
                                tempList.CodigoSegus = alg.ValorCodigo1;
                                tempList.ExamenDescripcion = alg.ValorCodigo2;
                                tempList.Version = Convert.ToString(alg.ValorEntero7);
                                tempList.Secuencia = (Listar.Count + 1);
                                tempList.Accion = "NUEVO";
                                Listar.Add(tempList);

                                CODIGOTEMP = CODIGOTEMP + 1;
                            }


                            //  Listar.AddRange(ListarCopy);
                        }
                        //  Session["DATA_COPIA_FORM"] = null;
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                        Session["COPIA_FORMULARIOALTAEXAMEM"] = "INACTIVA";


                        return this.Store(Listar);

                    }




                }
                else
                {


                    int xP = 0;

                    var yP = 1;

                    foreach (MA_MiscelaneosDetalle list in Listar2)
                    {

                        SS_HC_InformeAltaAPD_FE tempList = new SS_HC_InformeAltaAPD_FE();
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                        tempList.Secuencia = yP;
                        tempList.CodigoSegus = list.ValorCodigo7;
                        tempList.ExamenDescripcion = list.ValorCodigo2;
                        tempList.Accion = "NUEVO";
                        Listar.Add(tempList);
                        xP = xP + 1;
                        yP = yP + 1;
                    }



                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIOALTAEXAMEM"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {


                        //int x = 0;
                        //foreach (var alg in Listar)
                        //{
                        //    Listar[x].Secuencia = x;
                        //    x = x + 1;

                        //}

                        String cadenas = "";
                        String[] cadArray;

                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MED_INFORMEALTA_F2EXA, Listar);
                        //FORM_ME xYY = xYY + 1;D_INFORMEALTA_F2DIAG
                        if (objetoGen != null)
                        {
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            MA_MiscelaneosDetalle ObjDet;
                            int CODIGOTEMP = (int)Session["SEC_TOP_200EX"];
                            foreach (MA_MiscelaneosDetalle alg in ListarCopy)
                            {

                                SS_HC_InformeAltaAPD_FE tempList = new SS_HC_InformeAltaAPD_FE();
                                tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                //  tempList.Secuencia = Convert.ToInt32(alg.CodigoElemento);

                                //objAdd.ValorCodigo5 = alg.ValorCodigo2;
                                cadArray = alg.ValorCodigo2.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                alg.ValorCodigo1 = cadenas;



                                tempList.CodigoSegus = alg.ValorCodigo1;
                                tempList.ExamenDescripcion = alg.ValorCodigo2;
                                tempList.Version = Convert.ToString(alg.ValorEntero7);
                                tempList.Secuencia = (Listar.Count + 1);
                                tempList.Accion = "NUEVO";
                                Listar.Add(tempList);

                                CODIGOTEMP = CODIGOTEMP + 1;
                            }


                            //  Listar.AddRange(ListarCopy);
                        }
                        //  Session["DATA_COPIA_FORM"] = null;
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                        Session["COPIA_FORMULARIOALTAEXAMEM"] = "INACTIVA";


                        return this.Store(Listar);

                    }


                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF200_addEliminar_DiagIng(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF200_addEliminar_DiagIng - Entrar");
            List<SS_HC_InformeAltaDiagIng_FE> InformeAltaDiagIng = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["InformeAlta_DiagIng"] != null)
                {
                    InformeAltaDiagIng = (List<SS_HC_InformeAltaDiagIng_FE>)Session["InformeAlta_DiagIng"];
                }

                try
                {
                    int x = 0;
                    foreach (var algo in InformeAltaDiagIng)
                    {
                        var temporal = new SS_HC_InformeAltaDiagIng_FE();
                        temporal = algo;

                        if (accion.Trim() != "NUEVO")
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAltaDiagIng[x].Accion = "DELETE";
                            }
                        }
                        else
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAltaDiagIng.Remove(temporal);
                            }
                        }
                        x = x + 1;
                    }
                    Session["InformeAlta_DiagIng"] = InformeAltaDiagIng;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();




        }
        public System.Web.Mvc.ActionResult CCEPF200_addEliminar_DiagAlt(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF200_addEliminar_DiagAlt - Entrar");
            List<SS_HC_InformeAltaDiagAlt_FE> InformeAlta_DiagAlt = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["InformeAlta_DiagAlt"] != null)
                {
                    InformeAlta_DiagAlt = (List<SS_HC_InformeAltaDiagAlt_FE>)Session["InformeAlta_DiagAlt"];
                }

                try
                {
                    int x = 0;
                    foreach (var algo in InformeAlta_DiagAlt)
                    {
                        var temporal = new SS_HC_InformeAltaDiagAlt_FE();
                        temporal = algo;

                        if (accion.Trim() != "NUEVO")
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAlta_DiagAlt[x].Accion = "DELETE";
                            }
                        }
                        else
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAlta_DiagAlt.Remove(temporal);
                            }
                        }
                        x = x + 1;
                    }
                    Session["InformeAlta_DiagAlt"] = InformeAlta_DiagAlt;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF200_addEliminar_APD(String MODO, String codigo, String secuencia, string accion)
        {

            Log.Information("HClinicaController - CCEPF200_addEliminar_APD - Entrar");
            //List<SS_HC_InformeAltaAPD_FE> InformeAltaAPD = null;
            //if ((codigo + "").Length > 0)
            //{
            //    if (Session["InformeAlta_APD"] != null)
            //    {
            //        InformeAltaAPD = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD"];
            //    }

            //    try
            //    {
            //        int x = 0;
            //        foreach (var algo in InformeAltaAPD)
            //        {
            //            var temporal = new SS_HC_InformeAltaAPD_FE();
            //            temporal = algo;

            //            if (accion.Trim() != "NUEVO")
            //            {
            //                if (algo.Secuencia == Convert.ToInt32(secuencia))
            //                {
            //                    InformeAltaAPD[x].Accion = "DELETE";
            //                }
            //            }
            //            else
            //            {
            //                if (algo.Secuencia == Convert.ToInt32(secuencia))
            //                {
            //                    InformeAltaAPD.Remove(temporal);
            //                }
            //            }
            //            x = x + 1;
            //        }
            //        Session["InformeAlta_APD"] = InformeAltaAPD;
            //    }
            //    catch (Exception ee)
            //    {
            //    }
            //}
            //return this.Direct();

            List<SS_HC_InformeAltaAPD_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["InformeAlta_APD_DELETE"] != null)
                {
                    dataDelete = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD_DELETE"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_InformeAltaAPD_FE>();
                }
                SS_HC_InformeAltaAPD_FE objDelete = new SS_HC_InformeAltaAPD_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["InformeAlta_APD_DELETE"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    EventLog.GenerarLogError(ex);
                    //return showMensajeNotify("Excepción", ex.ToString(), "ERROR");
                    throw;
                }
            }
            return this.Direct();




        }
        public System.Web.Mvc.ActionResult Save_InformeAlta(String selectionArray0, String selectionArray1, String selectionArray2, String selectionArray3, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_InformeAlta - Entrar");
            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_InformeAlta_FE> ObjLista2 = new List<SS_HC_InformeAlta_FE>();
            List<SS_HC_InformeAltaDiagAlt_FE> ObjLista3 = new List<SS_HC_InformeAltaDiagAlt_FE>();
            List<SS_HC_InformeAltaDiagIng_FE> ObjListaIngreso = new List<SS_HC_InformeAltaDiagIng_FE>();

            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {
                    //transact
                    SS_HC_InformeAlta_FE cabeceraMed = new SS_HC_InformeAlta_FE();
                    List<SS_HC_InformeAltaDiagIng_FE> InformeAltaDiagIng = new List<SS_HC_InformeAltaDiagIng_FE>();
                    List<SS_HC_InformeAltaDiagAlt_FE> InformeAltaDiagAlt = new List<SS_HC_InformeAltaDiagAlt_FE>();
                    List<SS_HC_InformeAltaAPD_FE> InformeAltaAPD = new List<SS_HC_InformeAltaAPD_FE>();


                    int IdSecuencia = 0;
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_InformeAlta_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;
                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {
                        cabeceraMed.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        cabeceraMed.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        cabeceraMed.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        cabeceraMed.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        cabeceraMed.hcaltamedica = 1;
                        cabeceraMed.Accion = (string)Session["Accion_200"];
                        cabeceraMed.FechaModificacion = DateTime.Now;
                        if (cabeceraMed.Accion == "NUEVO")
                        {
                            cabeceraMed.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            cabeceraMed.FechaCreacion = DateTime.Now;
                            cabeceraMed.UsuarioModificacion = Convert.ToString(ENTITY_GLOBAL.Instance.IdOrdenAtencion);
                        }
                        else
                        {
                            cabeceraMed.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            cabeceraMed.FechaModificacion = DateTime.Now;
                        }
                        cabeceraMed.Version = "CCEPF200";
                        if (selectionArray0.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_InformeAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_InformeAlta_FE>));
                            cabeceraMed.IdMedico = Convert.ToInt32(ENTITY_GLOBAL.Instance.CODPERSONA);
                            //cabeceraMed.IdEspecialidad = ENTITY_GLOBAL.Instance.IDESPECIALIDADEMER;
                            //cabeceraMed.IdMedico = ObjLista2[0].IdMedico;
                            cabeceraMed.IdTipoAlta = ObjLista2[0].IdTipoAlta;
                            cabeceraMed.IdEspecialidad = ObjLista2[0].IdEspecialidad;
                            cabeceraMed.IdPronostico = ObjLista2[0].IdPronostico;
                            cabeceraMed.Procedimientos = ObjLista2[0].Procedimientos;
                            if (ObjLista2[0].IdTipoAlta != null)
                            {
                                Session["IdTipoAlta"] = ObjLista2[0].IdTipoAlta;
                            }
                            if (ObjLista2[0].IdPronostico != null)
                            {
                                Session["IdPronostico"] = ObjLista2[0].IdPronostico;
                            }
                            if (ObjLista2[0].IdEspecialidad != null)
                            {
                                Session["IdEspecialidadAlta"] = ObjLista2[0].IdEspecialidad;
                            }
                        }




                        InformeAltaDiagIng = (List<SS_HC_InformeAltaDiagIng_FE>)Session["InformeAlta_DiagIng"];

                        //var InformeAltaDiagIngreso = new List<SS_HC_InformeAltaDiagIng_FE>();


                        //if (selectionArray1.Trim().Length > 0)
                        //{
                        //    ObjListaIngreso = (List<SS_HC_InformeAltaDiagIng_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_InformeAltaDiagIng_FE>));

                        //    foreach (var algo in ObjListaIngreso)
                        //    {

                        //        if (algo.Accion == "NUEVO")
                        //        {
                        //            SS_HC_InformeAltaDiagIng_FE tmp = new SS_HC_InformeAltaDiagIng_FE();

                        //            tmp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //            tmp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //            tmp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        //            tmp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                        //            tmp.Secuencia = algo.Secuencia;
                        //            tmp.Codigo = algo.Codigo;
                        //            tmp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                        //            tmp.Accion = algo.Accion;

                        //            tmp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //            tmp.FechaCreacion = DateTime.Now;

                        //            InformeAltaDiagIngreso.Add(tmp);//error

                        //        }

                        //    }
                        //    if (InformeAltaDiagIng != null)
                        //    {
                        //        InformeAltaDiagIngreso.AddRange(InformeAltaDiagIng);
                        //    }
                        //}



                        var InformeAltaDiagAlt3 = (List<SS_HC_InformeAltaDiagAlt_FE>)Session["InformeAlta_DiagAlt"];
                        var InformeAltaDiagAlt2 = new List<SS_HC_InformeAltaDiagAlt_FE>();

                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista3 = (List<SS_HC_InformeAltaDiagAlt_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_InformeAltaDiagAlt_FE>));

                            foreach (var algo in ObjLista3)
                            {

                                if (algo.Accion == "NUEVO")
                                {
                                    SS_HC_InformeAltaDiagAlt_FE tmp = new SS_HC_InformeAltaDiagAlt_FE();

                                    tmp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    tmp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    tmp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    tmp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    tmp.Secuencia = algo.Secuencia;
                                    tmp.Codigo = algo.Codigo;
                                    tmp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                    tmp.Accion = algo.Accion;

                                    tmp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    tmp.FechaCreacion = DateTime.Now;

                                    InformeAltaDiagAlt2.Add(tmp);//error

                                }

                            }
                            if (InformeAltaDiagAlt3 != null)
                            {
                                InformeAltaDiagAlt2.AddRange(InformeAltaDiagAlt3);
                            }
                        }


                        //  InformeAltaAPD = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD"];

                        // Bloque UPDATE Y INSERT 3 EXAMENES ALTA

                        List<SS_HC_InformeAltaAPD_FE> dataDeleteCiruExamenes = null;
                        if (Session["InformeAlta_APD_DELETE"] != null)
                        {
                            dataDeleteCiruExamenes = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD_DELETE"];
                        }
                        if (dataDeleteCiruExamenes != null)
                        {
                            foreach (var objDel in dataDeleteCiruExamenes)
                            {
                                InformeAltaAPD.Add(objDel);
                            }
                        }


                        //    InformeAltaAPD = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD"];
                        List<SS_HC_InformeAltaAPD_FE> ObjListaeXAMEN = new List<SS_HC_InformeAltaAPD_FE>();
                        if (selectionArray3.Trim().Length > 0)
                        {

                            ObjListaeXAMEN = (List<SS_HC_InformeAltaAPD_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_InformeAltaAPD_FE>));


                            foreach (var algo in ObjListaeXAMEN)
                            {

                                if (algo.Accion == "NUEVO")
                                {
                                    SS_HC_InformeAltaAPD_FE tmp = new SS_HC_InformeAltaAPD_FE();

                                    tmp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    tmp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    tmp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    tmp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    tmp.Secuencia = algo.Secuencia;

                                    tmp.Version = algo.Version;


                                    cadArray = algo.ExamenDescripcion.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();

                                    tmp.CodigoSegus = cadenas;
                                    tmp.ExamenDescripcion = algo.ExamenDescripcion;
                                    tmp.Accion = algo.Accion;

                                    tmp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    tmp.FechaCreacion = DateTime.Now;

                                    InformeAltaAPD.Add(tmp);//error

                                }

                            }
                        }



                        //}

                        IdSecuencia = SvcInformeAltaFE.setMantenimientoGrupo(cabeceraMed, InformeAltaDiagIng, InformeAltaDiagAlt2, InformeAltaAPD);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        
                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["InformeAlta_APD_DELETE"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            eventoLoadPostFormulario(true, "storeExamenes2", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF200_addEliminar_Examen(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF200_addEliminar_Examen - Entrar");
            List<SS_HC_ExamenSolicitadoFE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ExamenSolicitadoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenSolicitadoFE>();
                }
                SS_HC_ExamenSolicitadoFE objDelete = new SS_HC_ExamenSolicitadoFE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.IdProcedimientoCab = 0;//Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.SecuenciaCab = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Data_ExamenSolicitadoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            //X.Msg.Alert("Metodo CCEPF150_addEliminar_Examen", "Antes del .. return this.Direct() ..").Show();
            return this.Direct();
        }

        #endregion

        #region CCEPF201_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF201_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF201_View - Entrar");
                var LocalEnty0 = new SS_HC_InformeAlta_FE();
                var Listar = new List<SS_HC_InformeAlta_FE>();
                LocalEnty0.Accion = "LISTAR";
                LocalEnty0.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty0.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty0.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty0.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                Listar = SvcInformeAltaFE.lista_Cabecera(LocalEnty0).ToList();

                ENTITY_GLOBAL.Instance.INDICA_INFORME_ALTA = Listar.Count == 0 ? 1 : 0;
                bool hallado0 = false;
                if (Listar.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.listaInformeAlta = Listar;
                    foreach (SS_HC_InformeAlta_FE objEntity in Listar)
                    {
                        LocalEnty0 = objEntity;
                        hallado0 = true;
                        LocalEnty0.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty0.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                        }
                    }
                    var Comentario = X.GetCmp<TextField>("Comentario");
                    var txtActividadF = X.GetCmp<TextField>("txtActividadFisica");
                    var txtIndi = X.GetCmp<TextField>("txtIndiDieta");
                    var txtRest = X.GetCmp<TextField>("txtRestricciones");

                    Comentario.SetValue(Listar[0].indigenerales);
                    txtActividadF.SetValue(Listar[0].actividafisica);
                    txtIndi.SetValue(Listar[0].indidieta);
                    txtRest.SetValue(Listar[0].restricciones);
                }
                else
                {
                    showMensajeBox("Debe registrar Informe de alta", "Advertencia", "WARNING");
                    var guardar = X.GetCmp<Button>("cmdGuardar");
                    var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                    var btn2m = X.GetCmp<Button>("btnSelDesactivo0M");
                    btn2m.Disable(true);
                    guardar.Disable(true);
                    btn2.Disable(true);
                }

                if (!hallado0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty0.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty0.Accion = "NUEVO";
                    }
                }
                /**************/

                Session["Accion_201"] = LocalEnty0.Accion;

                var datos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEA");

                for (int x = 0; x < datos.Count(); x++)
                {
                    string num = datos[x].Codigo;
                    if (num.Trim() == "04")
                    {

                    }
                    else { Session["OPCION"] = num.Trim(); }
                }

                List<SY_SeguridadAutorizaciones> CodigoAlma = new List<SY_SeguridadAutorizaciones>();

                var LocalEntyAuto = new SY_SeguridadAutorizaciones();

                LocalEntyAuto.AplicacionCodigo = "SY";
                // int inicio = Convert.ToInt32(IdAgente);
                int inicio = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                LocalEntyAuto.Usuario = ENTITY_GLOBAL.Instance.USUARIO;

                LocalEntyAuto.Accion = "LISTARSEGURIDADALMACEN";

                CodigoAlma = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEntyAuto, inicio, 0);
                for (int x = 0; x < CodigoAlma.Count(); x++)
                {
                    string val = CodigoAlma[x].MasterBrowseFlag;
                    string COD = CodigoAlma[x].Concepto;
                    if (val.Trim() == "1")
                    {
                        Session["OPCIONALMACEN_INFORMALTA"] = COD.Trim();
                    }
                    else
                    {

                    }
                }

                ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = null;
                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                Session["HC_MedicamentoAltaDetalleList"] = null;
                Session["HC_MedicamentoAltaList"] = null;
                Session["HC_MedicamentoAltaID"] = null;
                Session["SS_HC_InformeAltaProxCitaDel_FE"] = null;
                Session["HC_InformeAltaProxCitaList"] = null;

                var LocalEnty = new BE_MedicamentoAlta_FE();
                LocalEnty.Accion = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");


                /*********************************/
                var objListaAnt = new List<SS_HC_MedicamentoAlta_FE>();
                var objListaAnt2 = new List<SS_HC_MedicamentoAlta_FE>();
                SS_HC_MedicamentoAlta_FE objEnt = new SS_HC_MedicamentoAlta_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = 1; //para Medicina
                objListaAnt = SvcInformeAltaFE.MedicamentoListar(objEnt);

                objEnt.TipoMedicamento = 4;
                objListaAnt2 = SvcInformeAltaFE.MedicamentoListar(objEnt);
                objListaAnt.AddRange(objListaAnt2);


                bool hallado = false; //ADD 19/12/16
                if (objListaAnt.Count > 0)
                {
                    foreach (SS_HC_MedicamentoAlta_FE intobj in objListaAnt)
                    {
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }

                        /**ADD 19/12/16**/
                        LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                        LocalEnty.Linea = intobj.Linea;
                        LocalEnty.Familia = intobj.Familia;
                        LocalEnty.SubFamilia = intobj.SubFamilia;
                        LocalEnty.Comentario = intobj.Comentario;
                        LocalEnty.TipoReceta = intobj.TipoReceta;
                        LocalEnty.Accion = "UPDATE";
                        /**/
                    }
                    hallado = true;

                    LocalEnty.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }

                }
                ///////////////

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";

                        LocalEnty.Accion = "NUEVO";

                        if (Listar.Count > 0)
                        {
                            if (Listar[0].indigenerales != "" || Listar[0].actividafisica != "" ||
                            Listar[0].indidieta != "" || Listar[0].restricciones != "")
                            {
                                if (Listar[0].indigenerales != null || Listar[0].actividafisica != null ||
                            Listar[0].indidieta != null || Listar[0].restricciones != null)
                                {
                                    LocalEnty.acc = "SI";
                                }

                            }
                        }


                        //if (Listar[0].indigenerales != null || Listar[0].actividafisica != null || 
                        //    Listar[0].indidieta != null || Listar[0].restricciones != null)
                        //{

                        //}
                        //else
                        //{
                        //    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";

                        //    LocalEnty.Accion = "NUEVO";
                        //}


                    }

                }
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();
                       SS_HC_Medicamento_FE objMed;
                       object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaAnt);
                       if (objetoGen != null)
                       {
                           List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;
                           objMed = new SS_HC_Medicamento_FE();
                           LocalEnty.Comentario = ListarCopy[0].Comentario;

                       }
                       Session["COPIA_FORMULARIO"] = "ACTIVA";
                   }*/
                /////////////////////////////////////////////

                /***************************************************/
                return View("FormulariosExtras/CCEPF201_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult Save_MedicamentoAltaTemp(BE_MedicamentoAlta_FE objMedicamento, String id)
        {
            Log.Information("HClinicaController - Save_MedicamentoAltaTemp - Entrar");
            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (objMedicamento.Dosis != null && objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    //
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.

                    }
                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_MedicamentoAlta_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);

                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }
                    }
                    string nomvia = "";
                    var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    foreach (var result in univia)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }

                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }

                    objMedicamento.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                    int regItems = 0;
                    SS_HC_MedicamentoAlta_FE ObjTrace = new SS_HC_MedicamentoAlta_FE();
                    ObjTrace = objMedicamento;
                    ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.DiasTratamiento = 0;
                    ObjTrace.GrupoMedicamento = 0;
                    ObjTrace.Estado = 2;
                    regItems = SvcInformeAltaFE.setMantenimientoMedicamentoAltaAuditoria(1, ObjTrace);
                    objMedicamento.Accion = "UPDATE";
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoAltaList"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoAltaList"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                        //foreach (var result in objLista)
                        //{
                        //    if (mayor < result.Secuencia)
                        //    {
                        //        mayor = result.Secuencia;
                        //    }
                        //}
                        //regItems = objLista.Count + 1;
                        //regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoAltaList"] = objLista;
                    }

                    /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                        ActivaDescativaButtonSave(true);
                    }*/

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    var textd = "storeExamenes" + id;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel1");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("Linea");
                    var txtFamilia = X.GetCmp<TextField>("Familia");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
                    var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");

                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("Dosis");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
                    //DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("Cantidad");
                    //Cantidad.SetValue(0);
                    var IdVia = X.GetCmp<NumberField>("IdVia");
                    IdVia.SetValue(0);
                    var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                    IdUnidadMedida.SetValue(0);
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("Accion");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("Presentacion");
                    Presentacion.SetValue("");
                    var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
                    UnidadTiempo.SetValue(0);
                    var Periodo = X.GetCmp<NumberField>("Periodo");
                    Periodo.SetValue(0);
                    var TipoComida = X.GetCmp<NumberField>("TipoComida");
                    TipoComida.SetValue(0);
                    var Indicacion = X.GetCmp<TextField>("Indicacion");
                    Indicacion.SetValue("");

                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }

            //var a = new JFunction { Fn = "ServidorStore" };
            //a.Call();
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_MedicamentoAltaTemp_X(string dato, String id)
        {
            Log.Information("HClinicaController - Save_MedicamentoAltaTemp_X - Entrar");
            var Comentario = X.GetCmp<TextField>("Comentario");
            var id2 = "";
            var objMedicamento = new BE_MedicamentoAlta_FE();
            var objMedicamentotemp = new List<BE_MedicamentoAlta_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                if (dato.Trim().Length > 0)
                {
                    objMedicamentotemp = (List<BE_MedicamentoAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(dato, typeof(List<BE_MedicamentoAlta_FE>));
                    objMedicamento.Linea = objMedicamentotemp[0].Linea;
                    objMedicamento.LineaDescripcion = objMedicamentotemp[0].LineaDescripcion;
                    objMedicamento.Familia = objMedicamentotemp[0].Familia;
                    objMedicamento.FamiliaDescripcion = objMedicamentotemp[0].FamiliaDescripcion;
                    objMedicamento.SubFamilia = objMedicamentotemp[0].SubFamilia;
                    objMedicamento.CodigoComponente = objMedicamentotemp[0].CodigoComponente;
                    objMedicamento.SubFamiliaDescripcion = objMedicamentotemp[0].SubFamiliaDescripcion;
                    objMedicamento.Medicamento = objMedicamentotemp[0].Medicamento;
                    objMedicamento.MedicamentoDescripcion = objMedicamentotemp[0].MedicamentoDescripcion;
                    objMedicamento.Presentacion = objMedicamentotemp[0].Presentacion;
                    objMedicamento.Cantidad = objMedicamentotemp[0].Cantidad;
                    objMedicamento.IdUnidadMedida = objMedicamentotemp[0].IdUnidadMedida;
                    objMedicamento.IndicadorEPS = objMedicamentotemp[0].IndicadorEPS;
                    objMedicamento.Secuencia = 0;/* objMedicamentotemp[0].Secuencia;*/
                    objMedicamento.Indicacion = objMedicamentotemp[0].Indicacion;
                    objMedicamento.Accion = objMedicamentotemp[0].Accion;
                }
                if (/*objMedicamento.Dosis != null &&*/ objMedicamento.Cantidad != null && id == "0")
                {
                    int registro = -1;
                    if (id == "")
                    {
                        //   i//d2 = X.GetCmp<TextField>("NumeroStore");
                        //id= id2.
                    }
                    objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objMedicamento.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objMedicamento.Accion = "NUEVO";  //OBS
                    objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                    objMedicamento.TipoMedicamento = 4;//OBS:  TIPO MEDICINA
                    objMedicamento.Comentario = Comentario.Text;
                    string mensage = "";
                    var objLista = new List<BE_MedicamentoAlta_FE>();
                    Random rnd = new Random();
                    objMedicamento.Secuencia = Convert.ToInt32(rnd.Next());
                    objMedicamento.GrupoMedicamento = Convert.ToInt32(id);
                    /*****/
                    string tiempo1 = "";
                    string tiempo2 = "";
                    var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                    foreach (var result in unidadtiempo)
                    {
                        if (objMedicamento.UnidadTiempo == result.ID)
                        {
                            tiempo1 = result.Name;
                        }
                        if (objMedicamento.TipoComida == result.ID)
                        {
                            tiempo2 = result.Name;
                        }
                    }
                    string medida = "";
                    var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                    foreach (var result in unidadmedida)
                    {
                        if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result.Codigo))
                        {
                            medida = result.Name.Trim();
                        }
                    }
                    string nomvia = "";
                    var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");
                    foreach (var result in univia)
                    {
                        if (objMedicamento.IdVia == result.ID)
                        {
                            nomvia = result.Name;
                        }
                    }
                    /*****/
                    string tPresentacion = "";
                    if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                    string tDosis = "";
                    if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }
                    string tIdUnidadMedida = "";
                    if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                    string tFrecuencia = "";
                    if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                    string tUTiempo = "";
                    if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                    string tPeriodo = "";
                    if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                    string tUTiempo2 = "";
                    if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                    string tVia = "";
                    if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                    string tCantidad = "";
                    if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                    string tIndicacion = "";
                    if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }
                    objMedicamento.UsuarioAuditoria =/* tPresentacion + tDosis +*/ tIdUnidadMedida +/* tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia +*/ tCantidad + tIndicacion;

                    int regItems = 0;
                    SS_HC_MedicamentoAlta_FE ObjTrace = new SS_HC_MedicamentoAlta_FE();
                    ObjTrace = objMedicamento;
                    ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    ObjTrace.DiasTratamiento = 0;
                    ObjTrace.GrupoMedicamento = 0;
                    ObjTrace.Estado = 2;
                    regItems = SvcInformeAltaFE.setMantenimientoMedicamentoAltaAuditoria(1, ObjTrace);
                    objMedicamento.Accion = "UPDATE";
                    //if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == null)
                    if (Session["HC_MedicamentoAltaList"] == null)
                    {
                        objMedicamento.Secuencia = 1;
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoAltaList"] = objLista;
                        ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    }
                    else
                    {
                        int mayor = 0;
                        objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                        foreach (var result in objLista)
                        {
                            if (mayor < result.Secuencia)
                            {
                                mayor = result.Secuencia;
                            }
                        }
                        //regItems = objLista.Count + 1;
                        regItems = mayor + 1;
                        objMedicamento.Secuencia = regItems;
                        objMedicamento.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;//ADD
                        objLista.Add(objMedicamento);
                        Session["HC_MedicamentoAltaList"] = objLista;
                    }

                    /*registro = SvcExamenFisicoTriajeService.setMantenimiento(objExamenFisicoTriaje);
                    if (registro > 0)
                    {
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + registro.ToString().Trim()).Show();
                        ActivaDescativaButtonSave(true);
                    }*/

                    // int reg= svc
                    //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    var textd = "storeExamenes1" /*+ id*/;
                    var store = X.GetCmp<Store>(textd);
                    store.Reload();

                    var btn = X.GetCmp<Button>("cmdGuardar");
                    var panel = X.GetCmp<Panel>("Panel8");
                    panel.Hidden = true;
                    panel.Visible = false;
                    var txtLinea = X.GetCmp<TextField>("LineaX");
                    var txtFamilia = X.GetCmp<TextField>("FamiliaX");
                    var txtSubFamilia = X.GetCmp<TextField>("SubFamiliaX");
                    var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponenteX");
                    var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcionX");
                    var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcionX");
                    var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcionX");
                    var txtAIndicacion = X.GetCmp<TextArea>("IndicacionX");

                    /* var cbT*/

                    txtLinea.SetValue("");
                    txtFamilia.SetValue("");
                    txtSubFamilia.SetValue("");
                    txtCodigoComponente.SetValue("");
                    SubFamiliaDescripcion.SetValue("");
                    LineaDescripcion.SetValue("");
                    FamiliaDescripcion.SetValue("");
                    txtAIndicacion.SetValue("");

                    var Dosis = X.GetCmp<NumberField>("DosisX");
                    Dosis.SetValue(0);
                    var Frecuencia = X.GetCmp<NumberField>("FrecuenciaX");
                    Frecuencia.SetValue(0);
                    var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamientoX");
                    DiasTratamiento.SetValue(0);
                    var Cantidad = X.GetCmp<NumberField>("CantidadX");
                    Cantidad.SetValue(0);
                    /*  var IdVia = X.GetCmp<NumberField>("IdVia");
                      IdVia.SetValue(0);
                      var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
                      IdUnidadMedida.SetValue(0);*/
                    /***ADD 19/12/16***/
                    var Accion = X.GetCmp<TextField>("AccionX");
                    Accion.SetValue("");
                    var Presentacion = X.GetCmp<TextField>("PresentacionX");
                    Presentacion.SetValue("");
                    /* var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempoX");
                     UnidadTiempo.SetValue(0);
                     var Periodo = X.GetCmp<NumberField>("PeriodoX");
                     Periodo.SetValue(0);
                     var TipoComida = X.GetCmp<NumberField>("TipoComidaX");
                     TipoComida.SetValue(0);*/
                    var Indicacion = X.GetCmp<TextField>("IndicacionX");
                    Indicacion.SetValue("");
                    Comentario.SetValue("");
                    /******/
                }
                else
                {
                    //  X.Msg.Alert("Ventana de Mensajes ", "Por favor Complete todo los campos... ").Show();
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Editar_MedicamentoAltaTemp(BE_MedicamentoAlta_FE objMedicamento, String id)
        {
            Log.Information("HClinicaController - Editar_MedicamentoAltaTemp - Entrar");
            string mensage = "";
            var objLista = new List<BE_MedicamentoAlta_FE>();
            var objLista2 = new List<BE_MedicamentoAlta_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoAltaList"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";
                var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                string nomvia = "";
                var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");

                objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                foreach (BE_MedicamentoAlta_FE result in objLista)
                {
                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }

                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = tPresentacion + tDosis + tIdUnidadMedida + tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia + tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATE"; }
                        int IdSecuencia = 0;
                        SS_HC_MedicamentoAlta_FE ObjTrace = new SS_HC_MedicamentoAlta_FE();
                        ObjTrace = result;
                        ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //ObjTrace.DiasTratamiento = 0;
                        ObjTrace.GrupoMedicamento = 0;
                        IdSecuencia = SvcInformeAltaFE.setMantenimientoMedicamentoAltaAuditoria(1, ObjTrace);

                    }
                    objLista2.Add(result);
                }
                Session["HC_MedicamentoAltaList"] = objLista2;
            }

            /*  int IdSecuencia = objMedicamento.Secuencia;
              if (objMedicamento.Accion != "NUEVO")
              {
                  objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                  objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                  objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                  objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                  objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                  objMedicamento.CodigoComponente = objMedicamento.Medicamento;
                  //objMedicamento.GrupoMedicamento = Convert.ToInt32(id);
                  objMedicamento.Accion = "UPDATEINDIV";
              }
              objMedicamento.GrupoMedicamento = Convert.ToInt32(id);
              objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
              objMedicamento.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;*/

            var store = X.GetCmp<Store>("storeExamenes0");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");
            var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            txtAIndicacion.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            // DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            //Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");


            /* IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);
             ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
             */
            /* if (IdSecuencia > 0)
             {
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                 else mensage = " actualizó ";
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                 Session["HC_MedicamentoList"] = null;
                 Session["HC_MedicamentoDetalleList"] = null;
                 Session["HC_MedicamentoDetalleListDELETE"] = null;
                 eventoLoadPostFormulario(true, "storeExamenes", null);
                 eventoPostFormulario(true, "");*/
            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");
            /* }
             else
             {
                 eventoPostFormulario(false, "");
                 return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
             }*/
        }
        public System.Web.Mvc.ActionResult Editar_MedicamentoAltaTemp_X(string dato, String id)
        {
            string mensage = "";
            var objLista = new List<BE_MedicamentoAlta_FE>();
            var objLista2 = new List<BE_MedicamentoAlta_FE>();

            var objMedicamento = new BE_MedicamentoAlta_FE();
            var objMedicamentotemp = new List<BE_MedicamentoAlta_FE>();
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            if (Session["HC_MedicamentoAltaList"] != null)
            {
                string tiempo1 = "";
                string tiempo2 = "";


                if (dato.Trim().Length > 0)
                {
                    objMedicamentotemp = (List<BE_MedicamentoAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(dato, typeof(List<BE_MedicamentoAlta_FE>));

                    objMedicamento.Linea = objMedicamentotemp[0].Linea;
                    objMedicamento.LineaDescripcion = objMedicamentotemp[0].LineaDescripcion;
                    objMedicamento.Familia = objMedicamentotemp[0].Familia;
                    objMedicamento.FamiliaDescripcion = objMedicamentotemp[0].FamiliaDescripcion;
                    objMedicamento.SubFamilia = objMedicamentotemp[0].SubFamilia;
                    objMedicamento.CodigoComponente = objMedicamentotemp[0].CodigoComponente;
                    objMedicamento.SubFamiliaDescripcion = objMedicamentotemp[0].SubFamiliaDescripcion;
                    objMedicamento.Medicamento = objMedicamentotemp[0].Medicamento;
                    objMedicamento.MedicamentoDescripcion = objMedicamentotemp[0].MedicamentoDescripcion;
                    objMedicamento.Presentacion = objMedicamentotemp[0].Presentacion;
                    objMedicamento.Cantidad = objMedicamentotemp[0].Cantidad;
                    objMedicamento.IdUnidadMedida = objMedicamentotemp[0].IdUnidadMedida;
                    objMedicamento.IndicadorEPS = objMedicamentotemp[0].IndicadorEPS;
                    objMedicamento.Indicacion = objMedicamentotemp[0].Indicacion;
                    objMedicamento.Secuencia = objMedicamentotemp[0].Secuencia;
                    objMedicamento.Accion = objMedicamentotemp[0].Accion;
                }




                var unidadtiempo = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO");
                string medida = "";
                var unidadmedida = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(objMedicamento.Linea, objMedicamento.Familia, objMedicamento.SubFamilia, "", "MEDUNIDAMED");
                string nomvia = "";
                var univia = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA");






                objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                foreach (BE_MedicamentoAlta_FE result in objLista)
                {
                    if (objMedicamento.Secuencia == result.Secuencia & objMedicamento.SecuenciaMedicamento == result.SecuenciaMedicamento & result.GrupoMedicamento == 0)
                    {
                        result.IdUnidadMedida = objMedicamento.IdUnidadMedida;
                        result.Dosis = objMedicamento.Dosis;
                        result.Cantidad = objMedicamento.Cantidad;
                        result.Frecuencia = objMedicamento.Frecuencia;
                        result.UnidadTiempo = objMedicamento.UnidadTiempo;
                        result.IdVia = objMedicamento.IdVia;
                        result.Periodo = objMedicamento.Periodo;
                        result.TipoComida = objMedicamento.TipoComida;
                        result.Indicacion = objMedicamento.Indicacion;

                        foreach (var result1 in unidadtiempo)
                        {
                            if (objMedicamento.UnidadTiempo == result1.ID)
                            {
                                tiempo1 = result1.Name;
                            }
                            if (objMedicamento.TipoComida == result1.ID)
                            {
                                tiempo2 = result1.Name;
                            }
                        }

                        foreach (var result2 in unidadmedida)
                        {
                            if (objMedicamento.IdUnidadMedida == Convert.ToInt32(result2.Codigo))
                            {
                                medida = result2.Name.Trim();
                            }

                        }
                        foreach (var result3 in univia)
                        {
                            if (objMedicamento.IdVia == result3.ID)
                            {
                                nomvia = result3.Name;
                            }

                        }

                        string tPresentacion = "";
                        if (objMedicamento.Presentacion != null /*|| objMedicamento.Presentacion!=""*/ ) { tPresentacion = "Presentacion: " + objMedicamento.Presentacion; }

                        string tDosis = "";
                        if (objMedicamento.Dosis != null || objMedicamento.Dosis != "") { tDosis = " Dosis: " + Convert.ToInt32(objMedicamento.Dosis); }
                        string tIdUnidadMedida = "";
                        if (objMedicamento.IdUnidadMedida != null || objMedicamento.IdUnidadMedida != 0) { tIdUnidadMedida = " U.Medida: " + medida; }

                        string tFrecuencia = "";
                        if (objMedicamento.Frecuencia != null || Convert.ToInt32(objMedicamento.Frecuencia) != 0) { tFrecuencia = " Frecuencia: " + Convert.ToInt32(objMedicamento.Frecuencia); }
                        string tUTiempo = "";
                        if (objMedicamento.UnidadTiempo != null || objMedicamento.UnidadTiempo != 0) { tUTiempo = " U.Tiempo: " + tiempo1; }//modificar

                        string tPeriodo = "";
                        if (objMedicamento.Periodo != null || objMedicamento.Periodo != "") { tPeriodo = " Periodo: " + objMedicamento.Periodo; }
                        string tUTiempo2 = "";
                        if (objMedicamento.TipoComida != null || objMedicamento.TipoComida != 0) { tUTiempo2 = " U.Tiempo: " + tiempo2; }//modificar

                        string tVia = "";
                        if (objMedicamento.IdVia != null || objMedicamento.IdVia != 0) { tVia = " Vía: " + objMedicamento.IdVia; }//modificar

                        string tCantidad = "";
                        if (objMedicamento.Cantidad != null || Convert.ToInt32(objMedicamento.Cantidad) != 0) { tCantidad = " Cantidad: " + Convert.ToInt32(objMedicamento.Cantidad); }

                        string tIndicacion = "";
                        if (objMedicamento.Indicacion != null /*|| objMedicamento.Indicacion!="" */) { tIndicacion = " Indicacion: " + objMedicamento.Indicacion; }


                        result.UsuarioAuditoria = /*tPresentacion + tDosis +*/ tIdUnidadMedida + /*tFrecuencia + tUTiempo + tPeriodo + tUTiempo2 + tVia +*/ tCantidad + tIndicacion;

                        if (result.Accion != "NUEVO")
                        { result.Accion = "UPDATE"; }
                        int IdSecuencia = 0;
                        BE_MedicamentoAlta_FE ObjTrace = new BE_MedicamentoAlta_FE();
                        ObjTrace = result;
                        ObjTrace.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        ObjTrace.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        ObjTrace.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        ObjTrace.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        ObjTrace.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        ObjTrace.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        //ObjTrace.DiasTratamiento = 0;
                        ObjTrace.GrupoMedicamento = 0;
                        IdSecuencia = SvcInformeAltaFE.setMantenimientoMedicamentoAltaAuditoria(1, ObjTrace);

                        //UPDATEINDIV
                    }
                    objLista2.Add(result);
                }
                Session["HC_MedicamentoAltaList"] = objLista2;
            }

            /*  int IdSecuencia = objMedicamento.Secuencia;
              if (objMedicamento.Accion != "NUEVO")
              {
                  objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                  objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                  objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                  objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                  objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                  objMedicamento.CodigoComponente = objMedicamento.Medicamento;
                  //objMedicamento.GrupoMedicamento = Convert.ToInt32(id);
                  objMedicamento.Accion = "UPDATEINDIV";
              }
              objMedicamento.GrupoMedicamento = Convert.ToInt32(id);
              objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
              objMedicamento.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;*/

            var store = X.GetCmp<Store>("storeExamenes1");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel8");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("LineaX");
            var txtFamilia = X.GetCmp<TextField>("FamiliaX");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamiliaX");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponenteX");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcionX");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcionX");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcionX");
            /*var txtAIndicacion = X.GetCmp<TextArea>("Indicacion");*/

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");
            /* txtAIndicacion.SetValue("");*/

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("DosisX");
            Dosis.SetValue(0);
            /*var Frecuencia = X.GetCmp<NumberField>("FrecuenciaX");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);*/
            var Cantidad = X.GetCmp<NumberField>("CantidadX");
            // Cantidad.SetValue(0);
            /*var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);*/
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedidaM");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("AccionX");
            Accion.SetValue("");
            /*var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");*/


            /* IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);
             ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
             */
            /* if (IdSecuencia > 0)
             {
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                 else mensage = " actualizó ";
                 ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                 String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                 Session["HC_MedicamentoList"] = null;
                 Session["HC_MedicamentoDetalleList"] = null;
                 Session["HC_MedicamentoDetalleListDELETE"] = null;
                 eventoLoadPostFormulario(true, "storeExamenes", null);
                 eventoPostFormulario(true, "");*/
            return showMensajeNotify("Mensaje", "Registro Actualizado", "INFO");
            /* }
             else
             {
                 eventoPostFormulario(false, "");
                 return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
             }*/
        }

        public System.Web.Mvc.ActionResult CCEPF201_MEDICAMENTO(string VALOR, string tipoRecurso, int grupo)
        {
            Log.Information("HClinicaController - CCEPF201_MEDICAMENTO - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_MedicamentoAlta_FE>();
            var objListaShow = new List<BE_MedicamentoAlta_FE>();
            var objLista2 = new List<BE_MedicamentoAlta_FE>();
            var objListaShow2 = new List<BE_MedicamentoAlta_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_MedicamentoAlta_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoAltaList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo)
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_MedicamentoAlta_FE> ListarCopy = (List<BE_MedicamentoAlta_FE>)objetoGen;
                        objListaShow.AddRange(ListarCopy);
                        Session["HC_MedicamentoAltaList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {
                SS_HC_MedicamentoAlta_FE objEnt = new SS_HC_MedicamentoAlta_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcInformeAltaFE.MedicamentoListar(objEnt);

                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_MedicamentoAlta_FE obtemp;
                    foreach (SS_HC_MedicamentoAlta_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_MedicamentoAlta_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        ////
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";
                        objLista.Add(obtemp);
                    }
                    Session["HC_MedicamentoAltaList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_MedicamentoAlta_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                   UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_MedicamentoAlta_FE>();
                    if (objetoGen != null)
                    {
                        List<SS_HC_MedicamentoAlta_FE> ListarCopy = (List<SS_HC_MedicamentoAlta_FE>)objetoGen;
                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));
                        String[] cadArray2;
                        if (ListarCopy.Count > 0)
                        {
                            BE_MedicamentoAlta_FE obtemp;
                            foreach (SS_HC_MedicamentoAlta_FE intobj in ListarCopy)
                            {
                                obtemp = new BE_MedicamentoAlta_FE();
                                obtemp.Linea = intobj.Linea;
                                obtemp.Familia = intobj.Familia;
                                obtemp.SubFamilia = intobj.SubFamilia;
                                cadArray2 = intobj.Version.Trim().Split('|');
                                obtemp.LineaDescripcion = cadArray2[0];
                                obtemp.FamiliaDescripcion = cadArray2[1];
                                obtemp.SubFamiliaDescripcion = cadArray2[2];
                                obtemp.MedicamentoDescripcion = cadArray2[3];
                                obtemp.Secuencia = intobj.Secuencia;
                                obtemp.GrupoMedicamento = 0;
                                obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                obtemp.Dosis = intobj.Dosis;
                                obtemp.IdVia = intobj.IdVia;
                                obtemp.Cantidad = intobj.Cantidad;
                                obtemp.Frecuencia = intobj.Frecuencia;
                                obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                obtemp.Presentacion = intobj.Presentacion;
                                obtemp.TipoComida = intobj.TipoComida;
                                obtemp.Estado = intobj.Estado;
                                obtemp.CodigoComponente = intobj.CodigoComponente;
                                obtemp.Medicamento = intobj.CodigoComponente;
                                obtemp.Comentario = (string)Session["Comentario"];
                                obtemp.TipoReceta = intobj.TipoReceta;
                                obtemp.Periodo = intobj.Periodo;
                                obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                obtemp.Indicacion = intobj.Indicacion;
                                obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                obtemp.Accion = "NUEVO";
                                objLista.Add(obtemp);

                                Session["Comentario"] = "";
                            }
                            Session["HC_MedicamentoAltaList"] = objLista;
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                            objEntIndi.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion; // ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            objEntIndi.IdPaciente = listaCopiaForm[0].IdPaciente; //(int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEntIndi.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEntIndi.IdEpisodioAtencion = (long)listaCopiaForm[0].IdEpisodioAtencion; //(long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objEntIndi.Accion = "LISTAR";
                            objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                            if (objListaAntDetall.Count > 0)
                            {
                                Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                            }
                            //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                        /****/
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoList"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo)
                        {
                            objListaShow2.Add(result);
                        }
                    }
                    /*ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                        if (objetoGen != null)
                        {
                            List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoList"] = objListaShow;
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }*/
                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }
                return this.Store(objLista.ToList());
            }

        }
        public System.Web.Mvc.ActionResult CCEPF201_MEDICAMENTO_X(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaController - CCEPF201_MEDICAMENTO_X - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_MedicamentoAlta_FE>();
            var objListaShow = new List<BE_MedicamentoAlta_FE>();
            var objLista2 = new List<BE_MedicamentoAlta_FE>();
            var objListaShow2 = new List<BE_MedicamentoAlta_FE>();
            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;
            var objListaAnt = new List<SS_HC_MedicamentoAlta_FE>();
            var objListaAnt9 = new List<SS_HC_MedicamentoAlta_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoAltaList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETE" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo/* result.Linea.Trim()==linea*/)
                    {
                        objListaShow.Add(result);
                    }
                }
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2ALTAMATMED, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_MedicamentoAlta_FE> ListarCopy = (List<BE_MedicamentoAlta_FE>)objetoGen;
                        objListaShow.AddRange(ListarCopy);
                        Session["HC_MedicamentoAltaList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_MedicamentoAlta_FE objEnt = new SS_HC_MedicamentoAlta_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = 1; //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcInformeAltaFE.MedicamentoListar(objEnt);
                objEnt.TipoMedicamento = 4;
                objListaAnt9 = SvcInformeAltaFE.MedicamentoListar(objEnt);
                objListaAnt.AddRange(objListaAnt9);
                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_MedicamentoAlta_FE obtemp;
                    foreach (SS_HC_MedicamentoAlta_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_MedicamentoAlta_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        /***/
                        //obtemp.SubFamiliaDescripcion = intobj.Version;
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        obtemp.SecuencialHCE = intobj.SecuencialHCE;
                        // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        ////
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        ////
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        ///
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATE";
                        objLista.Add(obtemp);
                    }
                    Session["HC_MedicamentoAltaList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<BE_MedicamentoAlta_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_MEDICAMENTOS_F2ALTAMATMED, objLista);
                    var objListaAnt2 = new List<SS_HC_MedicamentoAlta_FE>();
                    if (objetoGen != null)
                    {
                        List<BE_MedicamentoAlta_FE> ListarCopy = (List<BE_MedicamentoAlta_FE>)objetoGen;
                        List<BE_MedicamentoAlta_FE> listaCopiaForm = (List<BE_MedicamentoAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<BE_MedicamentoAlta_FE>));
                        objLista.AddRange(ListarCopy);
                        Session["HC_MedicamentoAltaList"] = objLista;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }

                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["HC_MedicamentoAltaList"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETE" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            objListaShow2.Add(result);
                        }
                    }

                    /*ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                        if (objetoGen != null)
                        {
                            List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                            objListaShow.AddRange(ListarCopy);
                            Session["HC_MedicamentoList"] = objListaShow;
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }*/
                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }
                ///////////////////////////////////////////////////////////////////////////////////////////

                return this.Store(objLista.ToList());
            }

        }


        public System.Web.Mvc.ActionResult CCEPF201_PROXIMACITA(string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaController - CCEPF201_PROXIMACITA - Entrar");

            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<SS_HC_InformeAltaProxCita_FE>();
            var objLista = new List<SS_HC_InformeAltaProxCita_FE>();
            var objListaShow = new List<SS_HC_InformeAltaProxCita_FE>();
            var objLista2 = new List<SS_HC_InformeAltaProxCita_FE>();
            var objListaShow2 = new List<SS_HC_InformeAltaProxCita_FE>();


            var objListaAnt = new List<SS_HC_InformeAltaProxCita_FE>();
            var objListaAnt9 = new List<SS_HC_MedicamentoAlta_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_InformeAltaProxCitaList"] != null)
            {
                objLista = (List<SS_HC_InformeAltaProxCita_FE>)Session["HC_InformeAltaProxCitaList"];
                foreach (var result in objLista)
                {
                    objListaShow.Add(result);
                }

                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                       if (objetoGen != null)
                       {
                           List<BE_MedicamentoAlta_FE> ListarCopy = (List<BE_MedicamentoAlta_FE>)objetoGen;
                           objListaShow.AddRange(ListarCopy);
                           Session["HC_MedicamentoAltaList"] = objListaShow;
                       }
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_InformeAltaProxCita_FE objEnt = new SS_HC_InformeAltaProxCita_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                //objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                /*objEnt.GrupoMedicamento = grupo;*/
                objListaAnt = SvcInformeAltaFE.ProximaCitaListar(objEnt);

                /*objEnt.TipoMedicamento = 4;
                objListaAnt9 = SvcInformeAltaFE.MedicamentoListar(objEnt);*/

                // objListaAnt.AddRange(objListaAnt9);
                if (objListaAnt.Count > 0)
                {
                    var x = 0;
                    foreach (var algo in objListaAnt)
                    {
                        objListaAnt[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }


                Session["HC_InformeAltaProxCitaList"] = objListaAnt;
                //ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;

            }
            ///ADD LA OPCIÓN DE COPIA
            /* if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
             {
                 object objetoGen = (List<SS_HC_MedicamentoAlta_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                 var objListaAnt2 = new List<SS_HC_MedicamentoAlta_FE>();
                 if (objetoGen != null)
                 {
                     List<SS_HC_MedicamentoAlta_FE> ListarCopy = (List<SS_HC_MedicamentoAlta_FE>)objetoGen;
                     //objLista.AddRange(ListarCopy);
                     //Session["HC_MedicamentoList"] = objLista;

                     List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));



                     String[] cadArray2;
                     if (ListarCopy.Count > 0)
                     {
                         BE_MedicamentoAlta_FE obtemp;
                         foreach (SS_HC_MedicamentoAlta_FE intobj in ListarCopy)
                         {
                             obtemp = new BE_MedicamentoAlta_FE();
                             obtemp.Linea = intobj.Linea;
                             obtemp.Familia = intobj.Familia;
                             obtemp.SubFamilia = intobj.SubFamilia;
                               

                             Session["Comentario"] = "";
                         }
                         Session["HC_MedicamentoAltaList"] = objLista;
                         ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                         SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                         objEntIndi.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion; // ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                         objEntIndi.IdPaciente = listaCopiaForm[0].IdPaciente; //(int)ENTITY_GLOBAL.Instance.PacienteID;
                         objEntIndi.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                         objEntIndi.IdEpisodioAtencion = (long)listaCopiaForm[0].IdEpisodioAtencion; //(long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                         objEntIndi.Accion = "LISTAR";
                         objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                         if (objListaAntDetall.Count > 0)
                         {
                             Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                             ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                         }
                         //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                     }
                     /****/
            /* }
             Session["COPIA_FORMULARIO"] = "INACTIVA";
         }*/
            ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

            if (Session["HC_InformeAltaProxCitaList"] != null)
            {
                objLista2 = (List<SS_HC_InformeAltaProxCita_FE>)Session["HC_InformeAltaProxCitaList"];
                foreach (var result in objLista2)
                {
                    if (result.Accion != "DELETE")
                    {
                        objListaShow2.Add(result);
                    }
                }

                /*ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        objListaShow.AddRange(ListarCopy);
                        Session["HC_MedicamentoList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }*/
                //////////////////////////////////////////////*/
                return this.Store(objListaShow2.ToList());
            }















            ///////////////////////////////////////////////////////////////////////////////////////////

            return this.Store(objLista.ToList());


        }

        public System.Web.Mvc.ActionResult Save_MedicamentosX(/*SS_HC_InformeAlta_FE objAnamEA,*/String selectionArray0, String selectionArray1, String selectionArray2, String selectionArray3, int Id, string Evento, int idgrupo, String Version)
        {
            Log.Information("HClinicaController - Save_MedicamentosX - Entrar");

            bool flagMed = false;
            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_Indicaciones_FE> ObjLista2 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjLista12 = new List<SS_HC_Indicaciones_FE>();
            List<SS_HC_Indicaciones_FE> ObjListaGuarda = new List<SS_HC_Indicaciones_FE>();

            List<SS_HC_InformeAlta_FE> ObjLista0 = new List<SS_HC_InformeAlta_FE>();
            List<SS_HC_InformeAltaProxCita_FE> ObjLista9 = new List<SS_HC_InformeAltaProxCita_FE>();

            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Temp")
            {
                if (ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP != null)
                {
                    ObjLista12 = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista12)
                    {
                        if (ObjLista2.Count > 0)
                        {
                            if (ObjLista2[0].SecuenciaMedicamento != objEntity1.SecuenciaMedicamento)
                            {
                                if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                {
                                    objEntity1.Accion = "UPDATE";
                                }
                                ObjListaGuarda.Add(objEntity1);
                            }
                        }
                    }/*
                    foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista2)
                    {
                        if ((objEntity1.Accion + "").Trim() != "NUEVO")
                        {
                            objEntity1.Accion = "UPDATE";
                        }

                        if (idgrupo != 0) { objEntity1.SecuenciaMedicamento = idgrupo; } ///agregado
                        objEntity1.GrupoMedicamento = idgrupo;    /// agregado :)
                        ObjListaGuarda.Add(objEntity1);
                    }*/
                    Session["HC_MedicamentoDetalleList"] = ObjListaGuarda;
                }
                else
                {
                    /* foreach (SS_HC_Indicaciones_FE objEntity1 in ObjLista2)
                     {
                         if ((objEntity1.Accion + "").Trim() != "NUEVO")
                         {
                             objEntity1.Accion = "UPDATE";
                         }

                     }*/
                    ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    Session["HC_MedicamentoDetalleList"] = ObjLista2;
                }
            }
            else if (Evento == "ListarDetalle")
            {
                Session["HC_MedicamentoID"] = Id;


                var nombreStore = "";

                if (idgrupo == 0)
                {
                    nombreStore = "storeExamenesDetalleIndic0";
                }
                else
                {
                    nombreStore = "storeExamenesDetalleIndicGrupo";
                }


                var store = X.GetCmp<Store>(nombreStore);
                store.Reload();
            }
            else if (Evento == "Server")
            {
                try
                {
                    //transact
                    SS_HC_InformeAlta_FE cabInforme = new SS_HC_InformeAlta_FE();
                    List<SS_HC_MedicamentoAlta_FE> cabeceraMed = new List<SS_HC_MedicamentoAlta_FE>();


                    List<SS_HC_Indicaciones_FE> listadetalleMed = new List<SS_HC_Indicaciones_FE>();
                    List<SS_HC_Indicaciones_FE> listaTraceDetalleMed = new List<SS_HC_Indicaciones_FE>();

                    List<SS_HC_InformeAltaProxCita_FE> listaProximaCita = new List<SS_HC_InformeAltaProxCita_FE>();

                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_InformeAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_InformeAlta_FE>));
                        cabInforme.indigenerales = ObjLista0[0].indigenerales;
                        cabInforme.actividafisica = ObjLista0[0].actividafisica;
                        cabInforme.indidieta = ObjLista0[0].indidieta;
                        cabInforme.restricciones = ObjLista0[0].restricciones;
                        ObjLista0 = ENTITY_GLOBAL.Instance.listaInformeAlta;
                    }

                    Log.Debug("HClinicaController Save_MedicamentosX - SS_HC_InformeAlta_FE {A}", ObjLista0);
                    cabInforme.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    cabInforme.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    cabInforme.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    cabInforme.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    cabInforme.hcaltamedica = 1;
                    cabInforme.UsuarioCreacion = ObjLista0[0].UsuarioCreacion;
                    cabInforme.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    cabInforme.FechaModificacion = DateTime.Now;

                    cabInforme.IdTipoAlta = Convert.ToString(Session["IdTipoAlta"]) == "" ? 0 : (int)Session["IdTipoAlta"];
                    cabInforme.IdPronostico = Convert.ToString(Session["IdPronostico"]) == "" ? 0 : (int)Session["IdPronostico"];
                    cabInforme.IdEspecialidad = Convert.ToString(Session["IdEspecialidadAlta"]) == "" ? 0 : (int)Session["IdEspecialidadAlta"];
                    cabInforme.IdMedico = Convert.ToInt32(ENTITY_GLOBAL.Instance.IdMedico);
                    if (cabInforme.IdTipoAlta == 0)
                    {
                        Session["IdTipoAlta"] = ObjLista0[0].IdTipoAlta;
                    }
                    if (cabInforme.IdPronostico == 0)
                    {
                        Session["IdPronostico"] = ObjLista0[0].IdPronostico;
                    }
                    if (cabInforme.IdEspecialidad == 0)
                    {
                        Session["IdEspecialidadAlta"] = ObjLista0[0].IdEspecialidad;
                    }

                    cabInforme.Accion = (string)Session["Accion_201"];
                    cabInforme.Version = Version;
                    int IdSecuencia = 0;
                    addDataUpdateMedicamentosX("UPDATE", selectionArray1, 1);
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_MedicamentoAlta_FE objEnt;
#pragma warning disable CS0168 // La variable 'objEntDeta' se ha declarado pero nunca se usa
                        SS_HC_Indicaciones_FE objEntDeta;
#pragma warning restore CS0168 // La variable 'objEntDeta' se ha declarado pero nunca se usa
                        string mensage = "";
#pragma warning disable CS0219 // La variable 'cadenas' está asignada pero su valor nunca se usa
                        string cadenas = "";
#pragma warning restore CS0219 // La variable 'cadenas' está asignada pero su valor nunca se usa
#pragma warning disable CS0168 // La variable 'cadArray' se ha declarado pero nunca se usa
                        String[] cadArray;
#pragma warning restore CS0168 // La variable 'cadArray' se ha declarado pero nunca se usa
                        int SecuenciaMedica = 0;
                        if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        {
                            List<BE_MedicamentoAlta_FE> objListaMed = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                            List<SS_HC_Indicaciones_FE> objListaMedDell = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                            foreach (BE_MedicamentoAlta_FE objEntity1 in objListaMed)
                            {
                                objEnt = new SS_HC_MedicamentoAlta_FE();
                                objEnt = objEntity1;
                                objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                                objEnt.Comentario = selectionArray2;
                                objEnt.Version = Version;
                                cabeceraMed.Add(objEnt);
                                //  if (objEntity1.GrupoMedicamento == 0)
                                //  {
                                SecuenciaMedica = objEnt.Secuencia; // si es individual

                                //   }
                                //  else
                                //  {
                                //      SecuenciaMedica = Convert.ToInt32(objEntity1.GrupoMedicamento);// si es grupo
                                // objEntity1.Secuencia = SecuenciaMedica;
                                // }
                                //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);
                                ////BLOQUE DELETE
                                if (Session["HC_MedicamentoDetalleListDELETE"] != null)
                                {
                                    List<SS_HC_Indicaciones_FE> listaDel = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleListDELETE"];
                                    foreach (var result in listaDel)
                                    {
                                        listadetalleMed.Add(result);
                                    }
                                }
                                ////////////////
                                if (objEntity1.Accion != "DELETE")
                                {
                                    //objEnt.Accion = "NUEVO";
                                    //SecuenciaMedica = SvcMedicamentoService.setMantenimiento(objEnt);

                                    if (objListaMedDell != null)
                                    {
                                        /*   
                                           Boolean indicaDetalle = false;
                                           foreach (var resutl in objListaMedDell)
                                           {
                                               if (resutl.SecuenciaMedicamento == objEnt.Secuencia)
                                               {
                                                   indicaDetalle = true;
                                                   break;
                                               }
                                           }
                                           if (indicaDetalle)
                                           {
                                               SS_HC_Indicaciones objIncid = new SS_HC_Indicaciones();
                                               objIncid.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                               objIncid.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                               objIncid.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                               objIncid.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                               objIncid.SecuenciaMedicamento = SecuenciaMedica;
                                               objIncid.Accion = "DELETE";

                                               listaTraceDetalleMed.Add(objIncid);
                                               //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objIncid);
                                           }*/
                                        if (objListaMedDell.Count > 0)
                                        {
                                            foreach (SS_HC_Indicaciones_FE objEntity2 in objListaMedDell)
                                            {
                                                if (objEntity2.GrupoMedicamento == 0)
                                                {

                                                    if (objEntity1.Secuencia == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                                else
                                                {
                                                    if (objEntity1.GrupoMedicamento == objEntity2.SecuenciaMedicamento)
                                                    {
                                                        objEntity2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                                        objEntity2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                                        objEntity2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                                        objEntity2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                                        objEntity2.SecuenciaMedicamento = SecuenciaMedica; //(int)objEntity1.GrupoMedicamento;///CAMBIAR
                                                        if ((objEntity2.Accion + "").Trim() != "NUEVO")
                                                        {
                                                            objEntity2.Accion = "UPDATE";
                                                        }

                                                        //objEntity2.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                                        //objEntity2.Accion = "NUEVO"; //OBS nuevo siempre si antes se eliminan todos los del MED.
                                                        objEntity2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                                        objEntity2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                                        listadetalleMed.Add(objEntity2);
                                                        //IdSecuencia = SvcMedicamentoService.MedicamentoIndicaciones(objEntity2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }


                            if (selectionArray3.Trim().Length > 0)
                            {
                                flagMed = true;
                                ObjLista9 = (List<SS_HC_InformeAltaProxCita_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_InformeAltaProxCita_FE>));
                                foreach (var algo in ObjLista9)
                                {
                                    SS_HC_InformeAltaProxCita_FE temp = new SS_HC_InformeAltaProxCita_FE();
                                    temp = algo;
                                    temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    listaProximaCita.Add(temp);
                                }
                            }
                            if (Session["SS_HC_InformeAltaProxCitaDel_FE"] != null)
                            {
                                List<SS_HC_InformeAltaProxCita_FE> listaDel = (List<SS_HC_InformeAltaProxCita_FE>)Session["SS_HC_InformeAltaProxCitaDel_FE"];
                                foreach (var result in listaDel)
                                {
                                    listaProximaCita.Add(result);
                                }
                            }
                        }
                        if (!flagMed)
                        {
                            if (selectionArray3 != null)
                            {
                                if (selectionArray3.Trim().Length > 0)
                                {
                                    ObjLista9 = (List<SS_HC_InformeAltaProxCita_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_InformeAltaProxCita_FE>));
                                    foreach (var algo in ObjLista9)
                                    {
                                        SS_HC_InformeAltaProxCita_FE temp = new SS_HC_InformeAltaProxCita_FE();
                                        temp = algo;
                                        temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                        temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                        temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                        temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                        listaProximaCita.Add(temp);
                                    }
                                }
                            }
                        }

                        if (Session["SS_HC_InformeAltaProxCitaDel_FE"] != null)
                        {
                            List<SS_HC_InformeAltaProxCita_FE> listaDel = (List<SS_HC_InformeAltaProxCita_FE>)Session["SS_HC_InformeAltaProxCitaDel_FE"];
                            foreach (var result in listaDel)
                            {
                                listaProximaCita.Add(result);
                            }
                        }

                        IdSecuencia = SvcInformeAltaFE.setMantenimientoMedicamento(cabInforme, cabeceraMed, listaProximaCita);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (cabeceraMed.Count > 0)
                            {
                                var objListaAnt = new List<SS_HC_MedicamentoAlta_FE>();
                                var objListaAnt9 = new List<SS_HC_MedicamentoAlta_FE>();
                                SS_HC_MedicamentoAlta_FE objEntn = new SS_HC_MedicamentoAlta_FE();
                                objEntn.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objEntn.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objEntn.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objEntn.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objEntn.Accion = "LISTAR";
                                objEntn.TipoMedicamento = getValorFiltroInt("1"); //para Medicina

                                /*objEnt.GrupoMedicamento = grupo;*/
                                objListaAnt = SvcInformeAltaFE.MedicamentoListar(objEntn);
                                objEntn.TipoMedicamento = 4;
                                objListaAnt9 = SvcInformeAltaFE.MedicamentoListar(objEntn);
                                objListaAnt.AddRange(objListaAnt9);

                                int idResulta = 0;
                                if (cabeceraMed.Count > 0)
                                {
                                    foreach (SS_HC_MedicamentoAlta_FE intobj in objListaAnt)
                                    {
                                        var objGenral = new SS_HCE_RecetaConsultaExterna();
                                        objGenral.IdOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                        objGenral.LineaOA = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                        objGenral.IdPaciente = intobj.IdPaciente;
                                        objGenral.Componente = intobj.CodigoComponente;
                                        objGenral.Unidadmedida = intobj.IdUnidadMedida;
                                        objGenral.linea = intobj.Linea;
                                        objGenral.Familia = intobj.Familia;
                                        objGenral.Subfamilia = intobj.SubFamilia;
                                        objGenral.Cantidad = Convert.ToString(Convert.ToInt64(intobj.Cantidad));
                                        objGenral.Via = intobj.IdVia;
                                        objGenral.Dosis = intobj.Dosis;
                                        objGenral.Diastratamiento = Convert.ToString(Convert.ToInt64(intobj.Periodo));
                                        objGenral.Frecuencia = Convert.ToString(Convert.ToInt64(intobj.Frecuencia));
                                        objGenral.IndicadorEPS = 0;
                                        objGenral.Usuario = ENTITY_GLOBAL.Instance.USUARIO;
                                        objGenral.FechaCreacion = intobj.FechaCreacion;
                                        objGenral.IndicacionEspecifica = intobj.Indicacion;
                                        objGenral.lineamax = 0;
                                        objGenral.TIPOORDENATENCION = ENTITY_GLOBAL.Instance.INDICA_TIPO_ORDENATENCION;
                                        objGenral.SecuenciaHCE = intobj.SecuencialHCE;
                                        idResulta = SOA_AtencionesSpring.ListaRecetaConsultaExternaEmergencia(objGenral);
                                    }
                                }


                                int idResultadoConsu = 0;

                                var objGenralc = new SS_HCE_ConsultaExterna();
                                objGenralc.IdConsultaExterna = idResulta;
                                if (selectionArray2.Length > 0)
                                {
                                    objGenralc.UsuarioModificacion = selectionArray2;
                                }
                                else
                                {
                                    objGenralc.IndicadorEPS = 111;
                                }

                                objGenralc.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objGenralc.Accion = "ESPECI_ALTA";

                                idResultadoConsu = SOA_AtencionesSpring.ListaConsultaExternaEmergencia(objGenralc);


                                HceService.SoaServiceSoapClient ObtenerTramaOAx = new HceService.SoaServiceSoapClient();
                                HceService.SS_HC_WS_EpisodioAtencion WsEpisodiox = new HceService.SS_HC_WS_EpisodioAtencion();
                                DataTable dtValidax = new DataTable();
                                WsEpisodiox.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                WsEpisodiox.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                WsEpisodiox.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                WsEpisodiox.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                WsEpisodiox.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                WsEpisodiox.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                WsEpisodiox.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                                WsEpisodiox.FechaCreacion = DateTime.Now;
                                WsEpisodiox.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                foreach (BE_MedicamentoAlta_FE objEntity1 in cabeceraMed)
                                {
                                    if (objEntity1.Accion == "DELETE")
                                    {
                                        WsEpisodiox.UsuarioCreacion = "DELETERECETA";
                                        WsEpisodiox.SecuenciaHCE = objEntity1.SecuencialHCE;
                                        dtValidax = ObtenerTramaOAx.SoaValidaFacturacion(1, WsEpisodiox);
                                    }
                                }




                            }

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        
                            Session["HC_MedicamentoAltaList"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            Session["SS_HC_InformeAltaProxCitaDel_FE"] = null;
                            eventoLoadPostFormulario(true, "storeExamenes0", null);
                            ENTITY_GLOBAL.Instance.listaInformeAlta = null;
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addDataEliminarMedicamentosX(string MODO, int id, int tipo)
        {
            Log.Information("HClinicaController - addDataEliminarMedicamentosX - Entrar");
            if (id > 0)
            {
                List<BE_MedicamentoAlta_FE> objListaMed = null;
                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;

                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                    if (tipo == 1)
                    {
                        objListaMedDetail = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (objListaMedDetail != null)
                        {

                        }
                    }
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoDietaList"];
                }
                if (objListaMed != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Secuencia == id)
                        {


                            List<SS_HC_MedicamentoAlta_FE> cabeceraMed = new List<SS_HC_MedicamentoAlta_FE>();



                            result.Accion = "DELETE";



                            var objEnt = new SS_HC_MedicamentoAlta_FE();
                            objEnt = result;
                            objEnt.TipoMedicamento = result.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                            objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objEnt.GrupoMedicamento = result.GrupoMedicamento;
                            //objEnt.Comentario = selectionArray2;
                            //objEnt.Version = Version;
                            cabeceraMed.Add(objEnt);

                            SvcInformeAltaFE.setMantenimientoMedicamento(null, cabeceraMed, null);
                            break;
                        }
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult addDataEliminarProximaCita(int id, string accion)
        {
            Log.Information("HClinicaController - addDataEliminarProximaCita - Entrar");
            if (accion != "NUEVO")
            {
                if (id > 0)
                {
                    /*objListaMed = null;*/
                    List<SS_HC_InformeAltaProxCita_FE> objListaMed0 = new List<SS_HC_InformeAltaProxCita_FE>();
                    SS_HC_InformeAltaProxCita_FE temp = new SS_HC_InformeAltaProxCita_FE();

                    List<SS_HC_InformeAltaProxCita_FE> objListaMed = (List<SS_HC_InformeAltaProxCita_FE>)Session["SS_HC_InformeAltaProxCitaDel_FE"];

                    if (objListaMed != null)
                    {
                        objListaMed0.AddRange(objListaMed);
                    }

                    temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    temp.Secuencia = id;
                    temp.Accion = "DELETE";

                    objListaMed0.Add(temp);
                    Session["SS_HC_InformeAltaProxCitaDel_FE"] = objListaMed0;
                }
            }
            return this.Direct();
        }
        public bool addDataUpdateMedicamentosX(string MODO, String data, int tipo)
        {
            Log.Information("HClinicaController - addDataUpdateMedicamentosX - Entrar");
            if (data != null)
            {
                List<BE_MedicamentoAlta_FE> objListaMed = null;
                List<BE_MedicamentoAlta_FE> ObjListarUpdate = (List<BE_MedicamentoAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<BE_MedicamentoAlta_FE>));
                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoAltaList"];
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_MedicamentoAlta_FE>)Session["HC_MedicamentoDietaList"];
                }

                if (objListaMed != null && ObjListarUpdate != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Accion != "DELETE")
                        {
                            foreach (var resultUpd in ObjListarUpdate)
                            {
                                if (result.Secuencia == resultUpd.Secuencia)
                                {
                                    result.Linea = resultUpd.Linea;
                                    result.Familia = resultUpd.Familia;
                                    result.SubFamilia = resultUpd.SubFamilia;
                                    result.SubFamiliaDescripcion = resultUpd.Version;
                                    result.Secuencia = resultUpd.Secuencia;
                                    result.IdUnidadMedida = resultUpd.IdUnidadMedida;
                                    result.Dosis = resultUpd.Dosis;
                                    result.IdVia = resultUpd.IdVia;
                                    result.Cantidad = resultUpd.Cantidad;
                                    result.Frecuencia = resultUpd.Frecuencia;
                                    result.DiasTratamiento = resultUpd.DiasTratamiento;
                                    result.TipoMedicamento = resultUpd.TipoMedicamento;
                                    result.TipoComida = resultUpd.TipoComida;
                                    result.GrupoMedicamento = resultUpd.GrupoMedicamento;
                                    result.Comentario = resultUpd.Comentario;
                                    result.Indicacion = resultUpd.Indicacion;
                                    result.UnidadTiempo = resultUpd.UnidadTiempo;
                                    result.UsuarioAuditoria = resultUpd.UsuarioAuditoria;
                                    result.Periodo = resultUpd.Periodo;
                                    result.Comentario = resultUpd.Comentario;
                                    //ADD 25/09
                                    result.CodigoComponente = resultUpd.CodigoComponente;
                                    if (result.Accion != "NUEVO")
                                    {
                                        result.Accion = MODO;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }

                //objUpd.GetAll();
            }
            return true;
        }

        #endregion

        #region CCEPF425_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF425_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF425_View - Entrar");

                var LocalEnty = new SS_HC_VIGILANCIA_DISPOSITIVOS_FE();
                var Listar = new List<SS_HC_VIGILANCIA_DISPOSITIVOS_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcVigilanciaDispositivosFEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {
                    foreach (SS_HC_VIGILANCIA_DISPOSITIVOS_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF425";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF425_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF425_Save_VigilanciaDispositivos(SS_HC_VIGILANCIA_DISPOSITIVOS_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF425_Save_VigilanciaDispositivos - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioAtencion != 1 && ENTITY_GLOBAL.Instance.COD_BANDEJA != "MED_EMERGENCIA")
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        //var hora = HoraIngreso.TrimStart('\"');
                        //hora = hora.TrimEnd('\"');
                        //var tiempo = DateTime.Parse(hora);

                        //var fechaingreso = Convert.ToDateTime(objSave.Fecha);
                        //fechaingreso = fechaingreso.AddHours(tiempo.Hour);
                        //fechaingreso = fechaingreso.AddMinutes(tiempo.Minute);

                        //objSave.Fecha = fechaingreso;
                        //objSave.Hora = fechaingreso;

                        string mensage = "";

                        registro = SvcVigilanciaDispositivosFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        public System.Web.Mvc.ActionResult SetInvalido(string Accion)
        {
            if (Accion == "invalido")
            {
                Session["invalido"] = "yes";
            }
            else
            {
                Session["invalido"] = null;
            }
            return this.Direct();
        }

        #region BALANCE

        public System.Web.Mvc.ActionResult CCEPF400_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF400_View - Entrar");
                var LocalEnty = new SS_HC_BalanceHidroElect_FE();
                var Listar = new List<SS_HC_BalanceHidroElect_FE>();
                var ListarTEMP = new List<SS_HC_BalanceHidroElect_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 4;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 4;
                }

                Listar = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                LocalEnty.Accion = "CALCULAR";
                ListarTEMP = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                if (ListarTEMP.Count > 0)
                {
                    foreach (SS_HC_BalanceHidroElect_FE objEntity0 in ListarTEMP)
                    {
                        ENTITY_GLOBAL.Instance.BalanceAcumulado = ListarTEMP[0].BalanceAcumulado;
                    }

                }
                else { ENTITY_GLOBAL.Instance.BalanceAcumulado = 0; }


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_BalanceHidroElect_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_402"] = LocalEnty.Accion;
                Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF400_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF401_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF401_View - Entrar");
                var LocalEnty = new SS_HC_BalanceHidroElect_FE();
                var Listar = new List<SS_HC_BalanceHidroElect_FE>();
                var ListarTEMP = new List<SS_HC_BalanceHidroElect_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 2;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 2;
                }

                Listar = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                LocalEnty.Accion = "CALCULAR";
                ListarTEMP = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                if (ListarTEMP.Count > 0)
                {
                    foreach (SS_HC_BalanceHidroElect_FE objEntity0 in ListarTEMP)
                    {
                        ENTITY_GLOBAL.Instance.BalanceAcumulado = ListarTEMP[0].BalanceAcumulado;
                    }

                }
                else { ENTITY_GLOBAL.Instance.BalanceAcumulado = 0; }


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_BalanceHidroElect_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_402"] = LocalEnty.Accion;
                Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF401_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF402_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF402_View - Entrar");
                var LocalEnty = new SS_HC_BalanceHidroElect_FE();
                var Listar = new List<SS_HC_BalanceHidroElect_FE>();
                var ListarTEMP = new List<SS_HC_BalanceHidroElect_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 1;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 1;
                }

                Listar = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                LocalEnty.Accion = "CALCULAR";
                ListarTEMP = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                if (ListarTEMP.Count > 0)
                {
                    foreach (SS_HC_BalanceHidroElect_FE objEntity0 in ListarTEMP)
                    {
                        ENTITY_GLOBAL.Instance.BalanceAcumulado = ListarTEMP[0].BalanceAcumulado;
                    }

                }
                else { ENTITY_GLOBAL.Instance.BalanceAcumulado = 0; }


                bool hallado = false;
                if (Listar.Count > 0)
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                    foreach (SS_HC_BalanceHidroElect_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";

                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;

                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_402"] = LocalEnty.Accion;
                Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF402_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF403_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF403_View - Entrar");
                var LocalEnty = new SS_HC_BalanceHidroElect_FE();
                var Listar = new List<SS_HC_BalanceHidroElect_FE>();
                var ListarTEMP = new List<SS_HC_BalanceHidroElect_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 3;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    LocalEnty.TipoBalance = 3;
                }

                Listar = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                LocalEnty.Accion = "CALCULAR";
                ListarTEMP = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                if (ListarTEMP.Count > 0)
                {
                    foreach (SS_HC_BalanceHidroElect_FE objEntity0 in ListarTEMP)
                    {
                        ENTITY_GLOBAL.Instance.BalanceAcumulado = ListarTEMP[0].BalanceAcumulado;
                    }

                }
                else { ENTITY_GLOBAL.Instance.BalanceAcumulado = 0; }


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_BalanceHidroElect_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_402"] = LocalEnty.Accion;
                Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF403_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF402_SOLUCIONES(int tipoRecurso, int tipoBalanc)
        {
            Log.Information("HClinicaController - CCEPF402_SOLUCIONES - Entrar");
            var objLista = new List<SS_HC_BalanceHidroElectDetalle_FE>();
            var objListaShow = new List<SS_HC_BalanceHidroElectDetalle_FE>();

            var objListaAnt = new List<SS_HC_BalanceHidroElectDetalle_FE>();
            var objListaAnt2 = new List<SS_HC_BalanceHidroElectDetalle_FE>();
            var objLista2 = new List<SS_HC_BalanceHidroElectDetalle_FE>();
            var objListaShow2 = new List<SS_HC_BalanceHidroElectDetalle_FE>();


            if (Session["SS_HC_SolucionesAdministradas_FE"] != null)
            {
                objLista = (List<SS_HC_BalanceHidroElectDetalle_FE>)Session["SS_HC_BalanceHidroElectDetalle_FE"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETE" && result.Tipo == tipoRecurso && result.TipoBalance == tipoBalanc)
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA
                /*if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F1, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_MedicamentoAlta_FE> ListarCopy = (List<BE_MedicamentoAlta_FE>)objetoGen;
                        objListaShow.AddRange(ListarCopy);
                        Session["HC_MedicamentoAltaList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }*/
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_BalanceHidroElectDetalle_FE objEnt = new SS_HC_BalanceHidroElectDetalle_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoBalance = tipoBalanc;
                objEnt.Tipo = 1;

                objListaAnt = SvcBalanceHidroelectro.Listar_Soluciones(objEnt);

                objEnt.Tipo = 2;

                objListaAnt2 = SvcBalanceHidroelectro.Listar_Soluciones(objEnt);

                if (objListaAnt2.Count > 0)
                {
                    objListaAnt.AddRange(objListaAnt2);
                }

                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    SS_HC_BalanceHidroElectDetalle_FE obtemp;
                    foreach (SS_HC_BalanceHidroElectDetalle_FE intobj in objListaAnt)
                    {
                        obtemp = new SS_HC_BalanceHidroElectDetalle_FE();
                        obtemp = intobj;
                        obtemp.Accion = "UPDATE";

                        objLista.Add(obtemp);

                    }
                    Session["SS_HC_BalanceHidroElectDetalle_FE"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;

                }
                ///ADD LA OPCIÓN DE COPIA
                /* if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                 {
                     object objetoGen = (List<SS_HC_MedicamentoAlta_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                     var objListaAnt2 = new List<SS_HC_MedicamentoAlta_FE>();
                     if (objetoGen != null)
                     {
                         List<SS_HC_MedicamentoAlta_FE> ListarCopy = (List<SS_HC_MedicamentoAlta_FE>)objetoGen;
                         //objLista.AddRange(ListarCopy);
                         //Session["HC_MedicamentoList"] = objLista;

                         List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));



                         String[] cadArray2;
                         if (ListarCopy.Count > 0)
                         {
                             BE_MedicamentoAlta_FE obtemp;
                             foreach (SS_HC_MedicamentoAlta_FE intobj in ListarCopy)
                             {
                                 obtemp = new BE_MedicamentoAlta_FE();
                                
                                 objLista.Add(obtemp);

                                 Session["Comentario"] = "";
                             }
                             Session["HC_MedicamentoAltaList"] = objLista;
                             ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                             SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                             objEntIndi.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion; // ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                             objEntIndi.IdPaciente = listaCopiaForm[0].IdPaciente; //(int)ENTITY_GLOBAL.Instance.PacienteID;
                             objEntIndi.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                             objEntIndi.IdEpisodioAtencion = (long)listaCopiaForm[0].IdEpisodioAtencion; //(long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                             objEntIndi.Accion = "LISTAR";
                             objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                             if (objListaAntDetall.Count > 0)
                             {
                                 Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                                 ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                             }
                             //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                         }
                        
                     }
                     Session["COPIA_FORMULARIO"] = "INACTIVA";
                 }*/
                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["SS_HC_BalanceHidroElectDetalle_FE"] != null)
                {
                    objLista2 = (List<SS_HC_BalanceHidroElectDetalle_FE>)Session["SS_HC_BalanceHidroElectDetalle_FE"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETE" && result.Tipo == tipoRecurso && result.TipoBalance == tipoBalanc)
                        {
                            objListaShow2.Add(result);
                        }
                    }


                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }















                ///////////////////////////////////////////////////////////////////////////////////////////

                return this.Store(objLista.ToList());
            }

        }

        public System.Web.Mvc.ActionResult CCEPF402_Eliminar_Sol(string MODO, int tipoBalanc, int secuencia, string Accion)
        {
            Log.Information("HClinicaController - CCEPF402_Eliminar_Sol - Entrar");
            if (Accion != "NUEVO")
            {
                if (secuencia > 0)
                {
                    /*objListaMed = null;*/
                    List<SS_HC_BalanceHidroElectDetalle_FE> objListaMed0 = new List<SS_HC_BalanceHidroElectDetalle_FE>();
                    SS_HC_BalanceHidroElectDetalle_FE temp = new SS_HC_BalanceHidroElectDetalle_FE();

                    List<SS_HC_BalanceHidroElectDetalle_FE> objListaMed = (List<SS_HC_BalanceHidroElectDetalle_FE>)Session["SS_HC_BalanceHidroElectDetalleDelete_FE"];

                    if (objListaMed != null)
                    {
                        objListaMed0.AddRange(objListaMed);
                    }

                    temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    temp.TipoBalance = tipoBalanc;
                    temp.Secuencia = secuencia;
                    temp.Accion = "DELETE";

                    objListaMed0.Add(temp);
                    Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = objListaMed0;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_Balance(String selectionArray0, String selectionArray1, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_Balance - Entrar");

            List<SS_HC_BalanceHidroElectDetalle_FE> ObjLista9 = new List<SS_HC_BalanceHidroElectDetalle_FE>();
            List<SS_HC_BalanceHidroElect_FE> ObjLista0 = new List<SS_HC_BalanceHidroElect_FE>();

            SS_HC_BalanceHidroElect_FE objAnamEA = new SS_HC_BalanceHidroElect_FE();

            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_BalanceHidroElectDetalle_FE> listaSoluciones = new List<SS_HC_BalanceHidroElectDetalle_FE>();


                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_BalanceHidroElect_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_BalanceHidroElect_FE>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.TipoBalance = ObjLista0[0].TipoBalance;

                    if (objAnamEA.TipoBalance == 2)
                    {
                        objAnamEA.Version = "CCEPF401";
                    }
                    else if (objAnamEA.TipoBalance == 1)
                    {
                        objAnamEA.Version = "CCEPF402";
                    }
                    else if (objAnamEA.TipoBalance == 4)
                    {
                        objAnamEA.Version = "CCEPF400";
                    }
                    else if (objAnamEA.TipoBalance == 3)
                    {
                        objAnamEA.Version = "CCEPF403";
                    }


                    objAnamEA.FechaControl = ObjLista0[0].FechaControl;
                    objAnamEA.Turno = ObjLista0[0].Turno;
                    objAnamEA.Drenaje = ObjLista0[0].Drenaje;
                    objAnamEA.Autolisis = ObjLista0[0].Autolisis;
                    objAnamEA.Peso = ObjLista0[0].Peso;
                    objAnamEA.Hora = ObjLista0[0].Hora;
                    objAnamEA.AlimentacionOral = ObjLista0[0].AlimentacionOral;
                    objAnamEA.SNG = ObjLista0[0].SNG;
                    objAnamEA.DetalleSNG = ObjLista0[0].DetalleSNG;
                    objAnamEA.TotalIngresos = ObjLista0[0].TotalIngresos;
                    objAnamEA.PerdidaInsensible = ObjLista0[0].PerdidaInsensible;
                    objAnamEA.PerdidaCantidad = ObjLista0[0].PerdidaCantidad;
                    objAnamEA.Orina = ObjLista0[0].Orina;
                    objAnamEA.Heces = ObjLista0[0].Heces;
                    objAnamEA.Vomitos = ObjLista0[0].Vomitos;
                    objAnamEA.Temperatura = ObjLista0[0].Temperatura;
                    objAnamEA.TemperaturaDescripcion = ObjLista0[0].TemperaturaDescripcion;
                    objAnamEA.SuperficieCorporal = ObjLista0[0].SuperficieCorporal;
                    objAnamEA.SuperficieDescripion = ObjLista0[0].SuperficieDescripion;
                    objAnamEA.Succion = ObjLista0[0].Succion;
                    objAnamEA.PerdidaSNG = ObjLista0[0].PerdidaSNG;
                    objAnamEA.TotalEgresos = ObjLista0[0].TotalEgresos;
                    objAnamEA.BalanceHidrico = ObjLista0[0].BalanceHidrico;
                    objAnamEA.BalanceAcumulado = ObjLista0[0].BalanceAcumulado;

                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.FechaCreacion = DateTime.Now;
                    objAnamEA.FechaModificacion = DateTime.Now;

                    objAnamEA.Accion = (string)Session["Accion_402"];





                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjLista9 = (List<SS_HC_BalanceHidroElectDetalle_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_BalanceHidroElectDetalle_FE>));


                            foreach (var algo in ObjLista9)
                            {
                                SS_HC_BalanceHidroElectDetalle_FE temp = new SS_HC_BalanceHidroElectDetalle_FE();
                                temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.FechaCreacion = DateTime.Now;
                                temp.FechaModificacion = DateTime.Now;


                                listaSoluciones.Add(temp);

                            }

                        }
                        if (Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] != null)
                        {
                            List<SS_HC_BalanceHidroElectDetalle_FE> listaDel = (List<SS_HC_BalanceHidroElectDetalle_FE>)Session["SS_HC_BalanceHidroElectDetalleDelete_FE"];
                            foreach (var result in listaDel)
                            {
                                listaSoluciones.Add(result);
                            }
                        }



                        // }

                        IdSecuencia = SvcBalanceHidroelectro.setMantenimiento(objAnamEA, listaSoluciones);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        

                            Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                            Session["SS_HC_BalanceHidroElectDetalleDelete_FE"] = null;

                            eventoLoadPostFormulario(true, "storeBalanceNeo1", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        public System.Web.Mvc.ActionResult obtenerComboEspecialidad(string paramIdEspecialidad, string usuario, string Accion)
        {
            Log.Information("HClinicaController - obtenerComboEspecialidad - Entrar");
            int valor = Convert.ToInt32(getValorFiltroInt(paramIdEspecialidad));
            SS_GE_Especialidad objEspecialidad = new SS_GE_Especialidad();
            objEspecialidad.Accion = "LISTARPORAGENTE";
            objEspecialidad.FormularioInicial = null;// ENTITY_GLOBAL.Instance.CODPERSONA; //AUX  EMPLEADO SALUD
            objEspecialidad.FormularioInforme = null;// ENTITY_GLOBAL.Instance.TIPOAGENTE;//AUX  ID AGENTE
            objEspecialidad.FormularioFinal = null;// ENTITY_GLOBAL.Instance.IDAGENTE;//AUX  ID AGENTE
            objEspecialidad.UsuarioCreacion = null;// usuario;//AUX  CODIGO AGENTE

            List<SS_GE_Especialidad> listaEspecialidad = SvcEspecialidad.listarEspecialidad(objEspecialidad, 0, 0);

            if (listaEspecialidad.Count == 1)
            {
                ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD = listaEspecialidad[0].IdEspecialidad;
            }
            else { ENTITY_GLOBAL.Instance.VALOR_ESPECIALIDAD = null; }

            return this.Store(listaEspecialidad);
        }

        #region CCEPF502
        public System.Web.Mvc.ActionResult CCEPF502_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF502_View - Entrar");
                var LocalEnty = new SS_HC_Monitoreo_Obs_FE();
                var Listar = new List<SS_HC_Monitoreo_Obs_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcMonitoreoObsFE.MonitoreoListar(LocalEnty);


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Monitoreo_Obs_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                Session["Data_SS_HC_Monitoreo_ObsDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                var txt = X.GetCmp<TextField>("IdMedico");
                txt.SetValue(ENTITY_GLOBAL.Instance.USUARIO);


                //////////       
                return View("FormulariosExtras/CCEPF502_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF502_LISTAR_GRILLA()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF502_LISTAR_GRILLA - Entrar");

                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_Monitoreo_Obs_Ing_FE();
                var Listar = new List<SS_HC_Monitoreo_Obs_Ing_FE>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMonitoreoObsFE.Listar_MonitoreoIngreso(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMonitoreoObsFE.Listar_MonitoreoIngreso(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF502_Save_SS_HC_Monitoreo_Obs_FE(SS_HC_Monitoreo_Obs_FE objMonitoreo, SS_HC_Monitoreo_Obs_Ing_FE objMonitoreo_Obs_Ing, String selectionArray0, String selectionArray1, String selectionArray2, String CCEPF502_Save_SS_HC_Monitoreo_Obs_FE, String text)
        {
            Log.Information("HClinicaController - CCEPF502_Save_SS_HC_Monitoreo_Obs_FE - Entrar");
            // TRABA
            String valoreArray;
            String valoreArray2;
            //List<MA_MiscelaneosDetalle> ObjListar;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            List<SS_HC_Monitoreo_Obs_Ing_FE> ObjListar2 = new List<SS_HC_Monitoreo_Obs_Ing_FE>();


            if (ObjListar == null)
            {
                Session["ValoresTemporal"] = selectionArray1;
                Session["ValoresTemporal2"] = selectionArray2;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                return this.Direct();
            }

            if (text == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                Session["ValoresTemporal2"] = selectionArray2;

                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;


            }
            else
            {

                // valoreArray = (string)Session["ValoresTemporal"];
                // valoreArray2 = (string)Session["ValoresTemporal2"];
                // TRANSACCIONALES
                List<SS_HC_Monitoreo_Obs_FE> ObjCabecera = new List<SS_HC_Monitoreo_Obs_FE>();
                List<SS_HC_Monitoreo_Obs_FE> ObjDetalle = new List<SS_HC_Monitoreo_Obs_FE>();
                List<SS_HC_Monitoreo_Obs_Ing_FE> ObjDetalleIng = new List<SS_HC_Monitoreo_Obs_Ing_FE>();

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro1 = -1;
                        objMonitoreo.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objMonitoreo.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objMonitoreo.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objMonitoreo.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objMonitoreo.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objMonitoreo.FechaModificacion = DateTime.Now;
                        objMonitoreo.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objMonitoreo.IdMedico = (int)ENTITY_GLOBAL.Instance.IDAGENTE;
                        if (objMonitoreo.Hora_Inicio == null) { eventoPostFormulario(false, ""); return showMensajeNotifyData("Error", "Debe ingresar una hora de inicio", "ERROR", false); }

                        if (objMonitoreo.Accion == "NUEVO")
                        {
                            objMonitoreo.Estado = 2;
                            objMonitoreo.FechaCreacion = DateTime.Now;
                            objMonitoreo.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objMonitoreo.IdMedico = (int)ENTITY_GLOBAL.Instance.IDAGENTE;

                        }
                        ObjCabecera.Add(objMonitoreo);

                        registro1 = 1;

                        String mensage = "";
                        String cadenas = "";
                        String[] cadArray;

                        if (registro1 > 0)
                        {

                            //BLOQUE DELETE
                            List<SS_HC_Monitoreo_Obs_FE> dataDelete = null;
                            if (Session["Data_SS_HC_Monitoreo_ObsDelete"] != null)
                            {
                                dataDelete = (List<SS_HC_Monitoreo_Obs_FE>)Session["Data_SS_HC_Monitoreo_ObsDelete"];
                            }
                            if (dataDelete != null)
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    ObjDetalle.Add(objDel);

                                }
                            }
                            ////////////


                            List<SS_HC_Monitoreo_Obs_Ing_FE> dataDelete2 = null;
                            if (Session["Data_SS_HC_Monitoreo_Obs_IngDelete"] != null)
                            {
                                dataDelete2 = (List<SS_HC_Monitoreo_Obs_Ing_FE>)Session["Data_SS_HC_Monitoreo_Obs_IngDelete"];
                            }
                            if (dataDelete2 != null)
                            {
                                foreach (var objDel1 in dataDelete2)
                                {
                                    ObjDetalleIng.Add(objDel1);

                                }
                            }


                            if (Session["ValoresTemporal"] != null)
                            {

                                valoreArray = (string)Session["ValoresTemporal"];

                                ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));



                                foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                                {

                                    objMonitoreo = new SS_HC_Monitoreo_Obs_FE();
                                    objMonitoreo.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objMonitoreo.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objMonitoreo.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objMonitoreo.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") objMonitoreo.Accion = "INSERTDETALLE";
                                    else objMonitoreo.Accion = objEntity.ACCION;


                                    //objDescansoMedico.Accion = objEntity.ACCION;

                                    objMonitoreo.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objMonitoreo.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    if (objMonitoreo.Accion != "INSERTDETALLE")
                                    {
                                        objMonitoreo.IdFormaInicio = Convert.ToInt32(objEntity.CodigoElemento);
                                    }


                                    cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                    cadenas = cadArray[1].Replace("[", "");
                                    cadenas = cadenas.Replace("]", "").Trim();

                                    objMonitoreo.IdDiagnostico = Convert.ToInt32(cadenas);
                                    ObjDetalle.Add(objMonitoreo);
                                    registro1 = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                }

                                registro1 = SvcMonitoreoObsFE.setMantenimiento(objMonitoreo, ObjCabecera, ObjDetalle);

                            }
                            if (((string)Session["ValoresTemporal2"]) != null || ((string)Session["ValoresTemporal2"] != "[]"))
                            {
                                valoreArray2 = (string)Session["ValoresTemporal2"];

                                ObjListar2 = (List<SS_HC_Monitoreo_Obs_Ing_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray2, typeof(List<SS_HC_Monitoreo_Obs_Ing_FE>));



                                foreach (SS_HC_Monitoreo_Obs_Ing_FE objEntity2 in ObjListar2)
                                {

                                    objMonitoreo_Obs_Ing = new SS_HC_Monitoreo_Obs_Ing_FE();
                                    objMonitoreo_Obs_Ing.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    objMonitoreo_Obs_Ing.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    objMonitoreo_Obs_Ing.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    objMonitoreo_Obs_Ing.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                    objMonitoreo_Obs_Ing.Secuencia = objEntity2.Secuencia;
                                    objMonitoreo_Obs_Ing.Fecha = objEntity2.Fecha;
                                    objMonitoreo_Obs_Ing.Hora = objEntity2.Hora;
                                    objMonitoreo_Obs_Ing.Goteoxmin = objEntity2.Goteoxmin;
                                    objMonitoreo_Obs_Ing.MU = objEntity2.MU;
                                    objMonitoreo_Obs_Ing.Fun_Vital_PA1 = objEntity2.Fun_Vital_PA1;
                                    objMonitoreo_Obs_Ing.Fun_Vital_PA2 = objEntity2.Fun_Vital_PA2;
                                    objMonitoreo_Obs_Ing.Fun_Vital_P = objEntity2.Fun_Vital_P;
                                    objMonitoreo_Obs_Ing.Fun_Vital_R = objEntity2.Fun_Vital_R;
                                    objMonitoreo_Obs_Ing.Fun_Vital_T = objEntity2.Fun_Vital_T;
                                    objMonitoreo_Obs_Ing.FCF = objEntity2.FCF;
                                    objMonitoreo_Obs_Ing.Din_Ut_Frec = objEntity2.Din_Ut_Frec;
                                    objMonitoreo_Obs_Ing.Din_Ut_Dur = objEntity2.Din_Ut_Dur;
                                    objMonitoreo_Obs_Ing.Din_Ut_Int = objEntity2.Din_Ut_Int;
                                    objMonitoreo_Obs_Ing.Ex_Val_Dilat = objEntity2.Ex_Val_Dilat;
                                    objMonitoreo_Obs_Ing.Ex_Val_Incorp = objEntity2.Ex_Val_Incorp;
                                    objMonitoreo_Obs_Ing.Ex_Val_AP = objEntity2.Ex_Val_AP;
                                    objMonitoreo_Obs_Ing.Ex_Val_IdM = objEntity2.Ex_Val_IdM;
                                    objMonitoreo_Obs_Ing.Observaciones = objEntity2.Observaciones;
                                    objMonitoreo_Obs_Ing.Firma = objEntity2.Firma;




                                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") objMonitoreo_Obs_Ing.Accion = "NUEVO";
                                    else objMonitoreo_Obs_Ing.Accion = objEntity2.Accion;


                                    //objDescansoMedico.Accion = objEntity.ACCION;

                                    objMonitoreo_Obs_Ing.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    objMonitoreo_Obs_Ing.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;


                                    if (objMonitoreo_Obs_Ing.Secuencia != 0)
                                    {
                                        objMonitoreo_Obs_Ing.Accion = "UPDATE";
                                        objMonitoreo_Obs_Ing.Secuencia = Convert.ToInt32(objEntity2.Secuencia);
                                    }
                                    else if (objMonitoreo_Obs_Ing.Secuencia == 0)
                                    {

                                        objMonitoreo_Obs_Ing.Accion = "NUEVO";


                                    }
                                    ObjDetalleIng.Add(objMonitoreo_Obs_Ing);
                                    //registro = 1;
                                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                                }


                                registro1 = SvcMonitoreoObsFE.setMantenimientoGrupo(objMonitoreo, ObjDetalleIng);

                            }

                            if (ObjDetalle.Count <= 0)
                            {
                                eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Error", "No hay diagnósticos agregados", "ERROR", false);
                            }

                            //TRANSACT
                            //     registro = SvcMonitoreoObsFE.setMantenimiento(objMonitoreo, ObjCabecera, ObjDetalle);

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";

                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro1;

                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");


                            if (registro1 > 0)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                Session["ValoresTemporal"] = null;
                                Session["Data_SS_HC_Monitoreo_ObsDelete"] = null;

                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Formulario Extras", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }


                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }

                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw;
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF502_MONITOREO_DIAG()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF502_MONITOREO_DIAG - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                {

                    LocalEnty.ACCION = "MONITOREO_DIAG";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                }
                else if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE"))
                {
                    LocalEnty.ACCION = "MONITOREO_DIAG";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    if (Listar.Count == 0)
                    {
                        LocalEnty.ACCION = "MONITOREO_DIAG_NUEVO";
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }



                }
                if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"))
                {
                    LocalEnty.ACCION = "MONITOREO_DIAG_NUEVO";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF502_MONITOREOGINGRESO(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF502_MONITOREOGINGRESO - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_Monitoreo_Obs_Ing_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Monitoreo_Obs_Ing_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                //  Listar = SvcInformeAltaFE.Listar_DiagIngreso(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                else
                {
                    LocalEnty2.ACCION = "DIAGNOSTICOFE";
                    LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                    var x = 0;
                    var y = 1;
                    foreach (var list in Listar2)
                    {
                        SS_HC_Monitoreo_Obs_Ing_FE tempList = new SS_HC_Monitoreo_Obs_Ing_FE();
                        tempList.Secuencia = y;
                        /*tempList.Codigo = Listar2[x].ValorCodigo7;*/
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                        tempList.Fecha = Listar2[x].ValorFecha;
                        tempList.Hora = Listar2[x].ValorFecha;
                        tempList.Goteoxmin = Listar2[x].ValorEntero1;
                        tempList.MU = Listar2[x].ValorEntero2;
                        tempList.Fun_Vital_PA1 = Listar2[x].ValorEntero3;
                        tempList.Fun_Vital_PA2 = Listar2[x].ValorEntero4;
                        tempList.Fun_Vital_P = Listar2[x].ValorEntero5;
                        tempList.Fun_Vital_R = Listar2[x].ValorEntero6;
                        tempList.Fun_Vital_T = Listar2[x].ValorEntero7;
                        tempList.FCF = Convert.ToInt32(Listar2[x].ValorCodigo1);
                        tempList.Din_Ut_Frec = Convert.ToInt32(Listar2[x].ValorCodigo2);
                        tempList.Din_Ut_Dur = Convert.ToInt32(Listar2[x].ValorCodigo3);
                        tempList.Din_Ut_Int = Convert.ToInt32(Listar2[x].ValorCodigo4);
                        tempList.Ex_Val_Dilat = Convert.ToInt32(Listar2[x].ValorCodigo5);
                        tempList.Ex_Val_Incorp = Convert.ToInt32(Listar2[x].ValorCodigo6);
                        tempList.Ex_Val_AP = Convert.ToInt32(Listar2[x].ValorCodigo7);
                        tempList.Ex_Val_IdM = Convert.ToInt32(Listar2[x].AplicacionCodigo);
                        tempList.Observaciones = Listar2[x].DescripcionLocal;
                        tempList.Ex_Val_IdM = Convert.ToInt32(Listar2[x].Compania);


                        tempList.Accion = "NUEVO";
                        Listar.Add(tempList);
                        x = x + 1;
                        y = y + 1;
                    }
                }

                Session["Monitoreo_Obs_Ing"] = Listar;

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF502_addEliminar_SS_HC_Monitoreo_Obs_Ing_FE(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF502_addEliminar_SS_HC_Monitoreo_Obs_Ing_FE - Entrar");
            List<SS_HC_Monitoreo_Obs_Ing_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_Monitoreo_Obs_IngDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Monitoreo_Obs_Ing_FE>)Session["Data_SS_HC_Monitoreo_Obs_IngDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Monitoreo_Obs_Ing_FE>();
                }
                SS_HC_Monitoreo_Obs_Ing_FE objDelete = new SS_HC_Monitoreo_Obs_Ing_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    // objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_Monitoreo_Obs_IngDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF502_addEliminar_SS_HC_Monitoreo_Obs_Diag(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF502_addEliminar_SS_HC_Monitoreo_Obs_Diag - Entrar");
            List<SS_HC_Monitoreo_Obs_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_Monitoreo_ObsDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Monitoreo_Obs_FE>)Session["Data_SS_HC_Monitoreo_ObsDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Monitoreo_Obs_FE>();
                }
                SS_HC_Monitoreo_Obs_FE objDelete = new SS_HC_Monitoreo_Obs_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.IdDiagnostico = Convert.ToInt32(cadenas);

                    objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_Monitoreo_ObsDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        #endregion*/

        #region CCEPF505
        public System.Web.Mvc.ActionResult CCEPF505_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF505_View - Entrar");
                var LocalEnty = new SS_HC_RESUMEN_PARTO_FE();
                var Listar = new List<SS_HC_RESUMEN_PARTO_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcResumen_Parto_FE.ResumenPartoListar(LocalEnty);


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_RESUMEN_PARTO_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        LocalEnty.Accion = "UPDATE";
                        hallado = true;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";

                    }
                }
                Session["Data_SS_HC_RESUMEN_PARTODelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /*  var txt = X.GetCmp<TextField>("IdMedico");
                  txt.SetValue(ENTITY_GLOBAL.Instance.USUARIO);*/


                //////////       
                return View("FormulariosExtras/CCEPF505_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF505_LISTAR_GRILLA_EMB_ANT()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF505_LISTAR_GRILLA_EMB_ANT - Entrar");
                //////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_RESPARTO_EMB_ANT_FE();
                var Listar = new List<SS_HC_RESPARTO_EMB_ANT_FE>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcResumen_Parto_FE.Listar_ResumenPartoAnt(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcResumen_Parto_FE.Listar_ResumenPartoAnt(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEPF505_LISTAR_GRILLA_EMB_ACT()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF505_LISTAR_GRILLA_EMB_ACT - Entrar");
                //////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_RESPARTO_EMB_ACT_FE();
                var Listar = new List<SS_HC_RESPARTO_EMB_ACT_FE>();

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcResumen_Parto_FE.Listar_ResumenPartoAct(LocalEnty).ToList();
                }
                else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                {
                    LocalEnty.Accion = "LISTAR";
                    LocalEnty.IdPaciente = Convert.ToInt32(ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim());
                    LocalEnty.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim());
                    LocalEnty.EpisodioClinico = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim());
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcResumen_Parto_FE.Listar_ResumenPartoAct(LocalEnty).ToList();
                }

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF505_Save_SS_HC_RESUMEN_PARTO_FE(String selectionArray0, String selectionArray1, String selectionArray2, string Evento, String Version)
        {
            Log.Information("HClinicaController - CCEPF505_Save_SS_HC_RESUMEN_PARTO_FE - Entrar");

            String valoreArray;
            String valoreArray2;
            String valoreArray3;
            //List<MA_MiscelaneosDetalle> ObjListar;
            List<SS_HC_RESUMEN_PARTO_FE> ObjListar = new List<SS_HC_RESUMEN_PARTO_FE>();
            List<SS_HC_RESPARTO_EMB_ANT_FE> ObjListar2 = new List<SS_HC_RESPARTO_EMB_ANT_FE>();
            List<SS_HC_RESPARTO_EMB_ACT_FE> ObjListar3 = new List<SS_HC_RESPARTO_EMB_ACT_FE>();


            SS_HC_RESUMEN_PARTO_FE objResumenParto = new SS_HC_RESUMEN_PARTO_FE();



            if (Evento == "Server")
            {

                try
                {

                    List<SS_HC_RESPARTO_EMB_ANT_FE> ObjEmbAnt = new List<SS_HC_RESPARTO_EMB_ANT_FE>();
                    List<SS_HC_RESPARTO_EMB_ACT_FE> ObjEmbAct = new List<SS_HC_RESPARTO_EMB_ACT_FE>();

                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjListar = (List<SS_HC_RESUMEN_PARTO_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_RESUMEN_PARTO_FE>));
                    }



                    objResumenParto.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objResumenParto.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objResumenParto.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objResumenParto.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objResumenParto.Fecha_Ing = ObjListar[0].Fecha_Ing;
                    objResumenParto.Hora_Ing = ObjListar[0].Hora_Ing;
                    objResumenParto.Controladora = ObjListar[0].Controladora;
                    objResumenParto.Membranas = ObjListar[0].Membranas;
                    objResumenParto.Horas_memb = ObjListar[0].Horas_memb;
                    objResumenParto.P_Selector1 = ObjListar[0].P_Selector1;
                    objResumenParto.P_Selector2 = ObjListar[0].P_Selector2;
                    objResumenParto.P_Observacion = ObjListar[0].P_Observacion;
                    objResumenParto.P_Dur_Parto = ObjListar[0].P_Dur_Parto;
                    objResumenParto.S_Selector1 = ObjListar[0].S_Selector1;
                    objResumenParto.Observaciones1_S = ObjListar[0].Observaciones1_S;
                    objResumenParto.S_Fecha_Parto = ObjListar[0].S_Fecha_Parto;
                    objResumenParto.S_Hora_Parto = ObjListar[0].S_Hora_Parto;
                    objResumenParto.S_Selector2 = ObjListar[0].S_Selector2;
                    objResumenParto.S_Episiotomia = ObjListar[0].S_Episiotomia;
                    objResumenParto.S_Desgarro = ObjListar[0].S_Desgarro;
                    objResumenParto.S_Selector3 = ObjListar[0].S_Selector3;
                    objResumenParto.S_Selector4 = ObjListar[0].S_Selector4;
                    objResumenParto.Observaciones2_S = ObjListar[0].Observaciones2_S;
                    objResumenParto.S_Dur_Parto = ObjListar[0].S_Dur_Parto;


                    objResumenParto.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objResumenParto.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objResumenParto.FechaCreacion = DateTime.Now;
                    objResumenParto.FechaModificacion = DateTime.Now;
                    objResumenParto.Version = "CCEPF505";

                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") objResumenParto.Accion = "NUEVO";
                    else objResumenParto.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;





                    int IdIdResParto = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {


                        //BLOQUE DELETE
                        List<SS_HC_RESPARTO_EMB_ANT_FE> dataDelete = null;
                        if (Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"] != null)
                        {
                            dataDelete = (List<SS_HC_RESPARTO_EMB_ANT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"];
                        }
                        if (dataDelete != null)
                        {
                            foreach (var objDel in dataDelete)
                            {
                                ObjEmbAnt.Add(objDel);

                            }
                        }
                        ////////////


                        List<SS_HC_RESPARTO_EMB_ACT_FE> dataDelete2 = null;
                        if (Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"] != null)
                        {
                            dataDelete2 = (List<SS_HC_RESPARTO_EMB_ACT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"];
                        }
                        if (dataDelete2 != null)
                        {
                            foreach (var objDel1 in dataDelete2)
                            {
                                ObjEmbAct.Add(objDel1);

                            }
                        }

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjListar2 = (List<SS_HC_RESPARTO_EMB_ANT_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_RESPARTO_EMB_ANT_FE>));


                            foreach (var objEntity2 in ObjListar2)
                            {
                                SS_HC_RESPARTO_EMB_ANT_FE temp = new SS_HC_RESPARTO_EMB_ANT_FE();
                                temp = objEntity2;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (temp.Secuencia != 0)
                                {
                                    temp.Accion = "UPDATE";
                                    temp.Secuencia = Convert.ToInt32(objEntity2.Secuencia);
                                }
                                else if (temp.Secuencia == 0)
                                {

                                    temp.Accion = "NUEVO";


                                }
                                ObjEmbAnt.Add(temp);

                            }

                        }
                        //if (Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"] != null)
                        //{
                        //    List<SS_HC_RESPARTO_EMB_ANT_FE> listaDel = (List<SS_HC_RESPARTO_EMB_ANT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"];
                        //    foreach (var result in listaDel)
                        //    {
                        //        ObjEmbAnt.Add(result);
                        //    }
                        //}


                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjListar3 = (List<SS_HC_RESPARTO_EMB_ACT_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_RESPARTO_EMB_ACT_FE>));


                            foreach (var objEntity3 in ObjListar3)
                            {
                                SS_HC_RESPARTO_EMB_ACT_FE temp1 = new SS_HC_RESPARTO_EMB_ACT_FE();
                                temp1 = objEntity3;
                                temp1.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp1.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp1.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp1.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp1.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (temp1.Secuencia != 0)
                                {
                                    temp1.Accion = "UPDATE";
                                    temp1.Secuencia = Convert.ToInt32(objEntity3.Secuencia);
                                }
                                else if (temp1.Secuencia == 0)
                                {

                                    temp1.Accion = "NUEVO";


                                }


                                ObjEmbAct.Add(temp1);

                            }

                        }
                        // if (Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"] != null)
                        //{
                        //    List<SS_HC_RESPARTO_EMB_ACT_FE> listaDel1 = (List<SS_HC_RESPARTO_EMB_ACT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"];
                        //    foreach (var result in listaDel1)
                        //    {
                        //        ObjEmbAct.Add(result);
                        //    }
                        //}


                        // }

                        IdIdResParto = SvcResumen_Parto_FE.setMantenimientoGrupo(objResumenParto, ObjEmbAnt, ObjEmbAct);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdIdResParto > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        

                            //   Session["SS_HC_BalanceHidroElectDetalle_FE"] = null;
                            Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"] = null;

                            eventoLoadPostFormulario(true, "storeEmbAnt", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;


                }
            }
            return this.Direct();
        }




        public System.Web.Mvc.ActionResult CCEPF505_addEliminar_SS_HC_RESPARTO_EMB_ANT_FE(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF505_addEliminar_SS_HC_RESPARTO_EMB_ANT_FE - Entrar");
            List<SS_HC_RESPARTO_EMB_ANT_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"] != null)
                {
                    dataDelete = (List<SS_HC_RESPARTO_EMB_ANT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_RESPARTO_EMB_ANT_FE>();
                }
                SS_HC_RESPARTO_EMB_ANT_FE objDelete = new SS_HC_RESPARTO_EMB_ANT_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_RESPARTO_EMB_ANT_FEDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF505_addEliminar_SS_HC_RESPARTO_EMB_ACT_FE(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF505_addEliminar_SS_HC_RESPARTO_EMB_ACT_FE - Entrar");
            List<SS_HC_RESPARTO_EMB_ACT_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"] != null)
                {
                    dataDelete = (List<SS_HC_RESPARTO_EMB_ACT_FE>)Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_RESPARTO_EMB_ACT_FE>();
                }
                SS_HC_RESPARTO_EMB_ACT_FE objDelete = new SS_HC_RESPARTO_EMB_ACT_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    // objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_RESPARTO_EMB_ACT_FEDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }
        #endregion*/

        #region CCEPF505_2


        public System.Web.Mvc.ActionResult CCEPF505_2_View()
        {
            Log.Information("HClinicaController - CCEPF505_2_View - Entrar");
            //2016.10.12 - 06:20

            Session["SEC_TOP_505_2"] = 0;
            try
            {
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_RESUMEN_PARTO_FE_2();
                var Listar = new List<SS_HC_RESUMEN_PARTO_FE_2>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                bool hallado = false;
                //LocalObj = null;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = Svc_ResumendelParto505_2FEService.ResumenPartos2Listar(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int contador = 0;

                    String version = "CCEPF505_2";

                    foreach (SS_HC_RESUMEN_PARTO_FE_2 objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";

                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }





                /*********contenedor 1************/
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF505_2_View", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult CCEPF505_2_Save_ResumParto(SS_HC_RESUMEN_PARTO_FE_2 objSave)
        {

            Log.Information("HClinicaController - CCEPF505_2_Save_ResumParto - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        registro = Svc_ResumendelParto505_2FEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F153", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F153", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            return this.Direct();
        }



        #endregion*/


        #region CCEPF505_3

        public System.Web.Mvc.ActionResult CCEPF505_3_View()
        {
            Log.Information("HClinicaController - CCEPF505_3_View - Entrar");

            //2016.10.12 - 06:20
            Session["SEC_TOP_505_3"] = 0;
            try
            {
                //SS_HC_AntePerGinecoObstetricos_FE LocalObj = null;
                var LocalEnty = new SS_HC_RESUMEN_PARTO_FE_3();
                var Listar = new List<SS_HC_RESUMEN_PARTO_FE_3>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                bool hallado = false;
                //LocalObj = null;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = Svc_ResumendelParto505_3FEService.ResumenParto3Listar(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int contador = 0;

                    String version = "CCEPF505_3";

                    foreach (SS_HC_RESUMEN_PARTO_FE_3 objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Version = version;
                        LocalEnty.Accion = "UPDATE";
                        // ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = LocalEnty.Accion;

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";

                        }
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }
                /*********contenedor 1************/
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF505_3_View", LocalEnty);
            }

            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }



        public System.Web.Mvc.ActionResult CCEPF505_3_Save_ResumParto(SS_HC_RESUMEN_PARTO_FE_3 objSave)
        {

            Log.Information("HClinicaController - CCEPF505_3_Save_ResumParto - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        registro = Svc_ResumendelParto505_3FEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico, ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F153", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F153", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }
            }
            return this.Direct();
        }





        #endregion*/


        #region  CCEPF510_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF510_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF510_View - Entrar");

                var LocalEnty = new SS_HC_Oftalmologico_FE();
                var Listar = new List<SS_HC_Oftalmologico_FE>();

                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                Listar = SvcOftalmologicoFEService.OftalmologicoListar(LocalEnty);

                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Oftalmologico_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }

                LocalEnty.Version = "CCEPF510";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF510_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF510_Save_Oftalmologico(SS_HC_Oftalmologico_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF510_Save_Oftalmologico - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        if (objSave.AVccODerecho == null && objSave.AVccOIzquierdo == null && objSave.AVscODerecho == null
                                                   && objSave.AVscOIzquierdo == null && objSave.CciclopejiaOIzqADD == null && objSave.CciclopejiaOIzqAV == null && objSave.CciclopejiaOIzqDIP == null && objSave.CercaODerecho == null
                                                   && objSave.CercaOIzquierdo == null && objSave.Cornea_Cristalino_Esclera == null && objSave.CorreccionODerecho == null && objSave.CorreccionOIzquierdo == null && objSave.DistanciaPupilar == null
                                                   && objSave.FondOjo_GoniosCopia == null && objSave.Iris_Pupila == null && objSave.PaquimetriaODerecho == null && objSave.PaquimetriaOIzquierdo == null && objSave.Parpados_anexos == null
                                                   && objSave.PinHoldODerecho == null && objSave.PinHoldOIzquierdo == null && objSave.RefracODerechoADD == null && objSave.RefracODerechoAV == null && objSave.RefracODerechoDIP == null
                                                   && objSave.RefraODerechoCilindro == null && objSave.RefraODerechoEje == null && objSave.RefraODerechoEsfera == null && objSave.ScicloPejiaOIzqCilindro == null && objSave.ScicloPejiaOIzqEje == null
                                                   && objSave.ScicloPejiaOIzqEsfera == null && objSave.TonAplanacion == null && objSave.TonODerecho == null && objSave.TonOIzquierdo == null && objSave.TonOtra == null && objSave.TonShiotz == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "*No existen datos para guardar.", "ERROR");
                        }


                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        registro = SvcOftalmologicoFEService.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");


                            // ------Migración Rest---------

                            SS_IT_SaludOFTALMOLOGICOIngreso ListaMirth = new SS_IT_SaludOFTALMOLOGICOIngreso();


                            var LocalEnfermedadAct = new SS_HC_EnfermedadActual_FE();
                            var ListarEnfermedadAct = new List<SS_HC_EnfermedadActual_FE>();
                            LocalEnfermedadAct.Accion = "LISTAR";
                            LocalEnfermedadAct.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            LocalEnfermedadAct.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            LocalEnfermedadAct.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            LocalEnfermedadAct.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            ListarEnfermedadAct = SvcEnfermedadActualServiceFE.ApoyoCabecera_Listar(LocalEnfermedadAct).ToList();

                            foreach (SS_HC_EnfermedadActual_FE ObjTraceEnfermedad in ListarEnfermedadAct)
                            {
                                ListaMirth.ENFACTUAL = ObjTraceEnfermedad.RelatoCronologico;
                            }

                            ListaMirth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            ListaMirth.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            ListaMirth.LineaOrdenAtencion = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            ListaMirth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            ListaMirth.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            ListaMirth.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            ListaMirth.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            ListaMirth.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            //ListaMirth.Secuencia = ENTITY_GLOBAL.Instance.SECUENCIAL_HCE;
                            //ListaMirth.ENFACTUAL = objSave.ScicloPejiaOIzqEsfera;

                            ListaMirth.AvCCOD = objSave.AVccODerecho;
                            ListaMirth.AVscOD = objSave.AVscODerecho;
                            ListaMirth.CERCAVAD = objSave.CercaODerecho;

                            ListaMirth.AVCCOI = objSave.AVccOIzquierdo;
                            ListaMirth.AVSCOI = objSave.AVscOIzquierdo;
                            ListaMirth.CERCAVAOI = objSave.CercaOIzquierdo;
                            ListaMirth.AEAVODPIN = objSave.PinHoldODerecho;
                            ListaMirth.AEAVOIDPIN = objSave.PinHoldOIzquierdo;

                            ListaMirth.SPHodREFRA = objSave.RefraODerechoEsfera;
                            ListaMirth.CILodREFA = objSave.RefraODerechoCilindro;
                            ListaMirth.EJEodREFRA = objSave.RefraODerechoEje;
                            ListaMirth.AVodREFRA = objSave.RefracODerechoAV;
                            ListaMirth.ADDodREFRA = objSave.RefracODerechoADD;
                            ListaMirth.DIPodREFRA = objSave.RefracODerechoDIP;
                            ListaMirth.SPHoiSCICLO = objSave.ScicloPejiaOIzqEsfera;
                            ListaMirth.CILoiSCICLO = objSave.ScicloPejiaOIzqCilindro;
                            ListaMirth.EJEoiSCICLO = objSave.ScicloPejiaOIzqEje;
                            ListaMirth.AVoiSCICLO = objSave.CciclopejiaOIzqAV;
                            ListaMirth.ADDoiSCICLO = objSave.CciclopejiaOIzqADD;
                            ListaMirth.DIPoiSCICLO = objSave.CciclopejiaOIzqDIP;
                            ListaMirth.PAPARPADOSANEXOS = objSave.Parpados_anexos;
                            ListaMirth.CORNEACRISTESCLERA = objSave.Cornea_Cristalino_Esclera;
                            ListaMirth.IRISPUPILA = objSave.Iris_Pupila;
                            ListaMirth.TonoOD = objSave.TonODerecho;
                            ListaMirth.TonoOI = objSave.TonOIzquierdo;
                            ListaMirth.MMHHTonShiotz = objSave.TonShiotz + "/" + objSave.TonAplanacion + "/" + objSave.TonOtra;
                            ListaMirth.FONDOJOyG = objSave.FondOjo_GoniosCopia;
                            ListaMirth.Estado = 2;
                            ListaMirth.UsuarioCreacion = objSave.UsuarioCreacion;
                            ListaMirth.FechaCreacion = objSave.FechaCreacion;
                            ListaMirth.UsuarioModificacion = objSave.UsuarioModificacion;
                            ListaMirth.FechaModificacion = objSave.FechaModificacion;

                            Boolean rr3 = MirthHelper.MirthIngresoMantenimiento("Mirth/Mirth_OftalmologicoIngresoMantenimiento", Newtonsoft.Json.JsonConvert.SerializeObject(ListaMirth));

                            // -----------------------------

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en F153", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en F153", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //HClinicaController.LOGgineco(this, ex);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF404
        public System.Web.Mvc.ActionResult CCEPF404_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF404_View - Entrar");
                var LocalEnty0 = new SS_HC_Partograma_FE();
                var Listar = new List<SS_HC_Partograma_FE>();
                LocalEnty0.Accion = "LISTAR";
                LocalEnty0.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty0.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty0.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty0.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                Listar = SvcPartograma.Listar(LocalEnty0).ToList();
                bool hallado0 = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Partograma_FE objEntity in Listar)
                    {
                        LocalEnty0 = objEntity;
                        hallado0 = true;
                        LocalEnty0.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty0.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }



                }
                if (!hallado0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty0.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty0.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                /**ADD para config del PATH del form*/
                setConfigPath(UTILES_MENSAJES.PATH_MAIN_HCLINICA, "");

                Session["SS_HC_PartogramaDetalleDelete_FE"] = null;
                /*********************************/
                Session["Accion_404"] = LocalEnty0.Accion;
                return View("FormulariosExtras/CCEPF404_View", "", LocalEnty0);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF404_MEDICAMENTOS()
        {
            Log.Information("HClinicaController - CCEPF404_MEDICAMENTOS - Entrar");
            var LocalEnty = new SS_HC_PartogramaDetalle_FE();
            var Listar = new List<SS_HC_PartogramaDetalle_FE>();

            LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

            LocalEnty.Accion = "LISTAR";

            Listar = SvcPartograma.Listar_Medicamento(LocalEnty);

            if (Listar.Count > 0)
            {
                int x = 0;
                foreach (var algo in Listar)
                {
                    Listar[x].Accion = "UPDATE";
                    x = x + 1;
                }
            }

            return this.Store(Listar.ToList());
        }

        public System.Web.Mvc.ActionResult CCEPF404_Eliminar_Med(string MODO, int secuencia, string Accion)
        {
            Log.Information("HClinicaController - CCEPF404_Eliminar_Med - Entrar");
            if (Accion != "NUEVO")
            {
                if (secuencia > 0)
                {
                    /*objListaMed = null;*/
                    List<SS_HC_PartogramaDetalle_FE> objListaMed0 = new List<SS_HC_PartogramaDetalle_FE>();
                    SS_HC_PartogramaDetalle_FE temp = new SS_HC_PartogramaDetalle_FE();

                    List<SS_HC_PartogramaDetalle_FE> objListaMed = (List<SS_HC_PartogramaDetalle_FE>)Session["SS_HC_PartogramaDetalleDelete_FE"];

                    if (objListaMed != null)
                    {
                        objListaMed0.AddRange(objListaMed);
                    }

                    temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    temp.Secuencia = secuencia;
                    temp.Accion = "DELETE";

                    objListaMed0.Add(temp);
                    Session["SS_HC_PartogramaDetalleDelete_FE"] = objListaMed0;
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Partograma_CCEPF404(string VALOR)
        {
            try
            {
                Log.Information("HClinicaController - Partograma_CCEPF404 - Entrar");
                var LocalEnty = new SS_HC_Partograma_FE();
                var Listar = new List<SS_HC_Partograma_FE>();
                var NewListaX = new List<object>();
                var NewListaY = new List<object>();

                LocalEnty.Accion = "LISTARGRAF";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.Fecha = DateTime.Now;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcPartograma.Listar_graficos(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int max = Listar.Count;
                    int ultimo = Convert.ToInt32(Listar[max - 1].IdEpisodioAtencion);

                    int x = 0;

                    foreach (var algo in Listar)
                    {
                        NewListaX.Add(Convert.ToInt32(Listar[x].IdEpisodioAtencion));

                        if (VALOR == "G1")
                        {
                            NewListaY.Add(Listar[x].FrecCardiacaFetal);
                        }
                        if (VALOR == "G2")
                        {
                            NewListaY.Add(Listar[x].DilatacionCuelloUt);
                        }
                        if (VALOR == "G3")
                        {
                            NewListaY.Add(Listar[x].DescensoCefalico);
                        }
                        /*if (VALOR == "G4")
                        {
                            NewListaY.Add(Listar[x]);
                        }*/
                        if (VALOR == "G5")
                        {
                            NewListaY.Add(Listar[x].FVPulso);
                        }
                        if (VALOR == "G6")
                        {
                            NewListaY.Add(Listar[x].FVPresionArterial);
                        }
                        if (VALOR == "G6_")
                        {
                            NewListaY.Add(Listar[x].FVPresionArterialD);
                        }
                        if (VALOR == "G7")
                        {
                            NewListaY.Add(Listar[x].FVTemperatura);
                        }

                        x = x + 1;
                    }
                }
                else
                {
                    NewListaX.Add(0);
                    NewListaY.Add(0);
                }

                var listX = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaX.ToList());
                var listY = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaY.ToList());
                string listaX = listX.ToString();
                var listAX = listX.Replace("\"", "");
                var listAY = listY.Replace("\"", "");
                var listZ = "[" + listX + "/" + listY + "]";
                return this.Direct(listZ);
                /*  return this.Store(NewLista.ToList());*/

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult PartogramaUlt_CCEPF404(int VALOR)
        {
            try
            {
                Log.Information("HClinicaController - PartogramaUlt_CCEPF404 - Entrar");
                var LocalEnty = new SS_HC_Partograma_FE();
                var Listar = new List<SS_HC_Partograma_FE>();
                var NewListaX = new List<object>();
                var NewListaY = new List<object>();
                int ultimo = 0;

                LocalEnty.Accion = "LISTARGRAF";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.DuracionContracciones = VALOR;
                LocalEnty.Fecha = DateTime.Now;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcPartograma.Listar_graficos(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int max = Listar.Count;
                    ultimo = Convert.ToInt32(Listar[max - 1].IdEpisodioAtencion);

                    /*  int x = 0;

                      foreach (var algo in Listar)
                      {
                          NewListaX.Add(Convert.ToInt32(Listar[x].IdEpisodioAtencion));
                          NewListaY.Add(Listar[x].FVTemperatura);
                          x = x + 1;
                      }*/
                }
                else
                {
                    NewListaX.Add(0);
                    NewListaY.Add(0);
                }

                return this.Direct(ultimo);
                /*  return this.Store(NewLista.ToList());*/

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult PartogramaCont_CCEPF404(int VALOR)
        {
            try
            {
                Log.Information("HClinicaController - PartogramaCont_CCEPF404 - Entrar");
                var LocalEnty = new SS_HC_Partograma_FE();
                var Listar = new List<SS_HC_Partograma_FE>();
                var NewListaX = new List<object>();
                var NewListaY = new List<object>();

                LocalEnty.Accion = "LISTARCONT";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.DuracionContracciones = VALOR;
                LocalEnty.Fecha = DateTime.Now;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcPartograma.Listar_graficos(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int max = Listar.Count;
                    int ultimo = Convert.ToInt32(Listar[max - 1].IdEpisodioAtencion);

                    int x = 0;

                    foreach (var algo in Listar)
                    {
                        NewListaX.Add(Convert.ToInt32(Listar[x].IdEpisodioAtencion));
                        NewListaY.Add(Listar[x].ContracTEENmin);
                        x = x + 1;
                    }
                }
                else
                {
                    NewListaX.Add(0);
                    NewListaY.Add(0);
                }

                var listX = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaX.ToList());
                var listY = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaY.ToList());
                string listaX = listX.ToString();
                var listAX = listX.Replace("\"", "");
                var listAY = listY.Replace("\"", "");
                var listZ = "[" + listX + "/" + listY + "]";
                return this.Direct(listZ);
                /*  return this.Store(NewLista.ToList());*/

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult PartogramaDet_CCEPF404(string VALOR)
        {
            Log.Information("HClinicaController - PartogramaDet_CCEPF404 - Entrar");
            try
            {
                var LocalEnty = new SS_HC_Partograma_FE();
                var Listar = new List<SS_HC_Partograma_FE>();
                var NewListaX = new List<object>();
                var NewListaY = new List<object>();

                LocalEnty.Accion = "LISTARGRAF";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                LocalEnty.Fecha = DateTime.Now;
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcPartograma.Listar_graficos(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int max = Listar.Count;
                    int ultimo = Convert.ToInt32(Listar[max - 1].IdEpisodioAtencion);

                    int x = 0;

                    foreach (var algo in Listar)
                    {
                        NewListaX.Add(Convert.ToInt32(Listar[x].IdEpisodioAtencion));

                        if (VALOR == "D1")
                        {
                            NewListaY.Add(Listar[x].Membranas);
                        }
                        if (VALOR == "D2")
                        {
                            NewListaY.Add(Listar[x].Liquido);
                        }
                        if (VALOR == "D3")
                        {
                            NewListaY.Add(Listar[x].TactosVaginales);
                        }
                        if (VALOR == "D4")
                        {
                            NewListaY.Add(Listar[x].Oxitocina);
                        }
                        /*  if (VALOR == "D5")
                          {
                              NewListaY.Add(Listar[x].);
                          }*/
                        if (VALOR == "D6")
                        {
                            //if (Listar[x].Proteina > 20)
                            //{
                            //    NewListaY.Add("+");
                            //}
                            //else
                            //{
                            //    if (Listar[x].Proteina > 0 & Listar[x].Proteina < 21)
                            //    {
                            //        NewListaY.Add("-");
                            //    }
                            //    else { NewListaY.Add(""); }
                            //}

                            NewListaY.Add(Listar[x].Proteina);
                        }
                        if (VALOR == "D7")
                        {
                            //if (Listar[x].Acetona > Convert.ToDecimal(0.6))
                            //{
                            //    NewListaY.Add("+");
                            //}
                            //else
                            //{
                            //    if (Listar[x].Acetona > Convert.ToDecimal(0.1) & Listar[x].Acetona < Convert.ToDecimal(0.7))
                            //    {
                            //        NewListaY.Add("-");
                            //    }
                            //    else { NewListaY.Add(""); }
                            //}
                            NewListaY.Add(Listar[x].Acetona);
                        }
                        if (VALOR == "D8")
                        {

                            NewListaY.Add(Listar[x].Volumen);
                        }

                        x = x + 1;
                    }
                }
                else
                {
                    NewListaX.Add(0);
                    NewListaY.Add(0);
                }

                var listX = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaX.ToList());
                var listY = Newtonsoft.Json.JsonConvert.SerializeObject(NewListaY.ToList());
                string listaX = listX.ToString();
                var listAX = listX.Replace("\"", "");
                var listAY = listY.Replace("\"", "");
                var listZ = "[" + listX + "/" + listY + "]";
                return this.Direct(listZ);
                /*  return this.Store(NewLista.ToList());*/

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult eventoFrecuenciaCardiaca(String opcion)
        {
            Log.Information("HClinicaController - eventoFrecuenciaCardiaca - Entrar");
            var objModel = new SS_HC_FactorRelacionadoNanda();

            objModel.Accion = "VER";
            objModel.IdNanda = 1;
            //objModel.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            // objModel.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
            // objModel.EpisodioClinico = ENTITY_GLOBAL.Instance.EpisodioClinico;
            // objModel.IdEpisodioAtencion = Convert.ToInt32(ENTITY_GLOBAL.Instance.EpisodioAtencion);

            //aqui me quede

            return crearWindowRegistro("PAE/AdicionarFactor", objModel, "");

            /*var objMiscl = new MA_MiscelaneosDetalle();
            var aplica = ENTITY_GLOBAL.Instance.APLICATIVOID;
            SEGURIDADCONCEPTO modelo = new SEGURIDADCONCEPTO();
            string estado = "PanelCentralBlanco";

            modelo.ACCION = "VER";*/
            /*  ENTITY_GLOBAL.Instance.INDICA_SELECCIONCRONOLOGIAS = 1; 
             ENTITY_GLOBAL.Instance.UNIDREPLICACION_TEMP = ENTITY_GLOBAL.Instance.UnidadReplicacion;
             ENTITY_GLOBAL.Instance.IDPACIENTE_TEMP = ENTITY_GLOBAL.Instance.PacienteID;
             ENTITY_GLOBAL.Instance.EPISODIOCLINICO_TEMP = ENTITY_GLOBAL.Instance.EpisodioClinico;
             ENTITY_GLOBAL.Instance.IDEPISODIOATENCION_TEMP = ENTITY_GLOBAL.Instance.EpisodioAtencion;
             ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION_TEMP = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
             ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION_TEMP = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;


            return NewPageWindows("Graficos/FrecuenciaCardiaca_View", model, "");*/

            /* return PartialView("Graficos/FrecuenciaCardiaca_View", model);*/


            /*   return crearWindowRegistro("Procesos/FrecuenciaCardiaca", modelo, "");*/

        }

        public System.Web.Mvc.ActionResult Save_Partograma(String selectionArray0, String selectionArray1, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_Partograma - Entrar");

            List<SS_HC_PartogramaDetalle_FE> ObjLista9 = new List<SS_HC_PartogramaDetalle_FE>();
            List<SS_HC_Partograma_FE> ObjLista0 = new List<SS_HC_Partograma_FE>();

            SS_HC_Partograma_FE objAnamEA = new SS_HC_Partograma_FE();


            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_PartogramaDetalle_FE> listaSoluciones = new List<SS_HC_PartogramaDetalle_FE>();


                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_Partograma_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Partograma_FE>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.Fecha = ObjLista0[0].Fecha;
                    objAnamEA.FrecCardiacaFetal = ObjLista0[0].FrecCardiacaFetal;
                    objAnamEA.Membranas = ObjLista0[0].Membranas;
                    objAnamEA.Liquido = ObjLista0[0].Liquido;
                    objAnamEA.DilatacionCuelloUt = ObjLista0[0].DilatacionCuelloUt;
                    objAnamEA.DescensoCefalico = ObjLista0[0].DescensoCefalico;
                    objAnamEA.TactosVaginales = ObjLista0[0].TactosVaginales;
                    objAnamEA.DuracionContracciones = ObjLista0[0].DuracionContracciones;
                    objAnamEA.ContracTEENmin = ObjLista0[0].ContracTEENmin;
                    objAnamEA.Oxitocina = ObjLista0[0].Oxitocina;
                    objAnamEA.FVPulso = ObjLista0[0].FVPulso;
                    objAnamEA.FVPresionArterial = ObjLista0[0].FVPresionArterial;
                    objAnamEA.FVPresionArterialD = ObjLista0[0].FVPresionArterialD;
                    objAnamEA.FVTemperatura = ObjLista0[0].FVTemperatura;
                    objAnamEA.Proteina = ObjLista0[0].Proteina;
                    objAnamEA.Acetona = ObjLista0[0].Acetona;
                    objAnamEA.Volumen = ObjLista0[0].Volumen;

                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.FechaCreacion = DateTime.Now;
                    objAnamEA.FechaModificacion = DateTime.Now;

                    objAnamEA.Accion = (string)Session["Accion_404"];





                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjLista9 = (List<SS_HC_PartogramaDetalle_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_PartogramaDetalle_FE>));


                            foreach (var algo in ObjLista9)
                            {
                                SS_HC_PartogramaDetalle_FE temp = new SS_HC_PartogramaDetalle_FE();
                                temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                temp.FechaCreacion = DateTime.Now;
                                temp.FechaModificacion = DateTime.Now;

                                listaSoluciones.Add(temp);

                            }

                        }
                        if (Session["SS_HC_PartogramaDetalleDelete_FE"] != null)
                        {
                            List<SS_HC_PartogramaDetalle_FE> listaDel = (List<SS_HC_PartogramaDetalle_FE>)Session["SS_HC_PartogramaDetalleDelete_FE"];
                            foreach (var result in listaDel)
                            {
                                listaSoluciones.Add(result);
                            }
                        }



                        // }

                        IdSecuencia = SvcPartograma.setMantenimiento(objAnamEA, listaSoluciones);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        


                            Session["SS_HC_PartogramaDetalleDelete_FE"] = null;

                            eventoLoadPostFormulario(true, "storeMed", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion

        #region CCEPF460_1_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF460_1_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF460_1_View - Entrar");
                var LocalEnty = new SS_HC_Pre_Operatorio_1_FE();
                var Listar = new List<SS_HC_Pre_Operatorio_1_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //LocalEnty.TipoCirugia = 2;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;

                Listar = SvcPreOperatorio1Service.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Pre_Operatorio_1_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF460_1";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF460_1_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF460_1_Save_SeguridadCirugia(SS_HC_Pre_Operatorio_1_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF460_1_Save_SeguridadCirugia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        if (objSave.Respuesta1 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el paciente cuenta con OIQ ", "ERROR", false);
                        }
                        else if (objSave.Respuesta2 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se colocó el brazalete de identificación", "ERROR", false);
                        }
                        else if (objSave.Respuesta3 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se la identidad del paciente y cirugía a realizar", "ERROR", false);
                        }
                        else if (objSave.Respuesta4 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el médico le explico la operación que le van a realizar", "ERROR", false);
                        }
                        else if (objSave.Respuesta5 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si esta bien especificada la operación", "ERROR", false);
                        }
                        else if (objSave.Respuesta6 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si implica lateralidad y si está especificada el lado que corresponde en el consentimiento (derecho, izquierdo)", "ERROR", false);
                        }
                        else if (objSave.Respuesta7 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el consentimiento informado está firmado por el paciente, un testigo y fechado", "ERROR", false);
                        }
                        else if (objSave.Respuesta8 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el médico firmó y selló el consentimiento quirúrgico", "ERROR", false);
                        }
                        else if (objSave.Respuesta9 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el médico firmó y selló el consentimiento anestesiológico", "ERROR", false);
                        }
                        else if (objSave.Respuesta10 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se realizó Anamnesis, antecedentes, examen físico", "ERROR", false);
                        }
                        else if (objSave.Respuesta11 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si está registrado TALLA y PESO en la hoja de funciones vitales", "ERROR", false);
                        }
                        else if (objSave.Respuesta12 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se encuentra la EVALUACIÓN PRE ANESTESICA", "ERROR", false);
                        }
                        else if (objSave.Respuesta13 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se encuentra el RIESGO QUIRÚRGICO", "ERROR", false);
                        }
                        else if (objSave.Respuesta14 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se encuentra el formato LISTA DE SEGURIDAD QUIRÚRUGICA", "ERROR", false);
                        }
                        else if (objSave.Respuesta15 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si están los exámenes de imágenes necesarios para la operación con informe", "ERROR", false);
                        }
                        else if (objSave.Respuesta16 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se encuentra el FORMATO DE ALERGIA A MEDICAMENTOS lleno y firmado", "ERROR", false);
                        }
                        else if (objSave.Respuesta17 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el paciente se encuentra resfriado", "ERROR", false);
                        }
                        else if (objSave.Respuesta18 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el paciente es portador de marcapaso", "ERROR", false);
                        }
                        else if (objSave.Respuesta19 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el paciente se encuentra con medicación anticoagulante", "ERROR", false);
                        }
                        else if (objSave.Respuesta20 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se ha suspendido los anticoagulantes (Warfarina u otros)", "ERROR", false);
                        }
                        else if (objSave.Respuesta21 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si paciente inmunosuprimido", "ERROR", false);
                        }


                        else
                        {
                            registro = SvcPreOperatorio1Service.setMantenimiento(objSave);
                        }
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorPersona(String accionSeleccion, String accionListado)
        {
            Log.Information("HClinicaController - seleccionadorPersona - Entrar");
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Actividad = accionListado;
            obj.ACCION = accionSeleccion;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("SeleccionadorPersona", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult getSeleccionPersonaMaestroMedico(String MODO, int persona, string servicio, string codigo, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionPersonaMaestroMedico - Entrar");
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txt = X.GetCmp<NumberField>("IdCirujano");
            txt.SetValue(persona);

            //var txttfTipoTrabajador = X.GetCmp<TextField>("tipotrabajador");
            //txttfTipoTrabajador.SetValue(servicio);

            //var tfCodigoUsuario = X.GetCmp<TextField>("CodigoAgente");
            //var realValueCodigo = getValorFiltroStr(codigo);
            //tfCodigoUsuario.SetValue(realValueCodigo);

            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Persona = persona;
            obj.ACCION = "LISTARPORID";
            lista = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
            if (lista.Count == 1)
            {
                foreach (var result in lista)
                {
                    var txtNombre = X.GetCmp<TextField>("tfDescMed");
                    txtNombre.SetValue(result.NombreCompleto);
                    var txtNombres = X.GetCmp<TextField>("Nombre");
                    txtNombres.SetValue(result.NombreCompleto);
                }
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionPersonaMaestroEnfermera(String MODO, int persona, string servicio, string codigo, String idWindow)
        {
            Log.Information("HClinicaController - getSeleccionPersonaMaestroEnfermera - Entrar");
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txt = X.GetCmp<NumberField>("IdEnfermera");
            txt.SetValue(persona);

            //var txttfTipoTrabajador = X.GetCmp<TextField>("tipotrabajador");
            //txttfTipoTrabajador.SetValue(servicio);

            //var tfCodigoUsuario = X.GetCmp<TextField>("CodigoAgente");
            //var realValueCodigo = getValorFiltroStr(codigo);
            //tfCodigoUsuario.SetValue(realValueCodigo);

            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Persona = persona;
            obj.ACCION = "LISTARPORID";
            lista = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
            if (lista.Count == 1)
            {
                foreach (var result in lista)
                {
                    var txtNombre = X.GetCmp<TextField>("tfDescEmp");
                    txtNombre.SetValue(result.NombreCompleto);
                    var txtNombres = X.GetCmp<TextField>("Nombre");
                    txtNombres.SetValue(result.NombreCompleto);
                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getGrillaListadoVwPersonapacienteSeleccionar(int start, int limit, int persona, string nombre, string tipoBuscar)
        {
            Log.Information("HClinicaController - getGrillaListadoVwPersonapacienteSeleccionar - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<VW_PERSONAPACIENTE>();

                var LocalEnty = new VW_PERSONAPACIENTE();
                //LocalEnty.Persona = persona;
                LocalEnty.NombreCompleto = nombre;
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAGSELECUSER";
                int cantElementos = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAGSELECUSER";
                    Listar = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente.listarVwPersonapaciente(LocalEnty, ini, fin);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        #endregion

        #region CCEPF460_2_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF460_2_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF460_2_View - Entrar");
                var LocalEnty = new SS_HC_Pre_Operatorio_2_FE();
                var Listar = new List<SS_HC_Pre_Operatorio_2_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //LocalEnty.TipoCirugia = 2;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;

                Listar = SvcPreOperatorio2Service.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Pre_Operatorio_2_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF460_2";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF460_2_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF460_2_Save_SeguridadCirugia(SS_HC_Pre_Operatorio_2_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF460_2_Save_SeguridadCirugia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        if (objSave.Respuesta1 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si tiene más de 6 horas de ayuno. Si ingirió alimentos menos de 6hrs. Antes de la cirugía, informar al anestesiólogo ", "ERROR", false);
                        }
                        else if (objSave.Respuesta2 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se retiro: ropa, pelucas, maquillaje, esmalte de uñas, joyas, lentes piercing y se colocó la bata de sala de operaciones", "ERROR", false);
                        }
                        else if (objSave.Respuesta3 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se pregunto al paciente si tiene prótesis dentales, lentes de contacto, ayudas auditivas. Se retiró y se guardó", "ERROR", false);
                        }
                        else if (objSave.Respuesta4 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se guardo y registró todas sus pertenecías y/o se entregó al familiar o acompañante", "ERROR", false);
                        }
                        else if (objSave.Respuesta5 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se marcó la zona operatoria (derecho o izquierdo)", "ERROR", false);
                        }
                        else if (objSave.Respuesta6 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se colocaron vendajes o medias elásticas en extremidades inferiores", "ERROR", false);
                        }
                        else if (objSave.Respuesta7 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se administró medicación preoperatoria y se registró", "ERROR", false);
                        }
                        else if (objSave.Respuesta8 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si el paciente miccionó", "ERROR", false);
                        }
                        else if (objSave.Respuesta9 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione vía endovenosa instalada (aguja N° 18-20/ equipo de extensión corta)", "ERROR", false);
                        }
                        else if (objSave.Respuesta10 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione tiene control de funciones vitales ", "ERROR", false);
                        }
                        else if (objSave.Respuesta11 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione el paciente está rasurado ", "ERROR", false);
                        }
                        else if (objSave.Respuesta12 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si tuvo ducha con clorhexidina o jabón", "ERROR", false);
                        }
                        else if (objSave.Respuesta13 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si estado de la piel: sana", "ERROR", false);
                        }
                        else if (objSave.Respuesta14 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione UPP", "ERROR", false);
                        }
                        else if (objSave.Respuesta15 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si tiene depósito de sangre. Los exámenes de laboratorio están presentes en la historia", "ERROR", false);
                        }
                        else if (objSave.Respuesta16 == null)
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Seleccione si se comprobó datos del paciente con solicitud de transfusión", "ERROR", false);
                        }


                        else
                        {
                            registro = SvcPreOperatorio2Service.setMantenimiento(objSave);
                        }
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF403_3_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF403_3_View()
        {
            Log.Information("ProgramarKardexController - CCEPF403_3_View - Bloque Catch");
            Session["SEC_TOP_150"] = 0;
            //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
            SS_HC_Kardex1_FE ObjSP;
            //var fieldCod = X.GetCmp<TextField>("txtPaciente");
            //fieldCod.SetValue(ENTITY_GLOBAL.Instance.NombreCompletoPaciente);


            //var fieldCod2 = X.GetCmp<TextField>("txtCodigoOA");
            //fieldCod2.SetValue(ENTITY_GLOBAL.Instance.CodigoOA);

            //var fieldCod3 = X.GetCmp<DateField>("txtFecha1");
            /*fieldCod3.SetValue(ENTITY_GLOBAL.Instance.FechaReceta);*/

            ObjSP = new SS_HC_Kardex1_FE();
            ObjSP.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            ObjSP.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            ObjSP.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            ObjSP.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;

            var LocalEnty = new SS_HC_Kardex1_FE();
            var Listar = new List<SS_HC_Kardex1_FE>();
            LocalEnty.Accion = "LISTARKARDEX3";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
            {
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            }
            Listar = SvcMedicamentoKardex.ListarKardex1(LocalEnty).ToList();
            bool hallado = false;
            if (Listar.Count > 0)
            {
                foreach (SS_HC_Kardex1_FE objEntity in Listar)
                {
                    LocalEnty = objEntity;
                    hallado = true;
                    LocalEnty.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }
            }
            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    LocalEnty.Accion = "NUEVO";
                    var varNombre = ENTITY_GLOBAL.Instance.MedicoNombre;
                    var tfNom = X.GetCmp<TextField>("tfNomMed");
                    if (varNombre != null && varNombre != "")
                    {
                        tfNom.SetValue(varNombre);
                    }

                    var varIdMed = ENTITY_GLOBAL.Instance.IdMedico;
                    var tfIdMed = X.GetCmp<NumberField>("IdPersonalSalud");
                    if (varIdMed != null && varNombre != "")
                    {
                        tfIdMed.SetValue(varIdMed);
                    }
                }
            }






            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /*
            ObjSP.Accion = "NDOCUMENTO";

            object result = svcSS_HC_KardexEnfermeria.Listar(ObjSP);

            var fieldCod4 = X.GetCmp<TextField>("txtDocumento");
            fieldCod4.SetValue(result.ToString());*/

            //ObjSP.Accion = "OBSERVACION";

            //object result2;// = svcSS_HC_KardexEnfermeria.Listar(ObjSP);

            //var fieldCod5 = X.GetCmp<TextArea>("txtObservacion");
            ////fieldCod5.SetValue(result2.ToString());

            //ObjSP.Accion = "IDSOLICITUD";

            //object result3;// = svcSS_HC_KardexEnfermeria.Listar(ObjSP);

            //var fieldCod6 = X.GetCmp<TextField>("txtIdSolicitudProducto");
            //fieldCod6.SetValue(result3.ToString());


            //return View();
            return View("FormulariosExtras/CCEPF403_3_View", LocalEnty);
        }


        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTO_KARDEX_PROGRAMACION(string VALOR, string tipoRecurso)
        {
            try
            {
                Log.Information("HClinicaController - CCEP0304_MEDICAMENTO_KARDEX_PROGRAMACION - Entrar");
                var LocalEnty = new SS_HC_Medicamento_Kardex();
                var Listar = new List<SS_HC_Medicamento_Kardex>();
                var objLista = new List<SS_HC_Medicamento_Kardex>();
                var objListaShow = new List<SS_HC_Medicamento_Kardex>();

                var objListaAnt = new List<SS_HC_Medicamento_Kardex>();
                //var objListaAntDetall = new List<SS_HC_Indicaciones>();

                ///////////////////////////////////////////////

                SS_HC_Medicamento_Kardex objEnt = new SS_HC_Medicamento_Kardex();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                objEnt.Accion = "LISTAR";
                objListaAnt = SvcMedicamentoKardex.listarProgramacionKardex(objEnt);

                //Si algún registro de la lista no tiene check(1) entonces bloquear botones de imprimir
                List<SS_HC_Medicamento_Kardex> lst = objListaAnt.Where(x => x.Hora0 == 1 || x.Hora1 == 1
                || x.Hora2 == 1 || x.Hora3 == 1 || x.Hora4 == 1 || x.Hora5 == 1 || x.Hora6 == 1 || x.Hora7 == 1
                || x.Hora8 == 1 || x.Hora9 == 1 || x.Hora10 == 1 || x.Hora11 == 1 || x.Hora12 == 1 || x.Hora13 == 1
                || x.Hora14 == 1 || x.Hora15 == 1 || x.Hora16 == 1 || x.Hora17 == 1 || x.Hora18 == 1 || x.Hora19 == 1
                || x.Hora20 == 1 || x.Hora21 == 1 || x.Hora22 == 1 || x.Hora23 == 1 || x.Estado == 1).ToList();

                if (lst.Count == 0)
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                }
                else
                {
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                }

                return this.Store(objListaAnt.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;


            }
        }



        #endregion

        public System.Web.Mvc.ActionResult CCEP0304_MEDICAMENTO_KARDEX(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaController - CCEP0304_MEDICAMENTO_KARDEX - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();

            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;

            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();

            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
            /*objEnt.GrupoMedicamento = grupo;*/
            objEnt.Accion = "LISTARK";
            objListaAnt9 = SvcMedicamentoFE.MedicamentoListar(objEnt);

            String[] cadArray;
            String[] cadArrays;
            String cad;
            if (objListaAnt9.Count > 0)
            {


                BE_Medicamento_FE obtemp1;
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt9)
                {
                    obtemp1 = new BE_Medicamento_FE();
                    obtemp1.Linea = intobj.Linea;
                    obtemp1.Familia = intobj.Familia;
                    obtemp1.SubFamilia = intobj.SubFamilia;
                    /**/
                    //cadArray = intobj.Version.Trim().Split('|');
                    //obtemp1.LineaDescripcion = cadArray[0];
                    //obtemp1.FamiliaDescripcion = cadArray[1];
                    //obtemp1.SubFamiliaDescripcion = cadArray[2];
                    //obtemp1.MedicamentoDescripcion = cadArray[3];


                    /***/
                    //obtemp.SubFamiliaDescripcion = intobj.Version;

                    obtemp1.Secuencia = intobj.Secuencia;
                    obtemp1.IdUnidadMedida = intobj.IdUnidadMedida;
                    obtemp1.Dosis = intobj.Dosis;///////////// Editado
                    obtemp1.IdVia = intobj.IdVia;
                    obtemp1.Cantidad = intobj.Cantidad;
                    obtemp1.Frecuencia = intobj.Frecuencia;
                    obtemp1.DiasTratamiento = intobj.DiasTratamiento;
                    obtemp1.TipoMedicamento = intobj.TipoMedicamento;
                    /////ADD 25/09
                    obtemp1.Estado = intobj.Estado;
                    obtemp1.CodigoComponente = intobj.CodigoComponente;
                    obtemp1.Medicamento = intobj.CodigoComponente;//ADD
                    obtemp1.Comentario = intobj.Comentario;//ADD
                    // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                    ////
                    Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                    /////ADD 22/11/16 OES
                    obtemp1.GrupoMedicamento = intobj.GrupoMedicamento;

                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }

                    ////
                    obtemp1.Periodo = intobj.Periodo;
                    cadArrays = intobj.UsuarioAuditoria.Trim().Split(':');

                    //obtemp.Descripcion = intobj.UsuarioAuditoria;
                    obtemp1.Descripcion = intobj.Version;//"Medicamento: " + cadArray[3] + " Dosis: " + cadArrays[1].Replace("U.Medida", "") + cadArrays[2] + ":" + cadArrays[3].Replace("Und.Tiempo", "") + cadArrays[4].Replace("Periodo", "");
                    obtemp1.UsuarioAuditoria = intobj.UsuarioAuditoria;//"Medicamento: " + cadArray[3] + " " + cadArrays[0] + ":" + cadArrays[1] + ":" + cadArrays[2].Replace("Frecuencia", "");
                    obtemp1.UnidadTiempo = intobj.UnidadTiempo;
                    obtemp1.TipoComida = intobj.TipoComida;

                    obtemp1.FechaCreacion = intobj.FechaCreacion;
                    ///

                    obtemp1.FechaModificacion = intobj.FechaModificacion;
                    obtemp1.Hora = intobj.Hora;
                    obtemp1.TipoReceta = intobj.TipoReceta;
                    obtemp1.IndicadorEPS = intobj.IndicadorEPS;
                    obtemp1.SecuencialHCE = intobj.SecuencialHCE;
                    if (intobj.Accion == "NUEVO")
                    {
                        obtemp1.Accion = "UPDATE";
                    }
                    else
                    {
                        obtemp1.Accion = intobj.Accion;
                    }



                    objLista.Add(obtemp1);

                }
                return this.Store(objLista.ToList());

            }
            else
            {
                objEnt.Accion = "LISTARK0";
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                if (objListaAnt.Count > 0)
                {
                    //INTEROPERABILIDAD
                    DataTable dtValida2 = new DataTable();
                    String PARAM2 = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                    List<EpisodioAtencion> listaDatito2 = new List<EpisodioAtencion>();
                    HceService.SoaServiceSoapClient ObtenerTramaOA2 = new HceService.SoaServiceSoapClient();
                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio2 = new HceService.SS_HC_WS_EpisodioAtencion();
                    if (PARAM2 == "S")
                    {
                        WsEpisodio2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodio2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodio2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodio2.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodio2.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodio2.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodio2.Accion = "DISPE2";
                        WsEpisodio2.FechaCreacion = DateTime.Now;
                        WsEpisodio2.UsuarioCreacion = "DISPE2";
                        WsEpisodio2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    }
                    else
                    {
                        dtValida2.Columns.Add("CustLName", typeof(String));
                        dtValida2.Columns.Add("CustFName", typeof(String));
                        dtValida2.Columns.Add("Purchases", typeof(String));
                        dtValida2.Columns.Add("CustLName2", typeof(String));
                        dtValida2.Columns.Add("CustFName2", typeof(String));
                        dtValida2.Columns.Add("Purchases2", typeof(String));
                    }

                    dtValida2 = ObtenerTramaOA2.SoaValidaFacturacion(1, WsEpisodio2);

                    string JSONString = JsonConvert.SerializeObject(dtValida2);
                    listaDatito2 = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONString, typeof(List<EpisodioAtencion>));


                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        ////
                        obtemp.Periodo = intobj.Periodo;
                        cadArrays = intobj.UsuarioAuditoria.Trim().Split(':');
                        //obtemp.Descripcion = intobj.UsuarioAuditoria;
                        obtemp.Descripcion = "Medicamento: " + cadArray[3] + " Dosis: " + cadArrays[1].Replace("U.Medida", "") + cadArrays[2] + ":" + cadArrays[3].Replace("Und.Tiempo", "") + cadArrays[4].Replace("Periodo", "");
                        obtemp.UsuarioAuditoria = "Medicamento: " + cadArray[3] + " " + cadArrays[0] + ":" + cadArrays[1] + ":" + cadArrays[2].Replace("Frecuencia", "");
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        obtemp.FechaModificacion = null;
                        obtemp.FechaCreacion = DateTime.Now;
                        obtemp.Hora = null;
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";
                        obtemp.SecuencialHCE = intobj.SecuencialHCE;
                        if (listaDatito2.Count > 0)
                        {
                            List<EpisodioAtencion> resultado = new List<EpisodioAtencion>();
                            resultado = listaDatito2.Where(x => x.SecuenciaHCE == obtemp.SecuencialHCE && x.IndicadorProcedimiento > 0).ToList();
                            if (resultado.Count > 0)
                            {
                                objLista.Add(obtemp);
                            }

                        }
                    }
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<BE_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                   UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;
                        //objLista.AddRange(ListarCopy);
                        //Session["HC_MedicamentoList"] = objLista;

                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));

                        objLista.AddRange(ListarCopy);

                        Session["HC_MedicamentoList"] = objLista;


                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
                {
                    objLista2 = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETEINDIV" && result.GrupoMedicamento == grupo && result.TipoMedicamento == tipo /*result.Linea.Trim() == linea*/)
                        {
                            result.Accion = "NUEVO";
                            objListaShow2.Add(result);
                        }
                    }


                    return this.Store(objListaShow2.ToList());
                }
            }


            ///////////////////////////////////////////////////////////////////////////////////////////

            return this.Store(objLista.ToList());

        }

        public System.Web.Mvc.ActionResult CCEPF403_1_MEDICAMENTO_KARDEX(string VALOR, string tipoRecurso, int grupo, int tipo)
        {
            Log.Information("HClinicaController - CCEPF403_1_MEDICAMENTO_KARDEX - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objLista2 = new List<BE_Medicamento_FE>();
            var objListaShow2 = new List<BE_Medicamento_FE>();
            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = 0;
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAnt9 = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
            /*objEnt.GrupoMedicamento = grupo;*/
            objEnt.Accion = "LISTARK";
            objListaAnt9 = SvcMedicamentoFE.MedicamentoListar(objEnt);

            String[] cadArray;
            String[] cadArrays;
            String cad;
            if (objListaAnt9.Count > 0)
            {

                SS_HC_Medicamento_FE objEntTemporal = new SS_HC_Medicamento_FE();
                objEntTemporal.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objEntTemporal.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEntTemporal.CodigoComponente = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                objEntTemporal.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                objEntTemporal.Accion = "LISTARKMED";
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEntTemporal);
                if (objListaAnt.Count != objListaAnt9.Count)
                {
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        List<SS_HC_Medicamento_FE> lstKardex = objListaAnt9.Where(x => x.UsuarioCreacion == intobj.SecuencialHCE).ToList();

                        if (lstKardex.Count > 0)
                            continue;

                        intobj.Accion = "NUEVOTEMPORAL";
                        objListaAnt9.Add(intobj);
                    }
                }

                BE_Medicamento_FE obtemp1;
                foreach (SS_HC_Medicamento_FE intobj in objListaAnt9)
                {
                    obtemp1 = new BE_Medicamento_FE();
                    obtemp1.Linea = intobj.Linea;
                    obtemp1.Familia = intobj.Familia;
                    obtemp1.SubFamilia = intobj.SubFamilia;
                    /**/
                    //cadArray = intobj.Version.Trim().Split('|');
                    //obtemp1.LineaDescripcion = cadArray[0];
                    //obtemp1.FamiliaDescripcion = cadArray[1];
                    //obtemp1.SubFamiliaDescripcion = cadArray[2];
                    //obtemp1.MedicamentoDescripcion = cadArray[3];


                    /***/
                    //obtemp.SubFamiliaDescripcion = intobj.Version;

                    obtemp1.Secuencia = intobj.Secuencia;
                    obtemp1.IdUnidadMedida = intobj.IdUnidadMedida;
                    obtemp1.Dosis = intobj.Dosis;///////////// Editado
                    obtemp1.IdVia = intobj.IdVia;
                    obtemp1.Cantidad = intobj.Cantidad;
                    obtemp1.Frecuencia = intobj.Frecuencia;
                    obtemp1.DiasTratamiento = intobj.DiasTratamiento;
                    obtemp1.TipoMedicamento = intobj.TipoMedicamento;
                    /////ADD 25/09
                    obtemp1.Estado = intobj.Estado;
                    obtemp1.CodigoComponente = intobj.CodigoComponente;
                    obtemp1.Medicamento = intobj.CodigoComponente;//ADD
                    obtemp1.Comentario = intobj.Comentario;//ADD
                    // obtemp.TipoMedicamento = intobj.TipoMedicamento;
                    ////
                    Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                    /////ADD 22/11/16 OES
                    obtemp1.GrupoMedicamento = intobj.GrupoMedicamento;

                    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                    {
                        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                    }
                    ////
                    obtemp1.Periodo = intobj.Periodo;
                    cadArrays = intobj.UsuarioAuditoria.Trim().Split(':');
                    //obtemp.Descripcion = intobj.UsuarioAuditoria;
                    obtemp1.Descripcion = intobj.Version;//"Medicamento: " + cadArray[3] + " Dosis: " + cadArrays[1].Replace("U.Medida", "") + cadArrays[2] + ":" + cadArrays[3].Replace("Und.Tiempo", "") + cadArrays[4].Replace("Periodo", "");
                    obtemp1.UsuarioAuditoria = intobj.UsuarioAuditoria;//"Medicamento: " + cadArray[3] + " " + cadArrays[0] + ":" + cadArrays[1] + ":" + cadArrays[2].Replace("Frecuencia", "");
                    obtemp1.UnidadTiempo = intobj.UnidadTiempo;
                    obtemp1.TipoComida = intobj.TipoComida;

                    obtemp1.FechaCreacion = intobj.FechaCreacion;
                    ///

                    obtemp1.FechaModificacion = intobj.FechaModificacion;
                    obtemp1.Hora = intobj.Hora;
                    obtemp1.TipoReceta = intobj.TipoReceta;
                    obtemp1.IndicadorEPS = intobj.IndicadorEPS;
                    obtemp1.UsuarioCreacion = intobj.SecuencialHCE;
                    if (intobj.Accion == "NUEVO")
                    {
                        obtemp1.Accion = "UPDATE";
                    }
                    else if (intobj.Accion == "NUEVOTEMPORAL")
                    {
                        obtemp1.Accion = "NUEVO";
                    }
                    else
                    {
                        obtemp1.Accion = intobj.Accion;
                    }
                    obtemp1.HoraInicio = intobj.Hora;
                    obtemp1.HoraAdministracion = intobj.FechaModificacion;
                    objLista.Add(obtemp1);
                }
                return this.Store(objLista.ToList());
            }
            else
            {

                SS_HC_Medicamento_FE objEnt1 = new SS_HC_Medicamento_FE();
                objEnt1.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objEnt1.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt1.CodigoComponente = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                // objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                // objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt1.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para micronutrientes
                objEnt1.Accion = "LISTARKMED";


                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt1);
                if (objListaAnt.Count > 0)
                {
                    //INTEROPERABILIDAD
                    DataTable dtValida2 = new DataTable();
                    String PARAM2 = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                    List<EpisodioAtencion> listaDatito2 = new List<EpisodioAtencion>();
                    HceService.SoaServiceSoapClient ObtenerTramaOA2 = new HceService.SoaServiceSoapClient();
                    HceService.SS_HC_WS_EpisodioAtencion WsEpisodio2 = new HceService.SS_HC_WS_EpisodioAtencion();
                    if (PARAM2 == "S")
                    {
                        WsEpisodio2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodio2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodio2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodio2.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodio2.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodio2.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodio2.Accion = "DISPE2";
                        WsEpisodio2.FechaCreacion = DateTime.Now;
                        WsEpisodio2.UsuarioCreacion = "DISPE2";
                        WsEpisodio2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    }
                    else
                    {
                        dtValida2.Columns.Add("CustLName", typeof(String));
                        dtValida2.Columns.Add("CustFName", typeof(String));
                        dtValida2.Columns.Add("Purchases", typeof(String));
                        dtValida2.Columns.Add("CustLName2", typeof(String));
                        dtValida2.Columns.Add("CustFName2", typeof(String));
                        dtValida2.Columns.Add("Purchases2", typeof(String));
                    }

                    dtValida2 = ObtenerTramaOA2.SoaValidaFacturacion(1, WsEpisodio2);

                    string JSONString = JsonConvert.SerializeObject(dtValida2);
                    listaDatito2 = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONString, typeof(List<EpisodioAtencion>));


                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        /**/
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;///////////// Editado
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;//ADD
                        obtemp.Comentario = intobj.Comentario;//ADD
                        Session["NombreMedicoMed"] = intobj.UsuarioCreacion;
                        /////ADD 22/11/16 OES
                        obtemp.GrupoMedicamento = intobj.GrupoMedicamento;
                        if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                        {
                            ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                        }
                        ////
                        obtemp.Periodo = intobj.Periodo;
                        cadArrays = intobj.UsuarioAuditoria.Trim().Split(':');
                        //obtemp.Descripcion = intobj.UsuarioAuditoria;
                        obtemp.Descripcion = "Medicamento: " + cadArray[3] + " Dosis: " + cadArrays[1].Replace("U.Medida", "") + cadArrays[2] + ":" + cadArrays[3].Replace("Und.Tiempo", "") + cadArrays[4].Replace("Periodo", "");
                        obtemp.UsuarioAuditoria = "Medicamento: " + cadArray[3] + " " + cadArrays[0] + ":" + cadArrays[1] + ":" + cadArrays[2].Replace("Frecuencia", "");
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.TipoComida = intobj.TipoComida;
                        obtemp.Indicacion = intobj.Indicacion;
                        obtemp.FechaModificacion = null;
                        obtemp.FechaCreacion = DateTime.Now;
                        obtemp.Hora = null;
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        //obtemp.Accion = "UPDATEINDIV";
                        obtemp.Accion = "NUEVO";
                        obtemp.SecuencialHCE = intobj.SecuencialHCE;
                        objLista.Add(obtemp);

                        //if (listaDatito2.Count > 0)
                        //{
                        //    List<EpisodioAtencion> resultado = new List<EpisodioAtencion>();
                        //    resultado = listaDatito2.Where(x => x.SecuenciaHCE == obtemp.SecuencialHCE && x.IndicadorProcedimiento > 0).ToList();
                        //    if (resultado.Count > 0)
                        //    {
                        //        objLista.Add(obtemp);
                        //    }

                        //}
                    }

                }

            }
            return this.Store(objLista.ToList());

        }




        #region Kardex_1

        public System.Web.Mvc.ActionResult CCEPF403_1_View()
        {
            Log.Information("HClinicaController - CCEPF403_1_View - Entrar");
            Session["SEC_TOP_150"] = 0;

            try
            {
                /////
                var LocalEnty = new SS_HC_Kardex1_FE();
                var Listar = new List<SS_HC_Kardex1_FE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                Listar = SvcMedicamentoKardex.ListarKardex1(LocalEnty).ToList();
                bool hallado = false;
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Kardex1_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_KARDEX_ACCION = "S";
                        }
                    }
                }
                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                        LocalEnty.Accion = "NUEVO";
                        var varNombre = ENTITY_GLOBAL.Instance.MedicoNombre;
                        var tfNom = X.GetCmp<TextField>("tfNomMed");
                        if (varNombre != null && varNombre != "")
                        {
                            tfNom.SetValue(varNombre);
                        }

                        var varIdMed = ENTITY_GLOBAL.Instance.IdMedico;
                        var tfIdMed = X.GetCmp<NumberField>("IdPersonalSalud");
                        if (varIdMed != null && varNombre != "")
                        {
                            tfIdMed.SetValue(varIdMed);
                        }
                    }
                }


                var detalle = new VW_ATENCIONPACIENTE();
                detalle.Accion = "LISTDETPACIENTE";
                detalle.IdPaciente = ENTITY_GLOBAL.Instance.PacienteID;
                detalle.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                detalle.NombreCompleto = ENTITY_GLOBAL.Instance.NombreCompletoPaciente;
                detalle.IdEpisodioAtencion = 1;
                var ObjLista = SvcVw_AtencionPaciente.listarVwAtencionPaciente(detalle, 0, 10);

                //var objModel = new VW_ATENCIONPACIENTE();
                //List<VW_ATENCIONPACIENTE> lista = new List<VW_ATENCIONPACIENTE>();
                //objModel.Accion = "LISTARFLAT";
                //objModel.IdPersonalSalud = ENTITY_GLOBAL.Instance.Enfpersonalsalud;
                //objModel.CodigoOA = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                //var ObjLista = SvcVw_AtencionPaciente.listarVwAtencionPaciente(objModel, 0, 0);

                if (ObjLista.Count > 0)
                {
                    //LocalEnty.Religion = ObjLista[0].Religion;
                    LocalEnty.NombreMedico = ObjLista[0].NombreEmergencia;
                    LocalEnty.IdMedico = Convert.ToInt32(ObjLista[0].IdPersonalSalud);
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                //Int32 IdCodigo = int.Parse(Request.QueryString["idCodigo"]);
                return View("FormulariosExtras/CCEPF403_1_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }






            //return View();

        }


        public System.Web.Mvc.ActionResult CCEP0403_1_InsertarMedicacion_Kardex(String Array1, String Array0, String tipo)
        {
            Log.Information("HClinicaController - CCEP0403_1_InsertarMedicacion_Kardex - Entrar");

            List<SS_HC_Kardex1_FE> ObjLista0 = new List<SS_HC_Kardex1_FE>();
            ObjLista0 = (List<SS_HC_Kardex1_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(Array1, typeof(List<SS_HC_Kardex1_FE>));

            SS_HC_Medicamento_Kardex_FE ObjAux = new SS_HC_Medicamento_Kardex_FE();
            List<SS_HC_Medicamento_Kardex_FE> ObjLista1 = new List<SS_HC_Medicamento_Kardex_FE>();
            List<SS_HC_Medicamento_Kardex_FE> ObjLista2 = new List<SS_HC_Medicamento_Kardex_FE>();
            List<SS_HC_Kardex1_FE> ObjLista3 = new List<SS_HC_Kardex1_FE>();
            ObjLista1 = (List<SS_HC_Medicamento_Kardex_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(Array0, typeof(List<SS_HC_Medicamento_Kardex_FE>));
            //var txtAdministrado = X.GetCmp<TextField>("Administrado");

            int retorno;
            string mensage;

            if (ObjLista0.Count > 0)
            {
                try
                {
                    foreach (SS_HC_Kardex1_FE obj in ObjLista0)
                    {


                        obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        obj.FechaModificacion = DateTime.Now;
                        obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        obj.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        obj.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        ObjLista3.Add(obj);
                    }



                    if (ObjLista1.Count > 0)
                    {
                        foreach (SS_HC_Medicamento_Kardex_FE obj in ObjLista1)
                        {


                            obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            obj.FechaModificacion = DateTime.Now;
                            obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            obj.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            obj.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            ObjLista2.Add(obj);
                        }
                        retorno = SvcMedicamentoKardex.setMantenimientoMedicamento(ObjLista3, ObjLista2);


                        if (retorno > 0)
                        {
                            foreach (SS_HC_Medicamento_Kardex_FE lstMed in ObjLista2)
                            {
                                if (lstMed.Accion == "NUEVO")
                                {
                                    int idResultado = 0;
                                    SS_HC_EpisodioClinico objEpClinico = new SS_HC_EpisodioClinico();
                                    objEpClinico.UsuarioModificacion = lstMed.SecuencialHCE;
                                    objEpClinico.ACCION = "KARDEX";
                                    idResultado = SvcEpisodioClinico.setMantenimiento(objEpClinico);
                                }
                            }

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_KARDEX_ACCION = "S";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            // Session["ValoresTemporal"] = null;
                            Session.Remove("ValoresTemporal");
                            // Session["Data_ExamenSolicitadoDelete"] = null;

                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;
                            Session.Remove("Data_ExamenSolicitadoDelete");
                            Session.Remove("COPIA_FORMULARIO");
                            Session.Remove("DATA_COPIA_FORM");
                            ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                            // Session["Valores_CCEPF150"] = null;
                            Session.Remove("Valores_CCEPF150");
                            eventoLoadPostFormulario(true, "storeExamenes", null);
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }

                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }

            }

            return this.Direct();
        }





        public System.Web.Mvc.ActionResult CCEP0403_3_InsertarProgramacion_Kardex(String Array0, String tipo)
        {
            Log.Information("HClinicaController - CCEP0403_3_InsertarProgramacion_Kardex - Entrar");
            SS_HC_Medicamento_Kardex ObjAux = new SS_HC_Medicamento_Kardex();
            List<SS_HC_Medicamento_Kardex> ObjLista1 = new List<SS_HC_Medicamento_Kardex>();
            List<SS_HC_Medicamento_Kardex> ObjLista2 = new List<SS_HC_Medicamento_Kardex>();
            ObjLista1 = (List<SS_HC_Medicamento_Kardex>)Newtonsoft.Json.JsonConvert.DeserializeObject(Array0, typeof(List<SS_HC_Medicamento_Kardex>));

            string mensage;
            int hora;
            int cantidad;
            int retorno;
            try
            {
                foreach (SS_HC_Medicamento_Kardex obj in ObjLista1)
                {


                    obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    obj.FechaModificacion = DateTime.Now;
                    if (obj.Accion == "NUEVO" || obj.Accion == "UPDATE")
                    {
                        cantidad = Convert.ToInt32(obj.Hora0);
                        obj.Hora0 = 2;
                        obj.Estado = 0;
                        hora = Convert.ToDateTime(obj.HoraInicio).Hour;
                        ObjAux = CalcularHoras(obj, hora, cantidad, Convert.ToInt32(obj.Frecuencia));
                        ObjLista2.Add(ObjAux);
                    }
                    else
                    {
                        ObjLista2.Add(obj);
                    }

                }

                retorno = SvcMedicamentoKardex.setMantenimiento(ObjLista2);

                if (retorno > 0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                    else mensage = " actualizó ";
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                    String mensajes = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                        UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                        ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                        ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    // Session["ValoresTemporal"] = null;
                    Session.Remove("ValoresTemporal");
                    // Session["Data_ExamenSolicitadoDelete"] = null;

                    Session["COPIA_FORMULARIO"] = null;
                    Session["DATA_COPIA_FORM"] = null;
                    Session.Remove("Data_ExamenSolicitadoDelete");
                    Session.Remove("COPIA_FORMULARIO");
                    Session.Remove("DATA_COPIA_FORM");
                    ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                    // Session["Valores_CCEPF150"] = null;
                    Session.Remove("Valores_CCEPF150");
                    eventoLoadPostFormulario(true, "storeExamenes", null);
                    eventoPostFormulario(true, "");
                    if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                    {
                        string containertemp = (string)Session["containerIdTemp"];
                        string txttemp = (string)Session["textTemp"];

                        LoadFormatos(containertemp, txttemp);
                        return showMensajeNotify("Mensaje", mensajes, "INFO");
                    }
                    else
                    {
                        return showMensajeNotify("Mensaje", mensajes, "INFO");
                    }
                }
                else
                {
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:" + ex.Message;
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                eventoPostFormulario(false, "");
                return showMensajeNotify("Error", mostrarExc, "ERROR");
                throw;
            }

            return this.Direct();


        }


        public System.Web.Mvc.ActionResult CCEP0403_1_InsertarProgramacion_Kardex(String Array0, String tipo)
        {
            Log.Information("HClinicaController - CCEP0403_1_InsertarProgramacion_Kardex - Entrar");
            SS_HC_Medicamento_Kardex ObjAux = new SS_HC_Medicamento_Kardex();
            SS_HC_Medicamento_Kardex ObjAux2 = new SS_HC_Medicamento_Kardex();
            List<SS_HC_Medicamento_Kardex> ObjLista1 = new List<SS_HC_Medicamento_Kardex>();
            List<SS_HC_Medicamento_Kardex> ObjLista2 = new List<SS_HC_Medicamento_Kardex>();
            List<SS_HC_Medicamento_Kardex> ObjListaELIMINAR = new List<SS_HC_Medicamento_Kardex>();
            ObjLista1 = (List<SS_HC_Medicamento_Kardex>)Newtonsoft.Json.JsonConvert.DeserializeObject(Array0, typeof(List<SS_HC_Medicamento_Kardex>));

            string mensage;
            int hora;
            int cantidad;
            int retorno;

            int retornoeliminadoPro;
            try
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                {
                    int retornoK;
                    List<SS_HC_Kardex1_FE> ObjLista3K = new List<SS_HC_Kardex1_FE>();
                    List<SS_HC_Medicamento_Kardex_FE> ObjListaNull = new List<SS_HC_Medicamento_Kardex_FE>();

                    SS_HC_Kardex1_FE objk = new SS_HC_Kardex1_FE();
                    objk.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objk.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objk.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objk.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objk.FechaModificacion = DateTime.Now;
                    objk.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objk.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objk.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    ObjLista3K.Add(objk);
                    retornoK = SvcMedicamentoKardex.setMantenimientoMedicamento(ObjLista3K, ObjListaNull);
                }
                foreach (SS_HC_Medicamento_Kardex obj in ObjLista1)
                {
                    obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    obj.FechaModificacion = DateTime.Now;
                    obj.UsuarioCreacion = obj.UsuarioCreacion;

                    //  if (obj.Accion == "NUEVO" || obj.Accion == "UPDATE")
                    //  {
                    cantidad = Convert.ToInt32(obj.Hora0);
                    obj.Hora0 = 2;
                    obj.Estado = 0;
                    hora = Convert.ToDateTime(obj.HoraInicio).Hour;
                    obj.Accion = "NUEVO";
                    ObjAux = CalcularHoras(obj, hora, cantidad, Convert.ToInt32(obj.Frecuencia));
                    ObjLista2.Add(ObjAux);

                    //  }
                    //   else { 
                    //     ObjLista2.Add(obj);
                    //  }

                }
                //elimino los medicamentos programados e inserto


                ObjAux2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ObjAux2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                ObjAux2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                ObjAux2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                ObjAux2.Accion = "DELETEKARDEX";

                retornoeliminadoPro = SvcMedicamentoKardex.setEliminarMedicamentoKardekProgramdos(ObjAux2);

                retorno = SvcMedicamentoKardex.setMantenimiento(ObjLista2);
                //insertar la gridlla de medicamentos

                List<SS_HC_Kardex1_FE> ObjLista3 = new List<SS_HC_Kardex1_FE>();
                List<SS_HC_Medicamento_Kardex_FE> ObjListaMediFE = new List<SS_HC_Medicamento_Kardex_FE>();
                List<SS_HC_Medicamento_Kardex_FE> ObjListaMecamenFE = new List<SS_HC_Medicamento_Kardex_FE>();

                ObjListaMediFE = (List<SS_HC_Medicamento_Kardex_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(Array0, typeof(List<SS_HC_Medicamento_Kardex_FE>));

                if (ObjListaMediFE.Count > 0)
                {
                    foreach (SS_HC_Medicamento_Kardex_FE obj in ObjListaMediFE)
                    {
                        obj.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        obj.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        obj.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        obj.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        obj.FechaModificacion = DateTime.Now;
                        obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        obj.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        obj.Cantidad = obj.Hora0;
                        obj.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        ObjListaMecamenFE.Add(obj);
                    }
                }
                // int val=  SvcMedicamentoKardex.setMantenimientoMedicamento(ObjLista3, ObjListaMecamenFE);
                int val2 = SvcMedicamentoKardex.setMantMedicamentoSinCabezeraFE(ObjListaMecamenFE);

                if (retorno > 0)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                    else mensage = " realizó ";
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                    String mensajes = "Se " + mensage + "la programación correctamente.";

                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    // Session["ValoresTemporal"] = null;
                    Session.Remove("ValoresTemporal");
                    // Session["Data_ExamenSolicitadoDelete"] = null;

                    Session["COPIA_FORMULARIO"] = null;
                    Session["DATA_COPIA_FORM"] = null;
                    Session.Remove("Data_ExamenSolicitadoDelete");
                    Session.Remove("COPIA_FORMULARIO");
                    Session.Remove("DATA_COPIA_FORM");
                    ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                    // Session["Valores_CCEPF150"] = null;
                    Session.Remove("Valores_CCEPF150");
                    eventoLoadPostFormulario(true, "storeExamenes", null);
                    eventoPostFormulario(true, "");
                    if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                    {
                        string containertemp = (string)Session["containerIdTemp"];
                        string txttemp = (string)Session["textTemp"];

                        LoadFormatos(containertemp, txttemp);
                        return showMensajeNotify("Mensaje", mensajes, "INFO");
                    }
                    else
                    {
                        return showMensajeNotify("Mensaje", mensajes, "INFO");
                    }
                }
                else
                {
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:" + ex.Message;
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                eventoPostFormulario(false, "");
                return showMensajeNotify("Error", mostrarExc, "ERROR");
                throw;
            }

            return this.Direct();
        }

        public SS_HC_Medicamento_Kardex CalcularHoras(SS_HC_Medicamento_Kardex ObjKardex, int hour, int cantidad, int salto)
        {
            int[] horas = new int[cantidad];
            int cant;
            int num = 0;

            cant = (24 - hour) / cantidad;


            for (int i = 0; i < cantidad; i++)
            {
                if (hour >= 0 && hour <= 23)
                {
                    switch (hour)
                    {
                        case 0:
                            ObjKardex.Hora0 = 0;
                            break;
                        case 1:
                            ObjKardex.Hora1 = 0;
                            break;
                        case 2:
                            ObjKardex.Hora2 = 0;
                            break;
                        case 3:
                            ObjKardex.Hora3 = 0;
                            break;
                        case 4:
                            ObjKardex.Hora4 = 0;
                            break;
                        case 5:
                            ObjKardex.Hora5 = 0;
                            break;
                        case 6:
                            ObjKardex.Hora6 = 0;
                            break;
                        case 7:
                            ObjKardex.Hora7 = 0;
                            break;
                        case 8:
                            ObjKardex.Hora8 = 0;
                            break;
                        case 9:
                            ObjKardex.Hora9 = 0;
                            break;
                        case 10:
                            ObjKardex.Hora10 = 0;
                            break;
                        case 11:
                            ObjKardex.Hora11 = 0;
                            break;
                        case 12:
                            ObjKardex.Hora12 = 0;
                            break;
                        case 13:
                            ObjKardex.Hora13 = 0;
                            break;
                        case 14:
                            ObjKardex.Hora14 = 0;
                            break;
                        case 15:
                            ObjKardex.Hora15 = 0;
                            break;
                        case 16:
                            ObjKardex.Hora16 = 0;
                            break;
                        case 17:
                            ObjKardex.Hora17 = 0;
                            break;
                        case 18:
                            ObjKardex.Hora18 = 0;
                            break;
                        case 19:
                            ObjKardex.Hora19 = 0;
                            break;
                        case 20:
                            ObjKardex.Hora20 = 0;
                            break;
                        case 21:
                            ObjKardex.Hora21 = 0;
                            break;
                        case 22:
                            ObjKardex.Hora22 = 0;
                            break;
                        case 23:
                            ObjKardex.Hora23 = 0;
                            break;
                        default:
                            break;

                    }

                }
                horas[num] = hour;
                hour = hour + salto;
                num = num + 1;
            }



            return ObjKardex;
        }

        #endregion


        #region CCEPF323_1_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF323_1_View()
        {
            Log.Information("HClinicaController - CCEPF323_1_View - Entrar");
            try
            {
                var LocalEnty = new SS_HC_FichaAnestesia_1_FE();
                var Listar = new List<SS_HC_FichaAnestesia_1_FE>();
                LocalEnty.Accion = "LISTAR";
                Session["SEC_TOP_327"] = 0;
                Session["SEC_TOP_150"] = 0;

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;


                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;
                Listar = SvnAnestesia_1_Service.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {


                    var field = X.GetCmp<TextField>("tfNomMed");
                    var tfNum = X.GetCmp<TextField>("tfNroMed");


                    var fieldAneste = X.GetCmp<TextField>("tfNomMedAnaste");
                    var tfNumAneste = X.GetCmp<TextField>("tfNroMedAnaste");


                    var fieldAyudante = X.GetCmp<TextField>("tfNomMedAyudante");
                    var tfNumAyudante = X.GetCmp<TextField>("tfNroMedAyudante");


                    var fieldInstrumentista = X.GetCmp<TextField>("tfNomMedInstrumentista");
                    var tfNumInstrumentista = X.GetCmp<TextField>("tfNroMedInstrumentista");

                    var fieldCirculantes = X.GetCmp<TextField>("tfNomMedCirculantes");
                    var tfNumCirculantes = X.GetCmp<TextField>("tfNroMedCirculantes");


                    var fieldNeonatologo = X.GetCmp<TextField>("tfNomMedNeonatologo");
                    var tfNumNeonatologo = X.GetCmp<TextField>("tfNroMedNeonatologo");


                    var fieldCardiologo = X.GetCmp<TextField>("tfNomMedCardiologo");
                    var tfNumCardiologo = X.GetCmp<TextField>("tfNroMedCardiologo");






                    hallado = true;
                    int contador = 0;
                    LocalEnty.Accion = "UPDATE";
                    foreach (SS_HC_FichaAnestesia_1_FE objEntity in Listar)
                    {
                        VW_SS_GE_ESPECIALIDADMEDICO objFiltro = new VW_SS_GE_ESPECIALIDADMEDICO();
                        objFiltro.ACCION = "LISTARPAG";
                        var ListarMedico = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                        LocalEnty = objEntity;

                        if (!string.IsNullOrEmpty(objEntity.IdMedico.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdMedico);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    field.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.Anestesiologo.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Anestesiologo);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldAneste.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumAneste.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.Ayudante.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Ayudante);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldAyudante.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumAyudante.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.EnfInstrumentista.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.EnfInstrumentista);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldInstrumentista.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumInstrumentista.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }


                        if (!string.IsNullOrEmpty(objEntity.EnfCirculante.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.EnfCirculante);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldCirculantes.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumCirculantes.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }




                        if (!string.IsNullOrEmpty(objEntity.Neonatologo.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Neonatologo);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldNeonatologo.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumNeonatologo.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }




                        if (!string.IsNullOrEmpty(objEntity.Cardiologo.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Cardiologo);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    fieldCardiologo.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNumCardiologo.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }




                    }





                    //foreach (SS_HC_FichaAnestesia_1_FE objEntity in Listar)
                    //{
                    //    LocalEnty = objEntity;
                    //}
                    //LocalEnty.Accion = "UPDATE";
                    //hallado = true;



                }

                LocalEnty.Version = "CCEPF323_1";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                Session["Session_Anestesia_Examenes1"] = null;
                Session["Session_Anestesia1_Diagnostico1"] = null;
                Session["Session_Anestesia_Examenes2"] = null;
                Session["Session_Anestesia_Examenes3"] = null;
                Session["Session_Anestesia1_DiagnosticoPost3"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF323_1_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF323_1_Save_anestesia(SS_HC_FichaAnestesia_1_FE objCabecerra, String selectionArrayCabezera,
           String selectionArray1, String selectionArray2, String selectionArray3, String selectionArray4, String selectionArray5, String text)
        {
            Log.Information("HClinicaController - CCEPF323_1_Save_anestesia - Entrar");

            List<MA_MiscelaneosDetalle> ObjListarExamen = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarUsoEquipos = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarMaterialEspec = new List<MA_MiscelaneosDetalle>();

            List<MA_MiscelaneosDetalle> ObjListarAnestesiaExam2 = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarCatalogo = new List<MA_MiscelaneosDetalle>();

            List<MA_MiscelaneosDetalle> ObjListarDiagPost3 = new List<MA_MiscelaneosDetalle>();
            List<MA_MiscelaneosDetalle> ObjListarCirugiProce = new List<MA_MiscelaneosDetalle>();

            List<MA_MiscelaneosDetalle> ObjListarAnestesiaExamen3 = new List<MA_MiscelaneosDetalle>();


            List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE> ObjDetalle = new List<SS_HC_OrdenInterQuiruDiagnosticoDetalle_FE>();
            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> ObjDetalle1 = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> ObjDetalle2 = new List<SS_HC_AnestesiaDiagnosticoDetalle_FE>();
            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> ObjDetalle3 = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> ObjDetalle4 = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> ObjDetalle5 = new List<SS_HC_AnestesiaDiagnosticoDetalle_FE>();

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    if (objCabecerra != null)
                    {
                        List<SS_HC_FichaAnestesia_1_FE> objCabezeraArray = new List<SS_HC_FichaAnestesia_1_FE>();
                        objCabezeraArray = (List<SS_HC_FichaAnestesia_1_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArrayCabezera, typeof(List<SS_HC_FichaAnestesia_1_FE>));
                        objCabecerra.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objCabecerra.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objCabecerra.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objCabecerra.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objCabecerra.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objCabecerra.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objCabecerra.Peso = objCabezeraArray[0].Peso;
                        objCabecerra.Talla = objCabezeraArray[0].Talla;
                        objCabecerra.Fecha = objCabezeraArray[0].Fecha;
                        objCabecerra.NSop = objCabezeraArray[0].NSop;
                        objCabecerra.Glucosa = objCabezeraArray[0].Glucosa;
                        objCabecerra.Hb = objCabezeraArray[0].Hb;
                        objCabecerra.PLAQ = objCabezeraArray[0].PLAQ;
                        objCabecerra.GrupoSanguineo = objCabezeraArray[0].GrupoSanguineo;
                        objCabecerra.VDRL = objCabezeraArray[0].VDRL;
                        objCabecerra.Hcto = objCabezeraArray[0].Hcto;
                        objCabecerra.PTPIT = objCabezeraArray[0].PTPIT;
                        objCabecerra.FactorRH = objCabezeraArray[0].FactorRH;
                        objCabecerra.PSA = objCabezeraArray[0].PSA;
                        objCabecerra.UreaCreat = objCabezeraArray[0].UreaCreat;
                        objCabecerra.INR = objCabezeraArray[0].INR;
                        objCabecerra.Ayuno = objCabezeraArray[0].Ayuno;
                        objCabecerra.EstomagoLleno = objCabezeraArray[0].EstomagoLleno;
                        objCabecerra.IdMedico = objCabezeraArray[0].IdMedico;
                        objCabecerra.Anestesiologo = objCabezeraArray[0].Anestesiologo;
                        objCabecerra.Ayudante = objCabezeraArray[0].Ayudante;
                        objCabecerra.EnfInstrumentista = objCabezeraArray[0].EnfInstrumentista;
                        objCabecerra.EnfCirculante = objCabezeraArray[0].EnfCirculante;
                        objCabecerra.Neonatologo = objCabezeraArray[0].Neonatologo;
                        objCabecerra.Cardiologo = objCabezeraArray[0].Cardiologo;
                        //objCabecerra.Estado = 2;

                        if (objCabecerra.Accion == "NUEVO")
                        {
                            //  objCabecerra.Estado = 2;
                            objCabecerra.FechaCreacion = DateTime.Now;
                            objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        objCabecerra.FechaCreacion = DateTime.Now;
                        objCabecerra.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                        objCabecerra.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objCabecerra.FechaModificacion = DateTime.Now;
                        string mensage = "";
                        registro = 1;
                        String cadenas = "";
                        String[] cadArray;

                        if (registro > 0)
                        {


                            // Bloque UPDATE Y INSERT 1 EXAMENES


                            //BLOQUE DELETE 1
                            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDeleteCiruPro = null;
                            if (Session["Session_Anestesia_Examenes1"] != null)
                            {
                                dataDeleteCiruPro = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes1"];
                            }
                            if (dataDeleteCiruPro != null)
                            {
                                foreach (var objDel in dataDeleteCiruPro)
                                {
                                    ObjDetalle1.Add(objDel);
                                }
                            }
                            // Bloque UPDATE Y INSERT 1

                            var objCirugiaProceDetalle = new SS_HC_AnestesiaExamenApoyoDetalle_FE();

                            ObjListarCirugiProce = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarCirugiProce)
                            {
                                objCirugiaProceDetalle = new SS_HC_AnestesiaExamenApoyoDetalle_FE();
                                objCirugiaProceDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objCirugiaProceDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objCirugiaProceDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objCirugiaProceDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objCirugiaProceDetalle.TipoExamen = 1;
                                cadArray = objEntity.ValorCodigo2.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objCirugiaProceDetalle.Codigo = cadenas;
                                objCirugiaProceDetalle.ExamenDescripcion = objEntity.ValorCodigo2.Trim();

                                objCirugiaProceDetalle.Especificaciones = objEntity.DescripcionExtranjera;
                                objCirugiaProceDetalle.Cantidad = Convert.ToInt32(objEntity.ValorEntero6);


                                objCirugiaProceDetalle.Accion = objEntity.ACCION;
                                objCirugiaProceDetalle.IndicadorEPS = objEntity.ValorEntero5;

                                if (objCirugiaProceDetalle.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objCirugiaProceDetalle.FechaCreacion = DateTime.Now;
                                    objCirugiaProceDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objCirugiaProceDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                    objCirugiaProceDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objCirugiaProceDetalle.FechaModificacion = DateTime.Now;
                                objCirugiaProceDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objCirugiaProceDetalle.Accion != "DETALLE")
                                {
                                    objCirugiaProceDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objCirugiaProceDetalle.Version = "CCEPF323_1";
                                ObjDetalle1.Add(objCirugiaProceDetalle);
                                // registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }




                            //BLOQUE DELETE 2
                            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> dataDeleteCatalogo = null;
                            if (Session["Session_Anestesia1_Diagnostico1"] != null)
                            {
                                dataDeleteCatalogo = (List<SS_HC_AnestesiaDiagnosticoDetalle_FE>)Session["Session_Anestesia1_Diagnostico1"];
                            }
                            if (dataDeleteCatalogo != null)
                            {
                                foreach (var objDel in dataDeleteCatalogo)
                                {
                                    ObjDetalle2.Add(objDel);
                                }
                            }


                            // Bloque UPDATE Y INSERT 2
                            var objDiagnosticoDetalle = new SS_HC_AnestesiaDiagnosticoDetalle_FE();
                            ObjListarCatalogo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarCatalogo)
                            {
                                objDiagnosticoDetalle = new SS_HC_AnestesiaDiagnosticoDetalle_FE();
                                objDiagnosticoDetalle.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objDiagnosticoDetalle.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objDiagnosticoDetalle.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objDiagnosticoDetalle.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objDiagnosticoDetalle.TipoDiag = 1;
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objDiagnosticoDetalle.Codigo = cadenas;
                                objDiagnosticoDetalle.DiagnosticoDescripcion = objEntity.ValorCodigo1.Trim();
                                objDiagnosticoDetalle.Estado = 2;
                                objDiagnosticoDetalle.DeterminacionDiagnostica = objEntity.ValorCodigo2.Trim();
                                objDiagnosticoDetalle.IdDiagnosticoPrincipal = Convert.ToInt32(objEntity.ValorCodigo3);
                                objDiagnosticoDetalle.GradoAfeccion = objEntity.ValorCodigo4;
                                objDiagnosticoDetalle.TiempoEmfer = objEntity.ValorCodigo6.Trim();
                                objDiagnosticoDetalle.Accion = objEntity.ACCION;
                                if (objDiagnosticoDetalle.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objDiagnosticoDetalle.FechaCreacion = DateTime.Now;
                                    objDiagnosticoDetalle.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objDiagnosticoDetalle.FechaCreacion = objCabecerra.FechaCreacion;
                                    objDiagnosticoDetalle.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objDiagnosticoDetalle.FechaModificacion = DateTime.Now;
                                objDiagnosticoDetalle.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objDiagnosticoDetalle.Accion != "DETALLE")
                                {
                                    objDiagnosticoDetalle.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objDiagnosticoDetalle.Version = "CCEPF323_1";
                                ObjDetalle2.Add(objDiagnosticoDetalle);
                                //registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }


                            //BLOQUE DELETE 3
                            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDeleteAnesteExam2 = null;
                            if (Session["Session_Anestesia_Examenes2"] != null)
                            {
                                dataDeleteAnesteExam2 = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes2"];
                            }
                            if (dataDeleteAnesteExam2 != null)
                            {
                                foreach (var objDel in dataDeleteAnesteExam2)
                                {
                                    ObjDetalle3.Add(objDel);
                                }
                            }

                            // Bloque UPDATE Y INSERT 3
                            var objAnestesiExamen2 = new SS_HC_AnestesiaExamenApoyoDetalle_FE();

                            ObjListarAnestesiaExam2 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarAnestesiaExam2)
                            {
                                objAnestesiExamen2 = new SS_HC_AnestesiaExamenApoyoDetalle_FE();
                                objAnestesiExamen2.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnestesiExamen2.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnestesiExamen2.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnestesiExamen2.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objAnestesiExamen2.TipoExamen = 2;
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnestesiExamen2.Codigo = cadenas;
                                objAnestesiExamen2.ExamenDescripcion = objEntity.ValorCodigo1.Trim();

                                //objAnestesiExamen2.Especificaciones = objEntity.DescripcionExtranjera;
                                //objAnestesiExamen2.Cantidad = Convert.ToInt32(objEntity.ValorEntero6);


                                objAnestesiExamen2.Accion = objEntity.ACCION;
                                objAnestesiExamen2.IndicadorEPS = objEntity.ValorEntero5;

                                if (objAnestesiExamen2.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objAnestesiExamen2.FechaCreacion = DateTime.Now;
                                    objAnestesiExamen2.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objAnestesiExamen2.FechaCreacion = objCabecerra.FechaCreacion;
                                    objAnestesiExamen2.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objAnestesiExamen2.FechaModificacion = DateTime.Now;
                                objAnestesiExamen2.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                                if (objAnestesiExamen2.Accion != "DETALLE")
                                {
                                    objAnestesiExamen2.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objAnestesiExamen2.Version = "CCEPF323_1";
                                ObjDetalle3.Add(objAnestesiExamen2);
                                // registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }




                            //BLOQUE DELETE 4
                            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDeleteAnesExamen3 = null;
                            if (Session["Session_Anestesia_Examenes3"] != null)
                            {
                                dataDeleteAnesExamen3 = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes3"];
                            }
                            if (dataDeleteAnesExamen3 != null)
                            {
                                foreach (var objDel in dataDeleteAnesExamen3)
                                {
                                    ObjDetalle4.Add(objDel);
                                }
                            }
                            // Bloque UPDATE Y INSERT 4

                            var objAnestesiaExam3 = new SS_HC_AnestesiaExamenApoyoDetalle_FE();


                            ObjListarAnestesiaExamen3 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray4, typeof(List<MA_MiscelaneosDetalle>));

                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarAnestesiaExamen3)
                            {
                                objAnestesiaExam3 = new SS_HC_AnestesiaExamenApoyoDetalle_FE();
                                objAnestesiaExam3.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objAnestesiaExam3.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objAnestesiaExam3.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objAnestesiaExam3.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                objAnestesiaExam3.TipoExamen = 3;
                                cadArray = objEntity.ValorCodigo2.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objAnestesiaExam3.Codigo = cadenas;
                                objAnestesiaExam3.ExamenDescripcion = objEntity.ValorCodigo2.Trim();

                                objAnestesiaExam3.Especificaciones = objEntity.DescripcionExtranjera;
                                objAnestesiaExam3.Cantidad = Convert.ToInt32(objEntity.ValorEntero6);


                                objAnestesiaExam3.Accion = objEntity.ACCION;
                                objAnestesiaExam3.IndicadorEPS = objEntity.ValorEntero5;

                                if (objAnestesiaExam3.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objAnestesiaExam3.FechaCreacion = DateTime.Now;
                                    objAnestesiaExam3.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objAnestesiaExam3.FechaCreacion = objCabecerra.FechaCreacion;
                                    objAnestesiaExam3.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objAnestesiaExam3.FechaModificacion = DateTime.Now;
                                objAnestesiaExam3.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objAnestesiaExam3.Accion != "DETALLE")
                                {
                                    objAnestesiaExam3.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objAnestesiaExam3.Version = "CCEPF323_1";
                                ObjDetalle4.Add(objAnestesiaExam3);
                                // registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }



                            //BLOQUE DELETE 5
                            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> dataDeleteDiagPost3 = null;
                            if (Session["Session_Anestesia1_DiagnosticoPost3"] != null)
                            {
                                dataDeleteDiagPost3 = (List<SS_HC_AnestesiaDiagnosticoDetalle_FE>)Session["Session_Anestesia1_DiagnosticoPost3"];
                            }
                            if (dataDeleteDiagPost3 != null)
                            {
                                foreach (var objDel in dataDeleteDiagPost3)
                                {
                                    ObjDetalle5.Add(objDel);
                                }
                            }


                            // Bloque UPDATE Y INSERT 5
                            var objDiagnosticoDetallePost3 = new SS_HC_AnestesiaDiagnosticoDetalle_FE();
                            ObjListarDiagPost3 = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray5, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarDiagPost3)
                            {
                                objDiagnosticoDetallePost3 = new SS_HC_AnestesiaDiagnosticoDetalle_FE();
                                objDiagnosticoDetallePost3.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                objDiagnosticoDetallePost3.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objDiagnosticoDetallePost3.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objDiagnosticoDetallePost3.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objDiagnosticoDetallePost3.TipoDiag = 3;
                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                objDiagnosticoDetallePost3.Codigo = cadenas;
                                objDiagnosticoDetallePost3.DiagnosticoDescripcion = objEntity.ValorCodigo1.Trim();
                                objDiagnosticoDetallePost3.Estado = 2;
                                objDiagnosticoDetallePost3.DeterminacionDiagnostica = objEntity.ValorCodigo2.Trim();
                                objDiagnosticoDetallePost3.IdDiagnosticoPrincipal = Convert.ToInt32(objEntity.ValorCodigo3);
                                objDiagnosticoDetallePost3.GradoAfeccion = objEntity.ValorCodigo4;
                                objDiagnosticoDetallePost3.TiempoEmfer = objEntity.ValorCodigo6.Trim();
                                objDiagnosticoDetallePost3.Accion = objEntity.ACCION;
                                if (objDiagnosticoDetallePost3.Accion == "DETALLE")
                                {
                                    //objCatalogoCirugiaDetalle.Estado = 2;
                                    objDiagnosticoDetallePost3.FechaCreacion = DateTime.Now;
                                    objDiagnosticoDetallePost3.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                else
                                {
                                    objDiagnosticoDetallePost3.FechaCreacion = objCabecerra.FechaCreacion;
                                    objDiagnosticoDetallePost3.UsuarioCreacion = objCabecerra.UsuarioCreacion;
                                }
                                objDiagnosticoDetallePost3.FechaModificacion = DateTime.Now;
                                objDiagnosticoDetallePost3.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                if (objDiagnosticoDetallePost3.Accion != "DETALLE")
                                {
                                    objDiagnosticoDetallePost3.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                }
                                objDiagnosticoDetallePost3.Version = "CCEPF323_1";
                                ObjDetalle5.Add(objDiagnosticoDetallePost3);
                                //registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }





                            registro = SvnAnestesia_1_Service.setMantenimiento(objCabecerra, ObjDetalle1, ObjDetalle2, ObjDetalle3, ObjDetalle4, ObjDetalle5);
                        }



                        if (registro > 0)
                        {
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //Session["ValoresTemporal1"] = null;
                            //Session["ValoresTemporal2"] = null;


                            Session["Session_Anestesia_Examenes1"] = null;
                            Session["Session_Anestesia1_Diagnostico1"] = null;
                            Session["Session_Anestesia_Examenes2"] = null;
                            Session["Session_Anestesia_Examenes3"] = null;
                            Session["Session_Anestesia1_DiagnosticoPost3"] = null;



                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);

                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    HClinicaController.GinecoLog(this, ex);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }
            }
            // }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF323_1_EXAMENES(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF323_1_EXAMENES - Entrar");

                var LocalEnty1 = new MA_MiscelaneosDetalle();
                var Listar1 = new List<MA_MiscelaneosDetalle>();

                LocalEnty1.ACCION = "EXAMENESLIST1_323_1";
                LocalEnty1.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty1.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty1.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty1.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty1.ValorCodigo5 = tipoCodigo;
                Listar1 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty1).ToList();


                if (Listar1.Count > 0)
                {

                    if (Listar1.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar1)
                        {

                            Listar1[x].ACCION = "UPDATEDETALLE";

                            if (Convert.ToInt32(Listar1[x].CodigoElemento) > (int)Session["SEC_TOP_150"])
                            {
                                Session["SEC_TOP_150"] = Convert.ToInt32(Listar1[x].CodigoElemento);
                            }
                            x = x + 1;
                        }
                    }


                    return this.Store(Listar1.ToList());


                }
                else
                {



                    DataTable dtValida = new DataTable();
                    String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);
                    if (PARAM == "S")
                    {
                        HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                        HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                        WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        WsEpisodio.FechaCreacion = DateTime.Now;
                        WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                    }
                    else
                    {
                        dtValida.Columns.Add("CustLName", typeof(String));
                        dtValida.Columns.Add("CustFName", typeof(String));
                        dtValida.Columns.Add("Purchases", typeof(String));
                        dtValida.Columns.Add("CustLName2", typeof(String));
                        dtValida.Columns.Add("CustFName2", typeof(String));
                        dtValida.Columns.Add("Purchases2", typeof(String));

                    }
                    ENTITY_GLOBAL.Instance.dataExamen = dtValida;

                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.ACCION = "EXAMENESLIST";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        LocalEnty.ValorCodigo5 = tipoCodigo;
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                    else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                    {
                        LocalEnty.ACCION = "EXAMENESLIST";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        LocalEnty.ValorCodigo5 = tipoCodigo;
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                        if (Listar.Count > 0)
                        {
                            int x = 0;
                            //  int top = 0; Session["SEC_TOP_150"] = 0;
                            foreach (var objEntity in Listar)
                            {

                                Listar[x].ACCION = "NUEVO";

                                if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_150"])
                                {
                                    Session["SEC_TOP_150"] = Convert.ToInt32(Listar[x].CodigoElemento);
                                }
                                x = x + 1;
                            }
                        }
                    }

                    return this.Store(Listar.ToList());
                }



            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }



        public System.Web.Mvc.ActionResult CCEPF323_1_GRID_DIAGNOSTICO1()
        {
            try
            {

                Log.Information("HClinicaController - CCEPF323_1_GRID_DIAGNOSTICO1 - Entrar");
                var LocalEnty0 = new MA_MiscelaneosDetalle();
                var Listar0 = new List<MA_MiscelaneosDetalle>();
                LocalEnty0.ACCION = "DIAGNOSTICO1FE_323_1";
                LocalEnty0.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty0.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty0.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty0.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar0 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty0).ToList();


                if (Listar0.Count > 0)
                {


                    if (Listar0.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar0)
                        {
                            Listar0[x].ACCION = "UPDATEDETALLE";

                            if (Convert.ToInt32(Listar0[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                            {
                                Session["SEC_TOP_327"] = Convert.ToInt32(Listar0[x].CodigoElemento);
                            }
                            x = x + 1;
                        }
                    }
                    return this.Store(Listar0.ToList());


                }
                else
                {

                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    LocalEnty.ACCION = "DIAGNOSTICOFE_327";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                    {
                        if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                        {
                            LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                            LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                            LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                        }
                    }

                    if (Listar.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar)
                        {
                            Listar[x].ACCION = "NUEVO";

                            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                            {
                                Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                            }
                            x = x + 1;
                        }
                    }
                    return this.Store(Listar.ToList());


                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEPF321_1_GRID_DIAGNOSTICOPOST3()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF321_1_GRID_DIAGNOSTICOPOST3 - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "DIAGNOSTICOFE_POST3_323_1";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                {
                    if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                    {
                        LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                        LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                }

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEPF323_1_GRID_ANESTESIA1_EXAMEN2()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF323_1_GRID_ANESTESIA1_EXAMEN2 - Entrar");

                var LocalEnty1 = new MA_MiscelaneosDetalle();
                var Listar1 = new List<MA_MiscelaneosDetalle>();
                LocalEnty1.ACCION = "EXAM2_ANESTESIA_323_1";
                LocalEnty1.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty1.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty1.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty1.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim(); ;
                // LocalEnty1.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar1 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty1).ToList();


                if (Listar1.Count > 0)
                {


                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar1)
                    {
                        Listar1[x].ACCION = "UPDATEDETALLE";

                        if (Convert.ToInt32(Listar1[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                        {
                            Session["SEC_TOP_327"] = Convert.ToInt32(Listar1[x].CodigoElemento);
                        }
                        x = x + 1;
                    }


                    return this.Store(Listar1.ToList());


                }
                else
                {
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();
                    LocalEnty.ACCION = "EXA_CIRUGIA_PROCEFE_327";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo4 = "1";
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    if (ENTITY_GLOBAL.Instance.INDICA_FORM_COMPARTIDO == 3 && Session["SEC_F90"] == "1")
                    {
                        if (Listar.Count < 1 /* && ENTITY_GLOBAL.Instance.EpisodioAtencion > 1*/)
                        {
                            LocalEnty.ACCION = "DIAGNOSTICOFEOA";
                            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();

                            LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                            LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                            Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                        }
                    }

                    if (Listar.Count > 0)
                    {
                        int x = 0;
                        //  int top = 0; Session["SEC_TOP_150"] = 0;
                        foreach (var objEntity in Listar)
                        {
                            Listar[x].ACCION = "NUEVO";

                            if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_327"])
                            {
                                Session["SEC_TOP_327"] = Convert.ToInt32(Listar[x].CodigoElemento);
                            }
                            x = x + 1;
                        }
                    }
                    return this.Store(Listar.ToList());

                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }

                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }




        public System.Web.Mvc.ActionResult CCEPF323_1_GRID_EXAMENES3(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF323_1_GRID_EXAMENES3 - Entrar");

                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "ANESTESIAEXAMENESLIST3";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty.ValorCodigo5 = tipoCodigo;

                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {
                        Listar[x].ACCION = "UPDATEDETALLE";
                        if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_150"])
                        {
                            Session["SEC_TOP_150"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        }
                        x = x + 1;
                    }
                }
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }



        public System.Web.Mvc.ActionResult CCEPF323_1_Eliminar_AnestesiaExamenes1(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF323_1_Eliminar_AnestesiaExamenes1 - Entrar");

            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_Anestesia_Examenes1"] != null)
                {
                    dataDelete = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes1"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
                }
                SS_HC_AnestesiaExamenApoyoDetalle_FE objDelete = new SS_HC_AnestesiaExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_Anestesia_Examenes1"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF323_1_Eliminar_AnestesiaDiagnostico1(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF323_1_Eliminar_AnestesiaDiagnostico1 - Entrar");

            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_Anestesia1_Diagnostico1"] != null)
                {
                    dataDelete = (List<SS_HC_AnestesiaDiagnosticoDetalle_FE>)Session["Session_Anestesia1_Diagnostico1"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_AnestesiaDiagnosticoDetalle_FE>();
                }
                SS_HC_AnestesiaDiagnosticoDetalle_FE objDelete = new SS_HC_AnestesiaDiagnosticoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_Anestesia1_Diagnostico1"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF323_1_Eliminar_AnestesiaDiagnosticoPost3(String MODO, String codigo, String secuencia)
        {

            Log.Information("HClinicaController - CCEPF323_1_Eliminar_AnestesiaDiagnosticoPost3 - Entrar");


            List<SS_HC_AnestesiaDiagnosticoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_Anestesia1_DiagnosticoPost3"] != null)
                {
                    dataDelete = (List<SS_HC_AnestesiaDiagnosticoDetalle_FE>)Session["Session_Anestesia1_DiagnosticoPost3"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_AnestesiaDiagnosticoDetalle_FE>();
                }
                SS_HC_AnestesiaDiagnosticoDetalle_FE objDelete = new SS_HC_AnestesiaDiagnosticoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.IdDiagnostico = Convert.ToInt32(cadenas);
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_Anestesia1_DiagnosticoPost3"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF323_1_Eliminar_AnestesiaExamenes2(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF323_1_Eliminar_AnestesiaExamenes2 - Entrar");

            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_Anestesia_Examenes2"] != null)
                {
                    dataDelete = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes2"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
                }
                SS_HC_AnestesiaExamenApoyoDetalle_FE objDelete = new SS_HC_AnestesiaExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_Anestesia_Examenes2"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF323_1_Eliminar_AnestesiaExamenes3(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF323_1_Eliminar_AnestesiaExamenes3 - Entrar");

            List<SS_HC_AnestesiaExamenApoyoDetalle_FE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Session_Anestesia_Examenes3"] != null)
                {
                    dataDelete = (List<SS_HC_AnestesiaExamenApoyoDetalle_FE>)Session["Session_Anestesia_Examenes3"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_AnestesiaExamenApoyoDetalle_FE>();
                }
                SS_HC_AnestesiaExamenApoyoDetalle_FE objDelete = new SS_HC_AnestesiaExamenApoyoDetalle_FE();

                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                // objDelete.IdGinecoobstetricos = 1;

                try
                {
                    objDelete.Accion = MODO; //"DELETEDETALLE"  
                    string[] cadArray = codigo.Trim().Split('|');
                    string cadenas = cadArray[1].Replace("[", "");
                    cadenas = cadenas.Replace("]", "").Trim();
                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Session_Anestesia_Examenes3"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }


        #endregion



        #region CCEPF323_3_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF323_3_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF323_3_View - Entrar");
                var LocalEnty = new SS_HC_FichaAnestesia_3_FE();
                var Listar = new List<SS_HC_FichaAnestesia_3_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;

                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;
                Listar = SvnAnestesia_3_Service.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {

                    hallado = true;
                    int contador = 0;
                    LocalEnty.Accion = "UPDATE";
                    foreach (SS_HC_FichaAnestesia_3_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;

                }

                LocalEnty.Version = "CCEPF323_3";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF323_3_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }



        public System.Web.Mvc.ActionResult CCEPF323_3_Save_Ficha_Anestesia3(SS_HC_FichaAnestesia_3_FE objSave)
        {

            Log.Information("HClinicaController - CCEPF323_3_Save_Ficha_Anestesia3 - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        string mensage = "";
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.Estado = 2;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                        }



                        registro = SvnAnestesia_3_Service.setMantenimiento(objSave);

                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado en CCEPF323_3", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual en CCEPF051", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    string mostrarExc = "Excepción genérica:" + ex.StackTrace;
                    eventoPostFormulario(false, "");
                    return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                    throw;
                }

            }
            return this.Direct();
        }



        #endregion



        #region CCEPF323_2_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF323_2_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF323_2_View - Entrar");

                var LocalEnty = new SS_HC_FichaAnestesia_2_FE();
                var Listar = new List<SS_HC_FichaAnestesia_2_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //LocalEnty.TipoCirugia = 2;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;

                Listar = SvcFichaAnestesia2Service.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_FichaAnestesia_2_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF323_2";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF323_2_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF323_2_Save_FichaAnestesia(SS_HC_FichaAnestesia_2_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF323_2_Save_FichaAnestesia - Entrar");

            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        //if (objSave.Respuesta1 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tiene más de 6 horas de ayuno. Si ingirió alimentos menos de 6hrs. Antes de la cirugía, informar al anestesiólogo ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta2 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se retiro: ropa, pelucas, maquillaje, esmalte de uñas, joyas, lentes piercing y se colocó la bata de sala de operaciones", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta3 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se pregunto al paciente si tiene prótesis dentales, lentes de contacto, ayudas auditivas. Se retiró y se guardó", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta4 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se guardo y registró todas sus pertenecías y/o se entregó al familiar o acompañante", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta5 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se marcó la zona operatoria (derecho o izquierdo)", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta6 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se colocaron vendajes o medias elásticas en extremidades inferiores", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta7 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se administró medicación preoperatoria y se registró", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta8 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si el paciente miccionó", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta9 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione vía endovenosa instalada (aguja N° 18-20/ equipo de extensión corta)", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta10 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione tiene control de funciones vitales ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta11 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione el paciente está rasurado ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta12 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tuvo ducha con clorhexidina o jabón", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta13 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si estado de la piel: sana", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta14 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione UPP", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta15 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tiene depósito de sangre. Los exámenes de laboratorio están presentes en la historia", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta16 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se comprobó datos del paciente con solicitud de transfusión", "ERROR", false);
                        //}


                        //else
                        //{
                        registro = SvcFichaAnestesia2Service.setMantenimiento(objSave);
                        //}
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }


                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF323_5_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF323_5_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF323_5_View - Entrar");
                var LocalEnty = new SS_HC_FichaAnestesia_5_FE();
                var Listar = new List<SS_HC_FichaAnestesia_5_FE>();
                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //LocalEnty.TipoCirugia = 2;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                bool hallado = false;



                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //LocalEnty.TipoCirugia = 2;

                Listar = SvcFichaAnestesia5Service.listarEntidad(LocalEnty);



                if (Listar.Count > 0)
                {

                    foreach (SS_HC_FichaAnestesia_5_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                    }
                    LocalEnty.Accion = "UPDATE";
                    hallado = true;
                }



                LocalEnty.Version = "CCEPF323_5";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }



                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }


                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF323_5_View", LocalEnty);


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF323_5_Save_FichaAnestesia(SS_HC_FichaAnestesia_5_FE objSave)
        {
            Log.Information("HClinicaController - CCEPF323_5_Save_FichaAnestesia - Entrar");
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes", "Por favor seleccione episidio clinico...").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    //    if (objSave.GradoDependencia_sel == null)
                    //{
                    //    eventoPostFormulario(false, "");
                    //    return showMensajeNotifyData("Error", "Falta ingresar informacion, no se grabará", "ERROR", false);
                    //};

                    if (objSave != null)
                    {
                        objSave.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        objSave.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objSave.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objSave.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objSave.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        objSave.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.FechaModificacion = DateTime.Now;
                        if (objSave.Accion == "NUEVO")
                        {
                            objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objSave.FechaCreacion = DateTime.Now;
                            objSave.Estado = 2;
                        }

                        string mensage = "";


                        //if (objSave.Respuesta1 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tiene más de 6 horas de ayuno. Si ingirió alimentos menos de 6hrs. Antes de la cirugía, informar al anestesiólogo ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta2 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se retiro: ropa, pelucas, maquillaje, esmalte de uñas, joyas, lentes piercing y se colocó la bata de sala de operaciones", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta3 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se pregunto al paciente si tiene prótesis dentales, lentes de contacto, ayudas auditivas. Se retiró y se guardó", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta4 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se guardo y registró todas sus pertenecías y/o se entregó al familiar o acompañante", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta5 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se marcó la zona operatoria (derecho o izquierdo)", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta6 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se colocaron vendajes o medias elásticas en extremidades inferiores", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta7 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se administró medicación preoperatoria y se registró", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta8 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si el paciente miccionó", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta9 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione vía endovenosa instalada (aguja N° 18-20/ equipo de extensión corta)", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta10 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione tiene control de funciones vitales ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta11 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione el paciente está rasurado ", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta12 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tuvo ducha con clorhexidina o jabón", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta13 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si estado de la piel: sana", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta14 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione UPP", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta15 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si tiene depósito de sangre. Los exámenes de laboratorio están presentes en la historia", "ERROR", false);
                        //}
                        //else if (objSave.Respuesta16 == null)
                        //{
                        //    eventoPostFormulario(false, "");
                        //    return showMensajeNotifyData("Error", "Seleccione si se comprobó datos del paciente con solicitud de transfusión", "ERROR", false);
                        //}


                        //else
                        //{
                        registro = SvcFichaAnestesia5Service.setMantenimiento(objSave);
                        //}
                        if (registro > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                                mensage = "registro";
                            else
                                mensage = "actualizo";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente.Codigo Transacción:" +
                                 UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                 ENTITY_GLOBAL.Instance.EpisodioAtencion,
                                 ENTITY_GLOBAL.Instance.PacienteID, "");
                            eventoPostFormulario(true, "");
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedio un error inesperado", "ERROR", false);
                        }
                    }
                    else
                    {
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "No se pudo obtener el registro actual", "ERROR", false);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    return showMsgTratamientoExcepcion(ex, "");
                    throw;
                }

            }
            return this.Direct();
        }

        #endregion

        #region CCEPF201_2_Formulario


        public System.Web.Mvc.ActionResult CCEPF201_2_View()
        {

            Log.Information("HClinicaController - CCEPF201_2_View - Entrar");
            Session["SEC_TOP_101"] = 0;

            var LocalEnty = new SS_HC_Epicrisis_2_FE();
            LocalEnty.Accion = "UPDATE";
            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
            {
                LocalEnty.Accion = "VISTA";
            }
            else
            {
                LocalEnty.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            }

            /*********************************/
            var objListaAnt = new List<SS_HC_Epicrisis_2_FE>();
            var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
            SS_HC_Epicrisis_2_FE objEnt = new SS_HC_Epicrisis_2_FE();
            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
            objEnt.Accion = "LISTAR";
            //  objEnt.TipoMedicamento = 1; //para Medicina
            objListaAnt = SvcEpicrisis2Service.lista_Cabecera(objEnt);
            bool hallado = false; //ADD 19/12/16
            if (objListaAnt.Count > 0)
            {

                foreach (SS_HC_Epicrisis_2_FE objEntity in objListaAnt)
                {
                    LocalEnty = objEntity;
                }
                LocalEnty.Accion = "UPDATE";
                hallado = true;
            }
            //objListaAnt2 = SvcMedicamentoFE.MedicamentoListar(objEnt);
            //objListaAnt.AddRange(objListaAnt2);

            //   Session["MEDICONOM"] = objListaAnt2[0].UsuarioCreacion; ;


            if (objListaAnt.Count > 0)
            {
                //foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                //{
                //    if (ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO < Convert.ToInt32(intobj.GrupoMedicamento))
                //    {
                //        ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO = Convert.ToInt32(intobj.GrupoMedicamento);
                //    }

                //    /**ADD 19/12/16**/
                //    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                //    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                //    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                //    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //    LocalEnty.TipoMedicamento = intobj.TipoMedicamento;
                //    LocalEnty.Linea = intobj.Linea;
                //    LocalEnty.Familia = intobj.Familia;
                //    LocalEnty.SubFamilia = intobj.SubFamilia;
                //    LocalEnty.Comentario = intobj.Comentario;
                //    LocalEnty.TipoReceta = intobj.TipoReceta;
                //    LocalEnty.Accion = "UPDATE";
                //    /**/
                //}
                //hallado = true;

                //LocalEnty.Accion = "UPDATE";
                //if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                //{
                //    LocalEnty.Accion = "VISTA";
                //}
                //else
                //{
                //    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                //}

            }
            ///////////////

            if (!hallado)
            {
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                    LocalEnty.Accion = "NUEVO";
                }
            }


            /////////////////////////////////////////////////
            ///ADD LA OPCIÓN DE COPIA
            if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
            {
                //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();
                SS_HC_Medicamento_FE objMed;
                object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaAnt);
                if (objetoGen != null)
                {
                    List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;
                    objMed = new SS_HC_Medicamento_FE();
                    if (ListarCopy.Count > 0)
                    {
                        //LocalEnty.Comentario = ListarCopy[0].Comentario;
                    }


                }
                Session["COPIA_FORMULARIO"] = "ACTIVA";
            }
            /////////////////////////////////////////////


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            setPropiedadesFormulario(true);
            /********************************/
            return View("FormulariosExtras/CCEPF201_2_View", "", LocalEnty);
        }

        public System.Web.Mvc.ActionResult CCEPF201_2_MEDICAMENTOS(string VALOR, string tipoRecurso)
        {
            Log.Information("HClinicaController - CCEPF201_2_MEDICAMENTOS - Entrar");
            var LocalEnty = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();
            var objLista = new List<BE_Medicamento_FE>();
            var objListaShow = new List<BE_Medicamento_FE>();
            var objListaAnt = new List<SS_HC_Medicamento_FE>();
            var objListaAntDetall = new List<SS_HC_Indicaciones_FE>();
            if (Session["HC_MedicamentoList"] != null && tipoRecurso == "1")
            {
                objLista = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETEINDIV")
                    {
                        objListaShow.Add(result);
                    }
                }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objListaShow);
                    if (objetoGen != null)
                    {
                        List<BE_Medicamento_FE> ListarCopy = (List<BE_Medicamento_FE>)objetoGen;






                        objListaShow.AddRange(ListarCopy);

                        Session["HC_MedicamentoList"] = objListaShow;
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {
                SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                objEnt.TipoMedicamento = getValorFiltroInt(tipoRecurso); //para Medicina
                objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);
                string cadenas = "";
                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    BE_Medicamento_FE obtemp;
                    foreach (SS_HC_Medicamento_FE intobj in objListaAnt)
                    {
                        obtemp = new BE_Medicamento_FE();
                        obtemp.Linea = intobj.Linea;
                        obtemp.Familia = intobj.Familia;
                        obtemp.SubFamilia = intobj.SubFamilia;
                        cadArray = intobj.Version.Trim().Split('|');
                        obtemp.LineaDescripcion = cadArray[0];
                        obtemp.FamiliaDescripcion = cadArray[1];
                        obtemp.SubFamiliaDescripcion = cadArray[2];
                        obtemp.MedicamentoDescripcion = cadArray[3];
                        obtemp.Secuencia = intobj.Secuencia;
                        obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                        obtemp.Dosis = intobj.Dosis;
                        obtemp.IdVia = intobj.IdVia;
                        obtemp.Cantidad = intobj.Cantidad;
                        obtemp.Frecuencia = intobj.Frecuencia;
                        obtemp.DiasTratamiento = intobj.DiasTratamiento;
                        obtemp.TipoMedicamento = intobj.TipoMedicamento;
                        obtemp.Presentacion = intobj.Presentacion;
                        obtemp.TipoComida = intobj.TipoComida;
                        /////ADD 25/09
                        obtemp.Estado = intobj.Estado;
                        obtemp.CodigoComponente = intobj.CodigoComponente;
                        obtemp.Medicamento = intobj.CodigoComponente;
                        obtemp.Comentario = intobj.Comentario;
                        ////
                        obtemp.TipoReceta = intobj.TipoReceta;
                        obtemp.Periodo = intobj.Periodo;
                        obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                        obtemp.UnidadTiempo = intobj.UnidadTiempo;
                        obtemp.Indicacion = intobj.Indicacion;
                        obtemp.IndicadorEPS = intobj.IndicadorEPS;
                        obtemp.Accion = "UPDATEINDIV";
                        objLista.Add(obtemp);

                        if (obtemp.Secuencia > (int)Session["SEC_TOP_101"])
                        {
                            Session["SEC_TOP_101"] = obtemp.Secuencia;
                        }


                    }
                    Session["HC_MedicamentoList"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                    SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                    objEntIndi.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                    objEntIndi.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objEntIndi.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objEntIndi.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objEntIndi.Accion = "LISTAR";
                    objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                    if (objListaAntDetall.Count > 0)
                    {
                        Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                    }
                    //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }
                ////////////////////////////ADD LA OPCIÓN DE COPIA///////////////////////////////////////////////////////////////////////////////////////
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    object objetoGen = (List<SS_HC_Medicamento_FE>)getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_MEDICAMENTOS_F2, objLista);
                    var objListaAnt2 = new List<SS_HC_Medicamento_FE>();
                    if (objetoGen != null)
                    {
                        List<SS_HC_Medicamento_FE> ListarCopy = (List<SS_HC_Medicamento_FE>)objetoGen;
                        // var ListarCopy2 = new List<SS_HC_Medicamento_FE>();
                        //objLista.AddRange(ListarCopy);
                        // Session["HC_MedicamentoList"] = objLista;
                        /*****/
                        List<V_EpisodioAtenciones> listaCopiaForm = (List<V_EpisodioAtenciones>)Newtonsoft.Json.JsonConvert.DeserializeObject((string)Session["DATA_COPIA_FORM"], typeof(List<V_EpisodioAtenciones>));



                        String[] cadArray2;
                        if (ListarCopy.Count > 0)
                        {
                            /******GRABA EN LA BASE DE DATOS****/
                            BE_Medicamento_FE obtemp1;
                            int x = 0;
                            int IdSecuencia1 = 0;
                            int regItems = 0;
                            foreach (SS_HC_Medicamento_FE intobj1 in ListarCopy)
                            {
                                obtemp1 = new BE_Medicamento_FE();

                                obtemp1.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                obtemp1.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                obtemp1.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                obtemp1.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                obtemp1.Accion = "NUEVO";  //OBS
                                obtemp1.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                                obtemp1.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                                obtemp1.Comentario = (string)Session["Comentario"];
                                //var objLista = new List<BE_Medicamento_FE>();
                                Random rnd = new Random();
                                obtemp1.Secuencia = Convert.ToInt32(rnd.Next());

                                regItems = regItems + 1;
                                obtemp1.Secuencia = regItems;
                                ListarCopy[x].Secuencia = regItems;
                                obtemp1.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                obtemp1.FechaCreacion = DateTime.Now;

                                obtemp1.Linea = intobj1.Linea;
                                obtemp1.Familia = intobj1.Familia;
                                obtemp1.SubFamilia = intobj1.SubFamilia;
                                obtemp1.TipoComponente = intobj1.TipoComponente;
                                //cadArray2 = intobj.Version.Trim().Split('|');
                                //obtemp1.LineaDescripcion = intobj1.li;
                                // obtemp1.FamiliaDescripcion = cadArray2[1];
                                // obtemp1.SubFamiliaDescripcion = cadArray2[2];
                                //obtemp1.MedicamentoDescripcion = intobj1.m
                                // obtemp1.Secuencia = intobj.Secuencia;
                                obtemp1.FrecuenciaToma = intobj1.FrecuenciaToma;
                                obtemp1.IdUnidadMedida = intobj1.IdUnidadMedida;
                                obtemp1.Dosis = intobj1.Dosis;
                                obtemp1.IdVia = intobj1.IdVia;
                                obtemp1.Cantidad = intobj1.Cantidad;
                                obtemp1.Frecuencia = intobj1.Frecuencia;
                                obtemp1.DiasTratamiento = intobj1.DiasTratamiento;
                                // obtemp1.TipoMedicamento = intobj1.TipoMedicamento;
                                obtemp1.Presentacion = intobj1.Presentacion;
                                obtemp1.TipoComida = intobj1.TipoComida;
                                obtemp1.Estado = intobj1.Estado;
                                obtemp1.CodigoComponente = intobj1.CodigoComponente;
                                obtemp1.Medicamento = intobj1.CodigoComponente;
                                obtemp1.Comentario = (string)Session["Comentario"];
                                obtemp1.TipoReceta = intobj1.TipoReceta;
                                obtemp1.Periodo = intobj1.Periodo;
                                obtemp1.UsuarioAuditoria = intobj1.UsuarioAuditoria;
                                obtemp1.UnidadTiempo = intobj1.UnidadTiempo;
                                obtemp1.Indicacion = intobj1.Indicacion;
                                obtemp1.IndicadorEPS = intobj1.IndicadorEPS;



                                IdSecuencia1 = SvcMedicamentoFE.setMantenimiento(obtemp1);

                                x = x + 1;
                            }


                            /**********************************/
                            BE_Medicamento_FE obtemp;
                            foreach (SS_HC_Medicamento_FE intobj in ListarCopy)
                            {
                                obtemp = new BE_Medicamento_FE();
                                obtemp.Linea = intobj.Linea;
                                obtemp.Familia = intobj.Familia;
                                obtemp.SubFamilia = intobj.SubFamilia;
                                cadArray2 = intobj.Version.Trim().Split('|');
                                obtemp.LineaDescripcion = cadArray2[0];
                                obtemp.FamiliaDescripcion = cadArray2[1];
                                obtemp.SubFamiliaDescripcion = cadArray2[2];
                                obtemp.MedicamentoDescripcion = cadArray2[3];
                                obtemp.Secuencia = intobj.Secuencia;
                                obtemp.IdUnidadMedida = intobj.IdUnidadMedida;
                                obtemp.Dosis = intobj.Dosis;
                                obtemp.IdVia = intobj.IdVia;
                                obtemp.Cantidad = intobj.Cantidad;
                                obtemp.Frecuencia = intobj.Frecuencia;
                                obtemp.DiasTratamiento = intobj.DiasTratamiento;
                                obtemp.TipoMedicamento = intobj.TipoMedicamento;
                                obtemp.Presentacion = intobj.Presentacion;
                                obtemp.TipoComida = intobj.TipoComida;
                                obtemp.Estado = intobj.Estado;
                                obtemp.CodigoComponente = intobj.CodigoComponente;
                                obtemp.Medicamento = intobj.CodigoComponente;
                                obtemp.Comentario = (string)Session["Comentario"];
                                obtemp.TipoReceta = intobj.TipoReceta;
                                obtemp.Periodo = intobj.Periodo;
                                obtemp.UsuarioAuditoria = intobj.UsuarioAuditoria;
                                obtemp.UnidadTiempo = intobj.UnidadTiempo;
                                obtemp.Indicacion = intobj.Indicacion;
                                obtemp.IndicadorEPS = intobj.IndicadorEPS;
                                obtemp.Accion = "NUEVO";
                                objLista.Add(obtemp);

                                Session["Comentario"] = "";
                            }
                            Session["HC_MedicamentoList"] = objLista;
                            ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;
                            SS_HC_Indicaciones_FE objEntIndi = new SS_HC_Indicaciones_FE();
                            objEntIndi.UnidadReplicacion = listaCopiaForm[0].UnidadReplicacion; // ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            objEntIndi.IdPaciente = listaCopiaForm[0].IdPaciente; //(int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEntIndi.EpisodioClinico = listaCopiaForm[0].EpisodioClinico;// (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEntIndi.IdEpisodioAtencion = (long)listaCopiaForm[0].IdEpisodioAtencion; //(long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objEntIndi.Accion = "LISTAR";
                            objListaAntDetall = SvcMedicamentoFE.MedicamentoIndicacionesListar(objEntIndi);
                            if (objListaAntDetall.Count > 0)
                            {
                                Session["HC_MedicamentoDetalleList"] = objListaAntDetall;
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = 1;
                            }
                            //ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                        /****/
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                return this.Store(objLista.ToList());
            }
        }

        public System.Web.Mvc.ActionResult addDataEliminar_CCEPF201_2(string MODO, int id, int tipo)
        {
            Log.Information("HClinicaController - addDataEliminar_CCEPF201_2 - Entrar");
            if (id > 0)
            {
                List<BE_Medicamento_FE> objListaMed = null;
                List<SS_HC_Indicaciones_FE> objListaMedDetail = null;

                if (tipo == 3 || tipo == 1)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoList"];
                    if (tipo == 1)
                    {
                        objListaMedDetail = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (objListaMedDetail != null)
                        {

                        }
                    }
                }
                else if (tipo == 2)
                {
                    objListaMed = (List<BE_Medicamento_FE>)Session["HC_MedicamentoDietaList"];
                }
                if (objListaMed != null)
                {
                    foreach (var result in objListaMed)
                    {
                        if (result.Secuencia == id)
                        {
                            result.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            result.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            result.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            result.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            result.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
                            result.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                            result.Accion = "DELETEINDIV";
                            string mensage = "";
                            int IdSecuencia = 0;
                            try
                            {
                                IdSecuencia = SvcMedicamentoFE.setMantenimiento(result);
                                ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;
                                if (IdSecuencia > 0)
                                {
                                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                                    else mensage = " actualizó ";
                                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                                    String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                    UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                    ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                                    Session["HC_MedicamentoList"] = null;
                                    Session["HC_MedicamentoDetalleList"] = null;
                                    Session["HC_MedicamentoDetalleListDELETE"] = null;
                                    eventoLoadPostFormulario(true, "storeExamenes", null);
                                    eventoPostFormulario(true, "");
                                    //showMensajeBox                           
                                    //X.Msg.Alert("Ventana de Mensajes ", mensaje).Show();
                                    return showMensajeNotify("Mensaje", mensaje, "INFO");
                                }
                                else
                                {
                                    eventoPostFormulario(false, "");
                                    X.Msg.Alert("Ventana de Mensajes ", "Sucedió un error inesperado").Show();
                                    return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, ex.Message);
                                //EventLog.GenerarLogError(ex);
                                var sqlException = ex.InnerException as SqlException;
                                var detalle = new MA_MiscelaneosDetalle();
                                detalle.ACCION = "ERRORES";
                                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                                if (sqlException != null)
                                {
                                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                                }
                                else
                                {
                                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                                }
                                string mostrarExc = "Excepción genérica:" + ex.Message;
                                if (resultado.Count > 0)
                                {
                                    mostrarExc = resultado[0].DescripcionLocal;
                                }
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                                throw; ;
                            }

                        }
                    }

                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult Save_Medicamentos_CCEPF201_2(SS_HC_Epicrisis_2_FE objMedicamento_EA, String selectionArray1, String Id, String Evento)
        {
            Log.Information("HClinicaController - Save_Medicamentos_CCEPF201_2 - Entrar");
            // TRABA
            String valoreArray;


            if (Evento == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES

                List<SS_HC_Epicrisis_2_FE> ObjCabecera = new List<SS_HC_Epicrisis_2_FE>();

                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        objMedicamento_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objMedicamento_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objMedicamento_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objMedicamento_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objMedicamento_EA.FechaModificacion = DateTime.Now;
                        objMedicamento_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                        objMedicamento_EA.Estado = 2;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                        {
                            objMedicamento_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objMedicamento_EA.FechaCreacion = DateTime.Now;
                            objMedicamento_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }

                        objMedicamento_EA.Accion = "UPDATE";
                        ObjCabecera.Add(objMedicamento_EA);
                        registro = 1;
                        string mensage = "";

                        List<SS_HC_Epicrisis_2_Detalle_FE> objDetalle = new List<SS_HC_Epicrisis_2_Detalle_FE>();


                        if (registro > 0)
                        {

                            //TRANSACT




                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                Session["ValoresTemporal"] = null;
                                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw; ;
                    }
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult Editar_MedicamentoTemp_CCEPF201_2(BE_Medicamento_FE objMedicamento)
        {
            Log.Information("HClinicaController - Editar_MedicamentoTemp_CCEPF201_2 - Entrar");
            string mensage = "";
            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }

            int IdSecuencia = objMedicamento.Secuencia;
            if (objMedicamento.Accion != "NUEVO")
            {
                objMedicamento.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                objMedicamento.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objMedicamento.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objMedicamento.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objMedicamento.TipoMedicamento = 1;//OBS:  TIPO MEDICINA
                objMedicamento.CodigoComponente = objMedicamento.Medicamento;
                objMedicamento.Accion = "UPDATEINDIV";
            }

            objMedicamento.Version = ENTITY_GLOBAL.Instance.CONCEPTO.Trim();
            objMedicamento.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

            var store = X.GetCmp<Store>("storeExamenes");
            store.Reload();

            var btn = X.GetCmp<Button>("cmdGuardar");
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = true;
            panel.Visible = false;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");
            var txtCodigoComponente = X.GetCmp<TextField>("CodigoComponente");
            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");

            txtLinea.SetValue("");
            txtFamilia.SetValue("");
            txtSubFamilia.SetValue("");
            txtCodigoComponente.SetValue("");

            SubFamiliaDescripcion.SetValue("");
            LineaDescripcion.SetValue("");
            FamiliaDescripcion.SetValue("");

            var Dosis = X.GetCmp<NumberField>("Dosis");
            Dosis.SetValue(0);
            var Frecuencia = X.GetCmp<NumberField>("Frecuencia");
            Frecuencia.SetValue(0);
            var DiasTratamiento = X.GetCmp<NumberField>("DiasTratamiento");
            DiasTratamiento.SetValue(0);
            var Cantidad = X.GetCmp<NumberField>("Cantidad");
            Cantidad.SetValue(0);
            var IdVia = X.GetCmp<NumberField>("IdVia");
            IdVia.SetValue(0);
            var IdUnidadMedida = X.GetCmp<NumberField>("IdUnidadMedida");
            IdUnidadMedida.SetValue(0);
            var Accion = X.GetCmp<TextField>("Accion");
            Accion.SetValue("");
            var Presentacion = X.GetCmp<TextField>("Presentacion");
            Presentacion.SetValue("");
            var UnidadTiempo = X.GetCmp<NumberField>("UnidadTiempo");
            UnidadTiempo.SetValue(0);
            var Periodo = X.GetCmp<NumberField>("Periodo");
            Periodo.SetValue(0);
            var TipoComida = X.GetCmp<NumberField>("TipoComida");
            TipoComida.SetValue(0);
            var Indicacion = X.GetCmp<TextField>("Indicacion");
            Indicacion.SetValue("");


            IdSecuencia = SvcMedicamentoFE.setMantenimiento(objMedicamento);
            ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

            if (IdSecuencia > 0)
            {
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                else mensage = " actualizó ";
                ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                Session["HC_MedicamentoList"] = null;
                Session["HC_MedicamentoDetalleList"] = null;
                Session["HC_MedicamentoDetalleListDELETE"] = null;
                eventoLoadPostFormulario(true, "storeExamenes", null);
                eventoPostFormulario(true, "");
                return showMensajeNotify("Mensaje", mensaje, "INFO");
            }
            else
            {
                eventoPostFormulario(false, "");
                return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
            }
        }

        public System.Web.Mvc.ActionResult MEDICAMENTODETALLEINDI_CCEPF201_2(string VALOR)
        {
            try
            {
                Log.Information("HClinicaController - MEDICAMENTODETALLEINDI_CCEPF201_2 - Entrar");
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Indicaciones_FE>();
                var objLista = new List<SS_HC_Indicaciones_FE>();
                var objListaLlega = new List<SS_HC_Indicaciones_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    if (Session["HC_MedicamentoDetalleList"] != null)
                    {
                        objListaLlega = (List<SS_HC_Indicaciones_FE>)Session["HC_MedicamentoDetalleList"];
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            int Secuencia = (int)Session["HC_MedicamentoID"];
                            foreach (SS_HC_Indicaciones_FE objEntity1 in objListaLlega)
                            {
                                if (objEntity1.SecuenciaMedicamento == Secuencia)
                                {
                                    if ((objEntity1.Accion + "").Trim() != "NUEVO")
                                    {
                                        objEntity1.Accion = "UPDATE";
                                    }
                                    objLista.Add(objEntity1);
                                }
                            }
                        }
                    }
                    else
                    {
                        var LocalIndicaciones = new SS_HC_Indicaciones_FE();
                        int Secuencia = 0;
                        LocalIndicaciones.Accion = "LISTAR";
                        LocalIndicaciones.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        LocalIndicaciones.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        LocalIndicaciones.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        if (Session["HC_MedicamentoID"] != null)
                        {
                            Secuencia = (int)Session["HC_MedicamentoID"];
                        }
                        LocalIndicaciones.SecuenciaMedicamento = Secuencia;
                        ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                        objLista = SvcMedicamentoFE.MedicamentoIndicacionesListar(LocalIndicaciones).ToList();
                        foreach (SS_HC_Indicaciones_FE result in objLista)
                        {
                            result.Accion = "UPDATE";
                        }
                        if (Listar.Count > 0)
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }
                }
                return this.Store(objLista.ToList());

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult Saves_Medicamentos_CCEPF201_2(BE_Medicamento_FE objMedicamento_EA, String selectionArray1, String Id, String Evento)
        {
            Log.Information("HClinicaController - Saves_Medicamentos_CCEPF201_2 - Entrar");

            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar = new List<MA_MiscelaneosDetalle>();
            if (ObjListar == null)
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
                return this.Direct();
            }

            if (Evento == "0")
            {
                Session["ValoresTemporal"] = selectionArray1;
                ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            }
            else
            {
                valoreArray = (string)Session["ValoresTemporal"];
                // TRANSACCIONALES
                List<BE_Medicamento_FE> ObjCabecera = new List<BE_Medicamento_FE>();
                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                {
                    X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                }
                else
                {
                    try
                    {
                        int registro = -1;
                        objMedicamento_EA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        objMedicamento_EA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        objMedicamento_EA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        objMedicamento_EA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        objMedicamento_EA.FechaModificacion = DateTime.Now;
                        objMedicamento_EA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objMedicamento_EA.TipoMedicamento = 1;
                        objMedicamento_EA.Estado = 2;
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                        {
                            objMedicamento_EA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objMedicamento_EA.FechaCreacion = DateTime.Now;
                            objMedicamento_EA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        //objMedicamento_EA.Comentario = selectionArray2;
                        objMedicamento_EA.Accion = "UPDATE";
                        ObjCabecera.Add(objMedicamento_EA);
                        registro = 1;
                        string mensage = "";
                        // int reg= svc
                        if (registro > 0)
                        {

                            //TRANSACT
                            registro = SvcMedicamentoFE.setMantenimiento(objMedicamento_EA);
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;

                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            if (registro > 0)
                            {
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                                Session["ValoresTemporal"] = null;
                                Session["DataSS_HC_Anamnesis_EADelete"] = null;
                                eventoPostFormulario(true, "");
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                eventoPostFormulario(false, "");
                                return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                            }
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        //EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:" + ex.Message;
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", mostrarExc, "ERROR", true);
                        throw; ;
                    }
                }
            }
            return this.Direct();
        }


        #endregion




        #region CCEPF323_4
        public System.Web.Mvc.ActionResult CCEPF323_4_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF323_4_View - Entrar");
                var LocalEnty = new SS_HC_Anestesia_Farmaco_FE();
                var Listar = new List<SS_HC_Anestesia_Farmaco_FE>();
                var ListarTEMP = new List<SS_HC_Anestesia_Farmaco_FE>();

                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }

                Listar = SvcAnestesia4.lista_Cabecera(LocalEnty).ToList();

                //LocalEnty.Accion = "CALCULAR";
                //ListarTEMP = SvcBalanceHidroelectro.lista_Cabecera(LocalEnty).ToList();

                //if (ListarTEMP.Count > 0)
                //{
                //    foreach (SS_HC_BalanceHidroElect_FE objEntity0 in ListarTEMP)
                //    {
                //        ENTITY_GLOBAL.Instance.BalanceAcumulado = ListarTEMP[0].BalanceAcumulado;
                //    }

                //}
                //else { ENTITY_GLOBAL.Instance.BalanceAcumulado = 0; }


                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_Anestesia_Farmaco_FE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    }
                }



                Session["Accion_323_4"] = LocalEnty.Accion;
                Session["SS_HC_Anestesia_Farmaco_Detalle_FE"] = null;
                Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF323_4_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF323_4_SOLUCIONES(int tipoRecurso)
        {
            Log.Information("HClinicaController - CCEPF323_4_SOLUCIONES - Entrar");
            var objLista = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            var objListaShow = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();

            var objListaAnt = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            var objListaAnt2 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            var objListaAnt3 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            var objLista2 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            var objListaShow2 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();


            if (Session["SS_HC_SolucionesAdministradas_FE"] != null)
            {
                objLista = (List<SS_HC_Anestesia_Farmacos_Detalle_FE>)Session["SS_HC_Anestesia_Farmaco_Detalle_FE"];
                foreach (var result in objLista)
                {
                    if (result.Accion != "DELETE" && result.Tipo == tipoRecurso) //&& result.TipoBalance == tipoBalanc
                    {
                        objListaShow.Add(result);
                    }
                }

                ///ADD LA OPCIÓN DE COPIA

                ///////////////////////////////////////////////
                return this.Store(objListaShow.ToList());
            }
            else
            {

                SS_HC_Anestesia_Farmacos_Detalle_FE objEnt = new SS_HC_Anestesia_Farmacos_Detalle_FE();
                objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                objEnt.Accion = "LISTAR";
                //objEnt.TipoBalance = tipoBalanc;
                objEnt.Tipo = 1;

                objListaAnt = SvcAnestesia4.Listar_Soluciones(objEnt);

                objEnt.Tipo = 2;

                objListaAnt2 = SvcAnestesia4.Listar_Soluciones(objEnt);

                if (objListaAnt2.Count > 0)
                {
                    objListaAnt.AddRange(objListaAnt2);
                }

                objEnt.Tipo = 3;

                objListaAnt3 = SvcAnestesia4.Listar_Soluciones(objEnt);

                if (objListaAnt3.Count > 0)
                {
                    objListaAnt.AddRange(objListaAnt3);
                }

                String[] cadArray;
                if (objListaAnt.Count > 0)
                {
                    SS_HC_Anestesia_Farmacos_Detalle_FE obtemp;
                    foreach (SS_HC_Anestesia_Farmacos_Detalle_FE intobj in objListaAnt)
                    {
                        obtemp = new SS_HC_Anestesia_Farmacos_Detalle_FE();
                        obtemp = intobj;
                        obtemp.Accion = "UPDATE";

                        objLista.Add(obtemp);

                    }
                    Session["SS_HC_Anestesia_Farmaco_Detalle_FE"] = objLista;
                    ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP = 1;

                }
                ///ADD LA OPCIÓN DE COPIA

                ///////////////////////////////////////////////ADD 01/12/2016 OES/////////////////////////////

                if (Session["SS_HC_Anestesia_Farmaco_Detalle_FE"] != null)
                {
                    objLista2 = (List<SS_HC_Anestesia_Farmacos_Detalle_FE>)Session["SS_HC_Anestesia_Farmaco_Detalle_FE"];
                    foreach (var result in objLista2)
                    {
                        if (result.Accion != "DELETE" && result.Tipo == tipoRecurso) //&& result.TipoBalance == tipoBalanc
                        {
                            objListaShow2.Add(result);
                        }
                    }


                    //////////////////////////////////////////////*/
                    return this.Store(objListaShow2.ToList());
                }



                return this.Store(objLista.ToList());
            }
        }
        public System.Web.Mvc.ActionResult Save_Anestesia4(String selectionArray0, String selectionArray1, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_Anestesia4 - Entrar");

            List<SS_HC_Anestesia_Farmacos_Detalle_FE> ObjLista9 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
            List<SS_HC_Anestesia_Farmaco_FE> ObjLista0 = new List<SS_HC_Anestesia_Farmaco_FE>();

            SS_HC_Anestesia_Farmaco_FE objAnamEA = new SS_HC_Anestesia_Farmaco_FE();

            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_Anestesia_Farmacos_Detalle_FE> listaSoluciones = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();


                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_Anestesia_Farmaco_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Anestesia_Farmaco_FE>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.Ingresos1 = ObjLista0[0].Ingresos1;
                    objAnamEA.Ingresos2 = ObjLista0[0].Ingresos2;
                    objAnamEA.Ingresos3 = ObjLista0[0].Ingresos3;
                    objAnamEA.Ingresos4 = ObjLista0[0].Ingresos4;
                    objAnamEA.Ingresos5 = ObjLista0[0].Ingresos5;
                    objAnamEA.Ingresos6 = ObjLista0[0].Ingresos6;
                    objAnamEA.Ingresos7 = ObjLista0[0].Ingresos7;
                    objAnamEA.Ingresos8 = ObjLista0[0].Ingresos8;
                    objAnamEA.IngresosCantidad1 = ObjLista0[0].IngresosCantidad1;
                    objAnamEA.IngresosCantidad2 = ObjLista0[0].IngresosCantidad2;
                    objAnamEA.IngresosCantidad3 = ObjLista0[0].IngresosCantidad3;
                    objAnamEA.IngresosCantidad4 = ObjLista0[0].IngresosCantidad4;
                    objAnamEA.IngresosCantidad5 = ObjLista0[0].IngresosCantidad5;
                    objAnamEA.IngresosCantidad6 = ObjLista0[0].IngresosCantidad6;
                    objAnamEA.IngresosCantidad7 = ObjLista0[0].IngresosCantidad7;
                    objAnamEA.IngresosCantidad8 = ObjLista0[0].IngresosCantidad8;
                    objAnamEA.IngresosHorario1 = ObjLista0[0].IngresosHorario1;
                    objAnamEA.IngresosHorario2 = ObjLista0[0].IngresosHorario2;
                    objAnamEA.IngresosHorario3 = ObjLista0[0].IngresosHorario3;
                    objAnamEA.IngresosHorario4 = ObjLista0[0].IngresosHorario4;
                    objAnamEA.IngresosHorario5 = ObjLista0[0].IngresosHorario5;
                    objAnamEA.IngresosHorario6 = ObjLista0[0].IngresosHorario6;
                    objAnamEA.IngresosHorario7 = ObjLista0[0].IngresosHorario7;
                    objAnamEA.IngresosHorario8 = ObjLista0[0].IngresosHorario8;
                    objAnamEA.TotalIngresos = ObjLista0[0].TotalIngresos;
                    objAnamEA.Perdidas1 = ObjLista0[0].Perdidas1;
                    objAnamEA.Perdidas2 = ObjLista0[0].Perdidas2;
                    objAnamEA.Perdidas3 = ObjLista0[0].Perdidas3;
                    objAnamEA.Perdidas4 = ObjLista0[0].Perdidas4;
                    objAnamEA.Perdidas5 = ObjLista0[0].Perdidas5;
                    objAnamEA.Perdidas6 = ObjLista0[0].Perdidas6;
                    objAnamEA.PerdidasCantidad1 = ObjLista0[0].PerdidasCantidad1;
                    objAnamEA.PerdidasCantidad2 = ObjLista0[0].PerdidasCantidad2;
                    objAnamEA.PerdidasCantidad3 = ObjLista0[0].PerdidasCantidad3;
                    objAnamEA.PerdidasCantidad4 = ObjLista0[0].PerdidasCantidad4;
                    objAnamEA.PerdidasCantidad5 = ObjLista0[0].PerdidasCantidad5;
                    objAnamEA.PerdidasCantidad6 = ObjLista0[0].PerdidasCantidad6;
                    objAnamEA.PerdidasHorario1 = ObjLista0[0].PerdidasHorario1;
                    objAnamEA.PerdidasHorario2 = ObjLista0[0].PerdidasHorario2;
                    objAnamEA.PerdidasHorario3 = ObjLista0[0].PerdidasHorario3;
                    objAnamEA.PerdidasHorario4 = ObjLista0[0].PerdidasHorario4;
                    objAnamEA.PerdidasHorario5 = ObjLista0[0].PerdidasHorario5;
                    objAnamEA.PerdidasHorario6 = ObjLista0[0].PerdidasHorario6;
                    objAnamEA.TotalPerdidas = ObjLista0[0].TotalPerdidas;
                    objAnamEA.BalanceHidrico = ObjLista0[0].BalanceHidrico;
                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.FechaCreacion = DateTime.Now;
                    objAnamEA.FechaModificacion = DateTime.Now;

                    objAnamEA.Accion = (string)Session["Accion_323_4"];





                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjLista9 = (List<SS_HC_Anestesia_Farmacos_Detalle_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_Anestesia_Farmacos_Detalle_FE>));


                            foreach (var algo in ObjLista9)
                            {
                                SS_HC_Anestesia_Farmacos_Detalle_FE temp = new SS_HC_Anestesia_Farmacos_Detalle_FE();
                                temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                listaSoluciones.Add(temp);

                            }

                        }
                        if (Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"] != null)
                        {
                            List<SS_HC_Anestesia_Farmacos_Detalle_FE> listaDel = (List<SS_HC_Anestesia_Farmacos_Detalle_FE>)Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"];
                            foreach (var result in listaDel)
                            {
                                listaSoluciones.Add(result);
                            }
                        }



                        // }

                        IdSecuencia = SvcAnestesia4.setMantenimiento(objAnamEA, listaSoluciones);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        

                            Session["SS_HC_Anestesia_Farmaco_Detalle_FE"] = null;
                            Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"] = null;

                            eventoLoadPostFormulario(true, "storeBalanceNeo1", null);
                            eventoLoadPostFormulario(true, "storeBalanceNeo2", null);
                            eventoLoadPostFormulario(true, "storeBalanceNeo3", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {

                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF323_4_Eliminar_Sol(string MODO, int tipoBalanc, int secuencia, string Accion)
        {
            Log.Information("HClinicaController - CCEPF323_4_Eliminar_Sol - Entrar");
            if (Accion != "NUEVO")
            {
                if (secuencia > 0)
                {
                    /*objListaMed = null;*/
                    List<SS_HC_Anestesia_Farmacos_Detalle_FE> objListaMed0 = new List<SS_HC_Anestesia_Farmacos_Detalle_FE>();
                    SS_HC_Anestesia_Farmacos_Detalle_FE temp = new SS_HC_Anestesia_Farmacos_Detalle_FE();

                    List<SS_HC_Anestesia_Farmacos_Detalle_FE> objListaMed = (List<SS_HC_Anestesia_Farmacos_Detalle_FE>)Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"];

                    if (objListaMed != null)
                    {
                        objListaMed0.AddRange(objListaMed);
                    }

                    temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    temp.Secuencia = secuencia;
                    temp.Tipo = tipoBalanc;
                    temp.Accion = "DELETE";

                    objListaMed0.Add(temp);
                    Session["SS_HC_Anestesia_Farmaco_DetalleDelete_FE"] = objListaMed0;
                }
            }
            return this.Direct();
        }

        #endregion




        #region CCEPF201_1_FORMULARIO


        public System.Web.Mvc.ActionResult CCEPF201_1_View()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_1_View - Entrar");
                SS_HC_Epicrisis_1_FE LocalObj = null;
                var LocalEnty = new SS_HC_Epicrisis_1_FE();
                var Listar = new List<SS_HC_Epicrisis_1_FE>();
                ENTITY_GLOBAL.Instance.INDICADORSERVICIOALTA = "";
                LocalEnty.Accion = "LISTAR";
                Session["SEC_TOP_90EPI"] = 0;
                Session["SEC_F90EPI"] = "1";

                Session["SEC_TOP_201_1"] = 0;


                if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                }

                bool hallado = false;
                LocalObj = null;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                Listar = SvcEpicrisis1_FEService.listarEntidad(LocalEnty);

                if (Listar.Count > 0)
                {

                    var field = X.GetCmp<TextField>("tfNomMed");
                    var tfNum = X.GetCmp<TextField>("tfNroMed");

                    var RestfNum = X.GetCmp<TextField>("tfResNroMed");
                    var Resfield = X.GetCmp<TextField>("tfResNomMed");

                    var acotfNum = X.GetCmp<TextField>("tfacoNroMed");
                    var acofield = X.GetCmp<TextField>("tfacoNomMed");

                    var rectfNum = X.GetCmp<TextField>("tfrecNroMed");
                    var recfield = X.GetCmp<TextField>("tfrecNomMed");

                    hallado = true;
                    int contador = 0;
                    LocalEnty.Accion = "UPDATE";
                    foreach (SS_HC_Epicrisis_1_FE objEntity in Listar)
                    {
                        VW_SS_GE_ESPECIALIDADMEDICO objFiltro = new VW_SS_GE_ESPECIALIDADMEDICO();
                        objFiltro.ACCION = "LISTARPAG";
                        var ListarMedico = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                        LocalEnty = objEntity;

                        if (!string.IsNullOrEmpty(objEntity.IdMedico.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.IdMedico);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    field.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    tfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.Redacta.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Redacta);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    Resfield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    RestfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(objEntity.Especificar.ToString()))
                        {
                            objFiltro.PERSONA = Convert.ToInt32(objEntity.Especificar);
                            ListarMedico = SvcVWEspecialidadMedico.listarEspecialidadMedico(objFiltro, 0, 10);
                            if (ListarMedico.Count == 1)
                            {
                                foreach (VW_SS_GE_ESPECIALIDADMEDICO objFiltroMedico in ListarMedico)
                                {
                                    acofield.SetValue(objFiltroMedico.NOMBRECOMPLETO);
                                    acotfNum.SetValue(objFiltroMedico.CMP);
                                }
                            }
                        }

                    }
                }
                LocalEnty.Version = "CCEPF202_1";
                //LocalEnty.Accion = "NUEVO";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.Accion = "VISTA";
                }
                else
                {
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }
                Session["Session_SS_HC_ReferenciaDetalle_FE_Delete"] = null;

                Session["Data_SS_HC_DiagnosticoDelete"] = null;
                Session["Data_SS_HC_SecundarioDelete"] = null;
                Session["Data_SS_HC_PrincipalDelete"] = null;
                Session["Data_SS_HC_ApoyoDiagnostico1"] = null;
                Session["Data_SS_HC_ApoyoDiagnostico2"] = null;
                Session["DataSS_HC_Anamnesis_EADelete2"] = null;

                Session["Data_SS_HC_DiagnosticoDelete"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/

                return View("FormulariosExtras/CCEPF201_1_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMsgTratamientoExcepcion(ex, "");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CCEPF201_1INTERCONSULTA()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_1INTERCONSULTA - Entrar");

                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                var Listar201_1 = new List<MA_MiscelaneosDetalle>();


                LocalEnty.ACCION = "INTERCONSUFE_201_1";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                Listar201_1 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                if (Listar201_1.Count > 0)
                {

                    for (int i = 0; i < Listar201_1.Count; i++)
                    {

                        Listar201_1[i].ACCION = "UPDATE";

                    }



                    DataTable dtValida2 = new DataTable();

                    String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                    if (PARAM == "S")
                    {
                        HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                        HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                        WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        WsEpisodio.FechaCreacion = DateTime.Now;
                        WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        dtValida2 = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                    }
                    else
                    {
                        dtValida2.Columns.Add("CustLName", typeof(String));
                        dtValida2.Columns.Add("CustFName", typeof(String));
                        dtValida2.Columns.Add("Purchases", typeof(String));
                        dtValida2.Columns.Add("CustLName2", typeof(String));
                        dtValida2.Columns.Add("CustFName2", typeof(String));
                        dtValida2.Columns.Add("Purchases2", typeof(String));

                    }


                    ENTITY_GLOBAL.Instance.dataInterconsulta = dtValida2;

                    return this.Store(Listar201_1.ToList());


                }
                else
                {



                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.ACCION = "INTERCONSUFE";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    }
                    else if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE")
                    {
                        LocalEnty.ACCION = "INTERCONSUFE";
                        LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                        LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                        LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                        LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                        for (int i = 0; i < Listar.Count; i++)
                        {
                            Listar[i].ValorCodigo1 = Listar[i].ValorCodigo1.Substring(0, 5);
                            Listar[i].ACCION = "NUEVO";

                        }


                    }
                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_INTERCONSULTAS, Listar);
                        if (objetoGen != null)
                        {
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            Listar.AddRange(ListarCopy);
                        }
                        Session["COPIA_FORMULARIO"] = "INACTIVA";
                    }
                    ///////////////////////////////////////////////
                    DataTable dtValida = new DataTable();

                    String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                            (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                    if (PARAM == "S")
                    {
                        HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
                        HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

                        WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                        WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                        WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                        WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                        WsEpisodio.FechaCreacion = DateTime.Now;
                        WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);
                    }
                    else
                    {
                        dtValida.Columns.Add("CustLName", typeof(String));
                        dtValida.Columns.Add("CustFName", typeof(String));
                        dtValida.Columns.Add("Purchases", typeof(String));
                        dtValida.Columns.Add("CustLName2", typeof(String));
                        dtValida.Columns.Add("CustFName2", typeof(String));
                        dtValida.Columns.Add("Purchases2", typeof(String));

                    }
                    ENTITY_GLOBAL.Instance.dataInterconsulta = dtValida;
                    return this.Store(Listar.ToList());



                }



            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }



        public System.Web.Mvc.ActionResult addEliminar_CCEPF201_1(String MODO, String codigo, String secuencia, String secuenciaHCE, string accion)
        {
            Log.Information("HClinicaController - addEliminar_CCEPF201_1 - Entrar");
            List<SS_HC_InterConsulta_Epricrisis3_FE> dataDelete = null;
            /// Session["ELIMINAR_DATA_INTERCONSULTA2"] = codigo;

            /// comentado desde aka

            //var dtValida = ENTITY_GLOBAL.Instance.dataInterconsulta;
            //string JSONstring = string.Empty;
            //JSONstring = JsonConvert.SerializeObject(dtValida);
            //List<EpisodioAtencion> result = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
            //List<EpisodioAtencion> listxx = result.Where(x => x.SecuenciaHCE == secuenciaHCE).ToList();
            //if (listxx.Count > 0)
            //{
            //    String datos = Convert.ToString(listxx[0].IndicadorCobrado1);
            //    if (datos == "1")
            //    {
            //        this.GetCmp<TextField>("data").Text = "error";

            //        return showMensajeNotify("Advertencia", "La Interconsulta ya esta Aperturada.", "ERROR");
            //    }
            //    else
            //    {
            //        this.GetCmp<TextField>("data").Text = "";
            //    }

            //}
            //else
            //{
            //    this.GetCmp<TextField>("data").Text = "";
            //}


            if ((codigo + "").Length > 0)
            {
                if (Session["DataSS_HC_Anamnesis_EADelete2"] != null)
                {
                    dataDelete = (List<SS_HC_InterConsulta_Epricrisis3_FE>)Session["DataSS_HC_Anamnesis_EADelete2"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_InterConsulta_Epricrisis3_FE>();
                }
                SS_HC_InterConsulta_Epricrisis3_FE objDelete = new SS_HC_InterConsulta_Epricrisis3_FE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();
                    //objDelete.I = Convert.ToInt32(cadenas);

                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.Accion = "DELETE";
                        objDelete.Secuencia = Convert.ToInt32(secuencia);
                        objDelete.ProcedimientoText = secuenciaHCE;
                        dataDelete.Add(objDelete);
                        Session["DataSS_HC_Anamnesis_EADelete2"] = dataDelete;

                    }

                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult CCEPF201_1_Diagnostico()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_1_Diagnostico - Entrar");

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar2 = new List<MA_MiscelaneosDetalle>();


                LocalEnty2.ACCION = "EPICRISIS1_DIAG";
                LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty2.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;
                Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();


                if (Listar2.Count > 0)
                {



                    if (Session["COPIA_FORMULARIOEPIDIAG"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {

                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MED_EPICRISIS201_1_F2, Listar2);


                        if (objetoGen != null)
                        {


                            int CODIGOTEMP = (int)Session["SEC_TOP_90EPI"];
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                            int x = 0;
                            foreach (var objEntity in ListarCopy)
                            {
                                ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                                ListarCopy[x].ACCION = "NUEVO";

                                CODIGOTEMP = CODIGOTEMP + 1;
                                x = x + 1;
                            }

                            Listar2.AddRange(ListarCopy);
                        }
                        Session["COPIA_FORMULARIOEPIDIAG"] = "INACTIVA";
                        Session["SEC_F90EPI"] = "";

                        ///////////////////////////////////////////////
                        return this.Store(Listar2.ToList());


                    }



                    if (Listar2.Count > 0)
                    {

                        for (int i = 0; i < Listar2.Count; i++)
                        {

                            Listar2[i].ACCION = "UPDATE";

                        }


                    }

                    return this.Store(Listar2.ToList());






                }
                else
                {


                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar = new List<MA_MiscelaneosDetalle>();


                    LocalEnty.ACCION = "DIAG_N_EPICRISIS1";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                    if (Session["COPIA_FORMULARIOEPIDIAG"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {
                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MED_EPICRISIS201_1_F2, Listar);
                        if (objetoGen != null)
                        {


                            int CODIGOTEMP = (int)Session["SEC_TOP_90EPI"];
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            int print = ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
                            int x = 0;
                            foreach (var objEntity in ListarCopy)
                            {
                                ListarCopy[x].CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                                ListarCopy[x].ACCION = "NUEVO";

                                CODIGOTEMP = CODIGOTEMP + 1;
                                x = x + 1;
                            }

                            Listar.AddRange(ListarCopy);
                        }
                        Session["COPIA_FORMULARIOEPIDIAG"] = "INACTIVA";
                        Session["SEC_F90EPI"] = "";

                        ///////////////////////////////////////////////
                        return this.Store(Listar.ToList());


                    }



                    if (Listar.Count > 0)
                    {

                        for (int i = 0; i < Listar.Count; i++)
                        {

                            Listar[i].ACCION = "NUEVO";

                        }
                    }


                    return this.Store(Listar.ToList());

                }




            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF201_1_ExamenApoyo(String tipoCodigo)
        {


            try
            {
                Log.Information("HClinicaController - CCEPF201_1_ExamenApoyo - Entrar");

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty2 = new MA_MiscelaneosDetalle();

                var Listar2 = new List<MA_MiscelaneosDetalle>();

                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEntyExam = new SS_HC_Epicrisis_3_Diag_Principal();
                var ListarExamen = new List<SS_HC_Epicrisis_3_Diag_Principal>();

                var ListarMostrar = new List<SS_HC_Epicrisis_3_Diag_Principal>();


                LocalEntyExam.Accion = "LISTAR";
                LocalEntyExam.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEntyExam.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEntyExam.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEntyExam.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                ListarExamen = SvcEpicrisis3Service.Listar_Epicrisis_3_Principal(LocalEntyExam).ToList();



                LocalEnty2.ACCION = "EXAMENESLIST";
                LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty2.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty2.ValorCodigo5 = tipoCodigo;
                Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();


                if (ListarExamen.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in ListarExamen)
                    {
                        ListarExamen[x].Accion = "UPDATE";
                        x = x + 1;
                    }

                    ///ADD LA OPCIÓN DE COPIA
                    if (Session["COPIA_FORMULARIOEPICRISISI"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                    {

                        Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                        UTILES_MENSAJES.FORM_MED_EPICRISIS201_1_F2EXA, ListarExamen);
                        if (objetoGen != null)
                        {
                            List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                            MA_MiscelaneosDetalle ObjDet;
                            int CODIGOTEMP = (int)Session["SEC_TOP_201_1"];
                            foreach (MA_MiscelaneosDetalle alg in ListarCopy)
                            {

                                SS_HC_Epicrisis_3_Diag_Principal tempList = new SS_HC_Epicrisis_3_Diag_Principal();
                                tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                //  tempList.Secuencia = Convert.ToInt32(alg.CodigoElemento);
                                tempList.Codigo = alg.ValorCodigo7;
                                tempList.DiagnosticoDescripcion = alg.ValorCodigo2;
                                tempList.Secuencia = (ListarExamen.Count + 1);
                                tempList.Accion = "NUEVO";
                                ListarExamen.Add(tempList);

                                //ObjDet = new MA_MiscelaneosDetalle();

                                //ObjDet = objEntity;
                                //ObjDet.ValorFecha = DateTime.Now; ;

                                //ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                                // ObjDet.ACCION = "NUEVO";
                                // ListarExamen.Add(ObjDet);

                                CODIGOTEMP = CODIGOTEMP + 1;
                            }


                            //  Listar.AddRange(ListarCopy);
                        }
                        //  Session["DATA_COPIA_FORM"] = null;
                        Session["COPIA_FORMULARIO"] = "INACTIVA";

                        Session["COPIA_FORMULARIOEPICRISISI"] = "INACTIVA";
                        return this.Store(ListarExamen);

                    }




                    return this.Store(ListarExamen);
                }
                else
                {

                    int x = 0;
                    foreach (MA_MiscelaneosDetalle alg in Listar2)
                    {


                        SS_HC_Epicrisis_3_Diag_Principal tempList = new SS_HC_Epicrisis_3_Diag_Principal();
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        tempList.Secuencia = Convert.ToInt32(alg.CodigoElemento);
                        tempList.Codigo = alg.ValorCodigo7;
                        tempList.DiagnosticoDescripcion = alg.ValorCodigo2;
                        tempList.Accion = "NUEVO";
                        ListarMostrar.Add(tempList);


                        //Listar2[x].ACCION = "NUEVO";
                        //x = x + 1;
                    }

                    return this.Store(ListarMostrar);

                }


            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }


        }





        public System.Web.Mvc.ActionResult CCEPF201_1_addEliminar_ApoyoDiag1(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_1_addEliminar_ApoyoDiag1 - Entrar");
            List<SS_HC_Epicrisis_3_Diag_Principal> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_ApoyoDiagnostico1"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diag_Principal>)Session["Data_SS_HC_ApoyoDiagnostico1"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diag_Principal>();
                }
                SS_HC_Epicrisis_3_Diag_Principal objDelete = new SS_HC_Epicrisis_3_Diag_Principal();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";

                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;

                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_ApoyoDiagnostico1"] = dataDelete;
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF201_1_addEliminar_ApoyoDiagSecundario2(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_1_addEliminar_ApoyoDiagSecundario2 - Entrar");

            List<SS_HC_Epicrisis_3_Diag_Secundaria> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_ApoyoDiagnostico2"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Session["Data_SS_HC_ApoyoDiagnostico2"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();
                }
                SS_HC_Epicrisis_3_Diag_Secundaria objDelete = new SS_HC_Epicrisis_3_Diag_Secundaria();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";

                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;

                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_ApoyoDiagnostico2"] = dataDelete;
                }
                catch (Exception Ex)
                {
                    Log.Error(Ex, Ex.Message);
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult CCEPF201_1_addEliminar_Diag(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_1_addEliminar_Diag - Entrar");
            List<SS_HC_Epicrisis_3_Diagnostico> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_DiagnosticoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diagnostico>)Session["Data_SS_HC_DiagnosticoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diagnostico>();
                }
                SS_HC_Epicrisis_3_Diagnostico objDelete = new SS_HC_Epicrisis_3_Diagnostico();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;

                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_DiagnosticoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }



        public System.Web.Mvc.ActionResult Save_201_1(String selectionArray0, String selectionArray1, String selectionArray2,
            //String selectionArray3, 
           String selectionArray4, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_201_1 - Entrar");

            List<SS_HC_Epicrisis_3_Diagnostico> ObjLista1 = new List<SS_HC_Epicrisis_3_Diagnostico>();
            List<SS_HC_Epicrisis_3_Diag_Principal> ObjLista2 = new List<SS_HC_Epicrisis_3_Diag_Principal>();
            List<SS_HC_Epicrisis_3_Diag_Secundaria> ObjLista3 = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();
            List<SS_HC_Epicrisis_1_FE> ObjLista0 = new List<SS_HC_Epicrisis_1_FE>();

            SS_HC_Epicrisis_1_FE objAnamEA = new SS_HC_Epicrisis_1_FE();

            DataTable dtValida = new DataTable();
            string JSONstring = string.Empty;



            // SS_HC_InterConsulta_FE objgrilla;


            HceService.SoaServiceSoapClient ObtenerTramaOA = new HceService.SoaServiceSoapClient();
            HceService.SS_HC_WS_EpisodioAtencion WsEpisodio = new HceService.SS_HC_WS_EpisodioAtencion();

            List<SS_HC_InterConsulta_Epricrisis3_FE> ObjListaInter = new List<SS_HC_InterConsulta_Epricrisis3_FE>();

            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_Epicrisis_3_Diagnostico> listaDiagnostico = new List<SS_HC_Epicrisis_3_Diagnostico>();
                    List<SS_HC_Epicrisis_3_Diag_Principal> listaPrincipal = new List<SS_HC_Epicrisis_3_Diag_Principal>();
                    List<SS_HC_Epicrisis_3_Diag_Secundaria> listaSecundario = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();

                    List<SS_HC_InterConsulta_Epricrisis3_FE> listaInterConsulta = new List<SS_HC_InterConsulta_Epricrisis3_FE>();

                    List<MA_MiscelaneosDetalle> ObjListarInterMiselaneos = new List<MA_MiscelaneosDetalle>();



                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_Epicrisis_1_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Epicrisis_1_FE>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.IdMedico = ObjLista0[0].IdMedico;
                    objAnamEA.ManejoConjunto = ObjLista0[0].ManejoConjunto;
                    objAnamEA.Especificar = ObjLista0[0].Especificar;
                    objAnamEA.Redacta = ObjLista0[0].Redacta;
                    objAnamEA.FechaIngreso = ObjLista0[0].FechaIngreso;
                    objAnamEA.HoraIngreso = ObjLista0[0].HoraIngreso;
                    objAnamEA.FechaEgreso = ObjLista0[0].FechaEgreso;
                    objAnamEA.HoraEgreso = ObjLista0[0].HoraEgreso;

                    objAnamEA.DiasHospitalizacion = ObjLista0[0].DiasHospitalizacion;
                    objAnamEA.EnfermedadActual = ObjLista0[0].EnfermedadActual;
                    objAnamEA.Antecedentes = ObjLista0[0].Antecedentes;
                    objAnamEA.ExamenFisico = ObjLista0[0].ExamenFisico;
                    objAnamEA.Evolucion = ObjLista0[0].Evolucion;
                    objAnamEA.Estado = ObjLista0[0].Estado;
                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;

                    objAnamEA.FechaCreacion = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    objAnamEA.FechaModificacion = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

                    var dat = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");


                    objAnamEA.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;//(string)Session["Accion_201_3"];
                    objAnamEA.Version = "EPI1";

                    //objAnamEA.Accion = (string)Session["Accion_402"];

                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        String cadenas = "";
                        String[] cadArray;




                        if (Session["Data_SS_HC_DiagnosticoDelete"] != null)
                        {
                            List<SS_HC_Epicrisis_3_Diagnostico> listaDel = (List<SS_HC_Epicrisis_3_Diagnostico>)Session["Data_SS_HC_DiagnosticoDelete"];
                            foreach (var result in listaDel)
                            {
                                listaDiagnostico.Add(result);
                            }
                        }


                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjLista1 = (List<SS_HC_Epicrisis_3_Diagnostico>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_Epicrisis_3_Diagnostico>));


                            foreach (var algo in ObjLista1)
                            {
                                SS_HC_Epicrisis_3_Diagnostico temp = new SS_HC_Epicrisis_3_Diagnostico();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.Accion = algo.Accion;

                                cadArray = algo.DiagnosticoDescripcion.Trim().Split('|');
                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                temp.Codigo = cadenas;



                                //temp.Codigo = algo.Codigo;
                                temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                temp.Secuencia = algo.Secuencia;
                                //temp.IdEpicrisis3
                                listaDiagnostico.Add(temp);

                            }

                        }




                        if (Session["Data_SS_HC_ApoyoDiagnostico1"] != null)
                        {
                            List<SS_HC_Epicrisis_3_Diag_Principal> listaDel = (List<SS_HC_Epicrisis_3_Diag_Principal>)Session["Data_SS_HC_ApoyoDiagnostico1"];
                            foreach (var result in listaDel)
                            {
                                listaPrincipal.Add(result);
                            }
                        }


                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_Epicrisis_3_Diag_Principal>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Epicrisis_3_Diag_Principal>));


                            foreach (var algo in ObjLista2)
                            {
                                SS_HC_Epicrisis_3_Diag_Principal temp = new SS_HC_Epicrisis_3_Diag_Principal();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.Accion = algo.Accion;
                                temp.Codigo = algo.Codigo;
                                temp.Secuencia = algo.Secuencia;
                                temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                listaPrincipal.Add(temp);

                            }
                        }


                        //if (Session["Data_SS_HC_ApoyoDiagnostico2"] != null)
                        //{
                        //    List<SS_HC_Epicrisis_3_Diag_Secundaria> listaDel = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Session["Data_SS_HC_ApoyoDiagnostico2"];
                        //    foreach (var result in listaDel)
                        //    {
                        //        listaSecundario.Add(result);
                        //    }
                        //}

                        //if (selectionArray3.Trim().Length > 0)
                        //{
                        //    ObjLista3 = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_Epicrisis_3_Diag_Secundaria>));


                        //    foreach (var algo in ObjLista3)
                        //    {
                        //        SS_HC_Epicrisis_3_Diag_Secundaria temp = new SS_HC_Epicrisis_3_Diag_Secundaria();
                        //        //temp = algo;
                        //        temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //        temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        //        temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //        temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //        temp.Accion = algo.Accion;
                        //        temp.Codigo = algo.Codigo;
                        //        temp.Secuencia = algo.Secuencia;
                        //        temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                        //        listaSecundario.Add(temp);

                        //    }
                        //}




                        int f1 = 0;
                        String mensaje = "";
                        int indicador = 0;
                        List<EpisodioAtencion> resultValida = new List<EpisodioAtencion>();

                        String PARAM = (UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") != null ?
                    (String)UTILES_MENSAJES.getParametro_Form("ACTIVOSOA") : null);

                        if (PARAM == "S")
                        {

                            WsEpisodio.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                            WsEpisodio.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            WsEpisodio.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            WsEpisodio.IdEpisodioAtencion = (int)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            WsEpisodio.IdOrdenAtencion = (int)ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                            WsEpisodio.Linea = (int)ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                            WsEpisodio.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            WsEpisodio.FechaCreacion = DateTime.Now;
                            WsEpisodio.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        }
                        else
                        {
                            dtValida.Columns.Add("CustLName", typeof(String));
                            dtValida.Columns.Add("CustFName", typeof(String));
                            dtValida.Columns.Add("Purchases", typeof(String));
                            dtValida.Columns.Add("CustLName2", typeof(String));
                            dtValida.Columns.Add("CustFName2", typeof(String));
                            dtValida.Columns.Add("Purchases2", typeof(String));
                        }

                        dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

                        JSONstring = JsonConvert.SerializeObject(dtValida);
                        resultValida = (List<EpisodioAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<EpisodioAtencion>));
                        int ff = 0;

                        //BLOQUE DELETE
                        List<SS_HC_InterConsulta_Epricrisis3_FE> dataDelete = null;
                        if (Session["DataSS_HC_Anamnesis_EADelete2"] != null)
                        {
                            dataDelete = (List<SS_HC_InterConsulta_Epricrisis3_FE>)Session["DataSS_HC_Anamnesis_EADelete2"];
                        }
                        if (dataDelete != null)
                        {

                            if (resultValida.Count > 0)
                            {
                                foreach (var deletes in dataDelete)
                                {

                                    foreach (EpisodioAtencion lista in resultValida)
                                    {
                                        if (lista.SecuenciaHCE == deletes.ProcedimientoText)
                                        {
                                            if ((lista.Componente.Trim() == "500101" || lista.Componente.Trim() == "500201" || lista.Componente.Trim() == "500204" || lista.Componente.Trim() == "500203") && lista.IndicadorCobrado1 == 1)
                                            {
                                                ff = 1;
                                                // mensaje += " No Puede Modificar Interconsultas Aperturadas. " + deletes.ProcedimientoText + " ";
                                                break;
                                            }
                                            else
                                            {

                                                WsEpisodio.UsuarioCreacion = "DELETEINTER";
                                                WsEpisodio.SecuenciaHCE = lista.SecuenciaHCE;
                                                dtValida = ObtenerTramaOA.SoaValidaFacturacion(1, WsEpisodio);

                                            }
                                        }
                                    }
                                    if (ff == 0)
                                    {
                                        listaInterConsulta.Add(deletes);
                                    }
                                }
                            }
                            else
                            {
                                foreach (var objDel in dataDelete)
                                {
                                    listaInterConsulta.Add(objDel);
                                }
                            }

                        }


                        if (selectionArray4.Trim().Length > 0)
                        {
                            // ObjListaInter = (List<SS_HC_InterConsulta_Epricrisis3_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_InterConsulta_Epricrisis3_FE>));



                            ObjListarInterMiselaneos = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray4, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListarInterMiselaneos)
                            {
                                SS_HC_InterConsulta_Epricrisis3_FE objgrilla = new SS_HC_InterConsulta_Epricrisis3_FE();

                                objgrilla.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion.Trim();
                                objgrilla.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                objgrilla.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                objgrilla.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                objgrilla.CodigoComponente = ENTITY_GLOBAL.Instance.CodigoOA;
                                objgrilla.TipoOrdenAtencion = ENTITY_GLOBAL.Instance.IdOrdenAtencion;
                                objgrilla.IdDiagnostico = ENTITY_GLOBAL.Instance.LineaOrdenAtencion;
                                var secuenciales = objEntity.ValorCodigo5;
                                //foreach (var objValor in ObjCabecera)
                                //{

                                //    objgrilla.DiagnosticoText = objValor.DiagnosticoText;
                                //}
                                /******************Modificado 05/12/2016: Orlando*****************/
                                var horas = "00:00:00";
                                horas = objEntity.ValorCodigo1;
                                //  }
                                string fechaReco = "1900-01-01 " + horas;
                                objgrilla.FechaPlaneada = DateTime.Parse(fechaReco);
                                //agregado por Joel - Fecha: 15-12-16

                                objgrilla.Accion = objEntity.ACCION;
                                objgrilla.Version = "CCEPF151";
                                objgrilla.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                objgrilla.FechaCreacion = objEntity.ValorFecha;
                                //objgrilla.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;   
                                objgrilla.Estado = 2;
                                if (objgrilla.Accion != "NUEVO")
                                {
                                    objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);

                                }
                                else
                                {
                                    objgrilla.FechaCreacion = DateTime.Now;
                                    objgrilla.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }

                                objgrilla.FechaModificacion = DateTime.Now;
                                objgrilla.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;


                                if (objEntity.ValorCodigo2 == null)
                                {

                                    this.GetCmp<TextField>("txtdata").Text = "error";
                                    return showMensajeNotify("Advertencia", "Debe Ingresar una especialidad correcta", "ERROR");
                                }
                                else
                                {

                                    this.GetCmp<TextField>("txtdata").Text = "";
                                }




                                if ((resultValida != null && resultValida.Count > 0) && objgrilla.Accion != "NUEVO")
                                {
                                    foreach (EpisodioAtencion lista in resultValida)
                                    {
                                        if (lista.SecuenciaHCE == secuenciales && (lista.Componente.Trim() == "500101" || lista.Componente.Trim() == "500201" || lista.Componente.Trim() == "500204" || lista.Componente.Trim() == "500203") && lista.IndicadorCobrado1 == 1)
                                        {
                                            f1 = 1;
                                            mensaje += " No Puede Editar Interconsultas Aperturadas.";
                                            indicador = 2;
                                            break;
                                        }
                                    }
                                    if (f1 == 0)
                                    {
                                        objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);
                                        if (objEntity.ValorCodigo4.Length < 1 || objEntity.ValorCodigo4 == "")
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Error", "Debe ingresar el campo: Motivo de Interconsulta", "ERROR", false);
                                        }
                                        else { objgrilla.Observacion = Convert.ToString(objEntity.ValorCodigo4); }
                                        if (objEntity.ValorCodigo2.Trim() == "" || objEntity.ValorCodigo2.Trim() == "0")
                                        {
                                            eventoPostFormulario(true, "");
                                            return showMensajeNotifyData("Error", "Debe seleccionar una opción en Especialidad", "ERROR", false);
                                        }
                                        else
                                        { objgrilla.IdEspecialidad = Convert.ToInt32(objEntity.ValorCodigo2); }
                                        //
                                        if (!string.IsNullOrEmpty(objEntity.ValorCodigo2))
                                            if (!string.IsNullOrEmpty(objEntity.ValorCodigo3)) objgrilla.IdTipoInterConsulta = Convert.ToInt32(objEntity.ValorCodigo3);
                                        listaInterConsulta.Add(objgrilla);
                                    }
                                }
                                else
                                {
                                    objgrilla.Secuencia = Convert.ToInt32(objEntity.CodigoElemento);

                                    if (objEntity.ValorCodigo4.Length < 1 || objEntity.ValorCodigo4 == "")
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Debe ingresar el campo: Motivo de Interconsulta", "ERROR", false);
                                    }

                                    else { objgrilla.Observacion = Convert.ToString(objEntity.ValorCodigo4); }

                                    if (objEntity.ValorCodigo2.Trim() == "" || objEntity.ValorCodigo2.Trim() == "0")
                                    {
                                        eventoPostFormulario(true, "");
                                        return showMensajeNotifyData("Error", "Debe seleccionar una opción en Especialidad", "ERROR", false);
                                    }
                                    else
                                    { objgrilla.IdEspecialidad = Convert.ToInt32(objEntity.ValorCodigo2); }
                                    //
                                    if (!string.IsNullOrEmpty(objEntity.ValorCodigo2))
                                        if (!string.IsNullOrEmpty(objEntity.ValorCodigo3)) objgrilla.IdTipoInterConsulta = Convert.ToInt32(objEntity.ValorCodigo3);
                                    listaInterConsulta.Add(objgrilla);
                                }

                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            }

                        }



                        IdSecuencia = SvcEpicrisis1_FEService.setMantenimiento(objAnamEA, listaDiagnostico, listaPrincipal, listaSecundario, listaInterConsulta);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String todoo = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +

                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);     

                            Session["Data_SS_HC_DiagnosticoDelete"] = null;

                            Session["Data_SS_HC_DiagnosticoDelete"] = null;
                            Session["Data_SS_HC_SecundarioDelete"] = null;
                            Session["Data_SS_HC_PrincipalDelete"] = null;

                            Session["Data_SS_HC_ApoyoDiagnostico1"] = null;
                            Session["Data_SS_HC_ApoyoDiagnostico2"] = null;

                            Session["DataSS_HC_Anamnesis_EADelete2"] = null;

                            Session["SEC_F90EPI"] = null;
                            Session["SEC_TOP_90EPI"] = null;

                            eventoLoadPostFormulario(true, "storeBalanceNeo1", null);
                            //ActivaDescativaButtonSave(true);

                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            //LoadFormatos(containerIds, textSd);

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", todoo, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", todoo, "INFO");
                            }

                            return showMensajeNotify("Mensaje", todoo, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }



        public System.Web.Mvc.ActionResult cancelarformularios()
        {
            Log.Information("HClinicaController - cancelarformularios - Entrar");

            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
            {
                string containertemp = (string)Session["containerIdTemp"];
                string txttemp = (string)Session["textTemp"];

                return LoadFormatos(containertemp, txttemp);
                //  return showMensajeNotify("Mensaje", mensaje, "INFO");
            }


            return this.Direct();


        }





        #endregion






        #region CCEPF201_3_FORMULARIO
        public System.Web.Mvc.ActionResult CCEPF201_3_View()
        {

            try
            {
                Log.Information("HClinicaController - CCEPF201_3_View - Entrar");
                var LocalEnty = new SS_HC_Epicrisis_3();
                var Listar = new List<SS_HC_Epicrisis_3>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }

                Listar = SvcEpicrisis3Service.lista_Cabecera(LocalEnty).ToList();



                //var objListaAnt = new List<SS_HC_Medicamento_FE>();
                //SS_HC_Medicamento_FE objEnt = new SS_HC_Medicamento_FE();
                //objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                //objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                //objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                //objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                //objEnt.Accion = "LISTAR";
                //objEnt.TipoMedicamento = 1; //para Medicina
                ///*objEnt.GrupoMedicamento = grupo;*/
                //objListaAnt = SvcMedicamentoFE.MedicamentoListar(objEnt);


                //if (objListaAnt.Count == 0)
                //{
                //    var btn1 = X.GetCmp<Button>("btnAgregar");
                //    var btn2 = X.GetCmp<Button>("btnSelDesactivo0");
                //    var guardar = X.GetCmp<Button>("cmdGuardar");
                //    // var copiar = X.GetCmp<Button>("parent.App.btnCopyForm_HCE");
                //    btn1.Disable(true);
                //    btn2.Disable(true);
                //    guardar.Disable(true);
                //    // copiar.Disable(true);
                //    showMensajeBox("Por favor,Debe Agregar Suministrar Receta para EPICRISIS", "Advertencia", "WARNING");
                //}

                bool hallado = false;
                if (Listar.Count > 0)
                {




                    foreach (SS_HC_Epicrisis_3 objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            ENTITY_GLOBAL.Instance.INDICA_VALIDAMEDICAMENTO = 1;
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                        ENTITY_GLOBAL.Instance.INDICA_VALIDAMEDICAMENTO = 0;
                        if (ENTITY_GLOBAL.Instance.MedicoNombre != null)
                        {
                            LocalEnty.UsuarioCreacion = (string)ENTITY_GLOBAL.Instance.MedicoNombre;

                        }
                    }
                }

                ///////////////////////////////////////////////////
                /////ADD LA OPCIÓN DE COPIA
                //if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                //{
                //    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                //    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                //    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                //    if (objetoGen != null)
                //    {
                //        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                //        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                //        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                //        LocalEnty.Motivo = ListarCopy[0].Motivo;
                //        LocalEnty.Resumen = ListarCopy[0].Resumen;
                //        //Listar.
                //        //Listar.AddRange(Listarnew);

                //        //Listar.

                //    }
                //    Session["COPIA_FORMULARIO"] = "ACTIVA";
                //}
                ///////////////////////////////////////////////

                Session["Accion_201_3"] = LocalEnty.Accion;
                Session["SEC_TOP_90"] = 0;
                Session["Data_ExamenSolicitadoDelete"] = null;
                Session["HC_MedicamentoList"] = null;
                Session["HC_MedicamentoListEpi2"] = null;
                Session["Data_SS_HC_DiagnosticoDelete_201_3"] = null;

                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;



                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF201_3_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }


        public System.Web.Mvc.ActionResult CCEPF201_3_DIAGINGRESO(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_3_DIAGINGRESO - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaDiagIng_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaDiagIng_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                //  Listar = SvcInformeAltaFE.Listar_DiagIngreso(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                else
                {
                    LocalEnty2.ACCION = "DIAGNOSTICOFE";
                    LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                    Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                    var x = 0;
                    var y = 1;
                    foreach (var list in Listar2)
                    {
                        SS_HC_InformeAltaDiagIng_FE tempList = new SS_HC_InformeAltaDiagIng_FE();
                        tempList.Secuencia = y;
                        /*tempList.Codigo = Listar2[x].ValorCodigo7;*/
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                        tempList.DiagnosticoDescripcion = Listar2[x].ValorCodigo1;
                        tempList.Accion = "NUEVO";
                        Listar.Add(tempList);
                        x = x + 1;
                        y = y + 1;
                    }
                }




                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                       if (objetoGen != null)
                       {
                           List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                           MA_MiscelaneosDetalle ObjDet;
                           int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                           foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                           {

                               ObjDet = new MA_MiscelaneosDetalle();

                               ObjDet = objEntity;
                               ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                               ObjDet.ACCION = "NUEVO";

                               Listar.Add(ObjDet);

                               CODIGOTEMP = CODIGOTEMP + 1;
                           }


                           //  Listar.AddRange(ListarCopy);
                       }
                       Session["DATA_COPIA_FORM"] = null;
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                /////////////////////////////////////////////
                Session["InformeAlta_DiagIng"] = Listar;

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF201_3_Diagnostico()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_3_Diagnostico - Entrar");

                //ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                //var LocalEnty = new MA_MiscelaneosDetalle();
                //var Listar = new List<MA_MiscelaneosDetalle>();

                //if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA" || ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO")
                //{

                //    LocalEnty.ACCION = "EPICRISIS3_DIAG";
                //    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                //    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                //    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                //    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                //    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                //    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF150")
                //    {
                //        LocalEnty.ACCION = "DESC_MEDICO_APOYO";
                //    }

                //    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();


                //    if (Listar.Count == 0)
                //    {
                //        LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                //        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //    }

                //    //Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                //}
                //else if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE"))
                //{

                //    LocalEnty.ACCION = "EPICRISIS3_DIAG";
                //    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                //    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                //    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                //    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                //    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                //    if (ENTITY_GLOBAL.Instance.CONCEPTO == "CCEPF150")
                //    {
                //        LocalEnty.ACCION = "DESC_MEDICO_APOYO";
                //    }

                //    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //    if (Listar.Count > 0)
                //    {
                //        foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                //        {
                //            ObjTra.ACCION = "UPDATE";
                //        }
                //    }


                //    if (Listar.Count == 0)
                //    {
                //        LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                //        Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //        foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                //        {
                //            if (ObjTra.ACCION == null || ObjTra.ACCION.Trim() == "")
                //            {
                //                ObjTra.ACCION = "NUEVO";
                //            }

                //        }

                //    }



                //}
                //if ((ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO"))
                //{
                //    LocalEnty.ACCION = "DESC_MEDICO_NUEVO";
                //    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                //    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                //    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                //    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                //    ENTITY_GLOBAL.Instance.EpisodioClinicoEstado = 1;

                //    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //    foreach (MA_MiscelaneosDetalle ObjTra in Listar)
                //    {
                //        if (ObjTra.ACCION == null || ObjTra.ACCION.Trim() == "")
                //        {
                //            ObjTra.ACCION = "DETALLE";
                //        }

                //    }
                //}

                //return this.Store(Listar.ToList());


                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty2 = new MA_MiscelaneosDetalle();

                var Listar201_3FE = new List<MA_MiscelaneosDetalle>();


                LocalEnty2.ACCION = "DIAGNOSFE_201_3";
                LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty2.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                Listar201_3FE = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                if (Listar201_3FE.Count > 0)
                {


                    if (Listar201_3FE.Count > 0)
                    {

                        for (int i = 0; i < Listar201_3FE.Count; i++)
                        {

                            Listar201_3FE[i].ACCION = "UPDATE";

                        }
                    }

                    return this.Store(Listar201_3FE.ToList());

                }
                else
                {
                    ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                    var LocalEnty = new MA_MiscelaneosDetalle();
                    var Listar201_3 = new List<MA_MiscelaneosDetalle>();


                    LocalEnty.ACCION = "DIAGALTAFE_201_3";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar201_3 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();



                    if (Listar201_3.Count > 0)
                    {

                        for (int i = 0; i < Listar201_3.Count; i++)
                        {

                            Listar201_3[i].ACCION = "NUEVO";

                        }
                    }


                    return this.Store(Listar201_3.ToList());



                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF201_3_Principal(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_3_Principal - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_Epicrisis_3_Diag_Principal();
                //var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Epicrisis_3_Diag_Principal>();
                //var Listar3 = new SS_HC_InformeAltaDiagAlt_FE();
                //var Listar2 = new List<MA_MiscelaneosDetalle>();


                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                //var maxValue = SvcInformeAltaFE.Listar_DiagAlta(LocalEnty).Max(x => x.FechaModificacion);
                //Listar3 = SvcInformeAltaFE.Listar_DiagAlta(LocalEnty).OrderByDescending(x => x.FechaModificacion).First();
                Listar = SvcEpicrisis3Service.Listar_Epicrisis_3_Principal(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                //if (Listar3 != null)
                //{

                //        Listar3.Accion = "UPDATE";

                //}
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                       if (objetoGen != null)
                       {
                           List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                           MA_MiscelaneosDetalle ObjDet;
                           int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                           foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                           {

                               ObjDet = new MA_MiscelaneosDetalle();

                               ObjDet = objEntity;
                               ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                               ObjDet.ACCION = "NUEVO";

                               Listar.Add(ObjDet);

                               CODIGOTEMP = CODIGOTEMP + 1;
                           }


                           //  Listar.AddRange(ListarCopy);
                       }
                       Session["DATA_COPIA_FORM"] = null;
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                /////////////////////////////////////////////

                Session["Epicrisis_3_Principal"] = Listar;

                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF201_3_Secundario(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_3_Secundario - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_Epicrisis_3_Diag_Secundaria();
                //var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();
                //var Listar3 = new SS_HC_InformeAltaDiagAlt_FE();
                //var Listar2 = new List<MA_MiscelaneosDetalle>();


                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                //var maxValue = SvcInformeAltaFE.Listar_DiagAlta(LocalEnty).Max(x => x.FechaModificacion);
                //Listar3 = SvcInformeAltaFE.Listar_DiagAlta(LocalEnty).OrderByDescending(x => x.FechaModificacion).First();
                Listar = SvcEpicrisis3Service.Listar_Epicrisis_3_Secundario(LocalEnty).ToList();

                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                //if (Listar3 != null)
                //{

                //        Listar3.Accion = "UPDATE";

                //}
                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                       if (objetoGen != null)
                       {
                           List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                           MA_MiscelaneosDetalle ObjDet;
                           int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                           foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                           {

                               ObjDet = new MA_MiscelaneosDetalle();

                               ObjDet = objEntity;
                               ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                               ObjDet.ACCION = "NUEVO";

                               Listar.Add(ObjDet);

                               CODIGOTEMP = CODIGOTEMP + 1;
                           }


                           //  Listar.AddRange(ListarCopy);
                       }
                       Session["DATA_COPIA_FORM"] = null;
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                /////////////////////////////////////////////

                Session["Epicrisis_3_Secundario"] = Listar;

                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF201_3_EXAMENES(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF201_3_EXAMENES - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new SS_HC_InformeAltaAPD_FE();
                var LocalEnty2 = new MA_MiscelaneosDetalle();
                var Listar = new List<SS_HC_InformeAltaAPD_FE>();
                var Listar2 = new List<MA_MiscelaneosDetalle>();

                LocalEnty.Accion = "LISTAR";
                LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                /* LocalEnty.ValorCodigo5 = tipoCodigo;*/
                //    Listar = SvcInformeAltaFE.Listar_Examenes(LocalEnty).ToList();


                if (Listar.Count > 0)
                {
                    int x = 0;
                    foreach (var alg in Listar)
                    {
                        Listar[x].Accion = "UPDATE";
                        x = x + 1;
                    }
                }
                else
                {
                    LocalEnty2.ACCION = "EXAMENESLIST";
                    LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty2.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    LocalEnty2.ValorCodigo5 = tipoCodigo;
                    Listar2 = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();


                    var x = 0;
                    var y = 1;
                    foreach (var list in Listar2)
                    {
                        SS_HC_InformeAltaAPD_FE tempList = new SS_HC_InformeAltaAPD_FE();
                        tempList.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        tempList.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        tempList.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        tempList.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;


                        tempList.Secuencia = y;
                        tempList.CodigoSegus = Listar2[x].ValorCodigo7;
                        tempList.ExamenDescripcion = Listar2[x].ValorCodigo2;
                        tempList.Accion = "NUEVO";
                        Listar.Add(tempList);
                        x = x + 1;
                        y = y + 1;
                    }
                }




                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                /*   if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                   {
                       Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                       UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                       if (objetoGen != null)
                       {
                           List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                           MA_MiscelaneosDetalle ObjDet;
                           int CODIGOTEMP = (int)Session["SEC_TOP_150"];
                           foreach (MA_MiscelaneosDetalle objEntity in ListarCopy)
                           {

                               ObjDet = new MA_MiscelaneosDetalle();

                               ObjDet = objEntity;
                               ObjDet.CodigoElemento = Convert.ToString(CODIGOTEMP + 1);
                               ObjDet.ACCION = "NUEVO";

                               Listar.Add(ObjDet);

                               CODIGOTEMP = CODIGOTEMP + 1;
                           }


                           //  Listar.AddRange(ListarCopy);
                       }
                       Session["DATA_COPIA_FORM"] = null;
                       Session["COPIA_FORMULARIO"] = "INACTIVA";
                   }*/
                /////////////////////////////////////////////

                Session["InformeAlta_APD"] = Listar;

                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_DiagAlt(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_DiagAlt - Entrar");
            List<SS_HC_InformeAltaDiagAlt_FE> InformeAlta_DiagAlt = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["InformeAlta_DiagAlt"] != null)
                {
                    InformeAlta_DiagAlt = (List<SS_HC_InformeAltaDiagAlt_FE>)Session["InformeAlta_DiagAlt"];
                }

                try
                {
                    int x = 0;
                    foreach (var algo in InformeAlta_DiagAlt)
                    {
                        var temporal = new SS_HC_InformeAltaDiagAlt_FE();
                        temporal = algo;

                        if (accion.Trim() != "NUEVO")
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAlta_DiagAlt[x].Accion = "DELETE";
                            }
                        }
                        else
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAlta_DiagAlt.Remove(temporal);
                            }
                        }
                        x = x + 1;
                    }
                    Session["InformeAlta_DiagAlt"] = InformeAlta_DiagAlt;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_APD(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_APD - Entrar");
            List<SS_HC_InformeAltaAPD_FE> InformeAltaAPD = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["InformeAlta_APD"] != null)
                {
                    InformeAltaAPD = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD"];
                }

                try
                {
                    int x = 0;
                    foreach (var algo in InformeAltaAPD)
                    {
                        var temporal = new SS_HC_InformeAltaAPD_FE();
                        temporal = algo;

                        if (accion.Trim() != "NUEVO")
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAltaAPD[x].Accion = "DELETE";
                            }
                        }
                        else
                        {
                            if (algo.Secuencia == Convert.ToInt32(secuencia))
                            {
                                InformeAltaAPD.Remove(temporal);
                            }
                        }
                        x = x + 1;
                    }
                    Session["InformeAlta_APD"] = InformeAltaAPD;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult Save_InformeAlta1_3(String selectionArray0, String selectionArray1, String selectionArray2, String selectionArray3, string Evento, String Version)
        {
            // List<HC_Medicamento> ObjLista1 = (List<HC_Medicamento>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<HC_Medicamento>));
            List<SS_HC_InformeAlta_FE> ObjLista2 = new List<SS_HC_InformeAlta_FE>();
            List<SS_HC_InformeAltaDiagAlt_FE> ObjLista3 = new List<SS_HC_InformeAltaDiagAlt_FE>();


            /* if (selectionArray2.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/
            Log.Information("HClinicaController - Save_InformeAlta1_3 - Entrar");
            if (Evento == "Server")
            {
                try
                {
                    //transact
                    SS_HC_InformeAlta_FE cabeceraMed = new SS_HC_InformeAlta_FE();
                    List<SS_HC_InformeAltaDiagIng_FE> InformeAltaDiagIng = new List<SS_HC_InformeAltaDiagIng_FE>();
                    List<SS_HC_InformeAltaDiagAlt_FE> InformeAltaDiagAlt = new List<SS_HC_InformeAltaDiagAlt_FE>();
                    List<SS_HC_InformeAltaAPD_FE> InformeAltaAPD = new List<SS_HC_InformeAltaAPD_FE>();


                    int IdSecuencia = 0;
                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {
                        SS_HC_InformeAlta_FE objEnt;
                        SS_HC_Indicaciones_FE objEntDeta;
                        string mensage = "";
                        string cadenas = "";
                        String[] cadArray;
                        int SecuenciaMedica = 0;
                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {
                        cabeceraMed.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        cabeceraMed.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        cabeceraMed.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        cabeceraMed.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                        if (selectionArray0.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_InformeAlta_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_InformeAlta_FE>));

                            cabeceraMed.IdMedico = ObjLista2[0].IdMedico;
                            cabeceraMed.IdTipoAlta = ObjLista2[0].IdTipoAlta;
                            cabeceraMed.IdPronostico = ObjLista2[0].IdPronostico;
                            cabeceraMed.Procedimientos = ObjLista2[0].Procedimientos;
                            cabeceraMed.Accion = (string)Session["Accion_200"];
                            cabeceraMed.Version = "CCEPF201_3";
                        }





                        InformeAltaDiagIng = (List<SS_HC_InformeAltaDiagIng_FE>)Session["InformeAlta_DiagIng"];
                        var InformeAltaDiagAlt3 = (List<SS_HC_InformeAltaDiagAlt_FE>)Session["InformeAlta_DiagAlt"];
                        var InformeAltaDiagAlt2 = new List<SS_HC_InformeAltaDiagAlt_FE>();

                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista3 = (List<SS_HC_InformeAltaDiagAlt_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_InformeAltaDiagAlt_FE>));

                            foreach (var algo in ObjLista3)
                            {

                                if (algo.Accion == "NUEVO")
                                {
                                    SS_HC_InformeAltaDiagAlt_FE tmp = new SS_HC_InformeAltaDiagAlt_FE();

                                    tmp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                    tmp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                    tmp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                    tmp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                    tmp.Secuencia = algo.Secuencia;
                                    tmp.Codigo = algo.Codigo;
                                    tmp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                    tmp.Accion = algo.Accion;

                                    tmp.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                    tmp.FechaCreacion = DateTime.Now;

                                    InformeAltaDiagAlt2.Add(tmp);//error

                                }

                            }
                            if (InformeAltaDiagAlt3 != null)
                            {
                                InformeAltaDiagAlt2.AddRange(InformeAltaDiagAlt3);
                            }
                        }


                        InformeAltaAPD = (List<SS_HC_InformeAltaAPD_FE>)Session["InformeAlta_APD"];



                        //}

                        IdSecuencia = SvcInformeAltaFE.setMantenimientoGrupo(cabeceraMed, InformeAltaDiagIng, InformeAltaDiagAlt2, InformeAltaAPD);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);                        
                            Session["HC_MedicamentoList"] = null;
                            Session["HC_MedicamentoDetalleList"] = null;
                            Session["HC_MedicamentoDetalleListDELETE"] = null;
                            eventoLoadPostFormulario(true, "storeExamenes2", null);
                            //ActivaDescativaButtonSave(true);
                            eventoPostFormulario(true, "");

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_Examen(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_Examen - Entrar");
            List<SS_HC_ExamenSolicitadoFE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ExamenSolicitadoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenSolicitadoFE>();
                }
                SS_HC_ExamenSolicitadoFE objDelete = new SS_HC_ExamenSolicitadoFE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    objDelete.IdProcedimientoCab = 0;//Convert.ToInt32(cadenas);
                    objDelete.Accion = "DELETE";
                    objDelete.SecuenciaCab = Convert.ToInt32(secuencia);
                    dataDelete.Add(objDelete);
                    Session["Data_ExamenSolicitadoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_Principal(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_Principal - Entrar");
            ENTITY_GLOBAL.Instance.CheckPresseDelete = true;

            List<SS_HC_Epicrisis_3_Diag_Principal> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_PrincipalDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diag_Principal>)Session["Data_SS_HC_PrincipalDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diag_Principal>();
                }
                SS_HC_Epicrisis_3_Diag_Principal objDelete = new SS_HC_Epicrisis_3_Diag_Principal();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.IdEpisodioAtencion = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;
                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_PrincipalDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_Secundario(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_Secundario - Entrar");
            List<SS_HC_Epicrisis_3_Diag_Secundaria> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_SecundarioDelete"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Session["Data_SS_HC_SecundarioDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();
                }
                SS_HC_Epicrisis_3_Diag_Secundaria objDelete = new SS_HC_Epicrisis_3_Diag_Secundaria();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";


                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;
                    //objDelete.IdEpisodioAtencion = Convert.ToInt32(secuencia);

                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_SecundarioDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult CCEPF201_3_addEliminar_Diag(String MODO, String codigo, String secuencia)
        {
            Log.Information("HClinicaController - CCEPF201_3_addEliminar_Diag - Entrar");
            List<SS_HC_Epicrisis_3_Diagnostico> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_SS_HC_DiagnosticoDelete_201_3"] != null)
                {
                    dataDelete = (List<SS_HC_Epicrisis_3_Diagnostico>)Session["Data_SS_HC_DiagnosticoDelete_201_3"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_Epicrisis_3_Diagnostico>();
                }
                SS_HC_Epicrisis_3_Diagnostico objDelete = new SS_HC_Epicrisis_3_Diagnostico();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {

                    objDelete.Accion = "DELETE";
                    objDelete.Secuencia = Convert.ToInt32(secuencia);

                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    //objDelete.Secuencia = Convert.ToInt32(secuencia);
                    objDelete.Codigo = codigo;

                    //objDelete.IdFormaInicio = Convert.ToInt32(secuencia);

                    dataDelete.Add(objDelete);
                    Session["Data_SS_HC_DiagnosticoDelete_201_3"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);

                }
            }
            return this.Direct();
        }






        public System.Web.Mvc.ActionResult Save_201_3(String selectionArray0, String selectionArray1, String selectionArray2, String selectionArray3, String selectionArray4, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_201_3 - Entrar");

            List<SS_HC_Epicrisis_3_Diagnostico> ObjLista1 = new List<SS_HC_Epicrisis_3_Diagnostico>();
            List<SS_HC_Epicrisis_3_Diag_Principal> ObjLista2 = new List<SS_HC_Epicrisis_3_Diag_Principal>();
            List<SS_HC_Epicrisis_3_Diag_Secundaria> ObjLista3 = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();

            List<SS_HC_Medicamento_FE_Epi2> ObjLista4 = new List<SS_HC_Medicamento_FE_Epi2>();


            List<SS_HC_Epicrisis_3> ObjLista0 = new List<SS_HC_Epicrisis_3>();

            SS_HC_Epicrisis_3 objAnamEA = new SS_HC_Epicrisis_3();

            string cadenas = "";
            String[] cadArray;


            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_Epicrisis_3_Diagnostico> listaDiagnostico = new List<SS_HC_Epicrisis_3_Diagnostico>();
                    List<SS_HC_Epicrisis_3_Diag_Principal> listaPrincipal = new List<SS_HC_Epicrisis_3_Diag_Principal>();
                    List<SS_HC_Epicrisis_3_Diag_Secundaria> listaSecundario = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();

                    List<SS_HC_Medicamento_FE_Epi2> listaMEDICAMENTOS = new List<SS_HC_Medicamento_FE_Epi2>();

                    List<BE_Medicamento_FE> MEDICAMENTOS = new List<BE_Medicamento_FE>();



                    if (selectionArray4.Trim().Length > 0)
                    {
                        ObjLista4 = (List<SS_HC_Medicamento_FE_Epi2>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray4, typeof(List<SS_HC_Medicamento_FE_Epi2>));

                        // MEDICAMENTOS = (List<BE_Medicamento_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray4, typeof(List<BE_Medicamento_FE>));



                    }

                    if (Session["HC_MedicamentoListEpi2"] != null)
                    {

                        // addDataUpdateMedicamentosEpicrisis3("UPDATEINDIV", selectionArray4, 1);

                        List<BE_MedicamentoEpicrisis_FE> ObjListaUPD = (List<BE_MedicamentoEpicrisis_FE>)Session["HC_MedicamentoListEpi2"];


                        foreach (var objEntity1 in ObjListaUPD)
                        {

                            SS_HC_Medicamento_FE_Epi2 objEnt = new SS_HC_Medicamento_FE_Epi2();

                            //objEnt = objEntity1;
                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                            objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                            objEnt.IdUnidadMedida = objEntity1.IdUnidadMedida;
                            objEnt.Linea = objEntity1.Linea;
                            objEnt.Familia = objEntity1.Familia;
                            objEnt.SubFamilia = objEntity1.SubFamilia;
                            objEnt.TipoComponente = objEntity1.TipoComponente;
                            objEnt.CodigoComponente = objEntity1.CodigoComponente;
                            objEnt.IdVia = objEntity1.IdVia;
                            objEnt.Dosis = objEntity1.Dosis;
                            objEnt.DiasTratamiento = objEntity1.DiasTratamiento;
                            objEnt.Frecuencia = objEntity1.Frecuencia;
                            objEnt.Cantidad = objEntity1.Cantidad;
                            objEnt.IndicadorEPS = objEntity1.IndicadorEPS;
                            objEnt.TipoReceta = objEntity1.TipoReceta;
                            objEnt.Forma = objEntity1.Forma;
                            objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                            objEnt.TipoComida = objEntity1.TipoComida;
                            objEnt.VolumenDia = objEntity1.VolumenDia;
                            objEnt.FrecuenciaToma = objEntity1.FrecuenciaToma;
                            objEnt.Presentacion = objEntity1.Presentacion;
                            objEnt.Hora = objEntity1.Hora;
                            objEnt.Periodo = objEntity1.Periodo;
                            objEnt.UnidadTiempo = objEntity1.UnidadTiempo;
                            objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                            objEnt.Comentario = selectionArray2;
                            objEnt.CodAlmacen = objEntity1.CodAlmacen; //ANGEL 16/07/2019
                            objEnt.Version = Version;
                            objEnt.Secuencia = objEntity1.Secuencia;
                            objEnt.Accion = objEntity1.Accion;
                            objEnt.Indicacion = objEntity1.Indicacion;
                            objEnt.tipoRecetaMedica = objEntity1.tipoRecetaMedica;
                            listaMEDICAMENTOS.Add(objEnt);

                        }



                    }
                    else
                    {

                        foreach (var objEntity1 in ObjLista4)
                        {

                            SS_HC_Medicamento_FE_Epi2 objEnt = new SS_HC_Medicamento_FE_Epi2();

                            //objEnt = objEntity1;


                            objEnt.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                            objEnt.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                            objEnt.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                            objEnt.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;



                            objEnt.TipoMedicamento = objEntity1.TipoMedicamento;// 1;//OBS:  TIPO MEDICINA
                            objEnt.IdUnidadMedida = objEntity1.IdUnidadMedida;
                            objEnt.Linea = objEntity1.Linea;
                            objEnt.Familia = objEntity1.Familia;
                            objEnt.SubFamilia = objEntity1.SubFamilia;
                            objEnt.TipoComponente = objEntity1.TipoComponente;
                            objEnt.CodigoComponente = objEntity1.CodigoComponente;

                            objEnt.IdVia = objEntity1.IdVia;
                            objEnt.Dosis = objEntity1.Dosis;

                            objEnt.DiasTratamiento = objEntity1.DiasTratamiento;
                            objEnt.Frecuencia = objEntity1.Frecuencia;
                            objEnt.Cantidad = objEntity1.Cantidad;
                            objEnt.IndicadorEPS = objEntity1.IndicadorEPS;
                            objEnt.TipoReceta = objEntity1.TipoReceta;
                            objEnt.Forma = objEntity1.Forma;
                            objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                            objEnt.TipoComida = objEntity1.TipoComida;
                            objEnt.VolumenDia = objEntity1.VolumenDia;
                            objEnt.FrecuenciaToma = objEntity1.FrecuenciaToma;
                            objEnt.Presentacion = objEntity1.Presentacion;
                            objEnt.Hora = objEntity1.Hora;
                            objEnt.Periodo = objEntity1.Periodo;
                            objEnt.UnidadTiempo = objEntity1.UnidadTiempo;


                            objEnt.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objEnt.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            //objEnt.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                            objEnt.GrupoMedicamento = objEntity1.GrupoMedicamento;
                            objEnt.Comentario = selectionArray2;
                            objEnt.CodAlmacen = objEntity1.CodAlmacen; //ANGEL 16/07/2019
                            objEnt.Version = Version;
                            objEnt.Accion = "NUEVO";
                            listaMEDICAMENTOS.Add(objEnt);

                        }


                    }







                    if (selectionArray0.Trim().Length > 0)
                    {
                        ObjLista0 = (List<SS_HC_Epicrisis_3>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Epicrisis_3>));
                    }



                    objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objAnamEA.IdEpicrisis3 = ObjLista0[0].IdEpicrisis3;
                    objAnamEA.Complicaciones = ObjLista0[0].Complicaciones;
                    objAnamEA.Pronostico = ObjLista0[0].Pronostico;
                    objAnamEA.TipoAlta = ObjLista0[0].TipoAlta;
                    objAnamEA.CondicionEgreso = ObjLista0[0].CondicionEgreso;
                    objAnamEA.CausaMuerte = ObjLista0[0].CausaMuerte;
                    objAnamEA.PlanAlta = ObjLista0[0].PlanAlta;
                    objAnamEA.Necropsia = ObjLista0[0].Necropsia.Value;
                    objAnamEA.Estado = ObjLista0[0].Estado;
                    objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAnamEA.FechaCreacion = DateTime.Now;
                    objAnamEA.FechaModificacion = DateTime.Now;
                    objAnamEA.Accion = (string)Session["Accion_201_3"];
                    objAnamEA.Version = "EPI1";

                    //objAnamEA.Accion = (string)Session["Accion_402"];

                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {


                        if (Session["Data_SS_HC_DiagnosticoDelete_201_3"] != null)
                        {
                            List<SS_HC_Epicrisis_3_Diagnostico> listaDel = (List<SS_HC_Epicrisis_3_Diagnostico>)Session["Data_SS_HC_DiagnosticoDelete_201_3"];
                            foreach (var result in listaDel)
                            {
                                listaDiagnostico.Add(result);
                            }
                        }

                        if (selectionArray1.Trim().Length > 0)
                        {
                            //  ObjLista1 = (List<SS_HC_Epicrisis_3_Diagnostico>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_Epicrisis_3_Diagnostico>));

                            List<MA_MiscelaneosDetalle> ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<MA_MiscelaneosDetalle>));


                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                var Entity = new SS_HC_Epicrisis_3_Diagnostico();

                                Entity.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                Entity.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                Entity.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                Entity.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                Entity.Version = "CCEPF201_3";
                                Entity.DiagnosticoDescripcion = objEntity.ValorCodigo1;

                                cadArray = objEntity.ValorCodigo1.Trim().Split('|');

                                cadenas = cadArray[1].Replace("[", "");
                                cadenas = cadenas.Replace("]", "").Trim();
                                Entity.Codigo = cadenas;
                                Entity.Accion = objEntity.ACCION;
                                listaDiagnostico.Add(Entity);
                            }
                        }



                        if (Session["Data_SS_HC_PrincipalDelete"] != null)
                        {
                            List<SS_HC_Epicrisis_3_Diag_Principal> listaDel = (List<SS_HC_Epicrisis_3_Diag_Principal>)Session["Data_SS_HC_PrincipalDelete"];
                            foreach (var result in listaDel)
                            {
                                listaPrincipal.Add(result);
                            }
                        }


                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_Epicrisis_3_Diag_Principal>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Epicrisis_3_Diag_Principal>));


                            foreach (var algo in ObjLista2)
                            {
                                SS_HC_Epicrisis_3_Diag_Principal temp = new SS_HC_Epicrisis_3_Diag_Principal();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.Accion = algo.Accion;
                                temp.Codigo = algo.Codigo;
                                temp.Secuencia = algo.Secuencia;
                                temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                listaPrincipal.Add(temp);

                            }

                        }

                        if (Session["Data_SS_HC_SecundarioDelete"] != null)
                        {
                            List<SS_HC_Epicrisis_3_Diag_Secundaria> listaDel = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Session["Data_SS_HC_SecundarioDelete"];
                            foreach (var result in listaDel)
                            {
                                listaSecundario.Add(result);
                            }
                        }

                        if (selectionArray3.Trim().Length > 0)
                        {
                            ObjLista3 = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_Epicrisis_3_Diag_Secundaria>));


                            foreach (var algo in ObjLista3)
                            {
                                SS_HC_Epicrisis_3_Diag_Secundaria temp = new SS_HC_Epicrisis_3_Diag_Secundaria();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                temp.Accion = algo.Accion;
                                temp.Codigo = algo.Codigo;
                                temp.Secuencia = algo.Secuencia;
                                temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                                listaSecundario.Add(temp);

                            }

                        }


                        // }

                        IdSecuencia = SvcEpicrisis3Service.setMantenimiento(objAnamEA, listaDiagnostico, listaPrincipal, listaSecundario, listaMEDICAMENTOS);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");

                            //X.Msg.Notify("Ventana de Mensajes ", "Satisfactoriamente se " + mensage + ". Nro Atención : " + IdEpisodioAtencionID.ToString().Trim()).Show();
                            //ActivaDescativaButtonSave(true);     

                            Session["Data_SS_HC_DiagnosticoDelete"] = null;
                            Session["Data_SS_HC_SecundarioDelete"] = null;
                            Session["Data_SS_HC_PrincipalDelete"] = null;
                            Session["Data_SS_HC_DiagnosticoDelete_201_3"] = null;




                            Session["HC_MedicamentoList"] = null;


                            eventoLoadPostFormulario(true, "storeBalanceNeo1", null);
                            //ActivaDescativaButtonSave(true);

                            eventoPostFormulario(true, "");
                            //return showMensajeBox(mensaje, "Ventana de Mensajes ", "INFO");
                            //LoadFormatos(containerIds, textSd);

                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }

                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }








        #endregion






        #region CCEPF403_2_FORMULARIO

        public System.Web.Mvc.ActionResult CCEPF403_2_View()
        {
            Log.Information("HClinicaController - CCEPF403_2_View - Entrar");
            Session["SEC_TOP_403_2"] = 0;
            try
            {

                var LocalEnty = new SS_HC_ExamenSolicitadoFE();

                var Listar = new List<SS_HC_ExamenSolicitadoFE>();
                LocalEnty.Accion = "LISTAR";
                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;

                }

                var LocalEntyInter = new MA_MiscelaneosDetalle();
                var ListarInter = new List<MA_MiscelaneosDetalle>();

                LocalEntyInter.ACCION = "INTERCONSUKARDEX";
                LocalEntyInter.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEntyInter.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEntyInter.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEntyInter.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                ListarInter = SvcMiscelaneos.GetUpListadoServicios(LocalEntyInter).ToList();
                Listar = SvcExamenSolicitadoServiceFE.Examen_Listar(LocalEnty).ToList();
                bool hallado = false;


                if (Listar.Count > 0)
                {

                    foreach (SS_HC_ExamenSolicitadoFE objEntity in Listar)
                    {


                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }
                else if (ListarInter.Count > 0)
                {
                    SS_HC_ExamenSolicitadoFE oj = new SS_HC_ExamenSolicitadoFE();
                    LocalEnty = oj;
                    hallado = true;
                    LocalEnty.Accion = "UPDATE";
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                    }
                }

                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }



                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();
                    ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 1;
                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                        LocalEnty.Motivo = ListarCopy[0].Motivo;
                        LocalEnty.Resumen = ListarCopy[0].Resumen;
                        //Listar.
                        //Listar.AddRange(Listarnew);

                        //Listar.

                    }
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                /////////////////////////////////////////////



                Session["Data_ExamenSolicitadoDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return View("FormulariosExtras/CCEPF403_2_View", "", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF403_2_Accion1()
        {
            Log.Information("HClinicaController - CCEPF403_2_Accion1 - Entrar");

            Session["SEC_TOP_150"] = 0;
            try
            {
                var LocalEnty = new SS_HC_ExamenSolicitadoFE();
                var Listar = new List<SS_HC_ExamenSolicitadoFE>();

                LocalEnty.Accion = "LISTAR";

                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }
                else if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado == 1)
                {
                    LocalEnty.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    LocalEnty.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    LocalEnty.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    LocalEnty.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                }


                Listar = SvcExamenSolicitadoServiceFE.Examen_Listar(LocalEnty).ToList();

                bool hallado = false;
                if (Listar.Count > 0)
                {

                    foreach (SS_HC_ExamenSolicitadoFE objEntity in Listar)
                    {
                        LocalEnty = objEntity;
                        hallado = true;
                        LocalEnty.Accion = "UPDATE";
                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                        {
                            LocalEnty.Accion = "VISTA";
                        }
                        else
                        {
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        }
                    }

                }


                if (!hallado)
                {
                    if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "VISTA")
                    {
                        LocalEnty.Accion = "VISTA";
                    }
                    else
                    {
                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                        LocalEnty.Accion = "NUEVO";
                    }
                }

                /////////////////////////////////////////////////
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    //var Listarnew = new List<SS_HC_ExamenSolicitadoFE>();

                    object objetoGen = getObjetoCabeceras_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_EXAMENSOLICITADO_F2, Listar);
                    if (objetoGen != null)
                    {
                        List<SS_HC_ExamenSolicitadoFE> ListarCopy = (List<SS_HC_ExamenSolicitadoFE>)objetoGen;

                        /*Listarnew[0].Motivo = ListarCopy[0].Motivo;
                        Listarnew[0].Resumen = ListarCopy[0].Resumen;*/
                        LocalEnty.Motivo = ListarCopy[0].Motivo;
                        LocalEnty.Resumen = ListarCopy[0].Resumen;
                        //Listar.
                        //Listar.AddRange(Listarnew);

                        //Listar.

                    }
                    Session["COPIA_FORMULARIO"] = "ACTIVA";
                }
                /////////////////////////////////////////////



                Session["Data_ExamenSolicitadoDelete"] = null;
                /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
                Session["MENSAJES_VALFORM"] = null;
                cargarPropiedadesFormulario(true);
                setPropiedadesFormulario(true);
                /***************************************************/
                return PartialView("FormulariosExtras/CCEPF403_2_View", LocalEnty);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Ocurrió una excepción en la ejecución.";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }

        public System.Web.Mvc.ActionResult CCEPF403_2_Save_ExamenFE(SS_HC_ExamenSolicitadoFE objExamSol, String selectionArray1, String CCEPF150_Save_ExamenFE, String text)
        {
            Log.Information("HClinicaController - CCEPF403_2_Save_ExamenFE - Entrar");
            //X.Msg.Alert("ASP.NET C#", "CCEPF150_Save_ExamenFE ").Show();
            // TRABA
            String valoreArray;
            List<MA_MiscelaneosDetalle> ObjListar;
            //if (text == "0")
            //{
            //    Session["ValoresTemporal"] = selectionArray1;
            //    ENTITY_GLOBAL.Instance.INTERUPTOR = 1;
            //}
            //else
            //{

            valoreArray = (string)Session["Valores_CCEPF403_2"];
            // TRANSACCIONALES
            SS_HC_ExamenSolicitadoFE ObjDet = new SS_HC_ExamenSolicitadoFE();
            List<SS_HC_ExamenSolicitadoFE> lstDetalle = new List<SS_HC_ExamenSolicitadoFE>();


            if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
            {
                X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
            }
            else
            {
                try
                {
                    int registro = -1;
                    objExamSol.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    objExamSol.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    objExamSol.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    objExamSol.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    objExamSol.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
                    objExamSol.FechaModificacion = DateTime.Now;
                    objExamSol.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objExamSol.Version = "CCEPF403_2";
                    if (objExamSol.Accion == "NUEVO")
                    {
                        objExamSol.Estado = 2;
                        objExamSol.FechaCreacion = DateTime.Now;
                        objExamSol.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    }

                    registro = 1;
                    string mensage = "";
                    string cadenas = "";
                    String[] cadArray;
                    if (registro > 0)
                    {
                        //BLOQUE DELETE
                        List<SS_HC_ExamenSolicitadoFE> dataDelete = null;
                        if (Session["Data_ExamenSolicitadoDelete"] != null)
                        {
                            dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                        }
                        if (dataDelete != null)
                        {
                            foreach (var objDel in dataDelete)
                            {
                                lstDetalle.Add(objDel);
                            }
                        }

                        if (objExamSol.Accion == "NUEVO")
                        {

                            //Solucion de la mejora
                            if (valoreArray == "[]" || valoreArray == null)
                            {
                                //eventoPostFormulario(true, "");
                                return showMensajeNotifyData("Error", "Debe ingresar datos en <Detalle - Proc. Médicos SEGUS>", "ERROR", false);

                            }


                        }

                        //if (objExamSol.Accion == "UPDATE")
                        //{

                        //    if (objExamSol.Motivo != null && objExamSol.Resumen.Length != null && (valoreArray == null || valoreArray == "[]"))
                        //    {
                        //        return showMensajeNotifyData("Error", "Debe ingresar datos en <Detalle - Proc. Médicos SEGUS>", "ERROR", false);

                        //    }
                        //}
                        #region Region_Detalle

                        if (valoreArray != null)
                        {
                            ObjListar = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(valoreArray, typeof(List<MA_MiscelaneosDetalle>));
                            foreach (MA_MiscelaneosDetalle objEntity in ObjListar)
                            {
                                ObjDet = new SS_HC_ExamenSolicitadoFE();
                                if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION != "NUEVO") ObjDet.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                ObjDet.Accion = objEntity.ACCION;
                                ObjDet.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                ObjDet.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                ObjDet.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                ObjDet.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;

                                //cadArray = objEntity.ValorCodigo1.Trim().Split('|');
                                //cadenas = cadArray[1].Replace("[", "");
                                //cadenas = cadenas.Replace("]", "").Trim();
                                //ObjDet.IdProcedimientoCab = Convert.ToInt32(cadenas);
                                //  ObjDet.FechaSolitadaCab = Convert.ToDateTime(objEntity.ValorFecha);
                                ObjDet.CantidadCab = objEntity.ValorEntero6;
                                DateTime hoy = DateTime.Today;
                                if (objEntity.ValorFecha < hoy)
                                { eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "La fecha solicitada no puede ser menor a la fecha actual.", "ERROR", false); }
                                else { ObjDet.FechaSolitadaCab = Convert.ToDateTime(objEntity.ValorFecha); }

                                if (objEntity.DescripcionExtranjera.Length > 200)
                                {
                                    eventoPostFormulario(true, ""); return showMensajeNotifyData("Error", "El campo especificaciones solo admite 200 caracteres.", "ERROR", false);
                                }



                                //ObjDet.IdEspecialidadCab = (int)ENTITY_GLOBAL.Instance.IdEspecialidad;
                                ObjDet.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                ObjDet.IndicadorEPSCab = objEntity.ValorEntero7;
                                ObjDet.TipoCodigoCab = objEntity.ValorCodigo6;
                                ObjDet.CodigoSegusCab = objEntity.ValorCodigo7;
                                ObjDet.CodigoComponenteCab = objEntity.ValorCodigo5; //COrresponde al código CPT
                                if (ObjDet.CodigoComponenteCab == null || ObjDet.CodigoComponenteCab == "")
                                {
                                    ObjDet.CodigoComponenteCab = objEntity.ValorCodigo7; //CASO SEGUS
                                }
                                ObjDet.EspecificacionesCab = objEntity.DescripcionExtranjera;
                                ObjDet.ObservacionCab = objEntity.ValorCodigo4;
                                //ADD DESDE LA SELECCIÓN DEL PACIENTE
                                if (Session["VW_ATENCIONPACIENTE_GEN_SELECC"] != null)
                                {
                                    VW_ATENCIONPACIENTE_GENERAL EpiAtencionTemp = (VW_ATENCIONPACIENTE_GENERAL)Session["VW_ATENCIONPACIENTE_GEN_SELECC"];
                                    ObjDet.IdEspecialidadCab = EpiAtencionTemp.IdEspecialidad;
                                }
                                if ((objEntity.ACCION.Trim() + "") != "NUEVO")
                                {
                                    ObjDet.SecuenciaCab = Convert.ToInt32(objEntity.CodigoElemento);
                                }

                                if (ObjDet.Accion == "UPDATEDETALLE")
                                {
                                    ObjDet.FechaModificacion = DateTime.Now;
                                    ObjDet.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                }
                                lstDetalle.Add(ObjDet);
                                registro = 1;
                                ENTITY_GLOBAL.Instance.INTERUPTOR = null;

                            }

                        }
                        else
                        {
                            if (objExamSol.Accion == "UPDATE")
                            {
                                if (lstDetalle.Count == 0)
                                {
                                    return showMensajeNotifyData("Error", "Debe ingresar datos en <Detalle - Proc. Médicos SEGUS>", "ERROR", false);
                                }
                            }
                        }

                        #endregion


                        //    registro = SvcExamenSolicitadoServiceFE.setMantenimiento(objExamSol, lstDetalle);
                        //registro = SvcExamenSolicitadoServiceFE.setMantenimiento(objExamSol, ObjCabecera, ObjDetalle);

                        if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                        else mensage = " actualizó ";

                        ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                        ENTITY_GLOBAL.Instance.FORMULARIOREGISTRO_ID = registro;
                        ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;
                        String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                            UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                            ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                            ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                        ENTITY_GLOBAL.Instance.INTERUPTOR = null;


                        // Session["ValoresTemporal"] = null;
                        Session.Remove("ValoresTemporal");
                        // Session["Data_ExamenSolicitadoDelete"] = null;

                        Session["COPIA_FORMULARIO"] = null;
                        Session["DATA_COPIA_FORM"] = null;
                        Session.Remove("Data_ExamenSolicitadoDelete");
                        Session.Remove("COPIA_FORMULARIO");
                        Session.Remove("DATA_COPIA_FORM");
                        ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                        // Session["Valores_CCEPF150"] = null;
                        Session.Remove("Valores_CCEPF403_2");
                        eventoLoadPostFormulario(true, "storeExamenes", null);
                        eventoPostFormulario(true, "");
                        if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                        {
                            string containertemp = (string)Session["containerIdTemp"];
                            string txttemp = (string)Session["textTemp"];

                            LoadFormatos(containertemp, txttemp);
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }
                        else
                        {
                            return showMensajeNotify("Mensaje", mensaje, "INFO");
                        }





                    }
                    else
                    {
                        //eventoPostFormulario(false, "");
                        return showMensajeNotifyData("Error", "Sucedió un error inesperado", "ERROR", false);
                    }


                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);

                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            //}

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF403_2_addEliminar_Examen(String MODO, String codigo, String secuencia, string accion)
        {
            Log.Information("HClinicaController - CCEPF403_2_addEliminar_Examen - Entrar");
            List<SS_HC_ExamenSolicitadoFE> dataDelete = null;
            if ((codigo + "").Length > 0)
            {
                if (Session["Data_ExamenSolicitadoDelete"] != null)
                {
                    dataDelete = (List<SS_HC_ExamenSolicitadoFE>)Session["Data_ExamenSolicitadoDelete"];
                }
                if (dataDelete == null)
                {
                    dataDelete = new List<SS_HC_ExamenSolicitadoFE>();
                }
                SS_HC_ExamenSolicitadoFE objDelete = new SS_HC_ExamenSolicitadoFE();
                objDelete.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                objDelete.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                objDelete.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                objDelete.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                try
                {
                    //string[] cadArray = codigo.Trim().Split('|');
                    //string cadenas = cadArray[1].Replace("[", "");
                    //cadenas = cadenas.Replace("]", "").Trim();

                    if (accion.Trim() != "NUEVO")
                    {
                        objDelete.IdProcedimientoCab = 0;//Convert.ToInt32(cadenas);
                        objDelete.Accion = "DELETE";
                        objDelete.SecuenciaCab = Convert.ToInt32(secuencia);
                        dataDelete.Add(objDelete);
                    }

                    Session["Data_ExamenSolicitadoDelete"] = dataDelete;
                }
                catch (Exception ee)
                {
                    Log.Error(ee, ee.Message);
                    /**SE puede agregar alerta si se llama a un metodo adecuado:*/
                    //e.GetType;
                }
            }
            //X.Msg.Alert("Metodo CCEPF150_addEliminar_Examen", "Antes del .. return this.Direct() ..").Show();
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEPF403_2_EXAMENES(String tipoCodigo)
        {
            try
            {
                Log.Information("HClinicaController - CCEPF403_2_EXAMENES - Entrar");
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();
                LocalEnty.ACCION = "EXAMENESLISTKARDEX";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                LocalEnty.ValorCodigo5 = tipoCodigo;
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //if (Listar.Count == 0)
                //{
                //    LocalEnty.ACCION = "EXAMENESLISK";
                //    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                //}
                if (Listar.Count > 0)
                {
                    int x = 0;
                    //  int top = 0; Session["SEC_TOP_150"] = 0;
                    foreach (var objEntity in Listar)
                    {

                        Listar[x].ACCION = "UPDATEDETALLE";
                        //if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_403_2"])
                        //{
                        //    Session["SEC_TOP_403_2"] = Convert.ToInt32(Listar[x].CodigoElemento);
                        //}
                        x = x + 1;
                    }
                }
                else
                {

                    var LocalEnty2 = new MA_MiscelaneosDetalle();


                    LocalEnty2.ACCION = "EXALISTKARDEXUlTVISITA";
                    LocalEnty2.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    //  LocalEnty2.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                    LocalEnty2.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                    LocalEnty2.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    //LocalEnty2.ValorCodigo5 = tipoCodigo;
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty2).ToList();

                    if (Listar.Count > 0)
                    {
                        int x = 0;
                        foreach (var objEntity in Listar)
                        {
                            Listar[x].ValorCodigo1 = "";
                            Listar[x].ValorCodigo5 = "1";
                            //if (LocalEnty.ACCION == "EXAMENESLISTKARDEX")
                            //{
                            //    Listar[x].ACCION = "UPDATEDETALLE";
                            //}
                            //else
                            // {
                            Listar[x].ACCION = "NUEVO";
                            //}
                            //if (Convert.ToInt32(Listar[x].CodigoElemento) > (int)Session["SEC_TOP_403_2"])
                            //{
                            //    Session["SEC_TOP_403_2"] = Convert.ToInt32(Listar[x].CodigoElemento);
                            //}

                            x = x + 1;
                        }
                    }

                }


                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult CCEPF403_2_ENFER_ACTUAL()
        {
            try
            {
                Log.Information("HClinicaController - CCEPF403_2_ENFER_ACTUAL - Entrar");
                ////////////////
                ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                var LocalEnty = new MA_MiscelaneosDetalle();
                var Listar = new List<MA_MiscelaneosDetalle>();


                LocalEnty.ACCION = "INTERCONSUKARDEX";
                LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.EpisodioClinico.ToString().Trim();
                LocalEnty.ValorCodigo4 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                if (Listar.Count > 0)
                {
                    //  if (Listar.Count == 0)
                    //  {
                    //     LocalEnty.ACCION = "INTERCONSUFE";
                    //    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();
                    // }
                    for (int i = 0; i < Listar.Count; i++)
                    {
                        //  if (LocalEnty.ACCION == "INTERCONSUKARDEX")
                        //  {
                        //      Listar[i].ACCION = "UPDATEDETALLE";
                        //  }
                        //   else
                        //  {
                        Listar[i].ACCION = "UPDATEDETALLE";
                        //   }
                        //Listar[i].ValorCodigo1 = Listar[i].ValorCodigo1.Substring(0, 5);
                    }


                }
                else
                {

                    LocalEnty.ACCION = "INTERCONSUFEKARDEXVISIT";
                    //LocalEnty.ACCION = "INTERCONSUFE";
                    LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.PacienteID.ToString().Trim();
                    // LocalEnty.ValorCodigo2 = ENTITY_GLOBAL.Instance.EpisodioAtencion.ToString().Trim();
                    LocalEnty.ValorCodigo3 = ENTITY_GLOBAL.Instance.CodigoOA.ToString().Trim();
                    LocalEnty.ValorCodigo5 = ENTITY_GLOBAL.Instance.UnidadReplicacion.ToString().Trim();
                    Listar = SvcMiscelaneos.GetUpListadoServicios(LocalEnty).ToList();

                    for (int i = 0; i < Listar.Count; i++)
                    {
                        Listar[i].ValorCodigo1 = Listar[i].ValorCodigo1.Substring(0, 5);
                        Listar[i].ValorCodigo5 = "";
                        Listar[i].ValorEntero4 = 1;
                        Listar[i].ACCION = "NUEVO";
                    }


                }



                // }
                ///ADD LA OPCIÓN DE COPIA
                if (Session["COPIA_FORMULARIO"] == "ACTIVA" && Session["DATA_COPIA_FORM"] != null)
                {
                    Object objetoGen = getObjetoMiscelaneoFormulario_de_Historial((string)Session["DATA_COPIA_FORM"], "PEGAR",
                    UTILES_MENSAJES.FORM_INTERCONSULTAS, Listar);
                    if (objetoGen != null)
                    {
                        List<MA_MiscelaneosDetalle> ListarCopy = (List<MA_MiscelaneosDetalle>)objetoGen;
                        Listar.AddRange(ListarCopy);
                    }
                    Session["COPIA_FORMULARIO"] = "INACTIVA";
                }
                ///////////////////////////////////////////////
                return this.Store(Listar.ToList());
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }

        }
        public System.Web.Mvc.ActionResult Save_403_2(String selectionArray1, String selectionArray2, string Evento, String Version)
        {
            Log.Information("HClinicaController - Save_403_2 - Entrar");


            List<SS_HC_Examen_Kardex_FE> ObjLista1 = new List<SS_HC_Examen_Kardex_FE>();
            List<SS_HC_InterConsulta_Kardex_FE> ObjLista2 = new List<SS_HC_InterConsulta_Kardex_FE>();
            //List<SS_HC_Epicrisis_3_Diag_Secundaria> ObjLista3 = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();
            //List<SS_HC_Epicrisis_3> ObjLista0 = new List<SS_HC_Epicrisis_3>();

            //SS_HC_Epicrisis_3 objAnamEA = new SS_HC_Epicrisis_3();

            /* if (selectionArray0.Trim().Length > 0)
             {
                 ObjLista2 = (List<SS_HC_Indicaciones_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_Indicaciones_FE>));
             }*/

            if (Evento == "Server")
            {
                try
                {

                    List<SS_HC_Examen_Kardex_FE> listaDiagnostico = new List<SS_HC_Examen_Kardex_FE>();
                    List<SS_HC_InterConsulta_Kardex_FE> listaPrincipal = new List<SS_HC_InterConsulta_Kardex_FE>();
                    //List<SS_HC_Epicrisis_3_Diag_Secundaria> listaSecundario = new List<SS_HC_Epicrisis_3_Diag_Secundaria>();


                    //if (selectionArray0.Trim().Length > 0)
                    //{
                    //    ObjLista0 = (List<SS_HC_Epicrisis_3>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray0, typeof(List<SS_HC_Epicrisis_3>));
                    //}



                    //objAnamEA.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                    //objAnamEA.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                    //objAnamEA.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                    //objAnamEA.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                    //objAnamEA.IdEpicrisis3 = ObjLista0[0].IdEpicrisis3;
                    //objAnamEA.Complicaciones = ObjLista0[0].Complicaciones;
                    //objAnamEA.Pronostico = ObjLista0[0].Pronostico;
                    //objAnamEA.TipoAlta = ObjLista0[0].TipoAlta;
                    //objAnamEA.CondicionEgreso = ObjLista0[0].CondicionEgreso;
                    //objAnamEA.CausaMuerte = ObjLista0[0].CausaMuerte;
                    //objAnamEA.PlanAlta = ObjLista0[0].PlanAlta;
                    //objAnamEA.Necropsia = ObjLista0[0].Necropsia.Value;
                    //objAnamEA.Estado = ObjLista0[0].Estado;
                    //objAnamEA.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    //objAnamEA.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    //objAnamEA.FechaCreacion = DateTime.Now;
                    //objAnamEA.FechaModificacion = DateTime.Now;
                    //objAnamEA.Accion = (string)Session["Accion_201_3"];
                    //objAnamEA.Version

                    //objAnamEA.Accion = (string)Session["Accion_402"];

                    int IdSecuencia = 0;

                    if (ENTITY_GLOBAL.Instance.EpisodioClinicoEstado != 1)
                    {
                        X.Msg.Alert("Ventana de Mensajes ", "Por favor seleccione episodio clínico... ").Show();
                    }
                    else
                    {

                        string mensage = "";

                        // if (ENTITY_GLOBAL.Instance.INTERUPTOR_TEMP == 1)
                        // {

                        if (selectionArray1.Trim().Length > 0)
                        {
                            ObjLista1 = (List<SS_HC_Examen_Kardex_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<SS_HC_Examen_Kardex_FE>));


                            foreach (var algo in ObjLista1)
                            {
                                SS_HC_Examen_Kardex_FE temp = new SS_HC_Examen_Kardex_FE();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                                // temp.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE" ? "UPDATEDETALLE" : "NUEVO";
                                temp.Accion = algo.Accion;
                                temp.Cantidad = algo.Cantidad;
                                temp.CodigoSegus = algo.CodigoSegus;
                                temp.DescripcionCodigo = algo.DescripcionCodigo;
                                temp.Detalle = algo.Detalle;
                                temp.Realizado = algo.Realizado;
                                temp.TipoCodigo = algo.TipoCodigo;
                                temp.UsuarioModificacion = algo.UsuarioModificacion;
                                temp.Version = algo.Version;
                                temp.Especificaciones = algo.Especificaciones;
                                temp.FechaCreacion = algo.FechaCreacion;
                                temp.FechaModificacion = algo.FechaModificacion;
                                temp.FechaSolicitada = algo.FechaSolicitada;
                                temp.IdEspecialidad = algo.IdEspecialidad;
                                temp.Secuencia = algo.Secuencia;
                                temp.IndicadorEPS = algo.IndicadorEPS;
                                temp.Observacion = algo.Observacion;


                                //temp.IdEpicrisis3
                                listaDiagnostico.Add(temp);

                            }

                        }
                        //if (Session["Data_SS_HC_DiagnosticoDelete"] != null)
                        //{
                        //    List<SS_HC_Epicrisis_3_Diagnostico> listaDel = (List<SS_HC_Epicrisis_3_Diagnostico>)Session["Data_SS_HC_DiagnosticoDelete"];
                        //    foreach (var result in listaDel)
                        //    {
                        //        listaDiagnostico.Add(result);
                        //    }
                        //}

                        if (selectionArray2.Trim().Length > 0)
                        {
                            ObjLista2 = (List<SS_HC_InterConsulta_Kardex_FE>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<SS_HC_InterConsulta_Kardex_FE>));


                            foreach (var algo in ObjLista2)
                            {
                                SS_HC_InterConsulta_Kardex_FE temp = new SS_HC_InterConsulta_Kardex_FE();
                                //temp = algo;
                                temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                                temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                                temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                                temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;

                                temp.Accion = algo.Accion;
                                // temp.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "UPDATE" ? "UPDATEDETALLE" : algo.Accion;
                                temp.Detalle = algo.Detalle;
                                temp.Realizado = algo.Realizado;
                                temp.Observacion = algo.Observacion;
                                temp.UsuarioCreacion = algo.UsuarioCreacion;
                                temp.Secuencia = algo.Secuencia;
                                temp.Version = algo.Version;
                                temp.FechaSolicitada = algo.FechaSolicitada;
                                temp.FechaPlaneada = algo.FechaPlaneada;
                                temp.IdEspecialidad = algo.IdEspecialidad;
                                temp.IdTipoInterConsulta = algo.IdTipoInterConsulta;

                                listaPrincipal.Add(temp);

                            }

                        }
                        //if (Session["Data_SS_HC_PrincipalDelete"] != null)
                        //{
                        //    List<SS_HC_Epicrisis_3_Diag_Principal> listaDel = (List<SS_HC_Epicrisis_3_Diag_Principal>)Session["Data_SS_HC_PrincipalDelete"];
                        //    foreach (var result in listaDel)
                        //    {
                        //        listaPrincipal.Add(result);
                        //    }
                        //}

                        //if (selectionArray3.Trim().Length > 0)
                        //{
                        //    ObjLista3 = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray3, typeof(List<SS_HC_Epicrisis_3_Diag_Secundaria>));


                        //    foreach (var algo in ObjLista3)
                        //    {
                        //        SS_HC_Epicrisis_3_Diag_Secundaria temp = new SS_HC_Epicrisis_3_Diag_Secundaria();
                        //        //temp = algo;
                        //        temp.UnidadReplicacion = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //        temp.EpisodioClinico = (int)ENTITY_GLOBAL.Instance.EpisodioClinico;
                        //        temp.IdEpisodioAtencion = (long)ENTITY_GLOBAL.Instance.EpisodioAtencion;
                        //        temp.IdPaciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
                        //        temp.Accion = algo.Accion;
                        //        temp.Codigo = algo.Codigo;
                        //        temp.Secuencia = algo.Secuencia;
                        //        temp.DiagnosticoDescripcion = algo.DiagnosticoDescripcion;
                        //        listaSecundario.Add(temp);

                        //    }

                        //}
                        //if (Session["Data_SS_HC_SecundarioDelete"] != null)
                        //{
                        //    List<SS_HC_Epicrisis_3_Diag_Secundaria> listaDel = (List<SS_HC_Epicrisis_3_Diag_Secundaria>)Session["Data_SS_HC_SecundarioDelete"];
                        //    foreach (var result in listaDel)
                        //    {
                        //        listaSecundario.Add(result);
                        //    }
                        //}

                        // }

                        IdSecuencia = SvcKardex3FEService.setMantenimiento(listaDiagnostico, listaPrincipal);

                        ENTITY_GLOBAL.Instance.INTERUPTORDELL_TEMP = null;

                        if (IdSecuencia > 0)
                        {
                            if (ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION == "NUEVO") mensage = " registro ";
                            else mensage = " actualizó ";
                            ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "UPDATE";
                            //ENTITY_GLOBAL.Instance.EpisodioAtencion = (int)SecuenciaMedica;
                            String mensaje = "Se " + mensage + " el Formulario satisfactoriamente. Código Transacción: " +
                                UTILES_MENSAJES.getCodigoTransaccionHCE(ENTITY_GLOBAL.Instance.EpisodioClinico,
                                ENTITY_GLOBAL.Instance.EpisodioAtencionPrim,
                                ENTITY_GLOBAL.Instance.EpisodioAtencion, ENTITY_GLOBAL.Instance.PacienteID, "");
                            ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION = 2;

                            ENTITY_GLOBAL.Instance.INTERUPTOR = null;
                            // Session["ValoresTemporal"] = null;
                            Session.Remove("ValoresTemporal");
                            // Session["Data_ExamenSolicitadoDelete"] = null;

                            Session["COPIA_FORMULARIO"] = null;
                            Session["DATA_COPIA_FORM"] = null;
                            Session.Remove("Data_ExamenSolicitadoDelete");
                            Session.Remove("COPIA_FORMULARIO");
                            Session.Remove("DATA_COPIA_FORM");


                            ENTITY_GLOBAL.Instance.INDICA_ESTADO_DG = 0;
                            // Session["Valores_CCEPF150"] = null;
                            Session.Remove("Valores_CCEPF150");
                            eventoLoadPostFormulario(true, "storeExamenes", null);
                            eventoLoadPostFormulario(true, "storeExamenes2", null);
                            eventoPostFormulario(true, "");
                            if (Session["containerIdTemp"] != null && Session["textTemp"] != null)
                            {
                                string containertemp = (string)Session["containerIdTemp"];
                                string txttemp = (string)Session["textTemp"];

                                LoadFormatos(containertemp, txttemp);
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }
                            else
                            {
                                return showMensajeNotify("Mensaje", mensaje, "INFO");
                            }


                        }
                        else
                        {
                            eventoPostFormulario(false, "");
                            X.Msg.Notify("Ventana de Mensajes ", "Sucedió un error inesperado").Show();
                            return showMensajeNotify("Error", "Sucedió un error inesperado", "ERROR");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //EventLog.GenerarLogError(ex);  ENTITY_GLOBAL.Instance.EpisodioClinico = 1;
                    var sqlException = ex.InnerException as SqlException;
                    var detalle = new MA_MiscelaneosDetalle();
                    detalle.ACCION = "ERRORES";
                    List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                    if (sqlException != null)
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                    }
                    else
                    {
                        resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                    }
                    string mostrarExc = "Excepción genérica:" + ex.Message;
                    if (resultado.Count > 0)
                    {
                        mostrarExc = resultado[0].DescripcionLocal;
                    }
                    eventoPostFormulario(false, "");
                    return showMensajeNotify("Error", mostrarExc, "ERROR");
                    throw;
                }
            }

            return this.Direct();
        }

        #endregion
    }

    public class EpisodioAtencion
    {
        public System.Nullable<int> IndicadorCobrado;
        public System.Nullable<int> Linea;
        public string SecuenciaHCE;
        public string Componente;
        public System.Nullable<int> IndicadorCobrado1;
        public System.Nullable<double> IndicadorProcedimiento;
        public System.Nullable<int> IdPaciente;
        public System.Nullable<int> IdOrdenAtencion;
    }
}