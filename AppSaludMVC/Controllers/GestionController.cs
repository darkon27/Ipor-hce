using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Ext.Net;
using Ext.Net.MVC;
using System.Reflection;
using SoluccionSalud.Entidades.Entidades;
using SoluccionSalud.RepositoryReport;
using SoluccionSalud.Service.SeguridadService;
using SoluccionSalud.Service.DiagnosticoService;
using SoluccionSalud.Service.ProcedimientoService;
using SoluccionSalud.Service.HC_CIAP2Service;
using AppSaludMVC.Models;
using System.Data.SqlClient;

namespace AppSaludMVC.Controllers
{
    using AppSaludMVC.Models;
    using SoluccionSalud.Service.PersonaMastService;
    using SvcDiccionario = SoluccionSalud.Service.DiccionarioService.SvcDiccionario;
    using SvcSeguridad = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto;
    using SvcMiscelaneos = SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos;
    using SvcDiagnostico = SoluccionSalud.Service.DiagnosticoService.SvcDiagnostico;
    using SvcUsuario = SoluccionSalud.Service.UsuarioService.SvcUsuario;
    using SvcSeguridadPerfilUsuario = SoluccionSalud.Service.SeguridadPerfilUsuarioService.SvcSeguridadPerfilUsuario;
    using SvcSS_HC_CuerpoHumano = SoluccionSalud.Service.SS_HC_CuerpoHumanoService.SvcSS_HC_CuerpoHumano;
    using SvcProcedimiento = SoluccionSalud.Service.ProcedimientoService.SvcProcedimiento;
    using SvcHC_CIAP2 = SoluccionSalud.Service.HC_CIAP2Service.SvcHC_CIAP2;
    using SvcSeguridadGrupo = SoluccionSalud.Service.SeguridadGrupoService.SvcSeguridadGrupo;
    using SvcSeguridadConcepto = SoluccionSalud.Service.SeguridadConceptoService.SvcSeguridadConcepto;
    using SvcVw_Personapaciente = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SvcVw_Personapaciente;
    
    using SvcMedicamentos = SoluccionSalud.Service.MedicamentosService.SvcMedicamentos;
    using SvcComponentebase = SoluccionSalud.Service.ComponenteBaseService.SvcComponenteBase;
    using SvcSG_Agente = SoluccionSalud.Service.SG_AgenteService.SvcSG_Agente;
    using SvcTipoAtencion = SoluccionSalud.Service.AtencionService.SvcTipoAtencion;
    using SvcClasificadorMovimiento = SoluccionSalud.Service.ClasificadorMovimientoService.SvcClasificadorMovimiento;
    using SvcEspecialidad = SoluccionSalud.Service.EspecialidadService.SvcEspecialidad;
    using SvcEspecialidadOrdenMedica = SoluccionSalud.Service.EspecialidadOrdenMedicaService.SvcEspecialidadOrdenMedica;
    using SvcSG_Grupo = SoluccionSalud.Service.SG_GrupoService.SvcSG_Grupo;
    using SvcSG_Opcion = SoluccionSalud.Service.SG_OpcionService.SvcSG_Opcion;
    using SvcRecursos = SoluccionSalud.Service.RecursosService.SvcRecursos;
    using SvcCobertura = SoluccionSalud.Service.CoberturaService.SvcCobertura;
    using SvcFormatoCampo = SoluccionSalud.Service.FormatoCampoService.SvcFormatoCampo;
    using SvcTablaCampo = SoluccionSalud.Service.TablaCampoService.SvcTablaCampo;
    using SvcTabla = SoluccionSalud.Service.TablaService.SvcTabla;
    using SvcAC_Sucursal = SoluccionSalud.Service.AC_SucursalService.SvcAC_Sucursal;
    using SvcFormato = SoluccionSalud.Service.FormatoService.SvcFormato;
    using SvcFormatoC = SoluccionSalud.Service.FormatoCService.SvcFormato;
    using SvcVW_EMPRESASEGURO = SoluccionSalud.Service.VW_EMPRESASEGURO.SvcVW_EMPRESASEGURO;
    using SvcSG_AgenteOpcion = SoluccionSalud.Service.SG_AgenteOpcionService.SvcSG_AgenteOpcion;
    using SvVW_FORMATORECURSOCAMPO = SoluccionSalud.Service.VW_FORMATORECURSOCAMPOService.SvcVw_FormatoRecursoCampo;
    using SvcFavorito = SoluccionSalud.Service.FavoritoService.Svcfavorito;
    using SvcFavoritoCodigo = SoluccionSalud.Service.FavoritoCodigoService.SvcFavoritoCodigo;
    using SvcVWEspecialidadMedico = SoluccionSalud.Service.VWEspecialidadMedicoService.SvcVWEspecialidadMedico;
    using SvcUnidad = SoluccionSalud.Service.UnidadService.SvcUnidad;
    using SvcTablaDatos = SoluccionSalud.Service.TablaDatosService.SvcTablaDatos;
    using SvcMaestroDetalle = SoluccionSalud.Service.MaestroDetalleService.SvcMaestroDetalle;
    using Svccompanyowner = SoluccionSalud.Service.companyownerService.Svccompanyowner;
    using SvcDominio = SoluccionSalud.Service.DominioService.SvcDominio;
    using SvcClase = SoluccionSalud.Service.ClaseService.SvcClase;
    using SvcActividades = SoluccionSalud.Service.ActividadesService.SvcActividades;
    using SvcIndicador = SoluccionSalud.Service.IndicadorService.SvcIndicador;
    using SvcNanda = SoluccionSalud.Service.NandaService.SvcNanda;
    using SvcVW_ServicioPrestacion = SoluccionSalud.Service.VW_ServicioPrestacionService.SvcVW_ServicioPrestacion;
    using SvcWH_ClaseLinea = SoluccionSalud.Service.WH_ClaseLineaService.SvcWH_ClaseLinea;
    using SvcWH_ClaseFamilia = SoluccionSalud.Service.WH_ClaseFamiliaService.SvcWH_ClaseFamilia;
    using SvcWH_ClaseSubFamilia = SoluccionSalud.Service.WH_ClaseSubFamiliaService.SvcWH_ClaseSubFamilia;
    //using SvcResultados = SoluccionSalud.Service.ResultadosEsperadosService.SvcResultadosEsperados;
    using SvcNic = SoluccionSalud.Service.NicService.SvcNic;
    using SvcNoc = SoluccionSalud.Service.NocService.SvcNoc;
    using SvcFactorRelacionado = SoluccionSalud.Service.FactorRelacionadoService.SvcFactorRelacionado;
    using SvcFactorRelacionadoNanda = SoluccionSalud.Service.FactorRelacionadoNandaService.SvcFactorRelacionadoNanda;
    using SvcNocNic = SoluccionSalud.Service.NocNicService.SvcNocNic;
    using SvcNicActividad = SoluccionSalud.Service.NicActividadService.SvcNicActividad;
    using SvcNocIndicador = SoluccionSalud.Service.NocIndicadorService.SvcNocIndicador;
    using SvcNocNanda = SoluccionSalud.Service.NocNandaService.SvcNocNanda;
    using SvcEstablecimiento = SoluccionSalud.Service.EstablecimientoService.SvcEstablecimiento;
    using SvcModulos = SoluccionSalud.Service.ModuloService.SvcModulo;
    using SvcVw_Favoritos = SoluccionSalud.Service.WH_FavoritosService.SvcVW_FavoritosService;
    using SvcFavoritoCodigoId = SoluccionSalud.Service.FavoritoCodigoService.SvcFavoritoCodigo;
    using SvcFavoritoDetalle = SoluccionSalud.Service.FavoritoDetalleService.SvcFavoritoDetalle;
    using SvcFavoritoNumero = SoluccionSalud.Service.FavoritoNumeroService.SvcFavoritoNumero;
    using SvcTABLAFORMATOVALIDACION = SoluccionSalud.Service.TABLAFORMATOVALIDACIONService.SvcTABLAFORMATOVALIDACION;
    using System.Text;
    using SvcOrdAtenPreexistencia = SoluccionSalud.Service.OrdAtenPreexistenciaService.SvcOrdAtenPreexistencia;
    using SvcControlValidacion = SoluccionSalud.Service.ControlValidacionService.SvcControlValidacion;
    using SvcAtributo = SoluccionSalud.Service.ControlAtributoService.SvcControlAtributo;
    using SvcComponente = SoluccionSalud.Service.ControlComponenteService.SvcControlComponente;
    using SvcValida = SoluccionSalud.Service.SS_VW_VALIDAService.SvcSS_VW_VALIDA;
    using SvcSeguridadAutorizacion = SoluccionSalud.Service.SeguridadAutorizacionService.SvcSeguridadAutorizacion;
    using SvcVWTABLACAMPO = SoluccionSalud.Service.CAMPOTABLASERVICE.SVCCAMPOTABLA;
    using svcVWFORMATOCAMPO = SoluccionSalud.Service.CAMPOFORMATOSERVICE.SVCCAMPOFORMATO;
    using SvcAuditoria = SoluccionSalud.Service.AuditoriaService.SvcAuditoria;
    using SvcParametro = SoluccionSalud.Service.ParametroService.SvcParametro;
    using SvcProcMedDos = SoluccionSalud.Service.ProcMedDosService.SvcProcMedDos;
    using SvcDetalleMiscelaneo = SoluccionSalud.Service.DetalleMiscelaneoService.SvcDetalleMiscelaneo;
    using SvcVw_Miscelaneo = SoluccionSalud.Service.Vw_MiscelaneoService.SvcVw_Miscelaneo;
    using SvcHeaderMiscelaneo = SoluccionSalud.Service.DetalleMiscelaneoService.SvcMiscelaneoHeader;
    using SvcPaciente = SoluccionSalud.Service.VW_PERSONAPACIENTEService.SP_SS_GE_PacienteService;
    using SvcOpcionFormatoAsignacion = SoluccionSalud.Service.SG_OpcionService.SvcOpcionFormatoAsignacion;
    using SvcCategoriaUnidadServicio = SoluccionSalud.Service.CategoriaUnidadServicioService.SvcCategoriaUnidadServicio;
    using SvcServicios = SoluccionSalud.Service.ServiciosService.SvcServicios;
    using SvcUnidadServicio = SoluccionSalud.Service.UnidadServicioService.SvcUnidadServicio;
    using SvcCatUnidServAtencion = SoluccionSalud.Service.CatUnidServAtencionService.SvcCatUnidServAtencion;
    using SvcSS_CC_Horario = SoluccionSalud.Service.HorarioService.SvcSS_CC_Horario;
    using SvcProcMed = SoluccionSalud.Service.ProcMedService.SvcProcMed;
    using SvcProHistAdj = SoluccionSalud.Service.ProHistAdjService.SvcProHistAdj;
    using SvcSSHCUbicacion = SoluccionSalud.Service.SSHCUbicacionService.SvcSSHCUbicacion;
    using SvcAuditoriaImpresion = SoluccionSalud.Service.AuditoriaImpresionService.SvcAuditoriaImpresion;
    using SvcAuditoriaImpresionDetalle = SoluccionSalud.Service.AuditoriaImpresionDetalleService.SvcAuditoriaImpresionDetalle;
    using SvcUnidadMedidaMinsa = SoluccionSalud.Service.UnidadMedidaMinsaService.SvcUnidadMedidaMinsa;
    
    using Newtonsoft.Json;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Xml.XPath;
    using System.IO;
    using System.Dynamic;
    using System.Xml.Linq;
    using System.Collections;
    using System.Data;
    using Serilog;
    using System.Net.Http;
    using System.Configuration;
    using System.Net.Http.Formatting;

    public class GestionController : System.Web.Mvc.Controller
    {
        //public Window window01;

        //
        // GET: /Gestion/
        public PartialViewResult PanelNorth(string containerId)
        {
            Log.Information("GestionController - PanelNorth - Entrar");
            ////OBTENER DATOS DE LA PERSONA-MEDICO-USUARIO
            /*
            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.AFE = ENTITY_GLOBAL.Instance.Establecimiento;//Para obtener Nombre de Estab. Seleccionado
            obj.Persona = Convert.ToInt32(ENTITY_GLOBAL.Instance.CODPERSONA);
            obj.ACCION = "LISTARPORID";
            lista = SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
            if (lista.Count == 1)
            {
                foreach (var result in lista)
                {
                    obj = result;
                }
            }
            */
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            List<MA_MiscelaneosDetalle> listInfoSession = new List<MA_MiscelaneosDetalle>();
            MA_MiscelaneosDetalle InfoSession = new MA_MiscelaneosDetalle();
            InfoSession.ACCION = "INFOSESSION";
            InfoSession.CodigoElemento = "" + ENTITY_GLOBAL.Instance.IDAGENTE;
            InfoSession.AplicacionCodigo = ENTITY_GLOBAL.Instance.APPCODIGO;
            InfoSession.Compania = ENTITY_GLOBAL.Instance.Compania;
            InfoSession.CodigoTabla = ENTITY_GLOBAL.Instance.Sucursal;//AUX            
            InfoSession.ValorCodigo1 = ENTITY_GLOBAL.Instance.Establecimiento;

            if (ENTITY_GLOBAL.Instance.CODPERSONA != null)
            {
                InfoSession.ValorCodigo2 = "" + ENTITY_GLOBAL.Instance.CODPERSONA;
            }
            int paciente = 0;
            if (ENTITY_GLOBAL.Instance.PacienteID != null)
            {
                paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            }

            listInfoSession = SvcMiscelaneos.listarMA_MiscelaneosDetalle(InfoSession, paciente, 0);
            //ver stored: [SP_SS_HC_MA_MiscelaneosDetalle_LISTAR]
            if (listInfoSession.Count > 0)
            {
                obj.CompaniaSocio = listInfoSession[0].Compania; //CompaniaSocio desc
                obj.Sucursal = listInfoSession[0].CodigoTabla; //Sucursal desc
                obj.IngresoAplicacionCodigo = listInfoSession[0].AplicacionCodigo; //Aplicacion desc

                obj.DireccionReferencia = listInfoSession[0].ValorCodigo1; //ESTABLECIMIENTO
                obj.CentroCostos = listInfoSession[0].ValorCodigo2;     //PERIODO
                obj.DescripcionHistoria = listInfoSession[0].ValorCodigo3;  //DB

                obj.TipoTrabajador = listInfoSession[0].ValorCodigo4; //TipoTrabajador desc                
                obj.USUARIO = listInfoSession[0].UltimoUsuario;//USUARIO
                obj.NombreCompleto = listInfoSession[0].DescripcionLocal; //NOMBRE EMPLEADO
                obj.Persona = Convert.ToInt32(listInfoSession[0].ValorEntero1);

            }
            return new PartialViewResult
            {
                ContainerId = containerId,
                ViewName = "PanelNorth",
                WrapByScriptTag = false,
                Model = obj
            };
        }
        public System.Web.Mvc.ActionResult GrillaListadoPacientes(int start, int limit, string descript)
        {
            Log.Information("GestionController - GrillaListadoPacientes - Entrar");
            var Listar = new List<PERSONAMAST>();
            System.Collections.IEnumerable dtoArray;
            int total;
            var LocalEnty = new PERSONAMAST();
            LocalEnty.ACCION = "LISTAR";
            LocalEnty.Estado = "";
            LocalEnty.NombreCompleto = descript;
            return this.Store(SvcPersonaMast.GetSelectPersonaMast(LocalEnty).ToList());
        }
        public System.Web.Mvc.ActionResult GrillaListadPaginas(int start, int limit, string descript)
        {
            Log.Information("GestionController - GrillaListadPaginas - Entrar");

            var Listar = new List<SEGURIDADCONCEPTO>();
            System.Collections.IEnumerable dtoArray;
            int total;
            var LocalEnty = new SEGURIDADCONCEPTO();
            LocalEnty.ACCION = "REGISROPAGINAS";
            LocalEnty.GRUPO = "GRUPO018";
            LocalEnty.CONCEPTO = descript;
            Listar = SvcSeguridad.GetSelectSP(LocalEnty);
            //return this.Store(Listar);
            return this.Store(Listar.ToList());
        }
        public System.Web.Mvc.ActionResult GrillaListadoDiccionario(int start, int limit, string descript)
        {
            Log.Information("GestionController - GrillaListadoDiccionario - Entrar");

            var Listar = new List<SS_CE_DICCIONARIO>();
            System.Collections.IEnumerable dtoArray;
            int total;
            var LocalEnty = new SS_CE_DICCIONARIO();
            LocalEnty.ACCION = "LISTAR";
            LocalEnty.ESTADO = 1;
            LocalEnty.NOMBREDICCIONARIO = descript;

            return this.Store(SvcDiccionario.GetSelectDiccionario(LocalEnty).ToList());
        }
        public System.Web.Mvc.ActionResult GetListadoDiccionario(int start, int limit)
        {
            Log.Information("GestionController - GetListadoDiccionario - Entrar");

            var Listar = new List<SS_CE_DICCIONARIO>();
            int total;
            var LocalEnty = new SS_CE_DICCIONARIO();
            LocalEnty.ACCION = "LISTAR";
            LocalEnty.ESTADO = 1;
            Listar = SoluccionSalud.Service.DiccionarioService.SvcDiccionario.GetSelectDiccionario(LocalEnty);

            total = 2;
            return Json(new { data = SvcDiccionario.GetSelectDiccionario(LocalEnty).ToList(), total = total }, System.Web.Mvc.JsonRequestBehavior.AllowGet);
        }
        public System.Web.Mvc.ActionResult GetEstadosRegistro(string tiporegistro)
        {
            Log.Information("GestionController - GetEstadosRegistro - Entrar");

            return this.Store(CombosGenericos.GetEstadoRegistro(tiporegistro));
        }

        public System.Web.Mvc.ActionResult EventGuardarDiccionario(SS_CE_DICCIONARIO objDiccionar)
        {
            Log.Information("GestionController - EventGuardarDiccionario - Entrar");

            objDiccionar.ACCION = "INSERT";
            var retorno = SvcDiccionario.GetSelectDiccionario(objDiccionar);
            if (retorno[0].ESTADO == 9)
            {
                X.MessageBox.Alert("Error", "Ya existe Registro").Show();
                return this.Direct();
            }
            else
            {
                X.MessageBox.Alert("Ok", "Se registró safictariamente.").Show();
                return this.Direct();
            }
        }
        public System.Web.Mvc.ActionResult CCEP0902_ViewRegistro(String Eventos, String selection, String Mode)
        {
            Log.Information("GestionController - CCEP0902_ViewRegistro - Entrar");

            SS_CE_DICCIONARIO xx = new SS_CE_DICCIONARIO();
            xx.CODIGODICCIONARIO = "001";
            xx.NOMBREDICCIONARIO = "asdfasd asdf asdfads";

            return View("", "", xx);

        }
        public System.Web.Mvc.ActionResult CCEP0951_View() // Seguridad PAginas
        {
            Log.Information("GestionController - CCEP0951_View - Entrar");

            return View();
        }
        public System.Web.Mvc.ActionResult CCEP0903_View() // Seguridad PAginas
        {
            Log.Information("GestionController - CCEP0903_View - Entrar");

            return View();
        }

        public System.Web.Mvc.ActionResult CCEP0902_View() //Diccionario
        {
            Log.Information("GestionController - CCEP0902_View - Entrar");

            return View();
        }

        public System.Web.Mvc.ActionResult HomeCenter()
        {
            Log.Information("GestionController - HomeCenter - Entrar");

            return View();
        }

        public System.Web.Mvc.ActionResult FormView()
        {
            Log.Information("GestionController - FormView - Entrar");

            var html = "Html.TextBox(" + "'Textbox1'" + ", " + "'val'" + ")";
            ViewBag.RenderedHtml = html;

            return View();
        }
        [DirectMethod]
        public System.Web.Mvc.ActionResult SetPanel()
        {
            Log.Information("GestionController - SetPanel - Entrar");

            var pnlItem = this.GetCmp<Panel>("PanelNorth");
            pnlItem.Split = false;
            pnlItem.Visible = false;
            pnlItem.Collapsed = false;
            pnlItem.Split = false;
            pnlItem.Reload();

            return this.Direct();
        }
        public PartialViewResult LoadCentralGestion(string containerId, string text)
        {
            Log.Information("GestionController - LoadCentralGestion - Entrar");

            var UrlFormato = "PanelCentralBlanco";
            var model = new SEGURIDADCONCEPTO();
            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
            objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
            objVistaSeguridad.Accion = "DATOSFORMULARIO";
            objVistaSeguridad.IdOpcion = Convert.ToInt32(text.Trim());
            ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL = objVistaSeguridad.IdOpcion;
            var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
            if (resulListado.Count > 0)
            {
                switch (resulListado[0].IndicadorFormato)
                {
                    case 2:
                        UrlFormato = "PanelCenter"; //resulListado[0].CodigoFormato;
                        break;
                    case 3:
                        UrlFormato = "PanelCenterUrl";
                        break;
                    default:
                        UrlFormato = "PanelCentralBlanco";
                        break;
                }
                if (resulListado[0].CodigoFormato == null)
                {
                    UrlFormato = "PanelCentralBlanco";
                }
                else
                {
                    model.CONCEPTO = resulListado[0].CodigoFormato.Trim() + "_View";
                    model.DESCRIPCION = resulListado[0].NombreOpcion;
                    model.GRUPO = "REG0000";
                    ENTITY_GLOBAL.Instance.MENUREC_CODIGO = "MM0D";
                    ENTITY_GLOBAL.Instance.CONCEPTO = resulListado[0].CodigoFormato.Trim();
                    ENTITY_GLOBAL.Instance.IDFORMATO = resulListado[0].IdFormato;
                    ENTITY_GLOBAL.Instance.MENUREC_DESCRIPCION = "MEDICAM";
                    ENTITY_GLOBAL.Instance.GRUPO = "REG0000";
                    ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION = "NUEVO";
                }

            }
            return new PartialViewResult
            {
                ViewName = UrlFormato,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };
        }
        public PartialViewResult LoadCentral(string containerId, string text, string desc)
        {
            Log.Information("GestionController - LoadCentral - Entrar");

            List<SEGURIDADCONCEPTO> listaAsignados = new List<SEGURIDADCONCEPTO>();
            var objConceptosAux = new SEGURIDADCONCEPTO();
            objConceptosAux.APLICACIONCODIGO = ENTITY_GLOBAL.Instance.APPCODIGO;
            objConceptosAux.GRUPO = "GRUPO017"; //OBS: HARDCODE  ... PARAMETRIZAR
            objConceptosAux.CONCEPTO = text;
            objConceptosAux.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
            objConceptosAux.ACCION = "CONCEPTOFORMPORID";
            listaAsignados = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(objConceptosAux);
            var model = new SEGURIDADCONCEPTO();
            string estadoPanel = "PanelCentralBlanco";
            if (listaAsignados.Count == 1)
            {
                foreach (SEGURIDADCONCEPTO obj in listaAsignados)
                {
                    if ((obj.TIPODEOBJETO + "").Trim() == "1")
                    {
                        model.CONCEPTO = (obj.WEBPAGE + "").Trim() + "_View";  //OBS
                        model.DESCRIPCION = obj.DESCRIPCION;
                        estadoPanel = "PanelCenter";
                    }
                    else
                    {
                        estadoPanel = "PanelCentralBlanco";
                    }
                }
            }
            //return new Ext.Net.MVC.PartialViewResult()
            // view is loaded via ajax request (DirectEvent) therefore script tags will be deactivated automatically
            /*var model = new SEGURIDADCONCEPTO();
            model.CONCEPTO = text.Trim() + "_View";
            model.DESCRIPCION = desc;*/
            // model.CONCEPTO = "FormView";
            return new PartialViewResult
            {
                ViewName = estadoPanel,
                ContainerId = containerId,
                Model = model,
                //SingleControl = true,
                ClearContainer = true,
                WrapByScriptTag = true,
                RenderMode = RenderMode.AddTo
            };

        }
        public PartialViewResult PanelWest(string containerId)
        {
            Log.Information("GestionController - PanelWest - Entrar");

            return new PartialViewResult
            {
                RenderMode = RenderMode.AddTo,
                ContainerId = containerId,
                Model = ENTITY_GLOBAL.Instance,
                WrapByScriptTag = false // we load the view via Loader with Script mode therefore script tags is not required
            };
        }
        public StoreResult GetTreeViewChild(string node)
        {
            Log.Information("GestionController - GetTreeViewChild - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            if (node == "WA")
            {

                var entidaLocal = new SEGURIDADGRUPO();
                entidaLocal.ACCION = "GRUPO";
                entidaLocal.APLICACIONCODIGO = node;
                var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSeguridadGrupo(entidaLocal);
                foreach (var resulenti in serviceResul)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DESCRIPCION;
                    asyncNode.NodeID = resulenti.GRUPO;
                    nodes.Add(asyncNode);
                }
            }
            else
            {
                var entidaLocal = new SEGURIDADCONCEPTO();
                /**OBS: APLICACIONCODIGO como usuiario auxiliar*/
                entidaLocal.APLICACIONCODIGO = ENTITY_GLOBAL.Instance.USUARIO;

                if (node.Trim().Substring(0, 2) == "GR")
                {
                    entidaLocal.ACCION = "CONCEPTO";
                    entidaLocal.GRUPO = node.Trim();
                    var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                    foreach (var resulenti in serviceResul)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Text = resulenti.DESCRIPCION;
                        asyncNode.NodeID = resulenti.CONCEPTO;
                        nodes.Add(asyncNode);
                    }
                }
                else
                {
                    if (node.Trim().Substring(0, 2) == "CC")
                        entidaLocal.ACCION = "CONCEPTOPADREHCE";
                    entidaLocal.CONCEPTOPADRE = node.Trim();
                    entidaLocal.GRUPO = "GRUPO017";
                    var serviceResuls = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                    foreach (var resulenti in serviceResuls)
                    {
                        Node asyncNode = new Node();
                        asyncNode.Text = resulenti.DESCRIPCION;
                        asyncNode.NodeID = resulenti.CONCEPTO;

                        asyncNode.Leaf = Convert.ToInt32(resulenti.TIPODEOBJETO.ToString().Trim()) == 1 ? true : false;
                        nodes.Add(asyncNode);
                    }
                }
            }

            return this.Store(nodes);
        }
        public StoreResult ArbolProcesosGestion(string node, string filtro)
        {
            Log.Information("GestionController - ArbolProcesosGestion - Entrar");

            NodeCollection nodes = new Ext.Net.NodeCollection();
            var objVistaSeguridad = new SS_CHE_VistaSeguridad();
            if (ENTITY_GLOBAL.Instance.NIVEL == 1)
            {
                objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                objVistaSeguridad.Accion = "LISTAPROCESOS";
                objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                objVistaSeguridad.Nivel = 1;
                var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);

                foreach (var resulenti in resulListado)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.NombreOpcion;
                    asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                    nodes.Add(asyncNode);
                }
                ENTITY_GLOBAL.Instance.NIVEL = 2;
            }
            else
            {
                var p = this.GetCmp<TreePanel>("treepanel");

                objVistaSeguridad.Sistema = ENTITY_GLOBAL.Instance.APPCODIGO;
                objVistaSeguridad.CodigoAgente = ENTITY_GLOBAL.Instance.USUARIO;
                objVistaSeguridad.IdOpcionPadre = Convert.ToInt32(node.Trim());
                objVistaSeguridad.Accion = "LISTAPROCESOS";
                objVistaSeguridad.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                objVistaSeguridad.Nivel = 2;
                var resulListado = SvcSeguridadConcepto.ListarSeguridadOpcion(objVistaSeguridad, 0, 0);
                foreach (var resulenti in resulListado)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.NombreOpcion;
                    asyncNode.NodeID = resulenti.IdOpcion.ToString().Trim();
                    asyncNode.Href = "javascript:myFunction('" + resulenti.NombreOpcion + "')";
                    asyncNode.Leaf = resulenti.TipoIcono > 1 ? true : false;
                    nodes.Add(asyncNode);
                }
                ENTITY_GLOBAL.Instance.NIVEL = 2;
            }

            return this.Store(nodes);

        }

        public System.Web.Mvc.ActionResult Index()
        {
            Log.Information("GestionController - Index - Entrar");

            return View();
        }

        public PartialViewResult LoadViewPacientes(string containerId)
        {
            Log.Information("GestionController - LoadViewPacientes - Entrar");

            return new PartialViewResult
            {
                ContainerId = containerId,
                ViewName = "GrillaPacientes",
                WrapByScriptTag = false,
                ClearContainer = true
            };
        }
        public PartialViewResult LoadViewIzquierdaPanel(string containerId)
        {
            Log.Information("GestionController - LoadViewIzquierdaPanel - Entrar");

            return new PartialViewResult
            {
                ContainerId = containerId,
                ViewName = "VistaEsteMenu",
                WrapByScriptTag = false
            };
        }

        public System.Web.Mvc.ActionResult GetCustomers(int start, int limit)
        {
            Log.Information("GestionController - GetCustomers - Entrar");

            System.Collections.IEnumerable dtoArray;
            int total;


            return Json(null);
        }

        public System.Web.Mvc.ActionResult GetSelectPacientes(String Name, String selection, String Mode)
        {
            Log.Information("GestionController - GetSelectPacientes - Entrar");

            var values = new System.Web.Routing.RouteValueDictionary();
            values.Add("id", '0');
            string url = string.Format("/HClinica/Index?idCodigo={0}", '0');

            //return Redirect(url);
            //return this.RedirectToAction("Index", "PacienteGeneral");
            return this.RedirectToAction("Index", "HClinica");
        }

        public System.Web.Mvc.ActionResult GetSelectPaciente(String Name, String selection, String Mode)
        {
            Log.Information("GestionController - GetSelectPaciente - Entrar");

            SelectedRowCollection src = JSON.Deserialize<SelectedRowCollection>(selection);
            List<int> omitIds = new List<int>();
            foreach (SelectedRow row in src)
            {
                omitIds.Add(Convert.ToInt32(row.RecordID));
            }
            var values = new System.Web.Routing.RouteValueDictionary();
            values.Add("id", omitIds[0]);
            string url = string.Format("/HClinica/Index?idCodigo={0}", omitIds[0]);

            // return Redirect(url);
            return this.RedirectToAction("Index", "HClinica");
            // return this.Content(ExamplesModel.GetExamplesNodes().ToJson());


            //  return this.RedirectToAction(url);

            //if (node == "Root")
            // {
            //     return this.Content(ExamplesModel.GetExamplesNodes().ToJson());
            // }

            //  return new System.Web.Mvc.HttpStatusCodeResult((int)System.Net.HttpStatusCode.BadRequest);


            // return RedirectToAction("Index", "HClinica", new { id = omitIds[0] });
            // return this.RedirectToAction("Index", "HClinica");
            //   return this.Direct();
            //  return View();
        }

        public System.Web.Mvc.ActionResult CCEP0103_View() //Diagnostico
        {
            Log.Information("GestionController - CCEP0103_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Medicamentos/CCEP0103_View");
        }

        public System.Web.Mvc.ActionResult getGrillaComponenteBase(int start, int limit)
        {
            Log.Information("GestionController - getGrillaComponenteBase - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<CM_CO_ListaBaseComponente>();

            var LocalEnty = new CM_CO_ListaBaseComponente();


            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;

            LocalEnty.Accion = "CONTARLISTARPAG";
            int cantElementos = SvcComponentebase.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcComponentebase.listarCM_CO_ListaBaseComponente(LocalEnty, ini, fin);
            }
            return this.Store(Listar, cantElementos);
        }

        public System.Web.Mvc.ActionResult getGrillaMedicamento(int start, int limit,
         string descripcion, string codigo, string estado, string linea, string familia, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaMedicamento - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<WH_ItemMast>();

                var LocalEnty = new WH_ItemMast();

                LocalEnty.Item = getValorFiltroStr(codigo);
                LocalEnty.DescripcionLocal = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroStr(estado);
                LocalEnty.Linea = getValorFiltroStr(linea);
                LocalEnty.Familia = getValorFiltroStr(familia);
                if (estado == "T")
                {
                    LocalEnty.Estado = null;
                }
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }


                LocalEnty.Accion = "CONTARLISTARPAG";
                int cantElementos = SvcMedicamentos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARTOTAL";
                    Listar = SvcMedicamentos.listarMedicamentos(LocalEnty, ini, fin);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult Combos(string Par1, string Par2, string Accion)
        {
            Log.Information("GestionController - Combos - Entrar");
            if ("SUCURSAL" == Accion)
            {
                if (Par1 == null || Par1=="")
                {
                    Par1 = ENTITY_GLOBAL.Instance.Compania;
                }
            }
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboSeguridadTxtAlmacen(Accion, Par1, Par2, 0));
        }

        public System.Web.Mvc.ActionResult CombosQuirurgico(string Par1, string Par2, string Accion)
        {
            Log.Information("GestionController - CombosQuirurgico - Entrar");

            Par1 = ENTITY_GLOBAL.Instance.Compania;
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboSeguridadTxtAlmacen(Accion, Par1, Par2, 0));
        }

        public System.Web.Mvc.ActionResult Familias(string Linea, string Familia, string Accion)
        {
            Log.Information("GestionController - Familias - Entrar");
            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(Linea, Familia, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult Formatos(string formato, string secuencia, string Accion)
        {
            Log.Information("GestionController - Formatos - Entrar");

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(formato, secuencia, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult Campos(string tabla, string tablacampo, string Accion)
        {
            Log.Information("GestionController - Campos - Entrar");

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxtDos(tabla, tablacampo, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult Departamentos(string pais, string departamento, string Accion)
        {
            Log.Information("GestionController - Departamentos - Entrar");

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenericoTxtDos(pais, departamento, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult Provincias(string departamento, string provincia, string Accion)
        {
            Log.Information("GestionController - Provincias - Entrar");

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenericoTxtDos(departamento, provincia, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult Zona(string departamento, string provincia, string Accion)
        {
            Log.Information("GestionController - Zona - Entrar");

            return this.Store(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenericoTxtDos(departamento, provincia, "", "", Accion));
        }
        public System.Web.Mvc.ActionResult postWindowMedicamentos(String linea, String familia, String subfamilia)
        {
            Log.Information("GestionController - postWindowMedicamentos - Entrar");

            var field = X.GetCmp<TextField>("linea");
            var field2 = X.GetCmp<TextField>("familia");
            var field3 = X.GetCmp<TextField>("subfamilia");

            MA_MiscelaneosDetalle objFiltro = new MA_MiscelaneosDetalle();
            var Listar = new List<MA_MiscelaneosDetalle>();

            objFiltro.ACCION = "LISTARLINEA";
            objFiltro.ValorCodigo1 = linea;
            Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(objFiltro, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (MA_MiscelaneosDetalle objEntity in Listar)
                {
                    field.SetValue(objEntity.DescripcionLocal);
                }
            }


            objFiltro.ACCION = "LISTARFAMILIA";
            objFiltro.ValorCodigo1 = linea;
            objFiltro.ValorCodigo2 = familia;
            Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(objFiltro, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (MA_MiscelaneosDetalle objEntity in Listar)
                {
                    field2.SetValue(objEntity.DescripcionLocal);
                }
            }


            objFiltro.ACCION = "LISTARSUBFAMILIA";
            objFiltro.ValorCodigo1 = linea;
            objFiltro.ValorCodigo2 = familia;
            objFiltro.ValorCodigo3 = subfamilia;
            Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(objFiltro, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (MA_MiscelaneosDetalle objEntity in Listar)
                {
                    field3.SetValue(objEntity.DescripcionLocal);
                }
            }


            return this.Direct();
        }

        public System.Web.Mvc.ActionResult ReturnFindMedicamento(String modo, String linea, String familia, String subFamilia,
           String descripcion, string descripLinea, string descripFamilia, String idWindow)
        {
            Log.Information("GestionController - ReturnFindMedicamento - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            //List<MA_MiscelaneosDetalle> ObjListarActivo;
            //ObjListarActivo = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(retornos, typeof(List<MA_MiscelaneosDetalle>));
            var panel = X.GetCmp<Panel>("Panel1");
            panel.Hidden = false;
            panel.Visible = true;
            var txtLinea = X.GetCmp<TextField>("Linea");
            var txtFamilia = X.GetCmp<TextField>("Familia");
            var txtSubFamilia = X.GetCmp<TextField>("SubFamilia");

            var LineaDescripcion = X.GetCmp<TextField>("LineaDescripcion");
            var FamiliaDescripcion = X.GetCmp<TextField>("FamiliaDescripcion");
            var SubFamiliaDescripcion = X.GetCmp<TextField>("SubFamiliaDescripcion");

            txtLinea.SetValue(linea);
            txtFamilia.SetValue(familia);
            txtSubFamilia.SetValue(subFamilia);

            LineaDescripcion.SetValue(descripLinea);
            FamiliaDescripcion.SetValue(descripFamilia);
            SubFamiliaDescripcion.SetValue(descripcion);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult MedicamentoRegistro(String MODO, string idMedicamento)
        {
            Log.Information("GestionController - MedicamentoRegistro - Entrar");

            var Listar = new List<WH_ItemMast>();

            WH_ItemMast objMedicamento = new WH_ItemMast();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objMedicamento.Accion = "LISTAR";
                objMedicamento.Item = idMedicamento;


                Listar = SvcMedicamentos.listarMedicamentos(objMedicamento, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (WH_ItemMast objEntity in Listar)
                    {
                        objMedicamento = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objMedicamento.Accion = "NUEVO";
            }
            objMedicamento.Accion = MODO;

            return crearWindowRegistro("Maestros/Medicamentos/MedicamentosRegistro", objMedicamento, "");

        }

        //public System.Web.Mvc.ActionResult getSeleccionPadreMaestroMedicamento(String MODO, int id, String descripcion, String idWindow)
        //{

        //    USUARIO obj = new USUARIO();
        //    obj.ACCION = MODO;
        //    var win = X.GetCmp<Window>(idWindow);
        //    if (win != null)
        //    {
        //        win.Hide();
        //    }
        //    var nf = X.GetCmp<NumberField>("nfIdPadre");
        //    nf.SetValue(id);
        //    var txt = X.GetCmp<TextField>("txtIdPadre");
        //    txt.SetValue(descripcion);

        //    return this.Direct();
        //}

        //public System.Web.Mvc.ActionResult postWindowProcedimiento(String id, String idpadre)
        //{
        //    SS_HC_Procedimiento objProc = new SS_HC_Procedimiento();
        //    var Listar = new List<SS_HC_Procedimiento>();

        //    var field = X.GetCmp<TextField>("txtIdPadre");
        //    if (field != null)
        //    {
        //        objProc.Accion = "LISTARPORID";
        //        objProc.IdProcedimiento = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
        //        Listar = SvcProcedimiento.listarProcedimiento(objProc, 0, 0);
        //        if (Listar.Count == 1)
        //        {
        //            foreach (SS_HC_Procedimiento objEntity in Listar)
        //            {
        //                objProc = objEntity;
        //                field.SetValue(objProc.Descripcion);
        //            }
        //        }
        //    }
        //    return this.Direct();
        //}

        public System.Web.Mvc.ActionResult seleccionadorMedicamento(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorMedicamento - Entrar");


            WH_ItemMast obj = new WH_ItemMast();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorProcedimiento", obj, "");

        }
        public System.Web.Mvc.ActionResult save_Medicamento(WH_ItemMast objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Medicamento - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSMEDICAMENTOS);
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    if (MODO == "NUEVO")
                    {
                        objFiltro.Accion = "INSERT";
                        accion = "registró";
                    }
                    else if (MODO == "UPDATE")
                    {
                        objFiltro.Accion = "UPDATE";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objFiltro.Accion = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encontró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    try
                    {
                        //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                    }
                    catch (Exception e)
                    {
                        X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                    }
                    /////registro
                    objFiltro.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                    objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    idResultado = SvcMedicamentos.setMantenimiento(objFiltro);
                    //////////////////////FINAL
                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " satisfactoriamente.";
                    }
                    else
                    {
                        tipoMsg = "ERROR";
                        message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                        tituloMsg = "Error";
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        // ******************** PROCEDIMIENTO MEDICO ************************** //
        public System.Web.Mvc.ActionResult CCEP0107_View() //Diagnostico
        {
            Log.Information("GestionController - CCEP0107_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Procedimiento/CCEP0107_View");
        }
        public System.Web.Mvc.ActionResult getGrillaProcedimiento(int start, int limit,
             string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaProcedimiento - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<SS_HC_Procedimiento>();

                var LocalEnty = new SS_HC_Procedimiento();

                LocalEnty.CodigoProcedimiento = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }


                LocalEnty.Accion = "CONTARLISTARPAG";
                int cantElementos = SvcProcedimiento.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcProcedimiento.listarProcedimiento(LocalEnty, ini, fin);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult ProcedimientoRegistro(String MODO, int idProcedimiento)
        {
            Log.Information("GestionController - ProcedimientoRegistro - Entrar");

            var Listar = new List<SS_HC_Procedimiento>();

            SS_HC_Procedimiento objProcedimiento = new SS_HC_Procedimiento();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objProcedimiento.Accion = "LISTAR";
                objProcedimiento.IdProcedimiento = idProcedimiento;


                Listar = SvcProcedimiento.listarProcedimiento(objProcedimiento, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Procedimiento objEntity in Listar)
                    {
                        objProcedimiento = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objProcedimiento.Accion = "NUEVO";
            }
            objProcedimiento.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Procedimiento/ProcedimientoRegistro", objProcedimiento, "");

        }
        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroProcedimiento(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroProcedimiento - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdProcedimientoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfIdPadre");
            txt.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult postWindowProcedimiento(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowProcedimiento - Entrar");

            SS_HC_Procedimiento objProc = new SS_HC_Procedimiento();
            var Listar = new List<SS_HC_Procedimiento>();

            var field = X.GetCmp<TextField>("tfIdPadre");
            if (field != null)
            {
                objProc.Accion = "LISTARPORID";
                objProc.IdProcedimiento = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcProcedimiento.listarProcedimiento(objProc, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Procedimiento objEntity in Listar)
                    {
                        objProc = objEntity;
                        field.SetValue(objProc.Descripcion);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorProcedimiento(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorProcedimiento - Entrar");

            SS_HC_Procedimiento obj = new SS_HC_Procedimiento();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorProcedimiento", obj, "");

        }
        public System.Web.Mvc.ActionResult save_Procedimiento(SS_HC_Procedimiento objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Procedimiento - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                /***************/
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSPROCEDIMIENTO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcProcedimiento.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        //*********************CIAP(PROCEDIMIENTOS MEDICOS)***************************//
        public System.Web.Mvc.ActionResult CCEP0104_View() //Diagnostico
        {
            Log.Information("GestionController - CCEP0104_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/CIAP/CCEP0104_View");
        }

        public System.Web.Mvc.ActionResult getGrillaCIAPDOS(int start, int limit,
                string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaCIAPDOS - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_GE_ProcedimientoMedicoDos>();

                var LocalEnty = new SS_GE_ProcedimientoMedicoDos();

                LocalEnty.CodigoProcedimientoDos = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }

                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }


                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcProcMedDos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcProcMedDos.listarProcMedicoDos(LocalEnty, ini, fin);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult ProcMedicoRegistro(String MODO, int idCIAP)
        {
            Log.Information("GestionController - ProcMedicoRegistro - Entrar");
            var Listar = new List<SS_GE_ProcedimientoMedicoDos>();

            SS_GE_ProcedimientoMedicoDos objCIAP = new SS_GE_ProcedimientoMedicoDos();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCIAP.Accion = "LISTAR";
                objCIAP.IdProcedimientoDos = idCIAP;

                Listar = SvcProcMedDos.listarProcMedicoDos(objCIAP, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_ProcedimientoMedicoDos objEntity in Listar)
                    {
                        objCIAP = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCIAP.Accion = "NUEVO";
            }
            objCIAP.Accion = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/CIAP/ProcMedicoRegistro", objCIAP, "");

        }

        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroCIAP(String MODO, int id, String descripcion, String idWindow, String codigo)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroCIAP - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdProcedimientoDosPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfIdPadre");
            txt.SetValue(descripcion);
            var txt3 = X.GetCmp<TextField>("CodigoPadre");
            txt3.SetValue(codigo);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowCIAP(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowCIAP - Entrar");

            SS_GE_ProcedimientoMedicoDos objCIAP = new SS_GE_ProcedimientoMedicoDos();
            var Listar = new List<SS_GE_ProcedimientoMedicoDos>();

            var field = X.GetCmp<TextField>("tfIdPadre");
            if (field != null)
            {
                objCIAP.Accion = "LISTAR";
                objCIAP.IdProcedimientoDos = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcProcMedDos.listarProcMedicoDos(objCIAP, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_ProcedimientoMedicoDos objEntity in Listar)
                    {
                        objCIAP = objEntity;
                        field.SetValue(objCIAP.Nombre);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorCIAP2(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorCIAP2 - Entrar");


            SS_GE_ProcedimientoMedicoDos obj = new SS_GE_ProcedimientoMedicoDos();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorCIAP2", obj, "");
        }
        public System.Web.Mvc.ActionResult save_CIAP(SS_GE_ProcedimientoMedicoDos objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_CIAP - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSCIAPDOS);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcProcMedDos.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        // ******************** Medicamentos *********************//

        public System.Web.Mvc.ActionResult CCEP0105_View() //Diagnostico
        {
            return View("Maestros/Examenes/CCEP0105_View");
        }

        /********* DIAGNOSTICO ***************/
        public System.Web.Mvc.ActionResult CCEP0102_View()
        {
            Log.Information("GestionController - CCEP0102_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Diagnostico/CCEP0102_View");
        }

        public System.Web.Mvc.ActionResult getGrillaDiagnostico(int start, int limit,
            string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaDiagnostico - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_GE_Diagnostico>();

                var LocalEnty = new SS_GE_Diagnostico();

                LocalEnty.CodigoDiagnostico = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcDiagnostico.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcDiagnostico.listarDiagnostico(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult DiagnosticoRegistro(String MODO, int idDiagnostico)
        {
            Log.Information("GestionController - DiagnosticoRegistro - Entrar");

            var Listar = new List<SS_GE_Diagnostico>();

            SS_GE_Diagnostico objDiagnostico = new SS_GE_Diagnostico();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objDiagnostico.Accion = "LISTAR";
                objDiagnostico.IdDiagnostico = idDiagnostico;

                Listar = SvcDiagnostico.listarDiagnostico(objDiagnostico, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_GE_Diagnostico objEntity in Listar)
                    {
                        objDiagnostico = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objDiagnostico.Accion = "NUEVO";
            }
            objDiagnostico.Accion = MODO;
            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Diagnostico/DiagnosticoRegistro", objDiagnostico, "");

        }

        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroDiagnostico(String MODO, int id, String descripcion, String idWindow, String codpadre)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroDiagnostico - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nfs = X.GetCmp<TextField>("CodigoPadre");
            nfs.SetValue(codpadre);
            var nf = X.GetCmp<NumberField>("IdDiagnosticoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfIdPadre");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowDiagnostico(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowDiagnostico - Entrar");

            SS_GE_Diagnostico objDiagnostico = new SS_GE_Diagnostico();
            var Listar = new List<SS_GE_Diagnostico>();

            var field = X.GetCmp<TextField>("tfIdPadre");
            if (field != null)
            {
                objDiagnostico.Accion = "LISTARPORID";
                objDiagnostico.IdDiagnostico = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcDiagnostico.listarDiagnostico(objDiagnostico, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_Diagnostico objEntity in Listar)
                    {
                        objDiagnostico = objEntity;
                        field.SetValue(objDiagnostico.Descripcion);
                    }
                }
            }
            /*******SET PROP. FORMULARIO*****************************/
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorDiagnostico(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorDiagnostico - Entrar");

            SS_GE_Diagnostico obj = new SS_GE_Diagnostico();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorDiagnostico", obj, "");
        }

        public System.Web.Mvc.ActionResult save_Diagnostico(SS_GE_Diagnostico objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Diagnostico - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSDIAGNOSTICO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcDiagnostico.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }


        /********RESULTADOS ESPERADOS ***********/

        public System.Web.Mvc.ActionResult CCEP5011_View()
        {
            Log.Information("GestionController - CCEP5011_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ResultadosEsperados/CCEP5011_View");
        }

   
        public System.Web.Mvc.ActionResult CCEP5024_View()
        {
            Log.Information("GestionController - CCEP5024_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Establecimiento/CCEP5024_View");
        }

        public System.Web.Mvc.ActionResult getGrillaEstablecimiento(int start, int limit,
        string compania, string sucursal, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaEstablecimiento - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<CM_CO_Establecimiento>();

                var LocalEnty = new CM_CO_Establecimiento();

                LocalEnty.Compania = getValorFiltroStr(compania);
                LocalEnty.Sucursal = getValorFiltroStr(sucursal);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcEstablecimiento.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcEstablecimiento.listarEstablecimiento(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult EstablecimientoRegistro(String MODO, int idEstablecimiento)
        {
            Log.Information("GestionController - EstablecimientoRegistro - Entrar");

            var Listar = new List<CM_CO_Establecimiento>();
            CM_CO_Establecimiento objCuerpo = new CM_CO_Establecimiento();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCuerpo.Accion = "LISTAR";
                objCuerpo.IdEstablecimiento = idEstablecimiento;
                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcEstablecimiento.listarEstablecimiento(objCuerpo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (CM_CO_Establecimiento objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCuerpo.Accion = "NUEVO";
            }
            objCuerpo.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Establecimiento/EstablecimientoRegistro", objCuerpo, "");
        }

        public System.Web.Mvc.ActionResult save_establecimiento(CM_CO_Establecimiento objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_establecimiento - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSESTABLECIMIENTO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {


                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcEstablecimiento.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        public System.Web.Mvc.ActionResult postWindowEstablecimiento(String id)
        {
            Log.Information("GestionController - postWindowEstablecimiento - Entrar");
            CM_CO_Establecimiento objCuerpo = new CM_CO_Establecimiento();
            var Listar = new List<CM_CO_Establecimiento>();

            ////  var field = X.GetCmp<TextField>("txtClase");
            //// if (field != null)
            ////  {
            //objCuerpo.ACCION = "LISTAR";
            //objCuerpo.IdCobertura = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
            //Listar = SvcCobertura.listarCobertura(objCuerpo, 0, 0);
            //if (Listar.Count == 1)
            //{
            //    foreach (SS_SG_MaestroCobertura objEntity in Listar)
            //    {
            //        objCuerpo = objEntity;
            //        //    field.SetValue(objCuerpo.Descripcion);
            //    }
            //    //  }
            //}
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        /* PROPIEDADES DE VALIDACION */

        public System.Web.Mvc.ActionResult Prueba_View()
        {
            Log.Information("GestionController - Prueba_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/PAE/PRUEBA/Prueba_View");
        }
        public System.Web.Mvc.ActionResult CCEP6062_View()
        {
            Log.Information("GestionController - CCEP6062_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/PropiedadesValidacion/CCEP6062_View");
        }
        public System.Web.Mvc.ActionResult getPropiedadesValidacionW(int start, int limit,
               string componente, string atributo, string tipoBuscar)
        {
            Log.Information("GestionController - getPropiedadesValidacionW - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<VW_SS_HC_TABLAFORMATO_VALIDACION>();

                var LocalEnty = new VW_SS_HC_TABLAFORMATO_VALIDACION();

                LocalEnty.IdComponente = Convert.ToInt32(getValorFiltroInt(componente));
                LocalEnty.IdAtributo = Convert.ToInt32(getValorFiltroInt(atributo));

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAGVALIDACION";
                int cantElementos = SvcTABLAFORMATOVALIDACION.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAGVALIDACION";
                    Listar = SvcTABLAFORMATOVALIDACION.listarVWTABLAFORMATOVALIDACION(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getPropiedadesValidacion(int start, int limit, string id,
               string formato, string atributo, string componente, string campo, string tipoBuscar, string estado)
        {
            Log.Information("GestionController - getPropiedadesValidacion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<VW_SS_HC_TABLAFORMATO_VALIDACION>();

                var LocalEnty = new VW_SS_HC_TABLAFORMATO_VALIDACION();

                LocalEnty.IdFormato = Convert.ToInt32(getValorFiltroInt(id));
                LocalEnty.DescripcionFormato = getValorFiltroStr(formato);
                LocalEnty.IdComponente = Convert.ToInt32(getValorFiltroInt(componente));
                LocalEnty.IdAtributo = Convert.ToInt32(getValorFiltroInt(atributo));
                LocalEnty.ValorPorDefecto = getValorFiltroStr(campo);
                LocalEnty.EstadoValidacion = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.EstadoValidacion = null;
                }

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAGVALIDACION";
                int cantElementos = SvcTABLAFORMATOVALIDACION.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAGVALIDACION";
                    Listar = SvcTABLAFORMATOVALIDACION.listarVWTABLAFORMATOVALIDACION(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult PropiedadesValidacionRegistro(String MODO, int idPropiedadValidacion, int secuenciac, int secuenciav)
        {
            Log.Information("GestionController - PropiedadesValidacionRegistro - Entrar");
            var Listar = new List<SS_HC_ControlValidacion>();

            SS_HC_ControlValidacion objPropíedadValidacion = new SS_HC_ControlValidacion();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objPropíedadValidacion.Accion = "LISTAR";
                objPropíedadValidacion.IdFormato = idPropiedadValidacion;
                objPropíedadValidacion.SecuenciaCampo = secuenciac;
                objPropíedadValidacion.SecuenciaValidacion = secuenciav;

                Listar = SvcControlValidacion.listarControlValidacion(objPropíedadValidacion, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_ControlValidacion objEntity in Listar)
                    {
                        objPropíedadValidacion = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objPropíedadValidacion.Accion = "NUEVO";
            }
            objPropíedadValidacion.Accion = MODO;

            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            /***************************************************/
            return crearWindowRegistro("Maestros/PropiedadesValidacion/PropiedadValidacionRegistro", objPropíedadValidacion, "");
            //return View("UsuarioRegistro", LocalEnty);
        }


        public System.Web.Mvc.ActionResult save_SS_HC_ControlValidacion(SS_HC_ControlValidacion objPropíedadValidacion, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SS_HC_ControlValidacion - Entrar");

            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objPropíedadValidacion != null)
            {
                objPropíedadValidacion.Accion = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objPropíedadValidacion, UTILES_MENSAJES.FORM_MSCONTROLVALIDACION);
                }
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objPropíedadValidacion.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objPropíedadValidacion.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objPropíedadValidacion.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objPropíedadValidacion.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        /////registro
                        if (objPropíedadValidacion.FlagTipoDato == "B")
                        {
                            objPropíedadValidacion.ValorNumerico = Convert.ToDecimal(objPropíedadValidacion.Version);
                        }
                        objPropíedadValidacion.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcControlValidacion.setMantenimiento(objPropíedadValidacion);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  campo (" + objPropíedadValidacion.SecuenciaValidacion + ") satisfactoriamente.";
                            //X.Msg.Notify(tituloMsg, "" + message).Show();
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objPropíedadValidacion.Accion = "INFO";
            if (indicaValidacionForm)
            {
                //return showMensajeBox(message, tituloMsg, tipoMsg);
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        public System.Web.Mvc.ActionResult getSeleccionRecExternosPropvalidacion(String MODO, String codigo, String valor, String idWindow)
        {
            Log.Information("GestionController - getSeleccionRecExternosPropvalidacion - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var texto = X.GetCmp<TextArea>("ValorTexto");
            texto.SetValue("" + texto.Text + "" + valor);


            return this.Direct();
        }


        /********** TABLA FAVORITO ***************/
        public System.Web.Mvc.ActionResult CCEP0116_View()
        {
            Log.Information("GestionController - CCEP0116_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Favoritos/CCEP0116_View");
        }

        public System.Web.Mvc.ActionResult AsignarDetalleFavorito(String MODO, int idFavorito, int numerofavorito, string Mneotecnico)
        {
            Log.Information("GestionController - AsignarDetalleFavorito - Entrar");

            var Listar = new List<vw_favoritos>();

            vw_favoritos obj = new vw_favoritos();
            if (idFavorito != null)
            {
                obj.Accion = "LISTAR";
                obj.IdFavorito = idFavorito;
                obj.NumeroFavorito = numerofavorito;
                obj.Mnemotecnico = Mneotecnico;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcVw_Favoritos.listarvw_favoritos(obj, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (vw_favoritos objEntity in Listar)
                    {
                        obj = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                obj.Accion = "NUEVO";
            }
            Session["DataDetalleFavDelete"] = null;
            Session["DataDetalleFavSave"] = null;
            return crearWindowRegistro("Maestros/Favoritos/AsignarDetalleFavorito", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public System.Web.Mvc.ActionResult save_favoritoDetalle(SS_HC_FavoritoDetalle objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_favoritoDetalle - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";

            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN

                {
                    List<SS_HC_FavoritoDetalle> dataDelete = new List<SS_HC_FavoritoDetalle>();
                    List<SS_HC_FavoritoDetalle> dataSave = new List<SS_HC_FavoritoDetalle>();
                    if (Session["DataDetalleFavDelete"] != null)
                    {

                        dataDelete = (List<SS_HC_FavoritoDetalle>)Session["DataDetalleFavDelete"];
                        foreach (SS_HC_FavoritoDetalle obj in dataDelete)
                        {
                            idResultado = SvcFavoritoDetalle.setMantenimiento(obj, 0, 0);
                        }
                    }

                    if (Session["DataDetalleFavSave"] != null)
                    {
                        dataSave = (List<SS_HC_FavoritoDetalle>)Session["DataDetalleFavSave"];
                        foreach (SS_HC_FavoritoDetalle obj in dataSave)
                        {

                            //obj.Accion = MODO;
                            //msgNoValido = UTILES_MENSAJES.getValidacionFormulario(obj, UTILES_MENSAJES.FORM_MSFAVORITODETALLE);


                            //if (msgNoValido.Count > 0)
                            //{
                            //    message = msgNoValido[0].DESCRIPCION;
                            //    tipoMsg = "WARNING";
                            //    tituloMsg = "Advertencia";
                            //    indicaValidacionForm = true;
                            //}
                            //else
                            //{

                            obj.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            idResultado = SvcFavoritoDetalle.setMantenimiento(obj, 0, 0);

                            //}
                        }
                    }

                    //////////////////////////////////////////////
                    if (idResultado > 0)
                    {
                        //message = "Los " + accion + " cambios se guardaron (" + objSave.Secuencia + ") satisfactoriamente.";

                        message = "Los cambios  se guardaron satisfactoriamente";

                    }
                    else
                    {
                        return showMensajeBox("Debe Seleccionar un listado para Guardar" + "", "Advertencia", "WARNING", "accionFinal");
                        //return showMensajeNotify("Error", "No se ingresaron datos para guardar.", "ERROR");
                        //return showMensajeNotifyData("ERROR", "Sucedió un error inesperado en CCEPF001 al Guardar :" + "", "ERROR", false);
                        //tipoMsg = "ERROR";
                        //message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                        //tituloMsg = "Error";
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No hubieron cambios que guardar.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                Session["DataDetalleFavDelete"] = null;
                Session["DataDetalleFavSave"] = null;
                return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        public System.Web.Mvc.ActionResult Submit(string selection)
        {
            Log.Information("GestionController - Submit - Entrar");

            StringBuilder result = new StringBuilder();

            result.Append("<b>Selected Rows (ids)</b></br /><ul>");
            SelectedRowCollection src = JSON.Deserialize<SelectedRowCollection>(selection);

            foreach (SelectedRow row in src)
            {
                result.Append("<li>" + row.RecordID + "</li>");
            }

            result.Append("</ul>");
            X.GetCmp<Label>("Label1").Html = result.ToString();

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult add_SaveDetalleFavorito(String data, string accion, int nuevo, int num)
        {
            Log.Information("GestionController - add_SaveDetalleFavorito - Entrar");

            List<ENTITY_MENSAJES> mensajes = new List<ENTITY_MENSAJES>();
            String mensaje = null;
            ENTITY_MENSAJES objMsg = new ENTITY_MENSAJES();


            if ((data != null) || (data.Length > 0))
            {
                List<SS_HC_FavoritoDetalle> VariableGenerales = (List<SS_HC_FavoritoDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_FavoritoDetalle>));
                List<SS_HC_FavoritoDetalle> dataSave = null;


                if (Session["DataDetalleFavSave"] != null)
                {
                    dataSave = (List<SS_HC_FavoritoDetalle>)Session["DataDetalleFavSave"];
                }
                else
                {
                    dataSave = new List<SS_HC_FavoritoDetalle>();
                }

                if (VariableGenerales.Count > 0)
                {
                    Boolean add = true;
                    for (int i = 0; i < VariableGenerales.Count; i++)
                    {

                        SS_HC_FavoritoDetalle node = VariableGenerales[i];

                        SS_HC_FavoritoDetalle objDet = new SS_HC_FavoritoDetalle();
                        var Listar = new List<SS_HC_FavoritoDetalle>();
                        objDet.Accion = "LISTAR";
                        objDet.IdFavorito = nuevo;
                        objDet.NumeroFavorito = num;
                        Listar = SvcFavoritoDetalle.listarFavoritoDetalle(objDet, 0, 0, 0, 0);



                        if (Listar.Count > 0)
                        {
                            foreach (SS_HC_FavoritoDetalle objEntity in Listar)
                            {
                                if (objEntity.ValorTexto1 == node.ValorTexto1)
                                {
                                    mensaje = "Elemento seleccionado ya se encuentra guardado dentro de la tabla. No puede ser guardado'";
                                    mensajes.Add(new ENTITY_MENSAJES
                                    {
                                        DESCRIPCION = mensaje,
                                        IDCOMPONENTE = "txtDesc",
                                        NIVEL = 1
                                    });
                                    add = false;
                                }

                            }
                        }
                        else
                        {

                            //foreach (SS_HC_FavoritoDetalle objEntity in VariableGenerales)
                            //{
                            //    dataSave.Add(objEntity);
                            //}

                        }
                        //if (dataSave.Count > 0)
                        //{

                        //    foreach (SS_HC_FavoritoDetalle objSave in dataSave)
                        //    {
                        //        Listar.Add(objSave);
                        //    }
                        //}



                    }


                    if (add)
                    {
                        foreach (SS_HC_FavoritoDetalle objEntity in VariableGenerales)
                        {
                            dataSave.Add(objEntity);
                        }
                    }

                }
                Session["DataDetalleFavSave"] = dataSave;
            }
            return this.Store(mensajes);
        }



        public System.Web.Mvc.ActionResult add_DeleteDetalleFavorito(String data, string accion)
        {
            Log.Information("GestionController - add_DeleteDetalleFavorito - Entrar");

            if ((data != null) || (data.Length > 0))
            {
                List<SS_HC_FavoritoDetalle> VariableGenerales = (List<SS_HC_FavoritoDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_FavoritoDetalle>));
                List<SS_HC_FavoritoDetalle> dataDelete = null;
                List<SS_HC_FavoritoDetalle> dataAdd = null;
                List<SS_HC_FavoritoDetalle> dataAdd2 = null;
                if (Session["DataDetalleFavDelete"] != null)
                {
                    dataDelete = (List<SS_HC_FavoritoDetalle>)Session["DataDetalleFavDelete"];
                }
                else
                {
                    dataDelete = new List<SS_HC_FavoritoDetalle>();
                }
                if (Session["DataDetalleFavSave"] != null)
                {
                    dataAdd = (List<SS_HC_FavoritoDetalle>)Session["DataDetalleFavSave"];
                    dataAdd2 = dataAdd.ToList();
                    foreach (SS_HC_FavoritoDetalle objEntity in VariableGenerales)
                    {
                        foreach (SS_HC_FavoritoDetalle objAdd in dataAdd)
                        {

                            if (objEntity.ValorTexto1 == objAdd.ValorTexto1)
                            {
                                dataAdd2.Remove(objAdd);
                            }

                        }

                    }
                    Session["DataDetalleFavSave"] = dataAdd2;

                }

                if (VariableGenerales.Count > 0)
                {
                    foreach (var result in VariableGenerales)
                    {
                        dataDelete.Add(result);
                    }
                }
                Session["DataDetalleFavDelete"] = dataDelete;
            }

            return this.Direct();

        }

        public StoreResult GetListarBusquedaServicios(int start, int limit, string tipofiltro, string tipoBuscar, string Linea, string Familia, string descripciones)
        {
            Log.Information("GestionController - GetListarBusquedaServicios - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<MA_MiscelaneosDetalle>();
            var LocalEnty = new MA_MiscelaneosDetalle();
            int cantElementos = 0;

            if (!(tipofiltro.Trim().Equals("MM000")))
            {
                if (Familia == "") { Familia = "000   INSUMOS Y REACTIVOS"; }
            }

            LocalEnty.CodigoTabla = getValorFiltroStr(tipofiltro);
            LocalEnty.ValorCodigo1 = ENTITY_GLOBAL.Instance.CONCEPTO;
            LocalEnty.ValorCodigo4 = getValorFiltroStr(Linea);
            LocalEnty.ValorCodigo5 = getValorFiltroStr(Familia);
            LocalEnty.ValorCodigo2 = getValorFiltroStr(descripciones);

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;

            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

            LocalEnty.ACCION = "BUSCARLINEAFAMILIA";
            cantElementos = SvcMiscelaneos.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.ACCION = "BUSCARLINEAFAMILIA";
                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, ini, fin);
            }
            return this.Store(Listar, cantElementos);
        }

        public System.Web.Mvc.ActionResult getGrillaVW_Favoritos(int start, int limit, string codigo, string tipousuario,
        string nombre, string estado, string tabla, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVW_Favoritos - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<vw_favoritos>();

                var LocalEnty = new vw_favoritos();

                LocalEnty.Descripcion = getValorFiltroStr(nombre);//Convert.ToInt32(getValorFiltroInt(codigo));
                LocalEnty.CodigoAgente = getValorFiltroStr(codigo);
                LocalEnty.IdFavoritoTabla = Convert.ToInt32(getValorFiltroInt(tabla));
                LocalEnty.TipoFavorito = Convert.ToInt32(getValorFiltroInt(tipousuario));
                if (tipousuario == "")
                {
                    LocalEnty.TipoFavorito = null;
                }
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcVw_Favoritos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcVw_Favoritos.listarvw_favoritos(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaFavorito(int start, int limit,
            string id, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFavorito - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_Favorito>();

                var LocalEnty = new SS_HC_Favorito();

                LocalEnty.TipoFavorito = Convert.ToInt32(getValorFiltroInt(id));
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcFavorito.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFavorito.listarFavorito(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult FavoritoRegistro(String MODO, int idFavorito)
        {
            Log.Information("GestionController - FavoritoRegistro - Entrar");
            var Listar = new List<SS_HC_Favorito>();

            SS_HC_Favorito objfavorito = new SS_HC_Favorito();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objfavorito.Accion = "LISTAR";
                objfavorito.IdFavorito = idFavorito;

                Listar = SvcFavorito.listarFavorito(objfavorito, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_Favorito objEntity in Listar)
                    {
                        objfavorito = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objfavorito.Accion = "NUEVO";
            }
            objfavorito.Accion = MODO;


            ////
            List<SS_HC_Formato> listFor = new List<SS_HC_Formato>();
            SS_HC_Formato objF = new SS_HC_Formato();
            objF.CodigoFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
            objF.Accion = "LISTAR";
            listFor = SvcFormato.listarFormato(objF, 0, 0);
            if (listFor.Count > 0)
            {
                ENTITY_GLOBAL.Instance.IDFORMATO = listFor[0].IdFormato;
            }
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Favoritos/FavoritoRegistro", objfavorito, "");

        }

        public System.Web.Mvc.ActionResult FavoritoNumeroRegistro(String MODO, int idFavorito, int numero, string mnemotecnico)
        {
            Log.Information("GestionController - FavoritoNumeroRegistro - Entrar");

            var Listar = new List<SS_HC_FavoritoNumero>();

            SS_HC_FavoritoNumero objfavorito = new SS_HC_FavoritoNumero();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objfavorito.Accion = "LISTAR";
                objfavorito.IdFavorito = idFavorito;
                objfavorito.NumeroFavorito = numero;
                objfavorito.Mnemotecnico = mnemotecnico;

                Listar = SvcFavoritoNumero.listarFavoritoNumero(objfavorito, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FavoritoNumero objEntity in Listar)
                    {
                        objfavorito = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objfavorito.IdFavorito = idFavorito;
                objfavorito.Accion = "NUEVO";
            }
            objfavorito.Accion = MODO;
            List<SS_HC_Formato> listFor = new List<SS_HC_Formato>();
            SS_HC_Formato objF = new SS_HC_Formato();
            objF.CodigoFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
            objF.Accion = "LISTAR";
            listFor = SvcFormato.listarFormato(objF, 0, 0);
            if (listFor.Count > 1)
            {
                ENTITY_GLOBAL.Instance.IDFORMATO = listFor[1].IdFormato;
            }
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Favoritos/FavoritoNumeroRegistro", objfavorito, "");

        }

        public System.Web.Mvc.ActionResult save_favoritonumero(SS_HC_FavoritoNumero objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_favoritonumero - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFAVORITONUMERO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcFavoritoNumero.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.Descripcion + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }

                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";

            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        /***/

        public System.Web.Mvc.ActionResult getSeleccionadorAgente(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorAgente - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdAgente");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtDescripA");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowAgente_L(String idpadreagente, String idpadre)
        {
            Log.Information("GestionController - postWindowAgente_L - Entrar");

            SG_Agente objAg = new SG_Agente();
            var Listar = new List<SG_Agente>();

            var field = X.GetCmp<TextField>("txtDescripA");
            if (field != null)
            {
                objAg.ACCION = "LISTAR";
                objAg.IdAgente = (getValorFiltroInt(idpadreagente) != null ? Convert.ToInt32(getValorFiltroInt(idpadreagente)) : 0);
                Listar = SvcSG_Agente.listarSG_Agente(objAg, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAg = objEntity;
                        field.SetValue(objAg.Descripcion);
                    }
                }
            }
            ////
            SS_HC_Tabla objTabla = new SS_HC_Tabla();
            var ListarTa = new List<SS_HC_Tabla>();

            var field1 = X.GetCmp<TextField>("txtDescrip");
            if (field1 != null)
            {
                objTabla.Accion = "LISTARPORID";
                objTabla.IdFavoritoTabla = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                ListarTa = SvcTabla.listarTabla(objTabla, 0, 0);
                if (ListarTa.Count == 1)
                {
                    foreach (SS_HC_Tabla objEntity in ListarTa)
                    {
                        objTabla = objEntity;
                        field1.SetValue(objTabla.Descripcion);
                    }
                }
            }

            setPropiedadesFormulario(true);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorAgente(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorAgente - Entrar");

            SG_Agente obj = new SG_Agente();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            return crearWindowRegistro("SeleccionadorAgente", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionadorTabla(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorTabla - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdFavoritoTabla");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtDescrip");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowTabla(String idpadre)
        {
            Log.Information("GestionController - postWindowTabla - Entrar");

            SS_HC_Tabla objTabla = new SS_HC_Tabla();
            var Listar = new List<SS_HC_Tabla>();

            var field = X.GetCmp<TextField>("txtDescrip");
            if (field != null)
            {
                objTabla.Accion = "LISTARPORID";
                objTabla.IdFavoritoTabla = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcTabla.listarTabla(objTabla, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Tabla objEntity in Listar)
                    {
                        objTabla = objEntity;
                        field.SetValue(objTabla.Descripcion);
                    }
                }
            }
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult getGrillaTabla(int start, int limit, string nombre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaTabla - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_Tabla>();

                var LocalEnty = new SS_HC_Tabla();

                LocalEnty.Descripcion = getValorFiltroStr(nombre);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcTabla.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcTabla.listarTabla(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorTabla(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorTabla - Entrar");
            SS_HC_Tabla obj = new SS_HC_Tabla();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorTabla", obj, "");
        }
        public System.Web.Mvc.ActionResult save_favorito(SS_HC_Favorito objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_favorito - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFAVORITO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcFavorito.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.Descripcion + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }

                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }


        /********** TABLA FAVORITO CODIGO***************/
        public System.Web.Mvc.ActionResult CCEP0911_View()
        {
            Log.Information("GestionController - CCEP0911_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/FavoritoCodigo/CCEP0911_View");
        }

        public System.Web.Mvc.ActionResult getGrillaFavoritoDetalle(int start, int limit, String id, String numero, String descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFavoritoDetalle - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_HC_FavoritoDetalle>();

            var LocalEnty = new SS_HC_FavoritoDetalle();

            LocalEnty.IdFavorito = Convert.ToInt32(getValorFiltroInt(id));
            LocalEnty.NumeroFavorito = Convert.ToInt32(getValorFiltroInt(numero));
            LocalEnty.ValorTexto1 = getValorFiltroStr(descripcion);

            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;

            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

            LocalEnty.Accion = "CONTARLISTAPAG";
            int cantElementos = SvcFavoritoDetalle.setMantenimiento(LocalEnty, 0, 0);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcFavoritoDetalle.listarFavoritoDetalle(LocalEnty, inicio, final, 0, 0);
            }

            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult getGrillaFavoritoCodigo(int start, int limit,
    string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFavoritoCodigo - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_FavoritoCodigoId>();

                var LocalEnty = new SS_HC_FavoritoCodigoId();

                LocalEnty.ValorTexto = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcFavoritoCodigo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFavoritoCodigo.listarFavoritoCodigo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionadorFavorito(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorFavorito - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdFavorito");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtDescripF");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowFavorito(String idpadrefavorito, String idpadre)
        {
            Log.Information("GestionController - postWindowFavorito - Entrar");

            SS_HC_Favorito objAg = new SS_HC_Favorito();
            var Listar = new List<SS_HC_Favorito>();

            var field = X.GetCmp<TextField>("txtDescripF");
            if (field != null)
            {
                objAg.Accion = "LISTAR";
                objAg.IdFavorito = (getValorFiltroInt(idpadrefavorito) != null ? Convert.ToInt32(getValorFiltroInt(idpadrefavorito)) : 0);
                Listar = SvcFavorito.listarFavorito(objAg, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Favorito objEntity in Listar)
                    {
                        objAg = objEntity;
                        field.SetValue(objAg.Descripcion);
                    }
                }
            }

            setPropiedadesFormulario(true);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorFavorito(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFavorito - Entrar");

            SS_HC_Favorito obj = new SS_HC_Favorito();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorFavorito", obj, "");
        }

        public System.Web.Mvc.ActionResult FavoritoCodigoRegistro(String MODO, int idFavoritoCodigo, int CampoCodigo)
        {
            Log.Information("GestionController - FavoritoCodigoRegistro - Entrar");

            var Listar = new List<SS_HC_FavoritoCodigoId>();

            SS_HC_FavoritoCodigoId objfavoritoCodigo = new SS_HC_FavoritoCodigoId();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objfavoritoCodigo.Accion = "LISTAR";
                objfavoritoCodigo.IdFavorito = idFavoritoCodigo;
                objfavoritoCodigo.CampoCodigoId = CampoCodigo;

                Listar = SvcFavoritoCodigo.listarFavoritoCodigo(objfavoritoCodigo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FavoritoCodigoId objEntity in Listar)
                    {
                        objfavoritoCodigo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objfavoritoCodigo.Accion = "NUEVO";
            }
            objfavoritoCodigo.Accion = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/FavoritoCodigo/FavoritoCodigoRegistro", objfavoritoCodigo, "");

        }


        public System.Web.Mvc.ActionResult save_favoritocodigo(SS_HC_FavoritoCodigoId objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_favoritocodigo - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                objSave.Accion = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFAVCODIGO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objSave.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        idResultado = SvcFavoritoCodigo.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.ValorTexto + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }

                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        /**MAESTRO USUARIO*/
        public System.Web.Mvc.ActionResult CCEP0006_View()
        {
            Log.Information("GestionController - CCEP0006_View - Entrar");
            return View("Maestros/Usuario/CCEP0006_View");
            //return View("CCEP0006_View");
        }
        public System.Web.Mvc.ActionResult getGrillaListadoUsuarios(int start, int limit,
            string usuario, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaListadoUsuarios - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<USUARIO>();

                var LocalEnty = new USUARIO();
                //LocalEnty.ACCION = "LISTAR";
                LocalEnty.NOMBRE = (usuario != null ? (usuario.Trim().Length > 0 ? usuario.Trim() : null) : null);
                LocalEnty.NUMEROLOGINSDISPONIBLE = (start == 0 ? start : start + 1);
                LocalEnty.NUMEROLOGINSUSADOS = start + limit;
                //Si la busqeuda proviene de filtros
                if (tipoBuscar == "FILTRO") { LocalEnty.NUMEROLOGINSDISPONIBLE = 0; LocalEnty.NUMEROLOGINSUSADOS = limit; }
                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                } */
                ////contar :  Stored: SP_USUARIO
                LocalEnty.ACCION = "CONTARLISTAPAG";
                int cantElementos = SvcUsuario.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcUsuario.listarUsuario(LocalEnty);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult UsuarioRegistro(String MODO, String usuario)
        {
            Log.Information("GestionController - UsuarioRegistro - Entrar");

            var Listar = new List<USUARIO>();

            USUARIO objUsuario = new USUARIO();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objUsuario.ACCION = "LISTAR";
                objUsuario.USUARIO1 = usuario;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcUsuario.listarUsuario(objUsuario);
                if (Listar.Count > 0)
                {
                    foreach (USUARIO objEntity in Listar)
                    {
                        objUsuario = objEntity;
                    }
                }
                if (objUsuario.CLAVE != null)
                    objUsuario.CLAVE = objUsuario.CLAVE.Trim();
            }
            else if (MODO == "NUEVO")
            {
                objUsuario.ACCION = "NUEVO";
            }
            objUsuario.ACCION = MODO;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);

            return crearWindowRegistro("Maestros/Usuario/UsuarioRegistro", objUsuario, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public System.Web.Mvc.ActionResult AsignarPerfilUsuarioRegistro(String MODO, String usuario)
        {
            Log.Information("GestionController - AsignarPerfilUsuarioRegistro - Entrar");

            var Listar = new List<USUARIO>();
            List<SEGURIDADPERFILUSUARIO> ListarPerfilUsuario = new List<SEGURIDADPERFILUSUARIO>();
            SEGURIDADPERFILUSUARIO objPefilUsuario = new SEGURIDADPERFILUSUARIO();
            USUARIO objUsuario = new USUARIO();
            if (usuario != null)
            {
                objUsuario.ACCION = "LISTAR";
                objUsuario.USUARIO1 = usuario;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcUsuario.listarUsuario(objUsuario);
                if (Listar.Count > 0)
                {
                    foreach (USUARIO objEntity in Listar)
                    {
                        objUsuario = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objUsuario.ACCION = "NUEVO";
            }
            objUsuario.ACCION = MODO;
            objPefilUsuario.USUARIO = objUsuario.USUARIO1;
            objPefilUsuario.PERFIL = "ADMINSYS";
            ListarPerfilUsuario.Add(objPefilUsuario);
            //objPefilUsuario.PERFIL = objUsuario.USUARIO1;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);

            //var field = X.GetCmp<GridPanel>("GridPanelPerfilUsuario");
            Session["DataPerfilusuarios"] = null;
            Session["DataPerfilusuariosDelete"] = null;
            return crearWindowRegistro("Maestros/Usuario/AsignarPerfilUsuarioRegistro", objPefilUsuario, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult getGrillaListaPerfilUsuario(String usuario)
        {
            Log.Information("GestionController - getGrillaListaPerfilUsuario - Entrar");

            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.GRUPO = "";
            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SEGURIDADPERFILUSUARIO>();

            var LocalEnty = new SEGURIDADPERFILUSUARIO();
            LocalEnty.ACCION = "LISTAR";
            LocalEnty.USUARIO = usuario;

            /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                var llego = "";
            } */
            Listar = SvcSeguridadPerfilUsuario.listarSeguridadPerfilUsuario(LocalEnty);
            foreach (var objData in Listar)
            {
                objData.ESTADO = (objData.ESTADO != null ? objData.ESTADO.Trim() : null);
                objData.PERFIL = objData.PERFIL.Trim();
            }
            //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
            //Session["ENTITY_PACIENTE"] = Listar;                
            return this.Store(Listar);
        }
        /**Obtener el empleado seleccionado desde el Window general*/
        public System.Web.Mvc.ActionResult getSeleccionPersonaMaestroUsuario(String MODO, int persona, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPersonaMaestroUsuario - Entrar");

            //
            // Session["usuarioSeleccion"] = "" + usuario;                
            // var winss = X.GetCmp<GridPanel>(idWindow);


            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            var txt = X.GetCmp<NumberField>("nfPersona");
            txt.SetValue(persona);

            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Persona = persona;
            obj.ACCION = "LISTARPORID";
            lista = SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
            if (lista.Count == 1)
            {
                foreach (var result in lista)
                {
                    var txtNombre = X.GetCmp<TextField>("tfNombre");
                    txtNombre.SetValue(result.NombreCompleto);
                }
            }

            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return this.Direct();
            //return View("UsuarioRegistro", LocalEnty);
        }
        public String validoFormularioUsuario(USUARIO objSave)
        {
            Log.Information("GestionController - validoFormularioUsuario - Entrar");

            String mensaje = null;
            if (objSave != null)
            {
                if (objSave.USUARIO1 != null)
                {
                    if (objSave.USUARIO1.Trim().Length == 0)
                    {
                        mensaje = "Debe ingresar un valor para el campo 'USUARIO'";
                    }

                    USUARIO objAux = new USUARIO();
                    objAux.ACCION = "LISTAR";
                    objAux.USUARIO1 = objSave.USUARIO1;
                    var listResult = SvcUsuario.listarUsuario(objAux);
                    if (listResult.Count > 0)
                    {
                        mensaje = "El Código de 'Usuario/Perfil' ingresado ya existe. Cambiar por otro.";
                    }
                }
                else
                {
                    mensaje = "Debe ingresar un valor para el campo 'USUARIO'";
                }
                if (objSave.USUARIOPERFIL == "US")
                {
                    if (objSave.PERSONA == null)
                    {
                        mensaje = "Debe seleccionar una Persona para el Usuario actual.";
                    }
                }


            }
            return mensaje;
        }
        public System.Web.Mvc.ActionResult save_Usuario(USUARIO objUsuario, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Usuario - Entrar");

            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";

            Boolean indicaValidacionForm = false;
            if (objUsuario != null)
            {
                ////VALIDACIÓN
                String msgNoValido = validoFormularioUsuario(objUsuario);
                if (msgNoValido != null)
                {
                    message = msgNoValido;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    if (MODO == "NUEVO")
                    {
                        objUsuario.ACCION = "INSERT";
                        accion = "registró";
                        //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                    }
                    else if (MODO == "UPDATE")
                    {
                        objUsuario.ACCION = "UPDATE";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objUsuario.ACCION = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encotró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    /////registro
                    objUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                    idResultado = SvcUsuario.setMantenimiento(objUsuario);
                    //////////////////////FINAL
                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " el  usuario (" + objUsuario.USUARIO1 + ") satisfactoriamente.";
                        //X.Msg.Notify(tituloMsg, "" + message).Show();
                    }
                    else
                    {
                        tipoMsg = "ERROR";
                        message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                        tituloMsg = "Error";
                        //X.Msg.Alert(tituloMsg, "" + message).Show();
                        //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            objUsuario.ACCION = "INFO";
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            if (indicaValidacionForm)
            {
                return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
            }
            else
            {

                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }


        public System.Web.Mvc.ActionResult addEliminar_PerfilUsuario(String MODO, String usuario, String perfil)
        {
            Log.Information("GestionController - addEliminar_PerfilUsuario - Entrar");

            List<SEGURIDADPERFILUSUARIO> dataDelete = null;
            Boolean indicaCargado = false;
            if (Session["DataPerfilusuariosDelete"] != null)
            {
                dataDelete = (List<SEGURIDADPERFILUSUARIO>)Session["DataPerfilusuariosDelete"];
                indicaCargado = true;
            }
            if (dataDelete == null)
            {
                dataDelete = new List<SEGURIDADPERFILUSUARIO>();
            }
            SEGURIDADPERFILUSUARIO objDelete = new SEGURIDADPERFILUSUARIO();
            objDelete.PERFIL = perfil;
            objDelete.USUARIO = usuario;
            objDelete.ACCION = MODO;
            dataDelete.Add(objDelete);
            Session["DataPerfilusuariosDelete"] = dataDelete;
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult save_PerfilUsuario(SEGURIDADPERFILUSUARIO objPerfilUsuario, String MODO,
                String idWindow, String data)
        {
            Log.Information("GestionController - save_PerfilUsuario - Entrar");

            //var grid = X.GetCmp<GridPanel>("GridPanelPerfilUsuario");


            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objPerfilUsuario != null)
            {
                if (MODO == "NUEVO")
                {
                    objPerfilUsuario.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objPerfilUsuario.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objPerfilUsuario.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<SEGURIDADPERFILUSUARIO> dataDelete = null;
                if (Session["DataPerfilusuariosDelete"] != null)
                {
                    dataDelete = (List<SEGURIDADPERFILUSUARIO>)Session["DataPerfilusuariosDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.ACCION != null)
                        {
                            if (objDel.ACCION.Trim().Length > 0)
                            {
                                idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objDel);
                            }
                        }

                    }
                }
                /////registro -save
                List<SEGURIDADPERFILUSUARIO> dataSave;
                objPerfilUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                String ObjArrays = null;
                Session["DataPerfilusuarios"] = data;
                ObjArrays = (string)Session["DataPerfilusuarios"];
                dataSave = (List<SEGURIDADPERFILUSUARIO>)Newtonsoft.Json.JsonConvert.DeserializeObject(ObjArrays, typeof(List<SEGURIDADPERFILUSUARIO>));

                foreach (var objSave in dataSave)
                {
                    if (objSave.ACCION != null)
                    {
                        if (objSave.ACCION.Trim().Length > 0)
                        {
                            objSave.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                            idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objSave);
                        }
                    }

                }

                //idResultado = SvcUsuario.setMantenimiento(objPerfilUsuario);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + accion + " el  usuario (" + objPerfilUsuario.USUARIO + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            //objPerfilUsuario.ACCION = "INFO";                
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }


        /***********************************/
        /**MAESTRO ASIGNAR CONCEPTO SEGURIDAD USUARIO*/
        public System.Web.Mvc.ActionResult CCEP0007_View()
        {
            Log.Information("GestionController - CCEP0007_View - Entrar");

            return View("Maestros/AsignarAutorizaciones/CCEP0007_View");
            //return View("CCEP0006_View");
        }
        public System.Web.Mvc.ActionResult getGrillaListadoUsuariosAutorizacion(int start, int limit, string usuario, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaListadoUsuariosAutorizacion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<USUARIO>();

                var LocalEnty = new USUARIO();
                LocalEnty.USUARIO1 = usuario;
                LocalEnty.ESTADO = estado;
                if (estado == "T")
                {
                    LocalEnty.ESTADO = null;
                }

                LocalEnty.NUMEROLOGINSDISPONIBLE = (start == 0 ? start : start + 1);
                LocalEnty.NUMEROLOGINSUSADOS = start + limit;
                if (tipoBuscar == "FILTRO") { LocalEnty.NUMEROLOGINSDISPONIBLE = 0; LocalEnty.NUMEROLOGINSUSADOS = limit; }

                LocalEnty.ACCION = "CONTARLISTAPAG";
                int cantElementos = SvcUsuario.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAGAUTORIZA";
                    Listar = SvcUsuario.listarUsuario(LocalEnty);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult AsignarAutorizacionesRegistro(String MODO, String usuario)
        {
            Log.Information("GestionController - AsignarAutorizacionesRegistro - Entrar");
            //var field = X.GetCmp<TreePanel>("treeMain");
            //field.RemoveAll();
            ENTITY_GLOBAL.Instance.objModel = null;
            SEGURIDADAUTORIZACIONE objAutorizac = new SEGURIDADAUTORIZACIONE();
            //var Listar = new List<USUARIO>();
            if (MODO == "NUEVO")
            {
                objAutorizac.ACCION = "NUEVO";
            }
            objAutorizac.ACCION = MODO;

            //objPefilUsuario.PERFIL = objUsuario.USUARIO1;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);

            objAutorizac.ACCION = MODO;
            objAutorizac.USUARIO = usuario;
            objAutorizac.APLICACIONCODIGO = "WA";
            objAutorizac.GRUPO = ""; //GESTION
            objAutorizac.CONCEPTO = "";  //CE                   

            return crearWindowRegistro("Maestros/AsignarAutorizaciones/AsignarAutorizacionesRegistro", objAutorizac, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public StoreResult GetTreeViewChildAsignacion(string usuario, string tipo, string node)
        {
            Log.Information("GestionController - GetTreeViewChildAsignacion - Entrar");

            //SEGURIDADAUTORIZACIONE objAutorizac = (SEGURIDADAUTORIZACIONE)ENTITY_GLOBAL.Instance.objModel;
            if (usuario != null)
            {
                if (usuario.Trim().Length == 0)
                    usuario = ENTITY_GLOBAL.Instance.USUARIO;
            }
            else
            {
                usuario = ENTITY_GLOBAL.Instance.USUARIO;
            }
            ////////CARGAR LISTA BASE AUX:
            Boolean indicaCargado = false;
            List<SEGURIDADCONCEPTO> listaAsignados = new List<SEGURIDADCONCEPTO>();
            if (ENTITY_GLOBAL.Instance.objModel != null && tipo == "ASIGNA")
            {
                try
                {
                    listaAsignados = (List<SEGURIDADCONCEPTO>)ENTITY_GLOBAL.Instance.objModel;
                    if (listaAsignados.Count > 0)
                    {
                        indicaCargado = true;
                    }
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);
                    indicaCargado = false;
                }
            }
            if (!indicaCargado && tipo == "ASIGNA")
            {
                listaAsignados.Clear();
                // = new List<SEGURIDADAUTORIZACIONE>();                        
                var objConceptosAutorizaAux = new SEGURIDADCONCEPTO();
                objConceptosAutorizaAux.APLICACIONCODIGO = node.Trim();
                objConceptosAutorizaAux.ULTIMOUSUARIO = usuario;
                objConceptosAutorizaAux.ACCION = "CONCEPTOSSEGURIDADAPP";
                //listaAsignados = SoluccionSalud.Service.SeguridadAutorizacionService.SvcSeguridadAutorizacion.listarSeguridadAutorizaciones(objConceptosAutorizaAux);
                listaAsignados = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(objConceptosAutorizaAux);
                ENTITY_GLOBAL.Instance.objModel = listaAsignados;
                ///////
            }
            ///////////////////////
            NodeCollection nodes = new Ext.Net.NodeCollection();
            if (node == "WA")//ROOT ........ OBS: HARDCODE
            {
                //var entidaLocal = new SEGURIDADGRUPO();
                var entidaLocal = new SEGURIDADCONCEPTO();

                entidaLocal.ACCION = "GRUPOSEGURIDAD";
                entidaLocal.APLICACIONCODIGO = node;
                entidaLocal.ULTIMOUSUARIO = usuario;
                //var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSeguridadGrupo(entidaLocal);
                var serviceResul = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                foreach (var resulenti in serviceResul)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DESCRIPCION;
                    asyncNode.NodeID = "0" + "|" + resulenti.APLICACIONCODIGO.Trim() + "|" +
                        resulenti.GRUPO.Trim() + "|" + resulenti.CONCEPTO.Trim();//Accion== CONCEPTO (aux)

                    nodes.Add(asyncNode);
                }
            }
            else
            {
                String nodoTipoObj = "";
                String nodoApp = "";
                String nodoGrupo = "";
                String nodoConcepto = "";
                String nodoConceptoPadre = "";
                String[] nodoPack = node.Split('|');
                if (nodoPack.Length > 0)
                {
                    nodoTipoObj = nodoPack[0];
                    if (nodoPack.Length > 1)
                    {
                        nodoApp = nodoPack[1];
                        if (nodoPack.Length > 2)
                        {
                            nodoGrupo = nodoPack[2];
                            if (nodoPack.Length > 3)
                            {
                                nodoConcepto = nodoPack[3];
                                if (nodoPack.Length > 4)
                                    nodoConceptoPadre = nodoPack[4];
                            }
                        }
                    }
                }
                var entidaLocal = new SEGURIDADCONCEPTO();
                /**OBS: usuiario auxiliar*/
                entidaLocal.ULTIMOUSUARIO = usuario;
                entidaLocal.APLICACIONCODIGO = usuario;
                entidaLocal.ACCION = "CONCEPTOPADREHCE";
                entidaLocal.CONCEPTOPADRE = nodoConcepto.Trim();
                entidaLocal.GRUPO = nodoGrupo.Trim();

                List<SEGURIDADCONCEPTO> serviceResuls = new List<SEGURIDADCONCEPTO>();
                if (indicaCargado)
                {
                    foreach (var resulenti in listaAsignados)
                    {
                        if (("" + resulenti.CONCEPTOPADRE).Trim() == nodoConcepto.Trim() &&
                            ("" + resulenti.GRUPO).Trim() == nodoGrupo.Trim())
                        {
                            if (("" + resulenti.ACCION).Trim() != "DELETE")
                            {
                                serviceResuls.Add(resulenti);
                            }
                        }
                    }
                    //serviceResuls = listaAsignados;
                }
                else
                {
                    serviceResuls = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(entidaLocal);
                }
                foreach (var resulenti in serviceResuls)
                {
                    Node asyncNode = new Node();
                    asyncNode.Text = resulenti.DESCRIPCION;
                    asyncNode.NodeID = (resulenti.TIPODEOBJETO != null ? (resulenti.TIPODEOBJETO.Trim().Length > 0 ?
                        resulenti.TIPODEOBJETO.Trim() : "0") : "0") + "|" +
                        resulenti.APLICACIONCODIGO.Trim() + "|" +
                        resulenti.GRUPO.Trim() + "|" + resulenti.CONCEPTO.Trim() + "|" +
                        (resulenti.CONCEPTOPADRE != null ? resulenti.CONCEPTOPADRE.Trim() : "");//Padre
                    asyncNode.Leaf = (("" + resulenti.TIPODEOBJETO).Trim().Equals("1") ? true : false);
                    asyncNode.Checked = false;
                    asyncNode.Icon = (("" + resulenti.TIPODEOBJETO).Trim().Equals("1") ? Icon.ApplicationSideTree : Icon.Folder);
                    //asyncNode.Leaf = Convert.ToInt32(resulenti.TIPODEOBJETO.ToString().Trim()) == 1 ? true : false;
                    nodes.Add(asyncNode);
                }
            }
            return this.Store(nodes);
        }
        public System.Web.Mvc.ActionResult seleccionCheckTreeNodoAutorizacion(String nodoId)
        {
            Log.Information("GestionController - seleccionCheckTreeNodoAutorizacion - Entrar");


            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionTreeNodoAutorizacion(String nodoId)
        {
            Log.Information("GestionController - seleccionTreeNodoAutorizacion - Entrar");


            return this.Direct();
        }
        public System.Web.Mvc.ActionResult asignarConceptos(String selectionArray1, String selectionArray2,
            String usuario, String accion, String flagAdd, String flagUpd, String flagDel, String flagAprob)
        {
            Log.Information("GestionController - asignarConceptos - Entrar");

            List<String> nodosCod;// = (List<String>)selectionArray1;
            List<String> nodosText;// = (List<String>)selectionArray2;
            //List<String> nodosGet;
            nodosCod = (List<String>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray1, typeof(List<String>));
            nodosText = (List<String>)Newtonsoft.Json.JsonConvert.DeserializeObject(selectionArray2, typeof(List<String>));

            Boolean indicaCargado = false;
            List<SEGURIDADCONCEPTO> listaAsignados = new List<SEGURIDADCONCEPTO>();
            if (ENTITY_GLOBAL.Instance.objModel != null)
            {
                try
                {
                    listaAsignados = (List<SEGURIDADCONCEPTO>)ENTITY_GLOBAL.Instance.objModel;
                    if (listaAsignados.Count > 0)
                    {
                        indicaCargado = true;
                    }
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);
                    indicaCargado = false;
                }
            }
            if (!indicaCargado)
            {
                listaAsignados.Clear();
                // = new List<SEGURIDADAUTORIZACIONE>();                        
                var objConceptosAutorizaAux = new SEGURIDADCONCEPTO();
                objConceptosAutorizaAux.APLICACIONCODIGO = "WA";//OBS: HARDCODE
                objConceptosAutorizaAux.ULTIMOUSUARIO = usuario;
                objConceptosAutorizaAux.ACCION = "CONCEPTOSSEGURIDADAPP";
                //listaAsignados = SoluccionSalud.Service.SeguridadAutorizacionService.SvcSeguridadAutorizacion.listarSeguridadAutorizaciones(objConceptosAutorizaAux);
                listaAsignados = SoluccionSalud.Service.SeguridadService.SvcSeguridadConcepto.GetSelectSP(objConceptosAutorizaAux);
                if (listaAsignados == null)
                {
                    listaAsignados = new List<SEGURIDADCONCEPTO>();
                }
                ENTITY_GLOBAL.Instance.objModel = listaAsignados;
                ///////
                indicaCargado = true;
            }

            if (indicaCargado)
            {
                for (int i = 0; i < nodosCod.Count; i++)
                {
                    String node = nodosCod[i];
                    ////
                    String nodoText = nodosText[i];
                    String nodoTipoObj = "";
                    String nodoApp = "";
                    String nodoGrupo = "";
                    String nodoConcepto = "";
                    String nodoConceptoPadre = "";
                    String[] nodoPack = node.Split('|');
                    if (nodoPack.Length > 0)
                    {
                        nodoTipoObj = nodoPack[0];
                        if (nodoPack.Length > 1)
                        {
                            nodoApp = nodoPack[1];
                            if (nodoPack.Length > 2)
                            {
                                nodoGrupo = nodoPack[2];
                                if (nodoPack.Length > 3)
                                {
                                    nodoConcepto = nodoPack[3];
                                    if (nodoPack.Length > 4)
                                        nodoConceptoPadre = nodoPack[4];
                                }
                            }
                        }
                    }
                    ///////
                    SEGURIDADCONCEPTO asignadoAux = new SEGURIDADCONCEPTO();
                    asignadoAux.APLICACIONCODIGO = nodoApp;
                    asignadoAux.GRUPO = nodoGrupo;
                    asignadoAux.CONCEPTO = nodoConcepto;
                    asignadoAux.CONCEPTOPADRE = nodoConceptoPadre;
                    asignadoAux.DESCRIPCION = nodoText;
                    asignadoAux.TIPODEOBJETO = nodoTipoObj;
                    asignadoAux.ACCION = (accion == "delete" ? "DELETE" : "INSERT");
                    //AUXILIAR PARA FLAGS
                    asignadoAux.WEBACTION = flagAdd.Trim() + "|" + flagUpd.Trim() + "|" + flagDel.Trim() + "|" + flagAprob.Trim();
                    asignadoAux.ULTIMOUSUARIO = usuario;
                    //X.Msg.Notify("TES 4444", "WEBACTION:" + asignadoAux.WEBACTION).Show();
                    //
                    Boolean repetido = false;
                    foreach (var resulenti in listaAsignados)
                    {
                        if (resulenti.APLICACIONCODIGO.Trim() == asignadoAux.APLICACIONCODIGO.Trim() &&
                            resulenti.GRUPO.Trim() == asignadoAux.GRUPO.Trim() &&
                            resulenti.CONCEPTO.Trim() == asignadoAux.CONCEPTO.Trim())
                        {
                            resulenti.ACCION = asignadoAux.ACCION;
                            resulenti.WEBACTION = asignadoAux.WEBACTION;
                            resulenti.DESCRIPCION = "***" + resulenti.DESCRIPCION;
                            repetido = true;
                            //listaAsignados.Remove(resulenti);
                            break;
                        }
                    }
                    if (!repetido)
                    {
                        listaAsignados.Add(asignadoAux);
                    }

                }
            }
            var tree = X.GetCmp<TreePanel>("treeAsigna");
            //var chk = X.GetCmp<TriggerField>("trigfServicios");
            //tree.Refresh();

            tree.CollapseAll();
            Node asyncNode = new Node();
            asyncNode.Text = "ASIGNADOS";
            asyncNode.NodeID = "WA";
            tree.SetRootNode(asyncNode);
            tree.ExpandAll();
            /*              
            SEGURIDADAUTORIZACIONE objAutorizac = new SEGURIDADAUTORIZACIONE();
            objAutorizac.ACCION = "INSERT";         
            */
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_Autorizaciones(SEGURIDADAUTORIZACIONE objAutoriza, String MODO,
           String usuario, String idWindow)
        {
            Log.Information("GestionController - save_Autorizaciones - Entrar");

            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaElminarUserApp = false;
            if (objAutoriza != null)
            {
                if (MODO == "NUEVO")
                {
                    objAutoriza.ACCION = "INSERT";
                    accion = "registraron";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objAutoriza.ACCION = "UPDATE";
                    accion = "modificaron";
                }
                else if (MODO == "DELETE")
                {
                    objAutoriza.ACCION = "DELETEUSUARIO";
                    accion = "eliminaron";
                    indicaElminarUserApp = true;
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }

                /////registro
                objAutoriza.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;

                if (indicaElminarUserApp)
                {
                    SEGURIDADAUTORIZACIONE objSave = new SEGURIDADAUTORIZACIONE();
                    objSave.APLICACIONCODIGO = ENTITY_GLOBAL.Instance.APPCODIGO;
                    objSave.ACCION = objAutoriza.ACCION;
                    objSave.USUARIO = usuario;
                    idResultado = SoluccionSalud.Service.SeguridadAutorizacionService.
                                    SvcSeguridadAutorizacion.setMantenimiento(objSave);
                }
                else
                {
                    /////////////
                    Boolean indicaCargado = false;
                    List<SEGURIDADCONCEPTO> listaAsignados = new List<SEGURIDADCONCEPTO>();
                    if (ENTITY_GLOBAL.Instance.objModel != null)
                    {
                        try
                        {
                            listaAsignados = (List<SEGURIDADCONCEPTO>)ENTITY_GLOBAL.Instance.objModel;
                            if (listaAsignados.Count > 0)
                            {
                                indicaCargado = true;
                            }
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            indicaCargado = false;
                        }
                    }
                    if (indicaCargado)
                    {
                        foreach (var resultInd in listaAsignados)
                        {
                            if (resultInd.ACCION != null)
                            {
                                if (resultInd.ACCION.Trim().Length > 0)
                                {
                                    String flagAdd = "";
                                    String flagUpd = "";
                                    String flagDel = "";
                                    String flagAprob = "";
                                    if (resultInd.ACCION.Trim() != "DELETE")
                                    {
                                        String[] flagPack = resultInd.WEBACTION.Split('|');
                                        if (flagPack.Length > 0)
                                        {
                                            flagAdd = flagPack[0];
                                            if (flagPack.Length > 1)
                                            {
                                                flagUpd = flagPack[1];
                                                if (flagPack.Length > 2)
                                                {
                                                    flagDel = flagPack[2];
                                                    if (flagPack.Length > 3)
                                                    {
                                                        flagAprob = flagPack[3];
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    SEGURIDADAUTORIZACIONE objSave = new SEGURIDADAUTORIZACIONE();
                                    objSave.APLICACIONCODIGO = resultInd.APLICACIONCODIGO;
                                    objSave.GRUPO = resultInd.GRUPO;
                                    objSave.CONCEPTO = resultInd.CONCEPTO;
                                    objSave.USUARIO = usuario;
                                    objSave.ACCION = resultInd.ACCION;
                                    objSave.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                                    //OBS: cambiar
                                    objSave.OPCIONAGREGARFLAG = flagAdd;
                                    objSave.OPCIONMODIFICARFLAG = flagUpd;
                                    objSave.OPCIONBORRARFLAG = flagDel;
                                    objSave.OPCIONAPROBARFLAG = flagAprob;
                                    objSave.ESTADO = "A";
                                    /////
                                    idResultado = SoluccionSalud.Service.SeguridadAutorizacionService.
                                        SvcSeguridadAutorizacion.setMantenimiento(objSave);
                                }
                            }
                        }
                    }
                }


                //idResultado = SvcSS_HC_CuerpoHumano.setMantenimiento(objCuerpo);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + accion + " las autorizaciones del usuario: " + objAutoriza.USUARIO + ", satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            objAutoriza.ACCION = "INFO";
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }
        /**Obtener el empleado seleccionado desde el Window general*/
        public System.Web.Mvc.ActionResult getSeleccionUsuarioAutoriza(String MODO, String usuario, String idWindow)
        {
            Log.Information("GestionController - getSeleccionUsuarioAutoriza - Entrar");

            //
            // Session["usuarioSeleccion"] = "" + usuario;

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            var txt = X.GetCmp<TextField>("tfUsuarioSeleccion");
            txt.SetValue(usuario);

            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return this.Direct();
            //return View("UsuarioRegistro", LocalEnty);
        }

        /****************MAESTRO AUDITORIA*****************/
        public System.Web.Mvc.ActionResult CCEP9910_View()
        {
            Log.Information("GestionController - CCEP9910_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Auditoria/CCEP9910_View");
        }

        /**************MAESTRO AUTORIA IMPRESION***********/

        public System.Web.Mvc.ActionResult CCEP9911_View()
        {
            Log.Information("GestionController - CCEP9911_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/AuditoriaImpresion/CCEP9911_View");
        }


        public System.Web.Mvc.ActionResult getGrillaAuditoriaImpresion(int start, int limit, string codigoHC, string paciente, string fecha1, string fecha2, string UnidadR, string ultimohost, string usuarioimp, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaAuditoriaImpresion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {

                //Aqui me quede
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_ImpresionHC>();
                var Listar0 = new List<SS_HC_ImpresionHC>();

                var LocalEnty = new SS_HC_ImpresionHC();

                LocalEnty.FechaImpresion = getValorFiltroDate(fecha1);
                LocalEnty.Descripcion = getValorFiltroDate(fecha2);
                LocalEnty.UsuarioImpresion = getValorFiltroStr(usuarioimp);
                LocalEnty.UnidadReplicacion = getValorFiltroStr(UnidadR);
                LocalEnty.HostImpresion = getValorFiltroStr(ultimohost);
                LocalEnty.CodigoHC = getValorFiltroStr(codigoHC);
                LocalEnty.Version = getValorFiltroStr(paciente);


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                /*LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcAuditoriaImpresion.setMantenimientoAI(LocalEnty);*/
                LocalEnty.Accion = "CUENTA";
                Listar0 = SvcAuditoriaImpresion.listarAudi_Imp(LocalEnty, inicio, final);
                int cantElementos = 0;

                if (Listar0.Count > 0)
                {
                    cantElementos = Convert.ToInt32(Listar0[0].Contador_filas);
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcAuditoriaImpresion.listarAudi_Imp(LocalEnty, inicio, final);
                }

                            

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }



        public System.Web.Mvc.ActionResult getGrillaAuditoriaImpresionDetalle(int start, int limit, string IdImpresion,string Usuario, string FechaUno1, string Proceso, string codigoOA, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaAuditoriaImpresionDetalle - Entrar");
            int cantElementos = 0;
            Boolean indicaValidacionForm = false;
            try
            {

                //Aqui me quede
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_ImpresionHC_Detalle>();

                var LocalEnty = new SS_HC_ImpresionHC_Detalle();

                LocalEnty.FechaImpresion = getValorFiltroDate(FechaUno1);
                LocalEnty.UsuarioImpresion = getValorFiltroStr(Usuario);
                LocalEnty.CodigoOpcion = getValorFiltroStr(Proceso);
                LocalEnty.Accion = getValorFiltroStr(codigoOA);
                LocalEnty.IdImpresion = Convert.ToInt32(getValorFiltroStr(IdImpresion));


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                // LocalEnty.Accion = "CONTARLISTAPAG";
                //  int cantElementos = SvcAuditoria.setMantenimiento(LocalEnty);
                //if (cantElementos > 0)

                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcAuditoriaImpresionDetalle.listarAudi_ImpDetalle(LocalEnty, inicio, final);
                if (Listar.Count > 0) {
                    cantElementos = Convert.ToInt32(Listar[0].IdUnidadServicio);
                }

                return this.Store(Listar,cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }




        /**************** MISCELANEOS *****************/
        //SvcVw_Miscelaneo
        public System.Web.Mvc.ActionResult CCEP9901_View()
        {
            Log.Information("GestionController - CCEP9901_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Miscelaneos/CCEP9901_View");
        }

        public System.Web.Mvc.ActionResult getGrillaMiscelaneos(int start, int limit,
        string codigotabla, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaMiscelaneos - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<MA_MiscelaneosDetalle>();

            var LocalEnty = new MA_MiscelaneosDetalle();

            //LocalEnty.AplicacionCodigo = getValorFiltroStr(codigoapp);
            LocalEnty.CodigoTabla = getValorFiltroStr(codigotabla);
            //LocalEnty.Compania = getValorFiltroStr(compania);

            if (LocalEnty.AplicacionCodigo == null & LocalEnty.CodigoTabla == null & LocalEnty.Compania == null)
            {
                LocalEnty.AplicacionCodigo = "";
                LocalEnty.CodigoTabla = "";
                LocalEnty.Compania = "";
            }

            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;

            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

            LocalEnty.ACCION = "CONTARLISTAPAG";
            int cantElementos = SvcDetalleMiscelaneo.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.ACCION = "LISTARPAGMAESTRO";
                Listar = SvcDetalleMiscelaneo.listarDetalleMiscelaneo(LocalEnty, inicio, final);
            }

            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult getGrillaVw_Miscelaneos(int start, int limit,
          string desclocal1, string desclocal2, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVw_Miscelaneos - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<vw_Miscelaneos>();

                var LocalEnty = new vw_Miscelaneos();

                LocalEnty.CodigoHeader = getValorFiltroStr(desclocal1);
                LocalEnty.DescLocalHeader = getValorFiltroStr(desclocal2);


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.AccionHeader = "LISTADO";
                int cantElementos = SvcVw_Miscelaneo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.AccionHeader = "LISTADO";
                    Listar = SvcVw_Miscelaneo.listarVw_Miscelaneos(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult MiscelaneoHeaderRegistro(String MODO, byte[] time)
        {
            Log.Information("GestionController - MiscelaneoHeaderRegistro - Entrar");
            var Listar = new List<MA_MiscelaneosHeader>();

            MA_MiscelaneosHeader objMiscelaneo = new MA_MiscelaneosHeader();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objMiscelaneo.ACCION = "LISTAR";
                objMiscelaneo.Timestamp = time;


                Listar = SvcHeaderMiscelaneo.listarHeaderMiscelaneo(objMiscelaneo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (MA_MiscelaneosHeader objEntity in Listar)
                    {
                        objMiscelaneo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objMiscelaneo.ACCION = "NUEVO";
            }
            objMiscelaneo.ACCION = MODO;


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Miscelaneos/RegistroMiscelaneo", objMiscelaneo, "");
        }
        public System.Web.Mvc.ActionResult DetalleRegistro(String MODO, byte[] time)
        {
            Log.Information("GestionController - DetalleRegistro - Entrar");

            var Listar = new List<MA_MiscelaneosHeader>();

            MA_MiscelaneosHeader objMiscelaneo = new MA_MiscelaneosHeader();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objMiscelaneo.ACCION = "LISTAR";
                objMiscelaneo.Timestamp = time;


                Listar = SvcHeaderMiscelaneo.listarHeaderMiscelaneo(objMiscelaneo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (MA_MiscelaneosHeader objEntity in Listar)
                    {
                        objMiscelaneo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objMiscelaneo.ACCION = "NUEVO";
            }
            objMiscelaneo.ACCION = MODO;


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Miscelaneos/AsignarDetalleMiscelaneo", objMiscelaneo, "");
        }
        public System.Web.Mvc.ActionResult postWindowMisc(String id)
        {
            Log.Information("GestionController - postWindowMisc - Entrar");

            MA_MiscelaneosHeader objFiltro = new MA_MiscelaneosHeader();
            var Listar = new List<MA_MiscelaneosHeader>();

            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult MiscelaneoDetallesBRegistro(String MODO, byte[] time)
        {
            Log.Information("GestionController - MiscelaneoDetallesBRegistro - Entrar");

            var Listar = new List<MA_MiscelaneosDetalle>();

            MA_MiscelaneosDetalle objMiscelaneo = new MA_MiscelaneosDetalle();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objMiscelaneo.ACCION = "LISTAR";
                objMiscelaneo.Timestamp = time;


                Listar = SvcDetalleMiscelaneo.listarDetalleMiscelaneo(objMiscelaneo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (MA_MiscelaneosDetalle objEntity in Listar)
                    {
                        objMiscelaneo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objMiscelaneo.ACCION = "NUEVO";
            }
            objMiscelaneo.ACCION = MODO;


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Miscelaneos/RegistroDetalleMiscelaneo", objMiscelaneo, "");
        }

        public System.Web.Mvc.ActionResult MiscelaneoDetalleRegistro(String MODO, string codapp, string codigotabla, string company)
        {
            Log.Information("GestionController - MiscelaneoDetalleRegistro - Entrar");

            var Listar = new List<MA_MiscelaneosDetalle>();

            MA_MiscelaneosDetalle objMiscelaneo = new MA_MiscelaneosDetalle();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objMiscelaneo.ACCION = "LISTAR";
                objMiscelaneo.AplicacionCodigo = codapp;
                objMiscelaneo.CodigoTabla = codigotabla;
                objMiscelaneo.Compania = company;

                Listar = SvcDetalleMiscelaneo.listarDetalleMiscelaneo(objMiscelaneo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (MA_MiscelaneosDetalle objEntity in Listar)
                    {
                        objMiscelaneo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objMiscelaneo.ACCION = "NUEVO";
                objMiscelaneo.AplicacionCodigo = codapp;
                objMiscelaneo.CodigoTabla = codigotabla;
                objMiscelaneo.Compania = company;
            }
            objMiscelaneo.ACCION = MODO;


            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Miscelaneos/RegistroDetalleMiscelaneo", objMiscelaneo, "");
        }

        public System.Web.Mvc.ActionResult save_Miscelaneo(MA_MiscelaneosHeader objMiscelaneo, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Miscelaneo - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objMiscelaneo != null)
            {

                objMiscelaneo.ACCION = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objMiscelaneo, UTILES_MENSAJES.FORM_MSMISCELANEOHED);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objMiscelaneo.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objMiscelaneo.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objMiscelaneo.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objMiscelaneo.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcHeaderMiscelaneo.setMantenimiento(objMiscelaneo);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objMiscelaneo.DescripcionLocal + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objMiscelaneo.ACCION = "INFO";

            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFin");
            }
        }

        public System.Web.Mvc.ActionResult save_MiscelaneoDet(MA_MiscelaneosDetalle objMiscelaneo, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_MiscelaneoDet - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objMiscelaneo != null)
            {

                objMiscelaneo.ACCION = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objMiscelaneo, UTILES_MENSAJES.FORM_MSTCUERPOHUMANO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objMiscelaneo.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objMiscelaneo.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objMiscelaneo.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objMiscelaneo.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcDetalleMiscelaneo.setMantenimiento(objMiscelaneo);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objMiscelaneo.DescripcionLocal + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objMiscelaneo.ACCION = "INFO";

            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        /****MAESTRO CUERPO HUMANO*******/
        public System.Web.Mvc.ActionResult CCEP0106_View()
        {
            Log.Information("GestionController - CCEP0106_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/CuerpoHumano/CCEP0106_View");
            //return View("CCEP0006_View");
        }
        public System.Web.Mvc.ActionResult getGrillaAuditoria(int start, int limit,
    string hostname, string modulo, string usuario, string tipo, string fecha1, string fecha2, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaAuditoria - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_AuditRoyal>();

                var LocalEnty = new SS_HC_AuditRoyal();

                LocalEnty.HostName = getValorFiltroStr(hostname);
                LocalEnty.Modulo = getValorFiltroStr(modulo);
                LocalEnty.Usuario = getValorFiltroStr(usuario);
                LocalEnty.Type = getValorFiltroStr(tipo);
                LocalEnty.UpdateDate = getValorFiltroDate(fecha1);
                LocalEnty.Version = getValorFiltroDate(fecha2);


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcAuditoria.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcAuditoria.listarAuditoRoyal(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaCuerpoHumano(int start, int limit,
            string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaCuerpoHumano - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<SS_HC_CuerpoHumano>();

                var LocalEnty = new SS_HC_CuerpoHumano();

                LocalEnty.Codigo = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }

                //(descripcion != null ? (descripcion.Trim().Length>0?descripcion.Trim():null) : null);
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }
                LocalEnty.Nivel = ini; //AUX
                LocalEnty.Orden = fin; //AUX                

                LocalEnty.ACCION = "CONTARLISTARPAG";
                int cantElementos = SvcSS_HC_CuerpoHumano.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSS_HC_CuerpoHumano.listarSSHCCuerpoHumano(LocalEnty);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CuerpoHumanoRegistro(String MODO, int idCuerpo)
        {
            Log.Information("GestionController - CuerpoHumanoRegistro - Entrar");
            var Listar = new List<SS_HC_CuerpoHumano>();

            SS_HC_CuerpoHumano objCuerpo = new SS_HC_CuerpoHumano();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCuerpo.ACCION = "LISTAR";
                objCuerpo.IdCuerpoHumano = idCuerpo;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSS_HC_CuerpoHumano.listarSSHCCuerpoHumano(objCuerpo);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_CuerpoHumano objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCuerpo.ACCION = "NUEVO";
            }
            objCuerpo.ACCION = MODO;

            /*****OBS: Prueba CARGA RESOURSEC VALIDACION*******/
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            /***************************************************/
            return crearWindowRegistro("Maestros/CuerpoHumano/CuerpoHumanoRegistro", objCuerpo, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult VisorTracking(String MODO, int id, String descripcion, String cod, String idWindow)
        {
            Log.Information("GestionController - VisorTracking - Entrar");

            Session["ID_Tracking"] = id;

            return crearWindowRegistro("Maestros/Auditoria/VisorTracking", "", "");
        }

        public System.Web.Mvc.ActionResult GetGridPanel(string containerId)
        {
            Log.Information("GestionController - GetGridPanel - Entrar");

            this.BuildGridPanel(GetAllCompanies()).AddTo(containerId);

            return this.Direct();
        }
        private Ext.Net.GridPanel BuildGridPanel(DataTable dt)
        {
            Log.Information("GestionController - BuildGridPanel - Entrar");

            return new Ext.Net.GridPanel
            {
                Border = false,
                Store =  
                {
                    this.BuildStore(dt)
                },
                SelectionModel = 
                { 
                   // new RowSelectionModel() { Mode = SelectionMode.Single },
                    new CheckboxSelectionModel(){Mode=SelectionMode.Multi}
                },
                ColumnModel =
                {
                    Columns =
                    {
                        this.BuildColumn(dt)
                    }
                },

                View =
                {
                   new Ext.Net.GridView()
                   {
                        StripeRows = true,
                        TrackOver = true 
                   }
                }
            };
        }
        private DataTable GetAllCompanies()
        {
            Log.Information("GestionController - GetAllCompanies - Entrar");

            int id = 0;
            if (Session["ID_Tracking"] != null)
            {
                id = (int)Session["ID_Tracking"];
            }

            var LocalEnty = new SS_HC_AuditRoyal();
            LocalEnty.AuditID = id;
            LocalEnty.Accion = "LISTARPORID";
            var Listar = SvcAuditoria.listarAuditoRoyal(LocalEnty, 0, 1);
            StringWriter stringWriter = new StringWriter();
            XmlDocument xmlDoc = new XmlDocument();
            XmlTextWriter xmlWriter = new XmlTextWriter(stringWriter);
            string xmlResult = Listar[0].VistaData;
            if (Listar[0].VistaData != null) xmlDoc.LoadXml(xmlResult);
            DataTable Dt = new DataTable(Listar[0].TableName.Trim());
            try
            {

                if (Listar[0].VistaData != null)
                {
                    XmlNode NodoEstructura = xmlDoc.FirstChild.FirstChild;
                    //  Table structure (columns definition) 
                    foreach (XmlNode columna in NodoEstructura.ChildNodes)
                    {
                        Dt.Columns.Add(columna.Name, typeof(String));
                    }

                    XmlNode Filas = xmlDoc.FirstChild;
                    //  Data Rows 
                    foreach (XmlNode Fila in Filas.ChildNodes)
                    {
                        List<string> Valores = new List<string>();
                        foreach (XmlNode Columna in Fila.ChildNodes)
                        {
                            Valores.Add(Columna.InnerText);
                        }
                        Dt.Rows.Add(Valores.ToArray());
                    }
                }

            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

            }
            return Dt;
        }
        private Store BuildStore(DataTable dtstore)
        {
            Log.Information("GestionController - BuildStore - Entrar");
            Model m = new Model();
            for (int i = 0; i <= dtstore.Columns.Count - 1; i++)
            {
                ModelField mf = new ModelField()
                {
                    Name = dtstore.Columns[i].ColumnName.ToString()

                };

                m.Fields.Add(mf);
            }
            Store store = new Store
            {
                Model = 
                { 
                    m
                }
            };

            store.DataSource = dtstore;

            return store;
        }

        private ColumnCollection BuildColumn(DataTable dtcol)
        {
            Log.Information("GestionController - BuildColumn - Entrar");

            ColumnCollection cc = new ColumnCollection();

            for (int i = 0; i <= dtcol.Columns.Count - 1; i++)
            {
                if (dtcol.Columns[i].DataType != typeof(System.Decimal))
                {
                    Column c = new Column()
                    {
                        Text = dtcol.Columns[i].ColumnName.ToString(),
                        DataIndex = dtcol.Columns[i].ColumnName.ToString(),
                        Width = 200

                    };
                    if (i == 0)
                    {
                        c.Locked = true;
                    }
                    cc.Add(c);
                }
                else if (dtcol.Columns[i].DataType == typeof(System.Decimal))
                {
                    Column c = new Column()
                    {
                        Text = dtcol.Columns[i].ColumnName.ToString(),
                        DataIndex = dtcol.Columns[i].ColumnName.ToString(),
                        Renderer = { Format = RendererFormat.UsMoney },
                        Width = 200
                    };
                    if (i == 0)
                    {
                        c.Locked = true;
                    }
                    cc.Add(c);
                }


            }
            return cc;
        }
        private List<T> DeserializeParams<T>(XDocument doc)
        {
            Log.Information("GestionController - DeserializeParams - Entrar");

            System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(typeof(List<T>));
            System.Xml.XmlReader reader = doc.CreateReader();
            List<T> result = (List<T>)serializer.Deserialize(reader);
            reader.Close();
            return result;
        }
        private string GetXmlString(XmlDocument xmlDoc)
        {
            Log.Information("GestionController - GetXmlString - Entrar");

            StringWriter sw = new StringWriter();
            XmlTextWriter xw = new XmlTextWriter(sw);
            xw.Formatting = System.Xml.Formatting.Indented;
            xmlDoc.WriteTo(xw);
            return sw.ToString();
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroCuerpoHumano(String MODO, int id, String descripcion, String cod, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroCuerpoHumano - Entrar");

            //
            // Session["usuarioSeleccion"] = "" + usuario;

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdCuerpoHumanoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtIdPadre");
            txt.SetValue(descripcion);
            var txt2 = X.GetCmp<TextField>("CodigoPadre");
            txt2.SetValue(cod);

            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return this.Direct();
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult save_SS_HC_CuerpoHumano(SS_HC_CuerpoHumano objCuerpo, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SS_HC_CuerpoHumano - Entrar");

            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objCuerpo != null)
            {
                ////VALIDACIÓN
                objCuerpo.ACCION = MODO;
                /***************/
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objCuerpo, UTILES_MENSAJES.FORM_MSTCUERPOHUMANO);
                }
                /*******************************/
                //msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objCuerpo, UTILES_MENSAJES.FORM_MSTCUERPOHUMANO);
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objCuerpo.ACCION = "INSERT";
                            accion = "registró";
                            //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                        }
                        else if (MODO == "UPDATE")
                        {
                            objCuerpo.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objCuerpo.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        /////registro
                        objCuerpo.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSS_HC_CuerpoHumano.setMantenimiento(objCuerpo);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objCuerpo.Codigo + ") satisfactoriamente.";
                            //X.Msg.Notify(tituloMsg, "" + message).Show();
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                            //X.Msg.Alert(tituloMsg, "" + message).Show();
                            //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            objCuerpo.ACCION = "INFO";
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            //return this.Store("" + idResultado);
            if (indicaValidacionForm)
            {
                //return showMensajeBox(message, tituloMsg, tipoMsg);
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }
        /**SELECCIONADOR DE CUERPO HUMANO GENERAL: */
        public System.Web.Mvc.ActionResult seleccionadorPersona(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorPersona - Entrar");

            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Actividad = accionListado;
            obj.ACCION = accionSeleccion;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("SeleccionadorPersona", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        /**SELECCIONADOR DE USUARIOS GENERAL: */
        /**mandar en ACCION el metodo del Controller para recibir el usuario seleccionado*/
        public System.Web.Mvc.ActionResult seleccionarUsuario(String accion)
        {
            Log.Information("GestionController - seleccionarUsuario - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = accion;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("SeleccionadorUsuario", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public System.Web.Mvc.ActionResult getGrillaListadoUsuariosSeleccionar(int start, int limit, string usuario)
        {
            Log.Information("GestionController - getGrillaListadoUsuariosSeleccionar - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                //var cmb = X.GetCmp<ComboBox>("comboInteres");                

                var Listar = new List<USUARIO>();

                var LocalEnty = new USUARIO();
                LocalEnty.ACCION = "LISTARPAG";
                LocalEnty.USUARIO1 = usuario;
                LocalEnty.NUMEROLOGINSDISPONIBLE = start;
                LocalEnty.NUMEROLOGINSUSADOS = limit;
                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcUsuario.listarUsuario(LocalEnty);
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /**Seleccionador de Persona-Paciente-Médico-Usuario  general*/
        public System.Web.Mvc.ActionResult getGrillaListadoVwPersonapacienteSeleccionar(int start, int limit, int persona, string nombre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaListadoVwPersonapacienteSeleccionar - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<VW_PERSONAPACIENTE>();

                var LocalEnty = new VW_PERSONAPACIENTE();
                //LocalEnty.Persona = persona;
                LocalEnty.NombreCompleto = nombre;
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAGSELECUSER";
                int cantElementos = SvcVw_Personapaciente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAGSELECUSER";
                    Listar = SvcVw_Personapaciente.listarVwPersonapaciente(LocalEnty, ini, fin);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult postWindowCuerpoHumano(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowCuerpoHumano - Entrar");
            SS_HC_CuerpoHumano objCuerpo = new SS_HC_CuerpoHumano();
            var Listar = new List<SS_HC_CuerpoHumano>();

            var field = X.GetCmp<TextField>("txtIdPadre");
            if (field != null)
            {
                objCuerpo.ACCION = "LISTARPORID";
                objCuerpo.IdCuerpoHumano = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcSS_HC_CuerpoHumano.listarSSHCCuerpoHumano(objCuerpo);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_CuerpoHumano objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                        field.SetValue(objCuerpo.Descripcion);
                    }
                }
            }

            /*******SET PROP. FORMULARIO*****************************/
            setPropiedadesFormulario(true);
            //var fieldXX = X.GetCmp<TextField>("CodigoPadre");
            //FormPanel ffffffff = X.GetCmp<Ext.Net.FormPanel>("SASASS");       
            //ffffffff.isValid
            /*************************************************************/
            //return this.Store(listaResources);
            return this.Direct();
        }

        /**Seleccionador de Persona-Paciente-Médico-Usuario  general*/
        public System.Web.Mvc.ActionResult seleccionadorCuerpoHumano(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorCuerpoHumano - Entrar");

            SS_HC_CuerpoHumano obj = new SS_HC_CuerpoHumano();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("SeleccionadorCuerpoHumano", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        /*******************UTILES**********************************************************************************/
        /**CREAR  WINDOW GENERAL (PRINCIPAL)**/
        public System.Web.Mvc.ActionResult crearWindowRegistro(String url, Object objModel, String titulo)
        {
            Log.Information("GestionController - crearWindowRegistro - Entrar");

            return new Ext.Net.MVC.PartialViewResult
            {
                ViewName = url,
                Model = objModel,
            };
        }
        /**CREAR  WINDOW GENERAL (ALTERNATIVO)**/
        public System.Web.Mvc.ActionResult crearWindowRegistroAlternativo(String urlLoad, String titulo, String id,
            String parametrosNombres, String parametrosValores, String width, String height)
        {
            Log.Information("GestionController - crearWindowRegistroAlternativo - Entrar");

            //ADD LOADOR COMPONENET                
            ComponentLoader compLoader = new ComponentLoader
            {
                Url = urlLoad,
                Mode = LoadMode.Frame
            };
            if (parametrosNombres != null && parametrosValores != null)
            {
                String[] paramNombres = parametrosNombres.Trim().Split(',');
                String[] paramValores = parametrosValores.Trim().Split(',');
                if (paramValores.Length == paramNombres.Length)
                {
                    for (int i = 0; i < paramValores.Length; i++)
                    {
                        compLoader.Params.Insert(i, new Parameter
                        {
                            Name = paramNombres[i],
                            Value = paramValores[i]
                        });
                    }
                }
                else
                {
                    X.Msg.Alert("Ventana de Advertencia ", "Error en el envío de parámetros").Show();
                }

            }
            int heightAux = Convert.ToInt32(height);
            int widthAux = Convert.ToInt32(width);
            Window win = new Window
            {
                ID = id,
                Title = titulo,
                Height = heightAux,
                Width = widthAux,
                BodyPadding = 1,
                Modal = true,
                Maximizable = true,
                AutoScroll = true,
                CloseAction = CloseAction.Destroy,
                Loader = compLoader
                //Html = "A nated at: " + DateTime.Now.ToLongTimeString()
            };

            win.Render(RenderMode.Auto);

            /*
            return new Ext.Net.MVC.PartialViewResult
            {
                ViewName = "Maestros/Usuario/UsuarioRegistro" ,
                Model = objUsuario
                    
            };
            */
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult cerrarWindow(String id)
        {
            Log.Information("GestionController - cerrarWindow - Entrar");

            //var field = X.GetCmp<TextField>("txtPaciente");
            var win = X.GetCmp<Window>(id);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            //return showMensajeBox("INFORMACION EXITO","Mensaje","INFO");
            return this.Direct();
        }
        /***SELECCIONAR PERSONA GENERAL****/
        public System.Web.Mvc.ActionResult SeleccionarPersona()
        {
            Log.Information("GestionController - SeleccionarPersona - Entrar");

            return new Ext.Net.MVC.PartialViewResult
            {
                ViewName = "SeleccionarPersona"
            };
        }

        public System.Web.Mvc.ActionResult showMensajeBox2(String message, String titulo, String tipo)
        {
            Log.Information("GestionController - showMensajeBox2 - Entrar");

            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            X.Msg.Show(new MessageBoxConfig
            {
                Title = "Mensaje",
                Message = message,
                Buttons = MessageBox.Button.OK,
                Icon = (MessageBox.Icon)Enum.Parse(typeof(MessageBox.Icon), tipo),
                //Wait = true,
                //WaitConfig = new WaitConfig { Interval = 100 }
                //AnimEl = this.GetCmp<Button>("Button8").ClientID,
                /*Fn = new JFunction
                {
                    Fn = "accionFinal"
                }*/
            });
            //return this.Store("1");
            return this.Direct();

        }
        /**MENSAJES*/
        public System.Web.Mvc.ActionResult showMensajeBox(String message, String titulo, String tipo, String nombrefn)
        {
            Log.Information("GestionController - showMensajeBox - Entrar");

            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            X.Msg.Show(new MessageBoxConfig
            {
                Title = titulo,
                Message = message,
                Buttons = MessageBox.Button.OK,
                Icon = (MessageBox.Icon)Enum.Parse(typeof(MessageBox.Icon), tipo),
                //AnimEl = this.GetCmp<Button>("Button8").ClientID,
                Fn = new JFunction
                {
                    Fn = nombrefn//"accionFinal"
                }
            });
            //return this.Store("1");
            return this.Direct();

        }
        /**MENSAJES*/
        public System.Web.Mvc.ActionResult showMensajeBotton(List<ENTITY_MENSAJES> listaMsgNoValido, String titulo, String tipo)
        {
            Log.Information("GestionController - showMensajeBotton - Entrar");

            if (listaMsgNoValido != null)
            {
                return this.Store(listaMsgNoValido);
            }
            else
            {
                return this.Direct();
            }
        }
        /**Terminar y cerrar Window y mostrar mensaje*/
        public System.Web.Mvc.ActionResult terminarShowMensajeBox(String idWindow, String message, String titulo, String tipo, String nombrefno)
        {
            Log.Information("GestionController - terminarShowMensajeBox - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            //var grid = X.GetCmp<GridPanel>(idWindow);

            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            return showMensajeBox(message, titulo, tipo, nombrefno);
            //return this.Store("1");
            //return this.Direct();

        }


        /******************************** CONCEPTOS DE SEGURIDAD ***************************************/
        public System.Web.Mvc.ActionResult CCEP0008_View()
        {
            Log.Information("GestionController - CCEP0008_View - Entrar");

            return View("Maestros/Seguridad/Conceptos de Seguridad/CCEP0008_View");
        }

        public System.Web.Mvc.ActionResult getGrillaConceptoSeguridad(int start, int limit,
            string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaConceptoSeguridad - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<SEGURIDADCONCEPTO>();

                var LocalEnty = new SEGURIDADCONCEPTO();
                LocalEnty.CONCEPTO = getValorFiltroStr(codigo);
                LocalEnty.DESCRIPCION = getValorFiltroStr(descripcion);
                LocalEnty.ESTADO = getValorFiltroStr(estado);
                if (estado == "T")
                {
                    LocalEnty.ESTADO = null;
                }
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.ACCION = "CONTARLISTAPAG";
                int cantElementos = SvcSeguridadConcepto.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSeguridadConcepto.listarSeguridadConcepto(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroConceptoSeguridad(String MODO, String aplicacion, String grupo, String id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroConceptoSeguridad - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }

            var ee = X.GetCmp<TextField>("tfAplicacionCodigo");
            ee.SetValue(aplicacion);
            var re = X.GetCmp<TextField>("tfGRUPO");
            re.SetValue(grupo);
            var nf = X.GetCmp<TextField>("nfIdPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtIdPadre");
            txt.SetValue(descripcion);

            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return this.Direct();
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult seleccionadorConceptoSeguridad(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorConceptoSeguridad - Entrar");


            SEGURIDADCONCEPTO obj = new SEGURIDADCONCEPTO();
            obj.ULTIMOUSUARIO = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("SeleccionadorConceptoSeguridad", obj, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult postWindowConceptoSeguridad(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowConceptoSeguridad - Entrar");

            SEGURIDADCONCEPTO objConceptoSeguridad = new SEGURIDADCONCEPTO();
            var Listar = new List<SEGURIDADCONCEPTO>();

            var field = X.GetCmp<TextField>("txtIdPadre");
            if (field != null)
            {
                objConceptoSeguridad.ACCION = "LISTARPORID";
                objConceptoSeguridad.CONCEPTO = (getValorFiltroStr(idpadre));
                Listar = SvcSeguridadConcepto.listarSeguridadConcepto(objConceptoSeguridad, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SEGURIDADCONCEPTO objEntity in Listar)
                    {
                        objConceptoSeguridad = objEntity;
                        field.SetValue(objConceptoSeguridad.DESCRIPCION);
                    }
                }
            }
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult ConceptoSeguridadRegistro(String MODO, string aplicacion, string concepto, string grupo)
        {
            Log.Information("GestionController - ConceptoSeguridadRegistro - Entrar");

            var Listar = new List<SEGURIDADCONCEPTO>();

            SEGURIDADCONCEPTO objConceptoSeguridad = new SEGURIDADCONCEPTO();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objConceptoSeguridad.ACCION = "LISTAR";
                objConceptoSeguridad.APLICACIONCODIGO = aplicacion;
                objConceptoSeguridad.CONCEPTO = concepto;
                objConceptoSeguridad.GRUPO = grupo;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSeguridadConcepto.listarSeguridadConcepto(objConceptoSeguridad, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SEGURIDADCONCEPTO objEntity in Listar)
                    {
                        objConceptoSeguridad = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objConceptoSeguridad.ACCION = "NUEVO";
            }
            objConceptoSeguridad.ACCION = MODO;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);

            return crearWindowRegistro("Maestros/Seguridad/Conceptos de Seguridad/ConceptoRegistro", objConceptoSeguridad, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public String validoFormularioConceptoSeguridad(SEGURIDADCONCEPTO objSave)
        {
            Log.Information("GestionController - validoFormularioConceptoSeguridad - Entrar");

            String mensaje = null;
            if (objSave != null)
            {
                if (objSave.CONCEPTO != null)
                {
                    if (objSave.CONCEPTO.Trim().Length == 0)
                    {
                        mensaje = "Debe ingresar un valor para el campo 'CONCEPTO'";
                    }

                    SEGURIDADCONCEPTO objAux = new SEGURIDADCONCEPTO();
                    objAux.ACCION = "LISTAR";
                    objAux.CONCEPTO = objSave.CONCEPTO;
                    var listResult = SvcSeguridadConcepto.listarSeguridadConcepto(objAux, 0, 0);
                    if (listResult.Count > 0)
                    {
                        mensaje = "El Código de 'Usuario/Perfil' ingresado ya existe. Cambiar por otro.";
                    }
                }
                else
                {
                    mensaje = "Debe ingresar un valor para el campo 'CONCEPTO'";
                }

                if (objSave.WEBPAGE != null)
                {
                    if (objSave.WEBPAGE.Trim().Length == 0)
                    {
                        mensaje = "Debe ingresar un valor para el campo 'WEBPAGE'";
                    }
                }
                else
                {
                    mensaje = "Debe ingresar un valor para el campo 'WEBPAGE'";
                }
            }
            return mensaje;
        }
        public System.Web.Mvc.ActionResult save_ConceptoSeguridad(SEGURIDADCONCEPTO objConceptoSeguridad, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_ConceptoSeguridad - Entrar");

            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objConceptoSeguridad != null)
            {
                if (MODO == "NUEVO")
                {
                    objConceptoSeguridad.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objConceptoSeguridad.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objConceptoSeguridad.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }

                /////registro
                objConceptoSeguridad.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                idResultado = SvcSeguridadConcepto.setMantenimiento(objConceptoSeguridad);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + accion + " el  usuario (" + objConceptoSeguridad.GRUPO + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            objConceptoSeguridad.ACCION = "INFO";
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }
        /******************************** ERRORES DE CARGA ***************************************/
        public System.Web.Mvc.ActionResult CCEP0014_View()
        {
            Log.Information("GestionController - CCEP0014_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ErroresCarga/CCEP0014_View");
        }
        public System.Web.Mvc.ActionResult getGrillaErroresCarga(int start, int limit,
            string aplicativo, string dni, string sucursal, string referencia, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaErroresCarga - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<VW_SS_IT_ProcesoHistoriaAdjunta>();

                var LocalEnty = new VW_SS_IT_ProcesoHistoriaAdjunta();

                LocalEnty.IdAplicativo = getValorFiltroInt(aplicativo);
                LocalEnty.DNI = getValorFiltroStr(dni);
                LocalEnty.CodigoSucursal = getValorFiltroStr(sucursal);
                LocalEnty.CodigoReferencia = getValorFiltroStr(referencia);
                
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }
                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcProHistAdj.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcProHistAdj.listarProcHistAdj(LocalEnty, ini, fin);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /******************************** PRESTACIONES CPT ***************************************/
        public System.Web.Mvc.ActionResult CCEP0114_View()
        {
            Log.Information("GestionController - CCEP0114_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/PrestacionesCPT/CCEP0114_View");
        }
        public System.Web.Mvc.ActionResult getGrillaPrestacionCPT(int start, int limit,
            string descripcion, string codigo, string estado, string segus, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaPrestacionCPT - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<SS_GE_ProcedimientoMedico>();

                var LocalEnty = new SS_GE_ProcedimientoMedico();

                LocalEnty.CodigoProcedimiento = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                LocalEnty.CodigoSegus = getValorFiltroStr(segus);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }
                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcProcMed.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcProcMed.listarProcMedico(LocalEnty, ini, fin);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult PrestacionesCPTRegistro(String MODO, int idProc)
        {
            Log.Information("GestionController - PrestacionesCPTRegistro - Entrar");
            var Listar = new List<SS_GE_ProcedimientoMedico>();

            SS_GE_ProcedimientoMedico objFiltro = new SS_GE_ProcedimientoMedico();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdProcedimiento = idProc;

                Listar = SvcProcMed.listarProcMedico(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_ProcedimientoMedico objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/PrestacionesCPT/PrestacionesCPTRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreCPT(String MODO, int id, String descripcion, String codigo, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreCPT - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdProcedimientoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfIdPadre");
            txt.SetValue(descripcion);
            var txt3 = X.GetCmp<TextField>("CodigoPadre");
            txt3.SetValue(codigo);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowCPT(String id, String idpadre)
        {
            SS_GE_ProcedimientoMedico objFiltro = new SS_GE_ProcedimientoMedico();
            var Listar = new List<SS_GE_ProcedimientoMedico>();

            var field = X.GetCmp<TextField>("tfIdPadre");
            if (field != null)
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdProcedimiento = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = SvcProcMed.listarProcMedico(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_ProcedimientoMedico objEntity in Listar)
                    {
                        objFiltro = objEntity;
                        field.SetValue(objFiltro.Nombre);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorCPT(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorCPT - Entrar");

            SS_GE_ProcedimientoMedico obj = new SS_GE_ProcedimientoMedico();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorCPT", obj, "");
        }
        public System.Web.Mvc.ActionResult save_CPT(SS_GE_ProcedimientoMedico objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_CPT - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSCIAPDOS);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcProcMed.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /******************************** CUIDADO PREVENTIVO ***************************************/
        public System.Web.Mvc.ActionResult CCEP0108_View()
        {
            Log.Information("GestionController - CCEP0108_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Cuidado Preventivo/CCEP0108_View");
        }
        public System.Web.Mvc.ActionResult getGrillaCuidadoPreventivo(int start, int limit,
            string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaCuidadoPreventivo - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";

                var Listar = new List<SS_HC_CuidadoPreventivo>();

                var LocalEnty = new SS_HC_CuidadoPreventivo();

                LocalEnty.CodigoCuidadoPreventivo = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }

                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;

                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }


                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = 1;// SvcCuidadoPreventido.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = null;// SvcCuidadoPreventido.listarCuidadoPreventivo(LocalEnty, ini, fin);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult CuidadoPreventivoRegistro(String MODO, int idCuidadoPreventivo)
        {
            Log.Information("GestionController - CuidadoPreventivoRegistro - Entrar");
            var Listar = new List<SS_HC_CuidadoPreventivo>();

            SS_HC_CuidadoPreventivo objCuidadoPreventivo = new SS_HC_CuidadoPreventivo();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCuidadoPreventivo.Accion = "LISTAMANTENIMIENTO";
                objCuidadoPreventivo.IdCuidadoPreventivo = idCuidadoPreventivo;


                Listar = null; //SvcCuidadoPreventido.listarCuidadoPreventivo(objCuidadoPreventivo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_CuidadoPreventivo objEntity in Listar)
                    {
                        objCuidadoPreventivo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCuidadoPreventivo.Accion = "NUEVO";
            }
            objCuidadoPreventivo.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Cuidado Preventivo/CuidadoPreventivoRegistro", objCuidadoPreventivo, "");

        }
        public System.Web.Mvc.ActionResult getSeleccionPadreMaestroCuidadoPreventivo(String MODO, int id, String descripcion, String idWindow, String codpadre)
        {
            Log.Information("GestionController - getSeleccionPadreMaestroCuidadoPreventivo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txts = X.GetCmp<TextField>("CodigoCuidadoPreventivoPadre");
            txts.SetValue(codpadre);
            var nf = X.GetCmp<NumberField>("IdCuidadoPreventivoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfIdPadre");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowCuidadoPreventivo(String id, String idpadre)
        {
            Log.Information("GestionController - postWindowCuidadoPreventivo - Entrar");

            SS_HC_CuidadoPreventivo objCuidado = new SS_HC_CuidadoPreventivo();
            var Listar = new List<SS_HC_CuidadoPreventivo>();

            var field = X.GetCmp<TextField>("tfIdPadre");
            if (field != null)
            {
                objCuidado.Accion = "LISTARPORID";
                objCuidado.IdCuidadoPreventivo = (getValorFiltroInt(idpadre) != null ? Convert.ToInt32(getValorFiltroInt(idpadre)) : 0);
                Listar = null;// SvcCuidadoPreventido.listarCuidadoPreventivo(objCuidado, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_CuidadoPreventivo objEntity in Listar)
                    {
                        objCuidado = objEntity;
                        field.SetValue(objCuidado.Descripcion);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorCuidadoPreventivo(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorCuidadoPreventivo - Entrar");


            SS_HC_CuidadoPreventivo obj = new SS_HC_CuidadoPreventivo();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorCuidadoPreventivo", obj, "");
        }
        public System.Web.Mvc.ActionResult save_CuidadoPreventivo(SS_HC_CuidadoPreventivo objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_CuidadoPreventivo - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSCUIDADO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {


                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = 0;// SvcCuidadoPreventido.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*******************    Especialidad   **********************/
        public System.Web.Mvc.ActionResult CCEP0110_View()
        {
            Log.Information("GestionController - CCEP0110_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Especialidad/CCEP0110_View");
        }

        public System.Web.Mvc.ActionResult getGrillaEspecialidadOrdenMedica(int start, int limit)
        {
            Log.Information("GestionController - getGrillaEspecialidadOrdenMedica - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_GE_EspecialidadOrdenMedica>();

            var LocalEnty = new SS_GE_EspecialidadOrdenMedica();


            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;


            LocalEnty.Accion = "CONTARLISTAPAG";
            int cantElementos = SvcEspecialidadOrdenMedica.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcEspecialidadOrdenMedica.listarEspecialidadOrdenMedica(LocalEnty, inicio, final);
            }

            return this.Store(Listar, cantElementos);
        }


        public System.Web.Mvc.ActionResult getGrillaEspecialidad(int start, int limit,
        string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaEspecialidad - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_GE_Especialidad>();

                var LocalEnty = new SS_GE_Especialidad();

                LocalEnty.Codigo = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcEspecialidad.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcEspecialidad.listarEspecialidad(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult EspecialidadRegistro(String MODO, int idEspecialidad)
        {
            Log.Information("GestionController - EspecialidadRegistro - Entrar");
            var Listar = new List<SS_GE_Especialidad>();

            SS_GE_Especialidad objEspecialidad = new SS_GE_Especialidad();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objEspecialidad.Accion = "LISTAR";
                objEspecialidad.IdEspecialidad = idEspecialidad;

                Listar = SvcEspecialidad.listarEspecialidad(objEspecialidad, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_GE_Especialidad objEntity in Listar)
                    {
                        objEspecialidad = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objEspecialidad.Accion = "NUEVO";
            }
            objEspecialidad.Accion = MODO;

            return crearWindowRegistro("Maestros/Especialidad/EspecialidadRegistro", objEspecialidad, "");
        }

        /******HOMOLOGACION GENERAL******/
        public System.Web.Mvc.ActionResult HomologacionRegistroGeneral(String MODO,
            String tabla,  String tipocodigoHCE,
            String codigo_1, Nullable<int> id_1, String codigo_2, Nullable<int> id_2, 
            String descripcion)
        {
            Log.Information("GestionController - HomologacionRegistroGeneral - Entrar");


            var Listar = new List<MA_MiscelaneosDetalle>();

            MA_MiscelaneosDetalle objModel = new MA_MiscelaneosDetalle();
            objModel.ValorEntero1 = id_1;
            objModel.ValorEntero2 = id_2;
            objModel.ValorCodigo1 = codigo_1;
            objModel.ValorCodigo2 = codigo_2;
            objModel.DescripcionLocal = descripcion;
            objModel.CodigoTabla = tabla;
            objModel.ValorCodigo7 = tipocodigoHCE;
            objModel.ACCION = MODO;
            Session["DataHomologacion_Delete"] = null;
            return crearWindowRegistro("HomologacionRegistroGeneral", objModel, "");
        }
        public System.Web.Mvc.ActionResult getGrillaHomologacionGeneral(int start, int limit,
        string id_1, string codigo_1, string id_2, string codigo_2, 
            string tabla, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaHomologacionGeneral - Entrar");

            try
            {
                var Listar = new List<MA_MiscelaneosDetalle>();
                var LocalEnty = new MA_MiscelaneosDetalle();
                LocalEnty.ValorEntero1 = Convert.ToInt32(getValorFiltroInt(id_1));
                LocalEnty.ValorEntero2 = Convert.ToInt32(getValorFiltroInt(id_2));
                LocalEnty.ValorCodigo1 = codigo_1;
                LocalEnty.ValorCodigo2 = codigo_2;
                LocalEnty.ACCION= "LISTARHOMOLOGACION";
                LocalEnty.CodigoTabla = tabla;
                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty,0,0);
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }                
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult add_DataDeleteHomologacionGeneral(string tabla,
        String MODO, Nullable<int> appEXT, Nullable<int> idHCE, string codHCE, string codigoEXT_1, string codigoEXT_2)
        {
            Log.Information("GestionController - add_DataDeleteHomologacionGeneral - Entrar");
            List<MA_MiscelaneosDetalle> dataDelete = null;
            if (Session["DataHomologacion_Delete"] != null)
            {
                dataDelete = (List<MA_MiscelaneosDetalle>)Session["DataHomologacion_Delete"];
            }
            else
            {
                dataDelete = new List<MA_MiscelaneosDetalle>();
            }
            MA_MiscelaneosDetalle objDelete = new MA_MiscelaneosDetalle();
            objDelete.ValorEntero3 = appEXT;
            objDelete.CodigoElemento = codigoEXT_1;
            objDelete.ValorCodigo3 = codigoEXT_2;
            objDelete.ValorEntero1 = idHCE;
            objDelete.ValorCodigo1 = codHCE;
            objDelete.CodigoTabla = tabla;
            objDelete.ACCION = MODO;
            dataDelete.Add(objDelete);
            Session["DataHomologacion_Delete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_HomologacionGeneral(MA_MiscelaneosDetalle objSelecc, String MODO,
                String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_HomologacionGeneral - Entrar");

            //var cmb = X.GetCmp<ComboBox>("id");            
            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {  
                /////registro -delete
                List<MA_MiscelaneosDetalle> dataSaveGeneral = new List<MA_MiscelaneosDetalle>();
                List<MA_MiscelaneosDetalle> dataSave = null;
                List<MA_MiscelaneosDetalle> dataDelete = null;
                if (Session["DataHomologacion_Delete"] != null)
                {
                    dataDelete = (List<MA_MiscelaneosDetalle>)Session["DataHomologacion_Delete"];
                }
                if (dataDelete != null)
                {
                    dataSaveGeneral.AddRange(dataDelete);
                }
                /////registro -save                                
                if (data != null)
                {
                    dataSave = (List<MA_MiscelaneosDetalle>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<MA_MiscelaneosDetalle>));
                    if (dataSave!=null)
                    {
                        dataSaveGeneral.AddRange(dataSave);
                    }
                }
                if (dataSaveGeneral.Count>0)
                {
                    idResultado = SvcMiscelaneos.setMantenimiento(dataSaveGeneral);
                }                
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se guardaron satisfactoriamente los cambios";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
                Session["DataHomologacion_Delete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }
        /******HOMOLOGACION SUCURSAL******/

        public System.Web.Mvc.ActionResult SucursalHomologacion(String MODO, String sucursal, String descripcion)
        {
            Log.Information("GestionController - SucursalHomologacion - Entrar");

            var Listar = new List<AC_Sucursal>();
            AC_Sucursal objFiltro = new AC_Sucursal();
            objFiltro.Sucursal = sucursal;
            objFiltro.DescripcionLocal = descripcion;
            objFiltro.ACCION = MODO;
            return crearWindowRegistro("Maestros/Sucursal/SucursalHomologacion", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult getGrillaSucursalHomologacion(int start, int limit,string id, string codigo, 
            string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSucursalHomologacion - Entrar");

            try
            {
                var Listar = new List<AC_Sucursal>();
                var LocalEnty = new AC_Sucursal();
                LocalEnty.Sucursal = id;
                LocalEnty.ACCION = "LISTARHOMOLOGACION";
                Listar = SvcAC_Sucursal.listarAC_Sucursal(LocalEnty, 0, 0);
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult add_DataDeleteSucursalHomologacion(
        String MODO, Nullable<int> appEXT, Nullable<int> idHCE, string codigoEXT)
        {
            Log.Information("GestionController - add_DataDeleteSucursalHomologacion - Entrar");

            List<AC_Sucursal> dataDelete = null;
            if (Session["DataHomologacionSuc_Delete"] != null)
            {
                dataDelete = (List<AC_Sucursal>)Session["DataHomologacionSuc_Delete"];
            }
            else
            {
                dataDelete = new List<AC_Sucursal>();
            }
            AC_Sucursal objDelete = new AC_Sucursal();
            objDelete.Sucursal = Convert.ToString(idHCE); //Convert.ToInt32(idHCE);
            objDelete.DireccionAdicional = codigoEXT;
            objDelete.Estado = Convert.ToString(appEXT);//appEXT;
            objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
            objDelete.ACCION = MODO;
            dataDelete.Add(objDelete);
            Session["DataHomologacionSuc_Delete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_Sucursal_Homologacion(AC_Sucursal objSelecc, String MODO,
                String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_Sucursal_Homologacion - Entrar");

            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<AC_Sucursal> dataSaveGeneral = new List<AC_Sucursal>();
                List<AC_Sucursal> dataSave = null;
                List<AC_Sucursal> dataDelete = null;
                if (Session["DataHomologacionSuc_Delete"] != null)
                {
                    dataDelete = (List<AC_Sucursal>)Session["DataHomologacionSuc_Delete"];
                }
                if (dataDelete != null)
                {
                    dataSaveGeneral.AddRange(dataDelete);
                }
                /////registro -save                                
                if (data != null)
                {
                    dataSave = (List<AC_Sucursal>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<AC_Sucursal>));
                    if (dataSave != null)
                    {
                        dataSaveGeneral.AddRange(dataSave);
                    }
                }
                if (dataSaveGeneral.Count > 0)
                {
                    idResultado = SvcAC_Sucursal.setMantenimiento(dataSaveGeneral);
                }
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se guardaron satisfactoriamente los cambios";
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                }
                Session["DataHomologacionSuc_Delete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }
        /*******************    Sucursal   **********************/
        public System.Web.Mvc.ActionResult CCEP0115_View()
        {
            Log.Information("GestionController - CCEP0115_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Sucursal/CCEP0115_View");
        }

        public System.Web.Mvc.ActionResult getGrillaSucursal(int start, int limit,
        string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSucursal - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<AC_Sucursal>();

                var LocalEnty = new AC_Sucursal();

                LocalEnty.Sucursal = getValorFiltroStr(codigo);
                LocalEnty.DescripcionLocal = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroStr(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.ACCION = "CONTARLISTAPAG";
                int cantElementos = SvcAC_Sucursal.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcAC_Sucursal.listarAC_Sucursal(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult save_Sucursal(AC_Sucursal objAC_Sucursal, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Sucursal - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objAC_Sucursal != null)
            {

                ////VALIDACIÓN
                objAC_Sucursal.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    //msgNoValido = new List<ENTITY_MENSAJES> ();
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objAC_Sucursal, UTILES_MENSAJES.FORM_MSTCUERPOHUMANO);
                }
                
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try {
                    if (MODO == "NUEVO")
                    {
                        objAC_Sucursal.ACCION = "INSERT";
                        accion = "registró";

                    }
                    else if (MODO == "UPDATE")
                    {
                        objAC_Sucursal.ACCION = "UPDATE";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objAC_Sucursal.ACCION = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encotró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    try
                    {
                        //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                    }
                    catch (Exception e)
                    {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                    }


                    objAC_Sucursal.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                    idResultado = SvcAC_Sucursal.setMantenimiento(objAC_Sucursal);

                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " el  usuario (" + objAC_Sucursal.Sucursal + ") satisfactoriamente.";

                    }
                    else
                    {
                        tipoMsg = "ERROR";
                        message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                        tituloMsg = "Error";
                    }
                    }catch(Exception ex){
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }          
						indicaValidacionForm = true;						
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }

            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objAC_Sucursal.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }

        public System.Web.Mvc.ActionResult SucursalRegistro(String MODO, String Sucursal)
        {
            Log.Information("GestionController - SucursalRegistro - Entrar");
            var Listar = new List<AC_Sucursal>();

            AC_Sucursal objSucursal = new AC_Sucursal();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objSucursal.ACCION = "LISTAR";
                objSucursal.Sucursal = Sucursal;

                Listar = SvcAC_Sucursal.listarAC_Sucursal(objSucursal, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (AC_Sucursal objEntity in Listar)
                    {
                        objSucursal = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objSucursal.ACCION = "NUEVO";
            }
            objSucursal.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Sucursal/SucursalRegistro", objSucursal, "");

        }
        public System.Web.Mvc.ActionResult postWindowSucursal(String id)
        {
            Log.Information("GestionController - postWindowSucursal - Entrar");

            SS_HC_NIC objFiltro = new SS_HC_NIC();
            
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        /* MODULOS */
        public System.Web.Mvc.ActionResult CCEP0190_View()
        {
            Log.Information("GestionController - CCEP0190_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Modulos/CCEP0190_View");
        }

        public System.Web.Mvc.ActionResult getGrillaModulos(int start, int limit,
      string sistema, string modulo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaModulos - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SG_Modulo>();

                var LocalEnty = new SG_Modulo();

                LocalEnty.Sistema = getValorFiltroStr(sistema);
                LocalEnty.Modulo = getValorFiltroStr(modulo);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcModulos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcModulos.listarModulos(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult ModulosRegistro(String MODO, string idModulos, string Sistema)
        {
            Log.Information("GestionController - ModulosRegistro - Entrar");
            var Listar = new List<SG_Modulo>();

            SG_Modulo objModulos = new SG_Modulo();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objModulos.Accion = "LISTAR";
                objModulos.Modulo = idModulos;
                objModulos.Sistema = Sistema;

                Listar = SvcModulos.listarModulos(objModulos, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Modulo objEntity in Listar)
                    {
                        objModulos = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objModulos.Accion = "NUEVO";
            }
            objModulos.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Modulos/ModulosRegistro", objModulos, "");

        }
        public System.Web.Mvc.ActionResult postWindowModulo(String id)
        {
            Log.Information("GestionController - postWindowModulo - Entrar");

            SG_Modulo objFiltro = new SG_Modulo();
            var Listar = new List<SG_Modulo>();

            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_modulos(SG_Modulo objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_modulos - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSMODULO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcModulos.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.Modulo + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }


        /* RECURSOS */
        public System.Web.Mvc.ActionResult CCEP0112_View()
        {
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Recursos/CCEP0112_View");
        }

        public System.Web.Mvc.ActionResult getGrillaVWFC(int start, int limit,
                        string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_FORMATOCAMPO>();

                var LocalEnty = new VW_FORMATOCAMPO();

                LocalEnty.IdFormato = Convert.ToInt32(getValorFiltroInt(codigo));
                LocalEnty.DescripFormatoCampo = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "LISTARPAGFORMATOCAMPO";
                int cantElementos = svcVWFORMATOCAMPO.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAGFORMATOCAMPO";
                    Listar = svcVWFORMATOCAMPO.listarVWFormatoCampo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaVWFORMATOCAMPOSelec(int start, int limit,
                    string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVWFORMATOCAMPOSelec - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_FORMATOCAMPO>();

                var LocalEnty = new VW_FORMATOCAMPO();

                LocalEnty.IdFormato = Convert.ToInt32(getValorFiltroInt(codigo));
                LocalEnty.DescripFormatoCampo = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "LISTARPAGSELEC";
                int cantElementos = svcVWFORMATOCAMPO.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAGSELEC";
                    Listar = svcVWFORMATOCAMPO.listarVWFormatoCampo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaVWFORMATOCAMPO(int start, int limit,
                            string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVWFORMATOCAMPO - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<VW_FORMATOCAMPO>();

            var LocalEnty = new VW_FORMATOCAMPO();

            LocalEnty.IdFormato = Convert.ToInt32(getValorFiltroInt(codigo));
            LocalEnty.DescripFormatoCampo = getValorFiltroStr(descripcion);
            LocalEnty.Estado = getValorFiltroInt(estado);
            if (estado == "")
            {
                LocalEnty.Estado = null;
            }


            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;

            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


            LocalEnty.Accion = "LISTARPAG";
            int cantElementos = svcVWFORMATOCAMPO.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = svcVWFORMATOCAMPO.listarVWFormatoCampo(LocalEnty, inicio, final);
            }

            return this.Store(Listar, cantElementos);
        }

        public System.Web.Mvc.ActionResult getGrillaVWTABLACAMPO(int start, int limit,
           string codigo, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVWTABLACAMPO - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<VW_TABLACAMPO>();

            var LocalEnty = new VW_TABLACAMPO();

            LocalEnty.IdFavoritoTabla = Convert.ToInt32(getValorFiltroInt(codigo));
            LocalEnty.DescripTablaCampo = getValorFiltroStr(descripcion);


            int inicio = (start == 0 ? start : start + 1);
            int final = start + limit;

            if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


            LocalEnty.Accion = "LISTARPAG";
            int cantElementos = SvcVWTABLACAMPO.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcVWTABLACAMPO.listarVwTablaCampo(LocalEnty, inicio, final);
            }

            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult getGrillaVWTABLACAMPOSE(int start, int limit,
           string codigo, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaVWTABLACAMPOSE - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_TABLACAMPO>();

                var LocalEnty = new VW_TABLACAMPO();

                LocalEnty.IdFavoritoTabla = Convert.ToInt32(getValorFiltroInt(codigo));
                LocalEnty.DescripTablaCampo = getValorFiltroStr(descripcion);


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "LISTARPAGSELEC";
                int cantElementos = SvcVWTABLACAMPO.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAGSELEC";
                    Listar = SvcVWTABLACAMPO.listarVwTablaCampo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorVWTABLACAMPO(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorVWTABLACAMPO - Entrar");
            VW_TABLACAMPO obj = new VW_TABLACAMPO();
            //obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorVWTABLACAMPO", obj, "");
        }
        public System.Web.Mvc.ActionResult seleccionadorVWFORMATOCAMPO(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorVWFORMATOCAMPO - Entrar");

            VW_FORMATOCAMPO obj = new VW_FORMATOCAMPO();
            //obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorVWFORMATOCAMPO", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionVWTABLACAMPO(String MODO, int id, String tabla, String tablacampo, String idWindow)
        {
            Log.Information("GestionController - getSeleccionVWTABLACAMPO - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var txtid = X.GetCmp<NumberField>("IdFavoritoTabla");
            txtid.SetValue(id);
            var txttabla = X.GetCmp<TextField>("txtTabla");
            txttabla.SetValue(tabla);
            var txttaclacampo = X.GetCmp<TextField>("NombreCampoRecurso");
            txttaclacampo.SetValue(tablacampo);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionVWFORMATOCAMPO(String MODO, int id, String formato, String formatocampo, int secuencia, String idWindow)
        {
            Log.Information("GestionController - getSeleccionVWFORMATOCAMPO - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nmid = X.GetCmp<NumberField>("IdFormato");
            nmid.SetValue(id);
            var txtformato = X.GetCmp<TextField>("txtformato");
            txtformato.SetValue(formato);
            var txtformatocampo = X.GetCmp<TextField>("txtformatocampo");
            txtformatocampo.SetValue(formatocampo);
            var txtsecuencia = X.GetCmp<NumberField>("SecuenciaCampo");
            txtsecuencia.SetValue(secuencia);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowFormatoTabla(String idformato, String secuencia, String nombrecamporecurso, String idfavorito, String codigoformato, String formato, String tabla)
        {
            Log.Information("GestionController - postWindowFormatoTabla - Entrar");

            VW_FORMATOCAMPO objCuerpo = new VW_FORMATOCAMPO();
            var Listar = new List<VW_FORMATOCAMPO>();

            var field = X.GetCmp<TextField>("txtformato");
            if (field != null)
            {
                objCuerpo.Accion = "LISTAR";
                objCuerpo.IdFormato = (getValorFiltroInt(idformato) != null ? Convert.ToInt32(getValorFiltroInt(idformato)) : 0);
                objCuerpo.SecuenciaCampo = (getValorFiltroInt(secuencia) != null ? Convert.ToInt32(getValorFiltroInt(secuencia)) : 0);
                Listar = svcVWFORMATOCAMPO.listarVWFormatoCampo(objCuerpo, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (VW_FORMATOCAMPO objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                        field.SetValue(objCuerpo.CodigoFormato);
                    }
                }
            }

            VW_FORMATOCAMPO objFormatoCampo = new VW_FORMATOCAMPO();
            var ListarFC = new List<VW_FORMATOCAMPO>();

            var fieldFC = X.GetCmp<TextField>("txtformatocampo");
            if (fieldFC != null)
            {
                objFormatoCampo.Accion = "LISTAR";
                objFormatoCampo.IdFormato = (getValorFiltroInt(idformato) != null ? Convert.ToInt32(getValorFiltroInt(idformato)) : 0);
                objFormatoCampo.SecuenciaCampo = (getValorFiltroInt(secuencia) != null ? Convert.ToInt32(getValorFiltroInt(secuencia)) : 0);
                ListarFC = svcVWFORMATOCAMPO.listarVWFormatoCampo(objFormatoCampo, 0, 0);
                if (ListarFC.Count == 1)
                {
                    foreach (VW_FORMATOCAMPO objEntityFC in ListarFC)
                    {
                        objFormatoCampo = objEntityFC;
                        fieldFC.SetValue(objFormatoCampo.DescripcionFormato);
                    }
                }
            }

            VW_TABLACAMPO objTablaCampo = new VW_TABLACAMPO();
            var ListarTabla = new List<VW_TABLACAMPO>();

            var fieldTabla = X.GetCmp<TextField>("txtTabla");
            if (fieldTabla != null)
            {
                objTablaCampo.Accion = "LISTAR";
                objTablaCampo.IdFavoritoTabla = (getValorFiltroInt(idfavorito) != null ? Convert.ToInt32(getValorFiltroInt(idfavorito)) : 0);
                objTablaCampo.DescripTablaCampo = (getValorFiltroStr(nombrecamporecurso) != null ? getValorFiltroStr(nombrecamporecurso) : "");
                ListarTabla = SvcVWTABLACAMPO.listarVwTablaCampo(objTablaCampo, 0, 0);
                if (ListarTabla.Count == 1)
                {
                    foreach (VW_TABLACAMPO objEntity1 in ListarTabla)
                    {
                        objTablaCampo = objEntity1;
                        fieldTabla.SetValue(objTablaCampo.DescripcionTabla);
                    }
                }
            }

            setPropiedadesFormulario(true);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getGrillaRecursos(int start, int limit,
                   string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaRecursos - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_FORMATORECURSOCAMPO>();

                var LocalEnty = new VW_FORMATORECURSOCAMPO();

                LocalEnty.CodigoFormato = getValorFiltroStr(codigo);
                LocalEnty.DescripcionFormato = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvVW_FORMATORECURSOCAMPO.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvVW_FORMATORECURSOCAMPO.listarVW_FORMATORECURSOCAMPO(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        public System.Web.Mvc.ActionResult RecursoRegistro(String MODO, int formato, int secuencia)
        {
            Log.Information("GestionController - RecursoRegistro - Entrar");

            var Listar = new List<SS_HC_FormatoRecursoCampo>();
            SS_HC_FormatoRecursoCampo objRegistro = new SS_HC_FormatoRecursoCampo();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objRegistro.Accion = "LISTAR";
                objRegistro.IdFormato = formato;
                objRegistro.SecuenciaCampo = secuencia;

                Listar = SvcRecursos.listarRecursos(objRegistro, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FormatoRecursoCampo objEntity in Listar)
                    {
                        objRegistro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objRegistro.Accion = "NUEVO";
            }
            objRegistro.Accion = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Recursos/RecursoRegistro", objRegistro, "");

        }

        public System.Web.Mvc.ActionResult save_Recurso(SS_HC_FormatoRecursoCampo objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Recurso - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSRECURSO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcRecursos.setMantenimiento(objFiltro);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                //return showMensajeBox(message, tituloMsg, tipoMsg);
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        //Auxiliares para listar dentro de los popups

        public System.Web.Mvc.ActionResult getGrillaTablaCampo(int start, int limit, string tabla, string tablacampo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaTablaCampo - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_TablaCampo>();

                var LocalEnty = new SS_HC_TablaCampo();

                LocalEnty.IdFavoritoTabla = Convert.ToInt32(getValorFiltroInt(tabla));
                LocalEnty.NombreCampo = getValorFiltroStr(tablacampo);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcTablaCampo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcTablaCampo.listarTablaCampo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult seleccionadorTablaCampo(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorTablaCampo - Entrar");
            SS_HC_TablaCampo obj = new SS_HC_TablaCampo();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorTablaCampo", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionTablaCampo(String MODO, int id, int idcampo, int tipocampo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionTablaCampo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }


            var nf = X.GetCmp<NumberField>("IdFavoritoTabla");
            nf.SetValue(id);
            var op = X.GetCmp<NumberField>("IdCampo");
            op.SetValue(idcampo);
            var ui = X.GetCmp<NumberField>("TipoCampo");
            ui.SetValue(tipocampo);
            var txt = X.GetCmp<TextField>("ValorPorDefecto");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult postWindowTablaCampo(String idfavorito, String idcampo, String idformato)
        {
            Log.Information("GestionController - postWindowTablaCampo - Entrar");

            SS_HC_Formato objFormatoCampo = new SS_HC_Formato();
            var ListarFor = new List<SS_HC_Formato>();

            var fieldFor = X.GetCmp<TextField>("txtIdPadreF");
            var fieldForD = X.GetCmp<TextField>("txtIdDesF");

            objFormatoCampo.Accion = "LISTAR";
            objFormatoCampo.IdFormato = (getValorFiltroInt(idformato) != null ? Convert.ToInt32(getValorFiltroInt(idformato)) : 0);
            //objFormatoCampo.IdCampo = (getValorFiltroInt(idcampo) != null ? Convert.ToInt32(getValorFiltroInt(idcampo)) : 0);
            ListarFor = SvcFormato.listarFormato(objFormatoCampo, 0, 0);
            if (ListarFor.Count == 1)
            {
                foreach (SS_HC_Formato objEntityf in ListarFor)
                {
                    objFormatoCampo = objEntityf;
                    fieldFor.SetValue(objFormatoCampo.CodigoFormato);
                    fieldForD.SetValue(objFormatoCampo.Descripcion);
                }
            }



            setPropiedadesFormulario(true);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult CCEP5091_View()
        {
            Log.Information("GestionController - CCEP5091_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/FormatoCampo/CCEP5091_View");
        }
        public System.Web.Mvc.ActionResult getGrillaControlAtributo(int start, int limit, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaControlAtributo - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_ControlAtributo>();

                var LocalEnty = new SS_HC_ControlAtributo();

                //LocalEnty.IdAtributo = Convert.ToInt32(getValorFiltroInt(atributo));
                LocalEnty.Nombre = getValorFiltroStr(descripcion);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcAtributo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcAtributo.listarControlAtributo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaControlComponente(int start, int limit, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaControlComponente - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_ControlComponente>();

                var LocalEnty = new SS_HC_ControlComponente();

                // LocalEnty.IdComponente = Convert.ToInt32(getValorFiltroInt(componente));
                LocalEnty.Nombre = getValorFiltroStr(descripcion);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcComponente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcComponente.listarControlComponente(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaFormatoCampo(int start, int limit, string formato, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFormatoCampo - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SS_HC_FormatoCampo>();

                var LocalEnty = new SS_HC_FormatoCampo();

                LocalEnty.IdFormato = Convert.ToInt32(getValorFiltroInt(formato));
                LocalEnty.ValorPorDefecto = getValorFiltroStr(descripcion);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.Accion = "CONTARLISTAPAG";
                int cantElementos = SvcFormatoCampo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFormatoCampo.listarFormatoCampo(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult FormatoCampoRegistro(String MODO, int formato, int secuencia)
        {
            Log.Information("GestionController - FormatoCampoRegistro - Entrar");
            var Listar = new List<SS_HC_FormatoCampo>();

            SS_HC_FormatoCampo objFormatoCampo = new SS_HC_FormatoCampo();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFormatoCampo.Accion = "LISTAR";
                objFormatoCampo.IdFormato = formato;
                objFormatoCampo.SecuenciaCampo = secuencia;

                Listar = SvcFormatoCampo.listarFormatoCampo(objFormatoCampo, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FormatoCampo objEntity in Listar)
                    {
                        objFormatoCampo = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFormatoCampo.Accion = "NUEVO";
            }
            objFormatoCampo.Accion = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/FormatoCampo/FormatoCampoRegistro", objFormatoCampo, "");

        }


        public System.Web.Mvc.ActionResult save_formatocampo(SS_HC_FormatoCampo objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_formatocampo - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSFORMATOCAMPO);
                }
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcFormatoCampo.setMantenimiento(objSave);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.SecuenciaCampo + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                //return showMensajeBox(message, tituloMsg, tipoMsg);
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorComponente(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorComponente - Entrar");
            SS_HC_ControlComponente obj = new SS_HC_ControlComponente();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorComponente", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionComponente(String MODO, String componente, String nombre, String idWindow)
        {
            Log.Information("GestionController - getSeleccionComponente - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdComponente");
            nf.SetValue(componente);
            var txt = X.GetCmp<TextField>("txtNombreComponente");
            txt.SetValue(nombre);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorAtributo(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorAtributo - Entrar");

            SS_HC_ControlAtributo obj = new SS_HC_ControlAtributo();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorAtributo", obj, "");
        }


        public System.Web.Mvc.ActionResult getSeleccionAtributo(String MODO, String atributo, String nombre, String idWindow)
        {
            Log.Information("GestionController - getSeleccionAtributo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdAtributo");
            nf.SetValue(atributo);
            var txt = X.GetCmp<TextField>("txtNombreAtributo");
            txt.SetValue(nombre);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult SeleccionadorRecExternos(String accionSeleccion, String accionListado, String data)
        {
            Log.Information("GestionController - SeleccionadorRecExternos - Entrar");

            ENTITY_GENERALHCE obj = new ENTITY_GENERALHCE();
            obj.USUARIO = ENTITY_GLOBAL.Instance.USUARIO;
            obj.ACCION = accionSeleccion;
            obj.campoStr01 = data;
            return crearWindowRegistro("SeleccionadorRecursosExternos", obj, "");
        }
        public System.Web.Mvc.ActionResult postWindowValidacion(String componente, String atributo, String formato, String secuencia)
        {
            Log.Information("GestionController - postWindowValidacion - Entrar");

            SS_HC_FormatoCampo objFormatoValor = new SS_HC_FormatoCampo();
            var ListarFormatoValor = new List<SS_HC_FormatoCampo>();

            var fieldValorx = X.GetCmp<TextField>("txtValorx");
            if (fieldValorx != null)
            {
                objFormatoValor.Accion = "LISTAR";
                objFormatoValor.IdFormato = (getValorFiltroInt(formato) != null ? Convert.ToInt32(getValorFiltroInt(formato)) : 0);
                objFormatoValor.SecuenciaCampo = (getValorFiltroInt(secuencia) != null ? Convert.ToInt32(getValorFiltroInt(secuencia)) : 0);
                ListarFormatoValor = SvcFormatoCampo.listarFormatoCampo(objFormatoValor, 0, 0);
                if (ListarFormatoValor.Count == 1)
                {
                    foreach (SS_HC_FormatoCampo objEntityValor in ListarFormatoValor)
                    {
                        objFormatoValor = objEntityValor;
                        fieldValorx.SetValue(objFormatoValor.ValorPorDefecto);
                    }
                }
            }

            SS_HC_ControlComponente objCuerpo = new SS_HC_ControlComponente();
            var Listar = new List<SS_HC_ControlComponente>();

            var field = X.GetCmp<TextField>("txtNombreComponente");
            if (field != null)
            {
                objCuerpo.Accion = "LISTAR";
                objCuerpo.IdComponente = (getValorFiltroInt(componente) != null ? Convert.ToInt32(getValorFiltroInt(componente)) : 0);
                Listar = SvcComponente.listarControlComponente(objCuerpo, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_ControlComponente objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                        field.SetValue(objCuerpo.Nombre);
                    }
                }
            }

            SS_HC_ControlAtributo objFormatoCampo = new SS_HC_ControlAtributo();
            var ListarFC = new List<SS_HC_ControlAtributo>();

            var fieldFC = X.GetCmp<TextField>("txtNombreAtributo");
            if (fieldFC != null)
            {
                objFormatoCampo.Accion = "LISTAR";
                objFormatoCampo.IdAtributo = (getValorFiltroInt(atributo) != null ? Convert.ToInt32(getValorFiltroInt(atributo)) : 0);
                ListarFC = SvcAtributo.listarControlAtributo(objFormatoCampo, 0, 0);
                if (ListarFC.Count == 1)
                {
                    foreach (SS_HC_ControlAtributo objEntityFC in ListarFC)
                    {
                        objFormatoCampo = objEntityFC;
                        fieldFC.SetValue(objFormatoCampo.Nombre);
                    }
                }
            }

            setPropiedadesFormulario(true);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorFormatoCampo(String accionSeleccion, String accionListado, int idformato, String nombreformato)
        {
            Log.Information("GestionController - seleccionadorFormatoCampo - Entrar");

            SS_HC_FormatoCampo obj = new SS_HC_FormatoCampo();
            obj.IdFormato = idformato;
            obj.DescripcionLocal = nombreformato;
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorFormatoCampo", obj, "");
        }

        public System.Web.Mvc.ActionResult seleccionadorFormatoCampoV(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFormatoCampoV - Entrar");

            SS_HC_FormatoCampo obj = new SS_HC_FormatoCampo();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorFormatoCampoV", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionFormatoCampoDos(String MODO, String idformato, String secuenciacampo, String seccionf, String seccionvalor, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoCampoDos - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdFormato");
            nf.SetValue(idformato);
            var txt = X.GetCmp<NumberField>("SecuenciaCampo");
            txt.SetValue(secuenciacampo);
            var txtt = X.GetCmp<NumberField>("IdSeccionFormato");
            txtt.SetValue(seccionf);
            var txtft = X.GetCmp<TextField>("txtValorx");
            txtft.SetValue(seccionvalor);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getSeleccionFormatoCampo(String MODO, int id, int campo, String nombre, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoCampo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdFormato");
            nf.SetValue(id);
            var txt = X.GetCmp<NumberField>("SecuenciaCampo");
            txt.SetValue(campo);
            var txtt = X.GetCmp<TextField>("txtIdNomF");
            txtt.SetValue(nombre);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionFormatoCampoNuevo(String MODO, int id, int campo, String nombre, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoCampoNuevo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("nfIdFormato");
            nf.SetValue(id);
            var txt = X.GetCmp<NumberField>("SecuenciaCampo");
            txt.SetValue(campo);
            var txtt = X.GetCmp<TextField>("txtIdNomF");
            txtt.SetValue(nombre);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult postWindowFormatoCampo(String id, String favorito, String formatocampo)
        {
            Log.Information("GestionController - postWindowFormatoCampo - Entrar");

            SS_HC_Formato objCuerpo = new SS_HC_Formato();
            var Listar = new List<SS_HC_Formato>();

            var field = X.GetCmp<TextField>("txtIdNomF");
            if (field != null)
            {
                objCuerpo.Accion = "LISTAR";
                objCuerpo.IdFormato = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                Listar = SvcFormato.listarFormato(objCuerpo, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Formato objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                        field.SetValue(objCuerpo.CodigoFormato);
                    }
                }
            }

            SS_HC_FormatoCampo objFormatoCampo = new SS_HC_FormatoCampo();
            var ListarFC = new List<SS_HC_FormatoCampo>();

            var fieldFC = X.GetCmp<TextField>("txtIdNomFormato");
            if (fieldFC != null)
            {
                objFormatoCampo.Accion = "LISTAR";
                objFormatoCampo.SecuenciaCampo = (getValorFiltroInt(formatocampo) != null ? Convert.ToInt32(getValorFiltroInt(formatocampo)) : 0);
                ListarFC = SvcFormatoCampo.listarFormatoCampo(objFormatoCampo, 0, 0);
                if (ListarFC.Count == 1)
                {
                    foreach (SS_HC_FormatoCampo objEntityFC in ListarFC)
                    {
                        objFormatoCampo = objEntityFC;
                        fieldFC.SetValue(objFormatoCampo.ValorPorDefecto);
                    }
                }
            }

            SS_HC_Tabla objTablaCampo = new SS_HC_Tabla();
            var ListarTabla = new List<SS_HC_Tabla>();

            var fieldTabla = X.GetCmp<TextField>("txtIdTablaCam");
            if (fieldTabla != null)
            {
                objTablaCampo.Accion = "LISTAR";
                objTablaCampo.IdFavoritoTabla = (getValorFiltroInt(favorito) != null ? Convert.ToInt32(getValorFiltroInt(favorito)) : 0);
                ListarTabla = SvcTabla.listarTabla(objTablaCampo, 0, 0);
                if (ListarTabla.Count == 1)
                {
                    foreach (SS_HC_Tabla objEntity1 in ListarTabla)
                    {
                        objTablaCampo = objEntity1;
                        fieldTabla.SetValue(objTablaCampo.NombreTabla);
                    }
                }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult getGrillaForma(int start, int limit, string formato, string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaForma - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_Formato>();

                var LocalEnty = new SS_HC_Formato();
                LocalEnty.Modulo = getValorFiltroStr(formato);  //Convert.ToInt32(getValorFiltroInt(formato));
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcFormato.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFormato.listarFormato(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorValidacion(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorValidacion - Entrar");
            VW_SS_HC_TABLAFORMATO_VALIDACION obj = new VW_SS_HC_TABLAFORMATO_VALIDACION();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorValidacion", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionValidacion(String MODO, string componente, string atributo, String idWindow)
        {
            Log.Information("GestionController - getSeleccionValidacion - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("txtComponente");
            nf.SetValue(componente);
            var txt = X.GetCmp<TextField>("txtAtributo");
            txt.SetValue(atributo);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorFormatoC(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFormatoC - Entrar");

            SS_HC_Formato obj = new SS_HC_Formato();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorFormatoC", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionFormatoC(String MODO, int id, string codigo, string descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoC - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdFormato");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtIdPadreF");
            txt.SetValue(codigo);
            var txtIdDesF = X.GetCmp<TextField>("txtIdDesF");
            txtIdDesF.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionFormatoNuevo(String MODO, int id, string codigo, string descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoNuevo - Entrar");


            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("nfIdFormato");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtIdPadreF");
            txt.SetValue(codigo);
            var txtIdDesF = X.GetCmp<TextField>("txtIdDesF");
            txtIdDesF.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult postWindowFormatoC(String id)
        {
            Log.Information("GestionController - postWindowFormatoC - Entrar");

            SS_HC_Formato objFormato = new SS_HC_Formato();
            var Listar = new List<SS_HC_Formato>();

            //  var field = X.GetCmp<TextField>("txtClase");
            // if (field != null)
            //  {
            objFormato.Accion = "LISTAR";
            objFormato.Accion = "LISTAR";
            objFormato.IdFormato = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
            Listar = SvcFormato.listarFormato(objFormato, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (SS_HC_Formato objEntity in Listar)
                {
                    var nf = X.GetCmp<NumberField>("nfIdPadreF");
                    nf.SetValue(objEntity.IdFormato);
                    var txt = X.GetCmp<TextField>("txtIdPadreF");
                    txt.SetValue(objEntity.CodigoFormato);
                    var txtIdDesF = X.GetCmp<TextField>("txtIdDesF");
                    txtIdDesF.SetValue(objEntity.Descripcion);
                }
                //  }
            }
            return this.Direct();
        }

        /**MAESTRO AGENTE*/
        public System.Web.Mvc.ActionResult CCEP0010_View()
        {
            Log.Information("GestionController - CCEP0010_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Agente/CCEP0010_View");
        }

        /**para el listado principal del mantenimiento*/
        public System.Web.Mvc.ActionResult getGrillaSG_Agente(int start, int limit,
           string id, string nombre, string persona,
            string plataforma, string codigo, string tipo,
            string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSG_Agente - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SG_Agente>();

                //var ListarTotal = new List<SG_Agente>();

                var LocalEnty = new SG_Agente();

                //LocalEnty.Codigo = getValorFiltroStr(codigo);
                LocalEnty.IdAgente = Convert.ToInt32(getValorFiltroInt(id));
                LocalEnty.Nombre = getValorFiltroStr(nombre);
                LocalEnty.IdEmpleado = getValorFiltroInt(persona);

                LocalEnty.CodigoAgente = getValorFiltroStr(codigo);
                LocalEnty.TipoAgente = getValorFiltroInt(tipo);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }

                if (1 == getValorFiltroInt(plataforma) && Session["COD_PLATAFORMA"] != null)
                {
                    LocalEnty.Plataforma = (String)Session["COD_PLATAFORMA"];
                }


                //(descripcion != null ? (descripcion.Trim().Length>0?descripcion.Trim():null) : null);
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcSG_Agente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSG_Agente.listarSG_Agente(LocalEnty, ini, fin);

                    //LocalEnty.ACCION = "LISTARPAG_TOTAL_PER";
                    //LocalEnty.TipoAgente = 1;
                    //ListarTotal = SvcSG_Agente.listarSG_Agente(LocalEnty, ini, fin);

                    //ENTITY_GLOBAL.Instance.ListarPerfilUsuariosTotal = ListarTotal;

                }




                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                foreach (var obj in Listar)
                {
                    if (obj.ExpiraClave != 2)
                    {
                        obj.ExpiraClave = 0;
                    }
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getGrillaChecBox_Examenes(int start, int limit, string descripcion, 
            string tipo,string codMedicamento, string sucursal, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaChecBox_Examenes - Entrar");

            if (tipoBuscar == "FILTRO") { start = 0; }

            List<ExamenQur> examenes = new List<ExamenQur>();

            if (string.IsNullOrEmpty(tipo))
            {
                tipo = "0";
            }

            int contador = 0;

            using (HttpClient clienteHttp = new HttpClient())
            {
                var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                clienteHttp.BaseAddress = new Uri(URL_SERVER);
                try
                {
                    var requestBody = new
                    {
                        Sucursal = sucursal,
                        Tipo = Convert.ToInt32(tipo),
                        Descripcion = descripcion,
                        CodigoMedi = codMedicamento,
                        PageSize = limit,
                        PageNumber = (start/limit)+1

                    };
                    var request = clienteHttp.PostAsync("Consulta/obtenerCheckBoxAllBuscar", requestBody, new JsonMediaTypeFormatter()).Result;
                    if (request.IsSuccessStatusCode)
                    {
                        var resultString = request.Content.ReadAsStringAsync().Result;
                        ViewResponseContenidoPaginado Resultado = (ViewResponseContenidoPaginado)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenidoPaginado));
                        if (Resultado.valor > 0)
                        {
                            if (Resultado.contenido != null)
                            {
                                examenes = Resultado.contenido;
                                contador = Resultado.total;
                            }

                        }
                    }
                    else
                    {
                        Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                }
            }

            return this.Store(examenes, contador);
        }



        /**Para la llamada del formulario de Registro*/
        public System.Web.Mvc.ActionResult SG_AgenteRegistro(String MODO, int id)
        {
            Log.Information("GestionController - SG_AgenteRegistro - Entrar");
            var Listar = new List<SG_Agente>();
            SG_Agente objCuerpo = new SG_Agente();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCuerpo.ACCION = "LISTAR";
                objCuerpo.IdAgente = id;

                Listar = SvcSG_Agente.listarSG_Agente(objCuerpo, 0, 10);
                var ListarS = new List<SY_SeguridadAutorizaciones>();
                var LocalEnty2 = new SY_SeguridadAutorizaciones();

                LocalEnty2.AplicacionCodigo = "SY";
                LocalEnty2.Accion = "LISTARSEGURIDADALMACEN";
                int inicio = id;
                LocalEnty2.Usuario = Listar[0].CodigoAgente;
                ListarS = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty2, inicio, 0);
                if (ListarS.Count > 0)
                {
                    Listar[0].Almacen = 1;
                }
                else
                {
                    Listar[0].Almacen = 2;
                }

                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                    }
                }

                var ListarProcedimiento = new List<SY_SeguridadAutorizaciones>();
                var LocalEnty = new SY_SeguridadAutorizaciones();
                LocalEnty.AplicacionCodigo = "SY";
                int inicioo = id;
                LocalEnty.Usuario = Listar[0].CodigoAgente;
                LocalEnty.Accion = "LISTARPROCEDIMIENTO";
                ListarProcedimiento = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicioo, 0);

                if (ListarProcedimiento.Count > 0)
                {
                    Listar[0].FlatAgente = 1;
                }
                else
                {
                    Listar[0].FlatAgente = 2;
                }
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objCuerpo = objEntity;

                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCuerpo.ACCION = "NUEVO";
            }
            objCuerpo.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Agente/AgenteRegistro", objCuerpo, "");
        }


        public System.Web.Mvc.ActionResult SG_ExamenQuiturgicoRegistro(String MODO, int id)
        {
            Log.Information("GestionController - SG_ExamenQuiturgicoRegistro - Entrar");
            var Listar = new List<ExamenQur>();
            ExamenQur objCuerpo = new ExamenQur();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
               
            }
            else if (MODO == "NUEVO")
            {
                objCuerpo.ACCION = "NUEVO";
            }
            objCuerpo.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/ExamenQuiru/ComponenteQuirur", objCuerpo, "");
        }

        public System.Web.Mvc.ActionResult SG_ExamenQuiturgicoModificar(String MODO, int id)
        {
            Log.Information("GestionController - SG_ExamenQuiturgicoModificar - Entrar");
            ExamenQur Listar = new ExamenQur();
            ExamenQur objCuerpo = new ExamenQur();
            //RECUPERAR LA INFO:
            List<ExamenQur> examenes = new List<ExamenQur>();

            using (HttpClient clienteHttp = new HttpClient())
            {
                var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                clienteHttp.BaseAddress = new Uri(URL_SERVER);
                try
                {
                    var requestBody = new
                    {
                        Id = id
                    };
                    var request = clienteHttp.PostAsync("Consulta/obtenerCheckBoxId", requestBody, new JsonMediaTypeFormatter()).Result;
                    if (request.IsSuccessStatusCode)
                    {
                        var resultString = request.Content.ReadAsStringAsync().Result;
                        ViewResponseContenido Resultado = (ViewResponseContenido)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenido));
                        if (Resultado.valor > 0)
                        {
                            if (Resultado.contenido != null)
                            {
                                objCuerpo = Resultado.contenido[0];
                            }

                        }
                        else
                        {
                            return showMensajeNotify("Información", Resultado.msg.ToString(), "INFO");
                        }
                    }
                    else
                    {
                        Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                    return showMensajeNotify("Información", ex.Message, "INFO");
                }
            }
            objCuerpo.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/ExamenQuiru/ComponenteQuirur", objCuerpo, "");
        }

        public System.Web.Mvc.ActionResult SG_ExamenQuiturgicoEliminar(String MODO, int id)
        {
            Log.Information("GestionController - SG_ExamenQuiturgicoEliminar - Entrar");

            List<ExamenQur> examenes = new List<ExamenQur>();

            using (HttpClient clienteHttp = new HttpClient())
            {
                var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                clienteHttp.BaseAddress = new Uri(URL_SERVER);
                try
                {
                    var requestBody = new
                    {
                        Id = id
                    };
                    var request = clienteHttp.PostAsync("Consulta/deleteCheckBoxAll", requestBody, new JsonMediaTypeFormatter()).Result;
                    if (request.IsSuccessStatusCode)
                    {
                        var resultString = request.Content.ReadAsStringAsync().Result;
                        ViewResponseContenidoMsg Resultado = (ViewResponseContenidoMsg)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenidoMsg));
                        if (Resultado.valor > 0)
                        {
                            //return showMensajeNotify("Información", Resultado.msg.ToString(), "INFO");
                            return terminarShowMensajeBox("WindowExamenQuirur", Resultado.msg.ToString(), "Información", "INFO", "accionFinal");

                        }
                        else
                        {
                            return showMensajeNotify("Información", Resultado.msg.ToString(), "INFO");
                        }
                    }
                    else
                    {
                        Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                    return showMensajeNotify("Información", ex.Message, "INFO");
                }
            }

            return showMensajeNotify("Información", "terminado", "INFO");
        }


        public System.Web.Mvc.ActionResult showMensajeNotifyData(String titulo, String message, String tipo, bool esException)
        {
            Log.Information("GestionController - showMensajeNotifyData - Entrar");

            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            //X.Msg.Notify(titulo, message).Show();
            NotificationAlignConfig Align = new NotificationAlignConfig()
            {
                OffsetY = -500,

            };
            X.Msg.Notify(new NotificationConfig
            {
                Title = titulo,
                Icon = (tipo == "WARNING" ? Icon.Error : (tipo == "ERROR" ? Icon.Error : Icon.Information)),
                AlignCfg = Align,
                Html = message,
                //AnimEl = this.GetCmp<Button>("Button8").ClientID,
                /*Fn = new JFunction
                {
                    Fn = "accionFinal"
                }*/
            }).Show();
            //return this.Store("1");
            if (tipo == "ERROR")
            {
                List<ENTITY_MENSAJES> listaMsg_error = new List<ENTITY_MENSAJES>();
                listaMsg_error.Add(new ENTITY_MENSAJES
                {
                    DESCRIPCION = message,
                    TITULO = titulo,
                    ICON = "ERROR",
                    IDCOMPONENTE = "",
                    TIPOMSG = (esException ? "EXCEPTION" : "ERROR"),
                    NIVEL = 1
                });
                return this.Store(listaMsg_error);
            }
            else
            {
                return this.Direct();
            }
        }
        /**Para guardar los cambios del formulario*/
        public System.Web.Mvc.ActionResult save_SG_Agente(SG_Agente objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SG_Agente - Entrar");

            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSTAGENTE);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        /////registro
                        if (objSave.ExpiraClave == null)
                        {
                            objSave.ExpiraClave = 1;
                        }
                        if (objSave.IndicadorMultiple == null)
                        {
                            objSave.IndicadorMultiple = 1;
                        }

                        if (objSave.flatUsuGenerico == null)
                        {
                            objSave.flatUsuGenerico = 1;
                        }

                        if (Session["COD_PLATAFORMA"] != null)
                        {
                            objSave.Plataforma = (String)Session["COD_PLATAFORMA"];
                        }
                        if (objSave.TipoAgente == 2)
                        {
                            if (objSave.tipotrabajador != "04")
                            {
                                objSave.IdCodigo = null;
                            }
                            if (objSave.flatUsuGenerico == 2)
                            {
                                objSave.IdEmpleado = 0;
                            }
                            if (objSave.tipotrabajador == null)
                            {
                                objSave.tipotrabajador = "";
                            }
                            else if (objSave.tipotrabajador.Length < 1 || objSave.tipotrabajador.ToUpper() == "NULL")
                            {
                                return showMensajeNotifyData("Excepción", "Debe tener configurado el Tipo Profesional ", "ERROR", false);
                            }
                        }
                        var Listar2 = new List<SG_Agente>();
                        var LocalEnty = new SG_Agente();

                        LocalEnty.IdAgente = 0;
                        LocalEnty.Nombre = null;
                        LocalEnty.IdEmpleado = null;

                        //   LocalEnty.CodigoAgente = null;
                        LocalEnty.TipoAgente = null;
                        LocalEnty.Estado = 2;
                        LocalEnty.Plataforma = (String)Session["COD_PLATAFORMA"];
                        LocalEnty.ACCION = "LISTARPAG";
                        int cantElementos = SvcSG_Agente.setMantenimiento(LocalEnty);
                        if (cantElementos > 0)
                        {
                            LocalEnty.ACCION = "LISTARPAG";
                            Listar2 = SvcSG_Agente.listarSG_Agente(LocalEnty, 0, cantElementos);
                        }

                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                        List<SG_Agente> converter = new List<SG_Agente>();


                        //var dtValida = ENTITY_GLOBAL.Instance.OBJECT_AGENTE;
                        string JSONstring = string.Empty;
                        JSONstring = JsonConvert.SerializeObject(Listar2);
                        List<SG_Agente> results = (List<SG_Agente>)Newtonsoft.Json.JsonConvert.DeserializeObject(JSONstring, typeof(List<SG_Agente>));
                        List<SG_Agente> listaGeeneral = results.Where(x => x.IdEmpleado == objSave.IdEmpleado).ToList();
                        if (listaGeeneral.Count > 0 && objSave.ACCION == "INSERT")
                        {
                            int valor = Convert.ToInt32(listaGeeneral[0].IdEmpleado);
                            if (valor == Convert.ToInt32(objSave.IdEmpleado) && valor != 0)
                            {
                                return showMensajeNotifyData("Excepción", "El Trabajador ya cuenta con un agente ", "ERROR", false);
                            }
                        }

                        //update masivo A TODOS LOS USUARIOS ASOCIADOS A ESE PERFIL

                        if (objSave.Estado == 1 && objSave.TipoAgente == 1)
                        {
                            var LocalEntyUsu = new SG_PerfilUsuario();

                            var ListarUsu_Perfil = new List<SG_PerfilUsuario>();

                            //  LocalEntyUsu.IdPerfil = Convert.ToInt32(getValorFiltroInt(objSave.IdAgente));
                            LocalEntyUsu.IdPerfil = Convert.ToInt32(objSave.IdAgente);
                            LocalEntyUsu.IdUsuario = 0;
                            LocalEntyUsu.Accion = "LISTARUSUARIOS";
                            ListarUsu_Perfil = SvcSeguridadPerfilUsuario.listarSeguridadPerfilUsuario(LocalEntyUsu, 0, 0);

                            foreach (var objSaveUSU in ListarUsu_Perfil)
                            {
                                objSaveUSU.Accion = "INSERT";
                                objSaveUSU.Estado = 1;
                                objSaveUSU.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objSaveUSU);
                            }

                        }


                        if (objSave.Estado == 2 && objSave.TipoAgente == 1)
                        {
                            var LocalEntyUsu = new SG_PerfilUsuario();

                            var ListarUsu_Perfil = new List<SG_PerfilUsuario>();

                            //  LocalEntyUsu.IdPerfil = Convert.ToInt32(getValorFiltroInt(objSave.IdAgente));
                            LocalEntyUsu.IdPerfil = Convert.ToInt32(objSave.IdAgente);
                            LocalEntyUsu.IdUsuario = 0;
                            LocalEntyUsu.Accion = "LISTARUSUARIOS";
                            ListarUsu_Perfil = SvcSeguridadPerfilUsuario.listarSeguridadPerfilUsuario(LocalEntyUsu, 0, 0);

                            foreach (var objSaveUSU in ListarUsu_Perfil)
                            {
                                objSaveUSU.Accion = "INSERT";
                                objSaveUSU.Estado = 2;
                                objSaveUSU.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objSaveUSU);
                            }
                        }
                        //else
                        //{ 

                        int res = SvcSG_Agente.setMantenimiento(objSave);
                        idResultado = 0;
                        //}
                        if (res == 1)
                        {
                            tipoMsg = "ERROR";
                            message = "El  usuario (" + objSave.CodigoAgente + ") no se puede eliminar.";
                            tituloMsg = "Error";
                        }

                        else if (res > 1)
                        {

                            message = "Se " + accion + " el  usuario (" + objSave.CodigoAgente + ") satisfactoriamente.";
                        }
                        else if (res == 0)
                        {
                            tipoMsg = "WARNING";
                            message = "No se puede Eliminar porque el usuario (" + objSave.CodigoAgente + ") tiene atenciones relacionadas.";
                            tituloMsg = "Advertencia";

                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }


                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objSave.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        public System.Web.Mvc.ActionResult save_ComponenteQuirurgico(ExamenQur objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_ComponenteQuirurgico - Entrar");

            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.ACCION = MODO;
                try
                {
                    if (MODO == "NUEVO")
                    {
                        objSave.ACCION = "INSERT";
                        accion = "registró";

                        /////registro

                        using (HttpClient clienteHttp = new HttpClient())
                        {
                            var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                            clienteHttp.BaseAddress = new Uri(URL_SERVER);
                            try
                            {
                                var request = clienteHttp.PostAsync("Consulta/saveCheckBoxAll", objSave, new JsonMediaTypeFormatter()).Result;
                                if (request.IsSuccessStatusCode)
                                {
                                    var resultString = request.Content.ReadAsStringAsync().Result;
                                    ViewResponseContenidoMsg Resultado = (ViewResponseContenidoMsg)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenidoMsg));
                                    if (Resultado.valor > 0)
                                    {
                                        return terminarShowMensajeBox(idWindow, Resultado.msg.ToString(), "Información", "INFO", "accionFinal");
                                    }
                                    else
                                    {
                                        return showMensajeNotify("Información", Resultado.msg.ToString(), "INFO");
                                    }
                                }
                                else
                                {
                                    Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                            }
                        }

                    }
                    else if (MODO == "UPDATE")
                    {
                        objSave.ACCION = "UPDATE";
                        accion = "modificó";

                        /////registro

                        using (HttpClient clienteHttp = new HttpClient())
                        {
                            var URL_SERVER = ConfigurationManager.AppSettings.Get("ApiRest");
                            clienteHttp.BaseAddress = new Uri(URL_SERVER);
                            try
                            {
                                var request = clienteHttp.PostAsync("Consulta/updateCheckBoxAll", objSave, new JsonMediaTypeFormatter()).Result;
                                if (request.IsSuccessStatusCode)
                                {
                                    var resultString = request.Content.ReadAsStringAsync().Result;
                                    ViewResponseContenidoMsg Resultado = (ViewResponseContenidoMsg)Newtonsoft.Json.JsonConvert.DeserializeObject(resultString, typeof(ViewResponseContenidoMsg));
                                    if (Resultado.valor > 0)
                                    {
                                        return terminarShowMensajeBox(idWindow, Resultado.msg.ToString(), "Información", "INFO", "accionFinal");
                                    }
                                    else
                                    {
                                        return showMensajeNotify("Información", Resultado.msg.ToString(), "INFO");
                                    }
                                }
                                else
                                {
                                    Log.Error(DateTime.Now + " Error en la solicitud: " + request.StatusCode);
                                }
                            }
                            catch (Exception ex)
                            {
                                Log.Error(DateTime.Now + " Excepción: " + ex.Message);
                            }
                        }

                    }
                    else if (MODO == "DELETE")
                    {
                        objSave.ACCION = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encotró el MODO.";
                        tituloMsg = "Advertencia";
                    }

                    

                    //UPDATE

                    






                }
                catch (Exception ex)
                {
                    return showMensajeNotify("Excepción", ex.Message, "ERROR");
                    throw;
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, "INFO", "accionFinal");
        }


        /**Evento luego de seleccionar un elemento de una grilla (si la hubiera)*/
        public System.Web.Mvc.ActionResult getSeleccionSG_Grupo(String MODO, int id, String descripcion, String cod, String idWindow)
        {
            Log.Information("GestionController - getSeleccionSG_Grupo - Entrar");
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdGrupo");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfDescGrupo");
            txt.SetValue(descripcion);
            var txt2 = X.GetCmp<TextField>("tfCodGrupo");
            txt2.SetValue(cod);

            return this.Direct();
        }
        /**Obtener el empleado seleccionado desde el Window general*/
        public System.Web.Mvc.ActionResult getSeleccionPersonaMaestroAgente(String MODO, int persona, string servicio,string codigo, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPersonaMaestroAgente - Entrar");


            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txt = X.GetCmp<NumberField>("IdEmpleado");
            txt.SetValue(persona);

            var txttfTipoTrabajador = X.GetCmp<TextField>("tipotrabajador");
            txttfTipoTrabajador.SetValue(servicio);

            var tfCodigoUsuario = X.GetCmp<TextField>("CodigoAgente");
            var realValueCodigo = getValorFiltroStr(codigo);
            tfCodigoUsuario.SetValue(realValueCodigo);

            List<VW_PERSONAPACIENTE> lista = new List<VW_PERSONAPACIENTE>();
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.Persona = persona;
            obj.ACCION = "LISTARPORID";
            lista = SvcVw_Personapaciente.listarVwPersonapaciente(obj, 0, 0);
            if (lista.Count == 1)
            {
                foreach (var result in lista)
                {
                    var txtNombre = X.GetCmp<TextField>("tfDescEmp");
                    txtNombre.SetValue(result.NombreCompleto);
                    var txtNombres = X.GetCmp<TextField>("Nombre");
                    txtNombres.SetValue(result.NombreCompleto);
                }
            }

            return this.Direct();
        }
        /**Evento posterior a la renderizacion del formulario (para cargar data extra)*/
        public System.Web.Mvc.ActionResult postWindowAgente(String idGrupo, String idOrga,
            String idPersona, String idOpcion)
        {
            Log.Information("GestionController - postWindowAgente - Entrar");

            try
            {
                List<VW_PERSONAPACIENTE> listaPersona = new List<VW_PERSONAPACIENTE>();
                VW_PERSONAPACIENTE objpersona = new VW_PERSONAPACIENTE();
                objpersona.Persona = Convert.ToInt32(getValorFiltroInt(idPersona));
                objpersona.ACCION = "LISTARPORID";
                listaPersona = SvcVw_Personapaciente.listarVwPersonapaciente(objpersona, 0, 0);
                if (listaPersona.Count == 1)
                {
                    var nfIdEmp = X.GetCmp<NumberField>("IdEmpleado");
                    var tfDescEmp = X.GetCmp<TextField>("tfDescEmp");
                    foreach (var result in listaPersona)
                    {
                        nfIdEmp.SetValue(result.Persona);
                        tfDescEmp.SetValue(result.NombreCompleto);
                    }
                }
                /***/
                List<SG_Opcion> listaOpcion = new List<SG_Opcion>();
                SG_Opcion objOpcion = new SG_Opcion();
                objOpcion.Accion = "LISTARPORID";
                objOpcion.IdOpcion = Convert.ToInt32(getValorFiltroInt(idOpcion));
                listaOpcion = SvcSG_Opcion.listarSG_Opcion(objOpcion, 0, 0);
                if (listaOpcion.Count == 1)
                {
                    var tfDescOpc = X.GetCmp<TextField>("tfDescOpc");
                    foreach (var result in listaOpcion)
                    {
                        tfDescOpc.SetValue(result.Nombre);
                    }
                }
                /***/
                List<SG_Grupo> listaGrupo = new List<SG_Grupo>();
                SG_Grupo objGrupo = new SG_Grupo();
                objGrupo.IdGrupo = Convert.ToInt32(getValorFiltroInt(idGrupo));
                objGrupo.ACCION = "LISTARPORID";
                listaGrupo = SvcSG_Grupo.listarSG_Grupo(objGrupo, 0, 0);
                if (listaGrupo.Count == 1)
                {
                    var nfIdGrupo = X.GetCmp<NumberField>("IdGrupo");
                    var tfCodGrupo = X.GetCmp<TextField>("tfCodGrupo");
                    var tfDescGrupo = X.GetCmp<TextField>("tfDescGrupo");
                    foreach (var result in listaGrupo)
                    {
                        nfIdGrupo.SetValue(result.IdGrupo);
                        tfCodGrupo.SetValue(result.CodigoGrupo);
                        tfDescGrupo.SetValue(result.Nombre);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public StoreResult GetTreeViewSG_Opciones(string node,
          string id, string nombre, string persona,
           string plataforma, string codigo, string tipo,
           string estado, string tipoBuscar)
        {
            Log.Information("GestionController - GetTreeViewSG_Opciones - Entrar");
            var ListaMiscel = new List<SG_Opcion>();
            int TipoPreven = 0;
            var entidaLocal = new SG_Opcion();
            /**OBS: usuario auxiliar*/
            entidaLocal.IdOpcion = Convert.ToInt32(getValorFiltroInt(id));
            entidaLocal.Nombre = getValorFiltroStr(nombre);
            entidaLocal.CodigoOpcion = getValorFiltroStr(codigo);
            entidaLocal.Estado = getValorFiltroInt(estado);
            if (node == "WA")
            {
                entidaLocal.NivelOpcion = 1;
                entidaLocal.IdOpcionPadre = null;
            }
            else
            {
                try
                {
                    entidaLocal.IdOpcionPadre = Convert.ToInt32(node.Trim());
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);


                }
            }
            NodeCollection nodes = new Ext.Net.NodeCollection();
            entidaLocal.Accion = "LISTAR";
            entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            List<SG_Opcion> serviceResuls = new List<SG_Opcion>();
            serviceResuls = SvcSG_Opcion.listarSG_Opcion(entidaLocal, 0, 0);
            foreach (var resulenti in serviceResuls)
            {

                Node asyncNode = new Node
                {
                    Text = resulenti.IndicadorFormato + "|" +
                            resulenti.Nombre + "|" +
                            resulenti.IdOpcion + "|" +
                            resulenti.CodigoOpcion + "|" +
                            resulenti.IdOpcionPadre + "|" +
                            resulenti.Estado,


                    NodeID = resulenti.IdOpcion.ToString().Trim(),
                    Leaf = resulenti.IndicadorFormato == 2 ? true : false,
                    AttributesObject = resulenti
                };
                nodes.Add(asyncNode);
            }
            return this.Store(nodes);
        }
        public System.Web.Mvc.ActionResult seleccionadorOpciones(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorOpciones - Entrar");
            SG_Opcion obj = new SG_Opcion();
            obj.Accion = accionSeleccion;
            return crearWindowRegistro("SeleccionadorOpcion", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionOpciones(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionOpciones - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txt = X.GetCmp<NumberField>("IdOpcionDefecto");
            txt.SetValue(id);

            int contador = 0;
            string[] words = descripcion.Split('|');
            foreach (string word in words)
            {
                if (contador < 2)
                {
                    var txtdesc = X.GetCmp<TextField>("tfDescOpc");
                    txtdesc.SetValue(word);
                    contador++;
                }
            }
            return this.Direct();
        }
        /****FIN*****/
        /**para el listado de SG_Grupo */
        public System.Web.Mvc.ActionResult getGrillaSG_Grupo(int start, int limit,
           string id, string nombre, string codigo,
            string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSG_Grupo - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<SG_Grupo>();

                var LocalEnty = new SG_Grupo();
                LocalEnty.IdGrupo = Convert.ToInt32(getValorFiltroInt(id));
                LocalEnty.Nombre = getValorFiltroStr(nombre);
                LocalEnty.CodigoGrupo = getValorFiltroStr(codigo);

                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcSG_Grupo.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSG_Grupo.listarSG_Grupo(LocalEnty, ini, fin);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /**Lanzar le Seleccionador de SG_Grupo**/
        public System.Web.Mvc.ActionResult seleccionadorSGGrupo(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorSGGrupo - Entrar");
            SG_Grupo obj = new SG_Grupo();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            return crearWindowRegistro("SeleccionadorSGGrupo", obj, "");
        }

        /******MAESTRO TIPO DE ATENCIÓN******/
        public System.Web.Mvc.ActionResult CCEP0109_View()
        {
            Log.Information("GestionController - CCEP0109_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/TipoAtencion/CCEP0109_View");
        }

        public System.Web.Mvc.ActionResult getGrillaTipoAtencion(int start, int limit,
             string descripcion, string idTipoAtencion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaTipoAtencion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_GE_TipoAtencion>();

                var LocalEnty = new SS_GE_TipoAtencion();
                LocalEnty.IdTipoAtencion = (getValorFiltroInt(idTipoAtencion) != null ? Convert.ToInt32(getValorFiltroInt(idTipoAtencion)) : 0);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcTipoAtencion.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcTipoAtencion.listarTipoAtencion(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaClasificadorMovimiento(int start, int limit,
                string descripcion, string codigo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaClasificadorMovimiento - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<GE_ClasificadorMovimiento>();

                var LocalEnty = new GE_ClasificadorMovimiento();
                LocalEnty.ClasificadorMovimiento = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcClasificadorMovimiento.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcClasificadorMovimiento.listarClasificadorMovimiento(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult TipoAtencionRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - TipoAtencionRegistro - Entrar");
            var Listar = new List<SS_GE_TipoAtencion>();

            SS_GE_TipoAtencion objAtencion = new SS_GE_TipoAtencion();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objAtencion.Accion = "LISTAR";
                objAtencion.IdTipoAtencion = Convert.ToInt32(getValorFiltroInt(tipo));

                Listar = SvcTipoAtencion.listarTipoAtencion(objAtencion, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_TipoAtencion objEntity in Listar)
                    {
                        objAtencion = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAtencion.Accion = "NUEVO";
            }
            objAtencion.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/TipoAtencion/TipoAtencionRegistro", objAtencion, "");
        }

        public System.Web.Mvc.ActionResult postWindowTipoAtencion(String id)
        {
            Log.Information("GestionController - postWindowTipoAtencion - Entrar");

            SS_GE_TipoAtencion objCuerpo = new SS_GE_TipoAtencion();
            var Listar = new List<SS_GE_TipoAtencion>();

            var field = X.GetCmp<TextField>("txtClase");
            if (field != null)
            {
                objCuerpo.Accion = "LISTAR";
                objCuerpo.IdTipoAtencion = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                Listar = SvcTipoAtencion.listarTipoAtencion(objCuerpo, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_TipoAtencion objEntity in Listar)
                    {
                        objCuerpo = objEntity;
                        field.SetValue(objCuerpo.Descripcion);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_TipoAtencion(SS_GE_TipoAtencion objTipoAtencion, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_TipoAtencion - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objTipoAtencion != null)
            {
                ////VALIDACIÓN
                objTipoAtencion.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objTipoAtencion, UTILES_MENSAJES.FORM_MSTTIPOATENCION);
                }
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objTipoAtencion.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objTipoAtencion.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objTipoAtencion.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objTipoAtencion.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objTipoAtencion.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcTipoAtencion.setMantenimiento(objTipoAtencion);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  Tipo de Atención satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objTipoAtencion.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        /**Obtener movimiento seleccionado desde el Window general*/

        public System.Web.Mvc.ActionResult getSeleccionClasificadorMaestroTipoAtencion(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionClasificadorMaestroTipoAtencion - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("ClasificadorMovimiento");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtClase");
            txt.SetValue(descripcion);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorClasificadorMovimiento(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorClasificadorMovimiento - Entrar");


            GE_ClasificadorMovimiento obj = new GE_ClasificadorMovimiento();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            return crearWindowRegistro("SeleccionadorClasificadorMovimiento", obj, "");
        }
        /*****************************FIN***********************************/

        /******************MAESTRO COBERTURA****************/
        public System.Web.Mvc.ActionResult CCEP0111_View()
        {
            Log.Information("GestionController - CCEP0111_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Cobertura/CCEP0111_View");
        }
        public System.Web.Mvc.ActionResult getGrillaCobertura(int start, int limit,
             string idcobertura, string estado, string codigo, string cobertura,
            string tipocobertura, string ambulatorio, string emergencia, string hospitalario, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaCobertura - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_SG_MaestroCobertura>();

                var LocalEnty = new SS_SG_MaestroCobertura();
                LocalEnty.IdCobertura = (getValorFiltroInt(idcobertura) != null ? Convert.ToInt32(getValorFiltroInt(idcobertura)) : 0);
                LocalEnty.Estado = (getValorFiltroInt(estado) != null ? Convert.ToInt32(getValorFiltroInt(estado)) : 0);
                LocalEnty.CodigoCobertura = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(cobertura);
                LocalEnty.Estado = (getValorFiltroInt(estado) != null ? Convert.ToInt32(getValorFiltroInt(estado)) : 0);
                LocalEnty.TipoTabla = (getValorFiltroInt(tipocobertura) != null ? Convert.ToInt32(getValorFiltroInt(tipocobertura)) : 0);
                LocalEnty.IndicadorAmbulatorio = (getValorFiltroInt(ambulatorio) != null ? Convert.ToInt32(getValorFiltroInt(ambulatorio)) : 0);
                LocalEnty.IndicadorEmergencia = (getValorFiltroInt(emergencia) != null ? Convert.ToInt32(getValorFiltroInt(emergencia)) : 0);
                LocalEnty.IndicadorHospitalario = (getValorFiltroInt(hospitalario) != null ? Convert.ToInt32(getValorFiltroInt(hospitalario)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcCobertura.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcCobertura.listarCobertura(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult CoberturaRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - CoberturaRegistro - Entrar");
            var Listar = new List<SS_SG_MaestroCobertura>();

            SS_SG_MaestroCobertura objCobertura = new SS_SG_MaestroCobertura();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objCobertura.ACCION = "LISTAR";
                objCobertura.IdCobertura = Convert.ToInt32(getValorFiltroInt(tipo));

                Listar = SvcCobertura.listarCobertura(objCobertura, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_SG_MaestroCobertura objEntity in Listar)
                    {
                        objCobertura = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objCobertura.ACCION = "NUEVO";
            }
            objCobertura.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Cobertura/CoberturaRegistro", objCobertura, "");
        }

        public System.Web.Mvc.ActionResult postWindowCobertura(String id)
        {
            Log.Information("GestionController - postWindowCobertura - Entrar");

            SS_SG_MaestroCobertura objCuerpo = new SS_SG_MaestroCobertura();
            var Listar = new List<SS_SG_MaestroCobertura>();

            objCuerpo.ACCION = "LISTAR";
            objCuerpo.IdCobertura = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
            Listar = SvcCobertura.listarCobertura(objCuerpo, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (SS_SG_MaestroCobertura objEntity in Listar)
                {
                    objCuerpo = objEntity;

                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_Cobertura(SS_SG_MaestroCobertura objCobertura, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Cobertura - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objCobertura != null)
            {
                ////VALIDACIÓN
                objCobertura.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objCobertura, UTILES_MENSAJES.FORM_MSTCOBERTURA);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objCobertura.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objCobertura.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objCobertura.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objCobertura.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objCobertura.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcCobertura.setMantenimiento(objCobertura);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " la cobertura satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objCobertura.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /***************************FIN********************************/
        /******************************SELECCIONADOR EMPLEADO*********************************/
        public System.Web.Mvc.ActionResult getGrillaEmpleado(int start, int limit, string persona, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaEmpleado - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<VW_PERSONAPACIENTE>();

                var LocalEnty = new VW_PERSONAPACIENTE();
                LocalEnty.Persona = (getValorFiltroInt(persona) != null ? Convert.ToInt32(getValorFiltroInt(persona)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAGEMPLEADO";
                int cantElementos = SvcVw_Personapaciente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAGEMPLEADO";
                    Listar = SvcVw_Personapaciente.listarVwPersonapaciente(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getSeleccionEmpleado(String MODO, int persona, String idWindow)
        {
            Log.Information("GestionController - getSeleccionEmpleado - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("tfBuscarEmp");
            nf.SetValue(persona);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorEmpleado(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorEmpleado - Entrar");

            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.NombreCompleto = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorEmpleado", obj, "");
        }
        /******************************FIN********************************/
        /*************************MAESTRO UBICACIÓN*************************/
        public System.Web.Mvc.ActionResult CCEP5031_View()
        {
            Log.Information("GestionController - CCEP5031_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Ubicacion/CCEP5031_View");
        }
        public System.Web.Mvc.ActionResult getGrillaUbicacion(int start, int limit, string descripcion, string codigo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUbicacion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";                
                var Listar = new List<SS_HC_Ubicacion>();
                var LocalEnty = new SS_HC_Ubicacion();
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Codigo = getValorFiltroStr(codigo);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcSSHCUbicacion.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcSSHCUbicacion.listarSSHCUbicacion(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getSeleccionUbicacion(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionUbicacion - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdUbicacionPadre");
            nf.SetValue(id);            
            var txt = X.GetCmp<TextField>("tfUbicacionPadre");
            txt.SetValue(descripcion);            
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorUbicacion(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorUbicacion - Entrar");

            SS_HC_Ubicacion obj = new SS_HC_Ubicacion();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {            
            }
            return crearWindowRegistro("SeleccionadorUbicacion", obj, "");
        }
        public System.Web.Mvc.ActionResult UbicacionRegistro(String MODO, String codigo)
        {
            Log.Information("GestionController - UbicacionRegistro - Entrar");

            var Listar = new List<SS_HC_Ubicacion>();
            SS_HC_Ubicacion objFiltro = new SS_HC_Ubicacion();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.Codigo = getValorFiltroStr(codigo);
                Listar = SvcSSHCUbicacion.listarSSHCUbicacion(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Ubicacion objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Ubicacion/UbicacionRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult postWindowUbicacion(String id, String id2, String id3)
        {
            Log.Information("GestionController - postWindowUbicacion - Entrar");

            try
            {
                var Listar = new List<SS_HC_Ubicacion>();
                SS_HC_Ubicacion obj = new SS_HC_Ubicacion();
                obj.IdUbicacion = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
               // obj.UnidadReplicacion = getValorFiltroStr(id2);
                obj.Accion = "LISTARPAG";
                Listar = SvcSSHCUbicacion.listarSSHCUbicacion(obj, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var nf = X.GetCmp<NumberField>("IdUbicacionPadre");
                        nf.SetValue(result.IdUbicacion);
                        var tfEst = X.GetCmp<TextField>("tfUbicacionPadre");
                        tfEst.SetValue(result.Nombre);
                    }
                }               
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_UbicacionServ(SS_HC_Ubicacion objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_UbicacionServ - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTSSHCUBICACION);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;                        
                        idResultado = SvcSSHCUbicacion.setMantenimiento(objFiltro);
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*******************FIN*******************/
        /*************************MAESTRO FORMATO*************************/
        public System.Web.Mvc.ActionResult CCEP0113_View()
        {
            Log.Information("GestionController - CCEP0113_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Formato/CCEP0113_View");
        }
        public System.Web.Mvc.ActionResult getGrillaFormato(int start, int limit,
             string descripcion, string codigo, string codigoFormatoPadre, string tipoFormato, string modulo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFormato - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_Formato>();

                var LocalEnty = new SS_HC_Formato();
                LocalEnty.CodigoFormatoPadre = getValorFiltroStr(codigoFormatoPadre);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.CodigoFormato = getValorFiltroStr(codigo);
                LocalEnty.Modulo = getValorFiltroStr(modulo);
                LocalEnty.TipoFormato = (getValorFiltroInt(tipoFormato) != null ? Convert.ToInt32(getValorFiltroInt(tipoFormato)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcFormato.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFormato.listarFormato(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreFormato(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreFormato - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdFormatoPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("CodigoFormatoPadre");
            txt.SetValue(codigo);

            return this.Direct();
        }

        public System.Web.Mvc.ActionResult seleccionadorFormato(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFormato - Entrar");

            SS_HC_Formato obj = new SS_HC_Formato();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorFormato", obj, "");
        }

        public System.Web.Mvc.ActionResult FormatoRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - FormatoRegistro - Entrar");

            var Listar = new List<SS_HC_Formato>();

            SS_HC_Formato objFormato = new SS_HC_Formato();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFormato.Accion = "LISTAR";
                objFormato.IdFormato = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcFormato.listarFormato(objFormato, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_Formato objEntity in Listar)
                    {
                        objFormato = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFormato.Accion = "NUEVO";
            }
            objFormato.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Formato/FormatoRegistro", objFormato, "");
        }

        public System.Web.Mvc.ActionResult postWindowFormato(String id)
        {
            Log.Information("GestionController - postWindowFormato - Entrar");

            SS_HC_Formato objFormato = new SS_HC_Formato();
            var Listar = new List<SS_HC_Formato>();

            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_Formato(SS_HC_Formato objFormato, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Formato - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFormato != null)
            {
                ////VALIDACIÓN
                objFormato.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFormato, UTILES_MENSAJES.FORM_MSTFORMATO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFormato.Accion = "NUEVO";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFormato.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFormato.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFormato.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFormato.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFormato.FechaCreacion = DateTime.Now;
                        objFormato.FechaModificacion = DateTime.Now;
                        idResultado = SvcFormato.setMantenimiento(objFormato);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el formato satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFormato.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*******************FIN*******************/
        /*************************MAESTRO CATÁLOGO UNIDAD SERVICIO*************************/
        public System.Web.Mvc.ActionResult CCEP5027_View()
        {
            Log.Information("GestionController - CCEP5027_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/CategoriaUnidadServicio/CCEP5027_View");
        }
        public System.Web.Mvc.ActionResult getGrillaUnidadServicioSelec(int start, int limit, string descripcion, string codigoPadre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUnidadServicioSelec - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_CatalogoUnidadServicio>();

                var LocalEnty = new SS_HC_CatalogoUnidadServicio();

                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.CodigoUnidadServicio = getValorFiltroStr(codigoPadre);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcCategoriaUnidadServicio.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaUnidadServicio(int start, int limit, string descripcion, string codigoPadre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUnidadServicio - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_CatalogoUnidadServicio>();

                var LocalEnty = new SS_HC_CatalogoUnidadServicio();

                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.CodigoUnidadServicio = getValorFiltroStr(codigoPadre);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcCategoriaUnidadServicio.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreUnidadServicio(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreUnidadServicio - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdUnidadServicioPadre");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("txtCodigoUnidadServicioPadre");
            txt.SetValue(codigo);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionCatUnidadServicio(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionCatUnidadServicio - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }

            var nf = X.GetCmp<NumberField>("IdUnidadServicio");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfUnidServ");
            txt.SetValue(descripcion);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorUnidadServicio(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorUnidadServicio - Entrar");

            SS_HC_CatalogoUnidadServicio obj = new SS_HC_CatalogoUnidadServicio();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorUnidadServicio", obj, "");
        }

        public System.Web.Mvc.ActionResult CategoriaUnidadServicioRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - CategoriaUnidadServicioRegistro - Entrar");

            var Listar = new List<SS_HC_CatalogoUnidadServicio>();

            SS_HC_CatalogoUnidadServicio objFiltro = new SS_HC_CatalogoUnidadServicio();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdUnidadServicio = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_CatalogoUnidadServicio objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/CategoriaUnidadServicio/CategoriaUnidadServicioRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult postWindowUnidadServicio(String id)
        {
            Log.Information("GestionController - postWindowUnidadServicio - Entrar");

            try
            {
                var Listar = new List<SS_HC_CatalogoUnidadServicio>();
                SS_HC_CatalogoUnidadServicio obj = new SS_HC_CatalogoUnidadServicio();
                obj.IdUnidadServicio = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                obj.Accion = "LISTARPAG";
                Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(obj, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var tctcodigo = X.GetCmp<TextField>("txtCodigoUnidadServicioPadre");
                        tctcodigo.SetValue(result.CodigoUnidadServicio);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_UnidadServicio(SS_HC_CatalogoUnidadServicio objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_UnidadServicio - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTCATUNIDADSERVICIO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcCategoriaUnidadServicio.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        public System.Web.Mvc.ActionResult AsignarTipoAtencionRegistro(String MODO, int agente)
        {
            Log.Information("GestionController - AsignarTipoAtencionRegistro - Entrar");
            var Listar = new List<SS_HC_CatalogoUnidadServicio>();
            SS_HC_CatalogoUnidadServicio objAgente = new SS_HC_CatalogoUnidadServicio();
            if (agente != null)
            {
                objAgente.Accion = "LISTAR";
                objAgente.IdUnidadServicio = agente;

                Listar = SvcCategoriaUnidadServicio.listarCatUnidadServicio(objAgente, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_CatalogoUnidadServicio objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAgente.Accion = "NUEVO";
            }
            Session["DataSysAutorizacionesDelete"] = null;
            return crearWindowRegistro("Maestros/CategoriaUnidadServicio/AsignarTipoAtencionRegistro", objAgente, "");
        }

        public System.Web.Mvc.ActionResult getGrillaListaAtencion(string agente, string tipoagente, string codagente)
        {
            Log.Information("GestionController - getGrillaListaAtencion - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SS_HC_CatalogoUnidadServicio_TipoAtencion>();
            var LocalEnty = new SS_HC_CatalogoUnidadServicio_TipoAtencion();
            LocalEnty.IdUnidadServicio = Convert.ToInt32(getValorFiltroInt(agente));
            LocalEnty.Accion = "LISTAR";
            Listar = SvcCatUnidServAtencion.listarSysSeguridadAutorizaciones(LocalEnty, 0, 0);
            foreach (var objData in Listar)
            {
            }               
            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult add_DataDeleteAtencion(String MODO, string tipAten, string unidServ)
        {
            Log.Information("GestionController - add_DataDeleteAtencion - Entrar");

            List<SS_HC_CatalogoUnidadServicio_TipoAtencion> dataDelete = null;
            if (Session["DataSysAutorizacionesDelete"] != null)
            {
                dataDelete = (List<SS_HC_CatalogoUnidadServicio_TipoAtencion>)Session["DataSysAutorizacionesDelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_CatalogoUnidadServicio_TipoAtencion>();
            }
            SS_HC_CatalogoUnidadServicio_TipoAtencion objDelete = new SS_HC_CatalogoUnidadServicio_TipoAtencion();
            objDelete.IdTipoAtencion = Convert.ToInt32(getValorFiltroInt(tipAten));
            objDelete.IdUnidadServicio = Convert.ToInt32(getValorFiltroInt(unidServ));
            objDelete.Accion = "DELETE";
            dataDelete.Add(objDelete);
            Session["DataSysAutorizacionesDelete"] = dataDelete;
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_AsigAtencion(SS_HC_CatalogoUnidadServicio objSelecc, String MODO,String idWindow, String data, String codagente, String idAgente)
        {
            Log.Information("GestionController - save_AsigAtencion - Entrar");

            int idResultado = 1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.Accion = "INSERT";
                    accion = "registró";                    
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.Accion = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.Accion = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                List<SS_HC_CatalogoUnidadServicio_TipoAtencion> dataDelete = null;
                if (Session["DataSysAutorizacionesDelete"] != null)
                {
                    dataDelete = (List<SS_HC_CatalogoUnidadServicio_TipoAtencion>)Session["DataSysAutorizacionesDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.Accion != null)
                        {
                            if (objDel.Accion.Trim().Length > 0)
                            {
                                idResultado = SvcCatUnidServAtencion.setMantenimiento(objDel);
                            }
                        }
                    }
                }
                List<SS_HC_CatalogoUnidadServicio_TipoAtencion> dataSave;
                if (data != null)
                {
                    dataSave = (List<SS_HC_CatalogoUnidadServicio_TipoAtencion>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_CatalogoUnidadServicio_TipoAtencion>));

                    foreach (var objSave in dataSave)
                    {
                        objSave.Accion = "INSERT";
                        objSave.IdUnidadServicio = Convert.ToInt32(idAgente);
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcCatUnidServAtencion.setMantenimiento(objSave);
                    }
                }
                if (idResultado > 0)
                {
                    message = "Se actualizaron los registros satisfactoriamente.";                    
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guardar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                }
                Session["DataSysAutorizacionesDelete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }
        /*******************FIN*******************/
        /*************************MAESTRO UNIDAD SERVICIO*************************/
        public System.Web.Mvc.ActionResult CCEP5030_View()
        {
            Log.Information("GestionController - CCEP5030_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/UnidadServicio/CCEP5030_View");
        }
        public System.Web.Mvc.ActionResult getGrillaUnidadSer(int start, int limit, string descripcion, string codigoPadre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUnidadSer - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_UnidadServicio>();

                var LocalEnty = new SS_HC_UnidadServicio();

                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Codigo = getValorFiltroStr(codigoPadre);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcUnidadServicio.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcUnidadServicio.listarUnidadServicio(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getSeleccionEstablecimiento(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionEstablecimiento - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdEstablecimientoSalud");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfEstablecimiento");
            txt.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorEstablecimiento(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorEstablecimiento - Entrar");

            CM_CO_Establecimiento obj = new CM_CO_Establecimiento();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorEstablecimiento", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionPadreUnidadServ(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreUnidadServ - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdUnidadServicio");
            nf.SetValue(id);
            var txt = X.GetCmp<TextField>("tfUnidServ");
            txt.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorUnidadServ(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorUnidadServ - Entrar");

            SS_HC_UnidadServicio obj = new SS_HC_UnidadServicio();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorUnidadServ", obj, "");
        }
        public System.Web.Mvc.ActionResult UnidadServiciosRegistro(String MODO, String establecimiento, String uniserv)
        {
            Log.Information("GestionController - UnidadServiciosRegistro - Entrar");

            var Listar = new List<SS_HC_UnidadServicio>();

            SS_HC_UnidadServicio objFiltro = new SS_HC_UnidadServicio();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdUnidadServicio = Convert.ToInt32(getValorFiltroInt(uniserv));
                objFiltro.IdEstablecimientoSalud = Convert.ToInt32(getValorFiltroInt(establecimiento));
                Listar = SvcUnidadServicio.listarUnidadServicio(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_UnidadServicio objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/UnidadServicio/UnidadServiciosRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult postWindowUnidadServ(String id, String id2, String id3)
        {
            Log.Information("GestionController - postWindowUnidadServ - Entrar");

            try
            {
                var Listar = new List<CM_CO_Establecimiento>();
                CM_CO_Establecimiento obj = new CM_CO_Establecimiento();

                obj.IdEstablecimiento = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                obj.Accion = "LISTARPAG";
                Listar = SvcEstablecimiento.listarEstablecimiento(obj, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var tfEst = X.GetCmp<TextField>("tfEstablecimiento");
                        tfEst.SetValue(result.Nombre);
                    }
                }

                var Listar2 = new List<SS_HC_CatalogoUnidadServicio>();
                SS_HC_CatalogoUnidadServicio obj2 = new SS_HC_CatalogoUnidadServicio();
                
                obj2.IdUnidadServicio = (getValorFiltroInt(id2) != null ? Convert.ToInt32(getValorFiltroInt(id2)) : 0);
                obj2.Accion = "LISTARPAG";
                Listar2 = SvcCategoriaUnidadServicio.listarCatUnidadServicio(obj2, 0, 10);
                if (Listar2.Count == 1)
                {
                    foreach (var result in Listar2)
                    {
                        var tfUnidSer = X.GetCmp<TextField>("tfUnidServ");
                        tfUnidSer.SetValue(result.Descripcion);
                    }
                }

                var Listar3 = new List<SS_GE_Servicio>();
                SS_GE_Servicio obj3 = new SS_GE_Servicio();

                obj3.IdServicio = (getValorFiltroInt(id3) != null ? Convert.ToInt32(getValorFiltroInt(id3)) : 0);
                obj3.Accion = "LISTARPAG";
                Listar3 = SvcServicios.listarServicio(obj3, 0, 10);
                if (Listar3.Count == 1)
                {
                    foreach (var result in Listar3)
                    {
                        var tfSer = X.GetCmp<TextField>("tfServicio");
                        tfSer.SetValue(result.Descripcion);
                    }
                }
                
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);

                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_UnidadServ(SS_HC_UnidadServicio objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_UnidadServ - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTUNIDADSERVICIO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcUnidadServicio.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*******************FIN*******************/
        /*************************MAESTRO SERVICIOS*************************/
        public System.Web.Mvc.ActionResult CCEP5023_View()
        {
            Log.Information("GestionController - CCEP5023_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Servicios/CCEP5023_View");
        }
        public System.Web.Mvc.ActionResult getGrillaServicios(int start, int limit, string descripcion, string codigoPadre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaServicios - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_GE_Servicio>();

                var LocalEnty = new SS_GE_Servicio();

                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.IdServicio = (getValorFiltroInt(codigoPadre) != null ? Convert.ToInt32(getValorFiltroInt(codigoPadre)) : 0);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcServicios.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {

                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcServicios.listarServicio(LocalEnty, inicio, final);

                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult getSeleccionPadreServicio(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreServicio - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdUnidadServicio");
            nf.SetValue(id);
            var nf2 = X.GetCmp<NumberField>("IdServicio");
            nf2.SetValue(id);
            var txt = X.GetCmp<TextField>("tfServicio");
            txt.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionPadreServicioDos(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionPadreServicioDos - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf2 = X.GetCmp<NumberField>("IdServicio");
            nf2.SetValue(id);
            var txt = X.GetCmp<TextField>("tfServicio");
            txt.SetValue(descripcion);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorServicio(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorServicio - Entrar");

            SS_GE_Servicio obj = new SS_GE_Servicio();
            obj.UsuarioCreacion = accionListado; //AUXILIAR
            obj.Accion = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorServicios", obj, "");
        }
        public System.Web.Mvc.ActionResult ServiciosRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - ServiciosRegistro - Entrar");

            var Listar = new List<SS_GE_Servicio>();

            SS_GE_Servicio objFiltro = new SS_GE_Servicio();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdServicio = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcServicios.listarServicio(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_GE_Servicio objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Servicios/ServiciosRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult postWindowServicio(String id)
        {
            Log.Information("GestionController - postWindowServicio - Entrar");

            SS_GE_Servicio objFiltro = new SS_GE_Servicio();
            var Listar = new List<SS_GE_Servicio>();

            setPropiedadesFormulario(true);
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_Servicios(SS_GE_Servicio objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Servicios - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTSERVICIO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcServicios.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*******************FIN*******************/


        /***********************MAESTRO PACIENTE***********************/
        public System.Web.Mvc.ActionResult CCEP5009_View()
        {
            Log.Information("GestionController - CCEP5009_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Paciente/CCEP5009_View");
        }
        public System.Web.Mvc.ActionResult getGrillaPaciente(int start, int limit,
            string codigohc, string codigohcanterior, string paciente, string situacion,
           string nombrecompleto, string documento, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaPaciente - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_PERSONAPACIENTE>();
                var LocalEnty = new VW_PERSONAPACIENTE();
                LocalEnty.AFE = getValorFiltroStr(codigohc);
                LocalEnty.USUARIO = getValorFiltroStr(codigohcanterior);
                LocalEnty.CodigoCargo = (getValorFiltroInt(paciente) != null ? Convert.ToInt32(getValorFiltroInt(paciente)) : 0);
                LocalEnty.TipoMedico = (getValorFiltroInt(situacion) != null ? Convert.ToInt32(getValorFiltroInt(situacion)) : 0);
                LocalEnty.NombreCompleto = getValorFiltroStr(nombrecompleto);
                LocalEnty.Documento = getValorFiltroStr(documento);
                LocalEnty.Estado = getValorFiltroStr(estado);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARNUEVOPAGDOS";
                int cantElementos = SvcVw_Personapaciente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARNUEVOPAGDOS";
                    Listar = SvcVw_Personapaciente.listarVwPersonapaciente(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult PacienteRegistro(String MODO, int idPersona)
        {
            Log.Information("GestionController - PacienteRegistro - Entrar");

            var Listar = new List<VW_PERSONAPACIENTE>();

            VW_PERSONAPACIENTE objPersona = new VW_PERSONAPACIENTE();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objPersona.ACCION = "LISTAR";
                objPersona.Persona = idPersona;


                Listar = SvcVw_Personapaciente.listarVwPersonapaciente(objPersona, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (VW_PERSONAPACIENTE objEntity in Listar)
                    {
                        objPersona = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objPersona.ACCION = "NUEVO";
            }
            objPersona.ACCION = MODO;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);

            return crearWindowRegistro("Maestros/Paciente/PacienteRegistro", objPersona, "");

        }

        public System.Web.Mvc.ActionResult save_Paciente(SS_GE_Paciente objPaciente, PERSONAMAST objPersona, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Paciente - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objPaciente != null && objPersona != null)
            {

                objPaciente.Accion = MODO;
                objPersona.ACCION = MODO;

                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objPaciente, UTILES_MENSAJES.FORM_MSPACIENTE);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objPaciente.Accion = "INSERT";
                            objPersona.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objPaciente.Accion = "UPDATE";
                            objPersona.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objPaciente.Accion = "DELETE";
                            objPersona.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }

                        objPersona.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        objPaciente.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcPaciente.setMantenimiento(objPaciente, objPersona);

                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  paciente (" + objPersona.Nombres + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }

            objPaciente.Accion = "INFO";

            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        /***************************/
        public System.Web.Mvc.ActionResult PreexistenciaRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - PreexistenciaRegistro - Entrar");

            var Listar = new List<SS_AD_OrdenAtencionPreexistencia>();

            SS_AD_OrdenAtencionPreexistencia objFiltro = new SS_AD_OrdenAtencionPreexistencia();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER" || MODO == "EXISTENCIA")
            {
                objFiltro.accion = "LISTADO";
                objFiltro.IdDiagnostico = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(objFiltro, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_AD_OrdenAtencionPreexistencia objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.accion = "NUEVO";
            }
            objFiltro.accion = MODO;
            return crearWindowRegistro("Maestros/Paciente/PreexistenciaRegistro", objFiltro, "");
        }
        /*******************BOTÓN PREEXISTENCIA******************/
        public System.Web.Mvc.ActionResult getGrillaPreexistencia(string codigo, string tipoBuscar, int start, int limit)
        {
            Log.Information("GestionController - getGrillaPreexistencia - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<SS_AD_OrdenAtencionPreexistencia>();

            var LocalEnty = new SS_AD_OrdenAtencionPreexistencia();
            LocalEnty.IdDiagnostico = (getValorFiltroInt(codigo) != null ? Convert.ToInt32(getValorFiltroInt(codigo)) : 0);

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;

            LocalEnty.accion = "LISTARPAG";
            int cantElementos = SvcOrdAtenPreexistencia.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.accion = "LISTARPAG";
                Listar = SvcOrdAtenPreexistencia.listarOrdAtePreexistencia(LocalEnty, ini, fin);
            }
            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult postWindowPreexistencia(String id)
        {
            Log.Information("GestionController - postWindowPreexistencia - Entrar");

            VW_PERSONAPACIENTE objAg = new VW_PERSONAPACIENTE();
            var Listar1 = new List<VW_PERSONAPACIENTE>();

            var field11 = X.GetCmp<TextField>("txtNombre");
            if (field11 != null)
            {
                objAg.ACCION = "LISTAR";
                objAg.Persona = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
                Listar1 = SvcVw_Personapaciente.listarVwPersonapaciente(objAg, 0, 0);
                if (Listar1.Count == 1)
                {
                    foreach (VW_PERSONAPACIENTE objEntity1 in Listar1)
                    {
                        objAg = objEntity1;
                        field11.SetValue(objAg.NombreCompleto);
                    }
                }
            }
            return this.Direct();
        }
        /***********************FIN********************/

        /***********************MAESTRO ASEGURADORA***********************/
        public System.Web.Mvc.ActionResult CCEP5012_View()
        {
            Log.Information("GestionController - CCEP5012_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/EmpresaSeguro/CCEP5012_View");
        }
        public System.Web.Mvc.ActionResult getGrillaEmpresaSeguro(int start, int limit,
            string codigo, string tipoempresa, string tiposeguro, string descripcion,
           string documentofiscal, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaEmpresaSeguro - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_SS_GE_EMPRESASEGURO>();
                var LocalEnty = new VW_SS_GE_EMPRESASEGURO();
                LocalEnty.CODIGO = getValorFiltroStr(codigo);
                LocalEnty.TIPOEMPRESA = getValorFiltroStr(tipoempresa);
                LocalEnty.TIPOSEGURO = (getValorFiltroInt(tiposeguro) != null ? Convert.ToInt32(getValorFiltroInt(tiposeguro)) : 0);
                LocalEnty.DESCRIPCION = getValorFiltroStr(descripcion);
                LocalEnty.DOCUMENTOFISCAL = getValorFiltroStr(documentofiscal);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcVW_EMPRESASEGURO.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcVW_EMPRESASEGURO.listarEmpresaSeguro(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /***********************FIN********************/

        /***********************MAESTRO ESPECIALIDAD MÉDICO***********************/
        public System.Web.Mvc.ActionResult CCEP5015_View()
        {
            Log.Information("GestionController - CCEP5015_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/EspecialidadMedico/CCEP5015_View");
        }
        public System.Web.Mvc.ActionResult getGrillaEspecialidadMedico(int start, int limit,
            string cmp, string nombrecompleto, string nroregespecialidad, string idespecialidad,
           string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaEspecialidadMedico - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_SS_GE_ESPECIALIDADMEDICO>();
                var LocalEnty = new VW_SS_GE_ESPECIALIDADMEDICO();
                LocalEnty.CMP = getValorFiltroStr(cmp);
                LocalEnty.NOMBRECOMPLETO = getValorFiltroStr(nombrecompleto);
                LocalEnty.NUMEROREGISTROESPECIALIDAD = getValorFiltroStr(nroregespecialidad);
                LocalEnty.IDESPECIALIDAD = (getValorFiltroInt(idespecialidad) != null ? Convert.ToInt32(getValorFiltroInt(idespecialidad)) : 0);
                LocalEnty.ESTADO = getValorFiltroStr(estado);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcVWEspecialidadMedico.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG2";
                    Listar = SvcVWEspecialidadMedico.listarEspecialidadMedico(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaLugar(int start, int limit,
            string pais, string depa, string prov, string dist, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaLugar - Entrar");
            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<MA_MiscelaneosDetalle>();

                MA_MiscelaneosDetalle LocalEnty = new MA_MiscelaneosDetalle();
                LocalEnty.ValorCodigo1 = (getValorFiltroStr(pais) != null ? (getValorFiltroStr(pais)) : "");
                LocalEnty.ValorCodigo2 = (getValorFiltroStr(depa) != null ? (getValorFiltroStr(depa)) : "");
                LocalEnty.ValorCodigo3 = (getValorFiltroStr(prov) != null ? (getValorFiltroStr(prov)) : "");
                LocalEnty.AplicacionCodigo = "WA";
                LocalEnty.Compania = "999999";
                LocalEnty.CodigoTabla = "TODOLUGAR";
                //LocalEnty.Nivel = (getValorFiltroInt(tipoNivel) != null ? Convert.ToInt32(getValorFiltroInt(tipoNivel)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.ACCION = "COMBOSGENERICOS";
                int cantElementos = SvcMiscelaneos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "COMBOSGENERICO";
                    Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult EspecialidadMedicoRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - EspecialidadMedicoRegistro - Entrar");

            var Listar = new List<PERSONAMAST>();

            PERSONAMAST objFiltro = new PERSONAMAST();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.ACCION = "LISTAR";
                objFiltro.Persona = Convert.ToInt32(getValorFiltroInt(tipo));

                Listar = SvcPersonaMast.listarPersonaMast(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (PERSONAMAST objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.ACCION = "NUEVO";
            }
            objFiltro.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/EspecialidadMedico/EspecialidadMedicoRegistro", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult AdicionalRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - AdicionalRegistro - Entrar");

            var Listar = new List<PERSONAMAST>();

            PERSONAMAST objFiltro = new PERSONAMAST();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER" || MODO == "MODIFICARDOS" )
            {
                objFiltro.ACCION = "LISTAR";
                objFiltro.Persona = Convert.ToInt32(getValorFiltroInt(tipo));

                Listar = SvcPersonaMast.listarPersonaMast(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (PERSONAMAST objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.ACCION = "NUEVO";
            }
            objFiltro.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/EspecialidadMedico/AdicionalRegistro", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult postWindowMedico(String idPais, String idDepa, String idProv, String idDist)
        {
            Log.Information("GestionController - postWindowMedico - Entrar");

            try
            {
                var Listar = new List<MA_MiscelaneosDetalle>();
                MA_MiscelaneosDetalle obj = new MA_MiscelaneosDetalle();
                obj.ValorCodigo1 = (getValorFiltroStr(idPais) != null ? (getValorFiltroStr(idPais)) : "");
                obj.ValorCodigo2 = (getValorFiltroStr(idDepa) != null ? (getValorFiltroStr(idDepa)) : "");
                obj.ValorCodigo3 = (getValorFiltroStr(idProv) != null ? (getValorFiltroStr(idProv)) : "");
                obj.ValorCodigo4 = (getValorFiltroStr(idDist) != null ? (getValorFiltroStr(idDist)) : "");
                obj.AplicacionCodigo = "WA";
                obj.Compania = "999999";
                obj.CodigoTabla = "TODOLUGAR";
                obj.ACCION = "COMBOSGENERICO";
                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(obj, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var txtpais = X.GetCmp<TextField>("tfPais");
                        txtpais.SetValue(result.DescripcionLocal);
                        var txtdepa = X.GetCmp<TextField>("tfDepartamento");
                        txtdepa.SetValue(result.DescripcionExtranjera);
                        var txtprov = X.GetCmp<TextField>("tfProvincia");
                        txtprov.SetValue(result.ValorCodigo6);
                        var txtdist = X.GetCmp<TextField>("tfDistrito");
                        txtdist.SetValue(result.ValorCodigo5);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);

                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorLugar(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorLugar - Entrar");
            MA_MiscelaneosDetalle obj = new MA_MiscelaneosDetalle();
            obj.UltimoUsuario = accionListado; //AUXILIAR
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
                //  obj.Modulo = (string)Session["MODULO_DEF"];
            }
            return crearWindowRegistro("SeleccionadorLugar", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionadorLugar(String MODO, String idPais, String pais, String idDepa, String depa, String idProv, String prov, String idDist, String dist, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorLugar - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txtidpais = X.GetCmp<TextField>("Pais");
            txtidpais.SetValue(idPais);
            var txtpais = X.GetCmp<TextField>("tfPais");
            txtpais.SetValue(pais);
            var txtiddepa = X.GetCmp<TextField>("Departamento");
            txtiddepa.SetValue(idDepa);
            var txtdepa = X.GetCmp<TextField>("tfDepartamento");
            txtdepa.SetValue(depa);
            var txtidprov = X.GetCmp<TextField>("Provincia");
            txtidprov.SetValue(idProv);
            var txtprov = X.GetCmp<TextField>("tfProvincia");
            txtprov.SetValue(prov);
            var txtiddist = X.GetCmp<TextField>("CodigoPostal");
            txtiddist.SetValue(idDist);
            var txtdist = X.GetCmp<TextField>("tfDistrito");
            txtdist.SetValue(dist);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getGrillaPersonas(int start, int limit, int persona, string nombre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaPersonas - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<PERSONAMAST>();

                var LocalEnty = new PERSONAMAST();
                //LocalEnty.Persona = persona;
                LocalEnty.NombreCompleto = nombre;
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcPersonaMast.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcPersonaMast.listarPersonaMast(LocalEnty, ini, fin);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult seleccionadorPersonas(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorPersonas - Entrar");
            PERSONAMAST obj = new PERSONAMAST();
            obj.UltimoUsuario = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorPersonas", obj, "");
        }
        public System.Web.Mvc.ActionResult getSeleccionadorPersonasGrupo(String MODO, String persona, String pat, String mat,
            String nom, String tdi, String docide, String docfis, String tipmed, String pais, String depa, String prov,
            String dist, String dire, String orig, String sexo, String fecnac, String estciv, String tel, String cel,
            String tipdoc, String docs, String nomcom, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorPersonasGrupo - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txtpersona = X.GetCmp<TextField>("tfNomComp");
            txtpersona.SetValue(nomcom);

            var txtpersonaId = X.GetCmp<TextField>("tfIdComp");
            txtpersonaId.SetValue(persona);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult getSeleccionadorPersonas(String MODO, String persona, String pat, String mat,
            String nom, String tdi, String docide, String docfis, String tipmed, String pais, String depa, String prov,
            String dist, String dire, String orig, String sexo, String fecnac, String estciv, String tel, String cel,
            String tipdoc, String docs, String nomcom, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorPersonas - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var txtpersona = X.GetCmp<TextField>("Persona");
            txtpersona.SetValue(persona);
            if (pat != null)
            {
                var txtpat = X.GetCmp<TextField>("ApellidoPaterno");
                txtpat.SetValue(pat);
            }
            if (mat != "null")
            {
                var txtmat = X.GetCmp<TextField>("ApellidoMaterno");
                txtmat.SetValue(mat);
            }
            if (nom != null)
            {
                var txtnom = X.GetCmp<TextField>("Nombres");
                txtnom.SetValue(nom);
            }
            if (tdi != "null")
            {
                var txttdi = X.GetCmp<TextField>("TipoDocumentoIdentidad");
                txttdi.SetValue(tdi);
            }
            if (tipdoc != "null")
            {
                var txttipdoc = X.GetCmp<TextField>("TipoDocumento");
                txttipdoc.SetValue(tipdoc);
            }
            if (docs != "null")
            {
                var txtdocs = X.GetCmp<TextField>("Documento");
                txtdocs.SetValue(docs);
            }
            if (docide != "null")
            {
                var txtdi = X.GetCmp<TextField>("DocumentoIdentidad");
                txtdi.SetValue(docide);
            }
            if (docfis != "null")
            {
                var txtdf = X.GetCmp<TextField>("DocumentoFiscal");
                txtdf.SetValue(docfis);
            }
            if (tipmed != "null")
            {
                var txttipmed = X.GetCmp<TextField>("TipoMedico");
                txttipmed.SetValue(tipmed);
            }
            if (pais != "null")
            {
                var txtidpais = X.GetCmp<TextField>("Pais");
                txtidpais.SetValue(pais);
            }
            if (depa != "null")
            {
                var txtiddepa = X.GetCmp<TextField>("Departamento");
                txtiddepa.SetValue(depa);
            }
            if (prov != "null")
            {
                var txtidprov = X.GetCmp<TextField>("Provincia");
                txtidprov.SetValue(prov);
            }
            if (dist != "null")
            {
                var txtiddist = X.GetCmp<TextField>("CodigoPostal");
                txtiddist.SetValue(dist);
            }
            if (dire != "null")
            {
                var txtdire = X.GetCmp<TextField>("Direccion");
                txtdire.SetValue(dire);
            }
            if (orig != "null")
            {
                var txtorig = X.GetCmp<TextField>("Origen");
                txtorig.SetValue(orig);
            }
            if (sexo != "null")
            {
                var txtsexo = X.GetCmp<TextField>("Sexo");
                txtsexo.SetValue(sexo);
            }
            var txtfecnac = X.GetCmp<DateField>("FechaNacimiento");
            txtfecnac.SetValue(getValorFiltroDate(fecnac));
            if (estciv != "null")
            {
                var txtestciv = X.GetCmp<TextField>("EstadoCivil");
                txtestciv.SetValue(estciv);
            }
            if (tel != "null")
            {
                var txttel = X.GetCmp<TextField>("Telefono");
                txttel.SetValue(tel);
            }
            if (cel != "null")
            {
                var txtcel = X.GetCmp<TextField>("Celular");
                txtcel.SetValue(cel);
            }
            try
            {
                var Listar = new List<MA_MiscelaneosDetalle>();
                MA_MiscelaneosDetalle objs = new MA_MiscelaneosDetalle();
                objs.ValorCodigo1 = (getValorFiltroStr(pais) != null ? (getValorFiltroStr(pais)) : "");
                objs.ValorCodigo2 = (getValorFiltroStr(depa) != null ? (getValorFiltroStr(depa)) : "");
                objs.ValorCodigo3 = (getValorFiltroStr(prov) != null ? (getValorFiltroStr(prov)) : "");
                objs.ValorCodigo4 = (getValorFiltroStr(dist) != null ? (getValorFiltroStr(dist)) : "");
                objs.AplicacionCodigo = "WA";
                objs.Compania = "999999";
                objs.CodigoTabla = "TODOLUGAR";
                objs.ACCION = "COMBOSGENERICO";
                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(objs, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var txtpais = X.GetCmp<TextField>("tfPais");
                        txtpais.SetValue(result.DescripcionLocal);
                        var txtdepa = X.GetCmp<TextField>("tfDepartamento");
                        txtdepa.SetValue(result.DescripcionExtranjera);
                        var txtprov = X.GetCmp<TextField>("tfProvincia");
                        txtprov.SetValue(result.ValorCodigo6);
                        var txtdist = X.GetCmp<TextField>("tfDistrito");
                        txtdist.SetValue(result.ValorCodigo5);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_Medico(PERSONAMAST objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Medico - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTMEDICO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "MODIFICARDOS")
                        {
                            objFiltro.ACCION = "MODIFICARDOS";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        //objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.idpersona_ok = 0;
                        idResultado = SvcPersonaMast.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }
        /***********************FIN********************/
        /***********************MAESTRO UNIDADES DE MEDIDA***********************/
        public System.Web.Mvc.ActionResult CCEP5016_View()
        {
            Log.Information("GestionController - CCEP5016_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Unidades/CCEP5016_View");
        }
        public System.Web.Mvc.ActionResult getGrillaUnidades(int start, int limit,
            string unidad, string descripcion, string tipo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUnidades - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<UnidadesMast>();
                var LocalEnty = new UnidadesMast();
                LocalEnty.UnidadCodigo = getValorFiltroStr(unidad);
                LocalEnty.DescripcionCorta = getValorFiltroStr(descripcion);
                LocalEnty.UnidadTipo = getValorFiltroStr(tipo);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcUnidad.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcUnidad.listarUnidad(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /***********************FIN********************/
        /***********************TABLA MAESTRO O DATOS***********************/
        public System.Web.Mvc.ActionResult CCEP5017_View()
        {
            Log.Information("GestionController - CCEP5017_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/TablaDatos/CCEP5017_View");
        }
        public System.Web.Mvc.ActionResult getGrillaDatos(int start, int limit,
            string codigo, string nombre, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaDatos - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<CM_CO_TablaMaestro>();
                var LocalEnty = new CM_CO_TablaMaestro();
                LocalEnty.CodigoTabla = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(nombre);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcTablaDatos.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcTablaDatos.listarTablaDatos(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getGrillaDetalleMaestro(string codigo, string tipoBuscar, int start, int limit)
        {
            Log.Information("GestionController - getGrillaDetalleMaestro - Entrar");
            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<CM_CO_TablaMaestroDetalle>();

            var LocalEnty = new CM_CO_TablaMaestroDetalle();
            LocalEnty.IdTablaMaestro = (getValorFiltroInt(codigo) != null ? Convert.ToInt32(getValorFiltroInt(codigo)) : 0);

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;

            LocalEnty.Accion = "LISTARPAG";
            int cantElementos = SvcMaestroDetalle.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcMaestroDetalle.listarMaestroDetalle(LocalEnty, ini, fin);
            }
            return this.Store(Listar, cantElementos);
        }
        public System.Web.Mvc.ActionResult DatosRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - DatosRegistro - Entrar");

            var Listar = new List<CM_CO_TablaMaestro>();

            CM_CO_TablaMaestro objFiltro = new CM_CO_TablaMaestro();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdTablaMaestro = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcTablaDatos.listarTablaDatos(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (CM_CO_TablaMaestro objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            return crearWindowRegistro("Maestros/TablaDatos/DatosRegistro", objFiltro, "");
        }

        public System.Web.Mvc.ActionResult postWindowDetalle(String id)
        {
            Log.Information("GestionController - postWindowDetalle - Entrar");

            CM_CO_TablaMaestro objFormato = new CM_CO_TablaMaestro();
            var Listar = new List<CM_CO_TablaMaestro>();

            //  var field = X.GetCmp<TextField>("txtPadre");
            //   if (field != null)
            //    {
            objFormato.Accion = "LISTAR";
            objFormato.IdTablaMaestro = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
            Listar = SvcTablaDatos.listarTablaDatos(objFormato, 0, 0);
            if (Listar.Count == 1)
            {
                foreach (CM_CO_TablaMaestro objEntity in Listar)
                {
                    objFormato = objEntity;
                    //   field.SetValue(objFormato.Descripcion);
                }
                //  }
            }
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult save_Detalle(CM_CO_TablaMaestro objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Detalle - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.Accion = MODO;
                msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTDATO);
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    if (MODO == "NUEVO")
                    {
                        objFiltro.Accion = "INSERT";
                        accion = "registró";
                    }
                    else if (MODO == "UPDATE")
                    {
                        objFiltro.Accion = "UPDATE";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objFiltro.Accion = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encontró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    try
                    {
                        //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                    }
                    catch (Exception e)
                    {
                        Log.Error(e, e.Message);
                        X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                    }
                    /////registro
                    objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                    idResultado = SvcTablaDatos.setMantenimiento(objFiltro);
                    //////////////////////FINAL
                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " satisfactoriamente.";
                    }
                    else
                    {
                        tipoMsg = "ERROR";
                        message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                        tituloMsg = "Error";
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /***********************FIN********************/
        /***********************MAESTRO PERSONA***********************/
        public System.Web.Mvc.ActionResult CCEP5025_View()
        {
            Log.Information("GestionController - CCEP5025_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Persona/CCEP5025_View");
        }
        public System.Web.Mvc.ActionResult getGrillaPersona(int start, int limit,
            string codigohc, string codigohcanterior, string paciente, string situacion,
           string nombrecompleto, string documento, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaPersona - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<PERSONAMAST>();
                var LocalEnty = new PERSONAMAST();
                //LocalEnty.AFE = getValorFiltroStr(codigohc);
                //LocalEnty.USUARIO = getValorFiltroStr(codigohcanterior);
                LocalEnty.Persona = (getValorFiltroInt(paciente) != null ? Convert.ToInt32(getValorFiltroInt(paciente)) : 0);
                LocalEnty.TipoMedico = (getValorFiltroInt(situacion) != null ? Convert.ToInt32(getValorFiltroInt(situacion)) : 0);
                LocalEnty.NombreCompleto = getValorFiltroStr(nombrecompleto);
                LocalEnty.Documento = getValorFiltroStr(documento);
                LocalEnty.Estado = getValorFiltroStr(estado);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }
                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcPersonaMast.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcPersonaMast.listarPersonaMast(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult PersonaRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - PersonaRegistro - Entrar");

            var Listar = new List<PERSONAMAST>();

            PERSONAMAST objFiltro = new PERSONAMAST();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.ACCION = "LISTAR";
                objFiltro.Persona = Convert.ToInt32(getValorFiltroInt(tipo));

                Listar = SvcPersonaMast.listarPersonaMast(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (PERSONAMAST objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.ACCION = "NUEVO";
            }
            objFiltro.ACCION = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Persona/PersonaRegistro", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult postWindowPersona(String id, String idPais, String idDepa, String idProv, String idDist)
        {
            Log.Information("GestionController - postWindowPersona - Entrar");

            //PERSONAMAST objFiltro = new PERSONAMAST();
            //var Listar = new List<PERSONAMAST>();
            //objFiltro.ACCION = "LISTAR";
            //objFiltro.Persona = (getValorFiltroInt(id) != null ? Convert.ToInt32(getValorFiltroInt(id)) : 0);
            //Listar = SvcPersonaMast.listarPersonaMast(objFiltro, 0, 0);
            //if (Listar.Count == 1)
            //{
            //    foreach (PERSONAMAST objEntity in Listar)
            //    {
            //        objFiltro = objEntity;
            //    }
            //}

            try
            {
                var Listar = new List<MA_MiscelaneosDetalle>();
                MA_MiscelaneosDetalle obj = new MA_MiscelaneosDetalle();
                obj.ValorCodigo1 = (getValorFiltroStr(idPais) != null ? (getValorFiltroStr(idPais)) : "");
                obj.ValorCodigo2 = (getValorFiltroStr(idDepa) != null ? (getValorFiltroStr(idDepa)) : "");
                obj.ValorCodigo3 = (getValorFiltroStr(idProv) != null ? (getValorFiltroStr(idProv)) : "");
                obj.ValorCodigo4 = (getValorFiltroStr(idDist) != null ? (getValorFiltroStr(idDist)) : "");
                obj.AplicacionCodigo = "WA";
                obj.Compania = "999999";
                obj.CodigoTabla = "TODOLUGAR";
                obj.ACCION = "COMBOSGENERICO";
                Listar = SvcMiscelaneos.listarMA_MiscelaneosDetalle(obj, 0, 10);
                if (Listar.Count == 1)
                {
                    foreach (var result in Listar)
                    {
                        var txtpais = X.GetCmp<TextField>("tfPais");
                        txtpais.SetValue(result.DescripcionLocal);
                        var txtdepa = X.GetCmp<TextField>("tfDepartamento");
                        txtdepa.SetValue(result.DescripcionExtranjera);
                        var txtprov = X.GetCmp<TextField>("tfProvincia");
                        txtprov.SetValue(result.ValorCodigo6);
                        var txtdist = X.GetCmp<TextField>("tfDistrito");
                        txtdist.SetValue(result.ValorCodigo5);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_Persona(PERSONAMAST objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Persona - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                ////VALIDACIÓN
                objFiltro.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTPERSONA);
                }
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.SUNATUbigeo = ENTITY_GLOBAL.Instance.UnidadReplicacion;
                        //objFiltro.USUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcPersonaMast.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " la persona satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                //return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /*****************MAESTRO GRUPO FAMILIAR***********************/
        public System.Web.Mvc.ActionResult GrupoFamiliarRegistro(String MODO, int idPaciente)
        {
            Log.Information("GestionController - GrupoFamiliarRegistro - Entrar");
            var Listar = new List<PERSONAMAST>();
            PERSONAMAST objFiltro = new PERSONAMAST();
            if (idPaciente != null)
            {
                objFiltro.ACCION = "LISTARGRUPOFAM";
                objFiltro.Persona = idPaciente;
                objFiltro.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                Listar = SvcPersonaMast.listarPersonaMast(objFiltro, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (PERSONAMAST objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.ACCION = "NUEVO";
            }
            Session["DataSysGrupoFamiliarDelete"] = null;
            return crearWindowRegistro("Maestros/Persona/GrupoFamiliarRegistro", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult getGrillaListaGrupoFam(string id, string codigo, string tipo)
        {
            Log.Information("GestionController - getGrillaListaGrupoFam - Entrar");

            try
            {
                var Listar = new List<PERSONAMAST>();
                var LocalEnty = new PERSONAMAST();
                LocalEnty.Persona = Convert.ToInt32(id);
                LocalEnty.ACCION = "LISTARGRUPOFAMILIAR";
                Listar = SvcPersonaMast.listarPersonaMast(LocalEnty, 0, 0);
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult add_DataDeleteGrupoFam(
        String MODO, Nullable<int> appEXT, Nullable<int> idHCE, Nullable<int> idPacHCE, string codigoEXT)
        {
            Log.Information("GestionController - add_DataDeleteGrupoFam - Entrar");
            List<PERSONAMAST> dataDelete = null;
            if (Session["DataGrupoFam_Delete"] != null)
            {
                dataDelete = (List<PERSONAMAST>)Session["DataGrupoFam_Delete"];
            }
            else
            {
                dataDelete = new List<PERSONAMAST>();
            }
            PERSONAMAST objDelete = new PERSONAMAST();
            objDelete.Persona = Convert.ToInt32(idHCE);
            objDelete.personanew = idPacHCE;
            objDelete.IdPersonaUnificado = appEXT;
            objDelete.IndicadorAutogenerado = Convert.ToInt32(codigoEXT);
            objDelete.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
            objDelete.ACCION = MODO;
            dataDelete.Add(objDelete);
            Session["DataGrupoFam_Delete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_GrupoFam(PERSONAMAST objSelecc, String MODO,
                String idWindow, String data)
        {
            Log.Information("GestionController - save_GrupoFam - Entrar");

            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<PERSONAMAST> dataSaveGeneral = new List<PERSONAMAST>();
                List<PERSONAMAST> dataSave = null;
                List<PERSONAMAST> dataDelete = null;
                if (Session["DataGrupoFam_Delete"] != null)
                {
                    dataDelete = (List<PERSONAMAST>)Session["DataGrupoFam_Delete"];
                }
                if (dataDelete != null)
                {
                    dataSaveGeneral.AddRange(dataDelete);
                }
                /////registro -save                                
                if (data != null)
                {
                    dataSave = (List<PERSONAMAST>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<PERSONAMAST>));
                    if (dataSave != null)
                    {
                        dataSaveGeneral.AddRange(dataSave);
                    }
                }
                if (dataSaveGeneral.Count > 0)
                {
                    idResultado = SvcPersonaMast.setMantenimiento(dataSaveGeneral);
                }
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se guardaron satisfactoriamente los cambios";
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                }
                Session["DataHomologacionSuc_Delete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }
        /***********************FIN********************/
        /*************************MAESTRO PARÁMETROS*************************/
        public System.Web.Mvc.ActionResult CCEP5026_View()
        {
            Log.Information("GestionController - CCEP5026_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ParametrosMast/CCEP5026_View");
        }
        public System.Web.Mvc.ActionResult getGrillaParametro(int start, int limit,
             string descripcion, string parametro, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaParametro - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<ParametrosMast>();

                var LocalEnty = new ParametrosMast();
                LocalEnty.DescripcionParametro = getValorFiltroStr(descripcion);
                LocalEnty.ParametroClave = getValorFiltroStr(parametro);
                // LocalEnty.Nivel = (getValorFiltroInt(tipoNivel) != null ? Convert.ToInt32(getValorFiltroInt(tipoNivel)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcParametro.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcParametro.listarParametro(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult ParametroRegistro(String MODO, String aplicacion, String compania, String parametro)
        {
            Log.Information("GestionController - ParametroRegistro - Entrar");
            var Listar = new List<ParametrosMast>();

            ParametrosMast objFiltro = new ParametrosMast();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.AplicacionCodigo = getValorFiltroStr(aplicacion);
                objFiltro.CompaniaCodigo = getValorFiltroStr(compania);
                objFiltro.ParametroClave = getValorFiltroStr(parametro);
                Listar = SvcParametro.listarParametro(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (ParametrosMast objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/ParametrosMast/ParametroRegistro", objFiltro, "");
        }
        public System.Web.Mvc.ActionResult postWindowParametro(String id)
        {
            Log.Information("GestionController - postWindowParametro - Entrar");

            ParametrosMast objFiltro = new ParametrosMast();
            var Listar = new List<ParametrosMast>();

            setPropiedadesFormulario(true);
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_Parametro(ParametrosMast objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Parametro - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTPARAMETRO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcParametro.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }
        /*************************FIN****************************/
        /*************************MAESTRO NICC*************************/
        public System.Web.Mvc.ActionResult CCEP5021_View()
        {
            Log.Information("GestionController - CCEP5021_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/nic/CCEP5021_View");
        }
             
        /**Maestro OPCIONES*/
        public System.Web.Mvc.ActionResult CCEP0011_View()
        {
            Log.Information("GestionController - CCEP0011_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            Session["OPCIONES_OPERACION"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Opciones/CCEP0011_View");
        }
        /**para el listado principal del mantenimiento*/
        public System.Web.Mvc.ActionResult getGrillaSG_Opcion(int start, int limit,
           string id, string nombre, string persona,
            string plataforma, string codigo, string tipo,
            string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSG_Opcion - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            var Listar = new List<SG_Opcion>();

            var LocalEnty = new SG_Opcion();

            LocalEnty.IdOpcion = Convert.ToInt32(getValorFiltroInt(id));
            LocalEnty.Nombre = getValorFiltroStr(nombre);
            LocalEnty.CodigoOpcion = getValorFiltroStr(codigo);
            LocalEnty.Estado = getValorFiltroInt(estado);
            if (estado == "-1")
            {
                LocalEnty.Estado = null;
            }

            int ini = (start == 0 ? start : start + 1);
            int fin = start + limit;
            //Si la busqueda proviene de filtros
            if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

            LocalEnty.Accion = "LISTARPAG";
            int cantElementos = SvcSG_Opcion.setMantenimiento(LocalEnty);
            if (cantElementos > 0)
            {
                LocalEnty.Accion = "LISTARPAG";
                Listar = SvcSG_Opcion.listarSG_Opcion(LocalEnty, ini, fin);
            }
            return this.Store(Listar, cantElementos);
        }

    public void cargarOpcionesNodos(SG_Opcion objNodo)
        {
            Log.Information("GestionController - cargarOpcionesNodos - Entrar");

            if (objNodo!=null)
        {
            List<SG_Opcion> ListaOpcionesCarga = null;
            if(Session["OPCIONES_OPERACION"] != null){
                ListaOpcionesCarga = (List<SG_Opcion>)Session["OPCIONES_OPERACION"];
            }
            else
            {
                ListaOpcionesCarga = new List<SG_Opcion>();
            }
            ListaOpcionesCarga.Add(objNodo);
            Session["OPCIONES_OPERACION"] = ListaOpcionesCarga;
            /**obtenemos los hijos de la opción actual**/
            SG_Opcion entidaLocal = new SG_Opcion();
            entidaLocal.IdOpcion = objNodo.IdOpcion;
            entidaLocal.Accion = "LISTARHIJOS";
            entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            List<SG_Opcion> serviceResuls = new List<SG_Opcion>();
            serviceResuls = SvcSG_Opcion.listarSG_Opcion(entidaLocal, 0, 0);
            if (serviceResuls.Count>0)
            {
                foreach (SG_Opcion nodoResult in serviceResuls)
                {
                    cargarOpcionesNodos(nodoResult);
                }
            }
        }
    }
    public System.Web.Mvc.ActionResult setOperacionNodoOpciones(
        string MODO,string node, string id)
        {
            Log.Information("GestionController - setOperacionNodoOpciones - Entrar");

            try
            {
                String mensaje = "";
                String accion = "";                
                int TipoPreven = 0;
                var entidaLocal = new SG_Opcion();
                entidaLocal.IdOpcion = Convert.ToInt32(getValorFiltroInt(id));
                if (MODO == "COPIAR")
                {
                    Session["OPCIONES_OPERACION"] = null;
                    entidaLocal.NivelOpcion = 1;
                    entidaLocal.IdOpcionPadre = null;
                    /**obtenemos la opción seleccionada**/
                    entidaLocal.Accion = "LISTARPORID";
                    entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    List<SG_Opcion> serviceResuls = new List<SG_Opcion>();
                    serviceResuls = SvcSG_Opcion.listarSG_Opcion(entidaLocal, 0, 0);
                    if (serviceResuls.Count > 0)
                    {
                        //CARGA EL ARBOL DE OPCIONES SELECCIONADO, RECURSIVAMENTE
                        cargarOpcionesNodos(serviceResuls[0]);
                    }
                    if (Session["OPCIONES_OPERACION"] != null)
                    {
                        List<SG_Opcion> ListaOpcionesCarga = (List<SG_Opcion>)Session["OPCIONES_OPERACION"];
                    }
                    accion = " copiados";
                }
                else if (MODO == "CORTAR")
                {
                    Session["OPCIONES_OPERACION"] = null;
                    ////////////////
                    accion = " cortados";
                }
                else if (MODO == "PEGAR")
                {
                    accion = " agregados";
                    if (Session["OPCIONES_OPERACION"] != null)
                    {
                        List<SG_Opcion> ListaOpcionesCarga = (List<SG_Opcion>)Session["OPCIONES_OPERACION"];
                        mensaje = ListaOpcionesCarga.Count + " elementos " + accion + ".";
                        int cont = 0;
                        foreach(SG_Opcion objPegar in ListaOpcionesCarga ){                                                        
                            objPegar.CodigoOpcion = "0";
                            if (cont==0)
                            {
                                objPegar.IdOpcionPadre = Convert.ToInt32(getValorFiltroInt(id)) * -1;
                            }
                            else
                            {
                                objPegar.IdOpcionPadre = objPegar.IdOpcionPadre * -1;//ARTIFICIO PARA CONSIDERAR ACTUALIZACIÓN
                            }
                            
                            objPegar.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objPegar.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            objPegar.Accion = "INSERT";
                            cont++;
                        }                        
                       
                        int idResultado = SvcSG_Opcion.setMantenimiento(ListaOpcionesCarga);
                    }
                    
                }

                if (Session["OPCIONES_OPERACION"] != null)
                {
                    List<SG_Opcion> ListaOpcionesCarga = (List<SG_Opcion>)Session["OPCIONES_OPERACION"];
                    mensaje = ListaOpcionesCarga.Count + " elementos " + accion + ".";
                }

                if (MODO == "PEGAR")
                {
                    return showMensajeBox(mensaje, "Operación realizada", "INFO", "accionFinal");
                }
                else
                {
                    return showMensajeNotify("Operación realizada", mensaje, "INFO");
                }                
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                return showMensajeNotify("Excepción", "Ocurrió un error en la operación", "WARNING");
            }
            return this.Direct();
        }
        public StoreResult GetTreeViewSG_Opcion(string node,
           string id, string nombre, string persona,
            string plataforma, string codigo, string tipo,
            string estado, string tipoBuscar)
        {
            Log.Information("GestionController - GetTreeViewSG_Opcion - Entrar");

            var ListaMiscel = new List<SG_Opcion>();
            int TipoPreven = 0;

            var entidaLocal = new SG_Opcion();
            /**OBS: usuiario auxiliar*/

            entidaLocal.IdOpcion = Convert.ToInt32(getValorFiltroInt(id));
            entidaLocal.Nombre = getValorFiltroStr(nombre);
            entidaLocal.CodigoOpcion = getValorFiltroStr(codigo);
            //LocalEnty.TipoAgente = getValorFiltroInt(tipo);
            entidaLocal.Estado = getValorFiltroInt(estado);

            if (node == "WA")
            {
                entidaLocal.NivelOpcion = 1;
                entidaLocal.IdOpcionPadre = null;
            }
            else
            {
                try
                {
                    entidaLocal.IdOpcionPadre = Convert.ToInt32(node.Trim());
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);

                }
            }
            NodeCollection nodes = new Ext.Net.NodeCollection();
            entidaLocal.Accion = "LISTAR";
            entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            List<SG_Opcion> serviceResuls = new List<SG_Opcion>();
            serviceResuls = SvcSG_Opcion.listarSG_Opcion(entidaLocal, 0, 0);
            foreach (var resulenti in serviceResuls)
            {

                Node asyncNode = new Node
                {
                    Text = resulenti.IndicadorFormato + "|" +
                            resulenti.Nombre + "|" +
                            resulenti.IdOpcion + "|" +
                            resulenti.CodigoOpcion + "|" +
                            resulenti.IdOpcionPadre + "|" +
                            resulenti.Estado + "|" +
                            resulenti.IndicadorAsignacion,

                    NodeID = resulenti.IdOpcion.ToString().Trim(),
                    //NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                    Leaf = resulenti.IndicadorFormato == 2 ? true : false,
                    AttributesObject = resulenti
                    /*AttributesObject = new
                    {
                        CodigoOpcion = resulenti.CodigoOpcion,
                        IdOpcion = resulenti.IdOpcion,
                        IdOpcionPadre = resulenti.IdOpcionPadre,
                        Nombre = resulenti.Nombre,
                        Descripcion = resulenti.Descripcion,
                        TipoDato = resulenti.TipoDato,
                        Orden = resulenti.Orden
                    }*/
                };
                nodes.Add(asyncNode);
            }
            return this.Store(nodes);
        }
        /**Para la llamada del formulario de Registro*/
        public System.Web.Mvc.ActionResult SG_OpcionRegistro(String MODO, int id)
        {
            Log.Information("GestionController - SG_OpcionRegistro - Entrar");
            var Listar = new List<SG_Opcion>();
            SG_Opcion objModel = new SG_Opcion();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER" || MODO == "NUEVO")
            {
                if (id > 0)
                {
                    objModel.Accion = "LISTAR";
                    objModel.IdOpcion = id;
                    Listar = SvcSG_Opcion.listarSG_Opcion(objModel, 0, 0);
                    if (Listar.Count > 0)
                    {
                        foreach (SG_Opcion objEntity in Listar)
                        {
                            if (MODO == "NUEVO")
                            {
                                objModel = new SG_Opcion();
                                objModel.Accion = "NUEVO";
                                objModel.IdOpcionPadre = objEntity.IdOpcion;
                                objModel.NivelOpcion = (objEntity.NivelOpcion != null ? objEntity.NivelOpcion : 0) + 1;
                            }
                            else
                            {
                                objModel = objEntity;
                            }
                        }
                    }
                }
                else
                {
                    if (MODO == "NUEVO")
                    {
                        objModel.IdOpcionPadre = null;
                        objModel.NivelOpcion = 1;
                    }
                }

            }
            objModel.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/Opciones/OpcionesRegistro", objModel, "");
        }

        /**Para guardar los cambios del formulario*/
        public System.Web.Mvc.ActionResult save_SG_Opcion(SG_Opcion objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SG_Opcion - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSTOPCIONES);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {

                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSG_Opcion.setMantenimiento(objSave);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  usuario (" + objSave.CodigoOpcion + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }
        /***/
        public System.Web.Mvc.ActionResult setNodoRootOpcion(string tipo)
        {
            Log.Information("GestionController - setNodoRootOpcion - Entrar");
            Ext.Net.Node root = new Ext.Net.Node();
            root.Text = "1|Sistema HCE";
            root.NodeID = "WA";

            return this.Direct(root);
        }
        public System.Web.Mvc.ActionResult getSeleccionFormatoOpcion(String MODO, int id, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFormatoOpcion - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            SS_HC_Formato obj = new SS_HC_Formato();
            obj.Accion = "LISTAR";
            obj.IdFormato = id;
            var listar = SvcFormato.listarFormato(obj, 0, 0);
            if (listar.Count == 1)
            {
                foreach (var result in listar)
                {
                    var nfIdFormato = X.GetCmp<NumberField>("IdFormato");
                    nfIdFormato.SetValue(id);
                    var tfCodFormato = X.GetCmp<TextField>("tfCodFormato");
                    tfCodFormato.SetValue(result.CodigoFormato);
                    var tfDescFormato = X.GetCmp<TextField>("tfDescFormato");
                    tfDescFormato.SetValue(result.Descripcion);
                }
            }
            return this.Direct();
        }
        /**Evento posterior a la renderizacion del formulario (para cargar data extra)*/
        public System.Web.Mvc.ActionResult postWindowOpcion(String idOpcion, String idFormato)
        {
            Log.Information("GestionController - postWindowOpcion - Entrar");

            try
            {
                SS_HC_Formato obj = new SS_HC_Formato();
                obj.Accion = "LISTAR";
                obj.IdFormato = Convert.ToInt32(getValorFiltroInt(idFormato));
                var listar = SvcFormato.listarFormato(obj, 0, 0);
                if (listar.Count == 1)
                {
                    foreach (var result in listar)
                    {
                        var nfIdFormato = X.GetCmp<NumberField>("IdFormato");
                        nfIdFormato.SetValue(result.IdFormato);
                        var tfCodFormato = X.GetCmp<TextField>("tfCodFormato");
                        tfCodFormato.SetValue(result.CodigoFormato);
                        var tfDescFormato = X.GetCmp<TextField>("tfDescFormato");
                        tfDescFormato.SetValue(result.Descripcion);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);

                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
        /**Para la llamada del formulario de Registro*/
        public System.Web.Mvc.ActionResult OpcionesAsignacionRegistro(String MODO, int id)
        {
            Log.Information("GestionController - OpcionesAsignacionRegistro - Entrar");
            var Listar = new List<SG_Opcion>();
            SG_Opcion objModel = new SG_Opcion();


            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER" || MODO == "NUEVO")
            {
                if (id > 0)
                {
                    objModel.Accion = "LISTAR";
                    objModel.IdOpcion = id;
                    Listar = SvcSG_Opcion.listarSG_Opcion(objModel, 0, 0);
                    if (Listar.Count > 0)
                    {
                        objModel = Listar[0];
                    }
                }
                else
                {
                }
            }
            Session["DataSS_HC_FormatoCodigoIdDelete"] = null;
            return crearWindowRegistro("Maestros/Opciones/OpcionesAsignacionRegistro", objModel, "");
        }
        public System.Web.Mvc.ActionResult getGrillaOpcionesAsignacion(int start, int limit,
          string id, string codigo, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaOpcionesAsignacion - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";
            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SS_HC_FormatoCodigoId>();

            var LocalEnty = new SS_HC_FormatoCodigoId();

            //LocalEnty.Codigo = getValorFiltroStr(codigo);
            LocalEnty.IdOpcion = Convert.ToInt32(getValorFiltroInt(id));
            //LocalEnty.CampoCodigoId = Convert.ToInt32(getValorFiltroInt(codigo));            

            LocalEnty.Accion = "LISTAR";
            Listar = SvcOpcionFormatoAsignacion.listarSS_HC_FormatoCodigoId(LocalEnty, 0, 0);


            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult add_DataDeleteOpcionesAsignacion(
            String MODO, int idOpcion, int campoCodigo, int secuencia)
        {
            Log.Information("GestionController - add_DataDeleteOpcionesAsignacion - Entrar");

            List<SS_HC_FormatoCodigoId> dataDelete = null;
            if (Session["DataSS_HC_FormatoCodigoIdDelete"] != null)
            {
                dataDelete = (List<SS_HC_FormatoCodigoId>)Session["DataSS_HC_FormatoCodigoIdDelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_FormatoCodigoId>();
            }

            if (secuencia > 0)
            {
                SS_HC_FormatoCodigoId objDelete = new SS_HC_FormatoCodigoId();
                objDelete.IdOpcion = idOpcion;
                objDelete.CampoCodigoId = campoCodigo;
                objDelete.SecuenciaAsignacion = secuencia;
                objDelete.Accion = "DELETE";
                dataDelete.Add(objDelete);
            }
            Session["DataSS_HC_FormatoCodigoIdDelete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_OpcionesAsignacion(SG_Opcion objSave,
            String MODO, String data, String idWindow, String tipoSave)
        {
            Log.Information("GestionController - save_OpcionesAsignacion - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                /*objSave.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSTOPCIONES);
                }*/

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }

                        /////registro

                        List<SS_HC_FormatoCodigoId> detalleSave = new List<SS_HC_FormatoCodigoId>();
                        List<SS_HC_FormatoCodigoId> detalleAux = new List<SS_HC_FormatoCodigoId>();
                        if (Session["DataSS_HC_FormatoCodigoIdDelete"] != null)
                        {
                            detalleSave = (List<SS_HC_FormatoCodigoId>)Session["DataSS_HC_FormatoCodigoIdDelete"];
                        }
                        if (data != null)
                        {
                            List<SS_HC_FormatoCodigoId> dataSave = new List<SS_HC_FormatoCodigoId>();
                            detalleAux = (List<SS_HC_FormatoCodigoId>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_FormatoCodigoId>));
                            foreach (var result in detalleAux)
                            {
                                result.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                                result.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                                detalleSave.Add(result);
                            }
                        }
                        if (detalleSave.Count > 0)
                        {
                            idResultado = SvcOpcionFormatoAsignacion.setMantenimiento(null, detalleSave);
                        }
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " la Asignación (" + idResultado + ") satisfactoriamente.";
                        }
                        else if (idResultado == -1000)
                        {
                            message = "No hubieron cambios que guardar. ";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objSave.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }

        }
        /**LLAMAR  AL SELECCIONADOR GENERAL**/
        public System.Web.Mvc.ActionResult getSeleccionadorGenerico(String MODO,
            int idOpcion, int campoCodigo, String titulo, String misce)
        {
            Log.Information("GestionController - getSeleccionadorGenerico - Entrar");

            MA_MiscelaneosDetalle obj = new MA_MiscelaneosDetalle();
            obj.AplicacionCodigo = "WA";
            obj.Compania = "999999";
            obj.CodigoTabla = misce;
            obj.CodigoElemento = "" + campoCodigo;
            obj.ACCION = "LISTACOMBO";
            List<MA_MiscelaneosDetalle> lista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(obj, 0, 0);
            String tabla = "";
            String tipoValor = "";
            String accionListado = "";
            String accionSeleccion = "getSeleccionAsignacionOpcion";
            if (lista.Count > 0)
            {
                tabla = lista[0].ValorCodigo1;
                tipoValor = lista[0].ValorCodigo2;
            }

            return SeleccionadorGenericoSimple(MODO, tabla, tipoValor, accionSeleccion, accionListado, titulo);
        }

        public System.Web.Mvc.ActionResult getSeleccionAsignacionOpcion(String MODO, int id,
            String idCompuesto, String descripcion,
            String tabla, String tiporetorno, String cod, String idWindow)
        {
            Log.Information("GestionController - getSeleccionAsignacionOpcion - Entrar");

            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                //X.Msg.Alert("Error ", "000000 WIN NO NULO." + win.Title).Show();
                win.Hide();
            }
            var nfID = X.GetCmp<NumberField>("txtIDaux");
            var tfCod = X.GetCmp<TextField>("txtCodigoaux");
            var tfDesc = X.GetCmp<TextField>("txtDescripcionaux");
            tfDesc.SetValue(descripcion);
            if (tiporetorno.Trim() == "TEXTO")
            {
                tfCod.SetValue(cod);
            }
            else if (tiporetorno.Trim() == "ID")
            {
                nfID.SetValue(id);
            }
            else if (tiporetorno.Trim() == "IDCOMP")
            {
                idCompuesto = idCompuesto.Replace("|0", "");
                tfCod.SetValue(idCompuesto);
            }


            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return this.Direct();
            //return View("UsuarioRegistro", LocalEnty);
        }
        /**SELECCIONADOR **/
        public System.Web.Mvc.ActionResult SeleccionadorGenericoSimple(String MODO,
            String tabla, String tipoRetorno, String accionSeleccion, String accionListado, String titulo)
        {
            Log.Information("GestionController - SeleccionadorGenericoSimple - Entrar");


            ENTITY_GENERALHCE obj = new ENTITY_GENERALHCE();
            obj.campoStr01 = tabla; //AUXILIAR
            obj.campoStr02 = accionListado; //AUXILIAR
            obj.campoStr03 = titulo; //AUXILIAR
            obj.campoStr04 = tipoRetorno; //AUXILIAR
            obj.ACCION = accionSeleccion;

            return crearWindowRegistro("SeleccionadorGenericoSimple", obj, "");
        }
        public System.Web.Mvc.ActionResult getGrillaSeleccGenerica(int start, int limit,
            string descripcion, string codigo, string tabla, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSeleccGenerica - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                MA_MiscelaneosDetalle obj = new MA_MiscelaneosDetalle();
                obj.CodigoTabla = tabla;
                obj.DescripcionLocal = descripcion;
                //obj.CodigoElemento = "" + campoCodigo;
                obj.ACCION = "LISTAGENERAL";
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                List<MA_MiscelaneosDetalle> lista = new List<MA_MiscelaneosDetalle>();
                int cantElementos = SvcMiscelaneos.setMantenimiento(obj);
                if (cantElementos > 0)
                {
                    lista = SvcMiscelaneos.listarMA_MiscelaneosDetalle(obj, ini, fin);
                }

                String tipoValor = "";
                String accionListado = "";
                String accionSeleccion = "";

                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(lista, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /**MAESTRO ASIGNAR  ALMACEN*/

        public System.Web.Mvc.ActionResult AsignarAlmacenRegistro(String MODO, int agente)
        {
            Log.Information("GestionController - AsignarAlmacenRegistro - Entrar");

            var Listar = new List<SG_Agente>();
            //var fff = X.GetCmp<ComboBox>("");            
            SG_Agente objAgente = new SG_Agente();
            if (agente != null)
            {
                objAgente.ACCION = "LISTAR";
                objAgente.IdAgente = agente;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAgente.ACCION = "NUEVO";
            }
            Session["DataPerfilAgenteDelete"] = null;
            return crearWindowRegistro("Maestros/Agente/AsignarAlmacen", objAgente, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        

              //LISTAR GRILLA ALMACEN x sucursal///
        public System.Web.Mvc.ActionResult getGrillaListaSysAutorizacionesAlmacenxSucursal(string agente, string tipoagente, string codagente, string codsucursal)
        {
            Log.Information("GestionController - getGrillaListaSysAutorizacionesAlmacenxSucursal - Entrar");


            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.GRUPO = "";

            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SY_SeguridadAutorizaciones>();

            var LocalEnty = new SY_SeguridadAutorizaciones();

            LocalEnty.AplicacionCodigo = "SY";
            int inicio = Convert.ToInt32(getValorFiltroInt(agente));
            LocalEnty.Usuario = codagente;
            LocalEnty.UltimoUsuario = codsucursal;
            LocalEnty.Accion = "LISTARSEGURIDADXSUCURSAL";

            if (!String.IsNullOrEmpty(codsucursal))
            {
                Listar = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicio, 0);
            }

            foreach (var objData in Listar)
            {
            }           
            return this.Store(Listar);
        }


        //LISTAR GRILLA ALMACEN///
        public System.Web.Mvc.ActionResult getGrillaListaSysAutorizacionesAlmacen(string agente, string tipoagente, string codagente)
        {
            Log.Information("GestionController - getGrillaListaSysAutorizacionesAlmacen - Entrar");

            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.GRUPO = "";

            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SY_SeguridadAutorizaciones>();

            var LocalEnty = new SY_SeguridadAutorizaciones();

            LocalEnty.AplicacionCodigo = "SY";
            int inicio = Convert.ToInt32(getValorFiltroInt(agente));
            LocalEnty.Usuario = codagente;
            LocalEnty.Accion = "LISTARSEGURIDADALMACEN";

            Listar = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicio, 0);




            foreach (var objData in Listar)
            {

                //objData.ESTADO = (objData.ESTADO != null ? objData.ESTADO.Trim() : null);
                //objData.PERFIL = objData.PERFIL.Trim();
            }
            //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
            //Session["ENTITY_PACIENTE"] = Listar;                
            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult add_DataDeleteSysAutorizacionesAlmacen(

        String MODO, string app, string grupo, string concepto, string usuario, string descripcion)
        {
            Log.Information("GestionController - add_DataDeleteSysAutorizacionesAlmacen - Entrar");

            List<SY_SeguridadAutorizaciones> dataDelete = null;
            if (Session["DataSysAutorizacionesDelete"] != null)
            {
                dataDelete = (List<SY_SeguridadAutorizaciones>)Session["DataSysAutorizacionesDelete"];
            }
            else
            {
                dataDelete = new List<SY_SeguridadAutorizaciones>();
            }
            SY_SeguridadAutorizaciones objDelete = new SY_SeguridadAutorizaciones();
            objDelete.AplicacionCodigo = "SY"; //OBS: HARD CODE
            objDelete.Grupo = grupo;
            objDelete.Concepto = concepto;
            objDelete.Usuario = usuario;
            objDelete.Accion = "DELETE";
            dataDelete.Add(objDelete);
            Session["DataSysAutorizacionesDelete"] = dataDelete;
            return this.Direct();
        }


        public System.Web.Mvc.ActionResult save_SysAutorizacionesAlmacen(SG_Agente objSelecc, String MODO,
           String idWindow, String data, String codagente, String idAgente)
        {
            Log.Information("GestionController - save_SysAutorizacionesAlmacen - Entrar");

            //var cmb = X.GetCmp<ComboBox>("id");   
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<SY_SeguridadAutorizaciones> dataDelete = null;
                if (Session["DataSysAutorizacionesDelete"] != null)
                {
                    dataDelete = (List<SY_SeguridadAutorizaciones>)Session["DataSysAutorizacionesDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.Accion != null)
                        {
                            if (objDel.Accion.Trim().Length > 0)
                            {
                                idResultado = SvcSeguridadAutorizacion.setMantenimiento(objDel);
                            }
                        }
                    }
                }
                /////registro -save
                List<SY_SeguridadAutorizaciones> dataSave;
                //objPerfilUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                if (data != null)
                {
                    dataSave = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SY_SeguridadAutorizaciones>));
                    foreach (var objValidaAI in dataSave)
                    {
                        if (objValidaAI.Estado == "I" && objValidaAI.MasterBrowseFlag == "1")
                        {
                            return showMensajeBox("Por favor,Debe asignar un almacen Activo", "Advertencia", "WARNING");
                        }
                    }

                    foreach (var objSave in dataSave)
                    {
                        objSave.Accion = "INSERT";
                        objSave.AplicacionCodigo = "SY";  //OBS: HARD CODE
                        objSave.IndAplicaSalud = Convert.ToInt32(idAgente);
                        objSave.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSeguridadAutorizacion.setMantenimiento(objSave);
                    }
                }

                //idResultado = SvcUsuario.setMantenimiento(objPerfilUsuario);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + "actualizaron" + " las Autorizaciones de  Agente (" + codagente + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
                Session["DataSysAutorizacionesDelete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }


         
        public System.Web.Mvc.ActionResult showMensajeBox(String message, String titulo, String tipo)
        {
            Log.Information("GestionController - showMensajeBox - Entrar");

            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            X.Msg.Show(new MessageBoxConfig
            {
                Title = "Mensaje",
                Message = message,
                Buttons = MessageBox.Button.OK,
                Icon = (MessageBox.Icon)Enum.Parse(typeof(MessageBox.Icon), tipo),
                //Wait = true,
                //WaitConfig = new WaitConfig { Interval = 100 }
                //AnimEl = this.GetCmp<Button>("Button8").ClientID,
                /*Fn = new JFunction
                {
                    Fn = "accionFinal"
                }*/
            });
            //return this.Store("1");
            return this.Direct();

        }



        /**MAESTRO ASIGNAR  PROCEDIMIENTO*/
        public System.Web.Mvc.ActionResult AsignarProcedimientoRegistro(String MODO, int agente)
        {
            Log.Information("GestionController - AsignarProcedimientoRegistro - Entrar");

            var Listar = new List<SG_Agente>();
            //var fff = X.GetCmp<ComboBox>("");            
            SG_Agente objAgente = new SG_Agente();
            if (agente != null)
            {
                objAgente.ACCION = "LISTAR";
                objAgente.IdAgente = agente;
                Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAgente.ACCION = "NUEVO";
            }
            Session["DataPerfilAgenteDelete"] = null;
            return crearWindowRegistro("Maestros/Agente/AsignarProcedimiento", objAgente, "");
            //return View("UsuarioRegistro", LocalEnty);
        }

        public System.Web.Mvc.ActionResult getGrillaListaSysAutorizacionesProcedimiento(string agente, string tipoagente, string codagente)
        {
            Log.Information("GestionController - getGrillaListaSysAutorizacionesProcedimiento - Entrar");

            ENTITY_GLOBAL.Instance.GRUPO = "";

            var Listar = new List<SY_SeguridadAutorizaciones>();
            var LocalEnty = new SY_SeguridadAutorizaciones();
            LocalEnty.AplicacionCodigo = "SY";
            int inicio = Convert.ToInt32(getValorFiltroInt(agente));
            LocalEnty.Usuario = codagente;
            LocalEnty.Accion = "LISTARPROCEDIMIENTO";

            Listar = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicio, 0);
            foreach (var objData in Listar)
            {

                //objData.ESTADO = (objData.ESTADO != null ? objData.ESTADO.Trim() : null);
                //objData.PERFIL = objData.PERFIL.Trim();
            }
            return this.Store(Listar);
        }

        public System.Web.Mvc.ActionResult save_SysAutorizacionesProcedimiento(SG_Agente objSelecc, String MODO,
        String idWindow, String data, String codagente, String idAgente)
        {
            Log.Information("GestionController - save_SysAutorizacionesProcedimiento - Entrar");


            //var cmb = X.GetCmp<ComboBox>("id");   
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<SY_SeguridadAutorizaciones> dataDelete = null;
                if (Session["DataSysAutorizacionesDelete"] != null)
                {
                    dataDelete = (List<SY_SeguridadAutorizaciones>)Session["DataSysAutorizacionesDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.Accion != null)
                        {
                            if (objDel.Accion.Trim().Length > 0)
                            {
                                idResultado = SvcSeguridadAutorizacion.setMantenimiento(objDel);
                            }
                        }
                    }
                }
                /////registro -save
                List<SY_SeguridadAutorizaciones> dataSave;
                //objPerfilUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                if (data != null)
                {
                    dataSave = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SY_SeguridadAutorizaciones>));

                    foreach (var objSave in dataSave)
                    {
                        objSave.Accion = "INSERT";
                        objSave.AplicacionCodigo = "SY";  //OBS: HARD CODE
                        objSave.IndAplicaSalud = Convert.ToInt32(idAgente);
                        objSave.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSeguridadAutorizacion.setMantenimiento(objSave);
                    }
                }

                //idResultado = SvcUsuario.setMantenimiento(objPerfilUsuario);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + "actualizaron" + " las Autorizaciones de  Agente (" + codagente + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
                Session["DataSysAutorizacionesDelete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }




        /**MAESTRO ASIGNAR OPCIONES A AGENTE*/
        public System.Web.Mvc.ActionResult CCEP0012_View()
        {
            Log.Information("GestionController - CCEP0012_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/AgenteOpcion/CCEP0012_View");
            //return View("CCEP0006_View");
        }
        /**para el listado principal del mantenimiento*/
        public System.Web.Mvc.ActionResult getGrillaSG_AgenteOpciones(int start, int limit,
           string id, string nombre, string persona,
            string plataforma, string codigo, string tipo,
            string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaSG_AgenteOpciones - Entrar");


            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<SG_Agente>();

                var LocalEnty = new SG_Agente();

                //LocalEnty.Codigo = getValorFiltroStr(codigo);
                LocalEnty.IdAgente = Convert.ToInt32(getValorFiltroInt(id));
                LocalEnty.Nombre = getValorFiltroStr(nombre);
                LocalEnty.IdEmpleado = getValorFiltroInt(persona);

                LocalEnty.CodigoAgente = getValorFiltroStr(codigo);
                LocalEnty.TipoAgente = getValorFiltroInt(tipo);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "-1")
                {
                    LocalEnty.Estado = null;
                }

                if (1 == getValorFiltroInt(plataforma) && Session["COD_PLATAFORMA"] != null)
                {
                    LocalEnty.Plataforma = (String)Session["COD_PLATAFORMA"];
                }


                //(descripcion != null ? (descripcion.Trim().Length>0?descripcion.Trim():null) : null);
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcSG_Agente.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSG_Agente.listarSG_Agente(LocalEnty, ini, fin);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                foreach (var obj in Listar)
                {
                    if (obj.ExpiraClave != 2)
                    {
                        obj.ExpiraClave = 0;
                    }
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }


        /**Para la llamada del formulario de Registro*/
        public System.Web.Mvc.ActionResult SG_AgenteOpcionRegistro(String MODO, int id)
        {
            Log.Information("GestionController - SG_AgenteOpcionRegistro - Entrar");
            var Listar = new List<SG_Agente>();
            SG_Agente objModel = new SG_Agente();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objModel.ACCION = "LISTAR";
                objModel.IdAgente = id;
                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSG_Agente.listarSG_Agente(objModel, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objModel = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objModel.ACCION = "NUEVO";
            }
            objModel.ACCION = MODO;
            Session["LISTA_SAVEAGENTEOPCIONES"] = null;
            Session["IDAGENTE"] = objModel.IdAgente;
            //return View("Maestros/Usuario/UsuarioRegistro", objUsuario);
            return crearWindowRegistro("Maestros/AgenteOpcion/AgenteOpcionRegistro", objModel, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public StoreResult GetTreeViewSG_OpcionAgenteRegistro(string node,
           string idagente,
            string estado, string tipoBuscar)
        {
            Log.Information("GestionController - GetTreeViewSG_OpcionAgenteRegistro - Entrar");

            var ListaMiscel = new List<SS_CHE_VistaSeguridad>();
            int TipoPreven = 0;


            var entidaLocal = new SS_CHE_VistaSeguridad();
            /**OBS: usuiario auxiliar*/
            entidaLocal.IdAgente = Convert.ToInt32(getValorFiltroInt(idagente));
            /*
            if (estado == "-1")
            {
                entidaLocal.Estado = null;
            }*/
            if (node == "WA")
            {
                entidaLocal.NivelOpcion = 1;
                entidaLocal.IdOpcionPadre = null;
            }
            else
            {
                try
                {
                    entidaLocal.IdOpcionPadre = Convert.ToInt32(node.Trim());
                }
                catch (Exception e)
                {
                    Log.Error(e, e.Message);

                }
            }
            NodeCollection nodes = new Ext.Net.NodeCollection();
            entidaLocal.Accion = "LISTAROPCIONESCAGENTE";
            entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
            List<SS_CHE_VistaSeguridad> serviceResuls = new List<SS_CHE_VistaSeguridad>();
            serviceResuls = SvcSeguridadConcepto.ListarSeguridadOpcion(entidaLocal, 0, 0);
            foreach (var resulenti in serviceResuls)
            {

                Node asyncNode = new Node
                {
                    Text =  resulenti.IndicadorFormato + "|" +
                            resulenti.NombreOpcion + "|" +
                            resulenti.IdOpcion + "|" +
                            resulenti.CodigoOpcion + "|" +
                            resulenti.IdOpcionPadre + "|" +
                            resulenti.EstadoAgenteOpcion + "|" +
                            resulenti.IndicadorAsignacion + "|" +
                            resulenti.IndicadorNuevo + "|" +
                            resulenti.IndicadorModificar + "|" +
                            resulenti.IndicadorEliminar + "|" +                            
                            resulenti.IndicadorHabilitado + "|" +
                            resulenti.IndicadorObligatorio + "|" +
                            resulenti.IndicadorVisible + "|" +
                            resulenti.IndicadorPrioridad + "|" +
                            resulenti.IndicadorIngreso + "|" +
                            resulenti.IndicadorImprimir + "|" +
                            resulenti.IndicadorAcceso + "|" +
                            resulenti.TipoAgente + "|" +
                            (resulenti.NombreAgente + "").Trim() + "|" +
                            (resulenti.UsuarioModificacion + "").Trim() + "|" +
                            ((resulenti.FechaModificacion!=null?
                                Convert.ToDateTime(resulenti.FechaModificacion).ToString("dd/MM/yyyy HH:mm") : "--") + "")
                            ,

                    NodeID = resulenti.IdOpcion.ToString().Trim(),
                    //NodeID = resulenti.IdCuidadoPreventivo.ToString().Trim(),
                    Leaf = resulenti.IndicadorFormato == 2 ? true : false,
                    AttributesObject = resulenti
                    /*AttributesObject = new
                    {
                        CodigoOpcion = resulenti.CodigoOpcion,
                        IdOpcion = resulenti.IdOpcion,
                        IdOpcionPadre = resulenti.IdOpcionPadre,
                        Nombre = resulenti.Nombre,
                        Descripcion = resulenti.Descripcion,
                        TipoDato = resulenti.TipoDato,
                        Orden = resulenti.Orden
                    }*/
                };
                nodes.Add(asyncNode);
            }
            return this.Store(nodes);
        }
        public System.Web.Mvc.ActionResult addCambiosOpciones(string text, int indicador, bool check)
        {
            Log.Information("GestionController - addCambiosOpciones - Entrar");

            try
            {
                SG_AgenteOpcion objAdd = new SG_AgenteOpcion();
                SG_AgenteOpcion objDel = new SG_AgenteOpcion();
                List<SG_AgenteOpcion> listaSave = null;
                List<SG_AgenteOpcion> listaDelete = null;
                if (Session["LISTA_SAVEAGENTEOPCIONES"] == null)
                {
                    listaSave = new List<SG_AgenteOpcion>();
                    Session["LISTA_SAVEAGENTEOPCIONES"] = listaSave;
                }
                else
                {
                    listaSave = (List<SG_AgenteOpcion>)Session["LISTA_SAVEAGENTEOPCIONES"];
                }
                ////////
                if (Session["LISTA_DELETEAGENTEOPCIONES"] == null)
                {
                    listaDelete = new List<SG_AgenteOpcion>();
                    Session["LISTA_DELETEAGENTEOPCIONES"] = listaDelete;
                }
                else
                {
                    listaDelete = (List<SG_AgenteOpcion>)Session["LISTA_DELETEAGENTEOPCIONES"];
                }

                if (listaSave != null && Session["IDAGENTE"] != null)
                {
                    int nodoIdAgente = 0;
                    string nodoIndicaFormato = null;
                    string nodoDesc = null;
                    string nodoIdOpcion = null;
                    string nodoCodOpcion = null;
                    string nodoIdOpcionPadre = null;
                    string nodoEstado = null;
                    string nodoIndAsignar = null;
                    string nodoIndNuevo = null;
                    string nodoIndModificar = null;
                    string nodoIndEliminar = null;                   
                    string nodoIndHabilitado = null;
                    string nodoIndObligatorio = null;
                    string nodoIndVisible = null;
                    string nodoIndPrio = null;
                    string nodoIndIngreso = null;
                    string nodoIndImprimir = null;
                    string nodoIndAcceso = null;

                    String[] nodoPack = text.Split('|');
                    nodoIdAgente = (int)Session["IDAGENTE"];
                    for (int i = 0; i < nodoPack.Length; i++)
                    {
                        if (i == 0 && nodoPack[i].Length > 0)
                        {
                            nodoIndicaFormato = nodoPack[0];
                        }
                        else if (i == 1 && nodoPack[i].Length > 0)
                        {
                            nodoDesc = nodoPack[1];
                        }
                        else if (i == 2 && nodoPack[i].Length > 0)
                        {
                            nodoIdOpcion = nodoPack[2];
                        }
                        else if (i == 3 && nodoPack[i].Length > 0)
                        {
                            nodoCodOpcion = nodoPack[3];
                        }
                        else if (i == 4 && nodoPack[i].Length > 0)
                        {
                            nodoIdOpcionPadre = nodoPack[4];
                        }
                        else if (i == 5 && nodoPack[i].Length > 0)
                        {
                            nodoEstado = nodoPack[5];
                        }
                        else if (i == 6 && nodoPack[i].Length > 0)
                        {
                            nodoIndAsignar = nodoPack[6];
                        }
                        else if (i == 7 && nodoPack[i].Length > 0)
                        {
                            nodoIndNuevo = nodoPack[7];
                        }
                        else if (i == 8 && nodoPack[i].Length > 0)
                        {
                            nodoIndModificar = nodoPack[8];
                        }
                        else if (i == 9 && nodoPack[i].Length > 0)
                        {
                            nodoIndEliminar = nodoPack[9];
                        }
                        else if (i == 10 && nodoPack[i].Length > 0)
                        {
                            nodoIndHabilitado = nodoPack[10];
                        }
                        else if (i == 11 && nodoPack[i].Length > 0)
                        {
                            nodoIndObligatorio = nodoPack[11];
                        }
                        else if (i == 12 && nodoPack[i].Length > 0)
                        {
                            nodoIndVisible = nodoPack[12];
                        }
                        else if (i == 13 && nodoPack[i].Length > 0)
                        {
                            nodoIndPrio = nodoPack[13];
                        }
                        else if (i == 14 && nodoPack[i].Length > 0)
                        {
                            nodoIndIngreso = nodoPack[14];
                        }
                        else if (i == 15 && nodoPack[i].Length > 0)
                        {
                            nodoIndImprimir = nodoPack[15];
                        }
                        else if (i == 16 && nodoPack[i].Length > 0)
                        {
                            nodoIndAcceso = nodoPack[16];
                        }

                    }

                    objAdd.IdAgente = nodoIdAgente;
                    objAdd.IdOpcion = Convert.ToInt32(nodoIdOpcion);
                    if (nodoIndAcceso != null) { objAdd.IndicadorAcceso = Convert.ToInt32(nodoIndAcceso); }
                    if (nodoIndHabilitado != null) { objAdd.IndicadorHabilitado = Convert.ToInt32(nodoIndHabilitado); }
                    if (nodoIndObligatorio != null) { objAdd.IndicadorObligatorio = Convert.ToInt32(nodoIndObligatorio); }

                    if (nodoIndPrio != null) { objAdd.IndicadorPrioridad = Convert.ToInt32(nodoIndPrio); }
                    if (nodoEstado != null) { objAdd.Estado = Convert.ToInt32(nodoEstado); } else { objAdd.Estado = 2; }
                    if (nodoIndNuevo != null) { objAdd.IndicadorNuevo = Convert.ToInt32(nodoIndNuevo); }
                    if (nodoIndModificar != null) { objAdd.IndicadorModificar = Convert.ToInt32(nodoIndModificar); }
                    if (nodoIndEliminar != null) { objAdd.IndicadorEliminar = Convert.ToInt32(nodoIndEliminar); }                   

                    if (nodoIndIngreso != null) { objAdd.IndicadorIngreso = Convert.ToInt32(nodoIndIngreso); }
                    if (nodoIndImprimir != null) { objAdd.IndicadorImprimir = Convert.ToInt32(nodoIndImprimir); }
                    //OBS AUX nodoIndAcceso como indicadorVER
                    if (nodoIndVisible != null) { objAdd.IndicadorVisible = Convert.ToInt32(nodoIndAcceso); }


                    objAdd.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                    objAdd.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;

                    //default
                    objAdd.Accion = "UPDATE";
                    if (nodoIndAsignar == "2")
                    {
                        objAdd.Accion = "INSERT";
                    }

                    bool addOpcion = false;
                    bool delOpcion = false;
                    if (indicador == 1)  //Asignación
                    {
                        addOpcion = check;
                        delOpcion = !check;
                        if (addOpcion)
                        {
                            objAdd.Accion = "INSERT";
                        }
                        else if (delOpcion)
                        {
                            objAdd.Accion = "DELETE";
                        }
                    }
                    if (indicador == 2)  //Nuevos
                    {
                        objAdd.IndicadorNuevo = check ? 2 : 1;
                    }
                    if (indicador == 3)  //Modificar
                    {
                        objAdd.IndicadorModificar = check ? 2 : 1;
                    }
                    if (indicador == 4)  //Eliminar
                    {
                        objAdd.IndicadorEliminar = check ? 2 : 1;
                    }
                    if (indicador == 5)  //Ingreso
                    {
                        objAdd.IndicadorIngreso = check ? 2 : 1;
                    }
                    if (indicador == 6)  //Imprimir
                    {
                        objAdd.IndicadorImprimir = check ? 2 : 1;
                    }
                    
                    if (indicador == 7)  //ACcesos
                    {
                        objAdd.IndicadorAcceso = check ? 2 : 1;
                        //OBS AUX nodoIndAcceso como indicadorVER
                        objAdd.IndicadorVisible = check ? 2 : 1;
                    }
                    if (indicador == 8)  //Imprimir
                    {
                        objAdd.IndicadorObligatorio = check ? 2 : 1;
                    }
                    bool hallado = false;

                    //buscar opcion en lista
                    foreach (var result in listaSave)
                    {
                        if (result.IdOpcion == objAdd.IdOpcion)
                        {
                            if (indicador == 1)  //Asignación
                            {
                                if (addOpcion)
                                {
                                    result.Accion = "INSERT";
                                }
                                else if (delOpcion)
                                {
                                    result.Accion = "DELETE";
                                }
                            }
                            if (indicador == 2)  //Nuevos
                            {
                                result.IndicadorNuevo = objAdd.IndicadorNuevo;
                            }
                            if (indicador == 3)  //Modificar
                            {
                                result.IndicadorModificar = objAdd.IndicadorModificar;
                            }
                            if (indicador == 4)  //Eliminar
                            {
                                result.IndicadorEliminar = objAdd.IndicadorEliminar;
                            }
                            
                            if (indicador == 5)  //Ingreso
                            {
                                result.IndicadorIngreso = objAdd.IndicadorIngreso;
                            }
                            if (indicador == 6)  //Imprimir
                            {
                                result.IndicadorImprimir = objAdd.IndicadorImprimir;
                            }
                            if (indicador == 7)  //ACcesos
                            {
                                result.IndicadorAcceso = objAdd.IndicadorAcceso;
                            }
                            if (indicador == 8)  //Imprimir
                            {
                                result.IndicadorObligatorio = objAdd.IndicadorObligatorio;
                            }
                            hallado = true;
                            break;
                        }
                    }
                    if (!hallado)
                    {
                        listaSave.Add(objAdd);
                    }
                    else
                    {
                    }
                    /*
                    string Text = nodoIndicaFormato + "|" +
                            nodoDesc + "|" +
                            nodoIdOpcion + "|" +
                            nodoCodOpcion + "|" +
                            nodoIdOpcionPadre + "|" +
                            nodoEstado + "|" +
                            nodoIndAsignar + "|" +
                            objAdd.IndicadorNuevo + "|" +
                            objAdd.IndicadorModificar + "|" +
                            objAdd.IndicadorEliminar + "|" +
                            objAdd.IndicadorHabilitado + "|" +
                            objAdd.IndicadorObligatorio + "|" +
                            objAdd.IndicadorVisible + "|" +
                            objAdd.IndicadorPrioridad + "|" +
                            objAdd.IndicadorIngreso + "|" +
                            objAdd.IndicadorAcceso;                                        
                    */
                    Session["LISTA_SAVEAGENTEOPCIONES"] = listaSave;
                }
                ///////....                          
            }
            catch (Exception e)
            {
                Log.Error(e, e.Message);
                return showMensajeBox(e.Message, "Excepción", "ERROR", "");
            }
            return this.Direct();
        }
        /**Para guardar los cambios del formulario*/
        public System.Web.Mvc.ActionResult save_SG_AgenteOpcion(SG_Agente objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SG_AgenteOpcion - Entrar");

            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.ACCION = MODO;
                msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, "");//OBS: pendiente validaciones
                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    if (MODO == "NUEVO")
                    {
                        objSave.ACCION = "INSERT";
                        accion = "registró";
                        //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                    }
                    else if (MODO == "UPDATE")
                    {
                        objSave.ACCION = "UPDATE";
                        accion = "modificó";
                    }
                    else if (MODO == "DELETE")
                    {
                        objSave.ACCION = "DELETE";
                        accion = "eliminó";
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No se encotró el MODO.";
                        tituloMsg = "Advertencia";
                    }
                    try
                    {
                        //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                    }
                    catch (Exception e)
                    {
                        Log.Error(e, e.Message);
                        X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                    }

                    /////registro
                    if (Session["LISTA_SAVEAGENTEOPCIONES"] != null)
                    {
                        var listaSave = (List<SG_AgenteOpcion>)Session["LISTA_SAVEAGENTEOPCIONES"];
                        foreach (var resultSave in listaSave)
                        {
                            //resultSave.IdAgente = objSave.IdAgente;
                            //resultSave.Accion = "INSERT";
                            resultSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                            resultSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                            idResultado = SvcSG_AgenteOpcion.setMantenimiento(resultSave);
                        }
                    }
                    //////////////////////FINAL
                    if (idResultado > 0)
                    {
                        message = "Se " + accion + " el  usuario (" + objSave.CodigoAgente + ") satisfactoriamente.";
                        //X.Msg.Notify(tituloMsg, "" + message).Show();
                    }
                    else
                    {
                        tipoMsg = "WARNING";
                        message = "No hubieron cambios que guardar";
                        tituloMsg = "Advertencia";
                        //X.Msg.Alert(tituloMsg, "" + message).Show();
                        //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            //objAnamnesis_AP.Accion = ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;
            objSave.ACCION = "INFO";
            //return this.Store(objUsuario);
            //return this.Store("" + idResultado);
            //return this.Store("" + idResultado);
            if (indicaValidacionForm)
            {
                return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
                //return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
            //return cerrarWindow("WindowX");
            //return this.Direct();
        }
        /**ASIGNAR PERFILES/USAURIO A AGENTE*/
        public System.Web.Mvc.ActionResult AsignarPerfilAgenteRegistro(String MODO, int agente)
        {
            Log.Information("GestionController - AsignarPerfilAgenteRegistro - Entrar");
            var Listar = new List<SG_Agente>();
            //var fff = X.GetCmp<ComboBox>("");            
            SG_Agente objAgente = new SG_Agente();
            if (agente != null)
            {
                objAgente.ACCION = "LISTAR";
                objAgente.IdAgente = agente;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAgente.ACCION = "NUEVO";
            }
            Session["DataPerfilAgenteDelete"] = null;
            return crearWindowRegistro("Maestros/Agente/AsignarPerfilAgente", objAgente, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public System.Web.Mvc.ActionResult getGrillaListaPerfilAgente(string agente, string tipoagente)
        {
            Log.Information("GestionController - getGrillaListaPerfilAgente - Entrar");

            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.TIPOAGENTEPERFILVALIDA = tipoagente;


            ENTITY_GLOBAL.Instance.GRUPO = "";
            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SG_PerfilUsuario>();

            var LocalEnty = new SG_PerfilUsuario();
            if (tipoagente == "2")
            {
                LocalEnty.IdUsuario = Convert.ToInt32(getValorFiltroInt(agente));
                LocalEnty.IdPerfil = 0;
                LocalEnty.Accion = "LISTARPERFILES";
            }
            else
            {
                LocalEnty.IdPerfil = Convert.ToInt32(getValorFiltroInt(agente));
                LocalEnty.IdUsuario = 0;
                LocalEnty.Accion = "LISTARUSUARIOS";
            }

            Listar = SvcSeguridadPerfilUsuario.listarSeguridadPerfilUsuario(LocalEnty, 0, 0);
            foreach (var objData in Listar)
            {
                //objData.ESTADO = (objData.ESTADO != null ? objData.ESTADO.Trim() : null);
                //objData.PERFIL = objData.PERFIL.Trim();
            }
            //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
            //Session["ENTITY_PACIENTE"] = Listar;                
            return this.Store(Listar);
        }
        public System.Web.Mvc.ActionResult add_DataDeleteAsignarDetalleF(
        String MODO, int favorito, string descripcion)
        {
            Log.Information("GestionController - add_DataDeleteAsignarDetalleF - Entrar");

            List<SS_HC_FavoritoDetalle> dataDelete = null;
            if (Session["DataPerfilAgenteDelete"] != null)
            {
                dataDelete = (List<SS_HC_FavoritoDetalle>)Session["DataPerfilAgenteDelete"];
            }
            else
            {
                dataDelete = new List<SS_HC_FavoritoDetalle>();
            }
            SS_HC_FavoritoDetalle objDelete = new SS_HC_FavoritoDetalle();
            objDelete.IdFavorito = favorito;
            objDelete.ValorTexto1 = descripcion;
            objDelete.Accion = "DELETE";
            dataDelete.Add(objDelete);
            Session["DataPerfilAgenteDelete"] = dataDelete;
            return this.Direct();
        }

        public System.Web.Mvc.ActionResult add_DataDeletePerfilAgente(
            String MODO, int usuario, int perfil)
        {
            Log.Information("GestionController - add_DataDeletePerfilAgente - Entrar");

            List<SG_PerfilUsuario> dataDelete = null;
            if (Session["DataPerfilAgenteDelete"] != null)
            {
                dataDelete = (List<SG_PerfilUsuario>)Session["DataPerfilAgenteDelete"];
            }
            else
            {
                dataDelete = new List<SG_PerfilUsuario>();
            }
            SG_PerfilUsuario objDelete = new SG_PerfilUsuario();
            objDelete.IdPerfil = perfil;
            objDelete.IdUsuario = usuario;
            objDelete.Accion = "DELETE";
            dataDelete.Add(objDelete);
            Session["DataPerfilAgenteDelete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_PerfilAgente(SG_Agente objSelecc, String MODO,
                String idWindow, String data, String codagente)
        {
            Log.Information("GestionController - save_PerfilAgente - Entrar");

            //var cmb = X.GetCmp<ComboBox>("id");            

            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<SG_PerfilUsuario> dataDelete = null;
                if (Session["DataPerfilAgenteDelete"] != null)
                {
                    dataDelete = (List<SG_PerfilUsuario>)Session["DataPerfilAgenteDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.Accion != null)
                        {
                            if (objDel.Accion.Trim().Length > 0)
                            {
                                idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objDel);
                            }
                        }
                    }
                }



                /////registro -save
                List<SG_PerfilUsuario> dataSave;
                //objPerfilUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                if (data != null)
                {
                    dataSave = (List<SG_PerfilUsuario>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SG_PerfilUsuario>));

                    //if (ENTITY_GLOBAL.Instance.TIPOAGENTEPERFILVALIDA=="2")
                    //{

                    //    //var Total_de_Perfiles = new List<SG_Agente>();

                    //    // Total_de_Perfiles = ENTITY_GLOBAL.Instance.ListarPerfilUsuariosTotal;

                    //    var ListarAgenteXperfil = new List<SG_PerfilUsuario>();
                    //    var LocalEnty = new SG_PerfilUsuario();
                    //    LocalEnty.IdUsuario = Convert.ToInt32(dataSave[0].IdUsuario);
                    //    LocalEnty.IdPerfil = 0;
                    //    LocalEnty.Accion = "LISTARESTADOAGENTE";
                    //    ListarAgenteXperfil = SvcSeguridadPerfilUsuario.listarSeguridadPerfilUsuario(LocalEnty, 0, 0);


                    //    foreach (var objData in ListarAgenteXperfil)
                    //    {
                    //        if (objData.Estado == 1)
                    //        {
                    //            tipoMsg = "WARNING";
                    //            message = "EL PERFIL " + objData.UsuarioCreacion + " SE ENCUENTRA INACTIVO MARIA NO GUARDES";
                    //            tituloMsg = "Warning";
                    //            return showMensajeBox(message, tituloMsg, tipoMsg, "accionFinal");
                    //        }
                    //    }
                    //}

                    foreach (var objSave in dataSave)
                    {
                        objSave.Accion = "INSERT";
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSeguridadPerfilUsuario.setMantenimiento(objSave);
                    }
                }

                //idResultado = SvcUsuario.setMantenimiento(objPerfilUsuario);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + "actualizó" + " el  Agente (" + codagente + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar.";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
                Session["DataPerfilAgenteDelete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }

        public System.Web.Mvc.ActionResult AsignarSysAutorizaciones(String MODO, int agente)
        {
            Log.Information("GestionController - AsignarSysAutorizaciones - Entrar");

            var Listar = new List<SG_Agente>();
            //var fff = X.GetCmp<ComboBox>("");            
            SG_Agente objAgente = new SG_Agente();
            if (agente != null)
            {
                objAgente.ACCION = "LISTAR";
                objAgente.IdAgente = agente;

                /*if (ENTITY_GLOBAL.Instance.GRUPO.Length > 0) {
                    var llego = "";
                } */
                Listar = SvcSG_Agente.listarSG_Agente(objAgente, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SG_Agente objEntity in Listar)
                    {
                        objAgente = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objAgente.ACCION = "NUEVO";
            }
            Session["DataSysAutorizacionesDelete"] = null;
            return crearWindowRegistro("Maestros/Agente/AsignarSysAutorizaciones", objAgente, "");
            //return View("UsuarioRegistro", LocalEnty);
        }
        public System.Web.Mvc.ActionResult getGrillaListaSysAutorizaciones(string agente, string tipoagente, string codagente)
        {
            Log.Information("GestionController - getGrillaListaSysAutorizaciones - Entrar");

            //String usuario = "JAAV"; ///OBS
            ENTITY_GLOBAL.Instance.GRUPO = "";

            //ConsultaCita();
            //var field = X.GetCmp<TextField>("txtPaciente");
            var Listar = new List<SY_SeguridadAutorizaciones>();

            var LocalEnty = new SY_SeguridadAutorizaciones();

            LocalEnty.AplicacionCodigo = "SY";
            int inicio = Convert.ToInt32(getValorFiltroInt(agente));
            LocalEnty.Usuario = codagente;
            LocalEnty.Accion = "LISTARSEGURIDAD";

            Listar = SvcSeguridadAutorizacion.listarSysSeguridadAutorizaciones(LocalEnty, inicio, 0);
            foreach (var objData in Listar)
            {
                //objData.ESTADO = (objData.ESTADO != null ? objData.ESTADO.Trim() : null);
                //objData.PERFIL = objData.PERFIL.Trim();
            }
            //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
            //Session["ENTITY_PACIENTE"] = Listar;                
            return this.Store(Listar);
        }
        public System.Web.Mvc.ActionResult add_DataDeleteSysAutorizaciones(
        String MODO, string app, string grupo, string concepto, string usuario, string descripcion)
        {
            Log.Information("GestionController - add_DataDeleteSysAutorizaciones - Entrar");

            List<SY_SeguridadAutorizaciones> dataDelete = null;
            if (Session["DataSysAutorizacionesDelete"] != null)
            {
                dataDelete = (List<SY_SeguridadAutorizaciones>)Session["DataSysAutorizacionesDelete"];
            }
            else
            {
                dataDelete = new List<SY_SeguridadAutorizaciones>();
            }
            SY_SeguridadAutorizaciones objDelete = new SY_SeguridadAutorizaciones();
            objDelete.AplicacionCodigo = "SY"; //OBS: HARD CODE
            objDelete.Grupo = grupo;
            objDelete.Concepto = concepto;
            objDelete.Usuario = usuario;
            objDelete.Accion = "DELETE";
            dataDelete.Add(objDelete);
            Session["DataSysAutorizacionesDelete"] = dataDelete;
            return this.Direct();
        }
        public System.Web.Mvc.ActionResult save_SysAutorizaciones(SG_Agente objSelecc, String MODO,
                String idWindow, String data, String codagente, String idAgente)
        {
            Log.Information("GestionController - save_SysAutorizaciones - Entrar");

            //var cmb = X.GetCmp<ComboBox>("id");            

            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            int idResultado = -1000;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            if (objSelecc != null)
            {
                if (MODO == "NUEVO")
                {
                    objSelecc.ACCION = "INSERT";
                    accion = "registró";
                    //X.Msg.Notify("Ventana de Mensajes ", "MENSAJE NUEVO, estado:" + objUsuario.ESTADO).Show();
                }
                else if (MODO == "UPDATE")
                {
                    objSelecc.ACCION = "UPDATE";
                    accion = "modificó";
                }
                else if (MODO == "DELETE")
                {
                    objSelecc.ACCION = "DELETE";
                    accion = "eliminó";
                }
                else
                {
                    tipoMsg = "WARNING";
                    message = "No se encotró el MODO.";
                    tituloMsg = "Advertencia";
                }
                /////registro -delete
                List<SY_SeguridadAutorizaciones> dataDelete = null;
                if (Session["DataSysAutorizacionesDelete"] != null)
                {
                    dataDelete = (List<SY_SeguridadAutorizaciones>)Session["DataSysAutorizacionesDelete"];
                }
                if (dataDelete != null)
                {
                    foreach (var objDel in dataDelete)
                    {
                        if (objDel.Accion != null)
                        {
                            if (objDel.Accion.Trim().Length > 0)
                            {
                                idResultado = SvcSeguridadAutorizacion.setMantenimiento(objDel);
                            }
                        }
                    }
                }
                /////registro -save
                List<SY_SeguridadAutorizaciones> dataSave;
                //objPerfilUsuario.ULTIMOUSUARIO = ENTITY_GLOBAL.Instance.USUARIO;
                if (data != null)
                {
                    dataSave = (List<SY_SeguridadAutorizaciones>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SY_SeguridadAutorizaciones>));

                    foreach (var objSave in dataSave)
                    {
                        objSave.Accion = "INSERT";
                        objSave.AplicacionCodigo = "SY";  //OBS: HARD CODE
                        objSave.IndAplicaSalud = Convert.ToInt32(idAgente);
                        objSave.UltimoUsuario = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSeguridadAutorizacion.setMantenimiento(objSave);
                    }
                }

                //idResultado = SvcUsuario.setMantenimiento(objPerfilUsuario);
                //////////////////////FINAL
                if (idResultado > 0)
                {
                    message = "Se " + "actualizaron" + " las Autorizaciones de  Agente (" + codagente + ") satisfactoriamente.";
                    //X.Msg.Notify(tituloMsg, "" + message).Show();
                }
                else if (idResultado == -1000)
                {
                    message = "No hubieron cambios que guardar. ";
                }
                else
                {
                    tipoMsg = "ERROR";
                    message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                    tituloMsg = "Error";
                    //X.Msg.Alert(tituloMsg, "" + message).Show();
                    //X.Msg.Alert("Error ", "No se pudo guadar los cambios. Sucedió un error en la operación.").Show();
                }
                Session["DataSysAutorizacionesDelete"] = null;
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
        }

        /*******************    companya   **********************/
        public System.Web.Mvc.ActionResult CCEP5014_View()
        {
            Log.Information("GestionController - CCEP5014_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Companyowner/CCEP5014_View");
        }


       

        public System.Web.Mvc.ActionResult getGrillacompanyowner(int start, int limit,
        string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillacompanyowner - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<companyowner>();

                var LocalEnty = new companyowner();

                LocalEnty.companyowner1 = getValorFiltroStr(codigo);
                LocalEnty.description = getValorFiltroStr(descripcion);

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = Svccompanyowner.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = Svccompanyowner.listarcompanyowner(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

         /*********UNIDADA DE MEDIDA MINSA******************/
        public System.Web.Mvc.ActionResult CCEP9912_View()
        {
            Log.Information("GestionController - CCEP9912_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/UnidadMedidaMinsa/CCEP9912_View");
        }



        public System.Web.Mvc.ActionResult getGrillaUnidadMedidaMinsa(int start, int limit,string codigo ,string descripcion, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaUnidadMedidaMinsa - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_UnidadMedidaMinsa>();

                var LocalEnty = new SS_HC_UnidadMedidaMinsa();                
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Codigo = getValorFiltroStr(codigo);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcUnidadMedidaMinsa.setMantenimientoUMM(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcUnidadMedidaMinsa.listarUnidadMedidaMinsa(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }




        public System.Web.Mvc.ActionResult UnidadMedidaMinsaRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - UnidadMedidaMinsaRegistro - Entrar");
            var Listar = new List<SS_HC_UnidadMedidaMinsa>();

            SS_HC_UnidadMedidaMinsa objFiltro = new SS_HC_UnidadMedidaMinsa();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdUnidadMedida = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcUnidadMedidaMinsa.listarUnidadMedidaMinsa(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_UnidadMedidaMinsa objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/UnidadMedidaMinsa/UnidadMedidaMinsaRegistro", objFiltro, "");

        }

        public System.Web.Mvc.ActionResult postWindowUnidadMedidaMinsa(String id)
        {
            Log.Information("GestionController - postWindowUnidadMedidaMinsa - Entrar");

            SS_HC_UnidadMedidaMinsa objFiltro = new SS_HC_UnidadMedidaMinsa();
            var Listar = new List<SS_HC_UnidadMedidaMinsa>();

            var field = X.GetCmp<TextField>("nfIdPadre");
            if (field != null)
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.Codigo = getValorFiltroStr(id);
                Listar = SvcUnidadMedidaMinsa.listarUnidadMedidaMinsa(objFiltro, 0, 0);
                if (Listar.Count == 1)
                {
                    foreach (SS_HC_UnidadMedidaMinsa objEntity in Listar)
                    {
                        objFiltro = objEntity;
                        field.SetValue(objFiltro.IdUnidadMedida);
                    }
                }
            }
            setPropiedadesFormulario(true);
            return this.Direct();
        }
   


        public System.Web.Mvc.ActionResult save_UnidadMedidaMinsa(SS_HC_UnidadMedidaMinsa objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_UnidadMedidaMinsa - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTUNIDADMEDIDAMINSA);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcUnidadMedidaMinsa.setMantenimientoUMM(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }

        public System.Web.Mvc.ActionResult save_UnidadMedidaMinsaMedicamentos(WH_ItemMast objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_UnidadMedidaMinsaMedicamentos - Entrar");
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)        
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSMEDICAMENTOSMINSA);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "UPDATE_MINSA")
                        {
                            objFiltro.Accion = "UPDATE_MINSA";
                            accion = "modificó";
                        }

                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro

                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcMedicamentos.setMantenimiento(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }

        

        /************************GRUPO UNIDADMEDIDAMINSA PRODUCTOS*************************************/

        public System.Web.Mvc.ActionResult GrupoUnidadMedidaMinsaProductosRegistro(String MODO, String id_1, String descripcion, String desc)
        {
            Log.Information("GestionController - GrupoUnidadMedidaMinsaProductosRegistro - Entrar");

            var Listar = new List<WH_ItemMast>();
            WH_ItemMast objModel = new WH_ItemMast();
            objModel.Item = id_1;
            objModel.ClasificacionComercial = descripcion;
            objModel.Accion = MODO;
            objModel.UnidadCodigo = desc;

            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/UnidadMedidaMinsa/GrupoUnidadMedidaMinsaProductosRegistro", objModel, "");
        }

       
        public System.Web.Mvc.ActionResult save_grupoUnidadMedidaMinsaProductos(SS_HC_UnidadMedidaMinsa objFiltro, String MODO,
           String idWindow)
        {
            Log.Information("GestionController - save_grupoUnidadMedidaMinsaProductos - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTUNIDADMEDIDAMINSA);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcUnidadMedidaMinsa.setMantenimientoUMM(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }
        
        /***************Dominio ******************************/

         public System.Web.Mvc.ActionResult CCEP1002_View()
        {
            Log.Information("GestionController - CCEP1002_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/PAE/DOMINIOPAE/CCEP1002_View");
        }
         public System.Web.Mvc.ActionResult getGrillaDominioPAE(int start, int limit,
        string descripcion, string Codigo, string Estado, string tipoBuscar)
         {
             Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 var Listar = new List<SS_HC_DominioPAE>();

                 var LocalEnty = new SS_HC_DominioPAE();

                 LocalEnty.IdDominioPAE = (getValorFiltroInt(Codigo) != null ? Convert.ToInt32(getValorFiltroInt(Codigo)) : 0);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Estado = (getValorFiltroInt(Estado) != null ? Convert.ToInt32(getValorFiltroInt(Estado)) : 0);
                 //LocalEnty.FechaCreacion = getValorFiltroDate(FechaCreacion);

                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;

                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcDominio.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcDominio.listardominio(LocalEnty, inicio, final);
                 }

                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionDominioPAE(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionDominioPAE - Entrar");
            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             var nf = X.GetCmp<NumberField>("IdDominioPAE");
             nf.SetValue(id);


             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorDominioPAE(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorDominioPAE - Entrar");

            SS_HC_DominioPAE obj = new SS_HC_DominioPAE();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             //if (Session["MODULO_DEF"] != null)
             //{
             //    //  obj.Modulo = (string)Session["MODULO_DEF"];
             //}
             return crearWindowRegistro("SeleccionadorDominioPAE", obj, "");
         }
         public System.Web.Mvc.ActionResult DominioPAERegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - DominioPAERegistro - Entrar");

            var Listar = new List<SS_HC_DominioPAE>();

             SS_HC_DominioPAE objFiltro = new SS_HC_DominioPAE();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdDominioPAE = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcDominio.listardominio(objFiltro, 0, 0);
                 if (Listar.Count > 0)
                 {
                     foreach (SS_HC_DominioPAE objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/DOMINIOPAE/DominioPAERegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowDominioPAE(String id)
        {
            Log.Information("GestionController - postWindowDominioPAE - Entrar");

            SS_HC_DominioPAE objFiltro = new SS_HC_DominioPAE();
             var Listar = new List<SS_HC_DominioPAE>();


             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_DominioPAE(SS_HC_DominioPAE objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_DominioPAE - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTDOMINIOPAE);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcDominio.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }

         public System.Web.Mvc.ActionResult seleccionadorDominioPAEBusqueda(String accionSeleccion, String accionListado)
         {
            Log.Information("GestionController - seleccionadorDominioPAEBusqueda - Entrar");
            SS_HC_DominioPAE obj = new SS_HC_DominioPAE();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             if (Session["MODULO_DEF"] != null)
             {
                 //  obj.Modulo = (string)Session["MODULO_DEF"];
             }
             return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorDominioPAEBusqueda", obj, "");
         }

         public System.Web.Mvc.ActionResult getSeleccionadorDominioPAEBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorDominioPAEBusqueda - Entrar");

            SS_HC_DominioPAE obj = new SS_HC_DominioPAE();
             obj.Accion = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }

             var txt = X.GetCmp<TextField>("tfIdDominioPAEnom");
             txt.SetValue(descripcion);

             var txtDominioPAEId = X.GetCmp<TextField>("IdDominioPAE");
             txtDominioPAEId.SetValue(id);

             return this.Direct();


         }

        /***************************Clases*******************************************/
         public System.Web.Mvc.ActionResult CCEP1003_View()
        {
            Log.Information("GestionController - CCEP1003_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/CLASEPAE/CCEP1003_View");
         }        
         public System.Web.Mvc.ActionResult getGrillaClasePAE(int start, int limit,
         string descripcion, string Codigo, string Estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaClasePAE - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 var Listar = new List<SS_HC_ClasePAE>();

                 var LocalEnty = new SS_HC_ClasePAE();

                 LocalEnty.IdClasePAE = (getValorFiltroInt(Codigo) != null ? Convert.ToInt32(getValorFiltroInt(Codigo)) : 0);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Estado = (getValorFiltroInt(Estado) != null ? Convert.ToInt32(getValorFiltroInt(Estado)) : 0);
                 //LocalEnty.FechaCreacion = getValorFiltroDate(FechaCreacion);

                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;

                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcClase.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcClase.listarclase(LocalEnty, inicio, final);
                 }

                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionClasePAE(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionClasePAE - Entrar");
            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             var nf = X.GetCmp<NumberField>("IdClasePAE");
             nf.SetValue(id);


             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorClasePAE(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorClasePAE - Entrar");

            SS_HC_ClasePAE obj = new SS_HC_ClasePAE();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             //if (Session["MODULO_DEF"] != null)
             //{
             //    //  obj.Modulo = (string)Session["MODULO_DEF"];
             //}
             return crearWindowRegistro("seleccionadorClasePAE", obj, "");
         }
         public System.Web.Mvc.ActionResult ClasePAERegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - ClasePAERegistro - Entrar");

            var Listar = new List<SS_HC_ClasePAE>();

             SS_HC_ClasePAE objFiltro = new SS_HC_ClasePAE();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdClasePAE = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcClase.listarclase(objFiltro, 0, 0);
                 if (Listar.Count > 0)
                 {
                     foreach (SS_HC_ClasePAE objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/CLASEPAE/ClasePAERegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowClasePAE(String id)
        {
            Log.Information("GestionController - postWindowClasePAE - Entrar");

            SS_HC_ClasePAE objFiltro = new SS_HC_ClasePAE();
             var Listar = new List<SS_HC_ClasePAE>();


             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_ClasePAE(SS_HC_ClasePAE objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_ClasePAE - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTCLASEPAE);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcClase.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }

         public System.Web.Mvc.ActionResult seleccionadorClasePAEBusqueda(String accionSeleccion, String accionListado)
         {
            Log.Information("GestionController - seleccionadorClasePAEBusqueda - Entrar");
            SS_HC_ClasePAE obj = new SS_HC_ClasePAE();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             if (Session["MODULO_DEF"] != null)
             {
                 //  obj.Modulo = (string)Session["MODULO_DEF"];
             }
             return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorClasePAEBusqueda", obj, "");
         }

         public System.Web.Mvc.ActionResult getSeleccionadorClasePAEBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionadorClasePAEBusqueda - Entrar");

            SS_HC_ClasePAE obj = new SS_HC_ClasePAE();
             obj.Accion = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }

             var txt = X.GetCmp<TextField>("tfIdClasePAEnom");
             txt.SetValue(descripcion);

             var txtDominioPAEId = X.GetCmp<TextField>("IdClasePAE");
             txtDominioPAEId.SetValue(id);

             return this.Direct();


         }

        /***************************Nanda********************************************/

      public System.Web.Mvc.ActionResult CCEP1004_View()
        {
            Log.Information("GestionController - CCEP1004_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/NANDA/CCEP1004_View");
         }

      public System.Web.Mvc.ActionResult getGrillaNanda(int start, int limit, string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNanda - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 //ConsultaCita();
                 var Listar = new List<SS_HC_NANDA>();

                 var LocalEnty = new SS_HC_NANDA();
                 LocalEnty.CodigoPadre = getValorFiltroStr(codigo);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Estado = (getValorFiltroInt(estado) != null ? Convert.ToInt32(getValorFiltroInt(estado)) : 0);
                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;
                 //Si la búsqueda proviene de filtros
                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcNanda.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcNanda.listarNanda(LocalEnty, inicio, final);
                 }
                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
      public System.Web.Mvc.ActionResult getSeleccionPadreNanda(String MODO, int id, String codigo, String descripcion, String idWindow)
      {
            Log.Information("GestionController - getSeleccionPadreNanda - Entrar");

            SS_HC_NANDA obj = new SS_HC_NANDA();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          var nf = X.GetCmp<TextField>("nfIdPadre");
          nf.SetValue(codigo);          
          var txt = X.GetCmp<TextField>("CodigoPadre");
          txt.SetValue(codigo);
          var nf2 = X.GetCmp<NumberField>("nomPadre");
          nf2.SetValue(descripcion);
          //var nf2 = X.GetCmp<NumberField>("Descripcion");
          //nf2.SetValue(descripcion);
          //var txt = X.GetCmp<TextField>("CodigoPadre");
          //txt.SetValue(codigo);

          return this.Direct();
      }
            
      public System.Web.Mvc.ActionResult seleccionadorNanda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorNanda - Entrar");

            SS_HC_NANDA obj = new SS_HC_NANDA();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorNanda", obj, "");
      }
      
      public System.Web.Mvc.ActionResult NandaRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - NandaRegistro - Entrar");

            var Listar = new List<SS_HC_NANDA>();

          SS_HC_NANDA objFiltro = new SS_HC_NANDA();
          if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
          {
              objFiltro.Accion = "LISTAR";
              objFiltro.IdNanda = Convert.ToInt32(getValorFiltroInt(tipo));
              Listar = SvcNanda.listarNanda(objFiltro, 0, 0);
              if (Listar.Count == 1)
              {
                  foreach (SS_HC_NANDA objEntity in Listar)
                  {
                      objFiltro = objEntity;
                  }
                                   

              }             

          }
          else if (MODO == "NUEVO")
          {
              objFiltro.Accion = "NUEVO";
          }
          objFiltro.Accion = MODO;
          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NANDA/NandaRegistro", objFiltro, "");

      }

     
      
      public System.Web.Mvc.ActionResult postWindowNanda(String id)
        {
            Log.Information("GestionController - postWindowNanda - Entrar");

            SS_HC_NANDA objFiltro = new SS_HC_NANDA();
          var Listar = new List<SS_HC_NANDA>();

          var field = X.GetCmp<TextField>("nfIdPadre");

          var txt = X.GetCmp<TextField>("tfIdDominioPAEnom");
          var txtcl = X.GetCmp<TextField>("tfIdClasePAEnom");
          var txtnp = X.GetCmp<TextField>("nomPadre");
          
          if (field != null)
          {
              objFiltro.Accion = "LISTAR";
              objFiltro.IdNanda = Convert.ToInt32(id);
              Listar = SvcNanda.listarNanda(objFiltro, 0, 0);
              if (Listar.Count == 1)
              {
                  foreach (SS_HC_NANDA objEntity in Listar)
                  {
                      objFiltro = objEntity;
                      field.SetValue(objFiltro.IdNanda);
                      txt.SetValue(objFiltro.Version);
                      txtcl.SetValue(objFiltro.DescripcionCorta);
                      txtnp.SetValue(objFiltro.Accion);
                  }
              }
          }
          setPropiedadesFormulario(true);
          return this.Direct();
      }

      
      
      public System.Web.Mvc.ActionResult save_Nanda(SS_HC_NANDA objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Nanda - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNANDA);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcNanda.setMantenimiento(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }


      /********************VER DETALLE DE IMPRESIONHC*******************************/

      public System.Web.Mvc.ActionResult verDetalleImpresionHC(String MODO, String tipo,String tipo2, String tipo3)
      {
            Log.Information("GestionController - verDetalleImpresionHC - Entrar");

            var Listar = new List<SS_HC_ImpresionHC_Detalle>();
          SS_HC_ImpresionHC_Detalle objModel = new SS_HC_ImpresionHC_Detalle();
          objModel.HostImpresion =tipo;
          objModel.UsuarioImpresion = tipo2;
          objModel.IdImpresion = Convert.ToInt32(tipo3);
          objModel.Accion = MODO;

           Session["MENSAJES_VALFORM"] = null;
           cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/AuditoriaImpresion/verDetalleImpresionHC", objModel, "");


      }
           
      

        /*********************FACTOR RELACIONADO NANDA**************************************/

      //public System.Web.Mvc.ActionResult getGrillaFactorRelacionadoNanda(int start, int limit,
      //string descripcion, string codigo, string tipoBuscar)
      //{
      //    Boolean indicaValidacionForm = false;
      //    try
      //    {
      //        ENTITY_GLOBAL.Instance.GRUPO = "";
      //        //ConsultaCita();
      //        var Listar = new List<SS_HC_FactorRelacionadoNanda>();

      //        var LocalEnty = new SS_HC_FactorRelacionadoNanda();

      //        LocalEnty.IdFactorRelacionado = Convert.ToInt32(getValorFiltroStr(codigo));
      //        LocalEnty.Descripcion = getValorFiltroStr(descripcion);
            
      //        int inicio = (start == 0 ? start : start + 1);
      //        int final = start + limit;
      //        //Si la búsqueda proviene de filtros
      //        if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

      //        LocalEnty.Accion = "LISTARPAG";
      //        int cantElementos = SvcFactorRelacionadoNanda.setMantenimientoFRN(LocalEnty);
      //        if (cantElementos > 0)
      //        {
      //            LocalEnty.Accion = "LISTARPAG";
      //            Listar = SvcFactorRelacionadoNanda.listarFactorRelacionadoNanda(LocalEnty, inicio, final);
      //        }
      //        return this.Store(Listar, cantElementos);
      //    }
      //    catch (Exception ex)
      //    {
      //        EventLog.GenerarLogError(ex);
      //        var sqlException = ex.InnerException as SqlException;
      //        var detalle = new MA_MiscelaneosDetalle();
      //        detalle.ACCION = "ERRORES";
      //        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
      //        if (sqlException != null)
      //        {
      //            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
      //        }
      //        else
      //        {
      //            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
      //        }
      //        string mostrarExc = "Excepción genérica:";
      //        if (resultado.Count > 0)
      //        {
      //            mostrarExc = resultado[0].DescripcionLocal;
      //        }
      //        indicaValidacionForm = true;
      //        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
      //        throw;
      //    }
      //}


      public System.Web.Mvc.ActionResult getGrillaFactorRelacionadoNanda(int start, int limit,
             string IdNanda, string IdFactorRelacionado,  string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFactorRelacionadoNanda - Entrar");

            Boolean indicaValidacionForm = false;
          try
          {
              ENTITY_GLOBAL.Instance.GRUPO = "";
              //ConsultaCita();
              var Listar = new List<SS_HC_FactorRelacionadoNanda>();

              var LocalEnty = new SS_HC_FactorRelacionadoNanda();
              LocalEnty.IdNanda = Convert.ToInt32(getValorFiltroStr(IdNanda));
              LocalEnty.IdFactorRelacionado = Convert.ToInt32(getValorFiltroStr(IdFactorRelacionado));
              
              int inicio = (start == 0 ? start : start + 1);
              int final = start + limit;
              //Si la búsqueda proviene de filtros
              if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

              LocalEnty.Accion = "LISTARPAG";
              int cantElementos = SvcFactorRelacionadoNanda.setMantenimientoFRN(LocalEnty);
              if (cantElementos > 0)
              {
                  LocalEnty.Accion = "LISTARPAG";
                  Listar = SvcFactorRelacionadoNanda.listarFactorRelacionadoNanda(LocalEnty, inicio, final);
              }
              return this.Store(Listar, cantElementos);
          }
          catch (Exception ex)
          {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
              var sqlException = ex.InnerException as SqlException;
              var detalle = new MA_MiscelaneosDetalle();
              detalle.ACCION = "ERRORES";
              List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
              if (sqlException != null)
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
              }
              else
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
              }
              string mostrarExc = "Excepción genérica:";
              if (resultado.Count > 0)
              {
                  mostrarExc = resultado[0].DescripcionLocal;
              }
              indicaValidacionForm = true;
              return showMensajeNotify("Excepción", mostrarExc, "ERROR");
              throw;
          }
      }
     
      public System.Web.Mvc.ActionResult FactorRelacionadoNandaRegistro(String MODO, String id_1)
      {
            Log.Information("GestionController - FactorRelacionadoNandaRegistro - Entrar");

            var Listar = new List<SS_HC_FactorRelacionadoNanda>();
          SS_HC_FactorRelacionadoNanda objModel = new SS_HC_FactorRelacionadoNanda();
          objModel.IdNanda = Convert.ToInt32(getValorFiltroInt(id_1));         
        
          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NANDA/FactorRelacionadoNandaRegistro", objModel, "");

      }     

      public System.Web.Mvc.ActionResult getSeleccionFactorRelacionadoBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFactorRelacionadoBusqueda - Entrar");

            SS_HC_FactorRelacionado obj = new SS_HC_FactorRelacionado();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);

          var txt1 = X.GetCmp<TextField>("Descripcion");
          txt1.SetValue(descripcion);

          var txt = X.GetCmp<TextField>("tfIdFactorRelacionadonom");
          txt.SetValue(descripcion);

          var txtFactorRelacionadoId = X.GetCmp<TextField>("tfIdFactorRelacionado");
          txtFactorRelacionadoId.SetValue(id);

          return this.Direct();

          
      }

      public System.Web.Mvc.ActionResult getSeleccionFactorRelacionadoNanda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFactorRelacionadoNanda - Entrar");

            SS_HC_FactorRelacionadoNanda obj = new SS_HC_FactorRelacionadoNanda();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("IdFRN");
          txt.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult seleccionadorFactorRelacionadoBusqueda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFactorRelacionadoBusqueda - Entrar");

            SS_HC_FactorRelacionado obj = new SS_HC_FactorRelacionado();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorFactorRelacionadoBusqueda", obj, "");
      }

      public System.Web.Mvc.ActionResult save_FactorRelacionadoNanda(SS_HC_FactorRelacionadoNanda objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_FactorRelacionadoNanda - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTFACTORRELACIONADONANDA);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcFactorRelacionadoNanda.setMantenimientoFRN(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }

    

      /************************GRUPO NANDA FACTOR RELACIONADO*************************************/

      public System.Web.Mvc.ActionResult GrupoNandaFactorRelacionadoRegistro(String MODO, String id_1, String descripcion)
      {
            Log.Information("GestionController - GrupoNandaFactorRelacionadoRegistro - Entrar");
            var Listar = new List<SS_HC_FactorRelacionadoNanda>();
          SS_HC_FactorRelacionadoNanda objModel = new SS_HC_FactorRelacionadoNanda();
          objModel.IdNanda = Convert.ToInt32(getValorFiltroInt(id_1));
          objModel.Descripcion = descripcion;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NANDA/GrupoNandaFactorRelacionadoRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult add_DataDeleteGrupoFRN(
      String MODO, Nullable<int> id, Nullable<int> idnanda, Nullable<int> idfactorrelacionado)
        {
            Log.Information("GestionController - add_DataDeleteGrupoFRN - Entrar");

            List<SS_HC_FactorRelacionadoNanda> dataDelete = null;
          if (Session["DataGrupoFRNanda_Delete"] != null)
          {
              dataDelete = (List<SS_HC_FactorRelacionadoNanda>)Session["DataGrupoFRNanda_Delete"];
          }
          else
          {
              dataDelete = new List<SS_HC_FactorRelacionadoNanda>();
          }
          SS_HC_FactorRelacionadoNanda objDelete = new SS_HC_FactorRelacionadoNanda();
          objDelete.IdFRN = Convert.ToInt32(id);
          objDelete.IdNanda = Convert.ToInt32(idnanda);
          objDelete.IdFactorRelacionado = Convert.ToInt32(idfactorrelacionado);
          objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
          objDelete.Accion = MODO;
          dataDelete.Add(objDelete);
          Session["DataGrupoFRNanda_Delete"] = dataDelete;
          return this.Direct();
      }
      public System.Web.Mvc.ActionResult save_grupoFactorRelacionadoNanda(SS_HC_FactorRelacionadoNanda objSelecc, String MODO,
         String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_grupoFactorRelacionadoNanda - Entrar");

            int idResultado = -1000;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          if (objSelecc != null)
          {
              if (MODO == "NUEVO")
              {
                  objSelecc.Accion = "INSERT";
                  accion = "registró";
              }
              else if (MODO == "UPDATE")
              {
                  objSelecc.Accion = "UPDATE";
                  accion = "modificó";
              }
              else if (MODO == "DELETE")
              {
                  objSelecc.Accion = "DELETE";
                  accion = "eliminó";
              }
              else
              {
                  tipoMsg = "WARNING";
                  message = "No se encotró el MODO.";
                  tituloMsg = "Advertencia";
              }

              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              /////registro -delete
              List<SS_HC_FactorRelacionadoNanda> dataSaveGeneral = new List<SS_HC_FactorRelacionadoNanda>();
              List<SS_HC_FactorRelacionadoNanda> dataSave = null;
              List<SS_HC_FactorRelacionadoNanda> dataDelete = null;
              if (Session["DataGrupoFRNanda_Delete"] != null)
              {
                  dataDelete = (List<SS_HC_FactorRelacionadoNanda>)Session["DataGrupoFRNanda_Delete"];
              }
              if (dataDelete != null)
              {
                  dataSaveGeneral.AddRange(dataDelete);

              }
              /////registro -save                                
              if (data != null)
              {
                  dataSave = (List<SS_HC_FactorRelacionadoNanda>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_FactorRelacionadoNanda>));
                  if (dataSave != null)
                  {
                      dataSaveGeneral.AddRange(dataSave);
                  }
              }
              if (dataSaveGeneral.Count > 0)
              {


                  idResultado = SvcFactorRelacionadoNanda.setMantenimientoFRN(dataSaveGeneral);

              }
              //////////////////////FINAL
              if (idResultado > 0)
              {
                  message = "Se guardaron satisfactoriamente los cambios";
              }
              else if (idResultado == -1000)
              {
                  message = "No hubieron cambios que guardar. ";
              }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                  tituloMsg = "Error";
              }
              Session["DataGrupoFRNanda_Delete"] = null;
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
      }
    
      /****************************NANDA NOC*********************************************/

      public System.Web.Mvc.ActionResult getGrillaNocNanda(int start, int limit,
                  string IdNanda, string IdNoc, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNocNanda - Entrar");

            Boolean indicaValidacionForm = false;
          try
          {
              ENTITY_GLOBAL.Instance.GRUPO = "";
              //ConsultaCita();
              var Listar = new List<SS_HC_NandaNoc>();

              var LocalEnty = new SS_HC_NandaNoc();
              LocalEnty.IdNanda = Convert.ToInt32(getValorFiltroStr(IdNanda));
              LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));

              int inicio = (start == 0 ? start : start + 1);
              int final = start + limit;
              //Si la búsqueda proviene de filtros
              if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

              LocalEnty.Accion = "LISTARPAG";
              int cantElementos = SvcNocNanda.setMantenimientoNanNoc(LocalEnty);
              if (cantElementos > 0)
              {
                  LocalEnty.Accion = "LISTARPAG";
                  Listar = SvcNocNanda.listarNocNanda(LocalEnty, inicio, final);
              }
              return this.Store(Listar, cantElementos);
          }
          catch (Exception ex)
          {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
              var sqlException = ex.InnerException as SqlException;
              var detalle = new MA_MiscelaneosDetalle();
              detalle.ACCION = "ERRORES";
              List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
              if (sqlException != null)
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
              }
              else
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
              }
              string mostrarExc = "Excepción genérica:";
              if (resultado.Count > 0)
              {
                  mostrarExc = resultado[0].DescripcionLocal;
              }
              indicaValidacionForm = true;
              return showMensajeNotify("Excepción", mostrarExc, "ERROR");
              throw;
          }
      }        

      public System.Web.Mvc.ActionResult NocNandaRegistro(String MODO, String id_1)
      {
            Log.Information("GestionController - NocNandaRegistro - Entrar");

            var Listar = new List<SS_HC_NandaNoc>();
          SS_HC_NandaNoc objModel = new SS_HC_NandaNoc();
          objModel.IdNanda = Convert.ToInt32(getValorFiltroInt(id_1));

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NANDA/NocNandaRegistro", objModel, "");
      }  

      public System.Web.Mvc.ActionResult getSeleccionNocBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionNocBusqueda - Entrar");

            SS_HC_NOC2 obj = new SS_HC_NOC2();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt1 = X.GetCmp<TextField>("Descripcion");
          txt1.SetValue(descripcion);

          var txt = X.GetCmp<TextField>("tfIdNOCnom");
          txt.SetValue(descripcion);

          var txtNocId = X.GetCmp<TextField>("tfIdNoc");
          txtNocId.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult getSeleccionNocNanda(String MODO, String id, String codigo, String descripcion, String idWindow)
      {
            Log.Information("GestionController - getSeleccionNocNanda - Entrar");
            SS_HC_NandaNoc obj = new SS_HC_NandaNoc();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("IdNanNoc");
          txt.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult seleccionadorNocBusqueda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorNocBusqueda - Entrar");

            SS_HC_NOC2 obj = new SS_HC_NOC2();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorNocBusqueda", obj, "");
      }

      public System.Web.Mvc.ActionResult save_NocNanda(SS_HC_NandaNoc objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_NocNanda - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNOCNANDA);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcNocNanda.setMantenimientoNanNoc(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }

           

        /*************************GRUPO NANDA NOC***********************************************/

      public System.Web.Mvc.ActionResult GrupoNandaNocRegistro(String MODO, String id_1, String descripcion)
      {
            Log.Information("GestionController - GrupoNandaNocRegistro - Entrar");

            var Listar = new List<SS_HC_NandaNoc>();
          SS_HC_NandaNoc objModel = new SS_HC_NandaNoc();
          objModel.IdNanda = Convert.ToInt32(getValorFiltroInt(id_1));
          objModel.Descripcion = descripcion;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NANDA/GrupoNandaNocRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult add_DataDeleteGrupoNanNoc(
      String MODO, Nullable<int> id, Nullable<int> idnanda, Nullable<int> idnoc)
        {
            Log.Information("GestionController - add_DataDeleteGrupoNanNoc - Entrar");

            List<SS_HC_NandaNoc> dataDelete = null;
          if (Session["DataGrupoNanNoc_Delete"] != null)
          {
              dataDelete = (List<SS_HC_NandaNoc>)Session["DataGrupoNanNoc_Delete"];
          }
          else
          {
              dataDelete = new List<SS_HC_NandaNoc>();
          }
          SS_HC_NandaNoc objDelete = new SS_HC_NandaNoc();
          objDelete.IdNanNoc = Convert.ToInt32(id);
          objDelete.IdNanda = Convert.ToInt32(idnanda);
          objDelete.IdNoc = Convert.ToInt32(idnoc);
          objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
          objDelete.Accion = MODO;
          dataDelete.Add(objDelete);
          Session["DataGrupoNanNoc_Delete"] = dataDelete;
          return this.Direct();
      }

      public System.Web.Mvc.ActionResult save_grupoNocNanda(SS_HC_NandaNoc objSelecc, String MODO,
       String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_grupoNocNanda - Entrar");

            int idResultado = -1000;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          if (objSelecc != null)
          {
              if (MODO == "NUEVO")
              {
                  objSelecc.Accion = "INSERT";
                  accion = "registró";
              }
              else if (MODO == "UPDATE")
              {
                  objSelecc.Accion = "UPDATE";
                  accion = "modificó";
              }
              else if (MODO == "DELETE")
              {
                  objSelecc.Accion = "DELETE";
                  accion = "eliminó";
              }
              else
              {
                  tipoMsg = "WARNING";
                  message = "No se encotró el MODO.";
                  tituloMsg = "Advertencia";
              }

              objSelecc.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              /////registro -delete
              List<SS_HC_NandaNoc> dataSaveGeneral = new List<SS_HC_NandaNoc>();
              List<SS_HC_NandaNoc> dataSave = null;
              List<SS_HC_NandaNoc> dataDelete = null;
              if (Session["DataGrupoNanNoc_Delete"] != null)
              {
                  dataDelete = (List<SS_HC_NandaNoc>)Session["DataGrupoNanNoc_Delete"];
              }
              if (dataDelete != null)
              {
                  dataSaveGeneral.AddRange(dataDelete);

              }
              /////registro -save                                
              if (data != null)
              {
                  dataSave = (List<SS_HC_NandaNoc>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_NandaNoc>));
                  if (dataSave != null)
                  {
                      dataSaveGeneral.AddRange(dataSave);
                  }
              }
              if (dataSaveGeneral.Count > 0)
              {


                  idResultado = SvcNocNanda.setMantenimientoNanNoc(dataSaveGeneral);

              }
              //////////////////////FINAL
              if (idResultado > 0)
              {
                  message = "Se guardaron satisfactoriamente los cambios";
              }
              else if (idResultado == -1000)
              {
                  message = "No hubieron cambios que guardar. ";
              }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                  tituloMsg = "Error";
              }
              Session["DataGrupoNanNoc_Delete"] = null;
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
      }
      
      


        /**************************NOC - NIC ***************************************************/

      public System.Web.Mvc.ActionResult getGrillaNocNic(int start, int limit,
               string IdNoc, string IdNic, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNocNic - Entrar");

            Boolean indicaValidacionForm = false;
          try
          {
              ENTITY_GLOBAL.Instance.GRUPO = "";
              //ConsultaCita();
              var Listar = new List<SS_HC_NocNic>();

              var LocalEnty = new SS_HC_NocNic();
              LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));
              LocalEnty.IdNic = Convert.ToInt32(getValorFiltroStr(IdNic));

              int inicio = (start == 0 ? start : start + 1);
              int final = start + limit;
              //Si la búsqueda proviene de filtros
              if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

              LocalEnty.Accion = "LISTARPAG";
              int cantElementos = SvcNocNic.setMantenimientoNocNic(LocalEnty);
              if (cantElementos > 0)
              {
                  LocalEnty.Accion = "LISTARPAG";
                  Listar = SvcNocNic.listarNocNic(LocalEnty, inicio, final);
              }
              return this.Store(Listar, cantElementos);
          }
          catch (Exception ex)
          {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
              var sqlException = ex.InnerException as SqlException;
              var detalle = new MA_MiscelaneosDetalle();
              detalle.ACCION = "ERRORES";
              List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
              if (sqlException != null)
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
              }
              else
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
              }
              string mostrarExc = "Excepción genérica:";
              if (resultado.Count > 0)
              {
                  mostrarExc = resultado[0].DescripcionLocal;
              }
              indicaValidacionForm = true;
              return showMensajeNotify("Excepción", mostrarExc, "ERROR");
              throw;
          }
      }
      public System.Web.Mvc.ActionResult NocNicRegistro(String MODO, String id_1)
      {
            Log.Information("GestionController - NocNicRegistro - Entrar");

            var Listar = new List<SS_HC_NocNic>();
          SS_HC_NocNic objModel = new SS_HC_NocNic();
          objModel.IdNoc = Convert.ToInt32(getValorFiltroInt(id_1)); ;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NOC/NocNicRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult getSeleccionNicBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionNicBusqueda - Entrar");

            SS_HC_NIC obj = new SS_HC_NIC();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("tfIdNicnom");
          txt.SetValue(descripcion);

          var txt2 = X.GetCmp<TextField>("Descripcion");
          txt2.SetValue(descripcion);

          var txtNicId = X.GetCmp<TextField>("tfIdNic");
          txtNicId.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult getSeleccionNocNic(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionNocNic - Entrar");

            SS_HC_NocNic obj = new SS_HC_NocNic();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("IdNC");
          txt.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult seleccionadorNicBusqueda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorNicBusqueda - Entrar");

            SS_HC_NIC obj = new SS_HC_NIC();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NOC/SeleccionadorNicBusqueda", obj, "");
      }

      public System.Web.Mvc.ActionResult save_NocNic(SS_HC_NocNic objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_NocNic - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNOCNIC);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcNocNic.setMantenimientoNocNic(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }

        /******************************GRUPO NOC NIC***************************************************/

      public System.Web.Mvc.ActionResult GrupoNocNicRegistro(String MODO, String id_1, String descripcion)
      {
            Log.Information("GestionController - GrupoNocNicRegistro - Entrar");

            var Listar = new List<SS_HC_NocNic>();
          SS_HC_NocNic objModel = new SS_HC_NocNic();
          objModel.IdNoc = Convert.ToInt32(getValorFiltroInt(id_1));
          objModel.Descripcion = descripcion;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NOC/GrupoNocNicRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult add_DataDeleteGrupoNocNic(
      String MODO, Nullable<int> id, Nullable<int> idnoc, Nullable<int> idnic)
        {
            Log.Information("GestionController - add_DataDeleteGrupoNocNic - Entrar");

            List<SS_HC_NocNic> dataDelete = null;
          if (Session["DataGrupoNocNic_Delete"] != null)
          {
              dataDelete = (List<SS_HC_NocNic>)Session["DataGrupoNocNic_Delete"];
          }
          else
          {
              dataDelete = new List<SS_HC_NocNic>();
          }
          SS_HC_NocNic objDelete = new SS_HC_NocNic();
          objDelete.IdNC = Convert.ToInt32(id);
          objDelete.IdNoc = Convert.ToInt32(idnoc);
          objDelete.IdNic = Convert.ToInt32(idnic);
          objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
          objDelete.Accion = MODO;
          dataDelete.Add(objDelete);
          Session["DataGrupoNocNic_Delete"] = dataDelete;
          return this.Direct();
      }

      public System.Web.Mvc.ActionResult save_grupoNocNic(SS_HC_NocNic objSelecc, String MODO,
       String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_grupoNocNic - Entrar");

            int idResultado = -1000;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          if (objSelecc != null)
          {
              if (MODO == "NUEVO")
              {
                  objSelecc.Accion = "INSERT";
                  accion = "registró";
              }
              else if (MODO == "UPDATE")
              {
                  objSelecc.Accion = "UPDATE";
                  accion = "modificó";
              }
              else if (MODO == "DELETE")
              {
                  objSelecc.Accion = "DELETE";
                  accion = "eliminó";
              }
              else
              {
                  tipoMsg = "WARNING";
                  message = "No se encotró el MODO.";
                  tituloMsg = "Advertencia";
              }

              objSelecc.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              /////registro -delete
              List<SS_HC_NocNic> dataSaveGeneral = new List<SS_HC_NocNic>();
              List<SS_HC_NocNic> dataSave = null;
              List<SS_HC_NocNic> dataDelete = null;
              if (Session["DataGrupoNocNic_Delete"] != null)
              {
                  dataDelete = (List<SS_HC_NocNic>)Session["DataGrupoNocNic_Delete"];
              }
              if (dataDelete != null)
              {
                  dataSaveGeneral.AddRange(dataDelete);

              }
              /////registro -save                                
              if (data != null)
              {
                  dataSave = (List<SS_HC_NocNic>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_NocNic>));
                  if (dataSave != null)
                  {
                      dataSaveGeneral.AddRange(dataSave);
                  }
              }
              if (dataSaveGeneral.Count > 0)
              {


                  idResultado = SvcNocNic.setMantenimientoNocNic(dataSaveGeneral);

              }
              //////////////////////FINAL
              if (idResultado > 0)
              {
                  message = "Se guardaron satisfactoriamente los cambios";
              }
              else if (idResultado == -1000)
              {
                  message = "No hubieron cambios que guardar. ";
              }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                  tituloMsg = "Error";
              }
              Session["DataGrupoNanNoc_Delete"] = null;
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
      }





      
        /*******************************NOC INDICADOR******************************************************/
      public System.Web.Mvc.ActionResult getGrillaNocIndicador(int start, int limit,
            string IdNoc, string IdIndicadorPAE, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNocIndicador - Entrar");

            Boolean indicaValidacionForm = false;
          try
          {
              ENTITY_GLOBAL.Instance.GRUPO = "";
              //ConsultaCita();
              var Listar = new List<SS_HC_NOCIndicador>();

              var LocalEnty = new SS_HC_NOCIndicador();
              LocalEnty.IdNoc = Convert.ToInt32(getValorFiltroStr(IdNoc));
              LocalEnty.IdIndicadorPAE = Convert.ToInt32(getValorFiltroStr(IdIndicadorPAE));

              int inicio = (start == 0 ? start : start + 1);
              int final = start + limit;
              //Si la búsqueda proviene de filtros
              if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

              LocalEnty.Accion = "LISTARPAG";
              int cantElementos = SvcNocIndicador.setMantenimientoNocIndicador(LocalEnty);
              if (cantElementos > 0)
              {
                  LocalEnty.Accion = "LISTARPAG";
                  Listar = SvcNocIndicador.listarNocIndicador(LocalEnty, inicio, final);
              }
              return this.Store(Listar, cantElementos);
          }
          catch (Exception ex)
          {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
              var sqlException = ex.InnerException as SqlException;
              var detalle = new MA_MiscelaneosDetalle();
              detalle.ACCION = "ERRORES";
              List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
              if (sqlException != null)
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
              }
              else
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
              }
              string mostrarExc = "Excepción genérica:";
              if (resultado.Count > 0)
              {
                  mostrarExc = resultado[0].DescripcionLocal;
              }
              indicaValidacionForm = true;
              return showMensajeNotify("Excepción", mostrarExc, "ERROR");
              throw;
          }
      }
      public System.Web.Mvc.ActionResult NocIndicadorRegistro(String MODO, String id_1)
      {
            Log.Information("GestionController - NocIndicadorRegistro - Entrar");

            var Listar = new List<SS_HC_NOCIndicador>();
          SS_HC_NOCIndicador objModel = new SS_HC_NOCIndicador();
          objModel.IdNoc = Convert.ToInt32(getValorFiltroInt(id_1)); ;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NOC/NocIndicadorRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult getSeleccionIndicadorBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionIndicadorBusqueda - Entrar");

            SS_HC_IndicadorPAE obj = new SS_HC_IndicadorPAE();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("tfIdIndicadorPAENom");
          txt.SetValue(descripcion);

          var txt2 = X.GetCmp<TextField>("Descripcion");
          txt2.SetValue(descripcion);

          var txtIndicadorId = X.GetCmp<TextField>("tfIdIndicadorPAE");
          txtIndicadorId.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult getSeleccionNocIndicador(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionNocIndicador - Entrar");

            SS_HC_NOCIndicador obj = new SS_HC_NOCIndicador();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("IdNIN");
          txt.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult seleccionadorIndicadorBusqueda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorIndicadorBusqueda - Entrar");

            SS_HC_IndicadorPAE obj = new SS_HC_IndicadorPAE();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NOC/SeleccionadorIndicadorBusqueda", obj, "");
      }

      public System.Web.Mvc.ActionResult save_NocIndicador(SS_HC_NOCIndicador objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_NocIndicador - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNOCINDICADOR);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcNocIndicador.setMantenimientoNocIndicador(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }

        /*******************************GRUPO NOC INDICADOR************************************************/

      public System.Web.Mvc.ActionResult GrupoNocIndicadorRegistro(String MODO, String id_1, String descripcion)
      {
            Log.Information("GestionController - GrupoNocIndicadorRegistro - Entrar");

            var Listar = new List<SS_HC_NOCIndicador>();
          SS_HC_NOCIndicador objModel = new SS_HC_NOCIndicador();
          objModel.IdNoc = Convert.ToInt32(getValorFiltroInt(id_1));
          objModel.Descripcion = descripcion;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NOC/GrupoNocIndicadorRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult add_DataDeleteGrupoNocIndicador(
      String MODO, Nullable<int> id, Nullable<int> idnoc, Nullable<int> idindicador)
        {
            Log.Information("GestionController - add_DataDeleteGrupoNocIndicador - Entrar");

            List<SS_HC_NOCIndicador> dataDelete = null;
          if (Session["DataGrupoNocIndicador_Delete"] != null)
          {
              dataDelete = (List<SS_HC_NOCIndicador>)Session["DataGrupoNocIndicador_Delete"];
          }
          else
          {
              dataDelete = new List<SS_HC_NOCIndicador>();
          }
          SS_HC_NOCIndicador objDelete = new SS_HC_NOCIndicador();
          objDelete.IdNIN = Convert.ToInt32(id);
          objDelete.IdNoc = Convert.ToInt32(idnoc);
          objDelete.IdIndicadorPAE = Convert.ToInt32(idindicador);
          objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
          objDelete.Accion = MODO;
          dataDelete.Add(objDelete);
          Session["DataGrupoNocIndicador_Delete"] = dataDelete;
          return this.Direct();
      }

      public System.Web.Mvc.ActionResult save_grupoNocIndicador(SS_HC_NOCIndicador objSelecc, String MODO,
       String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_grupoNocIndicador - Entrar");

            int idResultado = -1000;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          if (objSelecc != null)
          {
              if (MODO == "NUEVO")
              {
                  objSelecc.Accion = "INSERT";
                  accion = "registró";
              }
              else if (MODO == "UPDATE")
              {
                  objSelecc.Accion = "UPDATE";
                  accion = "modificó";
              }
              else if (MODO == "DELETE")
              {
                  objSelecc.Accion = "DELETE";
                  accion = "eliminó";
              }
              else
              {
                  tipoMsg = "WARNING";
                  message = "No se encotró el MODO.";
                  tituloMsg = "Advertencia";
              }

              objSelecc.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              /////registro -delete
              List<SS_HC_NOCIndicador> dataSaveGeneral = new List<SS_HC_NOCIndicador>();
              List<SS_HC_NOCIndicador> dataSave = null;
              List<SS_HC_NOCIndicador> dataDelete = null;
              if (Session["DataGrupoNocIndicador_Delete"] != null)
              {
                  dataDelete = (List<SS_HC_NOCIndicador>)Session["DataGrupoNocIndicador_Delete"];
              }
              if (dataDelete != null)
              {
                  dataSaveGeneral.AddRange(dataDelete);

              }
              /////registro -save                                
              if (data != null)
              {
                  dataSave = (List<SS_HC_NOCIndicador>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_NOCIndicador>));
                  if (dataSave != null)
                  {
                      dataSaveGeneral.AddRange(dataSave);
                  }
              }
              if (dataSaveGeneral.Count > 0)
              {


                  idResultado = SvcNocIndicador.setMantenimientoNocIndicador(dataSaveGeneral);

              }
              //////////////////////FINAL
              if (idResultado > 0)
              {
                  message = "Se guardaron satisfactoriamente los cambios";
              }
              else if (idResultado == -1000)
              {
                  message = "No hubieron cambios que guardar. ";
              }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                  tituloMsg = "Error";
              }
              Session["DataGrupoNocIndicador_Delete"] = null;
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
      }


        /*************************************NIC ACTIVIDADPAE***************************************************/

      public System.Web.Mvc.ActionResult getGrillaNicActividad(int start, int limit,
          string IdNic, string IdActividad, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNicActividad - Entrar");

            Boolean indicaValidacionForm = false;
          try
          {
              ENTITY_GLOBAL.Instance.GRUPO = "";
              //ConsultaCita();
              var Listar = new List<SS_HC_NICActividad>();

              var LocalEnty = new SS_HC_NICActividad();
              LocalEnty.IdNic = Convert.ToInt32(getValorFiltroStr(IdNic));
              LocalEnty.IdActividad = Convert.ToInt32(getValorFiltroStr(IdActividad));

              int inicio = (start == 0 ? start : start + 1);
              int final = start + limit;
              //Si la búsqueda proviene de filtros
              if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

              LocalEnty.Accion = "LISTARPAG";
              int cantElementos = SvcNicActividad.setMantenimientoNicActividad(LocalEnty);
              if (cantElementos > 0)
              {
                  LocalEnty.Accion = "LISTARPAG";
                  Listar = SvcNicActividad.listarNicActividad(LocalEnty, inicio, final);
              }
              return this.Store(Listar, cantElementos);
          }
          catch (Exception ex)
          {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
              var sqlException = ex.InnerException as SqlException;
              var detalle = new MA_MiscelaneosDetalle();
              detalle.ACCION = "ERRORES";
              List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
              if (sqlException != null)
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
              }
              else
              {
                  resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
              }
              string mostrarExc = "Excepción genérica:";
              if (resultado.Count > 0)
              {
                  mostrarExc = resultado[0].DescripcionLocal;
              }
              indicaValidacionForm = true;
              return showMensajeNotify("Excepción", mostrarExc, "ERROR");
              throw;
          }
      }
      public System.Web.Mvc.ActionResult NicActividadesRegistro(String MODO, String id_1)
      {
            Log.Information("GestionController - NicActividadesRegistro - Entrar");


            var Listar = new List<SS_HC_NICActividad>();
          SS_HC_NICActividad objModel = new SS_HC_NICActividad();
          objModel.IdNic = Convert.ToInt32(getValorFiltroInt(id_1)); ;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NIC/NicActividadesRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult getSeleccionActividadBusqueda(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionActividadBusqueda - Entrar");

            SS_HC_Actividad obj = new SS_HC_Actividad();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("tfIdActividadNom");
          txt.SetValue(descripcion);

          var txt1 = X.GetCmp<TextField>("Descripcion");
          txt1.SetValue(descripcion);

          var txtActividadId = X.GetCmp<TextField>("tfIdActividad");
          txtActividadId.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult getSeleccionNicActividad(String MODO, String id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionNicActividad - Entrar");

            SS_HC_NICActividad obj = new SS_HC_NICActividad();
          obj.Accion = MODO;
          var win = X.GetCmp<Window>(idWindow);
          if (win != null)
          {
              win.Hide();
          }
          //var nf = X.GetCmp<NumberField>("nfIdPadre");
          //nf.SetValue(id);
          var txt = X.GetCmp<TextField>("IdNA");
          txt.SetValue(id);

          return this.Direct();
      }

      public System.Web.Mvc.ActionResult seleccionadorActividadBusqueda(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorActividadBusqueda - Entrar");

            SS_HC_Actividad obj = new SS_HC_Actividad();
          obj.UsuarioCreacion = accionListado; //AUXILIAR
          obj.Accion = accionSeleccion;
          if (Session["MODULO_DEF"] != null)
          {
              //  obj.Modulo = (string)Session["MODULO_DEF"];
          }
          return crearWindowRegistro("Maestros/PAE/NIC/SeleccionadorActividadBusqueda", obj, "");
      }

      public System.Web.Mvc.ActionResult save_NicActividad(SS_HC_NICActividad objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_NicActividad - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
          int idResultado = 0;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          Boolean indicaValidacionForm = false;

          if (objFiltro != null)
          {
              objFiltro.Accion = MODO;
              if (Session["MENSAJES_VALFORM"] != null)
              {
                  msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
              }
              else
              {
                  msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNICACTIVIDAD);
              }

              if (msgNoValido.Count > 0)
              {
                  message = msgNoValido[0].DESCRIPCION;
                  tipoMsg = "WARNING";
                  tituloMsg = "Advertencia";
                  indicaValidacionForm = true;
              }
              else
              {
                  try
                  {

                      if (MODO == "NUEVO")
                      {
                          objFiltro.Accion = "INSERT";
                          accion = "registró";
                      }
                      else if (MODO == "UPDATE")
                      {
                          objFiltro.Accion = "UPDATE";
                          accion = "modificó";
                      }
                      else if (MODO == "DELETE")
                      {
                          objFiltro.Accion = "DELETE";
                          accion = "eliminó";
                      }
                      else
                      {
                          tipoMsg = "WARNING";
                          message = "No se encontró el MODO.";
                          tituloMsg = "Advertencia";
                      }
                      try
                      {
                          //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                      }
                      catch (Exception e)
                      {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                      }
                      /////registro
                      objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                      objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                      idResultado = SvcNicActividad.setMantenimientoNicActividad(objFiltro);
                      //////////////////////FINAL
                      if (idResultado > 0)
                      {
                          message = "Se " + accion + " satisfactoriamente.";
                      }
                      else
                      {
                          tipoMsg = "ERROR";
                          message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                          tituloMsg = "Error";
                      }
                  }
                  catch (Exception ex)
                  {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                      var sqlException = ex.InnerException as SqlException;
                      var detalle = new MA_MiscelaneosDetalle();
                      detalle.ACCION = "ERRORES";
                      List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                      if (sqlException != null)
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                      }
                      else
                      {
                          resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                      }
                      string mostrarExc = "Excepción genérica:";
                      if (resultado.Count > 0)
                      {
                          mostrarExc = resultado[0].DescripcionLocal;
                      }
                      indicaValidacionForm = true;
                      return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                      throw;
                  }

              }
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          objFiltro.Accion = "INFO";
          if (indicaValidacionForm)
          {
              return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
          }
          else
          {
              return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

          }
      }

        /********************************GRUPO NIC ACTIVIDADPAE**********************************************/

      public System.Web.Mvc.ActionResult GrupoNicActividadRegistro(String MODO, String id_1, String descripcion)
      {
            Log.Information("GestionController - GrupoNicActividadRegistro - Entrar");

            var Listar = new List<SS_HC_NICActividad>();
          SS_HC_NICActividad objModel = new SS_HC_NICActividad();
          objModel.IdNic = Convert.ToInt32(getValorFiltroInt(id_1));
          objModel.Descripcion = descripcion;

          objModel.Accion = MODO;

          Session["MENSAJES_VALFORM"] = null;
          cargarPropiedadesFormulario(true);
          return crearWindowRegistro("Maestros/PAE/NIC/GrupoNicActividadRegistro", objModel, "");
      }

      public System.Web.Mvc.ActionResult add_DataDeleteGrupoNicActividad(
      String MODO, Nullable<int> id, Nullable<int> idnic, Nullable<int> idactividad)
        {
            Log.Information("GestionController - add_DataDeleteGrupoNicActividad - Entrar");

            List<SS_HC_NICActividad> dataDelete = null;
          if (Session["DataGrupoNicActividad_Delete"] != null)
          {
              dataDelete = (List<SS_HC_NICActividad>)Session["DataGrupoNicActividad_Delete"];
          }
          else
          {
              dataDelete = new List<SS_HC_NICActividad>();
          }
          SS_HC_NICActividad objDelete = new SS_HC_NICActividad();
          objDelete.IdNA = Convert.ToInt32(id);
          objDelete.IdNic = Convert.ToInt32(idnic);
          objDelete.IdActividad = Convert.ToInt32(idactividad);
          objDelete.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
          objDelete.Accion = MODO;
          dataDelete.Add(objDelete);
          Session["DataGrupoNicActividad_Delete"] = dataDelete;
          return this.Direct();
      }

      public System.Web.Mvc.ActionResult save_grupoNicActividad(SS_HC_NICActividad objSelecc, String MODO,
       String idWindow, String data, Nullable<int> id)
        {
            Log.Information("GestionController - save_grupoNicActividad - Entrar");

            int idResultado = -1000;
          String accion = "";
          String message = "";
          String tipoMsg = "INFO";
          String tituloMsg = "Mensaje";
          if (objSelecc != null)
          {
              if (MODO == "NUEVO")
              {
                  objSelecc.Accion = "INSERT";
                  accion = "registró";
              }
              else if (MODO == "UPDATE")
              {
                  objSelecc.Accion = "UPDATE";
                  accion = "modificó";
              }
              else if (MODO == "DELETE")
              {
                  objSelecc.Accion = "DELETE";
                  accion = "eliminó";
              }
              else
              {
                  tipoMsg = "WARNING";
                  message = "No se encotró el MODO.";
                  tituloMsg = "Advertencia";
              }

              objSelecc.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
              objSelecc.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
              /////registro -delete
              List<SS_HC_NICActividad> dataSaveGeneral = new List<SS_HC_NICActividad>();
              List<SS_HC_NICActividad> dataSave = null;
              List<SS_HC_NICActividad> dataDelete = null;
              if (Session["DataGrupoNicActividad_Delete"] != null)
              {
                  dataDelete = (List<SS_HC_NICActividad>)Session["DataGrupoNicActividad_Delete"];
              }
              if (dataDelete != null)
              {
                  dataSaveGeneral.AddRange(dataDelete);

              }
              /////registro -save                                
              if (data != null)
              {
                  dataSave = (List<SS_HC_NICActividad>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<SS_HC_NICActividad>));
                  if (dataSave != null)
                  {
                      dataSaveGeneral.AddRange(dataSave);
                  }
              }
              if (dataSaveGeneral.Count > 0)
              {


                  idResultado = SvcNicActividad.setMantenimientoNicActividad(dataSaveGeneral);

              }
              //////////////////////FINAL
              if (idResultado > 0)
              {
                  message = "Se guardaron satisfactoriamente los cambios";
              }
              else if (idResultado == -1000)
              {
                  message = "No hubieron cambios que guardar. ";
              }
              else
              {
                  tipoMsg = "ERROR";
                  message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                  tituloMsg = "Error";
              }
              Session["DataGrupoNicActividad_Delete"] = null;
          }
          else
          {
              tipoMsg = "ERROR";
              message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
              tituloMsg = "Error";
          }
          return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
      }

        /***************************Factor Relacionado*******************************/

        public System.Web.Mvc.ActionResult CCEP1005_View()
        {
            Log.Information("GestionController - CCEP1005_View - Entrar");


            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/FACTOR_RELACIONADO/CCEP1005_View");
         }
        public System.Web.Mvc.ActionResult getGrillaFactorRelacionado(int start, int limit,
         string codigo, string descripcion, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaFactorRelacionado - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                var Listar = new List<SS_HC_FactorRelacionado>();

                var LocalEnty = new SS_HC_FactorRelacionado();
                LocalEnty.Codigo = getValorFiltroStr(codigo);
                LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                LocalEnty.Estado = (getValorFiltroInt(estado) != null ? Convert.ToInt32(getValorFiltroInt(estado)) : 0);
                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;
                //Si la búsqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcFactorRelacionado.setMantenimientoFR(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcFactorRelacionado.listarFactorRelacionado(LocalEnty, inicio, final);
                }
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        public System.Web.Mvc.ActionResult getSeleccionFactorRelacionado(String MODO, int id, String codigo, String descripcion, String idWindow)
        {
            Log.Information("GestionController - getSeleccionFactorRelacionado - Entrar");
            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("IdFactorRelacionado");
            nf.SetValue(id);
          

            return this.Direct();
        }
        public System.Web.Mvc.ActionResult seleccionadorFactorRelacionado(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorFactorRelacionado - Entrar");

            SS_HC_FactorRelacionado obj = new SS_HC_FactorRelacionado();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             if (Session["MODULO_DEF"] != null)
             {
                 //  obj.Modulo = (string)Session["MODULO_DEF"];
             }
             return crearWindowRegistro("Maestros/PAE/NANDA/SeleccionadorFactorRelacionado", obj, "");
         }
                
        public System.Web.Mvc.ActionResult FactorRelacionadoRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - FactorRelacionadoRegistro - Entrar");

            var Listar = new List<SS_HC_FactorRelacionado>();

            SS_HC_FactorRelacionado objFiltro = new SS_HC_FactorRelacionado();
            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                objFiltro.Accion = "LISTAR";
                objFiltro.IdFactorRelacionado = Convert.ToInt32(getValorFiltroInt(tipo));
                Listar = SvcFactorRelacionado.listarFactorRelacionado(objFiltro, 0, 0);
                if (Listar.Count > 0)
                {
                    foreach (SS_HC_FactorRelacionado objEntity in Listar)
                    {
                        objFiltro = objEntity;
                    }
                }
            }
            else if (MODO == "NUEVO")
            {
                objFiltro.Accion = "NUEVO";
            }
            objFiltro.Accion = MODO;
            Session["MENSAJES_VALFORM"] = null;
            cargarPropiedadesFormulario(true);
            return crearWindowRegistro("Maestros/PAE/FACTOR_RELACIONADO/FactorRelacionadoRegistro", objFiltro, "");
        }      
       
         public System.Web.Mvc.ActionResult postWindowFactorRelacionado(String id)
        {
            Log.Information("GestionController - postWindowFactorRelacionado - Entrar");

            SS_HC_FactorRelacionado objFiltro = new SS_HC_FactorRelacionado();
            var Listar = new List<SS_HC_FactorRelacionado>();
          

            setPropiedadesFormulario(true);
            return this.Direct();
        }
         
         public System.Web.Mvc.ActionResult save_FactorRelacionado(SS_HC_FactorRelacionado objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_FactorRelacionado - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;

            if (objFiltro != null)
            {
                objFiltro.Accion = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTFACTORRELACIONADO);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {

                        if (MODO == "NUEVO")
                        {
                            objFiltro.Accion = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objFiltro.Accion = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objFiltro.Accion = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encontró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        /////registro
                        objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcFactorRelacionado.setMantenimientoFR(objFiltro);
                        //////////////////////FINAL
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }

                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objFiltro.Accion = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

            }
        }

         

         /***************************NOC********************************************/
         
         public System.Web.Mvc.ActionResult CCEP1006_View()
         {
            Log.Information("GestionController - CCEP1006_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/NOC/CCEP1006_View");
         }
         public System.Web.Mvc.ActionResult getGrillaNoc(int start, int limit,
               string descripcion, string codigoPadre, string tipoNivel, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNoc - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 //ConsultaCita();
                 var Listar = new List<SS_HC_NOC2>();

                 var LocalEnty = new SS_HC_NOC2();
                 LocalEnty.CodigoPadre = getValorFiltroStr(codigoPadre);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Nivel = (getValorFiltroInt(tipoNivel) != null ? Convert.ToInt32(getValorFiltroInt(tipoNivel)) : 0);
                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;
                 //Si la búsqueda proviene de filtros
                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcNoc.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcNoc.listarNoc(LocalEnty, inicio, final);
                 }
                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionPadreNoc(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionPadreNoc - Entrar");
            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             //var nf = X.GetCmp<NumberField>("nfIdPadre");
             //nf.SetValue(id);
             var nf = X.GetCmp<TextField>("nfIdPadre");
             nf.SetValue(codigo);
             var txt = X.GetCmp<TextField>("CodigoPadre");
             txt.SetValue(codigo);
             var nf2 = X.GetCmp<NumberField>("nomPadre");
             nf2.SetValue(descripcion);
             //var txt = X.GetCmp<TextField>("Descripcion");
             //txt.SetValue(descripcion);

             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorNoc(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorNoc - Entrar");

            SS_HC_NOC2 obj = new SS_HC_NOC2();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             if (Session["MODULO_DEF"] != null)
             {
                 //  obj.Modulo = (string)Session["MODULO_DEF"];
             }
             return crearWindowRegistro("Maestros/PAE/NOC/SeleccionadorNoc", obj, "");
         }        
         public System.Web.Mvc.ActionResult NocRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - NocRegistro - Entrar");

            var Listar = new List<SS_HC_NOC2>();

             SS_HC_NOC2 objFiltro = new SS_HC_NOC2();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdNoc = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcNoc.listarNoc(objFiltro, 0, 0);
                 if (Listar.Count == 1)
                 {
                     foreach (SS_HC_NOC2 objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/NOC/NocRegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowNoc(String id)
        {
            Log.Information("GestionController - postWindowNoc - Entrar");

            SS_HC_NOC2 objFiltro = new SS_HC_NOC2();
             var Listar = new List<SS_HC_NOC2>();

             var field = X.GetCmp<TextField>("nfIdPadre");
             var txtnp = X.GetCmp<TextField>("nomPadre");

             if (field != null)
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdNoc = Convert.ToInt32(id);
                 Listar = SvcNoc.listarNoc(objFiltro, 0, 0);
                 if (Listar.Count == 1)
                 {
                     foreach (SS_HC_NOC2 objEntity in Listar)
                     {
                         objFiltro = objEntity;
                         field.SetValue(objFiltro.IdNoc);
                         txtnp.SetValue(objFiltro.Accion);
                     }
                 }
             }
             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_Noc(SS_HC_NOC2 objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Noc - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNOC2);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcNoc.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }
                

         /***************************NIC*******************************************/

         public System.Web.Mvc.ActionResult CCEP1007_View()
         {
            Log.Information("GestionController - CCEP1007_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/NIC/CCEP1007_View");
         }
         public System.Web.Mvc.ActionResult getGrillaNic(int start, int limit,
              string descripcion, string codigoPadre, string tipoNivel, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaNic - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 //ConsultaCita();
                 var Listar = new List<SS_HC_NIC>();

                 var LocalEnty = new SS_HC_NIC();
                 LocalEnty.CodigoPadre = getValorFiltroStr(codigoPadre);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Nivel = (getValorFiltroInt(tipoNivel) != null ? Convert.ToInt32(getValorFiltroInt(tipoNivel)) : 0);
                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;
                 //Si la búsqueda proviene de filtros
                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcNic.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcNic.listarNic(LocalEnty, inicio, final);
                 }
                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionPadreNic(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionPadreNic - Entrar");
            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             //var nf = X.GetCmp<NumberField>("nfIdPadre");
             //nf.SetValue(id);
             var nf = X.GetCmp<NumberField>("nfIdPadre");
             nf.SetValue(codigo);
            // var txt0 = X.GetCmp<TextField>("Descripcion");
            // txt0.SetValue(descripcion);             
             var txt = X.GetCmp<TextField>("CodigoPadre");
             txt.SetValue(codigo);
             var nf2 = X.GetCmp<NumberField>("nomPadre");
             nf2.SetValue(descripcion);

           /*  var txt3 = X.GetCmp<TextField>("AlertaNIC");

             int cod = Int32.Parse(codigo);

             if (id == cod)
             {
                 txt3.SetValue("No se puede");
             }
             else { txt3.SetValue(""); }


             */


             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorNic(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorNic - Entrar");

            SS_HC_NIC obj = new SS_HC_NIC();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             if (Session["MODULO_DEF"] != null)
             {
                 //  obj.Modulo = (string)Session["MODULO_DEF"];
             }
             return crearWindowRegistro("Maestros/PAE/NIC/SeleccionadorNic", obj, "");
         }
         public System.Web.Mvc.ActionResult NicRegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - NicRegistro - Entrar");

            var Listar = new List<SS_HC_NIC>();

             SS_HC_NIC objFiltro = new SS_HC_NIC();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdNIC = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcNic.listarNic(objFiltro, 0, 0);
                 if (Listar.Count == 1)
                 {
                     foreach (SS_HC_NIC objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/NIC/NicRegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowNic(String id)
        {
            Log.Information("GestionController - postWindowNic - Entrar");

            SS_HC_NIC objFiltro = new SS_HC_NIC();
             var Listar = new List<SS_HC_NIC>();

             var field = X.GetCmp<TextField>("nfIdPadre");
             if (field != null)
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdNIC = Convert.ToInt32(id);
                 var txtnp = X.GetCmp<TextField>("nomPadre");
                 Listar = SvcNic.listarNic(objFiltro, 0, 0);
                 if (Listar.Count == 1)
                 {
                     foreach (SS_HC_NIC objEntity in Listar)
                     {
                         objFiltro = objEntity;
                         field.SetValue(objFiltro.IdNIC);
                         txtnp.SetValue(objFiltro.Accion);
                     }
                 }
             }
             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_Nic(SS_HC_NIC objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Nic - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTNIC);
                 }


                 if (objFiltro.Codigo == objFiltro.CodigoPadre) {
                     //return showMensajeBotton("ERROR!", "ERROR", "WARNING");
                     return showMensajeNotify("Excepción", "ER", "ERROR");
                 }


                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcNic.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }

         /***************************Indicadores**************************************/

         public System.Web.Mvc.ActionResult CCEP1008_View()
         {
            Log.Information("GestionController - CCEP1008_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/INDICADOR/CCEP1008_View");
         }
         public System.Web.Mvc.ActionResult getGrillaIndicadorPAE(int start, int limit,
         string descripcion, string Codigo, string Estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaIndicadorPAE - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 var Listar = new List<SS_HC_IndicadorPAE>();

                 var LocalEnty = new SS_HC_IndicadorPAE();

                 LocalEnty.IdIndicadorPAE = (getValorFiltroInt(Codigo) != null ? Convert.ToInt32(getValorFiltroInt(Codigo)) : 0);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Estado = (getValorFiltroInt(Estado) != null ? Convert.ToInt32(getValorFiltroInt(Estado)) : 0);
                 //LocalEnty.FechaCreacion = getValorFiltroDate(FechaCreacion);

                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;

                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcIndicador.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcIndicador.listarindicador(LocalEnty, inicio, final);
                 }

                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionIndicadorPAE(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionIndicadorPAE - Entrar");
            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             var nf = X.GetCmp<NumberField>("IdIndicadorPAE");
             nf.SetValue(id);


             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorIndicadorPAE(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorIndicadorPAE - Entrar");

            SS_HC_IndicadorPAE obj = new SS_HC_IndicadorPAE();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             //if (Session["MODULO_DEF"] != null)
             //{
             //    //  obj.Modulo = (string)Session["MODULO_DEF"];
             //}
             return crearWindowRegistro("seleccionadorIndicadorPAE", obj, "");
         }
         public System.Web.Mvc.ActionResult IndicadorPAERegistro(String MODO, String tipo)
        {
            Log.Information("GestionController - IndicadorPAERegistro - Entrar");

            var Listar = new List<SS_HC_IndicadorPAE>();

             SS_HC_IndicadorPAE objFiltro = new SS_HC_IndicadorPAE();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdIndicadorPAE = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcIndicador.listarindicador(objFiltro, 0, 0);
                 if (Listar.Count > 0)
                 {
                     foreach (SS_HC_IndicadorPAE objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/INDICADOR/IndicadorPAERegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowIndicadorPAE(String id)
        {
            Log.Information("GestionController - postWindowIndicadorPAE - Entrar");

            SS_HC_IndicadorPAE objFiltro = new SS_HC_IndicadorPAE();
             var Listar = new List<SS_HC_IndicadorPAE>();


             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_IndicadorPAE(SS_HC_IndicadorPAE objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_IndicadorPAE - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTINDICADORPAE);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);

                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcIndicador.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);

                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }


        
         /***************************Actividades********************************************/

         public System.Web.Mvc.ActionResult CCEP1009_View()
         {
            Log.Information("GestionController - CCEP1009_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
             cargarPermisosFormato(true);
             /*********************/
             return View("Maestros/PAE/ACTIVIDADES/CCEP1009_View");
         }

         public System.Web.Mvc.ActionResult getGrillaActividades(int start, int limit,
         string descripcion, string Codigo, string Estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaActividades - Entrar");

            Boolean indicaValidacionForm = false;
             try
             {
                 ENTITY_GLOBAL.Instance.GRUPO = "";
                 var Listar = new List<SS_HC_Actividad>();

                 var LocalEnty = new SS_HC_Actividad();

                 LocalEnty.IdActividad = (getValorFiltroInt(Codigo) != null ? Convert.ToInt32(getValorFiltroInt(Codigo)) : 0);
                 LocalEnty.Descripcion = getValorFiltroStr(descripcion);
                 LocalEnty.Estado = (getValorFiltroInt(Estado) != null ? Convert.ToInt32(getValorFiltroInt(Estado)) : 0);
                 //LocalEnty.FechaCreacion = getValorFiltroDate(FechaCreacion);

                 int inicio = (start == 0 ? start : start + 1);
                 int final = start + limit;

                 if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                 LocalEnty.Accion = "LISTARPAG";
                 int cantElementos = SvcActividades.setMantenimiento(LocalEnty);
                 if (cantElementos > 0)
                 {
                     LocalEnty.Accion = "LISTARPAG";
                     Listar = SvcActividades.listarActividades(LocalEnty, inicio, final);
                 }

                 return this.Store(Listar, cantElementos);
             }
             catch (Exception ex)
             {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                 var sqlException = ex.InnerException as SqlException;
                 var detalle = new MA_MiscelaneosDetalle();
                 detalle.ACCION = "ERRORES";
                 List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                 if (sqlException != null)
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                 }
                 else
                 {
                     resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                 }
                 string mostrarExc = "Excepción genérica:";
                 if (resultado.Count > 0)
                 {
                     mostrarExc = resultado[0].DescripcionLocal;
                 }
                 indicaValidacionForm = true;
                 return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                 throw;
             }
         }
         public System.Web.Mvc.ActionResult getSeleccionActividades(String MODO, int id, String codigo, String descripcion, String idWindow)
         {
            Log.Information("GestionController - getSeleccionActividades - Entrar");

            USUARIO obj = new USUARIO();
             obj.ACCION = MODO;
             var win = X.GetCmp<Window>(idWindow);
             if (win != null)
             {
                 win.Hide();
             }
             var nf = X.GetCmp<NumberField>("IdActividad");
             nf.SetValue(id);


             return this.Direct();
         }
         public System.Web.Mvc.ActionResult seleccionadorActividades(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorActividades - Entrar");

            SS_HC_Actividad obj = new SS_HC_Actividad();
             obj.UsuarioCreacion = accionListado; //AUXILIAR
             obj.Accion = accionSeleccion;
             //if (Session["MODULO_DEF"] != null)
             //{
             //    //  obj.Modulo = (string)Session["MODULO_DEF"];
             //}
             return crearWindowRegistro("seleccionadorActividades", obj, "");
         }
         public System.Web.Mvc.ActionResult ActividadesRegistro(String MODO, String tipo)
         {
            Log.Information("GestionController - ActividadesRegistro - Entrar");

            var Listar = new List<SS_HC_Actividad>();

             SS_HC_Actividad objFiltro = new SS_HC_Actividad();
             if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
             {
                 objFiltro.Accion = "LISTAR";
                 objFiltro.IdActividad = Convert.ToInt32(getValorFiltroInt(tipo));
                 Listar = SvcActividades.listarActividades(objFiltro, 0, 0);
                 if (Listar.Count > 0)
                 {
                     foreach (SS_HC_Actividad objEntity in Listar)
                     {
                         objFiltro = objEntity;
                     }
                 }
             }
             else if (MODO == "NUEVO")
             {
                 objFiltro.Accion = "NUEVO";
             }
             objFiltro.Accion = MODO;
             Session["MENSAJES_VALFORM"] = null;
             cargarPropiedadesFormulario(true);
             return crearWindowRegistro("Maestros/PAE/ACTIVIDADES/ActividadesRegistro", objFiltro, "");
         }
         public System.Web.Mvc.ActionResult postWindowActividades(String id)
        {
            Log.Information("GestionController - postWindowActividades - Entrar");

            SS_HC_Actividad objFiltro = new SS_HC_Actividad();
             var Listar = new List<SS_HC_Actividad>();


             setPropiedadesFormulario(true);
             return this.Direct();
         }
         public System.Web.Mvc.ActionResult save_Actividades(SS_HC_Actividad objFiltro, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_Actividades - Entrar");

            List<ENTITY_MENSAJES> msgNoValido = null;
             int idResultado = 0;
             String accion = "";
             String message = "";
             String tipoMsg = "INFO";
             String tituloMsg = "Mensaje";
             Boolean indicaValidacionForm = false;

             if (objFiltro != null)
             {
                 objFiltro.Accion = MODO;
                 if (Session["MENSAJES_VALFORM"] != null)
                 {
                     msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                 }
                 else
                 {
                     msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objFiltro, UTILES_MENSAJES.FORM_MSTACTIVIDADES);
                 }

                 if (msgNoValido.Count > 0)
                 {
                     message = msgNoValido[0].DESCRIPCION;
                     tipoMsg = "WARNING";
                     tituloMsg = "Advertencia";
                     indicaValidacionForm = true;
                 }
                 else
                 {
                     try
                     {

                         if (MODO == "NUEVO")
                         {
                             objFiltro.Accion = "INSERT";
                             accion = "registró";
                         }
                         else if (MODO == "UPDATE")
                         {
                             objFiltro.Accion = "UPDATE";
                             accion = "modificó";
                         }
                         else if (MODO == "DELETE")
                         {
                             objFiltro.Accion = "DELETE";
                             accion = "eliminó";
                         }
                         else
                         {
                             tipoMsg = "WARNING";
                             message = "No se encontró el MODO.";
                             tituloMsg = "Advertencia";
                         }
                         try
                         {
                             //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                         }
                         catch (Exception e)
                         {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                         }
                         /////registro
                         objFiltro.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                         objFiltro.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                         idResultado = SvcActividades.setMantenimiento(objFiltro);
                         //////////////////////FINAL
                         if (idResultado > 0)
                         {
                             message = "Se " + accion + " satisfactoriamente.";
                         }
                         else
                         {
                             tipoMsg = "ERROR";
                             message = "No se pudieron guardar los cambios. Sucedió un error en la operación.";
                             tituloMsg = "Error";
                         }
                     }
                     catch (Exception ex)
                     {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                         var sqlException = ex.InnerException as SqlException;
                         var detalle = new MA_MiscelaneosDetalle();
                         detalle.ACCION = "ERRORES";
                         List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                         if (sqlException != null)
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                         }
                         else
                         {
                             resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                         }
                         string mostrarExc = "Excepción genérica:";
                         if (resultado.Count > 0)
                         {
                             mostrarExc = resultado[0].DescripcionLocal;
                         }
                         indicaValidacionForm = true;
                         return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                         throw;
                     }

                 }
             }
             else
             {
                 tipoMsg = "ERROR";
                 message = "No se pudieron guardar los cambios. No se recibió el objeto vinculado.";
                 tituloMsg = "Error";
             }
             objFiltro.Accion = "INFO";
             if (indicaValidacionForm)
             {
                 return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
             }
             else
             {
                 return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");

             }
         }
                 
        
        /*******************    ServicioPrestacion   **********************/
        public System.Web.Mvc.ActionResult CCEP5013_View()
        {
            Log.Information("GestionController - CCEP5013_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Prestaciones/CCEP5013_View");
        }
        public System.Web.Mvc.ActionResult getGrillaServicioPrestacion(int start, int limit,
        string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaServicioPrestacion - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<VW_ServicioPrestacion>();

                var LocalEnty = new VW_ServicioPrestacion();

                LocalEnty.Componente = getValorFiltroStr(codigo);
                LocalEnty.Nombre = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroInt(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }


                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }


                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcVW_ServicioPrestacion.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcVW_ServicioPrestacion.listarVW_ServicioPrestacion(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /*******************    WH_ClaseLinea   **********************/
        public System.Web.Mvc.ActionResult CCEP5018_View()
        {
            Log.Information("GestionController - CCEP5018_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ClaseLinea/CCEP5018_View");
        }
        public System.Web.Mvc.ActionResult getGrillaWH_ClaseLinea(int start, int limit,
        string descripcion, string codigo, string estado, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaWH_ClaseLinea - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<WH_ClaseLinea>();

                var LocalEnty = new WH_ClaseLinea();

                LocalEnty.Linea = getValorFiltroStr(codigo);
                LocalEnty.DescripcionLocal = getValorFiltroStr(descripcion);
                LocalEnty.Estado = getValorFiltroStr(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcWH_ClaseLinea.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcWH_ClaseLinea.listarWH_ClaseLinea(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /*******************    WH_ClaseFamilia   **********************/
        public System.Web.Mvc.ActionResult CCEP5019_View()
        {
            Log.Information("GestionController - CCEP5019_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ClaseFamilia/CCEP5019_View");
        }

        public System.Web.Mvc.ActionResult getGrillaWH_ClaseFamilia(int start, int limit,
        string descripcion, string codigo, string estado, string linea, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaWH_ClaseFamilia - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<WH_ClaseFamilia>();

                var LocalEnty = new WH_ClaseFamilia();

                LocalEnty.Familia = getValorFiltroStr(codigo);
                LocalEnty.DescripcionLocal = getValorFiltroStr(descripcion);
                LocalEnty.Linea = getValorFiltroStr(linea);
                LocalEnty.Estado = getValorFiltroStr(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcWH_ClaseFamilia.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcWH_ClaseFamilia.listarWH_ClaseFamilia(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);

                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        /*******************    WH_ClaseSubFamilia   **********************/
        public System.Web.Mvc.ActionResult CCEP5020_View()
        {
            Log.Information("GestionController - CCEP5020_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ClaseSubFamilia/CCEP5020_View");
        }

        public System.Web.Mvc.ActionResult getGrillaWH_ClaseSubFamilia(int start, int limit,
        string descripcion, string codigo, string estado, string linea, string familia, string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaWH_ClaseSubFamilia - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                var Listar = new List<WH_ClaseSubFamilia>();

                var LocalEnty = new WH_ClaseSubFamilia();

                LocalEnty.SubFamilia = getValorFiltroStr(codigo);
                LocalEnty.DescripcionLocal = getValorFiltroStr(descripcion);
                LocalEnty.Linea = getValorFiltroStr(linea);
                LocalEnty.Familia = getValorFiltroStr(familia);
                LocalEnty.Estado = getValorFiltroStr(estado);
                if (estado == "")
                {
                    LocalEnty.Estado = null;
                }

                int inicio = (start == 0 ? start : start + 1);
                int final = start + limit;

                if (tipoBuscar == "FILTRO") { inicio = 0; final = limit; }

                LocalEnty.Accion = "LISTARPAG";
                int cantElementos = SvcWH_ClaseSubFamilia.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.Accion = "LISTARPAG";
                    Listar = SvcWH_ClaseSubFamilia.listarWH_ClaseSubFamilia(LocalEnty, inicio, final);
                }

                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

       
        /***MAESTRO HORARIO***/

        public System.Web.Mvc.ActionResult CCEP6001_View() // Seguridad PAginas
        {
            Log.Information("GestionController - CCEP6001_View - Entrar");
            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/Horarios/CCEP6001_View");

        }
        public System.Web.Mvc.ActionResult getGrillaListadoHorarios(int start, int limit,
            string tiporegistro, string tipoatencion, string grupoatencion,
            string servicio, string especialidad, string consultorio, string medico,
            string presentacion, string periodo, string turno,            
            string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaListadoHorarios - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<SS_CC_Horario>();

                var LocalEnty = new SS_CC_Horario();

                LocalEnty.Medico = getValorFiltroInt(medico);
                LocalEnty.TipoRegistroHorario = getValorFiltroInt(tiporegistro);
                LocalEnty.Periodo = getValorFiltroInt(periodo);
                LocalEnty.IdEspecialidad = getValorFiltroInt(especialidad);
                LocalEnty.IdConsultorio = getValorFiltroInt(consultorio);
                LocalEnty.IdServicio = getValorFiltroInt(servicio);
                LocalEnty.IdGrupoAtencionCompartido = getValorFiltroInt(grupoatencion);
                LocalEnty.IdTurno = getValorFiltroInt(turno);

                

                //(descripcion != null ? (descripcion.Trim().Length>0?descripcion.Trim():null) : null);
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }                          

                LocalEnty.ACCION = "LISTARPAG";
                int cantElementos = SvcSS_CC_Horario.setMantenimiento(LocalEnty);
                if (cantElementos > 0)
                {
                    LocalEnty.ACCION = "LISTARPAG";
                    Listar = SvcSS_CC_Horario.listarSS_CC_Horario(LocalEnty, ini,fin);
                }
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar, cantElementos);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }

        public System.Web.Mvc.ActionResult HorarioRegistro(String MODO, int id)
        {
            Log.Information("GestionController - HorarioRegistro - Entrar");

            var Listar = new List<SS_CC_Horario>();
            SS_CC_Horario objModel = new SS_CC_Horario();

            if (MODO == "UPDATE" || MODO == "DELETE" || MODO == "VER")
            {
                if (id > 0)
                {
                    objModel.ACCION = "LISTAR";
                    objModel.IdHorario = id;
                    Listar = SvcSS_CC_Horario.listarSS_CC_Horario(objModel, 0, 0);
                    if (Listar.Count > 0)
                    {
                        objModel = Listar[0];
                    }
                }
                else
                {
                }
            }
            objModel.ACCION = MODO;
            return crearWindowRegistro("Maestros/Horarios/HorarioRegistro", objModel, "");
        }

        public System.Web.Mvc.ActionResult HorarioDetalleDia(String MODO, String fechaSelecc , Nullable<int> id)
        {
            Log.Information("GestionController - HorarioDetalleDia - Entrar");

            var Listar = new List<SS_CC_Horario>();
            SS_CC_Horario objModel = new SS_CC_Horario();
            objModel.ACCION = "LISTARDETALLEDIA";
            if (id!=null)
            {
                objModel.IdHorario = Convert.ToInt32(id);
            }
            objModel.FechaInicio = getValorFiltroDate(fechaSelecc);
            Listar = SvcSS_CC_Horario.listarSS_CC_Horario(objModel, 0, 0);
            if (Listar.Count > 0)
            {
                objModel = Listar[0];
            }
            return crearWindowRegistro("Maestros/Horarios/HorarioDetalleDia", objModel, "");
        }
        public System.Web.Mvc.ActionResult getGrillaDetalleHorario(int start, int limit,
             string fecha,string medico,string periodo, 
            string tipoBuscar)
        {
            Log.Information("GestionController - getGrillaDetalleHorario - Entrar");

            Boolean indicaValidacionForm = false;
            try
            {
                ENTITY_GLOBAL.Instance.GRUPO = "";
                //ConsultaCita();
                //var field = X.GetCmp<TextField>("txtPaciente");
                var Listar = new List<SS_CC_Horario>();

                var LocalEnty = new SS_CC_Horario();

                LocalEnty.Medico = getValorFiltroInt(medico);
                LocalEnty.FechaInicio = getValorFiltroDate(fecha);
                
                /*
                LocalEnty.TipoRegistroHorario = getValorFiltroInt(tiporegistro);
                LocalEnty.Periodo = getValorFiltroInt(periodo);
                LocalEnty.IdEspecialidad = getValorFiltroInt(especialidad);
                LocalEnty.IdConsultorio = getValorFiltroInt(consultorio);
                LocalEnty.IdServicio = getValorFiltroInt(servicio);
                LocalEnty.IdGrupoAtencionCompartido = getValorFiltroInt(grupoatencion);
                LocalEnty.IdTurno = getValorFiltroInt(turno);
                */
                

                //(descripcion != null ? (descripcion.Trim().Length>0?descripcion.Trim():null) : null);
                int ini = (start == 0 ? start : start + 1);
                int fin = start + limit;
                //Si la busqueda proviene de filtros
                if (tipoBuscar == "FILTRO") { ini = 0; fin = limit; }                          

                    LocalEnty.ACCION = "LISTARDETALLEDIA";
                    Listar = SvcSS_CC_Horario.listarSS_CC_Horario(LocalEnty, ini,fin);
                //ENTITY_GLOBAL obj = (ENTITY_GLOBAL)HttpContext.Current.Session["ENTITY_GLOBAL"];
                //Session["ENTITY_PACIENTE"] = Listar;                
                return this.Store(Listar);
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
                EventLog.GenerarLogError(ex);
                var sqlException = ex.InnerException as SqlException;
                var detalle = new MA_MiscelaneosDetalle();
                detalle.ACCION = "ERRORES";
                List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                if (sqlException != null)
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                }
                else
                {
                    resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                }
                string mostrarExc = "Excepción genérica:";
                if (resultado.Count > 0)
                {
                    mostrarExc = resultado[0].DescripcionLocal;
                }
                indicaValidacionForm = true;
                return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                throw;
            }
        }
        /**Para guardar los cambios del formulario*/
        public System.Web.Mvc.ActionResult save_SS_CC_Horario(SS_CC_Horario objSave, String MODO, String idWindow)
        {
            Log.Information("GestionController - save_SS_CC_Horario - Entrar");
            //showMensajeBotton
            ///Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            List<ENTITY_MENSAJES> msgNoValido = null;
            int idResultado = 0;
            String accion = "";
            String message = "";
            String tipoMsg = "INFO";
            String tituloMsg = "Mensaje";
            Boolean indicaValidacionForm = false;
            if (objSave != null)
            {
                ////VALIDACIÓN
                objSave.ACCION = MODO;
                if (Session["MENSAJES_VALFORM"] != null)
                {
                    msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
                }
                else
                {
                    msgNoValido = UTILES_MENSAJES.getValidacionFormulario(objSave, UTILES_MENSAJES.FORM_MSTAGENTE);
                }

                if (msgNoValido.Count > 0)
                {
                    message = msgNoValido[0].DESCRIPCION;
                    tipoMsg = "WARNING";
                    tituloMsg = "Advertencia";
                    indicaValidacionForm = true;
                }
                else
                {
                    try
                    {
                        if (MODO == "NUEVO")
                        {
                            objSave.ACCION = "INSERT";
                            accion = "registró";
                        }
                        else if (MODO == "UPDATE")
                        {
                            objSave.ACCION = "UPDATE";
                            accion = "modificó";
                        }
                        else if (MODO == "DELETE")
                        {
                            objSave.ACCION = "DELETE";
                            accion = "eliminó";
                        }
                        else
                        {
                            tipoMsg = "WARNING";
                            message = "No se encotró el MODO.";
                            tituloMsg = "Advertencia";
                        }
                        try
                        {
                            //objCuerpo.Estado = Convert.ToInt32(objCuerpo.UsuarioModificacion);
                        }
                        catch (Exception e)
                        {
                            Log.Error(e, e.Message);
                            X.Msg.Notify("Exception", e.GetBaseException().Message).Show();
                        }
                        objSave.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                        objSave.UsuarioCreacion = ENTITY_GLOBAL.Instance.USUARIO;
                        idResultado = SvcSS_CC_Horario.setMantenimiento(objSave);
                        if (idResultado > 0)
                        {
                            message = "Se " + accion + " el  horario (" + idResultado + ") satisfactoriamente.";
                        }
                        else
                        {
                            tipoMsg = "ERROR";
                            message = "No se pudo guadar los cambios. Sucedió un error en la operación.";
                            tituloMsg = "Error";
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, ex.Message);
                        EventLog.GenerarLogError(ex);
                        var sqlException = ex.InnerException as SqlException;
                        var detalle = new MA_MiscelaneosDetalle();
                        detalle.ACCION = "ERRORES";
                        List<MA_MiscelaneosDetalle> resultado = new List<MA_MiscelaneosDetalle>();
                        if (sqlException != null)
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, sqlException.Number, 0);
                        }
                        else
                        {
                            resultado = SvcMiscelaneos.listarMA_MiscelaneosDetalle(detalle, ex.HResult, 0);
                        }
                        string mostrarExc = "Excepción genérica:";
                        if (resultado.Count > 0)
                        {
                            mostrarExc = resultado[0].DescripcionLocal;
                        }
                        indicaValidacionForm = true;
                        return showMensajeNotify("Excepción", mostrarExc, "ERROR");
                        throw;
                    }
                }
            }
            else
            {
                tipoMsg = "ERROR";
                message = "No se pudo guadar los cambios. No se recibió el objeto vinculado.";
                tituloMsg = "Error";
            }
            objSave.ACCION = "INFO";
            if (indicaValidacionForm)
            {
                return showMensajeBotton(msgNoValido, tituloMsg, tipoMsg);
            }
            else
            {
                return terminarShowMensajeBox(idWindow, message, tituloMsg, tipoMsg, "accionFinal");
            }
        }

        public System.Web.Mvc.ActionResult seleccionadorMedico(String accionSeleccion, String accionListado)
        {
            Log.Information("GestionController - seleccionadorMedico - Entrar");
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            obj.USUARIO = accionListado;
            obj.ACCION = accionSeleccion;
            if (Session["MODULO_DEF"] != null)
            {
            }
            return crearWindowRegistro("SeleccionadorMedico", obj, "");
        }

        public System.Web.Mvc.ActionResult getSeleccionMedicoFiltro(String MODO, int persona, String cmp, String nombre, String idWindow)
        {
            Log.Information("GestionController - getSeleccionMedicoFiltro - Entrar");

            USUARIO obj = new USUARIO();
            obj.ACCION = MODO;
            var win = X.GetCmp<Window>(idWindow);
            if (win != null)
            {
                win.Hide();
            }
            var nf = X.GetCmp<NumberField>("txtIdEmpleadoFiltro");
            if (persona != null) { nf.SetValue(persona); }

            var tfNom = X.GetCmp<TextField>("tfNombreMedicoFiltro");
            if (nombre != null || nombre != "") { tfNom.SetValue(nombre); }

            var tfCmd = X.GetCmp<TextField>("tfCodigoeMedicoFiltro");
            if (cmp != null || cmp != "") { tfCmd.SetValue(cmp); }

            return this.Direct();
        }
        /*******************FIN*******************/
        
        /**UTILES*/

        /*SALIR DEL SISTEMA**/
        public System.Web.Mvc.ActionResult eventoSalirSistema(string indicador)
        {
            Log.Information("GestionController - eventoSalirSistema - Entrar");


            return this.RedirectToAction("Index", "Login");
        }
        
       
        /*ABOUT DEL SISTEMA**/
        public System.Web.Mvc.ActionResult eventoAbout(string indicador)
        {
            Log.Information("GestionController - eventoAbout - Entrar");

            ENTITY_GENERALHCE objModel = new ENTITY_GENERALHCE();
            objModel.ACCION = "VER";
            /********************/
            VW_PERSONAPACIENTE obj = new VW_PERSONAPACIENTE();
            List<MA_MiscelaneosDetalle> listInfoSession = new List<MA_MiscelaneosDetalle>();
            MA_MiscelaneosDetalle InfoSession = new MA_MiscelaneosDetalle();
            InfoSession.ACCION = "INFOABOUT";
            InfoSession.CodigoElemento = "" + ENTITY_GLOBAL.Instance.IDAGENTE;
            InfoSession.AplicacionCodigo = ENTITY_GLOBAL.Instance.APPCODIGO;
            InfoSession.Compania = ENTITY_GLOBAL.Instance.Compania;
            InfoSession.CodigoTabla = ENTITY_GLOBAL.Instance.Sucursal;//AUX            
            InfoSession.ValorCodigo1 = ENTITY_GLOBAL.Instance.Establecimiento;

            if (ENTITY_GLOBAL.Instance.CODPERSONA != null)
            {
                InfoSession.ValorCodigo2 = "" + ENTITY_GLOBAL.Instance.CODPERSONA;
            }
            int paciente = 0;
            if (ENTITY_GLOBAL.Instance.PacienteID != null)
            {
                paciente = (int)ENTITY_GLOBAL.Instance.PacienteID;
            }

            listInfoSession = SvcMiscelaneos.listarMA_MiscelaneosDetalle(InfoSession, paciente, 0);
            //ver stored: [SP_SS_HC_MA_MiscelaneosDetalle_LISTAR]
            if (listInfoSession.Count > 0)
            {
                objModel.campoStr01 = listInfoSession[0].Compania; //CompaniaSocio desc
                objModel.campoStr02 = listInfoSession[0].CodigoTabla; //Sucursal desc
                objModel.campoStr03 = listInfoSession[0].AplicacionCodigo; //Aplicacion desc

                objModel.campoStr04 = listInfoSession[0].ValorCodigo1; //ESTABLECIMIENTO
                objModel.campoStr05 = listInfoSession[0].ValorCodigo2;     //PERIODO
                objModel.campoStr06 = listInfoSession[0].ValorCodigo3;  //DB

                objModel.campoStr07 = listInfoSession[0].ValorCodigo4; //TipoTrabajador desc                
                objModel.USUARIO = listInfoSession[0].UltimoUsuario;//USUARIO
                objModel.campoStr08 = listInfoSession[0].DescripcionLocal; //NOMBRE EMPLEADO
                objModel.campoInt01 = Convert.ToInt32(listInfoSession[0].ValorEntero1);
                objModel.campoStr08 = listInfoSession[0].ValorCodigo5; // módulo prueba
                objModel.campoStr09 = listInfoSession[0].ValorCodigo6; //sistema prueba
                objModel.campoStr10 = listInfoSession[0].ValorCodigo7; //DESARROLLADO POR

            }
            /********************/
            string Form = "AboutView";
            return crearWindowRegistro(Form, objModel, "");
        }

        /**Metodo para retornar el valor correcto del filtro*/
        public String getValorFiltroStr(String filtro)
        {
            Log.Information("GestionController - getValorFiltroStr - Entrar");

            if (filtro != null)
            {
                if (filtro == "null")
                {
                    filtro = null;
                }
                else if (filtro.Trim().Length == 0)
                {
                    filtro = null;
                }
            }
            if (filtro != null)
            {
                return filtro.Trim();
            }
            return null;
        }
        public Nullable<int> getValorFiltroInt(String filtro)
        {
            Log.Information("GestionController - getValorFiltroInt - Entrar");

            if (filtro != null)
            {
                if (filtro == "null")
                {
                    filtro = null;
                }
                else if (filtro.Trim().Length == 0)
                {
                    filtro = null;
                }
            }
            if (filtro != null)
            {
                try
                {
                    return Convert.ToInt32(filtro);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, ex.Message);
                    //X.Msg.Info("Exception", "No se encuentra el valor ingresado").Show();
                    //showMensajeBox("No se encuentra el valor ingresado", "", "ERROR");
                }

            }
            return null;
        }
        public Nullable<DateTime> getValorFiltroDate(String filtro)
        {
            Log.Information("GestionController - getValorFiltroDate - Entrar");

            try
            {
                if (filtro != null)
                {
                    if (filtro == "null")
                    {
                        filtro = null;
                    }
                    else if (filtro.Trim().Length == 0)
                    {
                        filtro = null;
                    }
                }
                if (filtro != null)
                {
                    filtro = filtro.Replace("\"", "");
                    return Convert.ToDateTime(filtro);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, ex.Message);
            }
            return null;
        }
        /*****UTILES CONTRUCCION FORMULARIOS****/
        /**SETEA LAS PROPIEDADES  CARGADAS Y VÁLIDAS PARA EL FORMUALRIO ACTUAL*/
        public static bool setPropiedadesForm(List<VW_SS_HC_TABLAFORMATO_VALIDACION> listaProp)
        {
            Log.Information("GestionController - setPropiedadesForm - Entrar");

            if (listaProp != null)
            {
                Dictionary<String, Object> dictComponentes = new Dictionary<String, Object>();
                foreach (var result in listaProp)
                {
                    Object compoTemp = null;
                    if (result.EstadoValidacion == 2 && result.TipoComponente == "EXT")
                    {
                        if (dictComponentes.ContainsKey(result.NombreCampo))
                        {
                            compoTemp = dictComponentes["" + result.NombreCampo];
                        }
                        else
                        {
                            compoTemp = getComponenteForm(result.NombreComponente, 0, result.NombreCampo);
                        }
                        if (compoTemp != null)
                        {
                            //dictComponentes["" + result.NombreCampo] = compoTemp;
                            //dictComponentes.Add("" + result.NombreCampo, compoTemp);
                            //Object compo = getComponenteForm(result.NombreComponente, 0, result.NombreCampo, dictComponentes);
                            Object compo = compoTemp;
                            Object valor = null;
                            if (result.FlagTipoDato == "T")
                            {
                                if (result.ValorTexto != null)
                                {
                                    valor = getValor_FiltroParametros(result.ValorTexto.Trim(), "T");
                                    //valor = result.ValorTexto.Trim();
                                }    
                                //valor = (result.ValorTexto != null ? result.ValorTexto.Trim() : "");
                            }
                            else if (result.FlagTipoDato == "N")
                            {
                                valor = result.ValorNumerico;
                            }
                            else if (result.FlagTipoDato == "D")
                            {
                                valor = result.ValorDate;
                            }
                            else if (result.FlagTipoDato == "B")
                            {
                                valor = result.ValorNumerico;
                            }

                            compo = UTILES_MENSAJES.setPropiedadesComponenteForm(compo, result.NombreAtributo, valor, result.FlagTipoDato);
                            if (compo != null)
                            {
                                dictComponentes["" + result.NombreCampo] = compo;
                            }

                        }
                    }
                }
                return true;
            }
            //TextField field01 = X.GetCmp<TextField>("Codigo"); 
            return true;
        }
        /**Obtener valor de RECURSO desde PARÁMETRO Si existiera*/
        public static Object getValor_FiltroParametros(String valor, String tipoDato)
        {
            Log.Information("GestionController - getValor_FiltroParametros - Entrar");

            String valorTemp = valor;
            if (valor.Length > 0)
            {
                ////verificamos si posee operador de existencia de Parámetros
                if (valor.Contains(UTILES_MENSAJES.PARAM_OPER_esParam))
                {
                    valorTemp = valor.Replace(UTILES_MENSAJES.PARAM_OPER_esParam, "|" + UTILES_MENSAJES.PARAM_OPER_esParam);
                    string[] vector = valorTemp.Split('|');
                    for (int i = 0; i < vector.Length && valor.Contains(UTILES_MENSAJES.PARAM_OPER_esParam); i++)
                    {
                        if (vector[i].Contains(UTILES_MENSAJES.PARAM_OPER_esParam))
                        {
                            //ARMAR TOKEN EQUIVALENTE A PARAMETRO
                            vector[i] = vector[i].Replace(UTILES_MENSAJES.PARAM_OPER_esParam, "|");
                            vector[i] = vector[i].Replace(" ", "|");
                            vector[i] = vector[i].Replace(";", "|");
                            vector[i] = vector[i].Replace(",", "|");
                            vector[i] = vector[i].Replace(":", "|");
                            vector[i] = vector[i].Replace(".", "|");
                            vector[i] = vector[i].Replace(">", "|");
                            vector[i] = vector[i].Replace("<", "|");
                            vector[i] = vector[i].Replace("[", "|");
                            vector[i] = vector[i].Replace("]", "|");
                            vector[i] = vector[i].Replace("{", "|");
                            vector[i] = vector[i].Replace("}", "|");
                            vector[i] = vector[i].Replace("(", "|");
                            vector[i] = vector[i].Replace(")", "|");
                            vector[i] = vector[i].Replace("-", "|");
                            vector[i] = vector[i].Replace("+", "|");
                            vector[i] = vector[i].Replace("*", "|");
                            vector[i] = vector[i].Replace("/", "|");
                            vector[i] = vector[i].Replace("\n", "|");
                            vector[i] = vector[i].Replace("\t", "|");
                            vector[i] = vector[i].Replace("@", "|");


                            string claveParam = "";
                            Object valorParamTemp = "";
                            string[] vectorSecond = vector[i].Split('|');
                            if (vectorSecond.Length > 1)
                            {
                                claveParam = vectorSecond[1]; //CLAVE PARAMETRO
                                //Obtenermos el valor del parámetro
                                valorParamTemp = UTILES_MENSAJES.loadParametro_Formulario(claveParam, tipoDato, false);
                                if (valorParamTemp != null)
                                {
                                    //REMPLAZAMOS EL PARAMETRO CON SU VERDADERO VALOR
                                    valor = valor.Replace("" + UTILES_MENSAJES.PARAM_OPER_esParam + claveParam, ("" + valorParamTemp).Trim());
                                }
                            }
                        }
                    }
                }
                //UTILES_MENSAJES.PARAM_OPER_esParam
            }
            return valor;
        }
        /**OBTIENE EL COMPONENTE UI DEL FORMULARIO DE ACUERDO AL ID Y AL TIPO DE COMPONENTE*/
        public static Object getComponenteForm(String componente, int indicaCompo, String id)
        {
            Log.Information("GestionController - getComponenteForm - Entrar");

            Object compo = null;
            if (componente == "TextField")
            {
                TextField compoX = X.GetCmp<Ext.Net.TextField>("" + id);
                compo = compoX;
            }
            else if (componente == "NumberField")
            {
                NumberField compoX = X.GetCmp<Ext.Net.NumberField>("" + id);
                compo = compoX;
            }
            else if (componente == "TextArea")
            {
                TextArea compoX = X.GetCmp<Ext.Net.TextArea>("" + id);
                //FormPanel compoXXX = X.GetCmp<Ext.Net.FormPanel>("" + id);                

                compo = compoX;
            }
            else if (componente == "DateField")
            {
                DateField compoX = X.GetCmp<Ext.Net.DateField>("" + id);
                compo = compoX;
            }
            else if (componente == "TimeField")
            {
                TimeField compoX = X.GetCmp<Ext.Net.TimeField>("" + id);
                compo = compoX;
            }
            else if (componente == "ComboBox")
            {
                ComboBox compoX = X.GetCmp<Ext.Net.ComboBox>("" + id);
                //FormPanel compoXXX = X.GetCmp<Ext.Net.FormPanel>("" + id);                

                compo = compoX;
            }
            else if (componente == "Radio")
            {
                Radio compoX = X.GetCmp<Ext.Net.Radio>("" + id);
                compo = compoX;
            }
            else if (componente == "RadioGroup")
            {
                RadioGroup compoX = X.GetCmp<Ext.Net.RadioGroup>("" + id);
                compo = compoX;
            }
            else if (componente == "Checkbox")
            {
                Checkbox compoX = X.GetCmp<Ext.Net.Checkbox>("" + id);
                compo = compoX;
            }
            else if (componente == "CheckboxGroup")
            {
                CheckboxGroup compoX = X.GetCmp<Ext.Net.CheckboxGroup>("" + id);
                compo = compoX;
            }
            else if (componente == "Label")
            {
                Label compoX = X.GetCmp<Ext.Net.Label>("" + id);
                compo = compoX;
            }
            else if (componente == "Button")
            {
                Button compoX = X.GetCmp<Ext.Net.Button>("" + id);
                compo = compoX;
            }
            else if (componente == "GridPanel")
            {
                GridPanel compoX = X.GetCmp<Ext.Net.GridPanel>("" + id);
                compo = compoX;
            }
            else if (componente == "TreePanel")
            {
                TreePanel compoX = X.GetCmp<Ext.Net.TreePanel>("" + id);
                compo = compoX;
            }
            return compo;
        }
        /**CARGA LAS PROPEDADES DEL FORMULARIO DESDE LA BASE DE DATOS*/
        public bool cargarPropiedadesFormulario(bool activo)
        {
            Log.Information("GestionController - cargarPropiedadesFormulario - Entrar");

            Session["RECURSOS_VALFORM"] = null;
            if (activo)
            {
                var CodFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
                var idFormato = ENTITY_GLOBAL.Instance.IDFORMATO;

                List<VW_SS_HC_TABLAFORMATO_VALIDACION> listaResources = new List<VW_SS_HC_TABLAFORMATO_VALIDACION>();
                VW_SS_HC_TABLAFORMATO_VALIDACION objRes = new VW_SS_HC_TABLAFORMATO_VALIDACION();
                objRes.Accion = "LISTARVALIDA";
                objRes.CodigoFormato = CodFormato;
                objRes.IdFormato = Convert.ToInt32(idFormato);
                listaResources = SvcTABLAFORMATOVALIDACION.listarVWTABLAFORMATOVALIDACION(objRes, 0, 0);
                if (listaResources != null)
                {
                    Session["RECURSOS_VALFORM"] = listaResources;
                    /*foreach (var result in listaResources)
                    {
                    }*/
                }
            }
            return true;
        }

        /**SETEA LAS PROPEDADES DEL FORMULARIO EN CADA COMPONENTE UI QUE EXISTA EN LOS RECURSOS CARGADOS*/
        public bool setPropiedadesFormulario(bool activo)
        {
            Log.Information("GestionController - setPropiedadesFormulario - Entrar");

            if (activo)
            {
                if (Session["RECURSOS_VALFORM"] != null)
                {
                    List<VW_SS_HC_TABLAFORMATO_VALIDACION> listaResources = new List<VW_SS_HC_TABLAFORMATO_VALIDACION>();
                    VW_SS_HC_TABLAFORMATO_VALIDACION objRes = new VW_SS_HC_TABLAFORMATO_VALIDACION();
                    listaResources = (List<VW_SS_HC_TABLAFORMATO_VALIDACION>)Session["RECURSOS_VALFORM"];
                    setPropiedadesForm(listaResources);
                }
            }
            return true;
        }
        /****ADD MENSAJES VALIDACIÓN **/
        public System.Web.Mvc.ActionResult addRecursosValidacion(String data, String indica)
        {
            Log.Information("GestionController - addRecursosValidacion - Entrar");

            /*******SET PROP. FORMULARIO*****************************/
            if (indica == "RESTART")
            {
                Session["MENSAJES_VALFORM"] = null;
            }
            else
            {
                Session["MENSAJES_VALFORM"] = null;
                if (data != null && Session["RECURSOS_VALFORM"] != null)
                {
                    List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataRecursosForm;
                    List<ENTITY_MENSAJES> dataMensajesValidacion = new List<ENTITY_MENSAJES>();
                    List<VW_SS_HC_TABLAFORMATO_VALIDACION> dataFields;
                    dataFields = (List<VW_SS_HC_TABLAFORMATO_VALIDACION>)Newtonsoft.Json.JsonConvert.DeserializeObject(data, typeof(List<VW_SS_HC_TABLAFORMATO_VALIDACION>));
                    foreach (var resultMsg in dataFields)
                    {
                        dataMensajesValidacion.Add(new ENTITY_MENSAJES
                        {
                            DESCRIPCION = resultMsg.ValorTexto,
                            IDCOMPONENTE = resultMsg.NombreCampo,
                            NIVEL = 1
                        });

                    }
                    /*
                    dataRecursosForm = (List<VW_SS_HC_TABLAFORMATO_VALIDACION>)Session["RECURSOS_VALFORM"];
                    foreach (var result in dataFields)
                    {
                        for (int i = 0; i < dataRecursosForm.Count;i++ )
                        {
                            if ((result.NombreCampo + "").Trim() == (dataRecursosForm[i].NombreCampo + "").Trim())
                            {
                                if (dataRecursosForm[i].SecuenciaValidacionRef!=null)
                                {
                                    int MsgReferencia = Convert.ToInt32(dataRecursosForm[i].SecuenciaValidacionRef);
                                    foreach (var resultMsg in dataRecursosForm)
                                    {
                                        if (resultMsg.SecuenciaValidacion == MsgReferencia)
                                        {
                                            dataMensajesValidacion.Add(new ENTITY_MENSAJES
                                            {
                                                DESCRIPCION = resultMsg.ValorTexto,
                                                IDCOMPONENTE = resultMsg.NombreCampo,
                                                NIVEL = 1
                                            });
                                        }
                                    }
                                    break;
                                }                            
                                //dataMensajesValidacion.Add("");
                            }
                        }
                    }
                    */
                    Session["MENSAJES_VALFORM"] = dataMensajesValidacion;
                }

            }
            /*************************************************************/
            List<ENTITY_MENSAJES> msgNoValido = new List<ENTITY_MENSAJES>();
            msgNoValido = (List<ENTITY_MENSAJES>)Session["MENSAJES_VALFORM"];
            //return this.Store(listaResources);
            return showMensajeBotton(msgNoValido, "", "");
            //return this.Direct();
        }
        /****ADD PERMISOS AL FORMATO **/
        public System.Web.Mvc.ActionResult addPermisosFormatos(String data, String indica)
        {
            Log.Information("GestionController - addPermisosFormatos - Entrar");

            /*******SET PROP. FORMULARIO*****************************/
            List<ENTITY_GENERALHCE> listaRecursosPermisos = new List<ENTITY_GENERALHCE>();
            if (Session["RECURSOS_PERMISOSFORMATOS"] == null) cargarPermisosFormato(true);
            if (Session["RECURSOS_PERMISOSFORMATOS"] != null)
            {
                listaRecursosPermisos = (List<ENTITY_GENERALHCE>)Session["RECURSOS_PERMISOSFORMATOS"];
            }
            /*************************************************************/
            return this.Store(listaRecursosPermisos);
            //return this.Direct();
        }
        /**CARGA LAS PROPEDADES DE PERMISOS DEL FORMATO ***********/
        public bool cargarPermisosFormato(bool activo)
        {
            Log.Information("GestionController - cargarPermisosFormato - Entrar");

            if (activo)
            {
                Session["RECURSOS_PERMISOSFORMATOS"] = null;
                var CodFormato = ENTITY_GLOBAL.Instance.CONCEPTO;
                var idFormato = ENTITY_GLOBAL.Instance.IDFORMATO;
                var idOpcion = ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;

                List<SS_CHE_VistaSeguridad> serviceResuls = new List<SS_CHE_VistaSeguridad>();
                SS_CHE_VistaSeguridad entidaLocal = new SS_CHE_VistaSeguridad();
                entidaLocal.Accion = "LISTAROPCIONESCAGENTE";

                entidaLocal.IdFormato = idFormato;
                entidaLocal.IdOpcion = Convert.ToInt32(idOpcion);
                entidaLocal.IdAgente = Convert.ToInt32(ENTITY_GLOBAL.Instance.IDAGENTE);
                entidaLocal.UsuarioModificacion = ENTITY_GLOBAL.Instance.USUARIO;
                entidaLocal.NivelOpcion = -2; //FORMATOS  - OPCIONES SIN PLANTILLA
                int indAsignado = 0;
                int indNuevo = 0;
                int indModificar = 0;
                int indEliminar = 0;
                int indVisible = 0;
                int indIngreso = 0;
                int indAcceso = 0;
                int indHabilitado = 0;
                int indObligatorio = 0;
                int indPrioridadAgOPcion = 0;

                serviceResuls = SvcSeguridadConcepto.ListarSeguridadOpcion(entidaLocal, 0, 0);
                if (serviceResuls.Count > 0)
                {
                    indAsignado = Convert.ToInt32(serviceResuls[0].IndicadorAsignacion);
                    indNuevo = Convert.ToInt32(serviceResuls[0].IndicadorNuevo);
                    indModificar = Convert.ToInt32(serviceResuls[0].IndicadorModificar);
                    indEliminar = Convert.ToInt32(serviceResuls[0].IndicadorEliminar);
                    indVisible = Convert.ToInt32(serviceResuls[0].IndicadorVisible);
                    indIngreso = Convert.ToInt32(serviceResuls[0].IndicadorIngreso);
                    indAcceso = Convert.ToInt32(serviceResuls[0].IndicadorAcceso);
                    indHabilitado = Convert.ToInt32(serviceResuls[0].IndicadorHabilitado);
                    indObligatorio = Convert.ToInt32(serviceResuls[0].IndicadorObligatorio);
                    indPrioridadAgOPcion = Convert.ToInt32(serviceResuls[0].IndicadorPrioridad);
                }

                List<ENTITY_GENERALHCE> listaPermisos = new List<ENTITY_GENERALHCE>();
                ENTITY_GENERALHCE objPermiso = new ENTITY_GENERALHCE();
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ASIGNACION", campoStr01 = "A", campoInt01 = indAsignado });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "NUEVO", campoStr01 = "N", campoInt01 = indNuevo });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "MODIFICAR", campoStr01 = "M", campoInt01 = indModificar });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ELIMINAR", campoStr01 = "E", campoInt01 = indEliminar });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "VER", campoStr01 = "V", campoInt01 = indIngreso });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "INGRESO", campoStr01 = "I", campoInt01 = indIngreso });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "BUSCAR", campoStr01 = "B", campoInt01 = 2 });//HARD
                ////////
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "ACCESO", campoStr01 = "S", campoInt01 = indAcceso });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "HABILITADO", campoStr01 = "H", campoInt01 = indHabilitado });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "OBLIGA", campoStr01 = "O", campoInt01 = indObligatorio });
                listaPermisos.Add(new ENTITY_GENERALHCE { ACCION = "PRIORIDADAGOPCION", campoStr01 = "P", campoInt01 = indPrioridadAgOPcion });

                Session["RECURSOS_PERMISOSFORMATOS"] = listaPermisos;
            }
            return true;
        }
        public System.Web.Mvc.ActionResult showMensajeNotify(String titulo, String message, String tipo)
        {
            Log.Information("GestionController - showMensajeNotify - Entrar");

            //Tipo: {"INFO", "WARNING", "ERROR", "QUESTION"}
            //X.Msg.Notify(titulo, message).Show();
            NotificationAlignConfig Align = new NotificationAlignConfig()
            {
                OffsetY = -500,
            };
            X.Msg.Notify(new NotificationConfig
            {
                Title = titulo,
                Icon = (tipo == "WARNING" ? Icon.Error : (tipo == "ERROR" ? Icon.Error : Icon.Information)),
                AlignCfg = Align,
                Html = message,
                //AnimEl = this.GetCmp<Button>("Button8").ClientID,
                /*Fn = new JFunction
                {
                    Fn = "accionFinal"
                }*/
            }).Show();
            return this.Direct();

        }
        /**Método para crear un TreeNode  */
        public System.Web.Mvc.ActionResult setNodoRootGeneral(string tipo, string id, string text, bool leaf)
        {
            Log.Information("GestionController - setNodoRootGeneral - Entrar");

            Ext.Net.Node root = new Ext.Net.Node();
            if (id != null && id != "" && text != null && text != "")
            {
                root.Text = text;
                root.NodeID = id;
            }
            return this.Direct(root);
        }

        #region
        public System.Web.Mvc.ActionResult CCEP9925_View()
        {
            Log.Information("GestionController - CCEP9925_View - Entrar");

            /***ADD PERMISOS******/
            Session["RECURSOS_PERMISOSFORMATOS"] = null;
            cargarPermisosFormato(true);
            /*********************/
            return View("Maestros/ExamenQuiru/CCEP9925_View");
        }

        #endregion





    }
}

