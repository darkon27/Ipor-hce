@model SoluccionSalud.Entidades.Entidades.SG_Agente


@{
    var X = Html.X();

    var esTipoUsuario = (Model.TipoAgente == 2 ? true : false);
    var descAgente = Model.Nombre;
    var descTipoAgente = (Model.TipoAgente == 2 ? "Agente-Usuario" :
            (Model.TipoAgente == 1 ? "Agente-perfil" : "No def."));
            
   var codsucursal = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.Sucursal;

    var descSeleccion = (Model.TipoAgente == 2 ? "Agente-Pefil" : "Agente-Usuario");
    var modoSeleccion = (Model.TipoAgente == 2 ? "LISTARPERFILES" : "LISTeventoCheckARUSUARIOS");

    var COLOR_BLUE01_temp = "#284A89";
    var COLOR_RED01_temp = "#990000";
    var COLOR_GREEN01_temp = "#177506";
    var COLOR_YELLOW02_temp = "#D9A407";
    var empleado = Model.CodigoAgente;
}

<script>

    var template = 'color:{0};';
    var cuenta = 0;
    var change = function (value, meta) {
        return value;

    };

    var valor = 0;
    var cont = 0;
    function eventoCheck(grid, casilla) {
   
        console.log("SUCURSAL gridlla: ", App.cmbSucursal.getValue());
        console.log("Codigo Sucursal: ", grid.record.data.UltimoUsuario);
        console.log("valor gridlla: ", grid.value);

        if (App.cmbSucursal.getValue() != null) {

            if (grid.record.data.UltimoUsuario.trim() == App.cmbSucursal.getValue().trim() && grid.value == true) {
                cont = cont + 1;
                valor = 1;
            }
            else {
                valor = 0;
                cont--;
            }

        }
     


        if (casilla == "chkInd") {

            grid.record.data.MasterBrowseFlag = valor;
        }

        console.log("CONTADOR: ", cont);
        console.log("valor a guardar: ",valor);


    }
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 'A')
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 'I')
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };
    var valorcombo = "";


    function addRecord(grid, grupo, codagente, componenteAdd) {

        var sucur = App.cmbSucursal.getRawValue();

 
        if (componenteAdd.getValue() != null) {
            var valorSelec = componenteAdd.getValue();

            if (validaDuplicado(componenteAdd.getRawValue())) {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Ya existe el Registro",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            } else {
                cuenta = cuenta + 1;
                grid.store.insert(0,
                        {
                            AplicacionCodigo: 'NEW_' + cuenta,
                            Grupo: grupo,
                            Concepto: valorSelec,
                            UltimoUsuario: App.cmbSucursal.getValue(),
                            Usuario: codagente,
                            Estado: 'A',
                            Accion: 'INSERT',
                            MasterUpdateFlag: componenteAdd.getRawValue(),
                            MasterApproveFlag: sucur

                        });
            }

        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe seleccionar un Almacen para añadirlo.",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }

    };



    function validaDuplicado(valor1) {
        var estados = false;
        App.StoreSysAutoriza.each(function (r) {
            if (trim(r.get('MasterUpdateFlag')) == trim(valor1) /*&& trim(r.get('Concepto')) == trim(valor2)*/) {

                estados = true;
            }
        });
        return estados;
    }

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function pruebita() {

    }


    function filtrarGridxSucursal() {

        

        App.GridPanelSysAutoriza.getStore().reload();
        cont = 0;
   

     

    }



    function deleteActual(record) {

        if (record.data.MasterBrowseFlag==1) {
            cont--;
        } else if (record.data.MasterBrowseFlag == 0) {

        } 

        var store = App.GridPanelSysAutoriza.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("add_DataDeleteSysAutorizacionesAlmacen"))',
            params: {
                MODO: 'DELETE',
                app: record.data.AplicacionCodigo,
                grupo: record.data.Grupo,
                concepto: record.data.Concepto,
                usuario: record.data.Usuario,
                descripcion: record.data.MasterUpdateFlag
            }
        });
    };



function save_SysAutorizaciones(agente, idAg) {
        var i = 0;
        var store = App.StoreSysAutoriza;
        var status;
        var sysAutorizacionesArray = new Array();

        store.each(function (r) {
            var SY_SeguridadAutorizaciones = {
                AplicacionCodigo: r.get('AplicacionCodigo'),
                Grupo: r.get('Grupo'),
                Concepto: r.get('Concepto'),
                Usuario: r.get('Usuario'),
                Estado: r.get('Estado'),
                Accion: r.get('Accion'),
                MasterBrowseFlag: r.get('MasterBrowseFlag')

            };
            sysAutorizacionesArray.push(SY_SeguridadAutorizaciones);
        });


        if (cont > 1 || cont==0) {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Por favor debe seleccionar solo un Indicador. S.S",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
            return;
        } else {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("save_SysAutorizacionesAlmacen"))',
            params: {
                MODO: 'NUEVO',
                idWindow: "WindowAsignarSysAutoriza",
                data: sysAutorizacionesArray,
                codagente: agente,
                idAgente: idAg
            }
        });

    }
};

</script>


@(Html.X().Window()
    .Width(850)
    .Height(450)
    .Maximizable(true)
    .Modal(true)
    .Constrain(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowAsignarSysAutoriza")
        .Title("Asignación de Almacén")
    .Padding(4)
        //.X(0)
        //.Y(0)
        .TopBar(
            X.Toolbar()
            .Height(30)
            .Items(
                X.ToolbarSpacer(),
                  X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" + descTipoAgente + ": " + Model.Nombre + "</span> </b>")
                ,
                X.ToolbarFill(),
                X.Button()
                    .Text((Model.ACCION == "DELETE" ? "Eliminar" : "Guardar"))
                    .Icon((Model.ACCION == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                     .Handler("save_SysAutorizaciones('" + Model.CodigoAgente + "' , " + Model.IdAgente + ");"),
                X.Button()
                    .Text("Cancelar")
                    .Icon(Icon.Cancel)
                    .DirectEvents(de =>
                     {  //Model.ACCION : Posee el MODO ACTUAL
                         de.Click.Url = Url.Action("cerrarWindow");
                         //de.Click.EventMask.ShowMask = true;
                         de.Click.ExtraParams.Add(new Parameter(
                               "id", "WindowAsignarSysAutoriza", ParameterMode.Value));
                         //de.Click.Success = "onSuccess(result.data,'" + Model.ACCION + "');";
                         //de.Click.Failure = "onSuccess(result.data,'"+ Model.ACCION + "');";
                     }),
                                          X.ToolbarSpacer(20)
                                         )
                                     )
    .Items(
            X.Panel()

            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Items(
                X.FieldSet().Height(150)
                .ColumnWidth(0.4)
                .Title("Agregar Autorizaciones para:")
                .MarginSpec("0 05 0 05")
                .Items(
                    Html.X().Container()
                    .Layout(LayoutType.HBox)
                    .Defaults(d =>
                    {
                        d.Add(new Parameter("LabelWidth", "90"));
                    })
                    .Items(
                        X.ComboBox().ID("cmbCompania").Width(350)
                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboSeguridadTxt("COMPANIA", "", "", 0)
                    .Select(d => new ListItem(d.Name, d.Codigo)))
                                .Listeners(ls => ls.Change.Handler = "App.cmbSucursal.getStore().load();")

                    .FieldLabel("Compañía").ReadOnly(false).Editable(false).MatchFieldWidth(false)
                    .SimpleSubmit(true)

                    )
                    ,
                    Html.X().Container()
                    .Layout(LayoutType.HBox)
                    .Defaults(d =>
                    {
                        d.Add(new Parameter("LabelWidth", "90"));
                    })
                     .Items(

                            X.ComboBox().ID("cmbSucursal").Width(350)
                        .FieldLabel("Sucursal").TypeAhead(true).QueryMode(DataLoadMode.Local).ForceSelection(true).Editable(false)
                        .TriggerAction(TriggerAction.All).DisplayField("name").ValueField("codigo").EmptyText("Loading...").ValueNotFoundText("Loading...")

                       .SimpleSubmit(true)
                       .Listeners(ls =>
                                            ls.Change.Handler = "App.cmdUnidadRepli.clearValue(); App.cmdUnidadRepli.getStore().load();  App.cmdAlmacen.getStore().load();  filtrarGridxSucursal();"
                        )  
                        
                        .Store(
                        Html.X().Store().AutoLoad(false).Model(
                        Html.X().Model().IDProperty("Codigo").Fields(
                        new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                        new ModelField("name", ModelFieldType.String) { Mapping = "Name" }))
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("Combos")).Reader(Html.X().JsonReader().Root("data")))
                            .Parameters(ps => ps.Add(new { Accion = "SUCURSAL", Par1 = JRawValue.From("App.cmbCompania.getValue()"), Par2 = "" + empleado, }))
                            .Listeners(ls =>
                                ls.Load.Handler = @"var combo = App.cmbSucursal;App.cmbSucursal.setValue(records[0].get(combo.valueField));  App.cmdUnidadRepli.getStore().load(); "
                        )
                        )
                    )
                        ,
                        Html.X().Container()
                        .Layout(LayoutType.HBox)
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "90"));
                        })
                         .Items(
                    X.ComboBox().ID("cmdUnidadRepli").Width(350)
        //.Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboSeguridadTxt("UNIDADREPLI", "", "", 0).Select(d => new ListItem(d.Name, d.Codigo)))
        //.Listeners(ls => ls.Select.Handler = "App.cmdUnidadRepli.clearValue(); App.cmdUnidadRepli.getStore().load()")
        //.FieldLabel("Unidad R.").ReadOnly(false).Editable(false).MatchFieldWidth(false)
                        .SimpleSubmit(true)
                                 .FieldLabel("Unidad R.").TypeAhead(true).QueryMode(DataLoadMode.Local).ForceSelection(true).Editable(false)
                            .TriggerAction(TriggerAction.All).DisplayField("name").ValueField("codigo").EmptyText("Loading...").ValueNotFoundText("Loading...").Store(
                            Html.X().Store().AutoLoad(false)
                            .Model(
                            Html.X().Model().IDProperty("Codigo").Fields(
                            new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                            new ModelField("name", ModelFieldType.String) { Mapping = "Name" }))
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("Combos"))
                            .Reader(Html.X().JsonReader().Root("data")))
                .Parameters(ps => ps.Add(
                            new
                            {
                                Accion = "UNIDADREPLI",
                                Par1 = JRawValue.From("App.cmbSucursal.getValue()"),
                                Par2 = "" + empleado,
                            }))
                                        .Listeners(ls => ls.Load.Handler = @"var combo = App.cmdUnidadRepli;App.cmdUnidadRepli.setValue(records[0].get(combo.valueField));  App.cmdAlmacen.getStore().load(); ")
                            )
                        )
                            ,
                            Html.X().Container()
                            .Layout(LayoutType.HBox)
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "90"));
                            })
                             .Items(

                              X.ComboBox().ID("cmdAlmacen").Width(350)
                           .FieldLabel("Almacen").Editable(false)
                           .TypeAhead(true).QueryMode(DataLoadMode.Local).ForceSelection(true)
                    .TriggerAction(TriggerAction.All).DisplayField("name").ValueField("codigo").EmptyText("Loading...").ValueNotFoundText("Loading...").Store(
                    Html.X().Store().AutoLoad(false)

                            .Model(
                            Html.X().Model().IDProperty("Codigo").Fields(
                            new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                            new ModelField("name", ModelFieldType.String) { Mapping = "Name" })
                            )
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("Combos"))
                            .Reader(Html.X().JsonReader().Root("data")))
                                .Parameters(ps => ps.Add(new
                                {
                                    Accion = "DESALMACEN",
                                    Par1 = JRawValue.From("App.cmbSucursal.getValue()"),
                                    Par2 = "" + empleado,
                                }
                                    ))
                                    .Listeners(ls => ls.Load.Handler = @"var combo = App.cmdAlmacen;App.cmdAlmacen.setValue(records[0].get(combo.valueField));")

                              ),
                                    
                                    
                                    
                     X.Button().Text("Agregar").Icon(Icon.Add)
                                        .Handler("addRecord(App.GridPanelSysAutoriza,'ALMACEN','" + Model.CodigoAgente + "' , App.cmdAlmacen );")

                            )
                )

                //AKII

                    //TERMINA
                ,
                X.GridPanel().Flex(1)
                    .ID("GridPanelSysAutoriza")
                    .Border(false)
                        .Store(
                        Html.X().Store()
        //.AutoSync(true)
                                .ID("StoreSysAutoriza")
                            .Model(
                                    Html.X().Model()
                                    .IDProperty("AplicacionCodigo")
                                    .Fields(
                                                Html.X().ModelField().Name("AplicacionCodigo"),
                                                Html.X().ModelField().Name("Grupo"),
                                                Html.X().ModelField().Name("Concepto"),
                                                Html.X().ModelField().Name("UltimoUsuario"),
                                                
                                                Html.X().ModelField().Name("Usuario"),
                                                Html.X().ModelField().Name("MasterBrowseFlag"),
                                                Html.X().ModelField().Name("MasterUpdateFlag"),
                                                Html.X().ModelField().Name("MasterApproveFlag"),
                                                
        //  Html.X().ModelField().Name("ALMACEN"),
                                                Html.X().ModelField().Name("Estado"),
                                                Html.X().ModelField().Name("Accion")
                                    )
                                )
                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                  .Url("getGrillaListaSysAutorizacionesAlmacenxSucursal")
                                        .Reader(reader => reader.Add(Html.X().JsonReader()
                                        .Root("data")
                                        .TotalProperty("total")
                                             .IDProperty("AplicacionCodigo")
                                        )))
                                )
                                .Parameters(ps =>
                                    ps.Add(new
                                        {
                                            agente = Model.IdAgente,
                                            tipoagente = Model.TipoAgente,
                                            codagente = Model.CodigoAgente,
                                            codsucursal = JRawValue.From("App.cmbSucursal.getValue()")
                                        })
                                )
                                .AutoLoad(true)
                            )
                            .ColumnModel(
                                         Html.X().ComponentColumn()
                                                    .Editor(true)
                                                         .DataIndex("AplicacionCodigo")
                                                     .Text("AplicacionCodigo")
                                                    .Width(80)
                                                    .Hidden(true)
                                                    .Component(
                                                    Html.X().TextField().ReadOnly(true)
                                                        ),
                                             Html.X().ComponentColumn()
                                                        .Editor(true)
                                                                .DataIndex("Grupo")
                                                        .Text("Sucursal")
                                                        .Width(110)
                                                        .Hidden(false)
                                                        .Component(
                                                        Html.X().TextField().ReadOnly(true)
                                                            ),
                                                             Html.X().ComponentColumn()
                                                                .Editor(true)
                                                                         .DataIndex("MasterApproveFlag")
                                                                    .Text("Descripcion")
                                                                .Width(110)
                                                                .Hidden(false)
                                                                .Component(
                                                                Html.X().TextField().ReadOnly(true)
                                                                    ),
                                                                Html.X().ComponentColumn()
                                                        .Editor(true)
        //   .DataIndex("Grupo")
                                                          .DataIndex("Concepto")
                                                            .Text("Codigo")
                                                         .Width(90)
                                                        .Hidden(false)
                                                        .Component(
                                                        Html.X().TextField().ReadOnly(true)
                                                            ),

                                                                    Html.X().ComponentColumn()
                                                            .Editor(true)
                                                                  .DataIndex("UltimoUsuario")
                                                                .Text("Codigo Sucursal")
                                                             .Width(90)
                                                            .Hidden(true)
                                                            .Component(
                                                            Html.X().TextField().ReadOnly(true)
                                                                ),
        //aki
                                              Html.X().ComponentColumn()
                                              .Width(250)
                                                            .Editor(true)
        //.DataIndex("UltimoUsuario")
                                                                    .DataIndex("MasterUpdateFlag")
                                                             .Text("Almacen")
                                                                  .Width(190)
                                                            .Hidden(false)
                                                            .Component(
                                                            Html.X().TextField().ReadOnly(true)
                                                                ),


                                              Html.X().ComponentColumn()
                                                            .Editor(true)
                                                            .DataIndex("Usuario")
                                                            .Text("Usuario")
                                                                 .Width(80)
                                                                    .Hidden(false)
                                                                    .Component(
                                                                    Html.X().TextField().ReadOnly(true)
                                                                        ),

                                            Html.X().ComponentColumn()
                                                .Editor(true)
                                                .DataIndex("Estado")
                                                .Width(100)
                                                .Text("Estado")
                                                .Component(Html.X().ComboBox()
                                                    .Editable(false)
                                                    .Items(
                                                        new ListItem("Activo", 'A'),
                                                        new ListItem("Inactivo", 'I')
                                                    )
                                                ),

                                                     Html.X().ComponentColumn()
                                                          .Width(50)
                                                                .Editor(true)
                                                                   .DataIndex("MasterBrowseFlag")
                                                                .Text("Ind.S.S")
                                                                .Hidden(false)
                                                                .Component(
                                                                X.Checkbox()

                                                                    .Handler("eventoCheck(this,'chkInd');")

                                                     //  .Checked(true)
                                                       )
                                                       ,




                                            Html.X().CommandColumn()
                                                .Width(80)
                                                .Commands(
                                                    Html.X().GridCommand()
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                )
                                                                    .Listeners(ls => ls.Command.Handler = "deleteActual(record)"),
                                         Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .DataIndex("Accion")
                                                    .Text("Acción")
                                                    .Hidden(true)
                                                    .Component(
                                                    Html.X().TextField().ReadOnly(true)
                                                        )

                                )
                                .SelectionModel(
                                        Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                )
                                .Plugins(
                                                             Html.X().CellEditing()
                                )
            )

    )
    .CloseAction(CloseAction.Destroy)
        //.Html(DateTime.Now.ToLongTimeString())

)


