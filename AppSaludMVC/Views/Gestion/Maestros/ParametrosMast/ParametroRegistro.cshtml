@model SoluccionSalud.Entidades.Entidades.ParametrosMast

@{
    ViewBag.Title = "ParametroRegistro";
    var X = Html.X();
    var modoDesc = (Model.Accion == "NUEVO" ? "Nuevo" :
                    (Model.Accion == "UPDATE" ? "Modificar" :
                        (Model.Accion == "DELETE" ? "Eliminar" :
                            (Model.Accion == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));

    var indicaModoLecturaKey = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? false :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));


    var STYLE_BACKGROUND_NODEIT = "background: #BBD8D6";
    var COLOR_BORDER_DEFAULT = "#b5b8c8";

    var STYLE_BORDER_DEF_VALID01 = (Model.AplicacionCodigo != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
    var STYLE_BORDER_DEF_VALID02 = (Model.CompaniaCodigo != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
}

<script>
    var change = function (value, meta) {
        return value;
    };

    var onSuccess = function (data) {
        accionMensajes(data);
    };

    var onFailure = function (modo) {
        App.btnSave.setDisabled(false);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };

    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente',
                Accion: null
            }
        });
    }

    var showResult = function (btn) {
        Ext.Msg.notify("Aceptar", "You clicked the " + btn + " button");
    };
    var eventoRadio = function (rd1, com1, com2, com3, valor) {
        var rdAll1 = rd1.getValue();        
        if (rdAll1) {
            if (valor == "T") {
                com1.setDisabled(false);
                com2.setDisabled(true);
                com3.setDisabled(true);
                com2.setValue(null);
                com3.setValue(null);
            } if (valor == "N") {
                com1.setDisabled(true);
                com2.setDisabled(false);
                com3.setDisabled(true);
                com1.setValue(null);
                com3.setValue(null);
            } if (valor == "F") {
                com1.setDisabled(true);
                com2.setDisabled(true);
                com3.setDisabled(false);
                com1.setValue(null);
                com2.setValue(null);
            }
        }else{}        
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };
    var validarCantidad = function (obj, valor) {
        if (valor.length > 10) {
            obj.setValue(valor.substring(0, 10))
        }
        return;
    };
    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };
    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(999999);
        } else {
            componente.setDisabled(false);
        }
    };    
</script>
@(Html.X().Window()
    .Width(610)
    .Height(435)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    //.AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
        .ID("WindowX")
                .Title("Maestro Parámetros:" + modoDesc)
    .Padding(4)
    .Items(
                    Html.X().FormPanel().ID("FormPanel1")
                             .Frame(false)
                             .Border(false)
                            .AutoScroll(true)
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Items(
                        Html.X().FormPanel()
                             .Frame(false)
                             .Border(false)
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                            .Items(
                            Html.X().FormPanel().Layout(LayoutType.Form).Width(300).FieldDefaults(d => { d.LabelWidth = 100; }).BodyPadding(10).Frame(false).Border(false)
                                .Items(
                                X.ComboBoxFor(m => m.AplicacionCodigo).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenericoTxt("APLICACIONESMAST").Select(d => new ListItem(d.Name, d.Codigo))).FieldLabel("Aplicación").ReadOnly(Model.Accion == "NUEVO" ? false : true).Editable(false).SimpleSubmit(true),
                                Html.X().Container().Layout(LayoutType.HBox)
                                   .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                   .Items(
                                     X.Checkbox().FieldLabel("Compañía").ID("chKCompania")
                                         .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chKCompania,App.CompaniaCodigo);").ReadOnly(Model.Accion == "NUEVO" ? false : true)
                                     .Checked(Model.Accion == "NUEVO" ? true : (Model.CompaniaCodigo == "999999" ? true : false)),
                                             X.ComboBoxFor(m => m.CompaniaCodigo).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenerico("COMPANIAMAST").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("").ReadOnly(Model.Accion == "NUEVO" ? false : true).Editable(false).SimpleSubmit(true).Disabled(Model.Accion == "NUEVO" ? true : (Model.CompaniaCodigo == "999999" ? true : false)).Value(999999).Width(160)
                                      ),
                                X.TextFieldFor(m => m.ParametroClave).Width(200).ReadOnly(Model.Accion == "NUEVO" ? false : true)
                                .FieldLabel("Parámetro")
                                //.Plugins(X.InputMask().Mask("**********"))
                                .Listeners(l => l.Change.Handler = "validarCantidad(App.ParametroClave,App.ParametroClave.getValue());")
                                ,
                                X.CheckboxGroupFor(m => m.FinanceComunFlag, new List<Checkbox.Config> {new Checkbox.Config{
                                    BoxLabel = "Común para finanzas", InputValue="2",
                                    Checked= ( Model.Accion=="NUEVO"?false:(Model.FinanceComunFlag=="2"?true:false))
                                    ,ReadOnly = indicaModoLectura},}),
                                X.TextAreaFor(m => m.DescripcionParametro).FieldLabel("Descripción").ReadOnly(indicaModoLectura).Height(50),
                                X.TextAreaFor(m => m.Explicacion).FieldLabel("Explicación").ReadOnly(indicaModoLectura).Height(50),
                                X.ComboBoxFor(m => m.Estado).Editable(false).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Estado").Value(2).SimpleSubmit(true).ReadOnly(indicaModoLectura)
                                ),
                                    Html.X().FormPanel().Layout(LayoutType.Form).Width(265).Height(200).FieldDefaults(d => { d.LabelWidth = 45; }).Frame(false).Border(false)
                                .Items(
                                X.FieldSet().Title("Valor del Parámetro").FieldDefaults(d => { d.LabelWidth = 45; d.InputWidth = 120; })
                                .Items(
                                Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                                Html.X().Container().Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Right }).MarginSpec("10 0 0 0")
                                .Items(   
                                X.RadioGroupFor(m => m.TipodeDatoFlag, new List<Radio.Config> {
                                    new Radio.Config{InputValue = "T", Width = 90,Checked= ( Model.Accion=="NUEVO"?true:(Model.TipodeDatoFlag=="T"?true:false)),ReadOnly = indicaModoLectura, FieldLabel = "Texto" , Handler="eventoRadio(this,App.Texto,App.Numero,App.Fecha,'T');", LabelWidth=45, MarginSpec = "0 0 5 0"},
                                    new Radio.Config{InputValue = "N",Checked= ( Model.Accion=="NUEVO"?false:(Model.TipodeDatoFlag=="N"?true:false)),ReadOnly = indicaModoLectura, FieldLabel = "Número", Handler="eventoRadio(this,App.Texto,App.Numero,App.Fecha,'N');", LabelWidth=45, MarginSpec = "0 0 5 0"},
                                    new Radio.Config{InputValue = "F",Checked= ( Model.Accion=="NUEVO"?false:(Model.TipodeDatoFlag=="F"?true:false)),ReadOnly = indicaModoLectura, FieldLabel = "Fecha", Handler="eventoRadio(this,App.Texto,App.Numero,App.Fecha,'F');", LabelWidth=45}
                                }).FieldLabel("").AutomaticGrouping(false).ColumnsNumber(1)
                                ),
                                Html.X().Container().Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Left }).MarginSpec("10 0 0 0")
                                .Items(
                                    X.TextFieldFor(m => m.Texto).Width(200).ReadOnly(indicaModoLectura).FieldLabel("").Disabled(Model.Accion == "NUEVO" ? false : (Model.TipodeDatoFlag == "T" ? false : true)),
                                    X.NumberFieldFor(m => m.Numero).FieldLabel("").Width(200).ReadOnly(indicaModoLectura).Disabled(Model.Accion == "NUEVO" ? true : (Model.TipodeDatoFlag == "N" ? false : true)),
                                    X.DateFieldFor(m => m.Fecha).FieldLabel("").Width(200).ReadOnly(indicaModoLectura).Editable(false).Disabled(Model.Accion == "NUEVO" ? true : (Model.TipodeDatoFlag == "F" ? false : true))
                                ))))),
                                Html.X().FormPanel().Layout(LayoutType.Form).Width(200).BodyPadding(10).Frame(false).Border(false)
                                .Items(
                                X.FieldSet().Title("Información Adicional").FieldDefaults(d => { d.LabelWidth = 90; d.InputWidth = 120; })
                                .Items(
                                Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                                X.TextFieldFor(m => m.UsuarioCreacion).FieldLabel("Creación").ReadOnly(true),
                                X.DateFieldFor(m => m.FechaCreacion).Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true),
                                X.TimeFieldFor(m => m.FechaCreacion).ID("dfHoraCreacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true)),
                                Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                                X.TextFieldFor(m => m.UltimoUsuario).FieldLabel("Modificación").ReadOnly(true),
                                X.DateFieldFor(m => m.UltimaFechaModif).Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true),
                                X.TimeFieldFor(m => m.UltimaFechaModif).ID("dfHoraModificacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true))
                                )),
                                X.TextArea().ID("taAlerts")
                                .Border(false)
                                .StyleSpec("background:white;border:1px solid gray;")
                                .FieldStyle("color: red")
                                .Hidden(true)
                                .ReadOnly(true)
                                )
                         .TopBar(
                             X.Toolbar()
                             .Height(30)
                             .Items(
                                X.ToolbarFill(),
                                X.Button()
                                        .Hidden((Model.Accion == "VER" ? true : false))
                                        .ID("btnSave")
                                        .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                                        .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                                     .DirectEvents(de =>
                                      {
                                          de.Click.Url = Url.Action("save_Parametro");
                                          de.Click.Before = "App.btnSave.setDisabled(true); " + "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
                                          de.Click.After = "App.btnSave.setDisabled(false); ";
                                          de.Click.EventMask.ShowMask = true;
                                          de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
                                          de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowX", ParameterMode.Value));
                                          de.Click.Success = "onSuccess(result.data);";
                                          de.Click.Failure = "onFailure('" + Model.Accion + "');";

                                      }),
                                X.Button()
                                            .Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar"))
                                            .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel))
                                     .DirectEvents(de =>
                                      {
                                          de.Click.Url = Url.Action("cerrarWindow");
                                          de.Click.ExtraParams.Add(new Parameter("id", "WindowX", ParameterMode.Value));
                                      }),
                                          X.ToolbarSpacer(20)     
                                 )
                            )
        )
        .DirectEvents(de =>
        {
            de.Render.Url = Url.Action("postWindowParametro");
            de.Render.ExtraParams.Add(new Parameter("id", "" + Model.AplicacionCodigo, ParameterMode.Value));
        })
    .CloseAction(CloseAction.Destroy)
)