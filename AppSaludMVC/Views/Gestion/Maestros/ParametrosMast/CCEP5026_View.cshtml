@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.ParametrosMast
@{
    ViewBag.Title = "CCEP5026_View";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section cabecera
{
    <script>
        var varTiposBuscar = "LOAD";
        var Valores;
        var COLOR_BLUE01 = "#284A89";
        var COLOR_RED01 = "#990000";
        var COLOR_GREEN01 = "#177506";
        var COLOR_YELLOW02 = "#D9A407";
        var COLOR_BLACK = "#000000";
        var seleccionActual1 = null;
        var seleccionActual2 = null;
        var seleccionActual3 = null;

      function setSelecciones(param1) {
          seleccionActual1 = param1;
          seleccionActual2 = param1;
          seleccionActual3 = param1;
        }

      var changeEstado = function (value) {
          var template = '<span style="color:{0};">{1}</span>';
          if (value == 2)
              return Ext.String.format(template, COLOR_BLUE01, "Activo");
          if (value == 1)
              return Ext.String.format(template, COLOR_RED01, "Inactivo");
      };

      var changeTipoDato = function (value) {
          var template = '<span style="color:{0};">{1}</span>';
          if (value == 'T')
              return Ext.String.format(template, COLOR_BLACK, "Texto");
          if (value == 'N')
              return Ext.String.format(template, COLOR_BLACK, "Número");
          if (value == 'F')
              return Ext.String.format(template, COLOR_BLACK, "Fecha");          
      };

      var pctChange = function (value) {
          return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
      };

      var onSuccess = function (grid, data) {
          grid.show();
          grid.getStore().loadData(data);
      };

    function nuevo() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ParametroRegistro"))',
            params: {
                MODO: 'NUEVO',
                tipo: ''

            }
        });
    };
        function modificarSelected() {
            if (seleccionActual1 != null ) {
                var status = seleccionActual1.AplicacionCodigo;
                var status2 = seleccionActual2.CompaniaCodigo;
                var status3 = seleccionActual3.ParametroClave;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("ParametroRegistro"))',
                    params: {
                        MODO: 'UPDATE',
                        aplicacion: status,
                        compania: status2,
                        parametro: status3
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }
        function eliminarSelected() {
            if (seleccionActual1 != null ) {
                var status = seleccionActual1.AplicacionCodigo;
                var status2 = seleccionActual2.CompaniaCodigo;
                var status3 = seleccionActual3.ParametroClave;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ParametroRegistro"))',
                params: {
                    MODO: 'DELETE',
                    aplicacion: status,
                    compania: status2,
                    parametro: status3

                }
            });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
     }

        function verSelected() {
            eventoVerSelected(seleccionActual1);
        }

        function eventoVerSelected(param1) {
            if (App.compoVER.isVisible(true)) {
                if (param1 != null) {
                    var status = param1.AplicacionCodigo;
                    var status2 = seleccionActual2.CompaniaCodigo;
                    var status3 = seleccionActual3.ParametroClave;
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ParametroRegistro"))',
                        params: {
                            MODO: 'VER',
                            aplicacion: status,
                            compania: status2,
                            parametro: status3
                        }
                    });
                } else {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Debe Seleccionar un Elemento.",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                }
            }
        }

        var accionBuscarFiltro = function (tipo) {
            varTiposBuscar = tipo;
            App.GridPanel1.getStore().reload();
            varTiposBuscar = 'LOAD';
        };

        var accionFinal = function (btn) {
            App.GridPanel1.getSelectionModel().deselectAll();
            seleccionActual1 = null;
            seleccionActual2 = null;
            seleccionActual3 = null;
            App.GridPanel1.getStore().reload();
        };

        var eventoCheckFiltro = function (check, componente) {
            var checkAll = check.getValue();
            if (checkAll) {
                componente.setDisabled(true);
                componente.setValue(null);
            } else {
                componente.setDisabled(false);
            }
        }
        var eventoCargarMain = function () {

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addPermisosFormatos"))',
                params: {
                    data: 'FORMATO',
                    indica: 'PERMISO',
                },
                success: function (result) { accionSetPermisos(result.data); }
            });
        };
        var accionSetPermisos = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].ACCION == 'BUSCAR' && App.compoBUSCAR != null) {
                        App.compoBUSCAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'NUEVO' && App.compoNUEVO != null) {
                        App.compoNUEVO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'MODIFICAR' && App.compoMODIFICAR != null) {
                        App.compoMODIFICAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'ELIMINAR' && App.compoELIMINAR != null) {
                        App.compoELIMINAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'VER' && App.compoVER != null) {
                        App.compoVER.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'ACCESO' && App.compoACCESO != null) {
                        App.compoACCESO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'HABILITADO' && App.compoHABILITADO != null) {
                        App.compoHABILITADO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'OBLIGA' && App.compoOBLIGA != null) {
                        App.compoOBLIGA.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'PRIORIDADAGOPCION' && App.compoPRIORIDADAGOPCION != null) {
                        App.compoPRIORIDADAGOPCION.setVisible((data[i].campoInt01 == 2 ? true : false));
                    }
                }
            }
        };
    </script>
}

@section cuerpo
{
    @(
 Html.X().Viewport()
        .AutoScroll(true)
        .Layout(LayoutType.Border)
        .Items(
           X.Panel()
              .Title("Parámetros")
              .Border(false)
              .Region(Region.North)
              .Split(true)
             .Collapsible(true)
              .Height(150)
              .TopBar(
                         X.Toolbar()
                        .Height(30)
                                    .Items(
                               X.Button()
                                    .Text("Buscar").ID("compoBUSCAR")
                                    .Icon(Icon.Find)
                                         .Handler("accionBuscarFiltro('FILTRO');"),
                                                    X.ToolbarSeparator(),
                                                    X.ToolbarSpacer(),
                                    X.Button()
                                            .Text("Nuevo").ID("compoNUEVO")
                                        .Icon(Icon.ApplicationFormAdd)
                                        .Handler("nuevo(); "),
                                    X.Button()
                                            .Text("Modificar").ID("compoMODIFICAR")
                                        .Icon(Icon.ApplicationFormEdit)
                                                .Handler("modificarSelected();")
                                             ,
                                    X.Button()
                                            .Text("Eliminar").ID("compoELIMINAR")
                                        .Icon(Icon.ApplicationFormDelete)
                                            .Handler("eliminarSelected();"),
                                       X.ToolbarSeparator(),
                                        X.Button()
                                                .Text("Ver").ID("compoVER")
                                            .Icon(Icon.ApplicationViewDetail)
                                            .Handler("verSelected();"),
                                     X.ToolbarFill()
                              )
              )
             .Items(X.Panel()
                    .Layout(LayoutType.HBox)
                        .BodyPadding(5)
                        .Border(false)
                        .MarginSpec("1 20 1 1")
                    .Items(
                            X.FieldSet()
                                .Flex(1)
                                .Title("Filtros")
                                .MarginSpec("5 5 5 10")
                                .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "40"));
                                })
                                .Items(
                                    Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                    .Items(
                                        X.Checkbox().FieldLabel("Parámetro").ID("chHPar").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHPar,App.tfBuscarPar);").Checked(true),                                        
                                        X.TextField().ID("tfBuscarPar").Disabled(true).Name("buscarPar").FieldLabel(""),
                                        X.Checkbox().FieldLabel("Descripción").ID("chHC").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHC,App.tfBuscarDesc);").Checked(true),
                                        X.TextField().ID("tfBuscarDesc").Disabled(true).Name("buscarDesc").FieldLabel(""))
                                        )

                                        )
                                        ),
            X.Panel()
                .Region(Region.Center)
                .ItemID("center")
               .Header(false)
               .Border(false)
               .Items(
                   X.GridPanel()
                   .AllowDeselect(true)
                        .Border(false)
                        .Scroll(ScrollMode.Both)
                        .AutoScroll(true)
                        .ID("GridPanel1")
                        .Margins("0 0 0 0")
        ///CONFIGURAR EL STORE
                        .Store(store => store.Add(
                                 Html.X().Store()
                                     .ID("Store1")
                                     .AutoLoad(true)
                                     .RemoteSort(false)
                                     .IsPagingStore(true)
                                     .RemotePaging(true)
                                     .PageSize(15)
                                     .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                    .Url("getGrillaParametro")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data").TotalProperty("total").IDProperty("Texto1")
                                                 )))
                                                )
                                         .Parameters(ps =>
                                                ps.Add(new
                                                {
                                                    descripcion = JRawValue.From("App.tfBuscarDesc.getValue()"),
                                                    parametro = JRawValue.From("App.tfBuscarPar.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTiposBuscar")
                                                })
                                         )
                                     .Model(model => model.Add(Html.X().Model()
                                             .Fields(fields =>
                                             {
                                                 fields.Add(Html.X().ModelField().Name("ParametroClave"));
                                                 fields.Add(Html.X().ModelField().Name("DescripcionParametro"));
                                                 fields.Add(Html.X().ModelField().Name("CompaniaCodigo"));
                                                 fields.Add(Html.X().ModelField().Name("TipodeDatoFlag"));
                                                 fields.Add(Html.X().ModelField().Name("Estado"));
                                                 fields.Add(Html.X().ModelField().Name("Texto1"));
                                                 fields.Add(Html.X().ModelField().Name("ExplicacionAdicional"));
                                             }))
                                            )
                                          )
                               )
        ///CONFIGURAR LAS COLUMNAS
                            .ColumnModel(columnModel =>
                            {
                                columnModel.Columns.Add(Html.X().Column().Text("Parámetro").DataIndex("ParametroClave").Width(100));
                                columnModel.Columns.Add(Html.X().Column().Text("Descripción").DataIndex("DescripcionParametro").Width(250));
                                columnModel.Columns.Add(Html.X().Column().Text("CIA").DataIndex("CompaniaCodigo").Width(100).Hidden(true));
                                columnModel.Columns.Add(Html.X().Column().Text("Compañía").DataIndex("ExplicacionAdicional").Width(100));
                                columnModel.Columns.Add(Html.X().Column().Text("Tipo de Valor").DataIndex("TipodeDatoFlag").Width(100).Renderer("changeTipoDato"));
                                columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(100).Renderer("changeEstado"));
                                columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("Texto1").Width(50).Hidden(true)
                                    );
                            })
                             .View(Html.X().GridView().TrackOver(false))
                                 .Border(false)
                                      .Listeners(l => l.CellClick.Handler = "setSelecciones(record.data);")
                                      .Listeners(l => l.CellDblClick.Handler = "eventoVerSelected(record.data);")
                            .BottomBar(bar => bar.Add(
                                Html.X().PagingToolbar()
                            ))
                )
        )
            .Listeners(l => l.Render.Handler = "eventoCargarMain();") 	
    )
    @(X.KeyNav()
                    .Target("={document.body}")
                    .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO');")
    )
}