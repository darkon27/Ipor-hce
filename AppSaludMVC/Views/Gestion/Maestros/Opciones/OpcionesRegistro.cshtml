@model SoluccionSalud.Entidades.Entidades.SG_Opcion

@{
    var X = Html.X();
    var idWindow = "WindowAgente";
    var modoDesc = (Model.Accion == "NUEVO" ? "Nuevo" :
                    (Model.Accion == "UPDATE" ? "Modificar" :
                        (Model.Accion == "DELETE" ? "Eliminar" :
                            (Model.Accion == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));

    var indicaModoLecturaKey = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? false :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));

    var STYLE_BACKGROUND_NODEIT = "background: #BBD8D6"; //BBD8D6  #9FBCB9
    var COLOR_BORDER_DEFAULT = "#b5b8c8";

    var STYLE_BORDER_DEF_VALID01 =
        (Model.CodigoOpcion != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
    var STYLE_BORDER_DEF_VALID02 =
            (Model.Descripcion != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");

}

<script>


    var template = 'color:{0};';

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";


    var change = function (value, meta) {
        return value;

    };



    function seleccionadorFormato() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorFormato"))',
            params: {
                AccionSeleccion: 'getSeleccionFormatoOpcion',
                AccionListado: 'LISTARPAG'
            }
        });
    };

    function cerrarWindow() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeBox"))',
                params: {
                    message: 'Se registró correctamente la Opción.',
                    accion: null
                }
            });
        }

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };
        var onSuccess = function (data) {
            if (data != null) {
                accionMensajes(data);
            }
        };

        var onFailure = function (modo) {
            App.btnSave.setDisabled(false);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeBox"))',
                params: {
                    message: 'Un error en el evento ',
                    titulo: "Error",
                    tipo: 'ERROR'
                }
            });
        };
        var validarCampo = function (componente) {
            if (componente.getValue() != null) {
                if (componente.getValue().trim() == 0) {
                    componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

                } else {
                    componente.setFieldStyle("border-color: " + COLOR_BORDER_DEF);
                }
            } else {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

            }
        };

        var eventoCheck = function (check, componente) {
            var checkAll = check.getValue();
            if (!checkAll) {
                componente.setDisabled(true);
                componente.setValue(null);
            } else {
                componente.setDisabled(false);
            }
        }


</script>

@(Html.X().Window()
    .Width(780)
    .Height(480)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
        //.AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID(idWindow)
    .Title("Registro de Opciones:" + modoDesc)
    .Padding(4)
        //.X(0)
        .Y(20)
    .Items(
                    Html.X().FormPanel().ID("FormPanel1")
                             .Frame(false)
                             .Border(false)
                            .AutoScroll(true)
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.StretchMax })
                    .Items(
                        Html.X().FormPanel()
                        .Layout(LayoutType.Form)
                        .Width(600)
        /*
        .FieldDefaults(d =>
        {
            d.LabelWidth = 100;
        })*/
                        .BodyPadding(10)
                        .Frame(false)
                        .Border(false)
                        .Items(
                                    X.FieldSet()
        //.Width(250)
                                        .Layout(LayoutType.VBox)
                                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                        .Title("Información General")
                                        .Padding(5)

                                        /*.FieldDefaults(d =>
                                        {
                                            d.LabelWidth = 90;
                                            d.InputWidth = 120;
                                        })*/
                                        .Items(
                                            Html.X().Container().Layout(LayoutType.HBox)
                                            .Margins("5 5 0 5") // top,right,botton,Left
                                           .Width(600)
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                                 X.NumberFieldFor(c => c.IdOpcion)
                                                 .FieldLabel("Id Opción").Width(300)//.FieldStyle(STYLE_BACKGROUND_NODEIT)
                                                 .ReadOnly(true).Hidden(false)
                                                  ,
                                                 X.NumberFieldFor(m => m.IdOpcionPadre)
                                                 .Width(230)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("Opción Padre").ReadOnly(true)//.Listeners(l => l.Change.Handler = "validarCampo(App.tfCodigo);")
                                                 .Value(Model.IdOpcionPadre)
                                           ),
                                           Html.X().Container().Layout(LayoutType.HBox)
                                           .Margins("5 5 0 5")
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                                X.TextFieldFor(c => c.CodigoOpcion)
                                                .FieldLabel("Código").Width(300)//.FieldStyle(STYLE_BACKGROUND_NODEIT)
                                                .ReadOnly(indicaModoLectura).Hidden(false)
                                                .Value(Model.Accion == "NUEVO" ? "0" : Model.CodigoOpcion)
                                                ,
                                                X.NumberFieldFor(m => m.Orden)
                                                .Width(230)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("Orden").ReadOnly(indicaModoLectura)//.Listeners(l => l.Change.Handler = "validarCampo(App.tfCodigo);")
                                                ,
                                                X.NumberFieldFor(m => m.NivelOpcion)
                                                .Width(230)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("Nivel").ReadOnly(indicaModoLectura)//.Listeners(l => l.Change.Handler = "validarCampo(App.tfCodigo);")
                                                .Value(Model.NivelOpcion).Hidden(true)
                                           ),
                                            Html.X().Container().Layout(LayoutType.HBox)
                                            .Margins("5 5 0 5")
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                               X.ComboBoxFor(m => m.Sistema)
                                               .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                               .GetComboGenericoTxt("SISTEMA").Select(d => new ListItem(d.Name, d.Codigo)))
                                               .FieldLabel("Sistema").ReadOnly(indicaModoLectura).Editable(true).Width(530)
                                               .SimpleSubmit(true)
        /*
       X.TextFieldFor(m => m.Sistema)
       .FieldLabel("Sistema").ReadOnly(indicaModoLectura).Width(550)*/
                                           )
                                           ,
                                           Html.X().Container().Layout(LayoutType.HBox)
                                           .Margins("5 5 0 5")
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                               X.ComboBoxFor(m => m.Modulo)
                                               .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                               .GetComboGenericoTxtDos((Model.Sistema != null ? Model.Sistema : ""), "", "", "", "MODULO").Select(d => new ListItem(d.Name, d.Codigo)))
                                               .FieldLabel("Módulo").ReadOnly(indicaModoLectura).Editable(true).Width(300)
                                               .SimpleSubmit(true),
        /*
        X.TextFieldFor(c => c.Modulo)
        .FieldLabel("Módulo").Width(300)//.FieldStyle(STYLE_BACKGROUND_NODEIT)
        .ReadOnly(indicaModoLectura).Hidden(false)
        ,*/
                                                X.TextFieldFor(m => m.SubModulo)
                                                .Width(230)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("Sub Módulo").ReadOnly(indicaModoLectura)//.Listeners(l => l.Change.Handler = "validarCampo(App.tfCodigo);")
                                           ),
                                            Html.X().Container().Layout(LayoutType.HBox)
                                            .Margins("5 5 0 5")
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                               X.TextFieldFor(m => m.Nombre)
                                               .FieldLabel("Nombre").ReadOnly(indicaModoLectura).Width(530)
                                           )
                                           ,
                                            Html.X().Container().Layout(LayoutType.HBox)
                                           .Margins("5 5 0 5")
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                               X.TextFieldFor(m => m.Descripcion)
                                               .FieldLabel("Descripción").ReadOnly(indicaModoLectura).Width(530)
                                           ),
                                            Html.X().Container().Layout(LayoutType.HBox)
                                            .Margins("5 5 0 5")
                                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                                X.TextFieldFor(m => m.UrlOpcion)
                                                    .FieldLabel("URL Opción").ReadOnly(indicaModoLectura).Width(530)
                                           )
                                            ,
                                            Html.X().Container().Layout(LayoutType.HBox)
                                            .Margins("5 5 0 5")
                                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                           .Items(
                                                 X.NumberFieldFor(c => c.IdFormato)
                                                 .FieldLabel("Formato").Width(150)//.FieldStyle(STYLE_BACKGROUND_NODEIT)
                                                 .ReadOnly(true)
                                                  ,
                                                 X.TextField()
                                                .ID("tfCodFormato").Width(100)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("").ReadOnly(true)
                                                ,
                                                X.TextField()
                                                .ID("tfDescFormato").Width(280)//.MaxLength(10).MaxLengthText("Maxima cantidad de carácteres = 10")
                                                .FieldLabel("").ReadOnly(true)
                                                ,
                                                X.Button().Text("...").Disabled(indicaModoLectura)
        //.Listeners(l => l.Change
                                                .Handler("seleccionadorFormato();")
                                           )
                                          )

                            ),

                                 Html.X().FormPanel()
                                .Layout(LayoutType.Form)
                                .Width(600)
                                .FieldDefaults(d =>
                                 {
                                     d.LabelWidth = 150;
                                 })
                                .BodyPadding(10)
                                .Frame(false)
                                .Border(false)
                                .Items(
                                    X.FieldSet()
        //.Width(250)
                                    .Layout(LayoutType.Form)
                                    .Title("Información Adicional")
                                    .FieldDefaults(d =>
                                    {
                                        d.LabelWidth = 99;
                                        d.InputWidth = 150;
                                    })
                                    .Items(
                                            Html.X().Container().Layout(LayoutType.HBox)
                                           .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                                .Items(
                                                Html.X().Container().Layout(LayoutType.VBox)
                                                 .Width(300)
                                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                                .Items(
                                                     X.ComboBoxFor(m => m.TipoOpcion)
                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                     .GetComboGenericoTxt("TPOPCIONVA").Select(d => new ListItem(d.Name, d.Codigo)))
                                                     .FieldLabel("Tipo Opción").ReadOnly(indicaModoLectura).Editable(true)
                                                    .SimpleSubmit(true),
                                                    X.ComboBoxFor(m => m.TipoIcono)
                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                    .GetComboGenerico("TPOPCIONIC").Select(d => new ListItem(d.Name, d.ID)))
                                                    .FieldLabel("Tipo Ícono").ReadOnly(indicaModoLectura).Editable(true)
                                                    .SimpleSubmit(true),

                                                      X.ComboBoxFor(m => m.IndicadorPrioridad)
                                                     .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                      .GetComboGenerico("TPOPCIONPR").Select(d => new ListItem(d.Name, d.ID)))
                                                      .FieldLabel("Prioridad").ReadOnly(indicaModoLectura).Editable(true)
                                                     .SimpleSubmit(true)
                                                    ,
                                                    X.ComboBoxFor(m => m.IndicadorFormato)
                                                    .Items(
                                                        new ListItem("Carpeta", 1),
                                                        new ListItem("Archivo", 2)
                                                    )
                                                    .FieldLabel("Tipo Folder").ReadOnly(indicaModoLectura).Editable(true)
                                                    .SimpleSubmit(true)
                                                    ,
                                                    Html.X().Container().Layout(LayoutType.HBox)
                                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                                    .MarginSpec("0 0 5 0")
                                                    .Items(
                                                        X.Checkbox().Checked(true)
                                                        .IndicatorTip("Habilita o deshabilita la Asignación del Tipo de Atención")
                                                        .FieldLabel("Tipo Atención")
                                                         .ID("chkTipoAtencion").Width(105).LabelWidth(80)
                                                         .Listeners(l => l.Change.Handler = "eventoCheck(App.chkTipoAtencion,App.idTipoAtencion);")
                                                        ,
                                                        X.ComboBoxFor(m => m.idTipoAtencion)//.InputWidth(110)

                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                        .GetComboGenerico("TIPOATENCION").Select(d => new ListItem(d.Name, d.ID)))
                                                        .FieldLabel("").ReadOnly(indicaModoLectura).Editable(true)
                                                        .SimpleSubmit(true)
                                                    )
                                                    ,
                                                    X.ComboBoxFor(m => m.TipoTrabajador)
                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                    .GetComboGenericoTxt("TIPOTRABAJADOR").Select(d => new ListItem(d.Name, d.Codigo)))
                                                    .FieldLabel("Tipo Trabajador").ReadOnly(indicaModoLectura).Editable(true)
                                                    .SimpleSubmit(true)
                                                         ,
                                                        X.NumberFieldFor(c => c.ValorNumerico)
                                                        .Width(200)
                                                            .FieldLabel("Cant. de horas máxima para editar las  atenciones firmadas. (Aplica solo para Macroprocesostt)").ReadOnly(indicaModoLectura)

                                                       /* X.ComboBoxFor(m => m.TipoTrabajador)
                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                        .GetComboGenericoTxt("TIPOTRABAJADOR").Select(d => new ListItem(d.Name, d.Codigo)))
                                                        .FieldLabel("Tipo Formulario").ReadOnly(indicaModoLectura).Editable(true)
                                                        .SimpleSubmit(true)
                                                        */
                                                )
                                                ,
                                                Html.X().Container().Layout(LayoutType.VBox)
                                                .Width(300)
                                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                                .Items(
                                                    X.ComboBoxFor(m => m.TipoDato)
                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                    .GetComboGenericoTxt("TIPODATO").Select(d => new ListItem(d.Name, d.Codigo)))
                                                    .FieldLabel("Tipo Dato").ReadOnly(indicaModoLectura).Editable(true)
                                                    .SimpleSubmit(true),
        /*
        X.TextFieldFor(c => c.TipoDato)
        .Width(200)
        .FieldLabel("Tipo Dato").ReadOnly(indicaModoLectura)
        ,*/
                                                     X.TextFieldFor(c => c.ValorTexto)
                                                    .Width(200)
                                                    .FieldLabel("Valor Texto").ReadOnly(indicaModoLectura)
                                                    ,
                                                   X.DateFieldFor(c => c.ValorFecha)
                                                    .Width(200)
                                                    .FieldLabel("Valor Fecha").ReadOnly(indicaModoLectura)
                                                    ,
                                                    Html.X().Container().Layout(LayoutType.HBox)
                                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                                    .MarginSpec("0 0 5 0")
                                                    .Items(
                                                        X.CheckboxGroupFor(c => c.IndicadorCompania, new List<Checkbox.Config> {
                                                    new Checkbox.Config{BoxLabel = "", InputValue="2",
                                                    Checked= ( Model.Accion=="NUEVO"?false:(Model.IndicadorCompania==2?true:false))
                                                    ,ReadOnly = indicaModoLectura},
                                                    }).Width(105).LabelWidth(80)
                                                        .FieldLabel("Compañía"),
                                                        X.ComboBoxFor(m => m.Compania)
                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                         .GetComboGenericoTxt("COMPANY").Select(d => new ListItem(d.Name, d.Codigo)))
                                                         .FieldLabel("").ReadOnly(indicaModoLectura).Editable(true).MatchFieldWidth(false)
                                                         .SimpleSubmit(true)
                                                    )
                                                    ,
                                                    X.ComboBoxFor(m => m.Estado)
                                                    .Items(
                                                        new ListItem("Inactivo", 1),
                                                        new ListItem("Activo", 2)
                                                     ).ReadOnly(indicaModoLectura).Width(200)
                                                     .Value((Model.Accion == "NUEVO" ? 2 : Model.Estado))
                                                     .FieldLabel("Estado").Editable(false)
                                                     .SimpleSubmit(true)
                                                    ,
                                                    X.ComboBoxFor(m => m.IndicadorAsignacion)
                                                    .Items(
                                                        new ListItem("No", 1),
                                                        new ListItem("Sí", 2)
                                                     ).ReadOnly(indicaModoLectura).Width(200)
                                                     .Value((Model.Accion == "NUEVO" ? 1 : Model.IndicadorAsignacion))
                                                     .FieldLabel("Indicar Asignación").Editable(false)
                                                     .SimpleSubmit(true)
                                                     ,
                                                     X.ComboBoxFor(m => m.TipoProceso)
        /*.ID("cmbTipoFormulario")*/
                                                     .FieldLabel("Formulario Obligatorio").ReadOnly(indicaModoLectura).Editable(true)
                                                     .QueryMode(DataLoadMode.Local)
                                                     .TriggerAction(TriggerAction.All)
                                                     .EmptyText("Seleccione")
                                                     .Items(
                                                        new ListItem("No", 0),
                                                        new ListItem("Sí", 1)
                                                       )
                                                      .Value("")
                                                )
                                            )
                                    )
                                ),
                                Html.X().FormPanel()
                                .Layout(LayoutType.Form)
                                .Width(500)
                                .FieldDefaults(d =>
                                 {
                                     d.LabelWidth = 120;
                                 })
                                .BodyPadding(10)
                                .Frame(false)
                                .Border(false)
                                .Items(
                                            X.FieldSet()
        //.Width(250)
                                                .Title("Información Referencial")
                                                .FieldDefaults(d =>
                                                 {
                                                     d.LabelWidth = 90;
                                                     d.InputWidth = 120;
                                                 })
                                                .Items(
                                                  Html.X().Container().Layout(LayoutType.HBox)
                                                  .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
        /*.Defaults(d =>{
              d.Add(new Parameter("LabelWidth", "110"));
         })*/
                                                   .Items(
                                                         X.TextFieldFor(m => m.UsuarioCreacion)//.FieldStyle(STYLE_BACKGROUND_NODEIT)
                                                            .FieldLabel("Creación").ReadOnly(true),
                                                         X.DateFieldFor(m => m.FechaCreacion)
                                                        .Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                                                       X.TimeFieldFor(m => m.FechaCreacion).ID("dfHoraCreacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)
                                                   ),
                                                    Html.X().Container().Layout(LayoutType.HBox)
                                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
        /*.Defaults(d =>
        {
            d.Add(new Parameter("LabelWidth", "110"));
        })*/
                                                    .Items(
                                                            X.TextFieldFor(m => m.UsuarioModificacion)
                                                            .FieldLabel("Modificación").ReadOnly(true),
                                                            X.DateFieldFor(m => m.FechaModificacion)
                                                            .Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                                                        X.TimeFieldFor(m => m.FechaModificacion).ID("dfHoraModificacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)
                                                    )
                                                 )
                                 )
                                 ,
                                X.TextArea().ID("taAlerts")
                                    .Border(false)
                                    .StyleSpec("background:white;border:1px solid gray;")
                                    .FieldStyle("color: red")
                                    .Hidden(true)
                                    .ReadOnly(true)
                         )
                         .TopBar(
                             X.Toolbar()
                             .Height(30)
                             .Items(
                                X.ToolbarFill(),
                                X.Button()
                                    .Hidden((Model.Accion == "VER" ? true : false))
                                    .ID("btnSave")
                                        .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                                        .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
        // .Handler(@"this.up('form').submit({clientValidation: false});")
        //.DirectClickAction("save_Usuario"),
                                     .DirectEvents(de =>
                                      {  //Model.ACCION : Posee el MODO ACTUAL
                                          de.Click.Url = Url.Action("save_SG_Opcion");
                                          de.Click.EventMask.ShowMask = true;
                                          de.Click.Before = "App.btnSave.setDisabled(true); " +
                                                        "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
                                          de.Click.After = "App.btnSave.setDisabled(false); ";
                                          de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
                                          de.Click.ExtraParams.Add(new Parameter("idWindow", idWindow, ParameterMode.Value));
                                          de.Click.Success = "onSuccess(result.data);";
                                          de.Click.Failure = "onFailure('" + Model.Accion + "');";

                                      }),
                                X.Button()
                                        .Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar"))
                                        .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel))
                                     .DirectEvents(de =>
                                      {  //Model.ACCION : Posee el MODO ACTUAL
                                          de.Click.Url = Url.Action("cerrarWindow");
                                          //de.Click.EventMask.ShowMask = true;
                                          de.Click.ExtraParams.Add(new Parameter(
                                                "id", idWindow, ParameterMode.Value));
                                          //de.Click.Success = "onSuccess(result.data,'" + Model.ACCION + "');";
                                          //de.Click.Failure = "onSuccess(result.data,'"+ Model.ACCION + "');";
                                      }),
                                          X.ToolbarSpacer(20)
                                 )
                            )

                //)
    )
    .DirectEvents(de =>
    {
        de.Render.Url = Url.Action("postWindowOpcion");
        de.Render.ExtraParams.Add(new Parameter(
              "idOpcion", "" + Model.IdOpcion, ParameterMode.Value));
        de.Render.ExtraParams.Add(new Parameter(
              "idFormato", "" + Model.IdFormato, ParameterMode.Value));

    })
    .CloseAction(CloseAction.Destroy)
)

