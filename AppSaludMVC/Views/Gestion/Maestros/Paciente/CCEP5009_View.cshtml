@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.VW_PERSONAPACIENTE

@{
    ViewBag.Title = "CCEP5009_View";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section cabecera {
    <script>
    var varTipoBuscar = "LOAD";
    var Valores;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_BLACK = "#000000";

    var seleccionActual1 = null;
    var seleccionActual2 = null;
    var seleccionRecordActual = null;

    function setSeleccion(param1) {
        seleccionActual1 = param1.Paciente;
    }

    function setSeleccion1(record) {
        seleccionRecordActual = record;
        seleccionActual2 = record.data.Persona;
    }

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 'A')
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 'I')
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };

    var changeDocumento = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_BLACK, "DNI");
        if (value == 'D')
            return Ext.String.format(template, COLOR_BLACK, "DNI");
        if (value == 2)
            return Ext.String.format(template, COLOR_BLACK, "RUC");
        if (value == 'R')
            return Ext.String.format(template, COLOR_BLACK, "RUC");
        if (value == 'O')
            return Ext.String.format(template, COLOR_BLACK, "OTROS");
        if (value == 'P')
            return Ext.String.format(template, COLOR_BLACK, "PASAPORTE");
    };

    function validarCantidad(obj, valor) {
        if (valor.length > 8) {
            obj.setValue(valor.substring(0, 8))
            return;
        }
    }

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };

    function nuevo() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("PacienteRegistro"))',
            params: {
                MODO: 'NUEVO',
                idPersona: 0
            }
        });
    };

    function modificarSelected() {
        if (seleccionActual2 != null) {
            var status = seleccionActual2;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("PacienteRegistro"))',
                params: {
                    MODO: 'UPDATE',
                    idPersona: status
                }
            }
			);
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            }
			);
        }
    }

    function eliminarSelected() {
        if (seleccionActual2 != null) {
            var status = seleccionActual2;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("PacienteRegistro"))',
				                params: {
					                    MODO: 'DELETE',
					                    idPersona: status
				}
			}
			);
		} else {
			Ext.Msg.show( {
				title: "Advertencia",
				                    msg: "Debe Seleccionar un Elemento.",
				                    icon: Ext.Msg.WARNING,
				                    minWidth: 200,
				                    buttons: Ext.Msg.OK
			}
			);
		}
	}


    function verSelected() {
        eventoVerSelected(seleccionActual2);
    }

    function eventoVerSelected(param1) {
        if (App.compoVER.isVisible(true)) {
            if (param1 != null) {
                var status1 = param1;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("PacienteRegistro"))',
                    params: {
                        MODO: 'VER',
                        idPersona: status1,
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }
    }

        function preexistenciaSelected() {
            if (seleccionActual2 != null) {
                var status = seleccionActual2;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("PreexistenciaRegistro"))',
                params: {
                    MODO: 'EXISTENCIA',
                    tipo: status
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento que tenga código",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            }
            );
        }
        }

    var accionBuscarFiltro = function (tipo) {
        varTipoBuscar = tipo;
        App.GridPanel1.getStore().reload();
        varTipoBuscar = 'LOAD';
    };

    var accionFinal = function (btn) {
        App.GridPanel1.getSelectionModel().deselectAll();
        seleccionActual1 = null;
        seleccionActual2 = null;
        App.GridPanel1.getStore().reload();
    };

    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    }
    var eventoCargarMain = function () {

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addPermisosFormatos"))',
            params: {
                data: 'FORMATO',
                indica: 'PERMISO',
            },
            success: function (result) { accionSetPermisos(result.data); }
        });
    };
    var accionSetPermisos = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].ACCION == 'BUSCAR' && App.compoBUSCAR != null) {
                    App.compoBUSCAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'NUEVO' && App.compoNUEVO != null) {
                    App.compoNUEVO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'MODIFICAR' && App.compoMODIFICAR != null) {
                    App.compoMODIFICAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'ELIMINAR' && App.compoELIMINAR != null) {
                    App.compoELIMINAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'VER' && App.compoVER != null) {
                    App.compoVER.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'ACCESO' && App.compoACCESO != null) {
                    App.compoACCESO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'HABILITADO' && App.compoHABILITADO != null) {
                    App.compoHABILITADO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'OBLIGA' && App.compoOBLIGA != null) {
                    App.compoOBLIGA.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'PRIORIDADAGOPCION' && App.compoPRIORIDADAGOPCION != null) {
                    App.compoPRIORIDADAGOPCION.setVisible((data[i].campoInt01 == 2 ? true : false));
                }
            }
        }
    };

    function registroHomologacion() {
        if (seleccionRecordActual != null) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("HomologacionRegistroGeneral"))',
                params: {
                    MODO: 'NUEVO',
                    id_1: seleccionRecordActual.data.Persona,
                    id_2: 0,
                    codigo_1: '',
                    codigo_2: '',
                    tabla: 'TABLA_PACIENTE',
                    descripcion: seleccionRecordActual.data.NombreCompleto
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    }

    </script>
}
@section cuerpo {
    @(
 Html.X().Viewport()
            .AutoScroll(true)
            .Layout(LayoutType.Border)
            .Items(
               X.Panel().Title("Maestro de Paciente").Border(false).Region(Region.North).Split(true).Collapsible(true).Height(200)
               .TopBar(
               X.Toolbar().Height(30)
               .Items(
               X.Button().Text("Buscar").ID("compoBUSCAR").Icon(Icon.Find).Handler("accionBuscarFiltro('FILTRO');"),
               X.ToolbarSeparator(),
               X.ToolbarSpacer(),
               X.Button().Text("Nuevo").ID("compoNUEVO").Icon(Icon.ApplicationFormAdd).Handler("nuevo(); "),
               X.Button().Text("Modificar").ID("compoMODIFICAR").Icon(Icon.ApplicationFormEdit).Handler("modificarSelected();"),
               X.Button().Text("Eliminar").ID("compoELIMINAR").Icon(Icon.ApplicationFormDelete).Handler("eliminarSelected();"),
               X.ToolbarSeparator(),
               X.Button().Text("Ver").ID("compoVER").Icon(Icon.ApplicationViewDetail).Handler("verSelected();"),
               X.ToolbarFill(),
               X.ToolbarSpacer(),
               X.Button().Text("Preexistencia").Icon(Icon.Basket).Handler("preexistenciaSelected();").Hidden(true)
               ,
               X.Button()
               .Text("Agregar Homologación").ID("compoHABILITADO")
               .Icon(Icon.BuildingEdit)
               .Handler("registroHomologacion();")                                               
               )
               )
               .Items(
               X.Panel().Layout(LayoutType.HBox).BodyPadding(5).Border(false).MarginSpec("1 20 1 1")
               .Items(
               X.FieldSet().Flex(1).Title("Filtros").MarginSpec("5 5 5 10").Defaults(d => { d.Add(new Parameter("LabelWidth", "40")); })
               .Items(
               Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
               .Items(
               X.Checkbox().FieldLabel("H.C").ID("chHHC").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHHC,App.tfBuscarHC);").Checked(true),
               X.TextField().ID("tfBuscarHC").Disabled(true).Name("buscarHC").FieldLabel(""),
               X.Checkbox().FieldLabel("Nombre Paciente").ID("chHPac").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHPac,App.tfBuscarDesc);").Checked(true),
               X.TextField().ID("tfBuscarDesc").Disabled(true).Name("buscarDesc").FieldLabel("")),
               Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
               .Items(
               X.Checkbox().FieldLabel("H.C. Anterior").ID("chHHCAn").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHHCAn,App.tfBuscarHCAn);").Checked(true),
               X.TextField().ID("tfBuscarHCAn").Disabled(true).Name("buscarHCAn").FieldLabel(""),
               X.Checkbox().FieldLabel("Documento").ID("chHDoc").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHDoc,App.tfBuscarDoc);").Checked(true),
               X.TextField().ID("tfBuscarDoc").Disabled(true).Name("buscarDoc").FieldLabel("").Listeners(l => l.Change.Handler = "validarCantidad(App.tfBuscarDoc,App.tfBuscarDoc.getValue());")),
               Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
               .Items(
               X.Checkbox().FieldLabel("Código").ID("chHCod").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHCod,App.tfBuscarCod);").Checked(true),
               X.TextField().ID("tfBuscarCod").Disabled(true).Name("buscarCod").FieldLabel(""),
               X.Checkbox().FieldLabel("Estado").ID("chHEst").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHEst,App.cmbBuscarEst);").Checked(true),
               X.ComboBox().ID("cmbBuscarEst").Disabled(true).Name("buscarEst")
               .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
               .GetComboGenericoTxt("ESTADOVAR").Select(d => new ListItem(d.Name, d.Codigo))).FieldLabel("").Editable(false).SimpleSubmit(true)),
               Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
               .Items(
               X.Checkbox().FieldLabel("Bloqueado").ID("chHBloq").Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHBloq,App.cmbBuscarBloq);").Checked(true),
               X.ComboBox().ID("cmbBuscarBloq").Disabled(true).Name("buscarBloq").Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("SITUACIONE").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("").Editable(false).SimpleSubmit(true))))),
               X.Panel().Region(Region.Center).ItemID("center").Header(false).Border(false)
               .Items(
               X.GridPanel().AllowDeselect(true).Border(false).Scroll(ScrollMode.Both).AutoScroll(true).ID("GridPanel1").Margins("0 0 0 0").Store(store => store.Add(
                   Html.X().Store().ID("Store1").AutoLoad(true).RemoteSort(false).IsPagingStore(true)
                   .RemotePaging(true).PageSize(10).Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("getGrillaPaciente")
                       .Reader(reader => reader.Add(Html.X().JsonReader()
                           .Root("data").TotalProperty("total").IDProperty("Persona")
                           )))
                           ).Parameters(ps => ps.Add(new
                           {
                               codigohc = JRawValue.From("App.tfBuscarHC.getValue()"),
                               codigohcanterior = JRawValue.From("App.tfBuscarHCAn.getValue()"),
                               paciente = JRawValue.From("App.tfBuscarCod.getValue()"),
                               situacion = JRawValue.From("App.cmbBuscarBloq.getValue()"),
                               nombrecompleto = JRawValue.From("App.tfBuscarDesc.getValue()"),
                               documento = JRawValue.From("App.tfBuscarDoc.getValue()"),
                               estado = JRawValue.From("App.cmbBuscarEst.getValue()"),
                               tipoBuscar = JRawValue.From("varTipoBuscar")
                           })).Model(model => model.Add(Html.X().Model().Fields(fields =>
                           {
                               fields.Add(Html.X().ModelField().Name("Persona"));
                               fields.Add(Html.X().ModelField().Name("CodigoHC"));
                               fields.Add(Html.X().ModelField().Name("CodigoHCAnterior"));
                               fields.Add(Html.X().ModelField().Name("TipoDocumento"));
                               fields.Add(Html.X().ModelField().Name("Documento"));
                               fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                               fields.Add(Html.X().ModelField().Name("edad"));
                               fields.Add(Html.X().ModelField().Name("FechaNacimiento").Type(ModelFieldType.Date));
                               fields.Add(Html.X().ModelField().Name("Paciente"));
                               fields.Add(Html.X().ModelField().Name("Direccion"));
                               fields.Add(Html.X().ModelField().Name("Telefono"));
                               fields.Add(Html.X().ModelField().Name("Estado"));
                               fields.Add(Html.X().ModelField().Name("Situacion"));
                           }))))).ColumnModel(columnModel =>
                           {
                               columnModel.Columns.Add(Html.X().Column().Text("H.C").DataIndex("Persona").Width(80).Hidden(true));
                               columnModel.Columns.Add(Html.X().Column().Text("H.C").DataIndex("CodigoHC").Width(80));
                               columnModel.Columns.Add(Html.X().Column().Text("H.C Anterior").DataIndex("CodigoHCAnterior").Width(80));
                               columnModel.Columns.Add(Html.X().Column().Text("Tip. Doc.").DataIndex("TipoDocumento").Width(60).Renderer("changeDocumento"));
                               columnModel.Columns.Add(Html.X().Column().Text("Documento").DataIndex("Documento").Width(80));
                               columnModel.Columns.Add(Html.X().Column().Text("Nombre Paciente").DataIndex("NombreCompleto").Width(180));
                               columnModel.Columns.Add(Html.X().Column().Text("Edad").DataIndex("edad").Width(50));
                               columnModel.Columns.Add(Html.X().DateColumn().Text("Fec. Nac.").DataIndex("FechaNacimiento").Width(80).Format("dd/MM/yyyy"));
                               columnModel.Columns.Add(Html.X().Column().Text("Código").DataIndex("Paciente").Width(50));
                               columnModel.Columns.Add(Html.X().Column().Text("Dirección").DataIndex("Direccion").Width(200));
                               columnModel.Columns.Add(Html.X().Column().Text("Teléfono").DataIndex("Telefono").Width(80));
                               columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(70).Renderer("changeEstado"));
                               columnModel.Columns.Add(Html.X().Column().Text("Bloqueado").DataIndex("Situacion").Width(60));
                           }
                             ).View(Html.X().GridView().TrackOver(false)).Border(false)
                               .Listeners(l => l.CellClick.Handler = "setSeleccion1(record);")
                               .Listeners(l => l.CellDblClick.Handler = "eventoVerSelected(record.data.Persona);")
                           .BottomBar(bar => bar.Add(
                               Html.X().PagingToolbar()
                               ))
                               )
                               )
                                   .Listeners(l => l.Render.Handler = "eventoCargarMain();")
    )
    @(X.KeyNav().Target("={document.body}").Enter(a => a.Handler = "accionBuscarFiltro('FILTRO');"))
}