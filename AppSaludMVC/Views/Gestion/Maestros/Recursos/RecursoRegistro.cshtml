@model SoluccionSalud.Entidades.Entidades.SS_HC_FormatoRecursoCampo

@{
    var X = Html.X();
    var modoDesc = (Model.Accion == "NUEVO" ? "Nuevo" :
                    (Model.Accion == "UPDATE" ? "Modificar" :
                        (Model.Accion == "DELETE" ? "Eliminar" :
                            (Model.Accion == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :  
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));  

    var indicaModoLecturaKey = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? false :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));
}

<script>

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";
         
    function SeleccionadorVWTABLACAMPO() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("SeleccionadorVWTABLACAMPO"))',
            params: {
                accionSeleccion: 'getSeleccionVWTABLACAMPO',
                accionListado: 'LISTARPAG'
            }
        });
    };

    function SeleccionadorVWFORMATOCAMPO() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("SeleccionadorVWFORMATOCAMPO"))',
            params: {
                accionSeleccion: 'getSeleccionVWFORMATOCAMPO',
                accionListado: 'LISTARPAG'
            }
        });
    };

    var onSuccess = function (data) {
        if (data != null) {
            accionMensajes(data);
        }
    };

    var onFailure = function (modo) {
        App.btnSave.setDisabled(false);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeBox"))',
                params: {
                    message: 'Un error en el evento ',
                    titulo:"Error",
                    tipo:'ERROR'
                }
            });
        };

        function cerrarWindow() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente el usuario.',
                accion: null
            }
        });
    }

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "\t *" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };

    var eventoCheck = function (check, componente) {
        var checkAll = check.getValue();
        if (!checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    }

</script>

@(Html.X().Window()
    .Width(500)
    .Height(400)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    //.AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowCuerpoHumano")
            .Title("Registro de Recursos:" + modoDesc)
    .Padding(4)
    .Items(
                    Html.X().FormPanel().ID("FormPanel1")
                             .Frame(false)
                             .Border(false)
                            .AutoScroll(true)
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Items(
                        Html.X().FormPanel()
                             .Frame(false)
                             .Border(false)
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                            .Height(215)
                            .Items(
                                    Html.X().FormPanel()
                                    .Layout(LayoutType.Form)
                                    .Width(600)
                                    .FieldDefaults(d =>
                                    {
                                        d.LabelWidth = 100;
                                    })
                                    .BodyPadding(10)
                                    .Frame(false)
                                    .Border(false)
                                    .Items(
                                    
                              
                                                      X.NumberFieldFor(m => m.IdFormato).Width(150)
                                                             .FieldLabel("Formato")
                                                         .ReadOnly(true),

                                                                          X.NumberFieldFor(c => c.SecuenciaCampo).Width(150)
                                                                          .ReadOnly(true)
                                                                  .FieldLabel("Secuencia"),

                                                                            X.TextField().ID("txtformato").Width(300)
                                                                .FieldLabel("Código Formato").ReadOnly(true),

                                                                            X.TextField().ID("txtformatocampo").Width(300)
                                                                .FieldLabel("Nombre Formato").ReadOnly(true)
                                                                
                                                .RightButtons(

                                                X.Button().Text("...").Disabled(indicaModoLectura)
                                                            .Handler("SeleccionadorVWFORMATOCAMPO();"))
                                                              
                                                          ,


                              
                                                         X.NumberFieldFor(m => m.IdFavoritoTabla).Width(150)
                                                     .FieldLabel("Favorito")
                                                     .ReadOnly(true),

                                                                        X.TextField().ID("txtTabla").Width(300)
                                                            .FieldLabel("Tabla").ReadOnly(true),

                                                                X.TextFieldFor(m => m.NombreCampoRecurso).Width(300)
                                                          .FieldLabel("Tabla Campo").ReadOnly(true)   
                                                .RightButtons(

                                                X.Button().Text("...").Disabled(indicaModoLectura)
                                                        .Handler("SeleccionadorVWTABLACAMPO();"))
                                                        ,
                                                            
                                                                  X.TextFieldFor(c => c.Version).Hidden(true)
                                                                  .FieldLabel("Version"),

                                               X.ComboBoxFor(m => m.Estado).Width(300)
                                          .Editable(false)
                                          .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                          .GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID)))
                                              .FieldLabel("Estado").Value(2).ReadOnly(indicaModoLectura)
                                          .SimpleSubmit(true)                      
                                       
                                        )

                                         ),

                                    Html.X().FormPanel()
                                    .Layout(LayoutType.Form)
                                    .Width(500)
                                    .FieldDefaults(d =>
                                     {
                                         d.LabelWidth = 120;
                                     })
                                    .BodyPadding(10)
                                    .Frame(false)
                                    .Border(false)
                                    .Items(
                                                X.FieldSet()
        //.Width(250)
                                                    .Title("Información Adicional")
                                                    .FieldDefaults(d =>
                                                     {
                                                         d.LabelWidth = 90;
                                                         d.InputWidth = 120;
                                                     })
                                                    .Items(
                                                      Html.X().Container().Layout(LayoutType.HBox)
                                                      .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                                       .Items(
                                                             X.TextFieldFor(m => m.UsuarioCreacion)
                                                                .FieldLabel("Creación").ReadOnly(true),

                                                             X.DateFieldFor(m => m.FechaCreacion)
                                                            .Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),

                                                                X.TimeFieldFor(m => m.FechaCreacion).ID("dfHoraCreacion")
                                                            .Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)
                                                                                                               ),
                                                        Html.X().Container().Layout(LayoutType.HBox)
                                                        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                                        .Items(
                                                                X.TextFieldFor(m => m.UsuarioModificacion)
                                                                .FieldLabel("Modificación").ReadOnly(true),

                                                                    X.DateFieldFor(m => m.FechaModificacion)
                                                                        .Format("dd/MM/yyyy")
                                                                        .ReadOnly(true).HideLabel(true).Width(80)
                                                                ,

                                                              X.TimeFieldFor(m => m.FechaModificacion).ID("dfHoraModificacion")
                                                               .Width(80).Format("H:mm:ss").ReadOnly(true)
                                                               .FieldLabel("")
                                                        )
                                                     )
                                         ),
                                X.TextArea().ID("taAlerts")
                                 .Border(false)
                                 .StyleSpec("background:white;border:1px solid gray;")
                                 .FieldStyle("color: red")
                                 .Hidden(true)
                                 .ReadOnly(true)
                         )
                         .TopBar(
                             X.Toolbar()
                             .Height(30)
                             .Items(
                                X.ToolbarFill(),
                                    X.Button()
                                        .Hidden((Model.Accion == "VER" ? true : false))
                                        .ID("btnSave")
                                        .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                                        .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                                         .DirectEvents(de =>
                                         {
                                             de.Click.Url = Url.Action("save_Recurso");
                                             de.Click.Before = "App.btnSave.setDisabled(true); " +
                                                           "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
                                             de.Click.After = "App.btnSave.setDisabled(false); ";
                                             de.Click.EventMask.ShowMask = true;
                                                  de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
                                                  de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowCuerpoHumano", ParameterMode.Value));
                                                  de.Click.Success = "onSuccess(result.data);";
                                                  de.Click.Failure = "onFailure('" + Model.Accion + "');";

                                              }),
                                    X.Button()
                                        .Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar"))
                                        .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel))
                                     .DirectEvents(de =>
                                      { 
                                          de.Click.Url = Url.Action("cerrarWindow");
                                          de.Click.ExtraParams.Add(new Parameter(
                                                "id", "WindowCuerpoHumano", ParameterMode.Value));
                                      }),
                                          X.ToolbarSpacer(20)
                                 )
                            )
        )

                            .DirectEvents(de =>
                                {
                                    de.Render.Url = Url.Action("postWindowFormatoTabla");
                                    de.Render.ExtraParams.Add(new Parameter(
                                          "idformato", "" + Model.IdFormato, ParameterMode.Value));
                                    de.Render.ExtraParams.Add(new Parameter(
                                          "secuencia", "" + Model.SecuenciaCampo, ParameterMode.Value));
                                    de.Render.ExtraParams.Add(new Parameter(
                                          "idfavorito", "" + Model.IdFavoritoTabla, ParameterMode.Value));
                                    de.Render.ExtraParams.Add(new Parameter(
                                          "nombrecamporecurso", "" + Model.NombreCampoRecurso, ParameterMode.Value));
                                })
                                
    .CloseAction(CloseAction.Destroy)
)
