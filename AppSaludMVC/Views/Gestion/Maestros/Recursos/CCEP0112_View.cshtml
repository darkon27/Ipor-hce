@model SoluccionSalud.Entidades.Entidades.VW_FORMATORECURSOCAMPO

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}
@section cabecera
{
    <script>
    var varTipoBuscar = "LOAD"; 


    var seleccionActual1 = null;
    var seleccionActual2 = null;

    function setSeleccion(param1, param2) {
        
        seleccionActual1 = param1;
        seleccionActual2 = param2;
    }

    var Valores;

    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };


    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };

    function deleteSelected(grid) {
        var store = grid.store,
           records = grid.selModel.getSelection();
        store.remove(records);
        App.Window1.AutoDestroy(true);

    };
    function nuevo() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("RecursoRegistro"))',
            params: {
                MODO: 'NUEVO',
                formato: 0,
                secuencia: 0
            }
        });
    };
        function modificarSelected() {
        if (seleccionActual1 != null && seleccionActual2 != null) {
            var status = seleccionActual1;
            var status1 = seleccionActual2;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("RecursoRegistro"))',
                params: {
                    MODO: 'UPDATE',
                    formato: status,
                    secuencia: status1
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
     }
     function eliminarSelected() {
         if (seleccionActual1 != null && seleccionActual2 != null) {
             var status = seleccionActual1;
             var status1 = seleccionActual2;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("RecursoRegistro"))',
                params: {
                    MODO: 'DELETE',
                    formato: status,
                    secuencia: status1
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
        }

    function verSelected() {
        eventoVerSelected(seleccionActual1,seleccionActual2);
    }
    function eventoVerSelected(param1, param2) {
        if (App.compoVER.isVisible(true)) {
            if (param1 != null && param2 != null) {
                var status = seleccionActual1;
                var status1 = seleccionActual2;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("RecursoRegistro"))',
                    params: {
                        MODO: 'VER',
                        formato: status,
                        secuencia: status1
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }
    }

    var accionBuscarFiltro = function (tipo) {
        varTipoBuscar = tipo;
        App.GridPanel1.getStore().reload();
        varTipoBuscar = 'LOAD';
    };

    var accionFinal = function (btn) {
        App.GridPanel1.getSelectionModel().deselectAll();
        seleccionActual1 = null;
        seleccionActual2 = null;
        App.GridPanel1.getStore().reload();
    };

    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    };

    function eventoRenderForm() {
        var kk = 140;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        alert('TEST::' + northH);
        var southH = 5;
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.GridPanel1.setHeight(dimCentral);
    }
    var eventoCargarMain = function () {

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addPermisosFormatos"))',
            params: {
                data: 'FORMATO',
                indica: 'PERMISO',
            },
            success: function (result) { accionSetPermisos(result.data); }
        });
    };
    var accionSetPermisos = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].ACCION == 'BUSCAR' && App.compoBUSCAR != null) {
                    App.compoBUSCAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'NUEVO' && App.compoNUEVO != null) {
                    App.compoNUEVO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'MODIFICAR' && App.compoMODIFICAR != null) {
                    App.compoMODIFICAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'ELIMINAR' && App.compoELIMINAR != null) {
                    App.compoELIMINAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'VER' && App.compoVER != null) {
                    App.compoVER.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'ACCESO' && App.compoACCESO != null) {
                    App.compoACCESO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'HABILITADO' && App.compoHABILITADO != null) {
                    App.compoHABILITADO.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'OBLIGA' && App.compoOBLIGA != null) {
                    App.compoOBLIGA.setVisible((data[i].campoInt01 == 2 ? true : false));
                } else if (data[i].ACCION == 'PRIORIDADAGOPCION' && App.compoPRIORIDADAGOPCION != null) {
                    App.compoPRIORIDADAGOPCION.setVisible((data[i].campoInt01 == 2 ? true : false));
                }
            }
        }
    };
    </script>
}

@section cuerpo
{
    @(
 Html.X().Viewport()
        .AutoScroll(true)
        .Layout(LayoutType.Border)
        .Items(
           X.Panel()
              .Title("Listado de Recursos")
              .Border(false)
              .Region(Region.North)
              .Split(true)
             .Collapsible(true)
              .Height(150)
                  .TopBar(
                         X.Toolbar()
                          .Height(30)
                          .Items(       
                           X.Button()
                                .Text("Buscar").ID("compoBUSCAR")
                                .Icon(Icon.Find)
                                     .Handler("accionBuscarFiltro('FILTRO');"),
                                    X.ToolbarSeparator(),
                                    X.ToolbarSpacer(),    
                                    X.Button()
                                            .Text("Nuevo").ID("compoNUEVO")
                                        .Icon(Icon.ApplicationFormAdd)
                                        .Handler("nuevo(); "),
                                    X.Button()
                                            .Text("Modificar").ID("compoMODIFICAR")
                                        .Icon(Icon.ApplicationFormEdit)
                                        .Handler("modificarSelected();")
                                             ,
                                    X.Button()
                                            .Text("Eliminar").ID("compoELIMINAR")
                                        .Icon(Icon.ApplicationFormDelete)
                                    .Handler("eliminarSelected();"),
                                       X.ToolbarSeparator(),
                                        X.Button()
                                                .Text("Ver").ID("compoVER")
                                            .Icon(Icon.ApplicationViewDetail)
                                            .Handler("verSelected();"),
                                     X.ToolbarFill()
                                  )
                  )
            .Items(X.Panel()
               .Layout(LayoutType.HBox)
               .BodyPadding(5)
               .Border(false)
               .MarginSpec("1 20 1 1")
                    .Items(
                            X.FieldSet()
                                .Flex(1)
                                .Title("Filtros")
                                .MarginSpec("5 5 5 5")
                                .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "120"));
                                })
                                .Items(

                                   Html.X().Container().Layout(LayoutType.HBox)
                                   .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                   .Items(
                                       X.Checkbox()
                                               .FieldLabel("Código Formato")
                                               .ID("cod")
                                               .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.cod,App.tfBuscarCod);")
                                      .Checked(true),
                                       X.TextField()
                                               .ID("tfBuscarCod")
                                   .Disabled(true)
                                           .Name("BuscarCod")
                                               .FieldLabel(""),
                                               
                                           X.Checkbox()
                                                   .FieldLabel("Estado")
                                                   .ID("esttt")
                                                           .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.esttt,App.tfBuscarEstadoRecurso);")
                                              .Checked(true),
                                       X.ComboBox()
                                      .ID("tfBuscarEstadoRecurso").Editable(false).Disabled(true)
                                      .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID)))
                                      .FieldLabel("")
                                      .SimpleSubmit(true)
                                      ),
                                       Html.X().Container().Layout(LayoutType.HBox)
                                   .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                       .Items(
                                           X.Checkbox()
                                                   .FieldLabel("Nombre Formato")
                                                   .ID("des")
                                                   .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.des,App.tfBuscarDesc);")
                                              .Checked(true),
                                                X.TextField()
                                                    .ID("tfBuscarDesc")
                                   .Disabled(true)
                                                .Name("buscarDesc")
                                                    .FieldLabel("")                             
                                   )

                                )
                    )
             ),
            X.Panel()
                .Region(Region.Center)
                .ItemID("center")
               .Header(false)
               .Border(false)
               .Items(
                   X.GridPanel()
                   .AllowDeselect(true)
                        .Border(false)
                        .Scroll(ScrollMode.Both)
                        .AutoScroll(true)
                        .ID("GridPanel1")
                        .Height(300)
                        .Margins("0 0 0 0")
                        .Store(store => store.Add(
                                 Html.X().Store()
                                         .ID("Store1")
                                     .AutoLoad(true)
                                     .RemoteSort(false)
                                     .IsPagingStore(true)
                                     .RemotePaging(true)
                                     .PageSize(10)
                                     .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                .Url("getGrillaRecursos")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                                .IDProperty("IdFormato")
                                                //.IDProperty("SecuenciaCampo")
                                                )))
                                            )
                                         .Parameters(ps =>
                                                ps.Add(new
                                                {
                                                    descripcion = JRawValue.From("App.tfBuscarDesc.getValue()"),
                                                    codigo = JRawValue.From("App.tfBuscarCod.getValue()"),
                                                    estado = JRawValue.From("App.tfBuscarEstadoRecurso.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar")
                                                })
                                         )
                                     .Model(model => model.Add(Html.X().Model()
                                             .Fields(fields =>
                                             {
                                                 fields.Add(Html.X().ModelField().Name("IdFormato"));
                                                 fields.Add(Html.X().ModelField().Name("CodigoFormato"));
                                                 fields.Add(Html.X().ModelField().Name("DescripcionFormato"));
                                                 fields.Add(Html.X().ModelField().Name("SecuenciaCampo"));
                                                 fields.Add(Html.X().ModelField().Name("DescripFormatoCampo"));
                                                 fields.Add(Html.X().ModelField().Name("Formula"));
                                                 fields.Add(Html.X().ModelField().Name("IdFavoritoTabla"));
                                                 fields.Add(Html.X().ModelField().Name("DescripcionTabla"));
                                                 fields.Add(Html.X().ModelField().Name("DescripTablaCampo"));
                                                 fields.Add(Html.X().ModelField().Name("Estado"));
                                             }))
                                            )
                                          )
                               )

                            ///CONFIGURAR LAS COLUMNAS
                            .ColumnModel(columnModel =>
                            {
                                columnModel.Columns.Add(Html.X().Column().Text("Formato").DataIndex("IdFormato").Width(80));
                                columnModel.Columns.Add(Html.X().Column().Text("Secuencia").DataIndex("SecuenciaCampo").Width(80));
                                columnModel.Columns.Add(Html.X().Column().Text("Codigo Formato").DataIndex("CodigoFormato").Width(150));
                                columnModel.Columns.Add(Html.X().Column().Text("Nombre Formato").DataIndex("DescripcionFormato").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Formato Campo").DataIndex("DescripFormatoCampo").Width(200).Hidden(true));
                                columnModel.Columns.Add(Html.X().Column().Text("Formula").DataIndex("Formula").Width(150).Hidden(true));
                                columnModel.Columns.Add(Html.X().Column().Text("Favorito").DataIndex("IdFavoritoTabla").Width(80));
                                columnModel.Columns.Add(Html.X().Column().Text("Tabla").DataIndex("DescripcionTabla").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Tabla Campo").DataIndex("DescripTablaCampo").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(100)
                                .Renderer("changeEstado")
                                );

                            })
                             .View(Html.X().GridView().TrackOver(false))
                             .Border(false)
                            .Listeners(l => l.CellClick
                                                .Handler = "setSeleccion(record.data.IdFormato,record.data.SecuenciaCampo);")
                            .Listeners(l => l.CellDblClick
                                            .Handler = "eventoVerSelected(record.data.IdFormato,record.data.SecuenciaCampo);")

                            .BottomBar(bar => bar.Add(
                                Html.X().PagingToolbar()
                            ))

                )
        )
            .Listeners(l => l.Render.Handler = "eventoCargarMain();") 		
    )

    @(X.KeyNav()
                    .Target("={document.body}")
                    .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO');")
    )
}