@model SoluccionSalud.Entidades.Entidades.SS_HC_NocNic
@{
    var X = Html.X();
    var COLOR_BLUE01_temp = "#284A89";


}


<script>

    var template = 'color:{0};';
    var cuenta = 0;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var change = function (value, meta) { return value; };

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };




     function seleccionadorNicBusqueda() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorNicBusqueda"))',
            params: {
                AccionSeleccion: 'getSeleccionNicBusqueda',
                AccionListado: 'LISTARPAG'
            }
        });
    };



    function addRecord(grid) {
        var idNC = App.IdNC.getValue();
        var idNoc = App.IdNoc.getValue();
        var app = App.tfIdNicnom.getValue();
        var codEXT = App.tfIdNic.getValue();
        var Descripcion = App.Descripcion.getValue();
        var usu = App.UsuarioCreacion.getValue();
        if (codEXT != null && codEXT != '') {
          if (Descripcion != null && Descripcion != '') {
            if (validaDuplicado(app , Descripcion)) {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Ya existe el Registro",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
            } else {
            cuenta = cuenta + 1;
            grid.store.insert(0,
                    {
                        IdNC: idNC,
                        IdNoc: idNoc,
                        IdNic: codEXT,
                        Descripcion: Descripcion,
                        UsuarioCreacion: usu,
                        Estado: 2,
                        Accion: 'INSERT'

                    });
            }
          }
          else {

              Ext.Msg.show({
                  title: "Advertencia",
                  msg: "Debe Ingresar una Descripcion",
                  icon: Ext.Msg.INFO,
                  minWidth: 200,
                  buttons: Ext.Msg.OK
              });

          }

    }
    else {
        Ext.Msg.show({
            title: "Advertencia",
            msg: "Debe Ingresar un Nic",
            icon: Ext.Msg.INFO,
            minWidth: 200,
            buttons: Ext.Msg.OK
        });
    }
    };


    function validaDuplicado(valor1, valor2 ) {
        var estados = false;
        App.StoreSelNC.each(function (r) {
            if ((r.get('IdNic')) == (valor1) && (r.get('Descripcion')) == (valor2)) {
                estados = true;
            }
        });
        return estados;
    };




    function trim(str) { return str.replace(/^\s+|\s+$/g, ""); }

    function deleteActualNC(record) {
        var store = App.GridPanelSelNC.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("add_DataDeleteGrupoNocNic"))',
            params: {
                MODO: 'DELETE',
                id: record.data.IdNC,
                idnoc: record.data.IdNoc,
                idnic: record.data.IdNic


            }
        });

    };

    function save_grupoNocNic(agente, idAg) {

        var store = App.StoreSelNC;
        var status;
        var grupoNocNicArray = new Array();
        store.each(function (r) {
            var MODO = '';

            if ((r.get('IdNC')) == 0) {
                MODO = 'INSERT';

            }

            else if ((r.get('IdNC')) != 0) {
                MODO = 'UPDATE';
            }

            var SS_HC_NocNic = {

                IdNC: r.get('IdNC'),
                IdNoc: r.get('IdNoc'),
                IdNic: r.get('IdNic'),
                Descripcion: r.get('Descripcion'),
                Estado: r.get('Estado'),
                Accion: MODO,
            };
            grupoNocNicArray.push(SS_HC_NocNic);
        });

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("save_grupoNocNic"))',
            params: {
                MODO: 'NUEVO',
                idWindow: "WindowNocNic",
                data: grupoNocNicArray

            }
        });
    };


</script>

@(Html.X().Window().Width(680).Height(400).Maximizable(true).Modal(true).OnEsc("false").AutoScroll(true).Layout(LayoutType.Fit).CloseAction(CloseAction.Destroy).Icon(Icon.ApplicationForm).ID("WindowNocNic").Title("Asignación de Nic").Padding(4).TopBar(
X.Toolbar().Height(30)
    .Items(
        X.ToolbarSpacer(),
            X.Label().Html("<b><div style='max-width: 480px;white-space: nowrap;text-overflow: ellipsis;overflow: hidden; color:" + COLOR_BLUE01_temp + ";'><span style='color:" + COLOR_BLUE01_temp + ";'>" + "Noc" + ": " + Model.IdNoc + " - " + Model.Descripcion + " </span> </div></b>").Hidden(false),
        X.ToolbarFill(),
                X.Button().Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar")).Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave)).Handler("save_grupoNocNic('" + Model.Estado + "' , " + Model.IdNoc + " );"),
        X.Button().Text("Cancelar").Icon(Icon.Cancel).DirectEvents(de =>
        {
            de.Click.Url = Url.Action("cerrarWindow");
            de.Click.ExtraParams.Add(new Parameter("id", "WindowNocNic", ParameterMode.Value));
        }),
        X.ToolbarSpacer(20))
        )
    .Items(
        X.Panel().Border(false).Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
            X.FieldSet().Height(120).ColumnWidth(0.4).Title("Agregar Grupo Nic para:").MarginSpec("0 05 0 05")
            .Items(
            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
                           // X.TextField().ID("tfIdNicnom").Width(550).ReadOnly(true).RightButtons(X.Button().Text("...").Handler("seleccionadorNicBusqueda();")).FieldLabel("Nic")//,.LabelWidth(120),
                    X.TextField().ID("tfIdNic").FieldLabel("Código").ReadOnly(true).Hidden(false)
                    ),
            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
                //X.TextField().ID("tfIdNic").FieldLabel("Id Nic").ReadOnly(true).Hidden(false),
                X.TextField().ID("tfIdNicnom").Width(550).ReadOnly(true).RightButtons(X.Button().Text("...").Handler("seleccionadorNicBusqueda();")).FieldLabel("Nic"),//,.LabelWidth(120),
                    X.TextFieldFor(m => m.Descripcion).FieldLabel("Descripcion").Width(250).LabelWidth(120).Hidden(true),
                     X.ToolbarFill(),
                    X.ComboBoxFor(m => m.Estado).Editable(false).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Estado").Value(Model.Accion == "NUEVO" ? 2 : (Model.Estado)).SimpleSubmit(true).Width(220).LabelWidth(120).Hidden(true),
                            X.Button().Text("Agregar").Icon(Icon.Add).Handler("addRecord(App.GridPanelSelNC);")),

            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
                            X.TextFieldFor(m => m.IdNC).FieldLabel("IdNC").ReadOnly(true).Hidden(true),
                            X.TextFieldFor(m => m.IdNoc).FieldLabel("IdNoc").ReadOnly(true).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).FieldLabel("model").ReadOnly(true).Hidden(true))
                ),
                    X.GridPanel().Flex(1).ID("GridPanelSelNC").Border(false).Store(Html.X().Store().ID("StoreSelNC").Model(
                    Html.X().Model().IDProperty("IdNC").Fields(
                    Html.X().ModelField().Name("IdNC"),
                    Html.X().ModelField().Name("IdNoc"),
                    Html.X().ModelField().Name("IdNic"),
                    Html.X().ModelField().Name("Descripcion"),
                    Html.X().ModelField().Name("Estado"),
                    Html.X().ModelField().Name("UsuarioCreacion"),
                    Html.X().ModelField().Name("FechaCreacion"),
                    Html.X().ModelField().Name("Accion")

                        )).Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("getGrillaNocNic")
                        .Reader(reader => reader.Add(Html.X().JsonReader().Root("data").TotalProperty("total").IDProperty("IdNC")))))
                    .Parameters(ps => ps.Add(new
                    {
                        IdNoc = Model.IdNoc,
                        //IdNoc = Model.IdNoc,
                        //tipo = "",

                    })
                        ).AutoLoad(true)).ColumnModel(
                        Html.X().ComponentColumn().Editor(true).DataIndex("IdNC").Text("ID").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("IdNoc").Text("IdNoc").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                            Html.X().ComponentColumn().Editor(true).DataIndex("IdNic").Text("Código").Width(60).Hidden(false).Component(
                        Html.X().TextField().ReadOnly(true)),
                            Html.X().ComponentColumn().Editor(true).DataIndex("Descripcion").Text("Descripcion").Flex(1).Hidden(false).Component(
                        Html.X().TextField().ReadOnly(false)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("UsuarioCreacion").Text("UsuarioCreacion").Width(150).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("FechaCreacion").Text("FechaCreacion").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("Estado").Width(100).Text("Estado").Component(
                        Html.X().ComboBox().Editable(false).Items(new ListItem("ACTIVO", 2), new ListItem("INACTIVO", 1))),
                            Html.X().CommandColumn().Width(60).Text("Eliminar").Commands(
                        Html.X().GridCommand().CommandName("Delete").Icon(Icon.Delete).Text("")).Listeners(ls => ls.Command.Handler = "deleteActualNC(record);"),
                        Html.X().ComponentColumn().Editor(true).DataIndex("Accion").Text("Acción").Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)))
                        .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                        .Plugins(Html.X().CellEditing())
                )
        ).CloseAction(CloseAction.Destroy)
)


