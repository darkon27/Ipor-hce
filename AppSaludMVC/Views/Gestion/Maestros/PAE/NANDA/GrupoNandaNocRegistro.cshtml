@model SoluccionSalud.Entidades.Entidades.SS_HC_NandaNoc
@{
    var X = Html.X(); 
    var STYLE_BACKGROUND_NODEIT = "background: #BBD8D6";
    var COLOR_BORDER_DEFAULT = "#b5b8c8";
    var COLOR_BLUE01_temp = "#284A89";

  
}


<script>

    var template = 'color:{0};';
    var cuenta = 0;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var change = function (value, meta) { return value; };

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "ACTIVO");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "INACTIVO");
    };

   
    function seleccionadorNocBusqueda() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorNocBusqueda"))',
            params: {
                AccionSeleccion: 'getSeleccionNocBusqueda',
                AccionListado: 'LISTARPAG'
            }
        });
    }; 
       

    function addRecord(grid) {
        var idNandaNoc = App.IdNanNoc.getValue();
        var idNanda = App.IdNanda.getValue();
        var app = App.tfIdNOCnom.getValue();
        var codEXT = App.tfIdNoc.getValue();
        var Descripcion = App.Descripcion.getValue();
        var usu = App.UsuarioCreacion.getValue();
        if (codEXT != null && codEXT != '') {
            if (Descripcion != null && Descripcion != '') {
              if (validaDuplicado(app , Descripcion)) {
                    Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Ya existe el Registro",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                    });
               } else {
                cuenta = cuenta + 1;
                grid.store.insert(0,
                        {
                            IdNanNoc: idNandaNoc,
                            IdNanda: idNanda,
                            IdNoc: codEXT,
                            Descripcion: Descripcion,
                            UsuarioCreacion: usu,
                            Estado: 2,
                            Accion: 'INSERT'

                        });
              }
            }
            else {

                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Ingresar una Descripcion",
                    icon: Ext.Msg.INFO,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });

            }

        }
        else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Ingresar un Noc",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };


    function validaDuplicado(valor1, valor2) {
        var estados = false;
        App.StoreSelNanNoc.each(function (r) {
            if ((r.get('IdNoc')) == (valor1) && (r.get('Descripcion')) == (valor2)) {
                estados = true;
            }
        });
        return estados;
    };

    function trim(str) { return str.replace(/^\s+|\s+$/g, ""); }

    function deleteActual(record) {
        var store = App.GridPanelSelNanNoc.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("add_DataDeleteGrupoNanNoc"))',
            params: {
                MODO: 'DELETE',
                id: record.data.IdNanNoc,
                idnanda: record.data.IdNanda,
                idnoc: record.data.IdNoc
               

            }
        });

    };
    
  
    /*******AQUI ME QUEDE***************/
    function save_grupoNocNanda(agente, idAg) {
        
        var store = App.StoreSelNanNoc;
        var status;
        var grupoNocNandaArray = new Array();

        store.each(function (r) {
            var MODO = '';

            if ((r.get('IdNanNoc')) == 0) {
                MODO = 'INSERT';

            }

            else if ((r.get('IdNanNoc')) != 0) {
                MODO = 'UPDATE';
            }

            var SS_HC_NandaNoc = {

                IdNanNoc: r.get('IdNanNoc'),
                IdNanda: r.get('IdNanda'),
                IdNoc: r.get('IdNoc'),
                Descripcion: r.get('Descripcion'),
                UsuarioCreacion: r.get('UsuarioCreacion'),
                Estado: r.get('Estado'),
                Accion: MODO,


            };
            grupoNocNandaArray.push(SS_HC_NandaNoc);
        });

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("save_grupoNocNanda"))',
            params: {
                MODO: 'NUEVO',
                idWindow: "WindowNocNanda",
                data: grupoNocNandaArray
                
            }
        });
    };
   
</script>

@(Html.X().Window().Width(680).Height(400).Maximizable(true).Modal(true).OnEsc("false").AutoScroll(true).Layout(LayoutType.Fit).CloseAction(CloseAction.Destroy).Icon(Icon.ApplicationForm).ID("WindowNocNanda").Title("Asignación de Noc").Padding(4).TopBar(
X.Toolbar().Height(30)
    .Items(
        X.ToolbarSpacer(),
            X.Label().Html("<b><div style='max-width: 480px;white-space: nowrap;text-overflow: ellipsis;overflow: hidden; color:" + COLOR_BLUE01_temp + ";'><span style='color:" + COLOR_BLUE01_temp + ";'>" + "Nanda" + ": " + Model.IdNanda + " - " + Model.Descripcion + " </span> </div></b>").Hidden(false),
        X.ToolbarFill(),
                            X.Button().Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar")).Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave)).Handler("save_grupoNocNanda('" + Model.Estado + "' , " + Model.IdNanda + " );"),
        X.Button().Text("Cancelar").Icon(Icon.Cancel).DirectEvents(de =>
        {
            de.Click.Url = Url.Action("cerrarWindow");
            de.Click.ExtraParams.Add(new Parameter("id", "WindowNocNanda", ParameterMode.Value));
        }),
        X.ToolbarSpacer(20))
        )
    .Items(
        X.Panel().Border(false).Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
            X.FieldSet().Height(120).ColumnWidth(0.4).Title("Agregar Grupo Noc para:").MarginSpec("0 05 0 05")
            .Items(
            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
                       // X.TextField().ID("tfIdNOCnom").Width(550).ReadOnly(true).RightButtons(X.Button().Text("...").Handler("seleccionadorNocBusqueda();")).FieldLabel("Noc")//.LabelWidth(120),
                    X.TextField().ID("tfIdNoc").FieldLabel("Código").ReadOnly(true).Hidden(false)
                    
                    ),
            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
               // X.TextField().ID("tfIdNoc").FieldLabel("Id Noc").ReadOnly(true).Hidden(false),
                X.TextField().ID("tfIdNOCnom").Width(550).ReadOnly(true).RightButtons(X.Button().Text("...").Handler("seleccionadorNocBusqueda();")).FieldLabel("Noc"),//.LabelWidth(120),
                    X.TextFieldFor(m => m.Descripcion).FieldLabel("Descripcion").Width(550).LabelWidth(120).Hidden(true)  ,                 
                     X.ToolbarFill(),
                    X.ComboBoxFor(m => m.Estado).Editable(false).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Estado").Value(Model.Accion == "NUEVO" ? 2 : (Model.Estado)).SimpleSubmit(true).Hidden(true), //.Width(220).LabelWidth(120),
                    X.Button().Text("Agregar").Icon(Icon.Add).Handler("addRecord(App.GridPanelSelNanNoc);")),                        
                                
                    
                    
            Html.X().Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                .Items(
                
                        X.TextFieldFor(m => m.IdNanNoc).FieldLabel("IdNanNoc").ReadOnly(true).Hidden(true),
                        X.TextFieldFor(m => m.IdNanda).FieldLabel("IdNanda").ReadOnly(true).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).FieldLabel("model").ReadOnly(true).Hidden(true)
                        
                      )
                ),
                    X.GridPanel().Flex(1).ID("GridPanelSelNanNoc").Border(false).Store(Html.X().Store().ID("StoreSelNanNoc").Model(
                    Html.X().Model().IDProperty("IdNanNoc").Fields(
                    Html.X().ModelField().Name("IdNanNoc"),
                    Html.X().ModelField().Name("IdNanda"),
                    Html.X().ModelField().Name("IdNoc"),
                    Html.X().ModelField().Name("Descripcion"),
                    Html.X().ModelField().Name("Estado"),
                    Html.X().ModelField().Name("UsuarioCreacion"),
                    Html.X().ModelField().Name("FechaCreacion"),
                    Html.X().ModelField().Name("Accion")

                                    )).Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("getGrillaNocNanda")
                        .Reader(reader => reader.Add(Html.X().JsonReader().Root("data").TotalProperty("total").IDProperty("IdNanNoc")))))
                    .Parameters(ps => ps.Add(new
                    {
                        IdNanda = Model.IdNanda,
                        //IdNoc = Model.IdNoc,             
                        //tipo = "",
                         
                    })
                        ).AutoLoad(true)).ColumnModel(
                        Html.X().ComponentColumn().Editor(true).DataIndex("IdNanNoc").Text("ID").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("IdNanda").Text("IdNanda").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("IdNoc").Text("Código").Width(60).Hidden(false).Component(
                        Html.X().TextField().ReadOnly(true)),
                            Html.X().ComponentColumn().Editor(true).DataIndex("Descripcion").Text("Descripción").Flex(1).Hidden(false).Component(
                        Html.X().TextField().ReadOnly(false)),                          
                        Html.X().ComponentColumn().Editor(true).DataIndex("UsuarioCreacion").Text("UsuarioCreacion").Width(150).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("FechaCreacion").Text("FechaCreacion").Width(60).Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)),
                        Html.X().ComponentColumn().Editor(true).DataIndex("Estado").Width(100).Text("Estado").Component(
                        Html.X().ComboBox().Editable(false).Items(new ListItem("ACTIVO", 2), new ListItem("INACTIVO", 1))),
                            Html.X().CommandColumn().Width(60).Text("Eliminar").Commands(
                        Html.X().GridCommand().CommandName("Delete").Icon(Icon.Delete).Text("")).Listeners(ls => ls.Command.Handler = "deleteActual(record);"),
                        Html.X().ComponentColumn().Editor(true).DataIndex("Accion").Text("Acción").Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true)))
                        .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                        .Plugins(Html.X().CellEditing())
                )
        ).CloseAction(CloseAction.Destroy)
)


