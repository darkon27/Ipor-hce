@model SoluccionSalud.Entidades.Entidades.SS_HC_CatalogoUnidadServicio


@{
    var X = Html.X();
    var COLOR_BLUE01_temp = "#284A89";
}

<script>
    var template = 'color:{0};';
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var cuenta = 0;

    var change = function (value, meta) {
        return value;
    };

    function addRecord(grid, grupo, codagente, componenteAdd) {
        if (componenteAdd.getValue() != null) {            
            var valorSelec = componenteAdd.getValue();
            if (validaDuplicado(grupo, valorSelec)) {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Ya existe el Registro",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            } else {
                grid.store.insert(0,
                    {
                        IdTipoAtencion: valorSelec,
                        IdUnidadServicio: codagente,
                        Descripcion: componenteAdd.getRawValue(),
                        Estado: 2,
                        Accion: 'INSERT'
                    });
            }
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe seleccionar un tipo de atención para añadirlo.",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };

    function validaDuplicado(valor1, valor2) {
        var estados = false;
        App.StoreAtencion.each(function (r) {            
            if (valor2 == r.get('IdTipoAtencion')) { estados = true;}
        });
        return estados;
    };

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    };

    function deleteActual(record) {
        var store = App.GridPanelAtencion.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("add_DataDeleteAtencion"))',
            params: {
                MODO: 'DELETE',
                tipAten: record.data.IdTipoAtencion,
                unidServ: record.data.IdUnidadServicio
            }
        });
    };

    function save_AsigAtencion(agente, idAg) {
        var i = 0;
        var store = App.StoreAtencion;
        var status;
        var sysAutorizacionesArray = new Array();
        store.each(function (r) {
            var SS_HC_CatalogoUnidadServicio_TipoAtencion = {
                IdTipoAtencion: r.get('IdTipoAtencion'),
                IdUnidadServicio: r.get('IdUnidadServicio'),
                Descripcion: r.get('Descripcion'),
                Estado: r.get('Estado'),
                Accion: r.get('Accion')
            };
            sysAutorizacionesArray.push(SS_HC_CatalogoUnidadServicio_TipoAtencion);
        });

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("save_AsigAtencion"))',
            params: {
                MODO: 'NUEVO',
                idWindow: "WindowAsignarAtencion",
                data: sysAutorizacionesArray,
                codagente: agente,
                idAgente: idAg
            }
        });
    };

</script>

@(Html.X().Window()
    .Width(620).Height(400).Maximizable(true).Modal(true).OnEsc("false").AutoScroll(true).Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy).Icon(Icon.ApplicationForm).ID("WindowAsignarAtencion").Title("Asignar Tipo Atención")
    .Padding(4).TopBar(
        X.Toolbar().Height(30)
        .Items(
        X.ToolbarSpacer(),
        X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" + "Catálogo Unidad Servicio: " + Model.Descripcion + "</span> </b>"),
        X.ToolbarFill(),
            X.Button().Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar")).Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave)).Handler("save_AsigAtencion('" + Model.CodigoUnidadServicio + "' , " + Model.IdUnidadServicio + ");"),
        X.Button().Text("Cancelar").Icon(Icon.Cancel).DirectEvents(de =>{
            de.Click.Url = Url.Action("cerrarWindow");
            de.Click.ExtraParams.Add(new Parameter("id", "WindowAsignarAtencion", ParameterMode.Value));
        }),
        X.ToolbarSpacer(20)
        ))
        .Items(
        X.Panel().Border(false).Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
        X.FieldSet().Height(70).ColumnWidth(0.4).Title("Agregar Tipo Atención para:").MarginSpec("0 05 0 05")
        .Items(
        Html.X().Container().Layout(LayoutType.HBox).Defaults(d =>{d.Add(new Parameter("LabelWidth", "90"));})
            .Items(
                X.ComboBox().ID("cmbTipAt").Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenerico("TIPOATENCIO").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Tipo Atención").ReadOnly(false).Editable(false).SimpleSubmit(true),
                X.Button().Text("Agregar").Icon(Icon.Add).Handler("addRecord(App.GridPanelAtencion, 'TIPOATENCION',  '" + Model.IdUnidadServicio + "', App.cmbTipAt );")
            )
        ),
        X.GridPanel().Flex(1).ID("GridPanelAtencion").Border(false).Store(
        Html.X().Store().ID("StoreAtencion").Model(
            Html.X().Model().IDProperty("IdTipoAtencion").Fields(
            Html.X().ModelField().Name("IdTipoAtencion"),
            Html.X().ModelField().Name("IdUnidadServicio"),
            Html.X().ModelField().Name("Descripcion"),
            Html.X().ModelField().Name("UsuarioCreacion"),
            Html.X().ModelField().Name("UsuarioModificacion"),
            Html.X().ModelField().Name("Estado"),
            Html.X().ModelField().Name("Accion"))).Proxy(proxy => proxy.Add(
            Html.X().AjaxProxy().Url("getGrillaListaAtencion").Reader(reader => reader.Add(
                    Html.X().JsonReader().Root("data").TotalProperty("total").IDProperty("IdTipoAtencion")))))
                .Parameters(ps =>ps.Add(new{
                    agente = Model.IdUnidadServicio,
                    tipoagente = Model.IdUnidadServicioPadre,
                    codagente = Model.CodigoUnidadServicio})).AutoLoad(true)
                    ).ColumnModel(
                            Html.X().ComponentColumn().Editor(true).DataIndex("IdUnidadServicio").Text("IdUnidadServicio").Width(110).Hidden(true).Component(
                        Html.X().NumberField().ReadOnly(true)),
                            Html.X().ComponentColumn().Editor(true).DataIndex("IdTipoAtencion").Text("IdTipoAtencion").Width(100).Hidden(true).Component(
                        Html.X().NumberField().ReadOnly(true)),
                            Html.X().ComponentColumn().Editor(true).DataIndex("Descripcion").Text("Descripcion").Width(250).Hidden(false).Component(
                        Html.X().TextField().ReadOnly(true)),                           
                            Html.X().ComponentColumn().Editor(true).DataIndex("Estado").Width(100).Text("Estado").Component(
                        Html.X().ComboBox().Editable(false).Items(
                        new ListItem("Activo", 2),
                        new ListItem("Inactivo", 1))),
                    Html.X().CommandColumn().Width(80).Commands(
                        Html.X().GridCommand().CommandName("Delete").Icon(Icon.Delete).Text("Eliminar"))
                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);"),
                    Html.X().ComponentColumn().Editor(true).DataIndex("Accion").Text("Acción").Hidden(true).Component(
                        Html.X().TextField().ReadOnly(true))
                        ).SelectionModel(
                        Html.X().RowSelectionModel().Mode(SelectionMode.Multi)).Plugins(
                        Html.X().CellEditing())
              )
              ).CloseAction(CloseAction.Destroy)
)


