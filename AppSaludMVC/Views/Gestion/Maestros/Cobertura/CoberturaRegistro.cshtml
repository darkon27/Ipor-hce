@model SoluccionSalud.Entidades.Entidades.SS_SG_MaestroCobertura
@{
    ViewBag.Title = "CoberturaRegistro";
    var X = Html.X();
    var modoDesc = (Model.ACCION == "NUEVO" ? "Nuevo" :
                   (Model.ACCION == "UPDATE" ? "Modificar" :
                   (Model.ACCION == "DELETE" ? "Eliminar" :
                   (Model.ACCION == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = !(Model.ACCION == "NUEVO" ? true :
                             (Model.ACCION == "UPDATE" ? true :
                             (Model.ACCION == "DELETE" ? false :
                             (Model.ACCION == "VER" ? false : false))));

    var indicaModoLecturaKey = !(Model.ACCION == "NUEVO" ? true :
                                (Model.ACCION == "UPDATE" ? false :
                                (Model.ACCION == "DELETE" ? false :
                                (Model.ACCION == "VER" ? false : false))));
}


<script>
    var template = 'color:{0};';

    var change = function (value, meta) {
        return value;
    };
    
    var onSuccess = function (modo) {
        accionMensajes(modo);
    };

    var onFailure = function (modo) {
        App.btnSave.setDisabled(false);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };

    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente la cobertura.',
                accion: null
            }
        });
    }

    var showResult = function (btn) {
        Ext.Msg.notify("Aceptar", "You clicked the " + btn + " button");
    };
    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };
</script>

@(Html.X().Window()
    .Width(600)
    .Height(350)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    //.AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
        .ID("WindowX")
                .Title("Edición de Maestro Coberturas:" + modoDesc)
    .Padding(4)
    .Items(
        Html.X().FormPanel().ID("FormPanel1")
    .Frame(false)
    .Border(false)
    .AutoScroll(true)
    .Layout(LayoutType.VBox)
    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
        Html.X().FormPanel()
        .Frame(false)
        .Border(false)
        .Layout(LayoutType.HBox)
        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
            .Items(
            Html.X().FormPanel()
            .Layout(LayoutType.Form)
            .Width(350)
            .FieldDefaults(d =>{d.LabelWidth = 100;})
            .BodyPadding(10)
            .Frame(false)
            .Border(false)
                .Items(
                X.NumberFieldFor(m => m.IdCobertura)
                .FieldLabel("Id")
                .Width(200).ReadOnly(true),

                X.TextFieldFor(m => m.Nombre)
                .Width(320).ReadOnly(indicaModoLectura)
                .FieldLabel("Cobertura"),

                X.TextFieldFor(m => m.Descripcion).Width(320)
                .FieldLabel("Descripción").ReadOnly(indicaModoLectura),

                X.ComboBoxFor(m => m.TipoTabla)
                .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOCOBERT").Select(d => new ListItem(d.Name, d.ID)))
                        .FieldLabel("Tipo Cobertura").ReadOnly(indicaModoLectura).Editable(false)
                .SimpleSubmit(true),
                                
                Html.X().Container().Layout(LayoutType.HBox)
                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                .Items(
                X.CheckboxGroupFor(m => m.IndicadorAmbulatorio, new List<Checkbox.Config> {
                new Checkbox.Config{BoxLabel = "Ambulatorio", InputValue="2",
                Checked= ( Model.ACCION=="NUEVO"?false:(Model.IndicadorAmbulatorio==2?true:false))
                ,ReadOnly = indicaModoLectura},
                }),

                X.CheckboxGroupFor(m => m.IndicadorEmergencia, new List<Checkbox.Config> {
                new Checkbox.Config{BoxLabel = "Emergencia", InputValue="2",
                Checked= ( Model.ACCION=="NUEVO"?false:(Model.IndicadorEmergencia==2?true:false))
                ,ReadOnly = indicaModoLectura},
                }),

                X.CheckboxGroupFor(m => m.IndicadorHospitalario, new List<Checkbox.Config> {
                new Checkbox.Config{BoxLabel = "Hospitalario", InputValue="2",
                Checked= ( Model.ACCION=="NUEVO"?false:(Model.IndicadorHospitalario==2?true:false))
                ,ReadOnly = indicaModoLectura},
                })),

                X.ComboBoxFor(m => m.Estado).Editable(false).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESTADOINT").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Estado").Value(Model.ACCION == "NUEVO" ? 2 : (Model.Estado)).SimpleSubmit(true).ReadOnly(indicaModoLectura)
                ),
                Html.X().FormPanel()
                .Layout(LayoutType.Form)
                .Width(300)
                .FieldDefaults(d =>{d.LabelWidth = 60;})
                .BodyPadding(10)
                .Frame(false)
                .Border(false)
                    .Items(
                    X.TextFieldFor(m => m.CodigoCobertura)
                    .Width(200).ReadOnly(indicaModoLectura)
                    .FieldLabel("Código"))),
                                               
                    Html.X().FormPanel()
                    .Layout(LayoutType.Form)
                    .Width(500)
                    .FieldDefaults(d =>{d.LabelWidth = 150;})
                    .BodyPadding(10)
                    .Frame(false)
                    .Border(false)
                        .Items(X.FieldSet()
                        .Title("Información Adicional")
                        .FieldDefaults(d =>{d.LabelWidth = 90;
                        d.InputWidth = 120;})
                            .Items(
                            Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                            .Items(
                            X.TextFieldFor(m => m.UsuarioCreacion).FieldLabel("Creación").ReadOnly(true),
                            X.DateFieldFor(m => m.FechaCreacion).Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                            X.TimeFieldFor(m => m.FechaCreacion).ID("dfHoraCreacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)
                            ),
                            Html.X().Container().Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                                X.TextFieldFor(m => m.UsuarioModificacion).FieldLabel("Modificación").ReadOnly(true),
                                X.DateFieldFor(m => m.FechaModificacion).Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                                X.TimeFieldFor(m => m.FechaModificacion).ID("dfHoraModificacion").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80))
                                    ),
                                    X.TextArea().ID("taAlerts")
                                        .Border(false)
                                        .StyleSpec("background:white;border:1px solid gray;")
                                        .FieldStyle("color: red")
                                        .Hidden(true)
                                        .ReadOnly(true))
                                ).TopBar(
                                X.Toolbar()
                                .Height(30)
                                    .Items(
                                    X.ToolbarFill(),
                                    X.Button()
                                    .Hidden((Model.ACCION == "VER" ? true : false))
                                    .ID("btnSave")
                                    .Text((Model.ACCION == "DELETE" ? "Eliminar" : "Guardar"))
                                    .Icon((Model.ACCION == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                                    .DirectEvents(de =>{  
                                    //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("save_Cobertura");
                                    de.Click.Before = "App.btnSave.setDisabled(true); " +
                                                        "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
                                    de.Click.After = "App.btnSave.setDisabled(false); ";
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.ExtraParams.Add(new Parameter("MODO", Model.ACCION, ParameterMode.Value));
                                    de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowX", ParameterMode.Value));
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure('" + Model.ACCION + "');";
                                    }),
                                    X.Button()
                                    .Text((Model.ACCION == "VER" ? "Aceptar" : "Cancelar"))
                                    .Icon((Model.ACCION == "VER" ? Icon.Accept : Icon.Cancel))
                                    .DirectEvents(de =>{  
                                    //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("cerrarWindow");
                                    de.Click.ExtraParams.Add(new Parameter("id", "WindowX", ParameterMode.Value));
                                    }),
                                          X.ToolbarSpacer(20)     
                                    )
                                    )
                                    )
                                    .DirectEvents(de =>
                                    {
                                    de.Render.Url = Url.Action("postWindowCobertura");
                                    de.Render.ExtraParams.Add(new Parameter("id", "" + Model.IdCobertura, ParameterMode.Value));
                                    })
                                    .CloseAction(CloseAction.Destroy)
                                    )