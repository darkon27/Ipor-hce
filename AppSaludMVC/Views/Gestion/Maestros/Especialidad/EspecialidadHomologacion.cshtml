@model SoluccionSalud.Entidades.Entidades.SS_GE_Especialidad


@{
    var X = Html.X();



    var COLOR_BLUE01_temp = "#284A89";
    var COLOR_RED01_temp = "#990000";
    var COLOR_GREEN01_temp = "#177506";
    var COLOR_YELLOW02_temp = "#D9A407";

}

<script>

    var template = 'color:{0};';
    var cuenta = 0;
    var change = function (value, meta) {
        return value;

    };
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 'A')
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 'I')
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };

    function addRecord(grid) {
        var codEXT = App.txtCodigoExterno.getValue();
        var app = App.cmbAppExterna.getValue();
        var idHCE = App.IdEspecialidad.getValue();
        var descripcion = '@(Model.Nombre)';        
        if (codEXT != null && codEXT != '') {
            if (validaDuplicado(''+app, ''+codEXT)) {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Ya existe el Registro",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            } else {
                cuenta = cuenta - 1;
                grid.store.insert(0,
                        {
                            IdEspecialidad: cuenta,
                            Codigo: codEXT,
                            Nombre: descripcion,
                            Estado: app,
                            IndicadorWeb: idHCE,
                            Accion: 'INSERTHOMOLOGACION'

                        });
            }

        }else{
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Ingresar el Código del Elemento Externo.",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }

    };

    function validaDuplicado(valor1, valor2) {
        var estados = false;
        App.StoreHomologacion_Esp.each(function (r) {
            if (trim(''+r.get('Estado')) == trim(valor1)
                && trim(''+r.get('Codigo')) == trim(valor2)
                ) {
                estados = true;
            }
        });

        return estados;
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function deleteActual(record) {
        var store = App.GridPanelHomologacion_Esp.store;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("add_DataDeleteEspecialidadHomologacion"))',
            params: {
                MODO: 'DELETEHOMOLOGACION',
                appEXT: record.data.Estado,
                idHCE: record.data.IndicadorWeb,
                codigoEXT: record.data.Codigo                               
            }
        });
        store.remove(record);
    };

    function save_Homologacion() {        
        var store = App.StoreHomologacion_Esp;
        var status;
        var sysArray = new Array();
        store.each(function (r) {
            if (r.get('Accion') != null && r.get('Accion')!='') {
                var SS_GE_Especialidad = {
                    IdEspecialidad: r.get('IndicadorWeb'),
                    Codigo: r.get('Codigo'),
                    Estado: r.get('Estado'),
                    Accion: r.get('Accion')
                };
                sysArray.push(SS_GE_Especialidad);
            }
        });

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("save_Especialidad_Homologacion"))',
            params: {
                MODO: 'NUEVO',
                idWindow: "WindowHomologacion_Esp",
                data: sysArray,
                id: 0
            }
        });
    };

</script>


@(Html.X().Window()
    .Width(650)
    .Height(400)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowHomologacion_Esp")
        .Title("Recurso de Homologación")
    .Padding(4)
        //.X(0)
        //.Y(0)
        .TopBar(
            X.Toolbar()
            .Height(30)
            .Items(
                X.ToolbarSpacer(),
                  X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" + "" + "Especialidad: " + Model.Nombre + "</span> </b>")
                ,
                X.ToolbarFill(),
                X.Button()
                    .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                     .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                     .Handler("save_Homologacion();"),
                X.Button()
                    .Text("Cancelar")
                    .Icon(Icon.Cancel)
                    .DirectEvents(de =>
                     {  //Model.ACCION : Posee el MODO ACTUAL
                         de.Click.Url = Url.Action("cerrarWindow");
                         //de.Click.EventMask.ShowMask = true;
                         de.Click.ExtraParams.Add(new Parameter(
                               "id", "WindowHomologacion_Esp", ParameterMode.Value));
                         //de.Click.Success = "onSuccess(result.data,'" + Model.ACCION + "');";
                         //de.Click.Failure = "onSuccess(result.data,'"+ Model.ACCION + "');";
                     }),
                                          X.ToolbarSpacer(20)
                                         )
                                     )
    .Items(
            X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)            
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Items(
                X.FieldSet().Height(100)
                .ColumnWidth(0.4)
                .Title("Agregar Recurso de Homologación:")
                .MarginSpec("0 05 0 05")
                .Items(
                    Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 05 00").LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                    .Defaults(d =>{
                        d.Add(new Parameter("LabelWidth", "150"));
                        d.Add(new Parameter("Width", "450"));
                    })
                    .Items(
                        Html.X().ComboBox().ID("cmbAppExterna").Value(1).Editable(false)
                        //.FieldStyle("background: " + COLOR_REDbackg + "; border-color: " + COLOER_IND_OBLIGA)
                        .FieldLabel("Aplicativo Externo")
                        //.ReadOnly(indicaModoLectura)
                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                            .GetComboGenericoMiscelaneos("WA", "999999", "APPPEXTERN").Select(d => new ListItem(d.Name, d.ID)))
                        .SimpleSubmit(true)
                    ,
                    X.Component().Flex(1),
                    X.Button().Text("Agregar").Icon(Icon.Add).Width(100)
                    .Handler("addRecord(App.GridPanelHomologacion_Esp);")
                    )
                    ,
                        Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 05 00")
                    .Defaults(d =>{
                        d.Add(new Parameter("LabelWidth", "150"));
                        d.Add(new Parameter("Width", "300"));
                    })
                     .Items(
                        X.TextField().ID("txtCodigoExterno").FieldLabel("Cód. Especialidad Externo")                           
                    )
                    ,
                        Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 05 00")
                    .Defaults(d =>
                    {
                        d.Add(new Parameter("LabelWidth", "150"));
                        d.Add(new Parameter("Width", "300"));
                    })
                    .Items(
                       X.NumberFieldFor(m => m.IdEspecialidad).FieldLabel("ID Especialidad HCE").ReadOnly(true)                        
                     )                    
                )
                ,
                X.GridPanel().Flex(1)
                        .ID("GridPanelHomologacion_Esp")
                    .Border(false)
                        .Store(
                        Html.X().Store()
        //.AutoSync(true)
                                .ID("StoreHomologacion_Esp")
                            .Model(
                                    Html.X().Model()
                                        .IDProperty("IdEspecialidad")
                                    .Fields(
                                                Html.X().ModelField().Name("IdEspecialidad").Type(ModelFieldType.Int),
                                                Html.X().ModelField().Name("Codigo").Type(ModelFieldType.String),
                                                Html.X().ModelField().Name("Nombre").Type(ModelFieldType.String),
                                                Html.X().ModelField().Name("Descripcion").Type(ModelFieldType.String),
                                            Html.X().ModelField().Name("TiempoPromedioAtencion"),
                                                Html.X().ModelField().Name("Estado").Type(ModelFieldType.Int),
                                                Html.X().ModelField().Name("IndicadorWeb").Type(ModelFieldType.Int),
                                                Html.X().ModelField().Name("Accion").Type(ModelFieldType.String)

                                    )
                                )
                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                          .Url("getGrillaEspecialidadHomologacion")
                                    //.Url("../LPacientes/GrillaListadoPacientes")
                                    //.Url("../Controllers/Maestros/Usuario/UsuarioController/GrillaListadoPacientes")
                                        .Reader(reader => reader.Add(Html.X().JsonReader()
                                        .Root("data")
                                        .TotalProperty("total")
                                             .IDProperty("IdEspecialidad")
                                        )))
                                )
                                //.PageSize(10)
                                /*.ServerProxy(
                                    Html.X().AjaxProxy()
                                        .Url(Url.Action("getGrillaListaPerfilUsuario"))
                                        //.ExtraParams
                                        //.ExtraParams(new { containerId = "West1" })

                                )*/
                                .Parameters(ps =>
                                    ps.Add(new
                                        {
                                            id = Model.IdEspecialidad,
                                            codigo = Model.Codigo,
                                            tipo = ""
                                        })
                                )
                                .AutoLoad(true)
                            )
                            .ColumnModel(
                                         Html.X().ComponentColumn()
                                                    .Editor(true)
                                                     .DataIndex("IdEspecialidad")
                                                     .Text("ID")
                                                    .Width(80)
                                                    .Hidden(true)
                                                    .Component(
                                                    Html.X().TextField().ReadOnly(true)
                                                        ),
                                             Html.X().ComponentColumn()
                                                        .Editor(true)
                                                        .DataIndex("Estado")
                                                        .Text("Aplicativo Externo")
                                                        .Flex(1)
                                                        .Hidden(false)
                                                        .Component(
                                                            Html.X().ComboBox().ReadOnly(true)                                                                                         
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico
                                                            .GetComboGenericoMiscelaneos("WA", "999999", "APPPEXTERN").Select(d => new ListItem(d.Name, d.ID)))
                                                            .SimpleSubmit(true)

                                                        ),
                                          Html.X().ComponentColumn()
                                                        .Editor(true)
                                                         .DataIndex("Nombre")
                                                         .Text("Descripción")
                                                         .Flex(1)
                                                        .Hidden(true)
                                                        .Component(
                                                        Html.X().TextField().ReadOnly(true)
                                                            ),
                                              Html.X().ComponentColumn()
                                                            .Editor(true)
                                                                .DataIndex("Codigo")
                                                            .Text("Codigo Externo")
                                                             .Width(100)
                                                            .Hidden(false)
                                                            .Component(
                                                                     Html.X().TextField().ReadOnly(true)
                                                                ),
                                               Html.X().ComponentColumn()
                                                            .Editor(true)
                                                             .DataIndex("IndicadorWeb")
                                                             .Text("Id Especialidad")
                                                            .Width(100)
                                                            .Hidden(false)
                                                            .Component(
                                                                Html.X().NumberField().ReadOnly(true)
                                                              ),
                                            Html.X().CommandColumn()
                                                .Width(80)
                                                .Commands(
                                                    Html.X().GridCommand()
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                )
                                                .Listeners(ls => ls.Command.Handler = "deleteActual(record);"),
                                         Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .DataIndex("Accion")
                                                    .Text("Acción")
                                                    .Hidden(true)
                                                    .Component(
                                                    Html.X().TextField().ReadOnly(true)
                                                        )

                                )
                                .SelectionModel(
                                        Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                )
                                .Plugins(
                                    Html.X().CellEditing()
                                )
            )

    )
    .CloseAction(CloseAction.Destroy)
        //.Html(DateTime.Now.ToLongTimeString())

)


