@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.WH_ItemMast

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}
@section cabecera
{
    <script>
        var varTipoBuscar = "LOAD";
        var varAux = "1";

        var seleccionActual = null;
        function setSeleccion(param1) {
            seleccionActual = param1;
        }


        var Valores;

        var COLOR_BLUE01 = "#284A89";
        var COLOR_RED01 = "#990000";
        var COLOR_GREEN01 = "#177506";
        var COLOR_YELLOW02 = "#D9A407";

        var changeEstado = function (value) {
            var template = '<span style="color:{0};">{1}</span>';
            if (value == 'A')
                return Ext.String.format(template, COLOR_BLUE01, "Activo");
            if (value == 'I')
                return Ext.String.format(template, COLOR_RED01, "Inactivo");
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        var onSuccess = function (grid, data) {
            grid.show();
            grid.getStore().loadData(data);
        };

        function deleteSelected(grid) {
            var store = grid.store,
               records = grid.selModel.getSelection();
            store.remove(records);
            App.Window1.AutoDestroy(true);

        };
        function nuevo() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("MedicamentoRegistro"))',
                params: {
                    MODO: 'NUEVO',
                    idMedicamento: ''
                }
            });
        };
        function modificarSelected(grid) {
            if (seleccionActual != null) {
                var status = seleccionActual;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("MedicamentoRegistro"))',
                    params: {
                        MODO: 'UPDATE',
                        idMedicamento: status
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }
        function eliminarSelected(grid) {
            if (seleccionActual != null) {
                var status = seleccionActual;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("MedicamentoRegistro"))',
                    params: {
                        MODO: 'DELETE',
                        idMedicamento: status
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }

        function verSelected() {
            eventoVerSelected(seleccionActual);
        }
        function eventoVerSelected(param1) {
            if (App.compoVER.isVisible(true)) {
                if (param1 != null) {
                    var status = param1;
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("MedicamentoRegistro"))',
                        params: {
                            MODO: 'VER',
                            idMedicamento: status
                        }
                    });
                } else {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Debe Seleccionar un Elemento.",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                }
            }
        }

        var accionBuscarFiltro = function (tipo) {
            varTipoBuscar = tipo;
            App.GridPanel1.getStore().reload();
            varTipoBuscar = 'LOAD';
        };

        var accionFinal = function (btn) {
            App.GridPanel1.getSelectionModel().deselectAll();
            seleccionActual = null;
            App.GridPanel1.getStore().reload();
        };

        var eventoCheckFiltro = function (check, componente) {
            var checkAll = check.getValue();
            if (checkAll) {
                componente.setDisabled(true);
                componente.setValue(null);
            } else {
                componente.setDisabled(false);
            }
        };

        var eventoCheckFiltroDos = function (check, componente1, componente2) {
            var checkAll = check.getValue();
            if (checkAll) {
                componente1.setDisabled(true);
                componente1.setValue(null);
                componente2.setDisabled(true);
                componente2.setValue(null);
            } else {
                componente1.setDisabled(false);
                componente2.setDisabled(false);
            }
        };

        function eventoRenderForm() {
            var kk = 140;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            alert('TEST::' + northH);
            var southH = 5;
            if (southH == 0) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.GridPanel1.setHeight(dimCentral);
        }
        var eventoCargarMain = function () {

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addPermisosFormatos"))',
                params: {
                    data: 'FORMATO',
                    indica: 'PERMISO',
                },
                success: function (result) { accionSetPermisos(result.data); }
            });
        };
        var accionSetPermisos = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].ACCION == 'BUSCAR' && App.compoBUSCAR != null) {
                        App.compoBUSCAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'NUEVO' && App.compoNUEVO != null) {
                        App.compoNUEVO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'MODIFICAR' && App.compoMODIFICAR != null) {
                        App.compoMODIFICAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'ELIMINAR' && App.compoELIMINAR != null) {
                        App.compoELIMINAR.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'VER' && App.compoVER != null) {
                        App.compoVER.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'ACCESO' && App.compoACCESO != null) {
                        App.compoACCESO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'HABILITADO' && App.compoHABILITADO != null) {
                        App.compoHABILITADO.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'OBLIGA' && App.compoOBLIGA != null) {
                        App.compoOBLIGA.setVisible((data[i].campoInt01 == 2 ? true : false));
                    } else if (data[i].ACCION == 'PRIORIDADAGOPCION' && App.compoPRIORIDADAGOPCION != null) {
                        App.compoPRIORIDADAGOPCION.setVisible((data[i].campoInt01 == 2 ? true : false));
                    }
                }
            }
        };

             

        function verSelectedMUMM() {
            registroUnidadMedidaMinsa(seleccionActual);
        }

        function registroUnidadMedidaMinsa() {
            if (seleccionActual != null) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("GrupoUnidadMedidaMinsaProductosRegistro"))',
                    params: {
                        MODO: 'UPDATE_MINSA',
                        id_1: seleccionActual.Item,                       
                        descripcion: seleccionActual.DescripcionLocal,
                        desc: seleccionActual.Color
                    }
                });
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe Seleccionar un Elemento.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }


    </script>
}

@section cuerpo
{
    @(
 Html.X().Viewport()
        .AutoScroll(true)
        .Layout(LayoutType.Border)
        .Items(
               X.Panel()
                  .Title("Lista de Componentes")
              .Border(false)
              .Region(Region.North)
              .Split(true)
             .Collapsible(true)
              .Height(150)
                  .TopBar(
                             X.Toolbar()
                            .Height(30)
                                .Items(
                           X.Button()
                                .Text("Buscar").ID("compoBUSCAR")
                                .Icon(Icon.Find)
                                     .Handler("accionBuscarFiltro('FILTRO');"),
                                                X.ToolbarSeparator(),
                                                    X.ToolbarSpacer(),
                                            X.Button()
                                                .Text("Nuevo").ID("compoNUEVO")
                                            .Icon(Icon.ApplicationFormAdd)
                                            .Handler("nuevo(); "),
                                        X.Button()
                                                .Text("Modificar").ID("compoMODIFICAR")
                                            .Icon(Icon.ApplicationFormEdit)
                                            .Handler("modificarSelected();")
                                                 ,
                                        X.Button()
                                                .Text("Eliminar").ID("compoELIMINAR")
                                            .Icon(Icon.ApplicationFormDelete)
                                        .Handler("eliminarSelected();"),
                                           X.ToolbarSeparator(),
                                        X.Button()
                                                .Text("Ver").ID("compoVER")
                                            .Icon(Icon.ApplicationViewDetail)
                                            .Handler("verSelected();").Hidden(true),
                                     X.ToolbarFill(),
                                     
                                      X.ToolbarSeparator(),

                                     X.Button()
                                                .Text("Asociados Unidad Medida Minsa")
                                                .Icon(Icon.BuildingEdit)
                                                .Handler("registroUnidadMedidaMinsa();")
                                  )
                  )
            .Items(X.Panel()
               .Layout(LayoutType.HBox)
               .BodyPadding(5)
               .Border(false)
               .MarginSpec("1 20 1 1")
                    .Items(
                            X.FieldSet()
                                .Flex(1)
                                .Title("Filtros")
                                .MarginSpec("5 5 5 5")
                                .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "120"));
                                })
                                .Items(

                                   Html.X().Container().Layout(LayoutType.HBox)
                                   .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                   .Items(
                                   X.Checkbox()
                                       .FieldLabel("Artículo")
                                                     .ID("chHCArticu")
                                           .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHCArticu,App.tfBuscarCod);")
                                  .Checked(true),
                                   X.TextField()
                                       .ID("tfBuscarCod")
                                   .Disabled(true)
                                   .Name("buscarCod")
                                   .FieldLabel(""),

                                   X.Checkbox()
                                       .FieldLabel("Línea")
                                                     .ID("chHC")
                                                               .Listeners(l => l.Change.Handler = "eventoCheckFiltroDos(App.chHC,App.cmbLineaFamilia,App.cbFamilia);")
                                  .Checked(true),

                                                  X.ComboBoxFor(m => m.Linea).Editable(true)
                                              .ID("cmbLineaFamilia")
                                                  .FieldLabel("")
                                                     .Disabled(true)
                                                     .SimpleSubmit(true)
                                                  .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("MEDLINEADOS").Select(d => new ListItem(d.Name, d.Codigo)))
                                              .Listeners(ls =>
                                              ls.Select.Handler = "App.cbFamilia.clearValue(); App.cbFamilia.getStore().load()"
                                              )
                                              .Width(200), 
                                  
                                   X.Checkbox()
                                       .FieldLabel("Estado")
                                                     .ID("chHCEst")
                                                     .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHCEst,App.tfBuscarEst);")
                                  .Checked(true),

                                           X.ComboBox()
                                              .ID("tfBuscarEst").Editable(false)
                                          .Name("buscarEst")
                                          .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("ESTADOVAR").Select(d => new ListItem(d.Name, d.Codigo)))
                                              .FieldLabel("")
                                     .Disabled(true)
                                          .SimpleSubmit(true)

                                   ),


                                    Html.X().Container().Layout(LayoutType.HBox)
                                   .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                   .Items(
                                   X.Checkbox()
                                       .FieldLabel("Descripción")
                                         .ID("chHCDesc")
                                         .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.chHCDesc,App.tfBuscarDesc);")
                                  .Checked(true),
                                   X.TextField()
                                       .ID("tfBuscarDesc")
                                   .Disabled(true)
                                   .Name("buscarDesc")
                                       .FieldLabel(""),
                                       
                                                    X.ComboBox()
                                                        .ID("cbFamilia").Editable(true).FieldLabel("Familia").LabelWidth(114)
                                                        .Disabled(true)
                                                        .TypeAhead(true)
                                                        .QueryMode(DataLoadMode.Local)
                                                        .ForceSelection(true)
                                                        .TriggerAction(TriggerAction.All)
                                                        .DisplayField("name")
                                                        .ValueField("codigo")
                                                        .EmptyText("Loading...")
                                                        .ValueNotFoundText("Loading...")
                                                        .Width(320)
                                                        .Store(Html.X().Store()
                                                            .AutoLoad(false)
                                                            .Model(Html.X().Model()
                                                                .IDProperty("Codigo")
                                                                .Fields(
                                                                    new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                                                                    new ModelField("name", ModelFieldType.String) { Mapping = "Name" }
                                                                )
                                                            )
                                                            .Proxy(Html.X().AjaxProxy()
                                                                .Url(Url.Action("Familias"))
                                                                .Reader(Html.X().JsonReader().Root("data"))
                                                            )
                                                            .Parameters(ps =>
                                                                 ps.Add(new
                                                                 {
                                                                     Linea = JRawValue.From("App.cmbLineaFamilia.getValue()"),
                                                                     Familia = "",
                                                                     Accion = "MEDFAMILIA"
                                                                 })
                                                            )
                                                            .Listeners(ls =>
                                                                ls.Load.Handler = @"var combo = App.cbFamilia;
                                                                                    combo.setValue(records[0].get(combo.valueField));"
                                                            )
                                                        ))


                                  )

                    )
             ),


            X.Panel()
                .Region(Region.Center)
                .ItemID("center")
               .Header(false)
               .Border(false)
               .Items(
                   X.GridPanel()
                   .AllowDeselect(true)
                        .Border(false)
                        .Scroll(ScrollMode.Both)
                        .AutoScroll(true)
                        .ID("GridPanel1")
                        .Margins("0 0 0 0")
        ///CONFIGURAR EL STORE
                        .Store(store => store.Add(
                                 Html.X().Store()
                                     .ID("Store1")
                                     .AutoLoad(true)
                                     .RemoteSort(false)
                                     .IsPagingStore(true)
                                     .RemotePaging(true)
                                     .PageSize(10)////CAMBIAR DE ACUERDO A ALGÚN UN CRITERIO
                                     .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                .Url("getGrillaMedicamento")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                                     .IDProperty("Item"))))
                                            )
                                         .Parameters(ps =>
                                                ps.Add(new
                                                {
                                                    codigo = JRawValue.From("App.tfBuscarCod.getValue()"),
                                                    descripcion = JRawValue.From("App.tfBuscarDesc.getValue()"),
                                                    estado = JRawValue.From("App.tfBuscarEst.getValue()"),
                                                    linea = JRawValue.From("App.cmbLineaFamilia.getValue()"),
                                                    familia = JRawValue.From("App.cbFamilia.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar")
                                                   
                                                })
                                         )
                                     .Model(model => model.Add(Html.X().Model()
                                             .Fields(fields =>
                                                 {
                                                     fields.Add(Html.X().ModelField().Name("Linea"));
                                                     fields.Add(Html.X().ModelField().Name("Familia"));
                                                     fields.Add(Html.X().ModelField().Name("UnidadCodigo"));
                                                     fields.Add(Html.X().ModelField().Name("Item"));
                                                     fields.Add(Html.X().ModelField().Name("Color"));
                                                     fields.Add(Html.X().ModelField().Name("DescripcionLocal"));
                                                     fields.Add(Html.X().ModelField().Name("PrecioUnitarioLocal"));
                                                     fields.Add(Html.X().ModelField().Name("Estado"));
                                                 }))
                                            )
                                          )
                               )

                            ///CONFIGURAR LAS COLUMNAS
                            .ColumnModel(columnModel =>
                                {
                                    columnModel.Columns.Add(Html.X().Column().Text("Línea").DataIndex("Linea").Width(80));
                                    columnModel.Columns.Add(Html.X().Column().Text("Familia").DataIndex("Familia").Width(80));
                                    columnModel.Columns.Add(Html.X().Column().Text("Código Unidad").DataIndex("UnidadCodigo").Width(85));
                                    columnModel.Columns.Add(Html.X().Column().Text("Artículo").DataIndex("Item").Width(85));
                                    columnModel.Columns.Add(Html.X().Column().Text("Color").DataIndex("Color").Width(85).Hidden(true));
                                    columnModel.Columns.Add(Html.X().Column().Text("Descripción").DataIndex("DescripcionLocal").Width(230));
                                    columnModel.Columns.Add(Html.X().Column().Text("Precio Unitario").DataIndex("PrecioUnitarioLocal").Width(100));
                                    columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(100)
                                .Renderer("changeEstado")
                                );

                                })
                             .View(Html.X().GridView().TrackOver(false))
                             .Border(false)
                            .Listeners(l => l.CellClick
                                        .Handler = "setSeleccion(record.data);")
                                .Listeners(l => l.CellDblClick.Handler = "eventoVerSelected(record.data);")

                            .BottomBar(bar => bar.Add(
                                Html.X().PagingToolbar()
                            ))

                )
            )
    .Listeners(l => l.Render.Handler = "eventoCargarMain();")
    )

    @(X.KeyNav()
                    .Target("={document.body}")
                    .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO');")
    )
}