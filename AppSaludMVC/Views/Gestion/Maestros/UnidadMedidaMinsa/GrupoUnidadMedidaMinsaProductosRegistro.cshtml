@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.WH_ItemMast

@{
    var X = Html.X();
    var COLOR_BLUE01_temp = "#284A89";
    var COLOR_BORDER_DEFAULT = "#b5b8c8";
    
    var STYLE_BORDER_DEF_VALID01 = (Model.Item != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
    var STYLE_BORDER_DEF_VALID02 = (Model.DescripcionLocal != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
  

}

<script>

    var template = 'color:{0};';
    var cuenta = 0;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";


    var change = function (value, meta) {
        return value;
    };

    var onSuccess = function (data) {
        if (data != null) {
            accionMensajes(data);
        }
    };

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };

    
    var onFailure = function (modo) {
        App.btnSave.setDisabled(false);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };

    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente',
                Accion: null
            }
        });
    }

    var showResult = function (btn) {
        Ext.Msg.notify("Aceptar", "You clicked the " + btn + " button");
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };


    function trim(str) { return str.replace(/^\s+|\s+$/g, ""); }


    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };
  


</script>

@(Html.X().Window()
.Width(680)
.Height(300)
.Maximizable(true)
.Modal(true).
OnEsc("false")
//.AutoScroll(true)
.Layout(LayoutType.Fit).
CloseAction(CloseAction.Destroy)
.Icon(Icon.ApplicationForm).
        ID("WindowUnidadMedidaMinsaMed")
    .Title("Asociacion Medicamentos - Unidad Medida Minsa" )
.Padding(4)
      .Items(
                        Html.X().FormPanel().ID("FormPanel1")
                                 .Frame(false)
                                 .Border(false)
                                .AutoScroll(true)
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(
                            Html.X().FormPanel()
                                 .Frame(false)
                                 .Border(false)
                                .Layout(LayoutType.HBox)
                                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                .Items(
                                    Html.X().FormPanel().Layout(LayoutType.Form).Width(350).Height(330).FieldDefaults(d => { d.LabelWidth = 100; }).BodyPadding(10).Frame(false).Border(false)
                                    .Items(
                                    X.TextFieldFor(m => m.ClasificacionComercial).Width(200).FieldLabel("Producto"),
                                    X.TextFieldFor(m => m.UnidadCodigo).FieldLabel("Unidad Spring"),                                  
                                    X.ComboBoxFor(c => c.IdClasificacion).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("COMBMINSA").Select(d => new ListItem(d.Name, d.ID)))
                                    .FieldLabel("Unidad Minsa").SimpleSubmit(true)
                                    ),

                                        Html.X().FormPanel().Layout(LayoutType.Form).Width(300).FieldDefaults(d => { d.LabelWidth = 60; }).BodyPadding(10).Frame(false).Border(false)
                                        .Items(
                                            X.TextFieldFor(m => m.Item).FieldLabel("Id").Width(200).ReadOnly(true)
                                      )),

                                          
                                            X.TextArea().ID("taAlerts")
                                            .Border(false)
                                            .StyleSpec("background:white;border:1px solid gray;")
                                            .FieldStyle("color: red")
                                            .Hidden(true)
                                            .ReadOnly(true)

                             )
                             .TopBar(
                                 X.Toolbar()
                                 .Height(30)
                                 .Items(
                                    X.ToolbarFill(),
                                    X.Button()
                                            .Hidden((Model.Accion == "VER" ? true : false))
                                            .ID("btnSave")
                                            .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                                            .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                                         .DirectEvents(de =>
                                          {
                                              de.Click.Url = Url.Action("save_UnidadMedidaMinsaMedicamentos");
                                              de.Click.Before = "App.btnSave.setDisabled(true); " +
                                                            "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
                                              de.Click.After = "App.btnSave.setDisabled(false); ";
                                              de.Click.EventMask.ShowMask = true;
                                              de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
                                              de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowUnidadMedidaMinsaMed", ParameterMode.Value));
                                              //   de.Click.Success = "onSuccess(result.data);";
                                              de.Click.Failure = "onFailure('" + Model.Accion + "');";

                                          }),
                                    X.Button()
                                                .Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar"))
                                                .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel))
                                         .DirectEvents(de =>
                                          {
                                              de.Click.Url = Url.Action("cerrarWindow");
                                              de.Click.ExtraParams.Add(new Parameter(
                                                    "id", "WindowUnidadMedidaMinsaMed", ParameterMode.Value));
                                          }),
                                              X.ToolbarSpacer(20)
                                     )
                                )
            ).CloseAction(CloseAction.Destroy)
)

