@model SoluccionSalud.Entidades.Entidades.SS_GE_Diagnostico

@{
    var X = Html.X();
}

<script>

    var template = '<span style="color:{0};">{1}</span>';
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 0)
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };

    var seleccionActual = null;
    var seleccionActualDesc = null;
    var seleccionCodPadre = null;
    function setSeleccion(param1, param2, param3) {
        seleccionActual = param1;
        seleccionActualDesc = param2;
        seleccionCodPadre = param3;
    }

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };

    var onFailure = function (modo) {
        Ext.Msg.notify("EVENTO: FAILURE", "MODEL::" + modo);
    };

    function enviarSeleccion(grid) {
        if (seleccionActual != null) {
            var status = seleccionActual;
            var status2 = seleccionActualDesc;
            var status3 = seleccionCodPadre;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action(Model.Accion))',
                params: {
                    MODO: 'get',
                    id: status,
                    descripcion: status2,
                    codpadre: status3,
                    idWindow: "WindowSelecDiagnostico"
                }
            });
        } else {
            Ext.Msg.alert('Debe Seleccionar un elemento.');
        }

    }

    function enviarSeleccionDirect(param1, param2, param3) {
        var status = param1;
        var status2 = param2;
        var status3 = param3;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action(Model.Accion))',
            params: {
                MODO: 'get',
                id: status,
                descripcion: status2,
                codpadre: status3,
                idWindow: "WindowSelecDiagnostico"
            }
        });
    }

    var accionBuscarFiltroDiag = function (tipo) {
        varTipoBuscar = tipo;
        App.GridPanelSelDiagnostico.getStore().reload();
        varTipoBuscar = 'LOAD';
    };

    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    };
</script>

@(Html.X().Window()
    .Width(450)
    .Height(450)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
        .ID("WindowSelecDiagnostico")
    .Title("Seleccionar Diagnostico Padre")
    .Padding(4)
        .TopBar(
                                         X.Toolbar()
                                         .Height(30)
                                             .Items(
                                                X.Button()
                                                .Border(true)
                                                .Text("Buscar")
                                                .Icon(Icon.Find)
                                                .Handler("accionBuscarFiltroDiag('FILTRO');"),
                                                X.ToolbarFill(),
                                            X.Button()
                                                .Text("Aceptar")
                                                .Icon(Icon.Accept)
                                                .Handler("enviarSeleccion(App.GridPanelSelDiagnostico.getSelectionSubmit().getSelectionModelField().getValue());")

                                                     ,
                                            X.Button()
                                                .Text("Cancelar")
                                                .Icon(Icon.Cancel)
                                                 .DirectEvents(de =>
                                                  {
                                                      de.Click.Url = Url.Action("cerrarWindow");

                                                      de.Click.ExtraParams.Add(new Parameter(
                                                            "id", "WindowSelecDiagnostico", ParameterMode.Value));

                                                  }),
                                          X.ToolbarSpacer(20)     
                                             )

        )

            .Items(

                        X.GridPanel()

                               .TopBar(
                                        X.Toolbar()
                                            .Items(
                                               X.Checkbox().FieldLabel("Descripción").ID("chkModulo").Checked(true)
                                                   .Handler("eventoCheckFiltro(App.chkModulo,App.tfBuscarDesc);").LabelWidth(70),
                                            X.TextField()
                                                .ID("tfBuscarDesc").Disabled(true)
                                            .FieldLabel(""),
                                            X.ToolbarFill()
                                        )
                                    )

                            .Border(false)
                            .Scroll(ScrollMode.Both)
                            .AutoScroll(true)
                            .ID("GridPanelSelDiagnostico")

                            .Margins("0 0 0 0")

                        .Store(store => store.Add(
                                 Html.X().Store()
                                     .ID("StoreSelDiagnostico")
                                     .AutoLoad(true)
                                     .RemoteSort(false)
                                     .IsPagingStore(true)
                                     .RemotePaging(true)
                                     .PageSize(10)
                                     .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                    .Url("getGrillaDiagnostico")
                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                                 .IDProperty("IdDiagnostico"))))
                                            )

                                                .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    descripcion = JRawValue.From("App.tfBuscarDesc.getValue()"),
                                                                    tipoBuscar = JRawValue.From("varTipoBuscar")
                                                                })
                                                         )
                                                  .Model(model => model.Add(Html.X().Model()
                                                 .Fields(fields =>
                                                 {
                                                     fields.Add(Html.X().ModelField().Name("IdDiagnostico"));
                                                     fields.Add(Html.X().ModelField().Name("CodigoPadre"));
                                                     fields.Add(Html.X().ModelField().Name("Nombre"));
                                                     fields.Add(Html.X().ModelField().Name("Estado"));
                                                 }))
                                                )
                                            )
                                 )


                          .ColumnModel(columnModel =>
                            {
                                columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("IdDiagnostico").Width(50));
                                columnModel.Columns.Add(Html.X().Column().Text("Codigo").DataIndex("CodigoPadre").Width(60));
                                columnModel.Columns.Add(Html.X().Column().Text("Descripción").DataIndex("Nombre").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(60)
                                .Renderer("changeEstado"));

                            })
                               .View(Html.X().GridView().TrackOver(false))

                                 .Border(false)
                                .Listeners(l => l.CellDblClick
                                        .Handler = "enviarSeleccionDirect(record.data.IdDiagnostico,record.data.Nombre,record.data.CodigoPadre);")
                                .Listeners(l => l.CellClick
                                        .Handler = "setSeleccion(record.data.IdDiagnostico,record.data.Nombre,record.data.CodigoPadre);")
                                .BottomBar(bar => bar.Add(
                                    Html.X().PagingToolbar()

                                ))
                                )
                                 .CloseAction(CloseAction.Destroy)

)
@(
 X.KeyNav()
    .Target("WindowSelecDiagnostico")
    .Enter(a => a.Handler = "accionBuscarFiltroDiag('FILTRO');")
)

