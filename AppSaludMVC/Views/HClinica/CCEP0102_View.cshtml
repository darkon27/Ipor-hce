@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_ExamenFisico_Triaje
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;

    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);
    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);    
    
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    
  


    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI"); 
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";

    var MSJ_IMC = AppSaludMVC.Controllers.UTILES_MENSAJES.getMsgLabelAuxiliar_Form("TRIAJE_IMC", Model.IndiceMasaCorporal);
}
@section cabecera
{
<link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
<style>
    html body {
        padding: 0px;
        background: none;
        background: none;
        background: none;
        background-attachment: fixed;
        background-position: center;
        font-family: tahoma,verdana,sans-serif;
        background-color: #ffffff;
    }
</style>
<script>
    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);
    }

    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) { 
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(true);
        App.btnCancel.setVisible(false);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        form.getForm().reset();
        App.taAlerts.setVisible(false);
        App.conthbIndicaError.setVisible(false);
        setIndicaCambios(false);
    };

    </script>
    <script>
        var OperaCMI = function (h) {
            str = h.value;
            var imc = 0;
            var peso = App.Peso.getValue()
            var talla = App.Talla.getValue()
            // IMC = Peso / (talla x talla )
            var mensajeSalud = "";
            if ((peso > 0) && (talla > 0)) {
                var talla = talla / 100;
                var alturaCuadrado = talla * talla;
                var imc = peso / alturaCuadrado;
                //document.getElementById("IMC").value = Math.round(imc * 100) / 100;
                imc = Math.round(imc * 100) / 100;
                // alert(imc);
                App.IndiceMasaCorporal.setValue(imc);
                setOperaCMI(App.IndiceMasaCorporal);
            }
        }
        function setOperaCMI(h) {
            var imc = h.value;
            if (imc < 16) {
                mensajeSalud = "Delgadez Severa";
            }
            else if (imc < 17) {
                mensajeSalud = "Delgadez Moderada";
            }
            else if (imc < 18.5) {
                mensajeSalud = "Delgadez Aceptable";
            }
            else if (imc < 25) {
                mensajeSalud = "Peso Normal";
            }
            else if (imc < 30) {
                mensajeSalud = "Sobrepeso";
            }
            else if (imc < 35) {
                mensajeSalud = "Obeso: Tipo I";
            }
            else if (imc < 40) {
                mensajeSalud = "Obeso: Tipo II";
            }
            else if (imc >= 40) {
                mensajeSalud = "Obeso: Tipo III";
            }
            App.Mensaje.setValue(mensajeSalud);
        }
        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

         }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

    </script>
    }


    @section cuerpo
{


    @(Html.X().Viewport()
           .ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {            
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {                    
                    l.Render.Handler = "eventoRenderForm(); ";
                    //l.AfterRender.Handler = "setOperaCMI(App.IndiceMasaCorporal); ";
                })
               .Items(X.Toolbar().ID("TBImprimir").Hidden(indicaModoLectura2).Items(X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                //.Hidden(!visibleImpresion)
                                .ID("btnImpresion2")
                                .Handler("eventoVisorReporte('');")),
                      X.FieldSet()
                            .ColumnWidth(0.4)
                            .Title("SIGNOS VITALES")
                            //.Border(false)
                            .MarginSpec("0 05 0 05")
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "150"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })

                            .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })

                            .Items(
                                    X.Container()
                                          .Layout(LayoutType.HBox)
                                          .Defaults(d =>
                                          {
                                              d.Add(new Parameter("LabelWidth", "170"));
                                          })
                                          .Items(
                                                  X.NumberFieldFor(c => c.PresionMinima).FieldLabel("Presión Mínima").EnableKeyEvents(true)
                                                  .ReadOnly(indicaModoLectura).Listeners(l =>{l.KeyUp.Fn = "eventoKey";})
                                                  .MinValue(0)
                                                  ,
                                                   X.Component().Width(20),
                                                   X.NumberFieldFor(c => c.PresionMaxima).FieldLabel("Presión Máxima").EnableKeyEvents(true)
                                                   .ReadOnly(indicaModoLectura).Listeners(l => { l.KeyUp.Fn = "eventoKey"; })
                                                   .MinValue(0)
                                                   ,
                                                    X.Component().Width(20)
                                                    
                                                 ),
                                    X.Container()
                                          .Layout(LayoutType.HBox)
                                          .Defaults(d =>
                                          {
                                              d.Add(new Parameter("LabelWidth", "170"));
                                          })
                                          .Items(
                                                  X.NumberFieldFor(c => c.FrecuenciaRespiratoria).FieldLabel("Frec.Respiratoria (x min)").EnableKeyEvents(true)
                                                  .ReadOnly(indicaModoLectura).Listeners(l => { l.KeyUp.Fn = "eventoKey"; })
                                                  .MinValue(0)

                                                 ),                                                 
                                    X.Container()
                                          .Layout(LayoutType.HBox)
                                          .Defaults(d =>
                                          {
                                              d.Add(new Parameter("LabelWidth", "170"));
                                          })
                                          .Items(
                                                  X.NumberFieldFor(c => c.FrecuenciaCardiaca).FieldLabel("Frec.Cardiaca").EnableKeyEvents(true)
                                                  .ReadOnly(indicaModoLectura).Listeners(l => { l.KeyUp.Fn = "eventoKey"; })
                                                  .MinValue(0)
                                                  ,
                                                   X.Component().Width(20),
                                                  X.NumberFieldFor(c => c.Temperatura).FieldLabel("Temperatura (°C)")
                                                  .MinValue(0)
                                                  .EnableKeyEvents(true)
                                                  .Listeners(l => { l.KeyUp.Fn = "eventoKey"; })
                                                  .ReadOnly(indicaModoLectura)
                                                 ),
                                    X.Container()
                                          .Layout(LayoutType.HBox)
                                          .Defaults(d =>
                                          {
                                              d.Add(new Parameter("LabelWidth", "170"));
                                          })
                                          .Items(
                                                  X.NumberFieldFor(c => c.Peso).FieldLabel("Peso (kg)")
                                                  .EnableKeyEvents(true)
                                                  .MinValue(0)
                                                  .ReadOnly(indicaModoLectura).MinValue(0).NegativeText(MENS_NUMERO)                                                  
                                                  .Listeners(l =>
                                                  {
                                                      l.KeyUp.Fn = "eventoKey";
                                                      l.Change.Handler = "OperaCMI(this);";                                                      
                                                  })
                                                    
                                                  .ReadOnly(indicaModoLectura)
                                                  ,
                                                   X.Component().Width(20),
                                                  X.NumberFieldFor(c => c.Talla).FieldLabel("Talla (cm)")
                                                  .EnableKeyEvents(true)
                                                  .ReadOnly(indicaModoLectura)
                                                  .MinValue(0)
                                                  .Listeners(l =>
                                                  {
                                                      l.KeyUp.Fn = "eventoKey";
                                                      l.Change.Handler = "OperaCMI(this);";
                                                  })
                                                  .MinValue(0).NegativeText(MENS_NUMERO)
                                                 ),
                                    X.Container()
                                          .Layout(LayoutType.HBox)
                                          .Defaults(d =>
                                          {
                                              d.Add(new Parameter("LabelWidth", "170"));
                                          })
                                          .Items(
                                                  X.Label(" "),
                                                  X.TextFieldFor(c => c.IndiceMasaCorporal).FieldLabel("IMC").ReadOnly(indicaModoLectura)
                                                  .Listeners(l => { l.Change.Handler = "OperaCMI(this);"; }),
                                                   X.Component().Width(20),
                                                  X.TextField().ID("Mensaje").ReadOnly(indicaModoLectura)
                                                  .Value(MSJ_IMC)
                                                 )
                                ),
                          X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("FUNCIONES BIOLÓGICAS")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                            X.Container()
                                                  .Layout(LayoutType.HBox)
                                                  .Defaults(d =>
                                                  {
                                                      d.Add(new Parameter("LabelWidth", "170"));
                                                  })
                                                  .Items(

                                                        X.ComboBoxFor(c => c.IdEstadoGeneral).ReadOnly(indicaModoLectura)
                                                                .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABESTADOGENERAL").Select(d => new ListItem(d.Name, d.ID)))
                                                                .FieldLabel("Estado general").Editable(false)
                                                                .SimpleSubmit(true),
                                                        X.Component().Width(20),
                                                        X.ComboBoxFor(c => c.IdHidratacion).ReadOnly(indicaModoLectura)
                                                                .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABHIDRATACION").Select(d => new ListItem(d.Name, d.ID)))
                                                                .FieldLabel("Hidratación").Editable(false)
                                                                .SimpleSubmit(true)    
                                                                ),
                                              X.Container()
                                                  .Layout(LayoutType.HBox)
                                                  .Defaults(d =>
                                                  {
                                                      d.Add(new Parameter("LabelWidth", "170"));
                                                  })
                                                  .Items(
                                                        X.ComboBoxFor(c => c.IdNutricion).ReadOnly(indicaModoLectura)
                                                                .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABNUTRICION").Select(d => new ListItem(d.Name, d.ID)))
                                                                .FieldLabel("Nutrición").Editable(false)
                                                                .SimpleSubmit(true),
                                                        X.Component().Width(20),
                                                        X.ComboBoxFor(c => c.IdColaboracion).ReadOnly(indicaModoLectura)
                                                                .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                                .FieldLabel("Colaboración").Editable(false)
                                                                .SimpleSubmit(true)                                                                                                                              
                                                        )
                                         ),
                            X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("OBSERVACIONES ADICIONALES")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                        X.TextAreaFor(c => c.ObservacionesAdicionales).ReadOnly(indicaModoLectura)
                                        .FieldLabel("Observaciones")
                                     )
                            ////////ADD PARA MSGS/////		
                            ,
                            X.TextArea().ID("taAlerts")
                            .Border(false)
                            .StyleSpec("background:white;border:1px solid gray;")
                            .FieldStyle("color: red")
                            .Hidden(true)
                            .ReadOnly(true)
                            //////////////////////                                                                
                     )
                                                                                                                         
                    .TopBar(X.Toolbar().Hidden(indicaModoLectura).Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>"),                    
                                
				                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),                                
                                X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")      
                                ,
                                X.ToolbarSpacer().Width(40)                                                                
                                ,                                
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar")
                                //.DirectClickAction("Save_ExamenFisico_Triaje"),
                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("Save_ExamenFisico_Triaje");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Before = ""+
                                            "beforeSave(App.formactual); return App.formactual.getForm().isValid();";                                                                                                           
                                    //de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowX", ParameterMode.Value));
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),                                 
                                //.OnClientClick("var form = this.up('form'); form.getForm().updateRecord(form.down('grid').getSelectionModel().getLastSelected());"),
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel")
                                .Icon(Icon.Cancel)                                
                                .Handler("eventoCancelar(this.up('form'));") 
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")                                

                        ))
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"
                        )                        
                );
        }
        )


      )

    }

