@model SoluccionSalud.Entidades.Entidades.V_EpisodioAtenciones


@{
    var X = Html.X();
    var COLOR_BLUE01_temp = "#284A89";
    var COLOR_RED01_temp = "#990000";
    var COLOR_GREEN01_temp = "#177506";
    var COLOR_YELLOW02_temp = "#D9A407";
    var urlActivo = "";
    urlActivo = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PacienteDatos1;

    var idOpcion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDOPCION_ACTUAL;
    var codigoFormatoActual = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.CONCEPTO;
    var descOpcion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.CONCEPTODESCRIPCION;

    var NODOROOT_desc = "DOCUMENTOS-SALUD";
    var NODOROOT_id = "1|0|0|";

    var idWindow = "windowCopiarForm";
}

<style type="text/css">
    /*<![CDATA[*/
    #img_uno {
        width: auto;
        height: 100%;
        align-self: center;
        -webkit-user-select: none;
        cursor: zoom-in;
    }

    #img_dos {
        -webkit-user-select: none;
        cursor: zoom-out;
    }

    .logo {
        border: solid 3px #000;
    }
    /*]]>*/
</style>

<script>

    var myRenderer1 = function (value, metadata) {
        metadata.style = "font-weight: bold;";

        return value;
    };

    var actualPrev_X = null;
    var actualPrev_Y = null;
    var actualPrev_H = null;
    var actualPrev_W = null;

    var panelActual = null;
    var pathImage = "resources/IndexImagen/";

    var sistemas = function (record) {

        var desc = record.data.text;
        var vector = record.data.id.split('|');
        var showURL = "";
        var tipo = 0;
        if (vector.length > 3) {
            tipo = vector[0];
            showURL = vector[3];
        }
        if (tipo > 1) {
            var cont = App.centerPanels;
            cont.setTitle('Selección actual: ' + desc);
            imagendiv(showURL);
        } else {
        }
    };

    var formSelecc = null;

    var loadContenidoHist = function (record) {
        if (record != null) {
            var formSelecc = record.data.Accion;
            if (formSelecc != null) {
                var cont = App.centerPanelsCopy;
                cont.setTitle('Selección actual: ');
                var contX = cont.getLoader();
                cont.getLoader().url = 'HClinica/' + formSelecc + '_View';
                contX.load({
                    params: {
                    }
                });
            }

        }
    };

    function imagendiv(showURL) {
        var imagen = document.createElement('img');
        /* agregamos propiedades al elemento
        */
        imagen.src = showURL;
        imagen.id = 'img_uno';
        imagen.className = 'logo';
        imagen.title = 'titulo de la imagen';
        imagen.alt = 'texto alternativo';
        imagen.onclick = function () {
            if (this.id == 'img_uno') {
                this.id = 'img_dos';
            } else {
                this.id = 'img_uno';
            }
        };
        /* definimos el elemento donde insertamos la imagen
        */
        var div = document.getElementById("centerPanels-body");
        div.innerHTML = "";
        div.style.overflow = "scroll";
        /* agregamos la imagen
        */
        div.appendChild(imagen);
    }

    var eventoExpandir = function (window, contraer) {
        if (contraer) {
            if (actualPrev_X != null && actualPrev_Y != null && actualPrev_H != null && actualPrev_W != null) {
                window.setHeight(actualPrev_H);
                window.setWidth(actualPrev_W);
                window.setX(actualPrev_X);
                window.setY(actualPrev_Y);
                App.btnContract.setVisible(false);
                App.btnExpand.setVisible(true);
            }
        } else {
            actualPrev_H = window.getHeight();
            actualPrev_W = window.getWidth();
            actualPrev_X = window.getX();
            actualPrev_Y = window.getY();
            var KK = 30;
            var h = screen.height;
            var w = screen.width;
            window.setHeight(h - KK - 100);
            window.setWidth(w);
            window.setX(0);
            window.setY(KK);
            App.btnContract.setVisible(true);
            App.btnExpand.setVisible(false);
        }

    };



    var eventoCheckFiltro_VisorCopiar = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    };
    var eventoCheckFiltroCompuesto_VisorCopiar = function (check, componente1, componente2, componente3, btn) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente1.setDisabled(true);
            componente1.setValue(null);
            componente2.setDisabled(true);
            componente2.setValue(null);
            componente3.setDisabled(true);
            componente3.setValue(null);
            btn.setDisabled(true);
        } else {
            componente1.setDisabled(false);
            componente2.setDisabled(false);
            componente3.setDisabled(false);
            btn.setDisabled(false);
        }
    };

    function seleccionadorMedico() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoEsp_DocHC',
                AccionListado: 'LISTARPAG'
            }
        });
    };

    var varTipoBuscar_VisorCopiar = "LOAD";
    var selecRecordActual_VisorCopiar = null;

    var accionBuscarFiltro_VisorCopiar = function (tipo) {
        varTipoBuscar_VisorCopiar = tipo;
        App.GridPanelCopiaForm.getStore().reload();
        varTipoBuscar_VisorCopiar = 'LOAD';
    };

    var SelectClik_VisorHist = function (record) {
        selecRecordActual_VisorCopiar = record;
        if (selecRecordActual_VisorCopiar != null) {
            var idEpiAtencion = selecRecordActual_VisorCopiar.data.IdEpisodioAtencion;
            var idEpiClinico = selecRecordActual_VisorCopiar.data.EpisodioClinico;
            var UnidadReplicacion = selecRecordActual_VisorCopiar.data.UnidadReplicacion;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("eventoRegistroHistoricoFormulario"))',
                params: {
                    formato: '@(codigoFormatoActual)',
                    accion: "HISTORIAL",
                    idEpiAtencionCopy: idEpiAtencion,
                    idEpiClinicoCopy: idEpiClinico,
                    UnidadReplicacionCopy: UnidadReplicacion
                }
                , success: function (result) {
                    loadContenidoHist(selecRecordActual_VisorCopiar);

                }
            });
        }

    };



    function getColumnasHistorial(proceso) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("getColumnasHistorial"))',
            params: {
                opcion: proceso,
                accion: 'COLUMNAS_HISTORIAL'
            }
             , success: function (result) { eventoCambioColumnasHistorial(result); }
        });
    }
    function eventoCambioColumnasHistorial(data) {
        if (data != null) {
            var grid = App.GridPanelCopiaForm;
            grid.columns.forEach(function (col) {
                if ((col.id == 'colum01')) {
                    col.setVisible(false);
                    if (data.ValorCodigo1 != null) {
                        if (data.ValorCodigo1 != '0') {
                            col.setText(data.ValorCodigo1);
                            col.setVisible(true);
                        }
                    }
                }
                else if ((col.id == 'colum02')) {
                    col.setVisible(false);
                    if (data.ValorCodigo2 != null) {
                        if (data.ValorCodigo2 != '0') {
                            col.setText(data.ValorCodigo2);
                            col.setVisible(true);
                        }
                    }
                }
                else if ((col.id == 'colum03')) {
                    col.setVisible(false);
                    if (data.ValorCodigo3 != null) {
                        if (data.ValorCodigo3 != '0') {
                            col.setText(data.ValorCodigo3);
                            col.setVisible(true);
                        }
                    }
                }
                else if ((col.id == 'colum04')) {
                    col.setVisible(false);
                    if (data.ValorCodigo4 != null) {
                        if (data.ValorCodigo4 != '0') {
                            col.setText(data.ValorCodigo4);
                            col.setVisible(true);
                        }
                    }
                }
                else if ((col.id == 'colum05')) {
                    col.setVisible(false);
                    if (data.ValorCodigo5 != null) {
                        if (data.ValorCodigo5 != '0') {
                            col.setText(data.ValorCodigo5);
                            col.setVisible(true);
                        }
                    }
                }
            });
        }
    }

</script>


@(Html.X().Store()
        .ID("StoreComboProcesos")
            .Model(X.Model()
                 .IDProperty("IdOpcion")
                    .Fields(
        //X.ModelField().Name("CodigoOpcion")
                    new ModelField("IdOpcion"),
                    new ModelField("Descripcion")
                )
            )
            .Proxy(X.AjaxProxy()
                    .Url(Url.Action("getSeguridadOpciones"))
                .Reader(X.JsonReader().Root("data"))
            )
            .Listeners(l => l.Load.Handler = "App.comboProceso.setValue(" + idOpcion + "); " +
                    "App.GridPanelCopiaForm.getStore().reload();"
            )

            /*
        .Model(Html.X().Model()
                .IDProperty("CodigoOpcion")
                .Fields(
                    //X.ModelField().Name("CodigoOpcion")
                new ModelField("CodigoOpcion"),
                new ModelField("Descripcion")
            )
        )   */
        //.DataSource(SoluccionSalud.Service.SeguridadConceptoService.SvcSeguridadConcepto.ListarSeguridadOpcion(Model));
)




@(Html.X().Window()
    .Width(960)
    .Height(650)
        //.X(0)
        //.Y(0)
    .Maximizable(false)
    .Closable(false)
    .Modal(true)
    .Constrain(true)  // 08/05/2019 
    .OnEsc("true")
    .AutoScroll(true)
    .Resizable(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
     .ID("" + idWindow)
            .Title("Historial Formulario Compartido:" + descOpcion)
    .Padding(4)
        .TopBar(
            X.Toolbar()
            .Height(30)
            .Items(
                X.ToolbarSpacer(),
                  X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" +
                    "Paciente" + ": " + Model.NombreCompleto + "</span> </b>")
                ,
                X.ToolbarSpacer(40),
                  X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" +
                        "Unidad de Replicación" + ": " + Model.UnidadReplicacionEC + "</span> </b>").Hidden(true)
                ,
                X.ToolbarFill()
                ,
                X.Button().ID("btnExpand")
                    .Text("Expandir")
                    .Icon(Icon.ApplicationSideExpand)
                    .Handler("eventoExpandir (App." + idWindow + ",false);")
                            ,
                X.Button().ID("btnContract")
                    .Text("Restaurar").Hidden(true)
                    .Icon(Icon.ApplicationSideContract)
                    .Handler("eventoExpandir (App." + idWindow + ",true);")

                )
          )
        //INICIO
    .Items(
        X.Panel()
        .Border(false)
        .Layout(LayoutType.VBox)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .TopBar(
                X.Toolbar()
                .Height(30)
                .Items(

                    X.Button().ID("btnBuscar")
                        .Text("Buscar")
                        .Icon(Icon.Find)
                        .Handler("accionBuscarFiltro_VisorCopiar('FILTRO');")
                    , X.ToolbarFill()
                    , X.ToolbarSeparator()
                    ,
                    X.Button()
                        .Text("Aceptar")
                        .Icon(Icon.Accept)
                        .DirectEvents(de =>
                         {  //Model.ACCION : Posee el MODO ACTUAL
                             de.Click.Url = Url.Action("cerrarWindow");
                             //de.Click.EventMask.ShowMask = true;
                             de.Click.ExtraParams.Add(new Parameter(
                                   "id", "" + idWindow, ParameterMode.Value));
                         })

                    )
        )
        .Items(
            X.FieldSet().Height(50).ColumnWidth(0.4).Collapsible(true)
            .Title("Filtros de Búsqueda").MarginSpec("0 05 05 05")//BOTT LEFT TOP RIGHT
            .Items(
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                    X.Checkbox()
                    .FieldLabel("Código OA")
                     .ID("CopiaForm_chkOA")
                     .Listeners(l => l.Change.Handler = "eventoCheckFiltro_VisorCopiar(this,App.CopiaForm_txtOA);")
                    .Checked(true),
                    X.TextField()
                    .Width(220)
                    .ID("CopiaForm_txtOA")
                    .Disabled(true)
                )
                ,
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                )
                ,
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                )
            )
            ,
            X.Panel().Header(false).Border(false).Flex(1)
            .Layout(LayoutType.Border)
            .Items(
                    X.Panel().Icon(Icon.BookOpen).Collapsible(true).Resizable(true)
                    .Draggable(false)
                    .Layout(LayoutType.Fit)
                    .Region(Region.West)
                    .Title("Información de otras Atenciones")
                    .Width(950)
                    .Border(true)
                    .Items(

                        X.GridPanel()
                        .Layout(LayoutType.Fit)
                        .Border(false)
                        .Scroll(ScrollMode.Both)
                        .AutoScroll(true)
                        .ID("GridPanelCopiaForm")
                        .Margins("0 0 0 0")
                        .Listeners(l =>
                        {
                            l.AfterRender.Handler = "getColumnasHistorial(" + idOpcion + ");";
                        })

                        .Store(store => store.Add(
                        Html.X().Store()
                        .ID("storeCopiaForm")
                        .AutoLoad(true)
                        
                            //.RemoteSort(false)
                        .IsPagingStore(true)
                        .RemotePaging(true)
                        .PageSize(5)
                        .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                            .Url("HClinica/ListadoPacienteEpisodioAtencion")
                        .Reader(reader => reader.Add(Html.X().JsonReader()
                        .Root("data")
                        .TotalProperty("total")
                       .IDProperty("Persona"))))
                        )
                        .Parameters(ps =>
                        ps.Add(new
                        {
                            //start = 0,
                            //limit = 10,
                            codigooa = JRawValue.From("App.CopiaForm_txtOA.getValue()"),
                            proceso = idOpcion,
                            tipoBuscar = JRawValue.From("varTipoBuscar_VisorCopiar"),
                            accion = "LISTAR_GRUPO",
                        })
                         )
                         /*.GroupField("PersonalSaludNombre")*/
                         .Model(model => model.Add(Html.X().Model()
                         .Fields(fields =>
                         {
                             fields.Add(Html.X().ModelField().Name("FechaCreacion"));
                             fields.Add(Html.X().ModelField().Name("CodigoOA"));
                             fields.Add(Html.X().ModelField().Name("Descripcion001"));
                             fields.Add(Html.X().ModelField().Name("Codigo004"));
                             fields.Add(Html.X().ModelField().Name("Descripcion002"));
                             fields.Add(Html.X().ModelField().Name("Descripcion004"));
                             fields.Add(Html.X().ModelField().Name("especialidadNombre"));
                             fields.Add(Html.X().ModelField().Name("MotivoConsulta"));
                             fields.Add(Html.X().ModelField().Name("PersonalSaludNombre"));
                             fields.Add(Html.X().ModelField().Name("IdPaciente"));
                             fields.Add(Html.X().ModelField().Name("IdOrdenAtencion"));                            
                             fields.Add(Html.X().ModelField().Name("UsuarioCreacion"));
          

                         })))))
                         .ColumnModel(columnModel =>
                         {

                             columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha de registro").DataIndex("FechaCreacion").Width(120).Format("dd/MM/yyyy"));
                             columnModel.Columns.Add(Html.X().Column().Text("Código OA").DataIndex("CodigoOA").Width(90).Hidden(false));
                             columnModel.Columns.Add(Html.X().Column().Text("Desc 01").ID("colum01").DataIndex("Descripcion001").Width(100).Hidden(false)/*.Renderer("myRenderer1")*/);
                             columnModel.Columns.Add(Html.X().Column().Text("Desc 02").ID("colum02").DataIndex("Codigo004").Width(40).Hidden(false)/*.Renderer("myRenderer1")*/);
                             columnModel.Columns.Add(Html.X().Column().Text("Desc 03").ID("colum03").DataIndex("Descripcion002").Width(60).Hidden(false)/*.Renderer("myRenderer1")*/);
                             columnModel.Columns.Add(Html.X().Column().Text("Desc 04").ID("colum04").DataIndex("Descripcion004").Width(250).Hidden(false)/*.Renderer("myRenderer1")*/);
                             columnModel.Columns.Add(Html.X().Column().Text("Especialidad").DataIndex("especialidadNombre").Width(150).Hidden(false));
                             columnModel.Columns.Add(Html.X().Column().Text("Observaciones").ID("colum05").DataIndex("MotivoConsulta").Width(300).Hidden(false));
                             columnModel.Columns.Add(Html.X().Column().Text("Medico").DataIndex("PersonalSaludNombre").Width(300).Hidden(false));
                             
                             columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(100).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("IdOrdenAtencion").DataIndex("IdOrdenAtencion").Width(100).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("UsuarioCreacion").DataIndex("UsuarioCreacion").Width(300).Hidden(true));



                         })

                           .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                           .InputItemWidth(50)
                           .BeforePageText("Pág.")
                           .DisplayInfo(true)
                           .DisplayMsg("{0} - {1} de {2} Elementos")))
        //.View(view => view.Add(Html.X().GridView().TrackOver(false)))
                            .View(X.GridView()
                            .Plugins(X.GridDragDrop().EnableDrop(false))
                            )
                          /*  .Features(
                                Html.X().Grouping()
                                .ID("GroupingRecursos")
        //.GroupHeaderTplString("{columnName}: {name} ({[values.rows.length]} {[values.rows.length > 1 ? \"Items\" : \"Item\"]})")
                                .GroupHeaderTplString("{columnName}: {name} - ({[values.rows.length]} {[values.rows.length > 1 ? \"Items\" : \"Item\"]})")
                                .HideGroupedHeader(true)
                                .EnableGroupingMenu(false)
                            )*/
                            .Border(false)
                            .Listeners(l =>
                            {
                                //l.CellDblClick.Handler = "eventoDobleClik_VisorCopiar(record.data);";
                                l.CellClick.Handler = "SelectClik_VisorHist(record);";
                            }
                            )
                    )
                    


            )
        )
    )//FIN
     
)


