@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Anamnesis_EA

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;

    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);

    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));



                     

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI"); ;
    var DESC_ADD = "Proc. médicos (CIAP -2)";
    var COLOR_BLUE01 = "#284A89";
}

@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
    html body {
        padding: 0px;
        background: none;
        background: none;
        background: none;
        background-attachment: fixed;
        background-position: center;
        font-family: tahoma,verdana,sans-serif;
        background-color: #ffffff;
    }
</style>
    <script>
        function eventoValidaRegla() {
            var APMiscelaneos = new Array();
            var MA_MiscelaneosDetalle = {
                ValorEntero1: 1,
                ACCION: "PO_EXAMENGENICOLO"
            };
            APMiscelaneos.push(MA_MiscelaneosDetalle);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("POSaludControlGinecologia"))',
                params: {
                    PacienteID: 0,
                    valor: 0,
                    regla: 'POSaludControlGinecologia',
                    arrays: APMiscelaneos
                },
                success: function (result) { mostrarAlarma(result.data); }
            });

            // alert(edad);
        };
        var mostrarAlarma = function (data) {
            //alert("aaa" + data[0].ESTADORETORNO);
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }
        }

        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);
        }

    var ALTURADEF = screen.height;
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value?1:0)
            }
        });
    }

    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }

    var count = 0;

    function InsertRow(valor,estado,soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (valor.getValue() != '') {
                var obj = JSON.parse(valor.getValue());
                var DescripcionLocalVar = obj.DescripcionLocal;
                if (validaDuplicado(DescripcionLocalVar)) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    valor.setValue('');
                    return;
                }
                var grid = Ext.getCmp("grillaExamenes");
                setIndicaCambios(true);
                grid.store.insert(0, {
                    CodigoElemento: 'New' + count++,
                    ValorCodigo1: DescripcionLocalVar,
                    ACCION: 'NUEVO'
                });
                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);
                valor.setValue('');
            }
        }
    }
    function validaDuplicado(valor) {
        var estados=false;
        var valor1
        var valor2
        App.storeExamenes.each(function (r) {
            if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
        });
        return estados;
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function deleteActual(record) {
        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.CodigoElemento;
            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addEliminar_SS_HC_Anamnesis_EA"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(true);
        App.btnCancel.setVisible(false);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };

    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
    };

    function eventoCancelarTest() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("eventoCancelarForm"))',
                params: {
                    indica: ''
                }
            });
    }

    function eventoCancelar(form) {
        form.getForm().reset();
        App.taAlerts.setVisible(false);
        App.conthbIndicaError.setVisible(false);
        App.storeExamenes.reload();
        setIndicaCambios(false);
    }
    </script>

    <script>
        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);
         }

        function EnviarData(grid) {
            beforeSave(App.formactual);
            if (App.formactual.getForm().isValid()) {
                App.cmdGuardar.setDisabled(true);
                source = App.grillaExamenes;
                var store = App.storeExamenes;
                var status = 0;
                var i = 1;
                var valores = "";
                var mensajes = "";
                var ArrayList0 = new Array();
                var records = App.grillaExamenes.getSelectionModel().getSelection();
                App.storeExamenes.each(function (r) {
                    var MA_MiscelaneosDetalle = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayList0.push(MA_MiscelaneosDetalle);
                    i = i + 1;
                });

                App.Accion.value = mensajes;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Save_SS_HC_Anamnesis_EA"))',
                    params: {
                        selectionArray1: ArrayList0,
                        text: '0'
                    }
                });
                return true;
            } else {
                App.cmdGuardar.setDisabled(false);
                return false;
            }
        }

        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();

            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }
        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) { accionMensajes(result.data); }
                });
            }
        };
    </script>
}

@section cuerpo{
    @(Html.X().Viewport().ID("ViewportXD").Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch }).Listeners(l => { l.AfterLayout.BroadcastOnBus = "App.resize"; l.AfterLayout.Single = true; })
        .Items(regions =>
        {
            regions.Add(Html.X().FormPanel().DefaultAnchor("100%").AutoScroll(true).Height(340).Header(false).Border(true).ID("formactual").Listeners(l => { l.Render.Handler = "eventoRenderForm();"; })
                .Items(
                X.Toolbar().ID("TBImprimir").Hidden(indicaModoLectura2).Items(X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                //.Hidden(!visibleImpresion)
                                .ID("btnImpresion2")
                                .Handler("eventoVisorReporte('');")),
                X.FieldSet().ColumnWidth(0.4).Title("ENFERMEDAD ACTUAL").MarginSpec("0 05 0 05").Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "150"));
                    d.Add(new Parameter("DefaultAnchor", "100%"));
                    d.Add(new Parameter("LabelAlign", "Left"));
                })
                .DefaultAnchor("100%").FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                .Items(
                X.TextField().ID("RecepcionaRecurso").Listeners(l => { l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');"; }).Hidden(true),
                X.TextAreaFor(c => c.MotivoConsulta).FieldLabel("Motivo de la consulta").ReadOnly(indicaModoLectura).Width(200).Height(50),
                X.TextAreaFor(c => c.ComentarioAdicional).ReadOnly(indicaModoLectura).FieldLabel("Comentario Adicional").Width(200).Height(50),
                X.ComboBoxFor(c => c.Prioridad).ReadOnly(indicaModoLectura).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenerico("PRIORIDAD").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Prioridad").SimpleSubmit(true),
                //X.ComboBoxFor(c => c.IdCursoEnfermedad).ReadOnly(indicaModoLectura).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("HCC_CURSOENF").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Curso de la enfermedad").SimpleSubmit(true).Hidden(true).Listeners(l =>{l.Change.Handler = "hhValidation(this);";}),
                X.GridPanel().ID("grillaExamenes").Border(false)
                .Store(Html.X().Store().ID("storeExamenes").Model
                (Html.X().Model().IDProperty("CodigoElemento")
                .Fields(
                Html.X().ModelField().Name("CodigoElemento"),
                Html.X().ModelField().Name("ValorCodigo1"),
                Html.X().ModelField().Name("ACCION")
                )
                )
                .AutoLoad(true)
                .RemoteSort(false)
                .IsPagingStore(true)
                .RemotePaging(true)
                .PageSize(5)
                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEP0003_ENFER_ACTUAL").Reader(reader => reader.Add
                (Html.X().JsonReader()
                .Root("data")
                .TotalProperty("total")
                .IDProperty("CodigoElemento")
                ))))
                ).ColumnModel(
                Html.X().ComponentColumn().Editor(true).Text("Síntomas y signos principales").DataIndex("ValorCodigo1").Flex(1).Component(
                Html.X().TextField().ReadOnly(true).Listeners(l => { l.Change.Handler = "hhValidation(this);"; })),
                Html.X().Column().Text("ACCION").DataIndex("ACCION").Width(85).Hidden(true),
                Html.X().CommandColumn().Width(70).Text("Acción").Commands(
                Html.X().GridCommand().Disabled(indicaModoLectura).CommandName("Delete").Icon(Icon.Delete).Text("Eliminar"))
                .Listeners(ls => ls.Command.Handler = "deleteActual(record);")
                      )
                      .SelectionModel(
                      Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                   )
                                   .Plugins(
                                   Html.X().CellEditing()
                                          )
                                          .Listeners(l => l.CellClick.Handler = "setSeleccionActual(record);")
                                          .TopBar(
                                          Html.X().Toolbar().Hidden(indicaModoLectura)
                                          .Items(
                                              Html.X().ToolbarSeparator(),
                                              Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                              )
                                                  ),
                X.TextFieldFor(c => c.RelatoCronologico).FieldLabel("Síntomas y Signos principales").ReadOnly(indicaModoLectura).Listeners(l => { l.Change.Handler = "hhValidation(this);"; }).Hidden(true),
                X.ComboBoxFor(c => c.Apetito).ReadOnly(indicaModoLectura).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOAPSEDSUEN").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Apetito").SimpleSubmit(true).Hidden(true),
                X.ComboBoxFor(c => c.Sed).ReadOnly(indicaModoLectura).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOAPSEDSUEN").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Sed").SimpleSubmit(true).Hidden(true),
                X.ComboBoxFor(c => c.Orina).ReadOnly(indicaModoLectura).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOAPSEDSUEN").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("Orina").SimpleSubmit(true).Hidden(true),
                X.TextFieldFor(c => c.Deposiciones).ReadOnly(indicaModoLectura).FieldLabel("Deposiciones").Hidden(true),
                X.TextFieldFor(c => c.Sueno).ReadOnly(indicaModoLectura).FieldLabel("Sueño").Hidden(true),
                //X.NumberFieldFor(c => c.PesoAnterior).ReadOnly(indicaModoLectura).MinValue(0).NegativeText("No se permite un valor negativo.").FieldLabel("Peso Anterior"),
                X.TextFieldFor(c => c.Infancia).ReadOnly(indicaModoLectura).FieldLabel("Infancia").Hidden(true),
                X.TextFieldFor(c => c.EvaluacionAlimentacionActual).ReadOnly(indicaModoLectura).FieldLabel("Eval. de la aliment. actual").Hidden(true),
                X.HiddenFor(c => c.Accion),
                X.DateFieldFor(c => c.FechaCreacion).Hidden(true),
                X.DateFieldFor(c => c.FechaModificacion).Hidden(true),
                X.TextFieldFor(c => c.UsuarioCreacion).Hidden(true),
                X.TextFieldFor(c => c.UsuarioModificacion).Hidden(true),
                X.TextFieldFor(c => c.Estado).Hidden(true),
                X.TextArea().ID("taAlerts").Border(false).StyleSpec("background:white;border:1px solid gray;").FieldStyle("color: red").Hidden(true).ReadOnly(true)
                )
                ).MinButtonWidth(40).TopBar(
                X.Toolbar().Hidden(indicaModoLectura)
                .Items(
                X.ToolbarSpacer(20),
                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true),
                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>"),
                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                
                X.ToolbarFill(),
                X.Button().Text("Guardar").ID("cmdGuardar").Icon(Icon.Disk).CausesValidation(true).DirectEvents(de =>
                {
                    de.Click.Url = Url.Action("Save_SS_HC_Anamnesis_EA");
                    de.Click.EventMask.ShowMask = true;
                    de.Click.Before = "return EnviarData(this.up('grid'));";
                    de.Click.Success = "onSuccess(result.data);";
                    de.Click.Failure = "onFailure();";
                }),
                X.Button().Text("Cancelar").ID("btnCancel").Icon(Icon.Cancel).Handler("eventoCancelar(this.up('form'));"),
                X.Button().Text("Editar").ID("btnOnEdit").Icon(Icon.ApplicationFormEdit).Hidden(true).Handler("eventoOnEditar(App.btnOnEdit);"),
                X.Button().Text("Variados").ID("cmdBuscar").Icon(Icon.Cancel).Hidden(true).OnClientClick("this.up('form').getForm().reset();")
                )).Listeners(l => { l.FieldChange.Handler = "setIndicaCambios(true);"; })
                );
        })
    )}