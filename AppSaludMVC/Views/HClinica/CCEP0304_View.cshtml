@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.BE_Medicamento_FE
@{
    ViewBag.TitLIAe = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);

    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;
    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);


    var NumGrupMed1 = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO;

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));



    var DESC_ADD = "Medicamentos";
    var COLOR_BLUE01 = "#284A89";

    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";


    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";
}
@section cabecera
{

<style>
    html body {
        padding: 0px;
        background: none;
        background: none;
        background: none;
        background-attachment: fixed;
        background-position: center;
        font-family: tahoma,verdana,sans-serif;
        background-color: #ffffff;
    }
</style>

    <style>
        .icon-plugindisabled {
            background-image: url(/icons/plugin_disabled-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-plugingo {
            background-image: url(/icons/plugin_go-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-delete {
            background-image: url(/icons/delete-png/ext.axd);
            background-repeat: no-repeat;
        }
    </style>


    <script>



        var COLOR_BLUE01_ = "#284A89";
        var COLOR_RED01_ = "#990000";
        var COLOR_YELLOW02_ = "#D9A407";
        var COLOR_GREEN01_ = "#177506";
        var COLOR_ORANGE01_ = "#E07509";

        var changeEPS2 = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };



        var changeModalidad2 = function (value) {
            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
            var template = '<span style="color:{0};">{1}</span>';
            if (value == 6)
                return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
            if (value == 5)
                return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
            if (value == 19)
                return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
            if (value == 3)
                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
            else
                return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
        };

        var ContDell = 1;
        var RegActivoMed = 0;
        var EstadoDetalle = 0;

        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(dimCentral);
        }

        function eventoAfterRenderForm(grupos) {


            if (parseInt(grupos) > 0) {

                for (var x = 0; x < parseInt(grupos) ; x++) {
                    addgrupo(parseInt(x));
                    /*var grid = Ext.getCmp('grillaExamenes' + x);
                    grid.getStore().getSelectionModel().items*/
                }

            }

        };





        var seleccRecordActual = null;
        var seleccRecordActualInd = null;
        var changeGridMed = 0;
        var changeGridMedDetail = 0;

        function setChangedMed(value) {
            if (value == 1) {

                if (changeGridMed == 0) {
                    changeGridMed = 1;
                } else if (changeGridMed == 1) {
                    setIndicaCambios(true);
                }
            } else if (value == 0) {
                changeGridMed = 0;
            }
        };


        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }
        function setSeleccionActualIndicaciones(record) {
            seleccRecordActualInd = record;
        }

        function deleteActual(grid,record) {
            seleccRecordActual = record;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addDataEliminarMedicamentos"))',
                    params: {
                        MODO: 'DELETE',
                        id: record.data.Secuencia,
                        tipo: 1
                    }
                });
                store.remove(record);
                record = null;
            }
        };
        function deleteActualIndicaciones(grid,record) {
            seleccRecordActualInd = record;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                var secMed = record.data.SecuenciaMedicamento;
                var secInd = record.data.Secuencia;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addEliminar_CCEP0304_MEDICAMENTODETALLEINDI"))',
                    params: {
                        accion: 'DELETE',
                        codigo: record.data.Secuencia,
                        secuenciaMed: secMed,
                        secuenciaIndica: secInd
                    }
                });

                store.remove(record);
                record = null;
            }
        };

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });
        };

        var invalidFields = new Array();

        function updateActual(tipo, grid) {
            var indtipo = 1;
            var ArrayList0 = new Array();
            if (indtipo > 0) {
                setIndicaCambios(true);
                var store = grid.store;
                var fila = 0;



                grid.store.each(function (r) {

                    fila = fila + 1;
                    setValuesGridForm(r, null, 'MEDICINA');
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');

                    var HC_Medicamento = {
                        Secuencia: r.get('Secuencia'),
                        IdUnidadMedida: r.get('IdUnidadMedida'),
                        Dosis: r.get('Dosis'),
                        IdVia: r.get('IdVia'),
                        TipoComida: r.get('TipoComida'),
                        Cantidad: r.get('Cantidad'),
                        Frecuencia: r.get('Frecuencia'),
                        DiasTratamiento: r.get('DiasTratamiento'),
                        Linea: r.get('Linea'),
                        Familia: r.get('Familia'),
                        SubFamilia: r.get('SubFamilia'),
                        LineaDescripcion: r.get('LineaDescripcion'),
                        FamiliaDescripcion: r.get('FamiliaDescripcion'),
                        SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                        /*Comentario: r.get('Comentario'),*/
                        TipoMedicamento: r.get('TipoMedicamento'),
                        Estado: r.get('Estado'),
                        CodigoComponente: r.get('CodigoComponente'),
                        IndicadorEPS: r.get('IndicadorEPS')
                    };
                    ArrayList0.push(HC_Medicamento);
                });



                if (invalidFields.length > 0) {
                    addRecursosValidacion(invalidFields);
                    App.cmdGuardar.setDisabled(false);
                }
            }
            return ArrayList0;
        };


        var count = 0; // a counter for new records
        var countDell = 0; // a counter for new records

        var eventoOnEditar = function (btn) {
            App.cmdGuardar.setDisabled(false);
            App.btnOnEdit.setVisible(false);
            App.btnCancel.setVisible(true);

        };

        //function SelectDobleClik(secuencia, Linea, Familia) {
        function SelectDetalleClik() {
            //alert("fadfadsf");
            EstadoDetalle = 2;
            setIndicaCambios(true);
        };
        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        };
        function SelectDetalleRegistro(Obj) {
            if (EstadoDetalle == 2) {
                alert('Por favor presione Guardar Detalle.');
                return;
            } else if (EstadoDetalle == 0) {
                EstadoDetalle = 1;
            }
            RegActivoMed = Obj.Secuencia;
            App.IdMedica.setValue("Indicaciones Especificas / Generales : " + Obj.SubFamiliaDescripcion);
            var panel2 = App.Panel2;
            panel2.setVisible(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: "",
                    selectionArray2: "",
                    Id: RegActivoMed,
                    Evento: 'ListarDetalle',
                    idgrupo: 0,
                    Version: 'CCEP0304'
                }
            });
        };


        function EnviarIndicaciones() {
            var ArrayList1 = new Array();
            var i = 1;
            var ArrayList2 = new Array();
            var x = 1;
            App.storeExamenesDetalleIndic0.each(function (r) {
              //  alert(r.get('SecuenciaMedicamento'));
                var SS_HC_Indicaciones = {
                    SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                    GrupoMedicamento: 0,
                    Secuencia: r.get('Secuencia'),
                    TipoRegistro: r.get('TipoRegistro'),
                    IdTipoIndicacion: r.get('IdTipoIndicacion'),
                    Descripcion: r.get('Descripcion'),
                    Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO': 'UPDATE')
                };
                ArrayList2.push(SS_HC_Indicaciones);
                x = x + 1;
            });
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    Id: 0,
                    Evento: 'Temp',
                    idgrupo: 0,
                    Version: 'CCEP0304'
                }
            });
            EstadoDetalle =0;
        }
        function PanelOcultar(grid) {
            var panel1 = App.Panel1;
            panel1.setVisible(false);
        };
        function addRecordDetalle(grid) {
            //App.Window1.show();
            //alert(RegActivoMed);
            App.storeExamenesDetalleIndic0.each(function (r) {
                ContDell++
            });
            grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed,Accion:'NUEVO' });
            EstadoDetalle = 2;
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };

        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();

            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }

        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
           App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
               addRecursosValidacion(FieldsInvalidos);
            }
        };

        var addRecursosValidacion = function (FieldsInvalidos) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        };

        var getInvalidFieldsGrid = function (form, invalidFields, fila, tipo) {
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                var validar = true;
                if (!field.isValid() && validar) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: tipo + '; Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });

            return invalidFields;
        };
        var setValuesGridForm = function (r, valor, tipo) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var Secuencia = r.get('Secuencia');
            var IdUnidadMedida = r.get('IdUnidadMedida');
            var Dosis = r.get('Dosis');
            var IdVia = r.get('IdVia');
            var Cantidad = r.get('Cantidad');
            var Frecuencia = r.get('Frecuencia');
            var DiasTratamiento = r.get('DiasTratamiento');
            var Linea = r.get('Linea');
            var Familia = r.get('Familia');
            var SubFamilia = r.get('SubFamilia');
            var LineaDescripcion = r.get('LineaDescripcion');
            var FamiliaDescripcion = r.get('FamiliaDescripcion');
            var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
            var CodigoComponente = r.get('CodigoComponente');

            App.Linea.setValue(Linea == null ? null : Linea);

            App.Familia.setValue(Familia == null ? null : Familia);
            App.Dosis.setValue(Dosis == 0 ? null : Dosis);
            App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
            App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
            App.IdVia.setValue(IdVia == 0 ? null : IdVia);
            App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
            App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
            App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        };
        function eventoCancelar(form) {
            form.getForm().reset();
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
            setIndicaCambios(false);
            App.storeExamenes0.reload();
        };



    </script>
    <script>
        var COLOR_BLUE01 = "#284A89";
        var COLOR_RED01 = "#990000";
        var COLOR_YELLOW02 = "#D9A407";
        var COLOR_GREEN01 = "#177506";
        var COLOR_ORANGE01 = "#E07509";

        var COLOR_ROSADO2 = "#F5A9D0";
        var COLOR_NARANJA = "#FE642E";

        var numerogrupo = 0;
        var grillaActiva = "grillaExamenes0";

        var changeEPS = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };

        var changeModalidad = function (value) {
            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
            var template = '<span style="color:{0};">{1}</span>';
            if (value == 6)
                return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
            if (value == 5)
                return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
            if (value == 19)
                return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
            if (value == 3)
                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
            else
                return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
        };




        var SubFamilia = function (h) {
            var numero2 = grillaActiva.replace('grillaExamenes', '')
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ReturnFindSubFamilia"))',
            params: {
                modo: 'set',
                linea: '',
                familia: '',
                subFamilia: str,
                descripcion: '',
                descripLinea: '',
                descripFamilia: '',
                idWindow: "IdBuscadorMedicamento",
                idgrupo: parseInt(numero2)
            }
        });
    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }
    }










    function EnviarDataServer(grid) {
        if (true) {
            /*if (EstadoDetalle == 2) {
                alert('Por favor presione Guardar Detalle.');
                App.cmdGuardar.setDisabled(false);
                return;
            } else {*/
                /*invalidFields = new Array();
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);*/
                var array01 = updateActualGrupo('MED', ''/*Ext.getCmp(grillaActiva)*/);
                var ArrayList2 = App.Comentario.getValue();
                if (grillaActiva != null) {
                    var numero2 = grillaActiva.replace('grillaExamenes', '');
                }
                else { var numero2 = '0';}

               /* if (invalidFields.length == 0) {*/
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("Save_Medicamentos"))',
                        params: {
                            selectionArray1: array01,
                            selectionArray2: ArrayList2,
                            Id: 0,
                            Evento: 'Server',
                            idgrupo: parseInt(numero2),
                            Version: 'CCEP0304'
                        }
                    });
                    App.Panel2.setVisible(false);
                    App.Panel1.setVisible(false);
               /* }*/
                    App.cmdGuardar.setDisabled(false);

            /*****ocular indicaciones**/
                    for (var i = 1; i < numerogrupo; i++) {

                        /*if (i != numero) {*/
                        Ext.getCmp('Indicaciones' + i).setVisible(false);

                        /* }*/
                    }
            /*******/




            /*}*/
       } else {
            App.cmdGuardar.setDisabled(false);
        }
    };

        var count = 0;
    function InsertRow(valor, estado, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (grillaActiva != null) {
                if (valor.getValue() != '') {
                    App.btnAgregar.setVisible(true);
                    App.btnModificar.setVisible(false);



                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;

                    var grid = Ext.getCmp("" + grillaActiva);

                    var ValorEntero4Var = obj.ValorEntero4;


                    var numero2 = grillaActiva.replace('grillaExamenes', '')


                    App.NumeroStore.setValue(numero2);







                    if (validaDuplicado(obj.CodigoElemento, grid)) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                   // valor.setValue('');
                    setIndicaCambios(true);

                  /*  if (grillaActiva == "grillaExamenes0") {*/



                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);

                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamilia"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: parseInt(numero2)
                            }
                        });

                 /*   }

                    else {
                        var HC_Medicamento = {





                        };



                        Ext.net.DirectMethod.request({
                            url: '(Url.Action("Save_MedicamentoTempGrupo"))',
                            params: {
                                selectionArray1: valor.getValue()

                            }
                        });



                        grid.store.insert(0, {
                            IndicadorEPS: ValorEntero4Var,
                            Secuencia: count++,
                           // TipoReceta: obj,
                            SubFamiliaDescripcion: DescripcionLocalVar
                        });

                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                    }*/


                /*
                var grid = Ext.getCmp("grillaExamenes");
                setIndicaCambios(true);
                grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorCodigo1: valor.getValue() });
                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);*/
                    valor.setValue('');

                    /*if (grillaActiva != "grillaExamenes0") {
                        var panel1 = App.Panel1;
                        panel1.setVisible(false);/

                        Ext.getCmp("btnAgre").el.dom.click();
                    }*/
            }

        }

            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las Tablas.',
                        tipo: 'WARNING'
                    }
                });
                return;
            }

        }
    }

        function EnviarIndicacionesGrupo() {
            var ArrayList1 = new Array();
            var i = 1;
            var ArrayList2 = new Array();
            var x = 1;
            var numero2 = grillaActiva.replace('grillaExamenes', '')

            App.storeExamenesDetalleIndic0.each(function (r) {
                //  alert(r.get('SecuenciaMedicamento'));
                var SS_HC_Indicaciones = {
                    SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                    Secuencia: r.get('Secuencia'),
                    TipoRegistro: r.get('TipoRegistro'),
                    IdTipoIndicacion: r.get('IdTipoIndicacion'),
                    Descripcion: r.get('Descripcion'),
                    Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
                };
                ArrayList2.push(SS_HC_Indicaciones);
                x = x + 1;
            });
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    Id: parseInt(numero2),
                    Evento: 'Temp',
                    idgrupo: parseInt(numero2),
                    Version: 'CCEP0304'
                }
            });
            EstadoDetalle = 0;
        }



        function validaDuplicado(valor, grid) {
            var numero = grillaActiva.replace('grillaExamenes', '')
            var store1 = 'storeExamenes' + numero;
            var store =  Ext.getStore(store1);
            var estados = false;
            var valor1;
            var valor2;
            store.each(function (r) {
                if (trim(r.get('CodigoComponente')) == trim(valor)) estados = true;
            });
            // alert(estados);
            return estados;
        }


    function noDuplicado(valor) {
        var noHayDuplicado = true;

        var numero = grillaActiva.replace('grillaExamenes', '')


        App.NumeroStore.setValue(numero);
        var grilla = grillaActiva;
        var store1 = 'storeExamenes' + numero;

        Ext.getStore(store1).each(function (r) {

            if (trim(r.get('Linea')) == trim(App.Linea.getValue()) &&
                trim(r.get('Familia')) == trim(App.Familia.getValue()) &&
                trim(r.get('SubFamilia')) == trim(App.SubFamilia.getValue())) {
                noHayDuplicado = false;
            }
        });
        if (!noHayDuplicado) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Ya existe registro.',
                        tipo: 'WARNING'
                    }
                });
            }
            // alert(estados);
            return noHayDuplicado;
        }
        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

        function setImpresion(store) {
            App.btnImpresion.setVisible(false);
            var contar = 0;
            if (store != null) {
                store.each(function (r) {
                    contar++;
                });
            }
            if (contar > 0) {

                App.btnImpresion.setVisible(true);
            }
        }



        /*var grillaActiva = null;*/

        function eventoDesactivarSeleccion(button, event) {


            parent.App.East1.collapse();

            var numero = button.id.replace('btnSelActivo', '')

            Ext.getCmp(button.id).hide();

            Ext.getCmp('btnSelDesactivo' + numero).show();
/*
            for (var i = 1; i < numerogrupo + 1; i++) {

                if (i != numero) {
                    Ext.getCmp('btnSelDesactivo' + i).hide();
                    Ext.getCmp('btnSelActivo' + i).show();
                 }
            }

*/
           /* var panel3 = App.Panel3;
            panel3.setVisible(false);*/

            /*****ocular indicaciones**/
            for (var i = 1; i < numerogrupo; i++) {

              /*  if (i != numero) {*/
                    Ext.getCmp('Indicaciones' + i).setVisible(false);

              /*  }*/
            }
            /*******/


            /*grillaActiva = null;*/
        };
        function eventoActivarSeleccion(button, event) {

            var panelServ = Ext.getCmp('East1');

            parent.App.East1.expand();

            var numero = button.id.replace('btnSelDesactivo', '');

            Ext.getCmp(button.id).hide();

            Ext.getCmp('btnSelActivo' + numero).show();

            for (var i = 0; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('btnSelActivo' + i).hide();
                    Ext.getCmp('btnSelDesactivo'+i).show();
                }
            }



            var idGrillaActiva = 'grillaExamenes' + numero;

            grillaActiva = idGrillaActiva;


            if (grillaActiva != 'grillaExamenes0') {
                App.NumeroStore.setValue(numero);
                /*SelectDetalleRegistroGrupo(numero);*/
               /* var panel2 = App.Panel2;
                panel2.setVisible(false);*/

            }
            else {
               /* var panel3 = App.Panel3;
                panel3.setVisible(false);*/
            }
            /*****ocular indicaciones**/
            for (var i = 1; i < numerogrupo; i++) {

                /*if (i != numero) {*/
                    Ext.getCmp('Indicaciones' + i).setVisible(false);

               /* }*/
            }
            /*******/

        };



        function eventoVerIndicaciones(button, event) {

            var numero = button.id.replace('btnVerIndi', '')
            var store1 = 'storeExamenes' + numero;

            if (Ext.getStore(store1).getCount() > 0) {


                /*parent.App.East1.collapse();*/



                /* Ext.getCmp(button.id).hide();

                Ext.getCmp('btnSelDesactivo' + numero).show();

                            for (var i = 1; i < numerogrupo + 1; i++) {

                                if (i != numero) {
                                    Ext.getCmp('btnSelDesactivo' + i).hide();
                                    Ext.getCmp('btnSelActivo' + i).show();
                                 }
                            }
                Indicaciones
                */
                var panel3 = Ext.getCmp('PanelIndicaciones' + numero);
                panel3.setVisible(true);

                for (var i = 1; i < numerogrupo; i++) {

                    if (i != numero) {
                        Ext.getCmp('PanelIndicaciones' + i).setVisible(false);

                    }
                }
            }
            else {

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe ingresar almenos un registro',
                        tipo: 'WARNING'
                    }
                });

            }

        };


        function addRecordDetalleG(grid) {
            //App.Window1.show();
            //alert(RegActivoMed);
            var numero = grillaActiva.replace('grillaExamenes', '')
            var grilla = grillaActiva;
            var store1 = 'storeExamenes' + numero;

            Ext.getStore(store1).each(function (r) {
                ContDell++
            });
            grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
            EstadoDetalle = 2;
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };






        function EnviarIndicacionesG() {
            var ArrayList1 = new Array();
            var i = 1;
            var ArrayList2 = new Array();
            var x = 1;
            var numero = grillaActiva.replace('grillaExamenes', '');
            App.storeExamenesDetalleIndicGrupo.each(function (r) {
                /*var secuenciatmp= null;
                if (numero=='0') {
                    secuenciatmp: r.get('SecuenciaMedicamento');
                }
                else{
                    secuenciatmp: numero;}*/

                //  alert(r.get('SecuenciaMedicamento'));
                var SS_HC_Indicaciones = {

                    SecuenciaMedicamento: numero,
                    GrupoMedicamento: numero,

                    Secuencia: r.get('Secuencia'),
                    TipoRegistro: r.get('TipoRegistro'),
                    IdTipoIndicacion: r.get('IdTipoIndicacion'),
                    Descripcion: r.get('Descripcion'),
                    Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
                };
                ArrayList2.push(SS_HC_Indicaciones);
                x = x + 1;
            });
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    Id: parseInt(numero),
                    Evento: 'Temp',
                    idgrupo: parseInt(numero),
                    Version: 'CCEP0304'
                }
            });
            EstadoDetalle = 0;
        }



















        function addgrupo(NumGrupMed1) {



            if (parseInt(numerogrupo) <= parseInt(NumGrupMed1)) {
                numerogrupo = parseInt(NumGrupMed1) + 1;
            }


            var panelG = new Ext.Panel({
                id: 'Grupo' + numerogrupo,
                title: "GRUPO" + numerogrupo,
                //tbar: tb,
                html: "<div>ghggg</div>",
                border: false,
                hidden: true
            });



            Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
                id: 'Grupo' + numerogrupo,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                //title: "GRUPO " + numerogrupo,
                //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
                border: false,
                hidden:true

            }));
            Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
                id: 'PanelIndicaciones' + numerogrupo,
                /*frame: true,*/
                 layout: {
                    type: 'vbox',
                    align: 'stretch'
                 },/**/
                //title: "GRUPO " + numerogrupo,
                //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
                border: false,
                hidden: true,
                items: [{

                    xtype: 'fieldset',
                    columnWidth: 0.5,
                    title: 'Indicaciones Especificas del Grupo '+ numerogrupo,
                    collapsible: true,
                    defaultType: 'textfield',
                   /* defaults: { anchor: '100%' },*/
                    /*layout: 'anchor',*/
                    items: [
                        {
                            xtype: 'combobox',
                            id: 'cbIdVia' + numerogrupo,
                            fieldLabel: 'Via',
                            readonly: true,
                            typeAhead: false,
                            lazyRender: false,
                            /*selectOnFocus: true,*/
                            forceSelection: true,
                            width: 250,
                            listWidth: 250,
                            lazyInit: true,
                            selectOnFocus: false,
                           /* maintainFlex: true,*/
                            hideMode: 'visibility',
                            triggerAction: "all",
                            editable: true,
                            hasfocus: true,

                            /*triggerAction: "all",*/
                            store: Ext.create('Ext.data.Store', {
                                id: 'storeG2',
                                fields: ['Name', 'ID'],

                                autoLoad: true,
                                proxy: {
                                    type: 'ajax',
                                    url: 'COMBOS2',
                                    extraParams: { valor2: "TIPOVIA" },
                                    reader: {
                                        type: 'json',
                                        root: 'data',
                                        idProperty: 'ID'
                                    }
                                }
                            }

                            ),
                            valueField: 'ID',
                            displayField: 'Name'

                        }, {
                            xtype: 'form',
                            //title: 'Form',
                            layout: 'column',
                            border: false,
                            labelAlign: 'top',
                            defaults: {
                                xtype: 'container',
                                layout: 'form',
                                columnWidth: 0.25
                            },
                            items: [{
                                items: [{
                                    xtype: 'numberfield',
                                    readonly: true, ///modolectura
                                    width: 200,
                                    id: 'numeroFrecuencia' + numerogrupo,
                                    fieldLabel: 'Frecuencia'
                                }]
                            }, {
                                items: [{
                                    xtype: 'combobox',
                                    id: 'cbUTfrecuencia' + numerogrupo,
                                    fieldLabel: 'U. Tiempo',
                                    readonly: true,
                                    typeAhead: false,
                                    lazyRender: false,
                                    /*selectOnFocus: true,*/
                                    forceSelection: true,
                                    width: 200,
                                    listWidth: 200,
                                    lazyInit: true,
                                    selectOnFocus: false,
                                    /* maintainFlex: true,*/
                                    hideMode: 'visibility',
                                    triggerAction: "all",
                                    editable: true,
                                    hasfocus: true,
                                    value: 64,
                                    /*triggerAction: "all",*/
                                    store: Ext.create('Ext.data.Store', {
                                        id: 'storeU',
                                        fields: ['Name', 'ID'],

                                        autoLoad: true,
                                        proxy: {
                                            type: 'ajax',
                                            url: 'COMBOS2',
                                            extraParams: { valor2: "UNITIEMPO" },
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                idProperty: 'ID'
                                            }
                                        }
                                    }

                                    ),
                                    valueField: 'ID',
                                    displayField: 'Name'
                                }]
                            }]
                        },{
                            xtype: 'form',
                            //title: 'Form',
                            layout: 'column',
                            border: false,
                            labelAlign: 'top',
                            defaults: {
                                xtype: 'container',
                                layout: 'form',
                                columnWidth: 0.25
                            },
                            items: [{
                                items: [{
                                    xtype: 'numberfield',
                                    readonly: true, ///modolectura
                                    width: 200,
                                    id: 'numPeriodo' + numerogrupo,
                                    fieldLabel: 'Periodo'
                                }]
                            }, {
                                items: [{
                                    xtype: 'combobox',
                                    id: 'cbUTperiodo' + numerogrupo,
                                    fieldLabel: 'U. Tiempo',
                                    readonly: true,
                                    typeAhead: false,
                                    lazyRender: false,
                                    /*selectOnFocus: true,*/
                                    forceSelection: true,
                                    width: 200,
                                    listWidth: 200,
                                    lazyInit: true,
                                    selectOnFocus: false,
                                    /* maintainFlex: true,*/
                                    hideMode: 'visibility',
                                    triggerAction: "all",
                                    editable: true,
                                    hasfocus: true,
                                    value: 64,
                                    /*triggerAction: "all",*/
                                    store: Ext.create('Ext.data.Store', {
                                        id: 'storeU',
                                        fields: ['Name', 'ID'],

                                        autoLoad: true,
                                        proxy: {
                                            type: 'ajax',
                                            url: 'COMBOS2',
                                            extraParams: { valor2: "UNITIEMPO" },
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                idProperty: 'ID'
                                            }
                                        }
                                    }

                                    ),
                                    valueField: 'ID',
                                    displayField: 'Name'
                                }]
                            }]
                        },

                        {
                        xtype: 'textareafield',
                        grow: true,
                        id: 'txtAindicacion' + numerogrupo,
                        fieldLabel: 'Indicación especifica',
                        width: 450,    /*,

                    anchor: '100%'*/
                    }]

                }]

            }));
            cargargrilla(parseInt(numerogrupo));

            numerogrupo = parseInt(numerogrupo) + 1;

        }


        var cargargrilla = function (numero) {
            //var d = data.length;
            var nomp = 'Grupo' + numero
            var Subpanel = Ext.getCmp(nomp);

            var myButton1 = new Ext.Button({
                id: 'btnSelDesactivo' +numero,
                html: "<b>Bienes/servicios</b>",
                iconCls: 'icon-plugindisabled',
                handler: this.eventoActivarSeleccion
            });
            var myButton2 = new Ext.Button({
                id: 'btnSelActivo' + numero,
                html: "<b>Bienes/servicios</b>",
                iconCls: 'icon-plugingo',
                hidden: true,
                handler: this.eventoDesactivarSeleccion
            });
            var myButton3 = new Ext.Button({
                id: 'btnVerIndi' + numero,
                html: "<b>Indicaciones</b>",
                /*iconCls: 'icon-plugingo',*/
                hidden: false,
                handler: this.eventoVerIndicaciones
            });

            var tb1 = new Ext.Toolbar({
                border: false,
                flex: 1,
                items: [
                    {
                        xtype: 'label',
                        html: "<b><font color='#284A89'> GRUPO "+ numerogrupo+"</font></b>"
                    },{ xtype: 'tbfill' }, { xtype: 'tbseparator' },myButton3, myButton1, myButton2,
                ]
            });

            var tb2 = new Ext.Toolbar({
                border:false,
                items: [{
                    xtype: 'label',
                    html: "<span style = 'color: " + COLOR_BLUE01 + "; '>" + "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>"
                }, { xtype: 'tbspacer', width: 5 },
                {
                    xtype: 'label',
                    html: "<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" + "</span>"
                }, { xtype: 'tbspacer', width: 5 },
                {
                    xtype: 'label',
                    html: "<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" + "</span>"
                }, { xtype: 'tbspacer', width: 5 },
                {
                    xtype: 'label',
                    html: "<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" + "</span>"
                }, { xtype: 'tbspacer', width: 5 },
                {
                    xtype: 'label',
                    html: "<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +  "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" + "</span>"
                }
                ]
            });

            var comboP = new Ext.form.ComboBox({
                xtype: 'combobox',
                itemId: 'cbAVALORPRESENTACION',
                readonly: true,
                /*typeAhead: false,*/
                selectOnFocus: true,
                forceSelection: true,
                /*typeAhead: true,
                triggerAction: 'all',*/
                lazyRender: true,/**/
                lazyInit: true,
                selectOnFocus: false,
                maintainFlex: true,
                hideMode : 'visibility',
                triggerAction: "all",
                editable: true,
                hasfocus: true,
                /*  autoFocus: true,
               autoLoad: true,*/
                /*style: { 'class': 'x-form-field x-form-text x-form-focus x-field-form-focus x-field-default-form-focus' },*/
                /*hideEl: false,*/
                store: Ext.create('Ext.data.Store', {
                    /*id: 'storeG',*/
                    model: Ext.define('storeG', {
                        extend: "Ext.data.Model",
                        idProperty: 'ID',
                        fields: [
                            { name: "Name" },
                            { name: "ID" }
                        ]
                    })

                    ,
                    /*fields: ['Name', 'ID'],*/
                    /*data: {},*/
                    autoLoad: true,
                    proxy: {
                        type: 'ajax',
                        url: 'COMBOS',
                        extraParams: { valor: "UNIDADPRESENTACION" },
                        reader: {
                            type: 'json',
                            root: 'data',
                            idProperty: 'ID'
                        }
                    }
                }

                ),
                valueField: 'ID',
                displayField: 'Name'
            });

            var comboV = new Ext.form.ComboBox({
                    xtype: 'combobox',
                    itemId: 'cbIdVia',
                    readonly: true,
                    typeAhead: false,
                    lazyRender: false,
                    /*selectOnFocus: true,*/
                    forceSelection: true,

                    lazyInit: true,
                    selectOnFocus: false,
                    maintainFlex: true,
                    hideMode: 'visibility',
                    triggerAction: "all",
                    editable: true,
                    hasfocus: true,

                    triggerAction: "all",
                    store: Ext.create('Ext.data.Store', {
                        id: 'storeG2',
                        fields: ['Name', 'ID'],

                        autoLoad: true,
                        proxy: {
                            type: 'ajax',
                            url: 'COMBOS2',
                            extraParams: { valor2: "TIPOVIA" },
                            reader: {
                                type: 'json',
                                root: 'data',
                                idProperty: 'ID'
                            }
                        }
                    }

                    ),
                    valueField: 'ID',
                    displayField: 'Name'

            });



            Ext.util.Format.comboRenderer = function (combo) {
                return function (value) {
                    var record = combo.findRecord(combo.valueField, value);
                    return record ? record.get(combo.displayField) : combo.valueNotFoundText;
                }
            };

            /* var comboRenderer = function (value, p, record) {
                var record = combo.findRecord(combo.valueField, value);
                return record ? record.get(combo.displayField) : value;
            }*/


          /*  Ext.ns("Ext.ux.util");

            Ext.ux.util.ComboRenderer = function (val, metaData) {
                var combo = metaData.column.getEditor();
                if (val && combo && combo.store && combo.displayField) {
                    var index = combo.store.findExact(combo.valueField, val);
                    if (index >= 0) {
                        return combo.store.getAt(index).get(combo.displayField);
                    }
                }
                return val;
            };
            */



            var grid = Ext.create('Ext.grid.Panel', {
                id: 'grillaExamenes' + numero,
                /*renderTo: 'Grupo' + numerogrupo,
                layout: {
                    padding: '10', align: 'stretch'
                },*/
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                stripeRows: true,
                /* forceFit: true,*/
                /*collapsible: true,*/
                enableColumnMove: true,
                enableColumnResize: true,
                enableColumnHide: false,
                /* frame: true,
                renderTo: Ext.getBody(),*/
                store: Ext.create('Ext.data.Store', {
                    id: 'storeExamenes' + numero,
                    model: Ext.define('storeExamenes' + numero,{/*Ext.id(), {*/
                        extend: "Ext.data.Model",
                        idProperty: 'Secuencia',
                        fields: [
                            { name: "Secuencia", type: 'string' },
                            { name: "IdUnidadMedida", type: 'int' },
                            { name: "Dosis", type: 'float' },
                            { name: "IdVia", type: 'int' },
                            { name: "Cantidad", type: 'float' },
                            { name: "Frecuencia", type: 'float' },
                            { name: "DiasTratamiento", type: 'float' },
                            { name: "Linea", type: 'string' },
                            { name: "Familia", type: 'string' },
                            { name: "SubFamilia", type: 'string' },
                            { name: "LineaDescripcion", type: 'string' },
                            { name: "FamiliaDescripcion", type: 'string' },
                            { name: "SubFamiliaDescripcion", type: 'string' },
                            { name: "Estado", type: 'int' },
                            { name: "TipoMedicamento", type: 'int' },
                            { name: "CodigoComponente", type: 'string' },
                            { name: "IndicadorEPS", type: 'int' },
                            { name: "TipoReceta", type: 'int' },
                            { name: "TipoComida", type: 'int' },
                            { name: "UnidadTiempo", type: 'int' },
                            { name: "Periodo", type: 'string' },
                            { name: "Indicacion", type: 'string' }
                        ]
                    }),
                    autoLoad: true,
                    groupField: 'Secuencia',
                    remoteSort: false,
                    ispadingstore: true,
                    remotepaging: true,/**/


                    proxy: {

                        type: 'ajax',
                        url: 'CCEP0304_MEDICAMENTO',
                        extraParams: { tipoRecurso: 1, grupo: parseInt(numero) },
                        reader: {
                            type: "json",

                            root: 'data',
                            totalproperty:'total',
                            idProperty: 'Secuencia'
                        }
                    },
                    listeners: {
                        load: function (ref, records, successful) {
                            if (records.length>0) {
                                Ext.getCmp('numeroFrecuencia' + numero).setValue(records[0].data.Frecuencia);
                                Ext.getCmp('numPeriodo' + numero).setValue(records[0].data.Periodo);
                                Ext.getCmp('cbIdVia' + numero).setValue(records[0].data.IdVia);
                                Ext.getCmp('cbUTfrecuencia' + numero).setValue(records[0].data.UnidadTiempo);
                                Ext.getCmp('cbUTperiodo' + numero).setValue(records[0].data.TipoComida);
                                Ext.getCmp('txtAindicacion' + numero).setValue(records[0].data.Indicacion);
                            } else {
                                /*alert('Image load error.');*/
                            }
                        }

                    }
                }),
                columns: {
                    items: [
                        {
                            dataIndex: "IndicadorEPS",
                            text: "EPS",
                            width: 30,
                            sortable: true,
                            hideable: true,
                            renderer: function (value) {
                                var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
                                var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
                                if (value == 1)
                                    return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
                                else if (value == 2)
                                    return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
                                else if (value == 3)
                                    return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
                                else if (value == 4)
                                    return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
                                else
                                    return Ext.String.format(template, "gray", "No especificada");
                            }
                        },
                        {
                            dataIndex: "Secuencia",
                            text: "Nro",
                            xtype: 'componentcolumn',
                            width: 30,
                            hidden: true,
                            sortable: true,
                            hideable: true,
                            editor: true,
                            component: {
                                xtype: 'textfield',
                                readonly: true
                            }
                        },
                        {
                            dataIndex: "TipoReceta",
                            text: "Modalidad",
                            width: 60,
                            renderer: function (value) {
                                var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
                                var template = '<span style="color:{0};">{1}</span>';
                                if (value == 6)
                                    return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
                                if (value == 5)
                                    return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
                                if (value == 19)
                                    return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
                                if (value == 3)
                                    return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
                                else
                                    return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");

                            }
                        },
                        {
                            dataIndex: "SubFamiliaDescripcion",
                            text: "Medicamentos",
                            xtype: 'componentcolumn',
                            flex: 1,
                            editor: true,
                            component: {
                                xtype: 'textfield',
                                readonly: true,
                                maskRe: /¬/
                            }
                        },
                        {
                            dataIndex: "Dosis",
                            text: "Dosis",
                            xtype: 'componentcolumn',
                            width: 70,
                            editor: true,
                            component: {
                                xtype: 'numberfield',
                                readonly: true ///modolectura
                            }
                        },
                        {
                            dataIndex: "IdUnidadMedida",
                            text: "Und. Medida", /*"Presentación",*/
                            /*xtype: 'componentcolumn',*/
                            width: 100,
                            /*sortable: true,*/
                            /* mode: 'local',*/
                            queryMode: 'local',
                            /*hideable: true,*/
                            editor: comboP,
                            renderer:/* Ext.ux.util.ComboRenderer,*/Ext.util.Format.comboRenderer(comboP)/*comboRenderer*/
                           /*function(IdUnidadMedida){
                                editor: {
                                xtype: 'combobox',
                                /*itemId: 'cbAVALORPRESENTACION',/
                                readonly: true,
                                /*typeAhead: false,/
                                lazyRender: false,
                                selectOnFocus: true,
                                typeAhead: false,*/
                                /*forceSelection: true,*/
                                /*renderTo: Ext.getBody(),*/
                            /*triggerAction: "all",*/


                              /*  store: Ext.create('Ext.data.Store', {
                                    id: 'storeG',
                                    model: Ext.define('storeG',{
                                        extend: "Ext.data.Model",
                                    idProperty: 'ID',
                                    fields: [
                                        { name: "Name" },
                                        { name: "ID" },

                                    ]
                                })*/


                                   /* fields: ['Name', 'ID'],/
                                      ,
                                        autoLoad: true,
                                        proxy: {
                                            type: 'ajax',
                                            url: 'COMBOS',
                                            extraParams: { valor: "UNIDADPRESENTACION" },
                                            reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                            }
                                        }
                                }),
                                valueField: 'ID',
                                displayField: 'Name',

                                }
                            /*}*/


                         /*   ,
                                renderer: function (val) {
                                    index = storeG.findExact('value', val);
                                    if (index != -1) {
                                        rs = storeG.getAt(index).data;
                                        return rs.display;
                                    }
                                }*/

                        },
                        {
                            dataIndex: "IdVia",
                            text: "Via",
                            /*xtype: 'componentcolumn',*/
                            width: 110,
                            /*sortable: true,*/
                            /* mode: 'local',*/
                            queryMode: 'local',
                            hidden: true,
                            editor: comboV,
                            renderer:Ext.util.Format.comboRenderer(comboV)

                           /* dataIndex: "IdVia",
                            text: "Via",
                            xtype: 'componentcolumn',
                            width: 110,
                            sortable: true,
                            hideable: true,
                            editor: true,
                            component: {
                                xtype: 'combobox',
                                itemId: 'cbIdVia',
                                readonly: true,
                                typeAhead: false,
                                lazyRender: false,
                                selectOnFocus: true,
                                forceSelection: true,

                                triggerAction: "all",
                                store: Ext.create('Ext.data.Store', {
                                    id: 'storeG2',
                                    fields: ['Name', 'ID'],

                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: 'COMBOS2',
                                        extraParams: { valor2: "TIPOVIA" },
                                        reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                        }
                                    }
                                }

                                ),
                                valueField: 'ID',
                                displayField: 'Name'
                            }*/
                        },
                        {
                            dataIndex: "Cantidad",
                            text: "Cantidad",
                            xtype: 'componentcolumn',
                            width: 80,
                            editor: true,
                            component: {
                                xtype: 'numberfield',
                                readonly: true ///modolectura
                            }
                        },
                        {
                            dataIndex: "Frecuencia",
                            text: "C/. hr.",
                            xtype: 'componentcolumn',
                            width: 70,
                            hidden: true,
                            editor: true,
                            component: {
                                xtype: 'numberfield',
                                readonly: true ///modolectura
                            }
                        },
                        {
                            dataIndex: "DiasTratamiento",
                            text: "Dias",
                            xtype: 'componentcolumn',
                            width: 70,
                            hidden: true,
                            editor: true,
                            component: {
                                xtype: 'numberfield',
                                readonly: true ///moddolectura
                            }
                        },
                        {
                            dataIndex: "TipoComida",
                            text: "TipoComida",
                            xtype: 'componentcolumn',
                            width: 70,
                            editor: true,
                            hidden: true,
                            component: {
                                xtype: 'numberfield',
                                readonly: true
                            }
                        },
                        {
                            dataIndex: "UnidadTiempo",
                            text: "Und. Tiempo",
                            xtype: 'componentcolumn',
                            width: 30,
                            hidden: true,
                            sortable: true,
                            hideable: true,
                            editor: true,
                            component: {
                                xtype: 'textfield',
                                readonly: true
                            }
                        },
                        {
                            dataIndex: "Periodo",
                            text: "Periodo",
                            xtype: 'componentcolumn',
                            width: 30,
                            hidden: true,
                            sortable: true,
                            hideable: true,
                            editor: true,
                            component: {
                                xtype: 'textfield',
                                readonly: true
                            }
                        },
                        {
                            dataIndex: "Indicacion",
                            text: "Indicaciones Especificas",
                            xtype: 'componentcolumn',
                            width: 30,
                            hidden: true,
                            sortable: true,
                            hideable: true,
                            editor: true,
                            component: {
                                xtype: 'textfield',
                                readonly: true
                            }
                        },
                        {
                            text: "Acción",
                            xtype: 'actioncolumn',
                            width: 70,

                            items: [{
                                xtype: 'button',
                               // disabled: true, ///moddolectura,
                                //commandname: 'Delete',
                               /* id: 'elimina'+numero,*/
                                iconCls:'icon-delete',
                                text: 'Eliminar',
                                html: "<b>Eliminar</b>",
                                tooltip: 'Eliminar',
                                handler: function (grid, rowIndex, colIndex) {


                                    var grid = Ext.getCmp('grillaExamenes' + numero);
                                    var selection = grid.getView().getSelectionModel().getSelection()[0];
                                    var record = grid.getStore().getAt(rowIndex);
                                    seleccRecordActual = record;
                                    if (record != null) {
                                              /*setIndicaCambios(true);*/
                                                var store = grid.store;
                                                Ext.net.DirectMethod.request({
                                                    url: '@(Url.Action("addDataEliminarMedicamentos"))',
                                                    params: {
                                                        MODO: 'DELETE',
                                                        id: record.data.Secuencia,
                                                        tipo: 1
                                                    }

                                     });
                                        store.remove(record);
                                        record = null;

                                    }


            }

                            }]
                        }

                    ]
                },
                selModel: {
                    selType: 'rowmodel',
                    mode   : 'MULTI'
                },viewConfig: {
                    forceFit: true},
                plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                    clicksToEdit: 1
                    })
                ],
                tbar:[tb1],
                //bbar: [tb2 ],
               // enableDragDrop: true,
               // stripeRows: true,
                //autoExpandColumn: 'name',
                width: '100%',
               // height: 325,
                /* region: 'west'*/
                listeners: {
                    mouseover: {
                        fn: function (e) {
                            var grid = Ext.getCmp('grillaExamenes' + numero);
                            var idx = grid.getView().findRowIndex(e.target);
                            var row = this.getStore().getAt(idx);
                            Ext.Msg.alert('ALERT', row.get('company') + ' - change:' + row.get('change'));
                        }
                    }
                }
            });


            Subpanel.add(grid);
            Subpanel.doLayout();

        };



        function SelectDetalleRegistroGrupo(Obj) {
           /* if (EstadoDetalle == 2) {
                alert('Por favor presione Guardar Detalle.');
                return;
            } else if (EstadoDetalle == 0) {
                EstadoDetalle = 1;
            }*/
            RegActivoMed = Obj;

            if (Obj != 0) {
                App.IdMedicaGrupo.setValue("Indicaciones Especificas / Generales : Grupo " + Obj);
                var panel3 = App.Panel3;
                panel3.setVisible(true);
                   Ext.net.DirectMethod.request({
                       url: '@(Url.Action("Save_Medicamentos"))',
                       params: {
                           selectionArray1: "",
                           selectionArray2: "",
                           Id: RegActivoMed,
                           Evento: 'ListarDetalle',
                           idgrupo: RegActivoMed,
                           Version: 'CCEP0304'
                       }
                   });
            }
            else {
                var panel3 = App.Panel3;
                panel3.setVisible(false);
            }
        };



        function deleteActualG(grid, record) {
            seleccRecordActual = record;

            var numero = grillaActiva.replace('grillaExamenes', '');
            var grilla = grillaActiva;
            var store1 = 'storeExamenes' + numero;




            if (record != null) {
                setIndicaCambios(true);
                var store = Ext.getStore(store1);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addDataEliminarMedicamentos"))',
                    params: {
                        MODO: 'DELETE',
                        id: record.data.Secuencia,
                        tipo: 1
                    }
                });
                store.remove(record);
                record = null;
            }
        };

        var invalidFields = new Array();

        function updateActualGrupo(tipo, grid) {
            var indtipo = 1;
            var ArrayList0 = new Array();
            if (indtipo > 0) {
                setIndicaCambios(true);


                var numerotemp = numerogrupo;

                if (numerotemp == 0) { numerotemp=1}

                var numeroX = 0;
                var frecuencia = 0;
                var periodo = 0;
                var via = 0;
                var unitiempo1 = 0;
                var unitiempo2 = 0;
                var txtindicacion = '';


                for (var i = 0; i < numerotemp; i++) {
                    var grid1 = Ext.getCmp('grillaExamenes' + i);
                    var store = grid1.store;
                    var fila = 0;
                    numeroX = numeroX + 1;



                    grid1.store.each(function (r) {
                        ///VALIDACIÓN
                        fila = fila + 1;
                        /*setValuesGridFormGrupo(r, null, 'MEDICINA');
                        invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');*/

                        if (i == 0) {
                            frecuencia = r.get('Frecuencia');
                            periodo = r.get('Periodo');
                            via = r.get('IdVia');
                            unitiempo1 = r.get('UnidadTiempo');
                            unitiempo2 = r.get('TipoComida');
                            txtindicacion = r.get('Indicacion');

                        } else {
                            frecuencia = Ext.getCmp('numeroFrecuencia' + i).getValue();
                            periodo = Ext.getCmp('numPeriodo' + i).getValue();
                            via = Ext.getCmp('cbIdVia' + i).getValue();
                            unitiempo1 = Ext.getCmp('cbUTfrecuencia' + i).getValue();
                            unitiempo2 = Ext.getCmp('cbUTperiodo' + i).getValue();
                            txtindicacion = Ext.getCmp('txtAindicacion' + i).getValue();
                        }



                        var HC_Medicamento = {
                            Secuencia: r.get('Secuencia'),
                            IdUnidadMedida: r.get('IdUnidadMedida'),
                            Dosis: r.get('Dosis'),
                            IdVia: via,
                            TipoComida: unitiempo2,/*r.get('TipoComida'),*/
                            Cantidad: r.get('Cantidad'),
                            Frecuencia: frecuencia,
                            DiasTratamiento: r.get('DiasTratamiento'),
                            Linea: r.get('Linea'),
                            Familia: r.get('Familia'),
                            SubFamilia: r.get('SubFamilia'),
                            LineaDescripcion: r.get('LineaDescripcion'),
                            FamiliaDescripcion: r.get('FamiliaDescripcion'),
                            SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                            GrupoMedicamento: i,
                            /*Comentario: r.get('Comentario'),*/
                            TipoMedicamento: r.get('TipoMedicamento'),
                            Estado: r.get('Estado'),
                            UnidadTiempo: unitiempo2,
                            CodigoComponente: r.get('CodigoComponente'),
                            IndicadorEPS: r.get('IndicadorEPS'),
                            Periodo: periodo,
                            Indicacion: txtindicacion
                        };
                        ArrayList0.push(HC_Medicamento);
                    });

                }

            }
            return ArrayList0;
        };


        function GetGrillaActual() {
            var numero = grillaActiva.replace('grillaExamenes', '')
            return numero

        };
        var setValuesGridFormGrupo = function (r, valor, tipo) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var Secuencia = r.get('Secuencia');
            var IdUnidadMedida = r.get('IdUnidadMedida');
            var Dosis = r.get('Dosis');
            var IdVia = r.get('IdVia');
            var Cantidad = r.get('Cantidad');
            var Frecuencia = r.get('Frecuencia');
            var DiasTratamiento = r.get('DiasTratamiento');
            var Linea = r.get('Linea');
            var Familia = r.get('Familia');
            var SubFamilia = r.get('SubFamilia');
            var LineaDescripcion = r.get('LineaDescripcion');
            var FamiliaDescripcion = r.get('FamiliaDescripcion');
            var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
            var CodigoComponente = r.get('CodigoComponente');

            App.Linea.setValue(Linea == null ? null : Linea);

            App.Familia.setValue(Familia == null ? null : Familia);
            App.Dosis.setValue(Dosis == 0 ? null : Dosis);
            App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
            App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
            App.IdVia.setValue(IdVia == 0 ? null : IdVia);
            App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
            App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
            App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        };


        function recargarGrilla() {

            var numero = grillaActiva.replace('grillaExamenes', '');
            /*var grilla = grillaActiva;*/
            var store1 = 'storeExamenes' + numero;
            /*storeG2*/
            var grid1 = Ext.getCmp('grillaExamenes' + numero);
            var store = grid1.store;

            if (numero == 0) {
                grid1.store.reload();

            } else {



                grid1.getView().refresh();
            }




           /* App.storeG.reload();
            App.storeG2.reload();*/


        }


        function getActualizar(grid) {
            var indtipo = 1;
            App.Panel1.setVisible(true);
            App.btnAgregar.setVisible(false);
            App.btnModificar.setVisible(true);
            seleccRecordActual = grid;
            setIndicaCambios(true);
            invalidFields = setValuesGridForm(seleccRecordActual, null, 'MEDICINA');
        }

        var setValuesGridForm = function (r, valor, tipo) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var Secuencia = r.get('Secuencia');
            var IdUnidadMedida = r.get('IdUnidadMedida');
            var Dosis = r.get('Dosis');
            var IdVia = r.get('IdVia');
            var Cantidad = r.get('Cantidad');
            var Frecuencia = r.get('Frecuencia');
            var DiasTratamiento = r.get('DiasTratamiento');
            var Linea = r.get('Linea');
            var Familia = r.get('Familia');
            var SubFamilia = r.get('SubFamilia');
            var LineaDescripcion = r.get('LineaDescripcion');
            var FamiliaDescripcion = r.get('FamiliaDescripcion');
            var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
            var MedicamentoDescripcion = r.get('MedicamentoDescripcion');
            var CodigoComponente = r.get('CodigoComponente');
            var TipoReceta = r.get('TipoReceta');
            var Periodo = r.get('Periodo');
            var UnidadTiempo = r.get('UnidadTiempo');
            var Indicacion = r.get('Indicacion');
            var Medicamento = r.get('Medicamento');
            var IndicadorEPS = r.get('IndicadorEPS');
            var Presentacion = r.get('Presentacion');
            var TipoComida = r.get('TipoComida');
            var Accion = r.get('Accion');

            //alert(r.getValue());

            App.Linea.setValue(Linea == null ? null : Linea);
            App.LineaDescripcion.setValue(LineaDescripcion == null ? null : LineaDescripcion);

            App.Familia.setValue(Familia == null ? null : Familia);
            App.FamiliaDescripcion.setValue(FamiliaDescripcion == null ? null : FamiliaDescripcion);

            App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
            App.SubFamiliaDescripcion.setValue(SubFamiliaDescripcion == null ? null : SubFamiliaDescripcion);

            App.CodigoComponente.setValue(CodigoComponente == null ? null : CodigoComponente);
            App.MedicamentoDescripcion.setValue(MedicamentoDescripcion == null ? null : MedicamentoDescripcion);
            App.Medicamento.setValue(Medicamento == null ? null : Medicamento);

            App.Accion.setValue(Accion == null ? null : Accion);
            App.TipoComida.setValue(TipoComida == null ? null : TipoComida);
            App.IndicadorEPS.setValue(IndicadorEPS == null ? null : IndicadorEPS);
            App.Secuencia.setValue(Secuencia == null ? null : Secuencia);

            App.Presentacion.setValue(Presentacion == null ? null : Presentacion);
            App.cbIdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
            App.Dosis.setValue(Dosis == 0 ? null : Dosis);
            App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
            App.IdVia.setValue(IdVia == 0 ? null : IdVia);
            App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
            App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
            App.UnidadTiempo.setValue(UnidadTiempo == 0 ? null : UnidadTiempo);
            App.Periodo.setValue(Periodo == null ? null : Periodo);
            App.Indicacion.setValue(Indicacion == null ? null : Indicacion);
        };

        function getValidarDatos(valor) {
            // Revisar, agregar componente, Jordan
            varIsValidForm = true;
            beforeSaveNew(App.formactual, 'Agregar'); // Valida Cabecera
            if (varIsValidForm) {

            }

            return varIsValidForm;
        }
        var beforeSaveNew = function (form, Accion) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);

            var FieldsInvalidos = getInvalidFieldsNew(form, Accion);

            if (FieldsInvalidos.length > 0) {
                addRecursosValidacion(FieldsInvalidos);
            }
        };
        var varIsValidForm = true;
        var getInvalidFieldsNew = function (form, Accion) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();

            var varValidar = false;
            fields.filterBy(function (field) {

                if (Accion == 'Agregar') {  // ò Modificar
                    varValidar = true;
                    if (field.name == 'Indicacion') {
                        //varValidar = true;
                    }

                    if (field.name == 'Comentario') {
                        varValidar = false;
                    }


                } else if (Accion == 'Enviar') {

                    if (field.name == 'Comentario') {
                        varValidar = true;
                    }

                }

                if (!field.isValid() && varValidar) {
                    // alert('if ' + field.name);
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    varIsValidForm = false;
                } else {
                    //alert('else ' + field.name);
                }
            });
            return invalidFields;
        };

    </script>
}
@section cuerpo
{
    @(Html.X().Viewport()
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                    l.AfterRender.Handler = "eventoAfterRenderForm('" + NumGrupMed1 + "');";
                })
               .Items(X.Toolbar().ID("TBImprimir").Hidden(indicaModoLectura2).Items(X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                //.Hidden(!visibleImpresion)
                                .ID("btnImpresion2")
                                .Handler("eventoVisorReporte('');")),

                                X.FieldSet().Collapsible(true).Hidden(true)
                                 .ColumnWidth(0.4)
                                 .Title("<b>Leyenda</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 }).Items(

                                   Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 10 00")
                                    .Items(
                                        X.Label().Html("<div  style='padding-right:10px;Color:#FE642E;'> <font> Modalidad: </font></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_YELLOW02 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >CPM</small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_GREEN01 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >PPS</small></div>"),
                                        X.ToolbarSeparator(),
                                         X.ToolbarSpacer(15),

                                        X.Label().Html("<div  style='padding-right:10px;Color:#FE642E;'> <font> EPS: </font></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_RED01 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >No Coberturado </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_GREEN01 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Coberturado </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_ORANGE01 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Auditoría </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_YELLOW02 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Carta de Garantía </small></div>")



                                    )

                                 ),

                                X.FormPanel()
                                .ID("Panel1")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                        X.FieldSet()
                                         .ColumnWidth(0.4)
                                         .Title("<b>Información Medicamento</b>")
                                         .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })

                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                              X.Container().Layout(LayoutType.HBox)
                                              .Defaults(d =>
                                              {
                                                  d.Add(new Parameter("LabelWidth", "70"));
                                              })
                                              .Items(
                                                X.NumberFieldFor(c => c.IndicadorEPS).FieldLabel("EPS").Hidden(true),
                                                X.TextFieldFor(c => c.Secuencia).FieldLabel("Secuencia").Hidden(true),
                                                X.TextFieldFor(c => c.Accion).FieldLabel("Accion").Hidden(true)
                                              ),
                                              X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                //.MarginSpec("0 0 10")
                                                        .Items(
                                                            X.TextFieldFor(c => c.Linea).Hidden(true)
                                                             .FieldLabel("Linea").ReadOnly(true)
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.LineaDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                              X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                              .Defaults(d =>
                                                              {
                                                                  d.Add(new Parameter("LabelWidth", "70"));
                                                              })
                                                              .Items(
                                                              X.TextFieldFor(c => c.Familia).ReadOnly(true).Hidden(true)
                                                             .FieldLabel("Familia")
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.FamiliaDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                            X.TextFieldFor(c => c.SubFamilia).ReadOnly(true)
                                                             .FieldLabel("DCI")
                                                             .Listeners(ls =>
                                                                    ls.Change.Handler = "App.cbIdUnidadMedida.clearValue(); App.cbIdUnidadMedida.getStore().load()")
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.CodigoComponente).ReadOnly(true).Hidden(true),
                                                            X.TextFieldFor(c => c.SubFamiliaDescripcion).ReadOnly(true).Flex(1)
                //.Listeners(l => { l.Change.Handler = "SubFamilia(this);"; })
                                                              .FieldLabel("")

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                            X.TextFieldFor(c => c.Medicamento).ReadOnly(true)
                                                             .FieldLabel("Med/DCI")
                                                              .Width(160),
                                                            X.TextFieldFor(c => c.MedicamentoDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1)

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                /*X.NumberFieldFor(c => c.IdUnidadMedida).Hidden(true)
                  .FieldLabel(""),*/
                                                              X.Component(),

                                                            X.ComboBoxFor(c => c.IdUnidadMedida)
                                                                    .ID("cbIdUnidadMedida")
                                                                    .FieldLabel("U. Medida")
                                                                    .TypeAhead(true)
                                                                    .QueryMode(DataLoadMode.Local)
                                                                    .ForceSelection(true)
                                                                    .TriggerAction(TriggerAction.All)
                                                                    .DisplayField("name")
                                                                    .ValueField("codigo")
                                                                    .EmptyText("Loading...")
                                                                    .ValueNotFoundText("Loading...")
                                                                    .Listeners(l =>
                                                                            l.Select.Handler = "App.IdUnidadMedida.setValue(App.cbIdUnidadMedida.getValue());")
                                                                    .Store(Html.X().Store()
                                                                        .AutoLoad(false)
                                                                        .Model(Html.X().Model()
                                                                            .IDProperty("Codigo")
                                                                            .Fields(
                                                                                new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                                                                                new ModelField("name", ModelFieldType.String) { Mapping = "Name" }
                                                                            )
                                                                        )
                                                                        .Proxy(Html.X().AjaxProxy()
                                                                            .Url(Url.Action("UnidadMedidas"))
                                                                            .Reader(Html.X().JsonReader().Root("data"))
                                                                        )
                                                                        .Parameters(ps =>
                                                                             ps.Add(new
                                                                             {
                                                                                 Linea = JRawValue.From("App.Linea.getValue()"),
                                                                                 Familia = JRawValue.From("App.Familia.getValue()"),
                                                                                 SubFamilia = JRawValue.From("App.SubFamilia.getValue()"),
                                                                                 Accion = "MEDUNIDAMED"
                                                                             })
                                                                        )


                //Html.X().ComboBoxFor(c => c.IdUnidadMedida)
                //            .ID("cbIdUnidadMedida")
                //            .FieldLabel("U.Medida")
                //            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericos("UNIDADPRESENTACION", "").Select(d => new ListItem(d.Name, d.ID)))
                //            .SimpleSubmit(true)
                                                            ),
                                                             X.Component().Width(10),
                                                            X.NumberFieldFor(c => c.Dosis)
                                                             .MinValue(0)
                                                             .FieldLabel("Dosis"),
                                                             X.Component().Width(10),
                                     X.TextFieldFor(c => c.Presentacion).FieldLabel("Presentacion").Flex(1).Hidden(true)
                                                             ),
                                                X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                //.MarginSpec("0 0 10")
                                                        .Items(
                                                        X.Component(),
                                                            X.NumberFieldFor(c => c.Cantidad)
                                                             .MinValue(1)
                                                             .FieldLabel("Cantidad"),

                //.Width(100),

                //.Width(120),
                                                            X.Component().Width(10),
                                                            X.NumberFieldFor(c => c.Frecuencia)
                                                             .MinValue(0)
                                                             .FieldLabel("Frecuencia"),
                                                              X.Component().Width(10),
                                    Html.X().ComboBoxFor(c => c.UnidadTiempo)
                                        .FieldLabel("U. Tiempo")
                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))
                                        .SimpleSubmit(true)
                                        .Editable(false)
                                                            ),
                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                //.MarginSpec("0 0 10")
                                                        .Items(


                                                            Html.X().ComboBoxFor(c => c.IdVia)
                                                                        .FieldLabel("Vía")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true).Editable(false),

                                                             //.Width(120),
                                                             X.Component().Width(10),
                                        X.NumberFieldFor(c => c.Periodo).FieldLabel("Periodo").MinValue(1),
                                        X.Component().Width(10),
                                    Html.X().ComboBoxFor(c => c.TipoComida).FieldLabel("U.Tiempo").SimpleSubmit(true).Editable(false)
                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))
                                                            ,
                                                            X.NumberFieldFor(c => c.DiasTratamiento).Hidden(true)
                                                              .MinValue(0)
                                                             .FieldLabel("Tratamiento"),
                                                             X.Label(" Días").Hidden(true)
                //.Width(150)
                                                            ).PaddingSpec("6"),
                                                            X.Component().Width(10),
                                                            X.TextAreaFor(c => c.Indicacion).FieldLabel("Indicaciones Especificas").ReadOnly(indicaModoLectura).PaddingSpec("6"),
                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                //.MarginSpec("0 0 10")
                                                        .Items(


                                                             X.Button()
                                                                .Text("Agregar")
                                                                .ID("btnAgregar")
                //.DirectClickAction("Save_MedicamentoTemp"),
                                                                .DirectEvents(directEvents =>
                                                               {
                                                                   directEvents.Click.Url = "Save_MedicamentoTemp";
                                                                   directEvents.Click.Before = "return noDuplicado('DATA'); ";
                                                                   //directEvents.Click.Success = "alert('s');";
                                                                   directEvents.Click.EventMask.ShowMask = true;
                                                                   directEvents.Click.EventMask.Msg = "Loading...";
                                                                   directEvents.Click.ExtraParams.Add(new
                                                                {
                                                                    id = JRawValue.From("App.NumeroStore.getValue()")
                                                                });
                                                                   directEvents.Click.After = "recargarGrilla();";
                                                               }),
                                                               X.Button()
                                    .Text("Modificar").ID("btnModificar")
                                    .DirectEvents(directEvents =>
                                    {
                                        //directEvents.Click.After
                                        directEvents.Click.Url = "Editar_MedicamentoTemp_CCEP0304";
                                        directEvents.Click.Before = "return getValidarDatos('DATA'); ";
                                        directEvents.Click.EventMask.ShowMask = true;
                                        directEvents.Click.EventMask.Msg = "Loading Modificar...";
                                    }),
                /*
             X.Component().Width(10),
              X.Button()
                .Text("....")
               .Handler("addPanel(this.up('grid'));"),*/
                                                            X.Component().Width(10),
                                                              X.Button()
                                                                .Text("Ocultar")
                                                                .Handler("PanelOcultar(this.up('grid'));")
                                                            )
                                            )
                                ),

                            X.FormPanel()
                                .ID("Panel0")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                //.Hidden(true)
                                .Items(




                                X.TextField().ID("NumeroStore").ReadOnly(true).Hidden(true),
                                 X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("<b>Receta Individual</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                             X.TextField()
                                                 .ID("RecepcionaRecurso")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                            X.GridPanel()
                                                 .ID("grillaExamenes0")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes0")
                //.Listeners(l =>{l.BeforeLoad.Handler = "setChangedMed(0);";})
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                .Fields(new ModelField("Secuencia", ModelFieldType.String),

                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                //
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                //
                                                                           new ModelField("TipoReceta", ModelFieldType.Int),
                                                                           new ModelField("Periodo", ModelFieldType.String),
                                                                           new ModelField("MedicamentoDescripcion", ModelFieldType.String),
                                                                           new ModelField("Medicamento", ModelFieldType.String),
                                                                           new ModelField("UnidadTiempo", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String),
                                                                           new ModelField("UsuarioAuditoria", ModelFieldType.String),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int)

                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Listeners(l => { l.Load.Handler = "setImpresion(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0304_MEDICAMENTO")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia")))))
                                                         .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0
                                                                })
                                                            )

                                                 )
                                                 .ColumnModel(
                                                    Html.X().Column().Text("EPS").DataIndex("IndicadorEPS")
                                                    .Width(30).Renderer("changeEPS"),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),
                                                              Html.X().Column().Text("Modalidad").DataIndex("TipoReceta")
                                                    .Width(60).Renderer("changeModalidad")

                                                             ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("DCI")
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("MedicamentoDescripcion")
                                                         .Text("Medicamento").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("UsuarioAuditoria")
                                                         .Text("Indicación").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentacion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoComida")
                                                         .Text("TipoComida")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("IdUnidadMedida")
                                                                                .Editor(true)
                                                                                .Hidden(true)
                                                                                .Text("Und. Medida")
                                                                                .Component(
                                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                      Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("UnidadTiempo")
                                                         .Text("Und.Tiempo")
                                                         .Component(
                                                            Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                             .Editor(true).Hidden(true)
                                                             .DataIndex("Periodo")
                                                             .Text("Periodo")
                                                             .Component(
                                                                       Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Via")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("Cantidad")
                                                                                .Editor(true).Hidden(true)
                                                                                 .Text("Cantidad")
                                                                                 .Component(
                                                                                      Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                     ),
                                                    Html.X().ComponentColumn().DataIndex("DiasTratamiento")
                                                         .Editor(true).Hidden(true)
                                                         .Text("Dias")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Indicaciones Especificas")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                        Html.X().CommandColumn()
                                                        .Text("Acción")
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(this.up('grid'),record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActual(record);")
                                                .Listeners(l => l.CellDblClick.Handler = "getActualizar(record);")
                /* .Listeners(l => l.CellDblClick.Handler = "SelectDetalleRegistro(record.data);")*/
                // .Listeners(l => l.CellClick.Handler = "SelectOnClik(record.data.Secuencia);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                  Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                                , X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button().ID("btnSelDesactivo0")
                                                                         .Html("<b>Bienes/servicios   </b>")
                                                                         .Icon(Icon.PluginDisabled)
                                                                         .Handler("eventoActivarSeleccion(App.btnSelDesactivo0)"),
                                                                         Html.X().Button().ID("btnSelActivo0")
                                                                         .Html("<b>Bienes/servicios</b>")
                                                                         .Icon(Icon.PluginGo).Hidden(true)
                                                                         .Handler("eventoDesactivarSeleccion(App.btnSelActivo0)")
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActual(this.up('grid'));")*/
                                                             )
                                                   )
                                                   .BottomBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                                "</span>")
                                                             )

                                                             .Items(

                                                             )
                                                   )


                                        )
                                ),

                           X.FormPanel()
                                .ID("Panel2")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                    X.FieldSet()
                                         .ColumnWidth(0.4)
                // .Title("Indicaciones Especificas / Generales")
                                          .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })
                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                                       X.TextField()
                                                        .ID("IdMedica")
                                                        .ReadOnly(true),
                                                       X.GridPanel()
                                                         .ID("grillaExamenesDetalleIndic")
                                                         .Border(false)
                                                         .Store(
                                                             Html.X().Store()
                                                             .ID("storeExamenesDetalleIndic0")
                                                             .Model(
                                                              Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                    .Fields(new ModelField("Secuencia", ModelFieldType.Int),
                                                                           new ModelField("IdTipoIndicacion", ModelFieldType.Int),
                                                                           new ModelField("Descripcion", ModelFieldType.String),
                                                                           new ModelField("TipoRegistro", ModelFieldType.String),
                                                                           new ModelField("SecuenciaMedicamento", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)
                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0304_MEDICAMENTODETALLEINDI")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia")))))
                                                 )
                                                 .ColumnModel(
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro")
                                                          .Width(30)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("TipoRegistro")
                                                         .Text("Tipo Registro")
                                                         .Width(150)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbTipoRegistros")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("TIPOREGMED").Select(d => new ListItem(d.Name, d.Codigo)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls =>
                                                                           ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdTipoIndicacion")
                                                         .Text("Tipo Indicación")
                                                         .Width(200)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbIdTipoIndicacions")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("INDIRECETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls => ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Descripcion")
                                                         .Text("Descripción")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                              .Listeners(ls => ls.Focus.Handler = "SelectDetalleClik();")
                                                             )
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualIndicaciones(this.up('grid'),record);")


                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActualIndicaciones(record);")
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                X.ToolbarSeparator(),

                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Agregar")
                                                                     .Icon(Icon.Add)
                                                                     .Handler("addRecordDetalle(this.up('grid'));"),
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActualIndicaciones(this.up('grid'));"),*/
                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Guardar Detalle")
                                                                     .Icon(Icon.ApplicationFormAdd)
                                                                     .Handler("EnviarIndicaciones(this.up('grid'));")
                                                             )
                                                   )

                                             )
                                 )
                ////////ADD PARA MSGS/////
                                ,
                                 X.FormPanel()
                                .ID("PanelGrupo")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false).Hidden(true)
                                .Items(
                                    X.FieldSet().Collapsible(true).ID("FSGrupos")
                                 .ColumnWidth(0.4)
                                 .Title("<b>Receta Grupal</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(


                                     X.Toolbar()
                                        .Items(X.ToolbarFill(),
                                                X.Button()
                                                .Text("Crear Grupo")
                                                .Icon(Icon.Add)
                                                .ID("btnCrearGru")
                                                .Handler("addgrupo(" + NumGrupMed1 + ");")/*,
                                                X.Button()
                                                .Text("Editar Grupo")
                                                .Icon(Icon.Add)
                                                .ID("btnEditarGru")
                                                .Handler("")*/
                                                )

                                     )
                                )

                                ,
                ////////indicaciones generales///
                                 X.FormPanel()
                                .ID("Panel999")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(false)
                                .Items(X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 05 0").PaddingSpec("6")
                                        .Items(
                                           X.TextAreaFor(c => c.Comentario).FieldLabel("Especificaciones Generales")
                //.ID("IdComentario")
                                            .LabelAlign(LabelAlign.Top)
                                            .PaddingSpec("4")
                                            .Height(100).Flex(1)
                //.InputWidth(300)
                                         )),



                               //////////////////////////////indicaciones grupo//////////////////


                                 X.FormPanel()
                                .ID("Panel3")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                    X.FieldSet()
                                         .ColumnWidth(0.4)
                // .Title("Indicaciones Especificas / Generales")
                                          .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })
                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                                       X.TextField()
                                                        .ID("IdMedicaGrupo")
                                                        .ReadOnly(true),
                                                       X.GridPanel()
                                                         .ID("grillaExamenesDetalleIndicGrupo")
                                                         .Border(false)
                                                         .Store(
                                                             Html.X().Store()
                                                             .ID("storeExamenesDetalleIndicGrupo")
                                                             .Model(
                                                              Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                    .Fields(new ModelField("Secuencia", ModelFieldType.Int),
                                                                           new ModelField("IdTipoIndicacion", ModelFieldType.Int),
                                                                           new ModelField("Descripcion", ModelFieldType.String),
                                                                           new ModelField("TipoRegistro", ModelFieldType.String),
                                                                           new ModelField("SecuenciaMedicamento", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)
                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0304_MEDICAMENTODETALLEGRUPO")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia"))))
                                                                                           )
                                                          .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    grupo = JRawValue.From("App.NumeroStore.getValue()")
                                                                })
                                                       )
                                                 )
                                                 .ColumnModel(
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro")
                                                          .Width(30)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("TipoRegistro")
                                                         .Text("Tipo Registro")
                                                         .Width(150)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbTipoRegistrosGrupo")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("TIPOREGMED").Select(d => new ListItem(d.Name, d.Codigo)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls =>
                                                                           ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdTipoIndicacion")
                                                         .Text("Tipo Indicación")
                                                         .Width(200)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbIdTipoIndicacionsGrupo")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("INDIRECETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls => ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Descripcion")
                                                         .Text("Descripción")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                              .Listeners(ls => ls.Focus.Handler = "SelectDetalleClik();")
                                                             )
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualIndicaciones(this.up('grid'),record);")


                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActualIndicaciones(record);")
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                X.ToolbarSeparator(),

                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Agregar")
                                                                     .Icon(Icon.Add)
                                                                     .Handler("addRecordDetalleG(this.up('grid'));"),
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActualIndicaciones(this.up('grid'));"),*/
                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Guardar Detalle")
                                                                     .Icon(Icon.ApplicationFormAdd)
                                                                     .Handler("EnviarIndicacionesG(this.up('grid'));")
                                                             )
                                                   )

                                             )
                                 )



















                                /////////////////////////fin indicaciones grupo/////////////////////////////


                ////////ADD PARA MSGS/////
                                ,

                                X.TextArea().ID("taAlerts")
                                .Border(false)
                                .StyleSpec("background:white;border:1px solid gray;")
                                .FieldStyle("color: red")
                                .Hidden(true)
                                .ReadOnly(true)
                //////////////////////
                ///////////////////////////////////////////////////////////////////



                               ///////////////////////////////////////////////////////////////////
                     )
                    .TopBar(X.Toolbar().Hidden(indicaModoLectura).Items(
                            X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),

                            X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")

                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar")
                                .Handler("App.cmdGuardar.setDisabled(true); EnviarDataServer(this.up('grid'));"),
                //.OnClientClick("var form = this.up('form'); form.getForm().updateRecord(form.down('grid').getSelectionModel().getLastSelected());"),
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel")
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));")
                //.Handler("alert('TEST'+" + SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.CONCEPTO+ ");")
                //.OnClientClick("this.up('form').getForm().reset();")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")
                        ))
                /*.Listeners(l => l.FieldChange
                    .Handler = "setIndicaCambios(true);"
                )*/
                );
        }
        )
    )
}

