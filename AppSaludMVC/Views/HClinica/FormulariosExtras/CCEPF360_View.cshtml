@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_SolicitudTransfusional_2_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));


    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var COLOR_BLUE01 = "#284A89";
    var DESC_ADD = "Diagnosticos";

}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>

    function validateDecimal(valor) {
        var RE = /^\d*\.?\d*$/;
        if (RE.test(valor)) {
            return true;
        } else {
            return false;
        }
    }
    function eventoRenderForm() {




        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);
        var v = '@isNuevo';
        if (v.toUpperCase() == 'TRUE') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }

    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });


        var val = '@visibleImpresion';
        var vis = '@isVista';
        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);
                    // parent.App.btnContEpisodio_HCE.setDisabled(true);//A TODOS

                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);
                    //parent.App.btnContEpisodio_HCE.setDisabled(false);//A TODOS
                }
            }
        }
    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

   var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }

        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };

    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };
    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    }

    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };


        function eventoActivarSeleccion(button, event) {

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();

            var numero = button.id.replace('IdbtnDesactivo', '');

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo' + numero).show();

            for (var i = 0; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('IdbtnActivo' + i).hide();
                    Ext.getCmp('IdbtnDesactivo' + i).show();
                }
            }
        };

        function eventoDesactivarSeleccion(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo' + numero).show();

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }



        function validaDuplicado(valor) {
            var estados = false;
            var valor1
            var valor2
            App.storeExamenes.each(function (r) {
                if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
            });

            return estados;
        }
        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");

        }


        function EnviarData(grid) {

            beforeSave(App.formactual);
            if (App.formactual.getForm().isValid()) {
                var ArrayList0 = new Array();

           // }

            //if (true) {

            //    App.taAlerts.setVisible(false);
            //    App.taAlerts.setValue(null);
            //    App.conthbIndicaError.setVisible(false);
            //    source = App.grillaExamenes;
            //    var store = App.storeExamenes;
            //    var status = 0;
            //    var i = 0;
            //    var valores = "";
            //    var ArrayList0 = new Array();
            //    var records = App.grillaExamenes.getSelectionModel().getSelection();
            //    var invalidFields = new Array();
            //    var fila = 0;

            //    App.storeExamenes.each(function (r) {

            //        fila = fila + 1;
            //        ///VALIDACIÓN
            //        setValuesGridForm(r, null);
            //        invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

            //        var MA_MiscelaneosDetalle = {
            //            CodigoElemento: r.get('CodigoElemento'),
            //            ValorCodigo1: r.get('ValorCodigo1'),
            //            ValorCodigo2: r.get('ValorCodigo2'),
            //            ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')

            //        };
            //        ArrayList0.push(MA_MiscelaneosDetalle);
            //        i = i + 1;
            //    });
            //    if (invalidFields.length > 0) {

            //        addRecursosValidacion(invalidFields);
            //        App.cmdGuardar.setDisabled(false);
            //    } else {

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEPF301b_Save_SolucitudTransfusional"))',
                        params: {
                            selectionArray1: ArrayList0,
                            text:"0"

                        }
                    });
                parent.App.txtRecargarX.setValue('RELOAD');
                return true;
                //}
            } else {
                App.cmdGuardar.setDisabled(false);
                return false;
            }

        }

        var getInvalidFieldsGrid = function (form, invalidFields, fila) {
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });
            return invalidFields;
        };

        var addRecursosValidacion = function (FieldsInvalidos) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        };


        var setValuesGridForm = function (r, valor) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var ValorCodigo1 = r.get('ValorCodigo1');
            var CodigoElemento = r.get('CodigoElemento');


            if (ValorCodigo1 == null || ValorCodigo1 == '') {
                //App.IdDiagnostico.setValue(null);
            }

        };


        var eventoRadio = function (rd1, pregunta, valor) {
            var radioAll = rd1.getValue();

            if (radioAll) {
                if (pregunta == 'R3') {
                    if (valor == 'S') {
                        App.EmbarazosPreviosEspecificar.setDisabled(false);

                    } else {
                        App.EmbarazosPreviosEspecificar.setDisabled(true);
                        App.EmbarazosPreviosEspecificar.setValue("");
                    };
                }

                if (pregunta == 'R4') {
                    if (valor == 'S') {
                        App.AbortosEspecificar.setDisabled(false);

                    } else {
                        App.AbortosEspecificar.setDisabled(true);
                        App.AbortosEspecificar.setValue("");
                    };
                }

            }

        };

        function seleccionadorMedico() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedico',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };

        function seleccionadorMedicoServicio() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoServicio',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };
        function seleccionadorMedicoPersonal() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoPersonal',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };
        function seleccionadorPersonal() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionPersonal',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


          var keyCode
        function ReplaceCaracterEspec(e) {

            /*Capturar tecla pulsada*/
            if (window.event) keyCode = window.event.keyCode;
            else if (e) keyCode = e.which;
            var prueba = keyCode;
            // alert(keyCode);
            //
            if (prueba == 60) {
                var textactual = e.getValue();
                e.value = e.setValue(textactual + " ");
            }
            var texto = e.getValue();
            var vacio = "";
            var cadena = vacio + e.getValue();
            var recortado = cadena.substr(-1, 1);
            // alert(recortado + ' antes');
            if (recortado == "<" || recortado == ">") {
                //  alert(recortado + ' despues');
                e.value = e.setValue(texto + " ");
            }
        }



        var eventoCheck = function (ch1, pregunta, valor) {
            var CheckAll = ch1.getValue();
            if (CheckAll) {

                if (pregunta == 'C1') {
                    App.TxtEspecificar11.setDisabled(false);
                }
                if (pregunta == 'C2') {
                    App.TxtEspecificar12.setDisabled(false);
                }
                if (pregunta == 'C3') {
                    App.TxtEspecificar13.setDisabled(false);
                }
                if (pregunta == 'C4') {
                    App.TxtEspecificar14.setDisabled(false);
                }
                if (pregunta == 'C5') {
                    App.TxtEspecificar15.setDisabled(false);
                }
                if (pregunta == 'C6') {
                    App.TxtEspecificar16.setDisabled(false);
                }
                if (pregunta == 'C7') {
                    App.TxtEspecificar17.setDisabled(false);
                }
                if (pregunta == 'C8') {
                    App.TxtEspecificar18.setDisabled(false);
                }
                if (pregunta == 'C9') {
                    App.TxtEspecificar19.setDisabled(false);
                }
                if (pregunta == 'C10') {
                    App.TxtEspecificar20.setDisabled(false);
                    App.TxtEspecificar200.setDisabled(false);
                }

            }
            else {
                if (pregunta == 'C1') {
                    App.TxtEspecificar11.setDisabled(true);
                    App.TxtEspecificar11.setValue(null);
                }
                if (pregunta == 'C2') {
                    App.TxtEspecificar12.setDisabled(true);
                    App.TxtEspecificar12.setValue(null);
                }
                if (pregunta == 'C3') {
                    App.TxtEspecificar13.setDisabled(true);
                    App.TxtEspecificar13.setValue(null);
                }
                if (pregunta == 'C4') {
                    App.TxtEspecificar14.setDisabled(true);
                    App.TxtEspecificar14.setValue(null);
                }
                if (pregunta == 'C5') {
                    App.TxtEspecificar15.setDisabled(true);
                    App.TxtEspecificar15.setValue(null);
                }
                if (pregunta == 'C6') {
                    App.TxtEspecificar16.setDisabled(true);
                    App.TxtEspecificar16.setValue(null);
                }
                if (pregunta == 'C7') {
                    App.TxtEspecificar17.setDisabled(true);
                    App.TxtEspecificar17.setValue(null);
                }
                if (pregunta == 'C8') {
                    App.TxtEspecificar18.setDisabled(true);
                    App.TxtEspecificar18.setValue(null);
                }
                if (pregunta == 'C9') {
                    App.TxtEspecificar19.setDisabled(true);
                    App.TxtEspecificar19.setValue(null);
                }
                if (pregunta == 'C10') {
                    App.TxtEspecificar20.setDisabled(true);
                    App.TxtEspecificar20.setValue(null);
                    App.OtrosEspecificar.setDisabled(true);
                    App.OtrosEspecificar.setValue(null);
                }

            }

        };

    </script>
}


@section cuerpo
{
    @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)
        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";
                })
               .Items(

                      X.TextField().ID("RecepcionaRecurso")
                             .Listeners(l => { l.Change.Handler = "InsertRow(this, '" + (indicaModoLectura ? 1 : 0) + "');"; })
                             .Hidden(true),
                             X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.IdMedico).ID("nfMedico").FieldLabel("Nombre del Medico").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMed").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMed").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedico();").Hidden(false)
                                                    ),



                                                     X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6").Hidden(true)
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                      .Items(
                                                    X.NumberFieldFor(c => c.IdFirma).ID("IdResponsableSer").FieldLabel("Firma y sello del Medico").Width(170).ReadOnly(true),
                                                    X.TextField().ID("tfResNroMed").Width(50).FieldLabel("").ReadOnly(true),
                                                    X.TextField().ID("tfResNomMed").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoServicio();")
                                                 )


                                                       .Items(
                                                    X.NumberFieldFor(c => c.IdMedicoTratante).ID("IdResponsableRec").FieldLabel("Firma y Sello del medico que autoriza").Width(170).ReadOnly(true),
                                                 X.TextField().ID("tfrecNroMed").Width(50).FieldLabel("").ReadOnly(true),
                                                  X.TextField().ID("tfrecNomMed").Flex(1).FieldLabel("").ReadOnly(true),


                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorPersonal();")
                                                 ),


                      X.FieldSet().ID("fsRequisitos").Collapsible(true)
                        .ColumnWidth(0.4)
                        .Title("Requisitos")
                        .Layout(LayoutType.VBox)
                        .MarginSpec("10 10 0 10 ")
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .FieldDefaults(d => { d.LabelWidth = 150; d.InputWidth = 170; })
                        .Items(

                                  X.Container().Layout(LayoutType.HBox).MarginSpec("15 15 0 15")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                                   .Items(

                                    X.RadioGroupFor(m => m.Requisitos, new List<Radio.Config> {
                                        new Radio.Config{BoxLabel = "Muy Urgente", InputValue = "M", ReadOnly =indicaModoLectura},
                                        new Radio.Config{BoxLabel = "Urgente", InputValue = "U", ReadOnly =indicaModoLectura},
                                        new Radio.Config{BoxLabel = "Programada", InputValue = "P", ReadOnly =indicaModoLectura}

                                    })

                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                                    .Vertical(true)
                                    .FieldLabel("Requisitos")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "180"));
                //    d.Add(new Parameter("DefaultAnchor", "50%"));
                //})
                                    .AnchorVertical("100%")
                                    .LabelWidth(149)
                                    .Width(520)
                                    .ID("IdRadio1")),





                                    X.Container().Layout(LayoutType.HBox).MarginSpec("10 10 10 10")
                                        .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })








                                // Grilla


                                )

                        ,

                                X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4)
                            .Title("F202.3 Resumen de la Historia Clínica")
                            .MarginSpec("0 05 0 05")
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "170"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })

                            .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })
                        .Items(
                                         X.TextAreaFor(c => c.Firma).ReadOnly(indicaModoLectura).Hidden(true)
                                     .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .Height(40)
                                                    .FieldLabel("Firma"),
                                     X.TextAreaFor(c => c.NombreBanco).ReadOnly(indicaModoLectura)
                                     .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .Height(40)
                                                    .FieldLabel("Nombre del Personal del banco que recibe la solicitud")

                                    ),


                         X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4).Title("Recepción")
                            .Layout(LayoutType.VBox)
                            .MarginSpec("05 05 0 05")
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "120"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                            .Items(



                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                            .Items(
                                    X.DateFieldFor(m => m.FechaRecepcion).Format("dd/MM/yyyy").Width(230).Editable(false)
                                    .FieldLabel("Fecha de Recepcion")
                                      .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })

                                    .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaRecepcion),
                                    X.Component().Width(50),
                                    X.TimeFieldFor(m => m.HoraRecepcion).ID("FechaRecepcionHora").Format("H:mm:ss").Width(230).Editable(false)
                                    .FieldLabel("Hora de Recepción")
                                    .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })

                            )

                            )


                        //ADD PARA MSGS
                        ,
                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                // fin add
                     )

                    .TopBar(X.Toolbar().ID("bar").Items(
                            X.ToolbarSpacer(20),
                            X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                            X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                            X.ToolbarSpacer(20),
                            Html.X().Container().Layout(LayoutType.HBox)
                            .ID("conthbIndicaError").Hidden(true).Items(
                                X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                            ),



                          X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                            X.ToolbarSpacer().Width(40),

                           X.Button()
                                .Text("Guardar")
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .Icon(Icon.Disk)
                                .CausesValidation(true)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("CCEPF360_Save_SolIcitudTransfusional2");
                                    de.Click.Before = "return EnviarData(this.up('grid'));";
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));"),

                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                //.Listeners(l => l.FieldChange
                //    .Handler = "setIndicaCambios(true);"

                //)
                );
        }
        )



    )

}

