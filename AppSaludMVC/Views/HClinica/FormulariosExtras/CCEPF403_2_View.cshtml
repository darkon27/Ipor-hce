@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_ExamenSolicitadoFE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;

    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var DESC_ADD = "403.4 Exámenes de Apoyo al Diagnóstico";
    var DESC_ADDCPT = "Proc. Médicos CPT";
    var COLOR_BLUE01 = "#284A89";

    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>
    var tempEliminar = false;
    var COLOR_BLUE01_ = "#284A89";
    var COLOR_RED01_ = "#990000";
    var COLOR_YELLOW02_ = "#D9A407";
    var COLOR_GREEN01_ = "#177506";
    var COLOR_ORANGE01_ = "#E07509";

    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };

    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);


        var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }

        var indicaCambios = false;
           function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

        var seleccRecordActual = null;
        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }

        var count = 0; // a counter for new records


        function deleteActual(record) {
            seleccRecordActual = record;
            if (seleccRecordActual != null) {
                //setIndicaCambios(true);
                var store = App.grillaExamenes.store;
                //var par1 = seleccRecordActual.data.ValorCodigo2;
                var par1 = seleccRecordActual.data.ValorCodigo2;
                var par2 = seleccRecordActual.data.CodigoElemento;
                store.remove(seleccRecordActual);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF150_addEliminar_Examen"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2,
                    accion: seleccRecordActual.data.ACCION
                }
            });

            tempEliminar = true;
            seleccRecordActual = null;
            //setFocus(false);
        }

    };

    </script>
    <script>
    var hhValidation = function (h) {
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    }
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };



        function EnviarData(grid) {


            var ArrayList1 = new Array();
            var ArrayList2 = new Array();
            var reload = true;


                var grid1 = Ext.getCmp('grillaExamenes');
                var store = grid1.store;


                grid1.store.each(function (r) {
                    
                    var SS_HC_Examen_Kardex_FE = {
                        FechaSolicitada: r.get('ValorFecha'),
                        Detalle: r.get('ValorCodigo1'),
                        DescripcionCodigo: r.get('ValorCodigo2'),
                        IdEspecialidad: r.get('ValorCodigo3'),
                        Observacion: r.get('ValorCodigo4'),
                        Realizado: r.get('ValorCodigo5'),
                        Cantidad: r.get('ValorEntero6'),
                        IndicadorEPS: r.get('ValorEntero7'),
                        TipoCodigo: r.get('ValorCodigo6'),
                        CodigoSegus: r.get('ValorCodigo7'),
                        Especificaciones: r.get('DescripcionExtranjera'),
                        Secuencia: r.get('CodigoElemento'),
                        Accion: r.get('ACCION')


                    };
                    ArrayList1.push(SS_HC_Examen_Kardex_FE);


                });



                var grid2 = Ext.getCmp('grillaExamenes2');
                var store = grid2.store;


                grid2.store.each(function (r) {

                    var SS_HC_InterConsulta_Kardex_FE = {

                        Secuencia: r.get('CodigoElemento'),
                        FechaSolicitada: r.get('ValorFecha'),
                        FechaPlaneada: r.get('ValorCodigo1'),
                        Detalle: r.get('ValorCodigo5'),
                        IdEspecialidad: r.get('ValorCodigo2'),
                        IdTipoInterConsulta: r.get('ValorCodigo3'),
                        Observacion: r.get('ValorCodigo4'),
                        Realizado: r.get('ValorEntero4'),
                        Accion: r.get('ACCION')
                    };
                    ArrayList2.push(SS_HC_InterConsulta_Kardex_FE);

                });
                App.formactual.setDisabled(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_403_2"))',
                params: {

                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    Evento: 'Server',
                    Version: 'CCEPF403_2'
                }
                ,
                success: function (result) {
                    reload = true;
                }
                ,
                failure: function (result) {
                    reload = false;
                }
            });
            App.cmdGuardar.setDisabled(false);

            if (reload) {

                parent.App.txtRecargarX.setValue('RELOAD');

            }


        }

        function eventoVisorReporte(param1) {
            if (param1 == 'HC') {
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

        function Editable(ev, texto) {
            var texto1 = ev.record.data.Detalle;
            alert(texto1);
            if (ev.record.data.Realizado == 2) {
                ev.disabled = true;
            }

        };

        function ocultar1(ev) {
            var valor = ev.record.data.ValorCodigo5;
            var grid = Ext.getCmp('grillaExamenes');
            var indice = grid.store.indexOf(ev.record);
            var column = grid.columns[7];
            var record = grid.store.getAt(indice);
            var cell = grid.getView().getCell(record, column);

            if (valor == 2) {
                cell.show();
            }
            else {
                cell.hide();
            }
        };

        function Deshabilita1(val) {

            var valor = val.value;
            var indice = val.column.rowIndex;
            var grid = Ext.getCmp('grillaExamenes');
            var column = grid.columns[7];
            var record = grid.store.getAt(indice);
            var cell = grid.getView().getCell(record, column);

            if (valor == 2) {
                cell.hide();

                cell.show();
            }
            else {
                cell.hide();
            }


        };

        function ocultar2(ev) {
            var valor = ev.record.data.ValorEntero4;
            var grid = Ext.getCmp('grillaExamenes2');
            var indice = grid.store.indexOf(ev.record);
            var column = grid.columns[6];
            var record = grid.store.getAt(indice);
            var cell = grid.getView().getCell(record, column);

            if (valor == 2) {
                cell.show();
            }
            else {
                cell.hide();
            }
        };

        function Deshabilita2(val) {

            var valor = val.value;
            var indice = val.column.rowIndex;
            var grid = Ext.getCmp('grillaExamenes2');
            var column = grid.columns[6];
            var record = grid.store.getAt(indice);
            var cell = grid.getView().getCell(record, column);

            if (valor == 2) {
                cell.hide();

                cell.show();
            }
            else {
                cell.hide();
            }


        };

        function Editable(val,texto) {
            //var valor = val.value;
            var cell = Ext.getCmp('Realizado1').value;
            //var cell = Ext.getCmp('Detalle1');
            alert(cell);
            if (cell == 2) {
                val.hide();

            }
            else {
                 val.show();

            }


        }


        function InsertRow(valor, estado, soloLectura) {
            //alert('JavaScript - InsertRow');
            if (soloLectura == '1') {
                setIndicaCambios(false);
            } else {
                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;
                    var ValorIndicadorEPS = obj.ValorEntero4;
                    var ValorCodSEGUS = obj.ValorCodigo1;
                    var ValorTipoCod = 'S';
                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }

                    }

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }

                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';


                    if (validaDuplicado(ValorCodSEGUS, 'ValorCodigo7')) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                    var grid = Ext.getCmp("grillaExamenes");
                    //setIndicaCambios(true);
                    grid.store.insert(0, {
                        CodigoElemento: count--,
                        ValorCodigo1: DescripcionLocalVar,
                        ValorCodigo2: DescripcionLocalVar2,
                        ValorFecha: new Date(),
                        ValorEntero6: 1,
                        ValorEntero7: ValorIndicadorEPS,
                        ValorCodigo6: ValorTipoCod,
                        ValorCodigo7: ValorCodSEGUS,
                        ACCION: 'NUEVO'
                    });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);
                    valor.setValue('');
                }
            }
        }
        function validaDuplicado(valor, campoCompara) {
            var estados = false;
            App.storeExamenes.each(function (r) {
                if (trim(r.get('' + campoCompara)) == trim(valor)) estados = true;
            });

            return estados;
        }
        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }
        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }

        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    //alert('getInvalidFields');
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);

            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) { accionMensajes(result.data); }
                });
            }
        };


        var beforeSaveNew = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
                //alert('antes addRecursosValidacion');
                addRecursosValidacion(FieldsInvalidos);
                //alert('despues addRecursosValidacion');
            }

        };

        var addRecursosValidacion = function (FieldsInvalidos) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        };

        var getInvalidFieldsGrid = function (form, invalidFields, fila) {
            //alert('getInvalidFieldsGrid ');
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    //alert('if ' + field.name);
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });
            return invalidFields;
        };
        var setValuesGridForm = function (r, valor) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var ValorFecha = r.get('ValorFecha');
            var ValorCodigo1 = r.get('ValorCodigo1');
            var ValorCodigo4 = r.get('ValorCodigo4');
            var varDescripcionExtranjera = r.get('DescripcionExtranjera');

            App.FechaSolitada.setValue(ValorFecha == null ? null : ValorFecha);
            App.Observacion.setValue(ValorCodigo4 == null ? null : ValorCodigo4);

            App.Especificaciones.setValue(ValorCodigo4 == null ? null : varDescripcionExtranjera);




        };


        function eventoCancelar(form) {
            App.bar.setDisabled(true);
            var reload = true;
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
                // beforeSave(form);
            }
        }

        var onSuccess = function (data) {
            App.btnOnEdit.setVisible(false);
            App.btnCancel.setVisible(true);

            var reload = true;
            if (data != null) {
                if (data.length > 0) {
                    reload = false
                    App.cmdGuardar.setDisabled(false);
                    if (data[0].TIPOMSG == 'EXCEPTION') {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: data[0].TITULO,
                                message: data[0].DESCRIPCION,
                                tipo: 'ERROR'
                            }
                        });
                    } else {
                        accionMensajes(data);
                    }
                }
            }
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
            }
        };

        var onFailure = function (data) {
            App.cmdGuardar.setDisabled(false);
        };

        function eventoActivarSeleccion(button, event) {

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();

            var numero = button.id.replace('IdbtnDesactivo', '');

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo' + numero).show();

            for (var i = 0; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('IdbtnActivo' + i).hide();
                    Ext.getCmp('IdbtnDesactivo' + i).show();
                }
            }
        };

        function eventoDesactivarSeleccion(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo' + numero).show();

        };

        var keyCode
        function ReplaceCaracterEspec(e) {
            /*Capturar tecla pulsada*/
            if (window.event) keyCode = window.event.keyCode;
            else if (e) keyCode = e.which;
            var prueba = keyCode;
            // alert(keyCode);
            //
            if (prueba == 60) {
                var textactual = e.getValue();
                e.value = e.setValue(textactual + " ");
            }
            var texto = e.getValue();
            var vacio = "";
            var cadena = vacio + e.getValue();
            var recortado = cadena.substr(-1, 1);
            // alert(recortado + ' antes');
            if (recortado == "<" || recortado == ">") {
                //  alert(recortado + ' despues');
                e.value = e.setValue(texto + " ");
            }

        }

        function Deshabilita22(val) {
            var valor = val.value;

            var cell = Ext.getCmp('Detalle2');

            if (valor == 2) {
                cell.show();

            }
            else {
                cell.hide();

            }


        }
        function Deshabilita14(val) {
            var valor = val.value;

            var cell = Ext.getCmp('Detalle1');

            if (valor == 2) {
                cell.show();

            }
            else {
                cell.hide();

            }


        }

    </script>
}


@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l => { l.AfterLayout.BroadcastOnBus = "App.resize"; l.AfterLayout.Single = true; })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%").AutoScroll(true).Height(340).Header(false).Border(true).ID("formactual").Listeners(l => { l.Render.Handler = "eventoRenderForm();"; })
               .Items(

                    X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("KARDEX - 2")
                                 .Collapsible(true)
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                        X.TextField()
                                            .ID("RecepcionaRecurso")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                //X.TextFieldFor(m => m.IdKardex3).Hidden(false).Flex(1),
                //X.DateField().ID("FechaSolitada").Hidden(true).Value(DateTime.Now),
                //X.TextField().ID("Observacion").Hidden(true).Value("DATA"),
                //X.TextField().ID("Especificaciones").Hidden(true).Value("DATA"),
                                        X.TextFieldFor(c => c.Motivo)
                                          .FieldLabel("Motivo").ReadOnly(indicaModoLectura)
                                          .EnableKeyEvents(true)
                                          .Hidden(true)
                                          .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),
                //X.ComboBoxFor(c => c.TipoExamen).ReadOnly(indicaModoLectura)
                //.Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenerico("TIPEXAMEN").Select(d => new ListItem(d.Name, d.ID)))
                //.FieldLabel("Tipo de Examen Auxiliar")
                //.SimpleSubmit(true),

                                            X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaExamenes")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF403_2_EXAMENES").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 )
                                                 .ColumnModel(
                                                    Html.X().Column().Text("N°").DataIndex("ValorEntero7")
                                                        .Width(30).Renderer("changeEPS").Hidden(true),

                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ID("ValorFecha").ReadOnly(true)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        //.Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),

                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)

                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)

                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ID("Cantidad").ReadOnly(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("DescripcionExtranjera")
                                                         .Text("Especificaciones")

                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().Height(40).ID("Especificaciones").ReadOnly(true)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                        Html.X().ComponentColumn()
                                                         .Editor(true)

                                                         .DataIndex("ValorCodigo5")
                                                         .Text("Realizado")
                                                         .ID("Realizado1")
                                                         .Flex(1)
                                                         .Component(
                                                           Html.X().ComboBox().Editable(false).Items(
                                                                SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos
                                                                                          .comboMiscelaneoLista.GetComboGenericosX("COMBOSGENERICOS", "EXAKAR2")
                                                                                          .Select(d => new ListItem(d.Name, d.ID))
                                                                 )


                                                            .EmptyText("Seleccione..")
                                                            .EnableKeyEvents(false)
                //.EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                             .Listeners(l => { l.Select.Handler = "Deshabilita1(this)"; })

                                                           // .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })

                                                             )
                                                        ,
                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Detalle")
                                                         //.ID("Detalle1")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)

                                                             .Listeners(l => { l.AfterRender.Handler = "ocultar1(this)"; })
                //.Listeners(l => { l.AfterRender.Handler = "Editable(this,'Detalle1');"; })/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                             )
                                                        ,
                                                        Html.X().CommandColumn().Width(70).Text("Acción").Hidden(true)
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD + "</font></b>")
                //, X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo").Hidden(true)
                //.Text("Bienes/servicios")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');  eventoActivarSeleccion(App.IdbtnDesactivo);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo")
                                                            .Html("<b>Catálogo</b>")
                                                            .Hidden(true)
                //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccion(App.IdbtnActivo);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                   .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        ).Hidden(true)
                                                   ),
                                                   X.Component().Height(20),
                                                   X.GridPanel()
                                                 .ID("grillaExamenes2")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes2")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                 .Fields(
                                                                        new ModelField("CodigoElemento", ModelFieldType.Int),
                                                                        new ModelField("ValorFecha", ModelFieldType.Date),
                                                                        new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                        new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                                        new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                        new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                        new ModelField("ValorEntero4", ModelFieldType.Int),
                                                                        new ModelField("ValorCodigo5", ModelFieldType.String),
                                                                        new ModelField("ACCION", ModelFieldType.String)
                                                                 )
                                                         )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF403_2_ENFER_ACTUAL")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                .Root("data")
                                                                                .TotalProperty("total")
                                                                                .IDProperty("CodigoElemento")))))

                                                 )
                                                 .ColumnModel(

                                       Html.X().ComponentColumn().Editor(true).DataIndex("ValorFecha").Text("Fecha solicitada").Width(110).Hidden(true).Component(
                                                 Html.X().DateField().ReadOnly(true)
                                                 .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                 .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                 //.Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                               ),
                                       Html.X().ComponentColumn().Editor(true).DataIndex("ValorCodigo1").Text("Hora de Solicitud").Width(100).Hidden(true).Component(
                //Html.X().TimeField().Format("H:mm").ReadOnly(indicaModoLectura)
                                                   Html.X().TimeField()
                                                   .HideLabel(true).Format("HH:mm").ReadOnly(false)//.Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaModificacion)//.MaskRe("[0-9:]")
                                                   .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                 .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                 //.Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                /*.AltFormats("HHmm|Hmm").Listeners(
              l => l.BeforeQuery.Handler = "return false;")
               Html.X().TextField().MaxLength(8)
              .Listeners(l => { l.Blur.Handler = "return IsValidTime(this)"; })*/
                                               ),
                                       Html.X().ComponentColumn().Editor(true)
                                        .DataIndex("ValorCodigo2")
                                        .Text("Especialidad").Width(200)
                                        .Component(
                                            Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                            .Editable(false)
                                            .ReadOnly(true)
                                            .MaskRe("[A-Za-z]")
                                            .QueryMode(DataLoadMode.Local)
                                            .TriggerAction(TriggerAction.All)
                                            .EmptyText("Seleccione Especialidad")
                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESPECIALI").Select(d => new ListItem(d.Name, d.ID)))
                                            //.Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                            ),
                                       Html.X().ComponentColumn().Editor(true).Hidden(false)
                                        .DataIndex("ValorCodigo3")
                                        .Text("Tipo").Width(200)
                                        .Component(
                                            Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                            .Editable(false)
                                            .ReadOnly(true)
                                            .QueryMode(DataLoadMode.Local)
                                            .TriggerAction(TriggerAction.All)
                                            .EmptyText("Seleccione tipo")
                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenerico("INTERCONFE")
                                            .Select(d => new ListItem(d.Name, d.ID)))
                                            //.Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                            ),
                                      Html.X().ComponentColumn().Editor(true)
                                        .DataIndex("ValorCodigo4")
                                        .Text("Motivo de Interconsulta")
                                        .Flex(1).Component(
                                      Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                      .ReadOnly(true)
                                      .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                      .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                          ),

                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero4")
                                                         .Text("Realizado")
                                                         .Flex(1)
                                                         .Component(
                                                           Html.X().ComboBox().Editable(false)
                                                           .ReadOnly(indicaModoLectura)
                                                           .QueryMode(DataLoadMode.Local)
                                                           .TriggerAction(TriggerAction.All)
                                                           .Items(
                                                                      SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos
                                                                        .comboMiscelaneoLista.GetComboGenericosX("COMBOSGENERICOS", "INTKAR2")
                                                                                          .Select(d => new ListItem(d.Name, d.ID))
                //new ListItem("Pendiente Informe", 3)
                                                                 )


                                                            .EmptyText("Seleccione..")
                //.FieldLabel("Tipo Alta")
                //.LabelWidth(170)
                //Html.X().ComboBox()/*.MaxLength(200)*/
                //Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                //.Listeners(l => { l.Render.Handler = "Deshabilita2(this)"; })
                                                                .Listeners(l => { l.Select.Handler = "Deshabilita2(this)"; })


                                                             )
                                                        ,
                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo5")
                                                         .Text("Detalle")
                                                         .ID("Detalle2")

                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                            .Listeners(l => { l.AfterRender.Handler = "ocultar2(this)"; })
                                                             ),
                                      Html.X().Column().Text("ACCION").DataIndex("ACCION").Width(85).Hidden(true)
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Hidden(true)
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete")
                                                                .Icon(Icon.Delete)
                //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                        .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar()
                                                             .Hidden(indicaModoLectura)
                                                             .Items(
                //Html.X().ToolbarSeparator(),
                                                                Html.X().Label()
                                                                    .Html("<b><font color='" + COLOR_BLUE01 + "'>403.4 Interconsulta</font></b>"),
                                                                X.ToolbarFill(),
                                                                Html.X().Button().Disabled(indicaModoLectura)
                                                                 .Text("Agregar")
                                                                 .Icon(Icon.Add)
                                                                 .Hidden(true)
                                                                  .Handler("addRecordMain(this.up('grid'));")
                                                     )
                                                   ),
                          X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 05 0").PaddingSpec("6")
                                        .Items(
                                           X.TextAreaFor(c => c.Resumen).FieldLabel("Breve resumen de la Historia Clìnica").ReadOnly(indicaModoLectura)
                                            .LabelAlign(LabelAlign.Top)
                                            .PaddingSpec("6").MaxLength(2000)
                                            .Height(100).Flex(1)
                                            .EnableKeyEvents(true)
                                            .Hidden(true)
                                          .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                //.InputWidth(300)
                                         )
                                     )
                ////////ADD PARA MSGS/////
                                    ,
                                    X.TextArea().ID("taAlerts")
                                    .Border(false)
                                    .StyleSpec("background:white;border:1px solid gray;")
                                    .FieldStyle("color: red")
                                    .Hidden(true)
                                    .ReadOnly(true)
                //////////////////////
                     )

                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                            X.ToolbarFill(),


                             X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")

                            , X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');")

                                ,

                X.ToolbarSpacer().Width(40),
                            X.Button()
                                .Text("Guardar")
                                .ID("cmdGuardar").Hidden(indicaModoLectura).Icon(Icon.Disk)
                //.Handler("EnviarData(this.up('grid'));"),
                                .Handler("EnviarData(this.up('grid'));")
                                .CausesValidation(true)
                //.DirectEvents(de =>
                //    {
                //        //de.Click.Url = Url.Action("CCEPF150_Save_ExamenFE");
                //        de.Click.EventMask.ShowMask = true;
                //        //de.Click.Before = "return EnviarData(this.up('grid'));";
                //        de.Click.After = "onSuccess(result.data);";
                //        de.Click.Failure = "onFailure();";
                //    })
                                    ,





                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")
                        ))
                //.Listeners(l => l.FieldChange
                //    .Handler = "setIndicaCambios(true);"
                //)
                );
        }
        )
    )
}

