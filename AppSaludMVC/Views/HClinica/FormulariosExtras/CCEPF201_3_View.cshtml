@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Epicrisis_3

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();


    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;


    var indicaMEDI = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VALIDAMEDICAMENTO;


    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;
    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : false);

    var codMedico = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.COD_MEDICO;
    var idMedicaso = (codMedico == 0 || codMedico == null ? true : false);


    var Informate = (Model.CondicionEgreso == 5 ? false : true);

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI"); ;

    var MENS_NUMERO = "No se permite un valor negativo.";

    var DESC_ADD1 = "Diagnóstico de ingreso";
    var DESC_ADD2 = "Diagnóstico Principal";
    var DESC_ADD4 = "Diagnóstico Secundario";
    var DESC_ADD3 = "Apoyo al diagnóstico";
    var COLOR_BLUE01 = "#284A89";
    var grilla_Actual = "";
    //var nombreMedico = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.MedicoNombre;
    var DESC_ADD = "Detalle-Diagnostico Principal";
     
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";


    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";



    var opcion = Session["OPCION"];

    var opcionAlmacen = Session["OPCIONALMACEN"];

}
@section cabecera
{

    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }



        .icon-plugindisabled {
            background-image: url(/icons/plugin_disabled-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-plugingo {
            background-image: url(/icons/plugin_go-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-delete {
            background-image: url(/icons/delete-png/ext.axd);
            background-repeat: no-repeat;
        }
    </style>




    <script>


    var lectura = "false";
    var haynuevos = false;
    var Edito = false;

    var COLOR_BLUE01_ = "#284A89";
    var COLOR_RED01_ = "#990000";
    var COLOR_YELLOW02_ = "#D9A407";
    var COLOR_GREEN01_ = "#177506";
    var COLOR_ORANGE01_ = "#E07509";


    var grillaActiva = "";
    var grilla_Actual = "";

    var changeEPS2 = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };



    var changeModalidad2 = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 6)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 5)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 3)
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
    };

    var ContDell = 1;
    var RegActivoMed = 0;
    var EstadoDetalle = 0;


    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);

        lectura = '@(indicaModoLectura)';
        App.formactual.setHeight(545);

        var v = '@isNuevo';
        if (v == 'True') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }

    @*function desavilitarCopiar() {
            var v = '@isNuevo';
            if (v == 'True') {
                parent.App.btnCopyForm_HCE.setDisabled(true);
            } else {
                parent.App.btnCopyForm_HCE.setDisabled(false);
            }

        }*@




    function eventoAfterRenderForm(grupos) {
        if (parseInt(grupos) > 0) {
            for (var x = 0; x < parseInt(grupos) ; x++) {
                addgrupo(parseInt(x));
                /*var grid = Ext.getCmp('grillaExamenes' + x);
                grid.getStore().getSelectionModel().items*/
            }
        }
    };

    var seleccRecordActual = null;
    var seleccRecordActualInd = null;
    var changeGridMed = 0;
    var changeGridMedDetail = 0;

    function setChangedMed(value) {
        if (value == 1) {

            if (changeGridMed == 0) {
                changeGridMed = 1;
            } else if (changeGridMed == 1) {
                setIndicaCambios(true);
            }
        } else if (value == 0) {
            changeGridMed = 0;
        }
    };


    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }

    function setSeleccionActualIndicaciones(record) {
        seleccRecordActualInd = record;
    }


    function eliminarRecetaIndividual(record) {
        seleccRecordActual = record;
        setIndicaCambios(true);
        var store = App.grillaExamenes0.store;
        if (App.txtdata.getValue() == "error") {
            //alert(App.txtdata.getValue());
            console.log = "error";
        } else {
            //alert(App.txtdata.getValue());
            store.remove(seleccRecordActual);
        }
    }


    function deleteActualPrincipal(record) {

        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaPrincipal.store;
            var par1 = seleccRecordActual.data.Codigo;
            var par2 = seleccRecordActual.data.Secuencia;


            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF201_3_addEliminar_Principal"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }

    };


    function deleteActualSecundario(record) {

        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaSecundario.store;
            var par1 = seleccRecordActual.data.Codigo;
            var par2 = seleccRecordActual.data.Secuencia;


            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF201_3_addEliminar_Secundario"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }

    };


    function eventoDesactivarSeleccionPrincipal(button, event) {
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivoPrincipal', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivoPrincipal' + numero).show();

    };


    function eventoActivarSeleccionPrincipal(button, event) {
        //    alert("ACTIVAR EXAMEN  1");
        grillaActiva = 1;
        // alert(grillaActiva)

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1',
                text: '3813'
            },
            success: function (result) {
                parent.App.StoreBuscarServicios.reload();
            }
        });

        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivoPrincipal', '');
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivoPrincipal' + numero).show();

        grilla_Actual = "grillaPrincipal";


        Ext.getCmp('IdbtnDesactivoSecundario').show();
        Ext.getCmp('IdbtnActivoSecundario').hide();

        Ext.getCmp('btnSelDesactivo0').show();
        Ext.getCmp('btnSelActivo0').hide();


    };




    function eventoDesactivarSeleccionSecundario(button, event) {
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivoSecundario', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivoSecundario' + numero).show();

    };



    function eventoActivarSeleccionSecundario(button, event) {
        //    alert("ACTIVAR EXAMEN  1");
        grillaActiva = 1;
        // alert(grillaActiva)

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '3813'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

          var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            var numero = button.id.replace('IdbtnDesactivoSecundario', '');
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivoSecundario' + numero).show();

            grilla_Actual = "grillaSecundario";


            Ext.getCmp('IdbtnDesactivoPrincipal').show();
            Ext.getCmp('IdbtnActivoPrincipal').hide();

            Ext.getCmp('btnSelDesactivo0').show();
            Ext.getCmp('btnSelActivo0').hide();


    };



        function deleteActualRecetaIndividual(grid, record) {
            seleccRecordActual = record;
            var datitooo = record.data.SecuencialHCE;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addDataEliminarMedicamentos_201_3"))',
                    params: {
                        MODO: 'DELETE',
                        id: record.data.Secuencia,
                        hc: datitooo,
                        tipo: 1
                    },
                        success: function (result) {
                            eliminarRecetaIndividual(seleccRecordActual);
                        }
                });
                //store.remove(record);
                tempEliminar = true;
                record = null;
            }
        };


        function eliminarGrillagrillaMaterialMedico(record) {
            seleccRecordActual = record;
            setIndicaCambios(true);
            var store = App.grillaExamenes1.store;
            if (App.txtdata.getValue() == "error") {
                //alert(App.txtdata.getValue());
                console.log = "error";
            } else {
                //alert(App.txtdata.getValue());
                store.remove(seleccRecordActual);
            }
        }


        function deleteActualMaterialMedico(grid, record) {
            seleccRecordActual = record;
            var datitooo = record.data.SecuencialHCE;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addDataEliminarMedicamentos"))',
                params: {
                    MODO: 'DELETE',
                    id: record.data.Secuencia,
                    hc: datitooo,
                    tipo: 1
                },
                success: function (result) {
                    eliminarGrillagrillaMaterialMedico(seleccRecordActual);
                }
                //store.remove(record);
            });
            tempEliminar = true;
            record = null;
        }
    };







    function deleteActualIndicaciones(grid, record) {
        seleccRecordActualInd = record;
        if (record != null) {
            setIndicaCambios(true);
            var store = grid.store;
            var secMed = record.data.SecuenciaMedicamento;
            var secInd = record.data.Secuencia;


            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addEliminar_CCEP0304_MEDICAMENTODETALLEINDI"))',
                params: {
                    accion: 'DELETE',
                    codigo: record.data.Secuencia,
                    secuenciaMed: secMed,
                    secuenciaIndica: secInd
                }
            });

            store.remove(record);
            record = null;
        }
    };

    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });

        var val = '@visibleImpresion';
        var vis = '@isVista';

        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);


                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);


                }
            }
        }

    };

    var invalidFields = new Array();

    function updateActual(tipo, grid) {
        var indtipo = 1;
        var ArrayList0 = new Array();
        if (indtipo > 0) {
            setIndicaCambios(true);
            var store = grid.store;
            var fila = 0;
            grid.store.each(function (r) {

                fila = fila + 1;
                setValuesGridForm(r, null, 'MEDICINA');
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');

                var HC_Medicamento = {
                    Secuencia: r.get('Secuencia'),
                    IdUnidadMedida: r.get('IdUnidadMedida'),
                    Dosis: r.get('Dosis'),
                    IdVia: r.get('IdVia'),
                    TipoComida: r.get('TipoComida'),
                    Cantidad: r.get('Cantidad'),
                    Frecuencia: r.get('Frecuencia'),
                    DiasTratamiento: r.get('DiasTratamiento'),
                    Linea: r.get('Linea'),
                    Familia: r.get('Familia'),
                    SubFamilia: r.get('SubFamilia'),
                    LineaDescripcion: r.get('LineaDescripcion'),
                    FamiliaDescripcion: r.get('FamiliaDescripcion'),
                    SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                    TipoMedicamento: r.get('TipoMedicamento'),
                    Estado: r.get('Estado'),
                    CodigoComponente: r.get('CodigoComponente'),
                    IndicadorEPS: r.get('IndicadorEPS')
                };
                ArrayList0.push(HC_Medicamento);
            });
            if (invalidFields.length > 0) {
                addRecursosValidacion(invalidFields);
                App.cmdGuardar.setDisabled(false);
            }
        }
        return ArrayList0;
    };


    var count = 0; // a counter for new records
    var countDell = 0; // a counter for new records

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    //function SelectDobleClik(secuencia, Linea, Familia) {
    function SelectDetalleClik() {
        //alert("fadfadsf");
        EstadoDetalle = 2;
        setIndicaCambios(true);
    };
    var hhValidation = function (h) {
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    };
    function SelectDetalleRegistro(Obj) {
        if (EstadoDetalle == 2) {
            alert('Por favor presione Guardar Detalle.');
            return;
        } else if (EstadoDetalle == 0) {
            EstadoDetalle = 1;
        }
        RegActivoMed = Obj.Secuencia;
        App.IdMedica.setValue("Indicaciones Especificas / Generales : " + Obj.SubFamiliaDescripcion);
        var panel2 = App.Panel2;
        panel2.setVisible(true);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: "",
                selectionArray2: "",
                Id: RegActivoMed,
                Evento: 'ListarDetalle',
                idgrupo: 0,
                Version: 'CCEPF101'
            }
        });
    };


    function EnviarIndicaciones() {
        var ArrayList1 = new Array();
        var i = 1;
        var ArrayList2 = new Array();
        var x = 1;
        App.storeExamenesDetalleIndic0.each(function (r) {
            //  alert(r.get('SecuenciaMedicamento'));
            var SS_HC_Indicaciones = {
                SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                GrupoMedicamento: 0,
                Secuencia: r.get('Secuencia'),
                TipoRegistro: r.get('TipoRegistro'),
                IdTipoIndicacion: r.get('IdTipoIndicacion'),
                Descripcion: r.get('Descripcion'),
                Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
            };
            ArrayList2.push(SS_HC_Indicaciones);
            x = x + 1;
        });
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: ArrayList1,
                selectionArray2: ArrayList2,
                Id: 0,
                Evento: 'Temp',
                idgrupo: 0,
                Version: 'CCEPF101'
            }
        });
        EstadoDetalle = 0;
    }
    function PanelOcultar(grid) {

        App.Indicacion.setValue("");

        var panel1 = App.Panel1;
        panel1.setVisible(false);
    };

    function PanelOcultar2(grid) {
        var panel8 = App.Panel8;
        panel8.setVisible(false);
    };

    function addRecordDetalle(grid) {


        //App.Window1.show();
        //  lert(RegActivoMed);
        App.storeExamenesDetalleIndic0.each(function (r) {
            ContDell++
        });
        grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
        EstadoDetalle = 2;
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })


        }, 100);
    };

    function addRecordDetalleM(grid) {

        //App.Window1.show();
        //alert(RegActivoMed);
        App.storeExamenesDetalleIndic0M.each(function (r) {
            ContDell++
        });
        grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
        EstadoDetalle = 2;
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();

        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var accionMensajesXFUERA = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlertsFuera.setVisible(true);
            App.taAlertsFuera.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlertsFuera.focus();

        } else {
            App.taAlertsFuera.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };



    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }
    };

    var beforeSaveFuera = function (form) {
        App.taAlertsFuera.setVisible(false);
        App.taAlertsFuera.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFieldsNEWXFUERA(form);
        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);

        }
    };


    var getInvalidFieldsxFuera = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };


    var addRecursosValidacion = function (FieldsInvalidos) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
            params: {
                data: FieldsInvalidos,
                indica: 'VALIDAR',
            },
            success: function (result) { accionMensajes(result.data); }
        });
    };


    var addRecursosValidacionXFUERA = function (FieldsInvalidos) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
            params: {
                data: FieldsInvalidos,
                indica: 'VALIDAR',
            },
            success: function (result) {
                accionMensajesXFUERA(result.data);
            }
        });
    };

    //App.taAlertsFuera.setVisible(false);
    //App.taAlertsFuera.setValue(null);
    //App.conthbIndicaError.setVisible(false);




    var getInvalidFieldsGrid = function (form, invalidFields, fila, tipo) {
        var fields = App.formactual.getForm().getFields();
        fields.filterBy(function (field) {
            var validar = true;
            if (!field.isValid() && validar) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: tipo + '; Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });

        return invalidFields;
    };
    var setValuesGridForm = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var TipoReceta = r.get('TipoReceta');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var CodigoComponente = r.get('CodigoComponente');

        App.Linea.setValue(Linea == null ? null : Linea);

        App.Familia.setValue(Familia == null ? null : Familia);
        App.Dosis.setValue(Dosis == 0 ? null : Dosis);
        App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.TipoReceta.setValue(TipoReceta == 0 ? null : TipoReceta);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
        App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
        App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
    };
    function eventoCancelar(form) {

        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }

    };


    </script>




    <script>

    var tempEliminar = false;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
    var opcion_display = "";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";

    var numerogrupo = 0;
    var grillaActiva = null;/*"grillaExamenes0";*/

    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };

    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';

        if (value == 1)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 2)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");



        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 4)
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "Sin Seguro");

        };



    var SubFamilia = function (h) {
        var numero2 = grillaActiva.replace('grillaExamenes', '')
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ReturnFindSubFamilia"))',
            params: {
                modo: 'set',
                linea: '',
                familia: '',
                subFamilia: str,
                descripcion: '',
                descripLinea: '',
                descripFamilia: '',
                idWindow: "IdBuscadorMedicamento",
                idgrupo: 0 /* parseInt(numero2)*/
            }
        });
    }



    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }
    }


    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }


    @*function setSeleccionActualDiagnostico(record) {

        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.Secuencia;
            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF201_3_addEliminar_Diag"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };*@



    var varIsValidForm = true;
    var getInvalidFieldsNEWXFUERA = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        var varValidar = false;
        fields.filterBy(function (field) {


            if (field.name == 'Comentario') {
                varValidar = true;

            }
            if (!field.isValid() && varValidar) {
                // alert('if ' + field.name);
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                varIsValidForm = false;
            } else {
                //alert('else ' + field.name);
            }
        });
        return invalidFields;
    };


    function deleteActualDiagnostico(record) {

       // alert("eli");

        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaDiagnostico.store;
            var par1 = seleccRecordActual.data.ValorCodigo5;
            var par2 = seleccRecordActual.data.CodigoElemento;

            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF201_3_addEliminar_Diag"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };


    @*function EnviarDataServer(grid) {
        var reload = true;
        // beforeSaveFuera(App.formactual);
        //var invalidos= new Array();

        var idmedicasos = '@idMedicaso';

        if (true) {
            var store1 = 'storeExamenes0';
            var store2 = 'storeExamenes1';

            if ((Ext.getStore(store1).getCount() > 0 || Ext.getStore(store2).getCount() > 0 || tempEliminar == true) ) {
                var array01 = updateActualGrupo('MED', ''/*Ext.getCmp(grillaActiva)*/);
                var ArrayList2 = App.Comentario.getValue();
                if (Ext.getStore(store1).getCount() < 1 && Ext.getStore(store2).getCount() < 1) {
                    ArrayList2 = '';
                }
                if (grillaActiva != null) {
                    var numero2 = grillaActiva.replace('grillaExamenes', '');
                }
                else {
                    var numero2 = '0';
                }

                invalidos = getInvalidFieldsNEWXFUERA(App.formactual);
                if (invalidos.length > 0) {
                    addRecursosValidacionXFUERA(invalidos);
                    App.cmdGuardar.setDisabled(false);
                    return false;
                } else {

                    App.taAlertsFuera.setVisible(false);
                    App.taAlertsFuera.setValue('');
                    App.conthbIndicaError.setVisible(false);

                    App.storeExamenes0.reload();
                    App.formactual.setDisabled(true);
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEPF101_Save_Medicamentos"))',
                        params: {
                            selectionArray1: array01,
                            selectionArray2: trim(ArrayList2),
                            Id: 0,
                            Evento: 'Server',
                            idgrupo: 0,/* parseInt(numero2),*/
                            Version: 'CCEPF101'
                        }
                        , success: function (result) {

                            reload = true;
                        }
                    });
                }


                App.Panel2.setVisible(false);
                App.Panel1.setVisible(false);
                App.Panel8.setVisible(false)
                /* }*/
                App.cmdGuardar.setDisabled(false);
                tempEliminar = false;
                if (reload) {
                    parent.App.txtRecargarX.setValue('RELOAD');

                } else {
                    App.cmdGuardar.setDisabled(false);
                    App.taAlerts.setVisible(true);
                }
                App.Panel2.setVisible(false);
                App.Panel1.setVisible(false);
                App.Panel8.setVisible(false)
                /* }*/
                App.cmdGuardar.setDisabled(false);
                tempEliminar = false;
                if (reload) {
                    parent.App.txtRecargarX.setValue('RELOAD');

                } else {
                    App.cmdGuardar.setDisabled(false);
                    App.taAlerts.setVisible(true);
                }
            }

            else if (idmedicasos == 'True') {

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe Asignar un médico',
                        tipo: 'WARNING'
                    }
                });
                //valor.setValue('');
                //App.cmdGuardar.setDisabled(false);
                return;
            } else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'No hay datos para guardar',
                        tipo: 'WARNING'
                    }
                });
            }

        } else {
            App.cmdGuardar.setDisabled(false);
        }
        }*@



        function EnviarData(grid) {





            var ArrayList0 = new Array();
              var ArrayListMEdicamento = new Array();

            var ArrayList1 = new Array();
            var ArrayList2 = new Array();
            var ArrayList3 = new Array();
            var reload = true;

            //var NecropsiaE = App.Necropsia.getValue().Necropsia();
            //if (NecropsiaE == null) { NecropsiaE = 3; }

            var HC_Epicrisis_3 = {

                //IdEpicrisis3 : ObjLista0[0].IdEpicrisis3;
                Complicaciones :  App.Complicaciones.getValue(),
                Pronostico: App.Pronostico.getValue(),
                TipoAlta: App.TipoAlta.getValue(),
                CondicionEgreso: App.CondicionEgreso.getValue(),
                CausaMuerte: App.CausaMuerte.getValue(),
                PlanAlta: App.PlanAlta.getValue(),
                Necropsia: App.Necropsia.getValue().Necropsia,
                IdEpicrisis3: App.IdEpicrisis3.getValue()
                //Estado: App.Estado.getValue()


            };

            if (HC_Epicrisis_3.Necropsia == null) {
                HC_Epicrisis_3.Necropsia = 3;
            }
            ArrayList0.push(HC_Epicrisis_3);



            var grid0Medi = Ext.getCmp('grillaExamenes0');


            grid0Medi.store.each(function (r) {

                var SS_HC_Epicrisis_3_Medicametos = {

                    Secuencia: r.get('Secuencia'),
                    IdUnidadMedida: r.get('IdUnidadMedida'),
                    Dosis: r.get('Dosis'),
                    IdVia: r.get('IdVia'),
                    TipoReceta: r.get('TipoReceta'),
                    TipoComida: r.get('TipoComida'),/*r.get('TipoComida'),*/
                    Cantidad: r.get('Cantidad'),
                    Frecuencia: r.get('Frecuencia'),
                    DiasTratamiento: r.get('DiasTratamiento'),
                    Linea: r.get('Linea'),
                    Familia: r.get('Familia'),
                    SubFamilia: r.get('SubFamilia'),
                    LineaDescripcion: r.get('LineaDescripcion'),
                    FamiliaDescripcion: r.get('FamiliaDescripcion'),
                    SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                    GrupoMedicamento: 0,
                    /*Comentario: r.get('Comentario'),*/
                    TipoMedicamento: r.get('TipoMedicamento'),
                    Estado: r.get('Estado'),
                    UnidadTiempo: r.get('UnidadTiempo'),
                    CodigoComponente: r.get('CodigoComponente'),
                    IndicadorEPS: r.get('IndicadorEPS'),
                    Periodo: r.get('Periodo'),
                    Indicacion: r.get('Indicacion')

                };
                ArrayListMEdicamento.push(SS_HC_Epicrisis_3_Medicametos);
                console.log(ArrayListMEdicamento)
            });

           // alert(JSON.stringify(ArrayListMEdicamento))
                var grid1 = Ext.getCmp('grillaDiagnostico');
                var store = grid1.store;
                grid1.store.each(function (r) {

                    var ss_HC_Epicrisis_3_Diagnostico = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        Accion: r.get('ACCION')


                    };
                    ArrayList1.push(ss_HC_Epicrisis_3_Diagnostico);
                });

                var grid2 = Ext.getCmp('grillaPrincipal');
                var store = grid1.store;
                grid2.store.each(function (r) {
                    var SS_HC_Epicrisis_3_Diag_Principal = {
                        //TipoBalance: r.get('TipoBalance'),
                        Secuencia: r.get('Secuencia'),
                        Codigo: r.get('Codigo'),
                        DiagnosticoDescripcion: r.get('DiagnosticoDescripcion'),
                        Accion: r.get('Accion')
                    };
                    ArrayList2.push(SS_HC_Epicrisis_3_Diag_Principal);

                });



            var grid3 = Ext.getCmp('grillaSecundario');
                grid3.store.each(function (r) {

                    var SS_HC_Epicrisis_3_Diag_Secundaria = {
                        Secuencia: r.get('Secuencia'),
                        Codigo: r.get('Codigo'),
                        DiagnosticoDescripcion: r.get('DiagnosticoDescripcion'),
                        Accion: r.get('Accion')
                    };
                    ArrayList3.push(SS_HC_Epicrisis_3_Diag_Secundaria);

                });



            App.formactual.setDisabled(true);


            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_201_3"))',
                params: {
                    selectionArray0: ArrayList0,
                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    selectionArray3: ArrayList3,
                    selectionArray4: ArrayListMEdicamento,
                    Evento: 'Server',
                    Version: 'CCEPF201_3'
                }
                ,
                success: function (result) {
                    reload = true;
                }
                ,
                failure: function (result) {
                    reload = false;
                }
            });
            App.cmdGuardar.setDisabled(false);

            if (reload) {

                parent.App.txtRecargarX.setValue('RELOAD');
            }
        }






        var count = 0;

        function InsertRow(valor, estado, soloLectura) {

            console.log(soloLectura)
            if (soloLectura == '1') {
                setIndicaCambios(false);
            } else {



                if (grilla_Actual == 'grillaExamenes0') {

                    if (valor.getValue() != '') {

                        var obj = JSON.parse(valor.getValue());

                        var codElemento = obj.CodigoElemento;

                        var DescripcionLocalVar = obj.DescripcionLocal;




                        opcion_display = obj.Compania;
                        var grid = Ext.getCmp("" + grillaActiva);
                        var ValorEntero4Var = obj.ValorEntero4;


                        var numero2 = grillaActiva.replace('grillaExamenes', '')

                        App.NumeroStore.setValue(numero2);
                        var TipoMedicamento_var = null;


                        if (grillaActiva == 'grillaExamenes0') {
                            TipoMedicamento_var = 2;
                        } else if (grillaActiva == 'grillaExamenes1') {
                            TipoMedicamento_var = 4;
                        }

                        if (TipoMedicamento_var == 2) {
                            App.lblValidacion.setValue('B');
                        }
                        if (TipoMedicamento_var == 4) {
                            App.lblValidacion.setValue('C');
                        }

              

                        if (validaDuplicado(obj.CodigoElemento, grid)) {
                            //alert('COD_ELEMENTO: ' + obj.CodigoElemento)

                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("showMensajeNotify"))',
                                params: {
                                    titulo: 'Advertencia',
                                    message: 'Ya existe registro',
                                    tipo: 'WARNING'
                                }
                            });
                            valor.setValue('');
                            return;
                        }
                        // valor.setValue('');
                        setIndicaCambios(true);




                        if (grillaActiva == "grillaExamenes0") {

                           // alert("llego todo bien");

                            App.Linea.setValue(null);
                            App.cbIdUnidadMedida.setValue(null);
                            App.Familia.setValue(null);
                            App.Dosis.setValue(null);
                            App.Frecuencia.setValue(null);
                            App.SubFamilia.setValue(null);
                            App.IdVia.setValue(null);
                            App.TipoReceta.setValue(null);
                            App.Periodo.setValue(null);
                            App.UnidadTiempo.setValue(null);
                            App.DiasTratamiento.setValue(null);
                            App.Cantidad.setValue(null);
                            App.CodigoComponente.setValue(null);
                            App.IndicadorEPS.setValue(null);
                            App.TipoComida.setValue(null);
                            App.Indicacion.setValue("");


                            App.btnAgregar.setVisible(true);
                            App.btnModificar.setVisible(false);


                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("ReturnFindSubFamilia"))',
                                params: {
                                    modo: 'set',
                                    linea: '',
                                    familia: '',
                                    subFamilia: DescripcionLocalVar,
                                    descripcion: '',
                                    descripLinea: '',
                                    descripFamilia: '',
                                    indicadoreps: ValorEntero4Var,
                                    idWindow: "IdBuscadorMedicamento",
                                    idgrupo: parseInt(numero2)
                                }
                            });
                        }

                        else {

                            App.Linea.setValue(null);
                            App.cbIdUnidadMedida.setValue(null);
                            App.Familia.setValue(null);
                            App.Dosis.setValue(null);
                            App.Frecuencia.setValue(null);
                            App.SubFamilia.setValue(null);
                            App.IdVia.setValue(null);
                            App.TipoReceta.setValue(null);
                            App.Periodo.setValue(null);
                            App.UnidadTiempo.setValue(null);
                            App.DiasTratamiento.setValue(null);
                            App.Cantidad.setValue(null);
                            App.CodigoComponente.setValue(null);
                            App.IndicadorEPS.setValue(null);
                            App.TipoComida.setValue(null);

                            App.IndicacionX.setValue("");

                            App.CantidadX.setValue(null);

                            App.btnAgregarX.setVisible(true);
                            App.btnModificarX.setVisible(false);

                            Edito = false;

                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("ReturnFindSubFamiliaX"))',
                                params: {
                                    modo: 'set',
                                    linea: '',
                                    familia: '',
                                    subFamilia: DescripcionLocalVar,
                                    descripcion: '',
                                    descripLinea: '',
                                    descripFamilia: '',
                                    indicadoreps: ValorEntero4Var,
                                    idWindow: "IdBuscadorMedicamento",
                                    idgrupo: 0
                                }
                            });
                        }
                        valor.setValue('');


                    }



                }else if (grilla_Actual == 'grillaPrincipal') {
                    if (valor.getValue() != '') {


                        var obj = JSON.parse(valor.getValue());
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var codigo = obj.CodigoElemento;
                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }

                        }

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }




                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';

                        @*if (validaDuplicadoPrincipal(codigo)) {
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("showMensajeNotify"))',
                                params: {
                                    titulo: 'Advertencia',
                                    message: 'Ya existe registro',
                                    tipo: 'WARNING'
                                }
                            });
                            valor.setValue('');
                            return;
                        }*@



                        var grid = Ext.getCmp("grillaPrincipal");
                        setIndicaCambios(true);

                        grid.store.insert(0, { Secuencia: count++, Codigo: codigo, DiagnosticoDescripcion: DescripcionLocalVar2, Accion: 'NUEVO' });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);


                        valor.setValue('');
                    }



                }
                else {
                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var codigo = obj.CodigoElemento;
                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }

                        }

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }

                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        @*if (validaDuplicadoSecundario(codigo)) {
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("showMensajeNotify"))',
                                params: {
                                    titulo: 'Advertencia',
                                    message: 'Ya existe registro',
                                    tipo: 'WARNING'
                                }
                            });
                            valor.setValue('');
                            return;
                        }*@

                        var grid = Ext.getCmp("grillaSecundario");
                        setIndicaCambios(true);
                        grid.store.insert(0, { Secuencia: count++, Codigo: codigo, DiagnosticoDescripcion: DescripcionLocalVar2, Accion: 'NUEVO' });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }
                }
            }
        }


    @*function InsertRow(valor, estado, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (grillaActiva != null) {
                if (valor.getValue() != '') {
                    //  alert("hola");
                    /* App.btnAgregar.setVisible(true);
                     App.btnModificar.setVisible(false);
                     */
                    var obj = JSON.parse(valor.getValue());

                    var codElemento = obj.CodigoElemento;

                    var DescripcionLocalVar = obj.DescripcionLocal;

                    opcion_display = obj.Compania;
                    var grid = Ext.getCmp("" + grillaActiva);
                    var ValorEntero4Var = obj.ValorEntero4;
                    var numero2 = grillaActiva.replace('grillaExamenes', '')

                    App.NumeroStore.setValue(numero2);
                    var TipoMedicamento_var = null;

                    if (grillaActiva == 'grillaExamenes0') {
                        TipoMedicamento_var = 2;
                    } else if (grillaActiva == 'grillaExamenes1') {
                        TipoMedicamento_var = 4;
                    }

                    if (TipoMedicamento_var == 2) {
                        App.lblValidacion.setValue('B');
                    }
                    if (TipoMedicamento_var == 4) {
                        App.lblValidacion.setValue('C');
                    }


                    if (validaDuplicado(obj.CodigoElemento, grid)) {
                        //alert('COD_ELEMENTO: ' + obj.CodigoElemento)

                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                    // valor.setValue('');
                    setIndicaCambios(true);

                    if (grillaActiva == "grillaExamenes0") {
                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.Periodo.setValue(null);
                        App.UnidadTiempo.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);
                        App.TipoComida.setValue(null);
                        App.Indicacion.setValue("");

                        App.btnAgregar.setVisible(true);
                        App.btnModificar.setVisible(false);


                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamilia"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: parseInt(numero2)
                            }
                        });
                    }

                    else {

                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.Periodo.setValue(null);
                        App.UnidadTiempo.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);
                        App.TipoComida.setValue(null);

                        App.IndicacionX.setValue("");

                        App.CantidadX.setValue(null);

                        App.btnAgregarX.setVisible(true);
                        App.btnModificarX.setVisible(false);

                        Edito = false;

                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamiliaX"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: 0
                            }
                        });
                    }

                    valor.setValue('');
                }

            }

            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las Tablas.',
                        tipo: 'WARNING'
                    }
                });
                return;
            }

        }
    }*@












    function EnviarIndicacionesGrupo() {
        var ArrayList1 = new Array();
        var i = 1;
        var ArrayList2 = new Array();
        var x = 1;
        var numero2 = grillaActiva.replace('grillaExamenes', '')

        App.storeExamenesDetalleIndic0.each(function (r) {
            //  alert(r.get('SecuenciaMedicamento'));
            var SS_HC_Indicaciones = {
                SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                Secuencia: r.get('Secuencia'),
                TipoRegistro: r.get('TipoRegistro'),
                IdTipoIndicacion: r.get('IdTipoIndicacion'),
                Descripcion: r.get('Descripcion'),
                Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
            };
            ArrayList2.push(SS_HC_Indicaciones);
            x = x + 1;
        });
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: ArrayList1,
                selectionArray2: ArrayList2,
                Id: parseInt(numero2),
                Evento: 'Temp',
                idgrupo: parseInt(numero2),
                Version: 'CCEPF101'
            }
        });
        EstadoDetalle = 0;
    }




        function validaDuplicadoPrincipal(valor, grid) {

            var numero = grillaActiva.replace('grillaPrincipal', '')
            var store1 = 'storeExamenes' + numero;
            var store = Ext.getStore(store1);
            var estados = false;
            var valor1;
            var valor2;
            store.each(function (r) {
                if (trim(r.get('CodigoComponente')) == trim(valor)) estados = true;
            });
            // alert(estados);
            return estados;
        }




        function validaDuplicado(valor, grid) {
            var numero = grillaActiva.replace('grillaExamenes', '')
            var store1 = 'storeExamenes' + numero;
            var store = Ext.getStore(store1);
            var estados = false;
            var valor1;
            var valor2;
            store.each(function (r) {
                if (trim(r.get('CodigoComponente')) == trim(valor)) estados = true;
            });
            // alert(estados);
            return estados;
        }



    function noDuplicado(valor) {
        App.storeExamenes0.reload();

        App.Indicacion.setValue("");

        if (getValidarDatos(valor)) {

            if (App.Cantidad.getValue() != null) {


                var noHayDuplicado = true;

                var numero = grillaActiva.replace('grillaExamenes', '')


                App.NumeroStore.setValue(numero);
                var grilla = grillaActiva;
                var store1 = 'storeExamenes' + numero;

                Ext.getStore(store1).each(function (r) {

                    if (trim(r.get('Linea')) == trim(App.Linea.getValue()) &&
                        trim(r.get('Familia')) == trim(App.Familia.getValue()) &&
                        trim(r.get('SubFamilia')) == trim(App.SubFamilia.getValue())) {
                        noHayDuplicado = false;
                    }
                });
                if (!noHayDuplicado) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro.',
                            tipo: 'WARNING'
                        }
                    });
                }
                App.taAlerts.setVisible(false);
                return noHayDuplicado;
            } else {

                App.taAlerts.setVisible(true);
                var mensajesX = "";
                if (App.Cantidad.getValue() == null) {
                    Ext.getCmp('Cantidad').setActiveError('Debe ingresar la Cantidad');
                    mensajesX = mensajesX + "*" + "Debe ingresar la Cantidad" + "\n";

                }
                App.taAlerts.setValue(mensajesX);

                return true;
            }
        } else {
            return false;
        }

    }
    function noDuplicado2(valor) {

        //alert('te encontre')
        if (/*App.Dosis.getValue() != null && */App.Cantidad.getValue() != null) {


            var noHayDuplicado = true;

            var numero = grillaActiva.replace('grillaExamenes1', '')


            App.NumeroStoreM.setValue(numero);
            var grilla = grillaActiva;
            var store1 = 'storeExamenes1' + numero;

            Ext.getStore(store1).each(function (r) {

                if (trim(r.get('Linea')) == trim(App.Linea.getValue()) &&
                    trim(r.get('Familia')) == trim(App.Familia.getValue()) &&
                    trim(r.get('SubFamilia')) == trim(App.SubFamilia.getValue())) {
                    noHayDuplicado = false;
                }
            });
            if (!noHayDuplicado) {
                //alert('encontrado');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Ya existe registro.',
                        tipo: 'WARNING'
                    }
                });
            }
            // alert(estados);


            App.taAlertsM.setVisible(false);


            return noHayDuplicado;

        }
        else {
            /*Ext.net.DirectMethod.request({
                url: '(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe completar los campos obligarios.',
                    tipo: 'WARNING'
                }
            });*/
            App.taAlertsM.setVisible(true);
            var mensajesX = "";
            //if (App.Dosis.getValue() == null) {
            //    Ext.getCmp('Dosis').setActiveError('Debe ingresar la dosis');
            //    mensajesX = mensajesX + "*" + "Debe ingresar la dosis" + "\n";

            //}
            if (App.CantidadX.getValue() == null) {
                Ext.getCmp('Cantidad').setActiveError('Debe ingresar la Cantidad');
                mensajesX = mensajesX + "*" + "Debe ingresar la Cantidad" + "\n";

            }

            App.taAlertsM.setValue(mensajesX);

            return true;
        }


    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
        }

    function Deshabilita2() {


        if (App.CondicionEgreso.getValue() == 5) {
            App.CausaMuerte.setVisible(true);
            App.CausaMuerte.focus();

            App.Necropsia.setVisible(true);
            App.Necropsia.focus();



        }
        else {
            App.CausaMuerte.setVisible(false);
            App.CausaMuerte.setValue(null);

            App.Necropsia.setVisible(false);
            App.Necropsia.setValue(null).Necropsia;
        }

    }






    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }

    function setImpresion(store) {
        //     App.btnImpresion.setVisible(false);
        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0) {

            //       App.btnImpresion.setVisible(true);
        }

    }





    function eventoVerIndicaciones(button, event) {

        var numero = button.id.replace('btnVerIndi', '')
        var store1 = 'storeExamenes' + numero;

        if (Ext.getStore(store1).getCount() > 0) {


            /*parent.App.East1.collapse();*/



            /* Ext.getCmp(button.id).hide();

            Ext.getCmp('btnSelDesactivo' + numero).show();

                        for (var i = 1; i < numerogrupo + 1; i++) {

                            if (i != numero) {
                                Ext.getCmp('btnSelDesactivo' + i).hide();
                                Ext.getCmp('btnSelActivo' + i).show();
                             }
                        }
            Indicaciones
            */
            var panel3 = Ext.getCmp('PanelIndicaciones' + numero);
            panel3.setVisible(true);

            for (var i = 1; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('PanelIndicaciones' + i).setVisible(false);

                }
            }
        }
        else {

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe ingresar almenos un registro',
                    tipo: 'WARNING'
                }
            });

        }

    };


    function addRecordDetalleG(grid) {
        //App.Window1.show();
        //alert(RegActivoMed);
        var numero = grillaActiva.replace('grillaExamenes', '')
        var grilla = grillaActiva;
        var store1 = 'storeExamenes' + numero;
        App.taAlerts.setVisible(false);
        Ext.getStore(store1).each(function (r) {
            ContDell++
        });
        grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
        EstadoDetalle = 2;
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    };






    function EnviarIndicacionesG() {
        var ArrayList1 = new Array();
        var i = 1;
        var ArrayList2 = new Array();
        var x = 1;
        var numero = grillaActiva.replace('grillaExamenes', '');
        App.storeExamenesDetalleIndicGrupo.each(function (r) {
            /*var secuenciatmp= null;
            if (numero=='0') {
                secuenciatmp: r.get('SecuenciaMedicamento');
            }
            else{
                secuenciatmp: numero;}*/

            //  alert(r.get('SecuenciaMedicamento'));
            var SS_HC_Indicaciones = {

                SecuenciaMedicamento: numero,
                GrupoMedicamento: numero,

                Secuencia: r.get('Secuencia'),
                TipoRegistro: r.get('TipoRegistro'),
                IdTipoIndicacion: r.get('IdTipoIndicacion'),
                Descripcion: r.get('Descripcion'),
                Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
            };
            ArrayList2.push(SS_HC_Indicaciones);
            x = x + 1;
        });
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: ArrayList1,
                selectionArray2: ArrayList2,
                Id: parseInt(numero),
                Evento: 'Temp',
                idgrupo: parseInt(numero),
                Version: 'CCEPF101'
            }
        });
        EstadoDetalle = 0;
        App.taAlerts.setVisible(false);
    }


    function addgrupo(NumGrupMed1) {
        if (parseInt(numerogrupo) <= parseInt(NumGrupMed1)) {
            numerogrupo = parseInt(NumGrupMed1) + 1;
        }
        var panelG = new Ext.Panel({
            id: 'Grupo' + numerogrupo,
            title: "GRUPO" + numerogrupo,
            //tbar: tb,
            html: "<div>ghggg</div>",
            border: false,
            hidden: true
        });

        Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
            id: 'Grupo' + numerogrupo,
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            //title: "GRUPO " + numerogrupo,
            //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
            border: false,
            hidden: true

        }));
        Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
            id: 'PanelIndicaciones' + numerogrupo,
            /*frame: true,*/
            layout: {
                type: 'vbox',
                align: 'stretch'
            },/**/
            //title: "GRUPO " + numerogrupo,
            //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
            border: false,
            hidden: true,
            items: [{

                xtype: 'fieldset',
                columnWidth: 0.5,
                title: 'Indicaciones Especificas del Grupo ' + numerogrupo,
                collapsible: true,
                defaultType: 'textfield',
                /* defaults: { anchor: '100%' },*/
                /*layout: 'anchor',*/
                items: [
                    {
                        xtype: 'combobox',
                        id: 'cbIdVia' + numerogrupo,
                        fieldLabel: 'Via',
                        readonly: true,
                        typeAhead: false,
                        lazyRender: false,
                        /*selectOnFocus: true,*/
                        forceSelection: true,
                        width: 250,
                        listWidth: 250,
                        lazyInit: true,
                        selectOnFocus: false,
                        /* maintainFlex: true,*/
                        hideMode: 'visibility',
                        triggerAction: "all",
                        editable: true,
                        hasfocus: true,

                        /*triggerAction: "all",*/
                        store: Ext.create('Ext.data.Store', {
                            id: 'storeG2',
                            fields: ['Name', 'ID'],

                            autoLoad: true,
                            proxy: {
                                type: 'ajax',
                                url: 'COMBOS2',
                                extraParams: { valor2: "TIPOVIA" },
                                reader: {
                                    type: 'json',
                                    root: 'data',
                                    idProperty: 'ID'
                                }
                            }
                        }

                        ),
                        valueField: 'ID',
                        displayField: 'Name'

                    }, {
                        xtype: 'form',
                        //title: 'Form',
                        layout: 'column',
                        border: false,
                        labelAlign: 'top',
                        defaults: {
                            xtype: 'container',
                            layout: 'form',
                            columnWidth: 0.25
                        },
                        items: [{
                            items: [{
                                xtype: 'numberfield',
                                readonly: true, ///modolectura
                                width: 200,
                                id: 'numeroFrecuencia' + numerogrupo,
                                fieldLabel: 'Frecuencia'
                            }]
                        }, {
                            items: [{
                                xtype: 'combobox',
                                id: 'cbUTfrecuencia' + numerogrupo,
                                fieldLabel: 'U. Tiempo',
                                readonly: true,
                                typeAhead: false,
                                lazyRender: false,
                                /*selectOnFocus: true,*/
                                forceSelection: true,
                                width: 200,
                                listWidth: 200,
                                lazyInit: true,
                                selectOnFocus: false,
                                /* maintainFlex: true,*/
                                hideMode: 'visibility',
                                triggerAction: "all",
                                editable: true,
                                hasfocus: true,
                                value: 64,
                                /*triggerAction: "all",*/
                                store: Ext.create('Ext.data.Store', {
                                    id: 'storeU',
                                    fields: ['Name', 'ID'],

                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: 'COMBOS2',
                                        extraParams: { valor2: "UNITIEMPO" },
                                        reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                        }
                                    }
                                }

                                ),
                                valueField: 'ID',
                                displayField: 'Name'
                            }]
                        }]
                    }, {
                        xtype: 'form',
                        //title: 'Form',
                        layout: 'column',
                        border: false,
                        labelAlign: 'top',
                        defaults: {
                            xtype: 'container',
                            layout: 'form',
                            columnWidth: 0.25
                        },
                        items: [{
                            items: [{
                                xtype: 'numberfield',
                                readonly: true, ///modolectura
                                width: 200,
                                id: 'numPeriodo' + numerogrupo,
                                fieldLabel: 'Periodo'
                            }]
                        }, {
                            items: [{
                                xtype: 'combobox',
                                id: 'cbUTperiodo' + numerogrupo,
                                fieldLabel: 'U. Tiempo',
                                readonly: true,
                                typeAhead: false,
                                lazyRender: false,
                                /*selectOnFocus: true,*/
                                forceSelection: true,
                                width: 200,
                                listWidth: 200,
                                lazyInit: true,
                                selectOnFocus: false,
                                /* maintainFlex: true,*/
                                hideMode: 'visibility',
                                triggerAction: "all",
                                editable: true,
                                hasfocus: true,
                                value: 64,
                                /*triggerAction: "all",*/
                                store: Ext.create('Ext.data.Store', {
                                    id: 'storeU',
                                    fields: ['Name', 'ID'],

                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: 'COMBOS2',
                                        extraParams: { valor2: "UNITIEMPO" },
                                        reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                        }
                                    }
                                }

                                ),
                                valueField: 'ID',
                                displayField: 'Name'
                            }]
                        }]
                    },

                    {
                        xtype: 'textareafield',
                        grow: true,
                        id: 'txtAindicacion' + numerogrupo,
                        fieldLabel: 'Indicación especifica',
                        width: 450,    /*,

                    anchor: '100%'*/
                    }]

            }]

        }));
        cargargrilla(parseInt(numerogrupo));

        numerogrupo = parseInt(numerogrupo) + 1;

    }


    var cargargrilla = function (numero) {
        //var d = data.length;
        var nomp = 'Grupo' + numero
        var Subpanel = Ext.getCmp(nomp);

        var myButton1 = new Ext.Button({
            id: 'btnSelDesactivo' + numero,
            html: "<b>Bienes/servicios</b>",
            iconCls: 'icon-plugindisabled',
            handler: this.eventoActivarSeleccion
        });
        var myButton2 = new Ext.Button({
            id: 'btnSelActivo' + numero,
            html: "<b>Bienes/servicios</b>",
            iconCls: 'icon-plugingo',
            hidden: true,
            handler: this.eventoDesactivarSeleccion
        });
        var myButton3 = new Ext.Button({
            id: 'btnVerIndi' + numero,
            html: "<b>Indicaciones</b>",
            /*iconCls: 'icon-plugingo',*/
            hidden: false,
            handler: this.eventoVerIndicaciones
        });

        var tb1 = new Ext.Toolbar({
            border: false,
            flex: 1,
            items: [
                {
                    xtype: 'label',
                    html: "<b><font color='#284A89'> GRUPO " + numerogrupo + "</font></b>"
                }, { xtype: 'tbfill' }, { xtype: 'tbseparator' }, myButton3, myButton1, myButton2,
            ]
        });

        var tb2 = new Ext.Toolbar({
            border: false,
            items: [{
                xtype: 'label',
                html: "<span style = 'color: " + COLOR_BLUE01 + "; '>" + "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" + "</span>"
            }
            ]
        });

        var comboP = new Ext.form.ComboBox({
            xtype: 'combobox',
            itemId: 'cbAVALORPRESENTACION',
            readonly: true,
            /*typeAhead: false,*/
            selectOnFocus: true,
            forceSelection: true,
            /*typeAhead: true,
            triggerAction: 'all',*/
            lazyRender: true,/**/
            lazyInit: true,
            selectOnFocus: false,
            maintainFlex: true,
            hideMode: 'visibility',
            triggerAction: "all",
            editable: true,
            hasfocus: true,
            /*  autoFocus: true,
           autoLoad: true,*/
            /*style: { 'class': 'x-form-field x-form-text x-form-focus x-field-form-focus x-field-default-form-focus' },*/
            /*hideEl: false,*/
            store: Ext.create('Ext.data.Store', {
                /*id: 'storeG',*/
                model: Ext.define('storeG', {
                    extend: "Ext.data.Model",
                    idProperty: 'ID',
                    fields: [
                        { name: "Name" },
                        { name: "ID" }
                    ]
                })

                ,
                /*fields: ['Name', 'ID'],*/
                /*data: {},*/
                autoLoad: true,
                proxy: {
                    type: 'ajax',
                    url: 'COMBOS',
                    extraParams: { valor: "UNIDADPRESENTACION" },
                    reader: {
                        type: 'json',
                        root: 'data',
                        idProperty: 'ID'
                    }
                }
            }

            ),
            valueField: 'ID',
            displayField: 'Name'
        });

        var comboV = new Ext.form.ComboBox({
            xtype: 'combobox',
            itemId: 'cbIdVia',
            readonly: true,
            typeAhead: false,
            lazyRender: false,
            /*selectOnFocus: true,*/
            forceSelection: true,

            lazyInit: true,
            selectOnFocus: false,
            maintainFlex: true,
            hideMode: 'visibility',
            triggerAction: "all",
            editable: true,
            hasfocus: true,

            triggerAction: "all",
            store: Ext.create('Ext.data.Store', {
                id: 'storeG2',
                fields: ['Name', 'ID'],

                autoLoad: true,
                proxy: {
                    type: 'ajax',
                    url: 'COMBOS2',
                    extraParams: { valor2: "TIPOVIA" },
                    reader: {
                        type: 'json',
                        root: 'data',
                        idProperty: 'ID'
                    }
                }
            }

            ),
            valueField: 'ID',
            displayField: 'Name'

        });



        Ext.util.Format.comboRenderer = function (combo) {
            return function (value) {
                var record = combo.findRecord(combo.valueField, value);
                return record ? record.get(combo.displayField) : combo.valueNotFoundText;
            }
        };


        var onFailure = function (data) {
            App.cmdGuardar.setDisabled(false);
        };



        var grid = Ext.create('Ext.grid.Panel', {
            id: 'grillaExamenes' + numero,
            /*renderTo: 'Grupo' + numerogrupo,
            layout: {
                padding: '10', align: 'stretch'
            },*/
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            stripeRows: true,
            /* forceFit: true,*/
            /*collapsible: true,*/
            enableColumnMove: true,
            enableColumnResize: true,
            enableColumnHide: false,
            /* frame: true,
            renderTo: Ext.getBody(),*/
            store: Ext.create('Ext.data.Store', {
                id: 'storeExamenes' + numero,
                model: Ext.define('storeExamenes' + numero, {/*Ext.id(), {*/
                    extend: "Ext.data.Model",
                    idProperty: 'Secuencia',
                    fields: [
                        { name: "Secuencia", type: 'string' },
                        { name: "IdUnidadMedida", type: 'int' },
                        { name: "Dosis", type: 'float' },
                        { name: "IdVia", type: 'int' },
                        { name: "Cantidad", type: 'float' },
                        { name: "Frecuencia", type: 'float' },
                        { name: "DiasTratamiento", type: 'float' },
                        { name: "Linea", type: 'string' },
                        { name: "Familia", type: 'string' },
                        { name: "SubFamilia", type: 'string' },
                        { name: "LineaDescripcion", type: 'string' },
                        { name: "FamiliaDescripcion", type: 'string' },
                        { name: "SubFamiliaDescripcion", type: 'string' },
                        { name: "Estado", type: 'int' },
                        { name: "TipoMedicamento", type: 'int' },
                        { name: "CodigoComponente", type: 'string' },
                        { name: "IndicadorEPS", type: 'int' },
                        { name: "TipoReceta", type: 'int' },
                        { name: "TipoComida", type: 'int' },
                        { name: "UnidadTiempo", type: 'int' },
                        { name: "Periodo", type: 'string' },
                        { name: "Indicacion", type: 'string' }
                    ]
                }),
                autoLoad: true,
                groupField: 'Secuencia',
                remoteSort: false,
                ispadingstore: true,
                remotepaging: true,/**/


                proxy: {

                    type: 'ajax',
                    url: 'CCEP0304_MEDICAMENTO',
                    extraParams: { tipoRecurso: 1, grupo: parseInt(numero) },
                    reader: {
                        type: "json",

                        root: 'data',
                        totalproperty: 'total',
                        idProperty: 'Secuencia'
                    }
                },
                listeners: {
                    load: function (ref, records, successful) {
                        if (records.length > 0) {
                            Ext.getCmp('numeroFrecuencia' + numero).setValue(records[0].data.Frecuencia);
                            Ext.getCmp('numPeriodo' + numero).setValue(records[0].data.Periodo);
                            Ext.getCmp('cbIdVia' + numero).setValue(records[0].data.IdVia);
                            Ext.getCmp('cbUTfrecuencia' + numero).setValue(records[0].data.UnidadTiempo);
                            Ext.getCmp('cbUTperiodo' + numero).setValue(records[0].data.TipoComida);
                            Ext.getCmp('txtAindicacion' + numero).setValue(records[0].data.Indicacion);
                        } else {
                            /*alert('Image load error.');*/
                        }
                    }

                }
            }),
            columns: {
                items: [
                    {
                        dataIndex: "IndicadorEPS",
                        text: "EPS",
                        width: 30,
                        sortable: true,
                        hideable: true,
                        renderer: function (value) {
                            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
                            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
                            if (value == 1)
                                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
                            else if (value == 2)
                                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
                            else if (value == 3)
                                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
                            else if (value == 4)
                                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
                            else
                                return Ext.String.format(template, "gray", "No especificada");
                        }
                    },
                    {
                        dataIndex: "Secuencia",
                        text: "Nro",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "TipoReceta",
                        text: "Modalidad",
                        width: 60,
                        renderer: function (value) {
                            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
                            var template = '<span style="color:{0};">{1}</span>';
                            if (value == 6)
                                return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
                            if (value == 5)
                                return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
                            if (value == 19)
                                return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
                            if (value == 3)
                                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
                            else
                                return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");

                        }
                    },
                    {
                        dataIndex: "SubFamiliaDescripcion",
                        text: "Medicamentos",
                        xtype: 'componentcolumn',
                        flex: 1,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true,
                            maskRe: /¬/
                        }
                    },
                    {
                        dataIndex: "Dosis",
                        text: "Dosis",
                        xtype: 'componentcolumn',
                        width: 70,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "IdUnidadMedida",
                        text: "Und. Medida", /*"Presentación",*/
                        /*xtype: 'componentcolumn',*/
                        width: 100,
                        /*sortable: true,*/
                        /* mode: 'local',*/
                        queryMode: 'local',
                        /*hideable: true,*/
                        editor: comboP,
                        renderer:/* Ext.ux.util.ComboRenderer,*/Ext.util.Format.comboRenderer(comboP)/*comboRenderer*/


                    },
                    {
                        dataIndex: "IdVia",
                        text: "Via",
                        /*xtype: 'componentcolumn',*/
                        width: 110,
                        /*sortable: true,*/
                        /* mode: 'local',*/
                        queryMode: 'local',
                        hidden: true,
                        editor: comboV,
                        renderer: Ext.util.Format.comboRenderer(comboV)


                    },
                    {
                        dataIndex: "Cantidad",
                        text: "Cantidad",
                        xtype: 'componentcolumn',
                        width: 80,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "Frecuencia",
                        text: "C/. hr.",
                        xtype: 'componentcolumn',
                        width: 70,
                        hidden: true,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "DiasTratamiento",
                        text: "Dias",
                        xtype: 'componentcolumn',
                        width: 70,
                        hidden: true,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///moddolectura
                        }
                    },
                    {
                        dataIndex: "TipoComida",
                        text: "TipoComida",
                        xtype: 'componentcolumn',
                        width: 70,
                        editor: true,
                        hidden: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "UnidadTiempo",
                        text: "Und. Tiempo",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "Periodo",
                        text: "Periodo",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "Indicacion",
                        text: "Indicaciones Especificas",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        text: "Acción",
                        xtype: 'actioncolumn',
                        width: 70,

                        items: [{
                            xtype: 'button',
                            // disabled: true, ///moddolectura,
                            //commandname: 'Delete',
                            /* id: 'elimina'+numero,*/
                            iconCls: 'icon-delete',
                            text: 'Eliminar',
                            html: "<b>Eliminar</b>",
                            tooltip: 'Eliminar',
                            handler: function (grid, rowIndex, colIndex) {


                                var grid = Ext.getCmp('grillaExamenes' + numero);
                                var selection = grid.getView().getSelectionModel().getSelection()[0];
                                var record = grid.getStore().getAt(rowIndex);
                                seleccRecordActual = record;
                                if (record != null) {
                                    /*setIndicaCambios(true);*/
                                    var store = grid.store;
                                    Ext.net.DirectMethod.request({
                                        url: '@(Url.Action("addDataEliminarMedicamentos"))',
                                        params: {
                                            MODO: 'DELETE',
                                            id: record.data.Secuencia,
                                            tipo: 1
                                        }

                                    });
                                    store.remove(record);
                                    record = null;

                                }


                            }

                        }]
                    }

                ]
            },
            selModel: {
                selType: 'rowmodel',
                mode: 'MULTI'
            }, viewConfig: {
                forceFit: true
            },
            plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                clicksToEdit: 1
            })
            ],
            tbar: [tb1],
            //bbar: [tb2 ],
            // enableDragDrop: true,
            // stripeRows: true,
            //autoExpandColumn: 'name',
            width: '100%',
            // height: 325,
            /* region: 'west'*/
            listeners: {
                mouseover: {
                    fn: function (e) {
                        var grid = Ext.getCmp('grillaExamenes' + numero);
                        var idx = grid.getView().findRowIndex(e.target);
                        var row = this.getStore().getAt(idx);
                        //Ext.Msg.alert('ALERT', row.get('company') + ' - change:' + row.get('change'));
                    }
                }
            }
        });
        Subpanel.add(grid);
        Subpanel.doLayout();
    };



    function SelectDetalleRegistroGrupo(Obj) {

        RegActivoMed = Obj;

        if (Obj != 0) {
            App.IdMedicaGrupo.setValue("Indicaciones Especificas / Generales : Grupo " + Obj);
            var panel3 = App.Panel3;
            panel3.setVisible(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: "",
                    selectionArray2: "",
                    Id: RegActivoMed,
                    Evento: 'ListarDetalle',
                    idgrupo: RegActivoMed,
                    Version: 'CCEPF101'
                }
            });
        }
        else {
            var panel3 = App.Panel3;
            panel3.setVisible(false);
        }
    };





    function deleteActualG(grid, record) {
        seleccRecordActual = record;


        var numero = grillaActiva.replace('grillaExamenes', '');
        var grilla = grillaActiva;
        var store1 = 'storeExamenes' + numero;


        if (record != null) {
            setIndicaCambios(true);
            var store = Ext.getStore(store1);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addDataEliminarMedicamentos"))',
                params: {
                    MODO: 'DELETE',
                    id: record.data.Secuencia,
                    tipo: 1
                }
            });
            store.remove(record);
            record = null;
        }
    };

    var invalidFields = new Array();

    function updateActualGrupo(tipo, grid) {
        var indtipo = 1;
        var ArrayList0 = new Array();
        if (indtipo > 0) {
            setIndicaCambios(true);
            var numerotemp = numerogrupo;
            if (numerotemp == 0) { numerotemp = 1 }
            var numeroX = 0;
            var frecuencia = 0;
            var periodo = 0;
            var via = 0;
            var unitiempo1 = 0;
            var unitiempo2 = 0;
            var txtindicacion = '';
            for (var i = 0; i < numerotemp; i++) {
                var grid1 = Ext.getCmp('grillaExamenes' + i);
                var store = grid1.store;
                var fila = 0;
                numeroX = numeroX + 1;



                grid1.store.each(function (r) {
                    ///VALIDACIÓN
                    fila = fila + 1;
                    /*setValuesGridFormGrupo(r, null, 'MEDICINA');
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');*/

                    if (i == 0) {
                        frecuencia = r.get('Frecuencia');
                        periodo = r.get('Periodo');
                        via = r.get('IdVia');
                        unitiempo1 = r.get('UnidadTiempo');
                        unitiempo2 = r.get('TipoComida');
                        txtindicacion = r.get('Indicacion');

                    } else {
                        frecuencia = Ext.getCmp('numeroFrecuencia' + i).getValue();
                        periodo = Ext.getCmp('numPeriodo' + i).getValue();
                        via = Ext.getCmp('cbIdVia' + i).getValue();
                        unitiempo1 = Ext.getCmp('cbUTfrecuencia' + i).getValue();
                        unitiempo2 = Ext.getCmp('cbUTperiodo' + i).getValue();
                        txtindicacion = Ext.getCmp('txtAindicacion' + i).getValue();
                    }



                    var HC_Medicamento = {
                        Secuencia: r.get('Secuencia'),
                        IdUnidadMedida: r.get('IdUnidadMedida'),
                        Dosis: r.get('Dosis'),
                        IdVia: via,
                        TipoComida: unitiempo2,/*r.get('TipoComida'),*/
                        Cantidad: r.get('Cantidad'),
                        Frecuencia: frecuencia,
                        DiasTratamiento: r.get('DiasTratamiento'),
                        Linea: r.get('Linea'),
                        Familia: r.get('Familia'),
                        SubFamilia: r.get('SubFamilia'),
                        LineaDescripcion: r.get('LineaDescripcion'),
                        FamiliaDescripcion: r.get('FamiliaDescripcion'),
                        SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                        GrupoMedicamento: i,
                        /*Comentario: r.get('Comentario'),*/
                        TipoMedicamento: r.get('TipoMedicamento'),
                        Estado: r.get('Estado'),
                        UnidadTiempo: unitiempo1,
                        CodigoComponente: r.get('CodigoComponente'),
                        IndicadorEPS: r.get('IndicadorEPS'),
                        Periodo: periodo,
                        Indicacion: txtindicacion
                    };
                    ArrayList0.push(HC_Medicamento);
                });

            }

        }
        return ArrayList0;
    };


    function GetGrillaActual() {
        var numero = grillaActiva.replace('grillaExamenes', '')
        return numero

    };
    var setValuesGridFormGrupo = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var CodigoComponente = r.get('CodigoComponente');

        App.Linea.setValue(Linea == null ? null : Linea);

        App.Familia.setValue(Familia == null ? null : Familia);
        App.Dosis.setValue(Dosis == 0 ? null : Dosis);
        App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
        App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
        App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
    };


    function recargarGrilla() {
        // alert('hola');
        var numero = grillaActiva.replace('grillaExamenes', '');
    /*var grilla = grillaActiva;*/
        var store1 = 'storeExamenes' + numero;
        /*storeG2*/
        var grid1 = Ext.getCmp('grillaExamenes' + numero);
        var store = grid1.store;

        if (numero == 0) {
            grid1.store.reload();

        } else {
            grid1.getView().refresh();
        }


    }

    function getActualizar(grid) {

        var indtipo = 1;
        if (lectura != "True") {
            /*   alert(lectura);*/
            App.Panel1.setVisible(true);

            /* App.Panel8.setVisible(true);*/
            App.btnAgregar.setVisible(false);
            App.btnModificar.setVisible(true);
            seleccRecordActual = grid;
            setIndicaCambios(true);
            invalidFields = setValuesGridForm(seleccRecordActual, null, 'MEDICINA');
        }
    }

    function getActualizarX(grid) {
        var indtipo = 1;
        if (lectura != "True") {
            /*   alert(lectura);*/
            /*  App.Panel1.setVisible(true);*/
            Edito = true;
            App.Panel8.setVisible(true);
            App.btnAgregarX.setVisible(false);
            App.btnModificarX.setVisible(true);
            seleccRecordActual = grid;
            setIndicaCambios(true);
            invalidFields = setValuesGridFormX(seleccRecordActual, null, 'MEDICINA');
        }
    }


    var setValuesGridForm = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var MedicamentoDescripcion = r.get('MedicamentoDescripcion');
        var CodigoComponente = r.get('CodigoComponente');
        var TipoReceta = r.get('TipoReceta');
        var Periodo = r.get('Periodo');
        var UnidadTiempo = r.get('UnidadTiempo');
        var Indicacion = r.get('Indicacion');

        var CodAlmacen = r.get('CodAlmacen');

        var Medicamento = r.get('Medicamento');
        var IndicadorEPS = r.get('IndicadorEPS');
        var Presentacion = r.get('Presentacion');
        var TipoComida = r.get('TipoComida');
        var Accion = r.get('Accion');

        // alert(CodAlmacen);

        //alert(r.getValue());

        App.Linea.setValue(Linea == null ? null : Linea);
        App.LineaDescripcion.setValue(LineaDescripcion == null ? null : LineaDescripcion);

        App.Familia.setValue(Familia == null ? null : Familia);
        App.FamiliaDescripcion.setValue(FamiliaDescripcion == null ? null : FamiliaDescripcion);

        App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
        App.SubFamiliaDescripcion.setValue(SubFamiliaDescripcion == null ? null : SubFamiliaDescripcion);


        App.CodigoComponente.setValue(CodigoComponente == null ? null : CodigoComponente);
        App.MedicamentoDescripcion.setValue(MedicamentoDescripcion == null ? null : MedicamentoDescripcion);
        App.Medicamento.setValue(Medicamento == null ? null : Medicamento);

        App.Accion.setValue(Accion == null ? null : Accion);
        App.TipoComida.setValue(TipoComida == null ? null : TipoComida);
        App.IndicadorEPS.setValue(IndicadorEPS == null ? null : IndicadorEPS);
        App.Secuencia.setValue(Secuencia == null ? null : Secuencia);

        App.Presentacion.setValue(Presentacion == null ? null : Presentacion);
        App.cbIdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        App.Dosis.setValue(Dosis == 0 ? null : Dosis);
        App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.TipoReceta.setValue(TipoReceta == 0 ? null : TipoReceta);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
        App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
        App.UnidadTiempo.setValue(UnidadTiempo == 0 ? null : UnidadTiempo);

        App.Periodo.setValue(Periodo == null ? null : Periodo);
        App.Indicacion.setValue(Indicacion == null ? null : Indicacion);

        App.CodAlmacen.setValue(CodAlmacen == null ? null : CodAlmacen);
        console.log(TipoReceta)

    };



    var setValuesGridFormX = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var MedicamentoDescripcion = r.get('MedicamentoDescripcion');
        var CodigoComponente = r.get('CodigoComponente');
        var TipoReceta = r.get('TipoReceta');
        var Periodo = r.get('Periodo');
        var UnidadTiempo = r.get('UnidadTiempo');
        var Indicacion = r.get('Indicacion');

        var CodAlmacenX = r.get('CodAlmacen');


        var Medicamento = r.get('Medicamento');
        var IndicadorEPS = r.get('IndicadorEPS');
        var Presentacion = r.get('Presentacion');
        var TipoComida = r.get('TipoComida');
        var Accion = r.get('Accion');

        //  alert(CodAlmacenX);

        App.LineaX.setValue(Linea == null ? null : Linea);
        App.LineaDescripcionX.setValue(LineaDescripcion == null ? null : LineaDescripcion);

        App.FamiliaX.setValue(Familia == null ? null : Familia);
        App.FamiliaDescripcionX.setValue(FamiliaDescripcion == null ? null : FamiliaDescripcion);

        App.SubFamiliaX.setValue(SubFamilia == null ? null : SubFamilia);
        App.SubFamiliaDescripcionX.setValue(SubFamiliaDescripcion == null ? null : SubFamiliaDescripcion);

        App.CodigoComponenteX.setValue(CodigoComponente == null ? null : CodigoComponente);
        App.MedicamentoDescripcionX.setValue(MedicamentoDescripcion == null ? null : MedicamentoDescripcion);
        App.MedicamentoX.setValue(Medicamento == null ? null : Medicamento);

        App.AccionX.setValue(Accion == null ? null : Accion);
        /*App.TipoComida.setValue(TipoComida == null ? null : TipoComida);*/
        App.IndicadorEPSX.setValue(IndicadorEPS == null ? null : IndicadorEPS);
        App.SecuenciaX.setValue(Secuencia == null ? null : Secuencia);

        App.PresentacionX.setValue(Presentacion == null ? null : Presentacion);
        App.cbIdUnidadMedidaM.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        /*  App.DosisX.setValue(Dosis == 0 ? null : Dosis);
       App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);*/
        App.CantidadX.setValue(Cantidad == 0 ? null : Cantidad);
        /*App.UnidadTiempo.setValue(UnidadTiempo == 0 ? null : UnidadTiempo);

        App.Periodo.setValue(Periodo == null ? null : Periodo);*/
        App.IndicacionX.setValue(Indicacion == null ? null : Indicacion);

        App.CodAlmacenX.setValue(CodAlmacenX == null ? null : CodAlmacenX);

        //App.txtIndicaciones1.setValue(Indicacion1 == null ? null : Indicacion1);


    };

    function getValidarDatos(valor) {
        // Revisar, agregar componente, Jordan
        varIsValidForm = true;
        beforeSaveNew(App.formactual, 'Agregar'); // Valida Cabecera
        if (varIsValidForm) {

        }

        return varIsValidForm;
    }
    var beforeSaveNew = function (form, Accion) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);

        var FieldsInvalidos = getInvalidFieldsNew(form, Accion);

        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }
    };
    var varIsValidForm = true;
    var getInvalidFieldsNew = function (form, Accion) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        var varValidar = false;
        fields.filterBy(function (field) {
            if (Accion == 'Agregar') {  // ò Modificar
                varValidar = true;
                if (field.name == 'Indicacion') {
                    //varValidar = true;
                }
                if (field.name == 'Comentario') {
                    varValidar = false;
                }
            } else if (Accion == 'Enviar') {

                if (field.name == 'Comentario') {
                    varValidar = true;
                }

            }
            if (!field.isValid() && varValidar) {
                // alert('if ' + field.name);
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                varIsValidForm = false;
            } else {
                //alert('else ' + field.name);
            }
        });
        return invalidFields;
    };



    function AgregarDatitoTemp() {









    }













    function AgregarMaterialTemp() {
        App.storeExamenes1.reload();
        var cantidad = App.CantidadX.getValue();
        var unidad = App.cbIdUnidadMedidaM.getValue();
        var codAlmacenX = App.CodAlmacenX.getValue();

        if (unidad != null) {

            if (cantidad != null) {
                if (noDuplicado2('DATA')) {

                    var ArrayList1 = new Array();
                    var BE_Medicamento_FE = {

                        Linea: App.LineaX.getValue(),
                        LineaDescripcion: App.LineaDescripcionX.getValue(),
                        Familia: App.FamiliaX.getValue(),
                        FamiliaDescripcion: App.FamiliaDescripcionX.getValue(),
                        SubFamilia: App.SubFamiliaX.getValue(),
                        CodigoComponente: App.CodigoComponenteX.getValue(),
                        SubFamiliaDescripcion: App.SubFamiliaDescripcionX.getValue(),
                        Medicamento: App.MedicamentoX.getValue(),
                        MedicamentoDescripcion: App.MedicamentoDescripcionX.getValue(),
                        Presentacion: App.PresentacionX.getValue(),
                        Cantidad: App.CantidadX.getValue(),
                        IdUnidadMedida: App.cbIdUnidadMedidaM.getValue(),
                        IndicadorEPS: App.IndicadorEPSX.getValue(),
                        Secuencia: 0,/*App.SecuenciaX.getValue(),*/
                        Indicacion: App.IndicacionX.getValue(),
                        CodAlmacen: codAlmacenX,
                        Accion: App.AccionX.getValue()
                    }

                    ArrayList1.push(BE_Medicamento_FE);


                    if (App.IndicacionX.getValue().length > 250) {
                        /* alert(App.IndicacionX.getValue().length);*/
                        App.IndicacionX.setActiveError('El campo Indicaciones solo admite 250 caracteres.');

                        App.taAlertsM.setValue('*El campo Indicaciones solo admite 250 caracteres.');
                        App.taAlertsM.setVisible(true);
                        return false;
                    }
                    else {
                        App.taAlertsM.setValue('');
                        App.taAlertsM.setVisible(false);
                    }
                    // alert('holaa');
                    App.lblValidacion.setValue('A');

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("Save_MedicamentoTemp_X"))',
                        params: {
                            dato: ArrayList1,
                            id: '0'
                        }
                    });
                    haynuevos = true;
                    recargarGrilla();
                    App.taAlertsM.setVisible(false);
                    App.taAlertsM.setValue(null);

                }
                else {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    /*valor.setValue('');*/
                    return;
                }
            }
            else {
                //alert('hola');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe ingresar la cantidad',
                        tipo: 'WARNING'
                    }
                });
                /*valor.setValue('');*/
                return;
            }

        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe seleccionar la unidad de medida',
                    tipo: 'WARNING'
                }
            });
            /*valor.setValue('');*/
            return;


        }


    }


    function ModificarMaterialTemp() {
        var cantidad = App.CantidadX.getValue();
        var unidad = App.cbIdUnidadMedidaM.getValue();

        if (unidad != null) {

            if (cantidad != null) {
                /*if (getValidarDatos('DATA')) {*/

                var ArrayList1 = new Array();
                var BE_Medicamento_FE = {

                    Linea: App.LineaX.getValue(),
                    LineaDescripcion: App.LineaDescripcionX.getValue(),
                    Familia: App.FamiliaX.getValue(),
                    FamiliaDescripcion: App.FamiliaDescripcionX.getValue(),
                    SubFamilia: App.SubFamiliaX.getValue(),
                    CodigoComponente: App.CodigoComponenteX.getValue(),
                    SubFamiliaDescripcion: App.SubFamiliaDescripcionX.getValue(),
                    Medicamento: App.MedicamentoX.getValue(),
                    MedicamentoDescripcion: App.MedicamentoDescripcionX.getValue(),
                    Presentacion: App.PresentacionX.getValue(),
                    Cantidad: App.CantidadX.getValue(),
                    IdUnidadMedida: App.cbIdUnidadMedidaM.getValue(),
                    IndicadorEPS: App.IndicadorEPSX.getValue(),
                    Secuencia: App.SecuenciaX.getValue(),
                    Indicacion: App.IndicacionX.getValue(),
                    Accion: App.AccionX.getValue()
                }
                ArrayList1.push(BE_Medicamento_FE);

                if (App.IndicacionX.getValue().length > 250) {
                    /* alert(App.IndicacionX.getValue().length);*/
                    App.IndicacionX.setActiveError('El campo Indicaciones solo admite 250 caracteres.');
                    App.taAlertsM.setValue('*El campo Indicaciones solo admite 250 caracteres.');
                    App.taAlertsM.setVisible(true);
                    return false;
                }
                else {
                    App.taAlertsM.setValue('');
                    App.taAlertsM.setVisible(false);
                }


                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Editar_MedicamentoTemp_X"))',
                    params: {
                        dato: ArrayList1,
                        id: '0'
                    }
                });
                recargarGrilla();

            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe ingresar la cantidad',
                        tipo: 'WARNING'
                    }
                });
                /*valor.setValue('');*/
                return;

            }

        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe seleccionar la unidad de medida',
                    tipo: 'WARNING'
                }
            });
            /*valor.setValue('');*/
            return;


        }
    }
    function setear(store, dato) {
        var codigo;
        if (opcion_display == "") {
            if (dato.length > 0) {
                codigo = dato[0].data.codigo;
            }
        } else {
            for (var x = 0; x < dato.length; x++) {
                /* alert(dato[x].data.name+" = "+ opcion_display)*/
                if (dato[x].data.name == opcion_display) {
                    codigo = dato[x].data.codigo;
                }
            }
        }
        if (dato.length > 0) {
            if (Edito == false) {
                Ext.getCmp('cbIdUnidadMedida').setValue(codigo);
            }
        }
    }

    function setear2(store, dato) {
        /* App.StoreUM.on('load', function (store) {*/
        var codigo;
        if (opcion_display == "") {
            if (dato.length > 0) {
                codigo = dato[0].data.codigo;
            }
        } else {
            for (var x = 0; x < dato.length; x++) {
                /* alert(dato[x].data.name+" = "+ opcion_display)*/
                if (dato[x].data.name == opcion_display) {
                    codigo = dato[x].data.codigo;
                }
            }
        }
        if (dato.length > 0) {
            if (Edito == false) {
                Ext.getCmp('cbIdUnidadMedidaM').setValue(codigo);
            }
        }
        /* });*/
    }


    var keyCode
    function ReplaceCaracterEspec(e) {
        /*Capturar tecla pulsada*/
        if (window.event) keyCode = window.event.keyCode;
        else if (e) keyCode = e.which;
        var prueba = keyCode;
        // alert(keyCode);
        //
        if (prueba == 60) {
            var textactual = e.getValue();
            e.value = e.setValue(textactual + " ");
        }
        var texto = e.getValue();
        var vacio = "";
        var cadena = vacio + e.getValue();
        var recortado = cadena.substr(-1, 1);
        // alert(recortado + ' antes');
        if (recortado == "<" || recortado == ">") {
            //  alert(recortado + ' despues');
            e.value = e.setValue(texto + " ");
        }

        //if (e.value.length <= 500) {

        //} else {
        //    var cadena1 = e.getValue();
        //    var recort = cadena1.substr(0, 500);
        //    e.value = e.setValue(recort);
        //}

    }



    var keyCode2;
    function isNumberKey() {
        if ((event.keyCode < 48) || (event.keyCode > 57)) {
            event.returnValue = false;
        }
    }





    function iniCializar() {


        App.UnidadTiempo.setValue("Hora");
        App.UnidadTiempo.getStore().load()
        App.TipoComida.setValue("Dia");
        App.medHora.setValue("64");
        App.medDia.setValue("65");
        App.TipoComida.getStore().load()


        //alert("ddd");
    }
    function cambiaValorDia(valor) {
        if (valor != 'Dia') {
            App.medDia.setValue(valor);
        }

    }
    function cambiaValorHora(valor) {
        if (valor != 'Hora') {
            App.medHora.setValue(valor);
        }

    }
    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formActual.setDisabled(true);
        var reload = true;
        if (data != null) {

            if (data.length > 0) {
                reload = false;
                App.cmdGuardar.setDisabled(false);
                App.formActual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };



         /*var grillaActiva = null;*/
    var grillaActiva = null;
    function eventoDesactivarSeleccion(btnComponente, btnComponenteMostrar) {
        btnComponente.setVisible(false);

        if (btnComponente == App.btnSelDesactivo0M) {
            parent.App.cbLinea.setDisabled(false);

        } else {
            parent.App.cbLinea.setDisabled(true);
        }

        btnComponenteMostrar.setVisible(true);
        grillaActiva = null;
        parent.App.East1.collapse();
    };

    function eventoActivarSeleccion(btnComponente, btnComponenteMostrar, idGrillaActiva) {
        App.btnSelDesactivo0M.setVisible(true);
        App.btnSelActivo0M.setVisible(false);

        if (btnComponente == App.btnSelDesactivo0) {
            parent.App.cbLinea.setDisabled(true);
            parent.App.cbAlmacen.setDisabled(false);

        } else {
            parent.App.cbLinea.setDisabled(false);
            parent.App.cbAlmacen.setDisabled(false);

        }

        App.btnSelDesactivo0.setVisible(true);
        App.btnSelActivo0.setVisible(false);
        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);
        grillaActiva = idGrillaActiva;
        parent.App.East1.expand();

        if (grillaActiva == 'grillaExamenes1') {
            /* parent.App.PanelServicios.items.items[3].ownerCt.items.items[3].items.items["0"].items.items["0"].setValue("13");*/
            parent.App.cbLinea.setValue('@opcion');
            parent.App.cbAlmacen.setValue('@opcionAlmacen')


            parent.App.StoreBuscarServicios.reload()
        }
        else {
            parent.App.cbLinea.setValue("04");
            parent.App.cbAlmacen.setValue('@opcionAlmacen')
            parent.App.StoreBuscarServicios.reload()
        }

        grillaActiva = idGrillaActiva;

    };




        function eventoActivarSeleccionMaterialEspecializado (btnComponente, btnComponenteMostrar, idGrillaActiva)  {


        if (btnComponente == App.btnSelDesactivo0) {
            parent.App.cbLinea.setDisabled(true);
            parent.App.cbAlmacen.setDisabled(false);

        } else {
            parent.App.cbLinea.setDisabled(false);
            parent.App.cbAlmacen.setDisabled(false);

        }

        App.btnSelDesactivo0.setVisible(true);
        App.btnSelActivo0.setVisible(false);
        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);


            parent.App.cbLinea.setVisible(true);
            //  parent.App.cbFamilia.setVisible(true);
            parent.App.cbFamilia.setVisible(true);
            //parent.App.cmbStock.setVisible(true);


            //parent.App.VistaPanelEas.setVisible(true);

            //parent.App.VistaPanelEas..reload();


              if (grillaActiva == 'grillaExamenes0') {
            parent.App.cbLinea.setValue('@opcion');
            parent.App.cbAlmacen.setValue('@opcionAlmacen')


            parent.App.StoreBuscarServicios.reload()
        }
        else {
            parent.App.cbLinea.setValue("04");
            parent.App.cbAlmacen.setValue('@opcionAlmacen')
            parent.App.StoreBuscarServicios.reload()
        }

            grillaActiva = idGrillaActiva;


            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '3805'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            var numero = btnComponente.id.replace('btnSelDesactivo0', '');
            Ext.getCmp(btnComponente.id).hide();
            Ext.getCmp('btnSelActivo0' + numero).show();



            grilla_Actual = "grillaExamenes0";

            grillaActiva = "grillaExamenes0";

            Ext.getCmp('IdbtnDesactivoSecundario').show();
            Ext.getCmp('IdbtnActivoSecundario').hide();

            Ext.getCmp('IdbtnDesactivoPrincipal').show();
            Ext.getCmp('IdbtnActivoPrincipal').hide();


        };


        function eventoDesactivarSeleccionMaterialEspecializado(button, event) {
            grillaActiva = null;
            parent.App.East1.collapse();
            var numero = button.id.replace('btnSelActivo0', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('btnSelDesactivo0' + numero).show();
            //Ext.getCmp('IdbtnDesactivoSecundario').show();

        };




    </script>






}
}


@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                    .ItemID("center")
                    .DefaultAnchor("100%")
                    .AutoScroll(true)
                    .Height(340)
                    .Header(false)
                    .Border(true)
                    .ID("formactual")
                    .Listeners(l =>
                    {
                        l.Render.Handler = "eventoRenderForm();";
                    })


               .Items(X.Toolbar().ID("TBImprimir").Hidden(indicaModoLectura2)
               .Items(X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)

                                .ID("btnImpresion2")
                                .Handler("eventoVisorReporte('');")),

                                X.FieldSet().Collapsible(true).Hidden(true)
                                 .ColumnWidth(0.4)
                                 .Title("<b>Leyenda</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                 .Items(

                                   Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 10 00")
                                    .Items(
                                        X.Label().Html("<div  style='padding-right:10px;Color:#FE642E;'> <font> Modalidad: </font></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_YELLOW02 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >CPM</small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_GREEN01 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >PPS</small></div>"),
                                        X.ToolbarSeparator(),
                                         X.ToolbarSpacer(15),

                                        X.Label().Html("<div  style='padding-right:10px;Color:#FE642E;'> <font> EPS: </font></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_RED01 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >No Coberturado </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_GREEN01 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Coberturado </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_ORANGE01 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Auditoría </small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_YELLOW02 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Carta de Garantía </small></div>")
                                    )
                                 )


                                 ,


                X.Image()
                                 .ID("capa"),

                                //  X.NumberFieldFor(c => c.IndicadorEPS).FieldLabel("EPS").Hidden(false),

                                X.FormPanel()
                                .ID("Panel1")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                        X.FieldSet()
                                         .ColumnWidth(0.4)
                                         .Title("<b>INFORMACIÓN DE MEDICAMENTO</b>")
                                         .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })

                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                              X.Container().Layout(LayoutType.HBox)
                                              .Defaults(d =>
                                              {
                                                  d.Add(new Parameter("LabelWidth", "70"));
                                              })
                                              .Items(
                                                X.NumberFieldFor(c => c.IndicadorEPS).FieldLabel("EPS").Hidden(true),
                                                X.TextFieldFor(c => c.Secuencia).FieldLabel("Secuencia").Hidden(true),
                                                X.TextFieldFor(c => c.Accion).FieldLabel("Accion").Hidden(true)
                                              ),
                                              X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                                                        //.MarginSpec("0 0 10")
                                                        .Items(
                                                            X.TextFieldFor(c => c.Linea).Hidden(true)
                                                             .FieldLabel("Linea").ReadOnly(true)
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.LineaDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                              X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                              .Defaults(d =>
                                                              {
                                                                  d.Add(new Parameter("LabelWidth", "70"));
                                                              })
                                                              .Items(
                                                              X.TextFieldFor(c => c.Familia).ReadOnly(true).Hidden(true)
                                                             .FieldLabel("Familia")
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.FamiliaDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                            X.TextFieldFor(c => c.SubFamilia).ReadOnly(true)
                                                             .FieldLabel("DCI")
                                                             .Listeners(ls =>
                                                                    ls.Change.Handler = "App.cbIdUnidadMedida.clearValue(); App.cbIdUnidadMedida.getStore().load(); iniCializar();")
                                                             .Width(160),
                                                            X.TextFieldFor(c => c.CodigoComponente).ReadOnly(true).Hidden(true),
                                                            X.TextFieldFor(c => c.SubFamiliaDescripcion).ReadOnly(true).Flex(1)
                                                              //.Listeners(l => { l.Change.Handler = "SubFamilia(this);"; })
                                                              .FieldLabel("")

                                                              )
                                                           ,

                                                               X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                            X.TextFieldFor(c => c.CodAlmacen).ReadOnly(true)
                                                             .FieldLabel("Almacen:")
                                                             .Hidden(true)
                                                            .EnableKeyEvents(true)
                                                            .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                                               ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                            X.TextFieldFor(c => c.Medicamento).ReadOnly(true)
                                                             .FieldLabel("Med/DCI")
                                                              .Width(160),
                                                            X.TextFieldFor(c => c.MedicamentoDescripcion).ReadOnly(true)
                                                              .FieldLabel("").Flex(1)
                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                             .Items(
                                                              X.Component(),
                                                            X.ComboBoxFor(c => c.IdUnidadMedida)
                                                                    .ID("cbIdUnidadMedida")
                                                                    .FieldLabel("U. Medida")
                                                                    .TypeAhead(true)
                                                                    .QueryMode(DataLoadMode.Local)
                                                                    .ForceSelection(true)
                                                                    .TriggerAction(TriggerAction.All)
                                                                    .DisplayField("name")
                                                                    .ValueField("codigo")
                                                                    .EmptyText("Loading...")
                                                                    /*.Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))*/
                                                                    .ValueNotFoundText("Loading...")

                                                                    .Listeners(l =>
                                                                            l.Select.Handler = "App.cbIdUnidadMedida.setValue(App.cbIdUnidadMedida.getValue());")
                                                                    .Store(Html.X().Store()/*.ID("StoreUM")*/
                                                                        .AutoLoad(true).Listeners(l => { l.Load.Handler = "setear(this,records);"; })
                                                                        .Model(Html.X().Model()
                                                                            .IDProperty("Codigo")
                                                                            .Fields(
                                                                                new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                                                                                new ModelField("name", ModelFieldType.String) { Mapping = "Name" }
                                                                            )
                                                                        )
                                                                        .Proxy(Html.X().AjaxProxy()
                                                                            .Url(Url.Action("UnidadMedidas"))
                                                                            .Reader(Html.X().JsonReader().Root("data"))
                                                                        )
                                                                        .Parameters(ps =>
                                                                             ps.Add(new
                                                                             {
                                                                                 Linea = JRawValue.From("App.Linea.getValue()"),
                                                                                 Familia = JRawValue.From("App.Familia.getValue()"),
                                                                                 SubFamilia = JRawValue.From("App.SubFamilia.getValue()"),
                                                                                 Accion = "MEDUNIDAMED"
                                                                             })
                                                                        )
                                                            ),
                                                             X.Component().Width(10),
                                                             X.TextFieldFor(c => c.medDia).Hidden(true)
                                                              .FieldLabel("variableA"),
                                                              X.TextFieldFor(c => c.medHora).Hidden(true)
                                                              .FieldLabel("variableB"),
                                                            Html.X().ComboBoxFor(c => c.IdVia)
                                                                        .FieldLabel("Vía").EmptyText("Seleccione").ReadOnly(indicaModoLectura)
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOVIA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true).Editable(false).AllowBlank(false),
                                                             X.Component().Width(10),
                                                            Html.X().ComboBoxFor(c => c.TipoReceta)
                                                                        .FieldLabel("Tipo Receta").EmptyText("Seleccione").ReadOnly(indicaModoLectura)
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPRECMEDI").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true).Editable(false).AllowBlank(false),
                                                             X.Component().Width(10),
                                     X.TextFieldFor(c => c.Presentacion).FieldLabel("Presentacion").Flex(1).Hidden(true).AllowBlank(true)
                                                             ),
                                                            





                                                X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                                                        //.MarginSpec("0 0 10")
                                                        .Items(
                                                        X.Component(),
                                                         X.NumberFieldFor(c => c.Periodo).AllowBlank(false).DecimalPrecision(2)
                                                             .MinValue(0)
                                                             .FieldLabel("Tratamiento"),
                                                            X.Component().Width(10),
                                                            Html.X().ComboBoxFor(c => c.TipoComida)
                                                                .FieldLabel("U. Tiempo")
                                                                .AutoSelect(true)
                                                               .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))
                                                                .Listeners(ls =>
                                                                         ls.Change.Handler = "cambiaValorDia(App.TipoComida.getValue());"
                                                                         )
                                                                .SimpleSubmit(true)
                                                                .Editable(false),
                                                          X.Component().Width(10),
                                                             X.NumberFieldFor(c => c.Cantidad).AllowBlank(false)
                                                             .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                             .FieldLabel("Cantidad")
                                                             .EnableKeyEvents(true)
                                                            .Listeners(l => { l.KeyPress.Handler = "isNumberKey()"; })
                                                                         ,

                                                             X.Component().Width(10)


                                                       ),

                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })
                                                        //.MarginSpec("0 0 10")
                                                        .Items(
                                                         X.NumberFieldFor(c => c.Frecuencia).AllowBlank(false).FieldLabel("C/").MinValue(1).MaskRe("/-+/").AllowExponential(false),
                                                         X.Component().Width(10),
                                                         Html.X().ComboBoxFor(c => c.UnidadTiempo).FieldLabel("U.Tiempo").SimpleSubmit(true).Editable(false).EmptyText("Dia")
                                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))
                                                                      .Listeners(ls =>
                                                                         ls.Change.Handler = "cambiaValorHora(App.UnidadTiempo.getValue());"),
                                                          X.Component().Width(10),
                                                                    X.NumberFieldFor(c => c.Dosis) /*.AllowBlank(false)*/
                                                                .MinValue(0).MaskRe("/-+/").AllowExponential(false).Hidden(false)
                                                             .FieldLabel("Dosis"),
                                                            X.NumberFieldFor(c => c.DiasTratamiento).Hidden(true)
                                                              .MinValue(1)
                                                             .FieldLabel("Tratamiento"),
                                                             X.Label(" Días").Hidden(true)
                                                           .Width(150)
                                                            ).PaddingSpec("6"),
                                                            X.Component().Width(10),
                                                            X.TextAreaFor(c => c.Indicacion).FieldLabel("Indicaciones Especificas")
                                                            .ReadOnly(indicaModoLectura).PaddingSpec("6")
                                                            .MaxLength(250)
                                                            .EnableKeyEvents(true)
                                                            .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                                            ,

                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "170"));
                                                        })

                                                .Items(X.TextArea().ID("taAlertsMEDI")
                                                .Border(false)
                                                .StyleSpec("background:white;border:1px solid gray; width:100%;")
                                                .FieldStyle("color: red")
                                                .Hidden(true)
                                                .ReadOnly(true).Flex(1)
                                                )

                                            ,
                                            X.Container()
                                                .Layout(LayoutType.HBox)
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "70"));
                                                })
                                                                .Items(
                                                                     X.Button()
                                                                        .Text("Agregar")
                                                                        .ID("btnAgregar")
                                                                        .DirectEvents(directEvents =>
                                                                        {
                                                                            if (@indicaMEDI == 1)
                                                                            {
                                                                                directEvents.Click.Url = "Save_MedicamentoTempEpicrisis";
                                                                            }
                                                                            else
                                                                            {
                                                                                directEvents.Click.Url = "Save_MedicamentoTempEpi";
                                                                            }

                                                                            directEvents.Click.Before = "return getValidarDatos('DATA'); ";
                                                                            directEvents.Click.Success = "alert('s');";
                                                                            directEvents.Click.EventMask.ShowMask = true;
                                                                            directEvents.Click.EventMask.Msg = "Loading...";
                                                                            directEvents.Click.ExtraParams.Add(new
                                                                            {
                                                                                id = JRawValue.From("App.NumeroStore.getValue()")
                                                                            });
                                                                            directEvents.Click.After = "recargarGrilla();";
                                                                        }),
                                                                       X.Button()
                                            .Text("Modificar").ID("btnModificar")
                                            .DirectEvents(directEvents =>
                                            {
                                                directEvents.Click.Url = "Editar_MedicamentoEpiTemp_CCEP0304";
                                                directEvents.Click.Before = "return getValidarDatos('DATA'); ";
                                                directEvents.Click.EventMask.ShowMask = true;
                                                directEvents.Click.EventMask.Msg = "Loading Modificar...";
                                            }),
                                                                    X.Component().Width(10),
                                                                      X.Button()
                                                                        .Text("Ocultar")
                                                                        .Handler("PanelOcultar(this.up('grid'));")
                                                                    )
                                            )
                                )



               ,

                //TERMINAR PANEL EDITAR

                X.FormPanel()
                                .ID("Panel0")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                //.Hidden(true)
                                .Items(
                                X.TextField().ID("NumeroStore").ReadOnly(true).Hidden(true),
                                 X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("<b>RECETA INDIVIDUAL</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                             X.TextField()
                                                 .ID("RecepcionaRecursoeeee")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                            X.GridPanel()
                                                 .ID("grillaExamenes0")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes0")
                                                           //.Listeners(l =>{l.BeforeLoad.Handler = "setChangedMed(0);";})
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("Secuencia")
                                                                //Html.X().ComboBoxFor(c => c.b),
                                                                .Fields(new ModelField("Secuencia", ModelFieldType.String),

                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                                                                           //
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                                                                           //
                                                                           new ModelField("TipoReceta", ModelFieldType.Int),
                                                                           new ModelField("Periodo", ModelFieldType.String),
                                                                           new ModelField("MedicamentoDescripcion", ModelFieldType.String),
                                                                           new ModelField("Medicamento", ModelFieldType.String),
                                                                           new ModelField("UnidadTiempo", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String),
                                                                           new ModelField("CodAlmacen", ModelFieldType.String),
                                                                            new ModelField("SecuencialHCE", ModelFieldType.String),
                                                                           new ModelField("UsuarioAuditoria", ModelFieldType.String),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int)

                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          //.Listeners(l => { l.Load.Handler = "setImpresion1(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0201_2_MEDICAMENTO_EPI_LIST")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia")))))
                                                         .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0,
                                                                    tipo = 1
                                                                })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; }) //2018/09/24 jordan mateo  agregado
                                                 .ColumnModel(
                                                     Html.X().Column().Text("Cobertura").DataIndex("IndicadorEPS")
                                                    .Width(55).Renderer("changeEPS"),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),

                                                              Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SecuencialHCE")
                                                         .Text("Secuencial HCE").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),




                                                              Html.X().Column().Text("Modalidad").DataIndex("TipoReceta")
                                                    .Width(60).Renderer("changeModalidad")

                                                             ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("DCI")
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("MedicamentoDescripcion")
                                                         .Text("Medicamento").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("UsuarioAuditoria")
                                                         .Text("Indicación").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentacion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoComida")
                                                         .Text("TipoComida")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("IdUnidadMedida")
                                                                                .Editor(true)
                                                                                .Hidden(true)
                                                                                .Text("Und. Medida")
                                                                                .Component(
                                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                      Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("UnidadTiempo")
                                                         .Text("Und.Tiempo")
                                                         .Component(
                                                            Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                             .Editor(true).Hidden(true)
                                                             .DataIndex("Periodo")
                                                             .Text("Periodo")
                                                             .Component(
                                                                       Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Via")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoReceta")
                                                         .Text("TipoReceta")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("Cantidad")
                                                                                .Editor(true).Hidden(true)
                                                                                 .Text("Cantidad")
                                                                                 .Component(
                                                                                      Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                     ),
                                                    Html.X().ComponentColumn().DataIndex("DiasTratamiento")
                                                         .Editor(true).Hidden(true)
                                                         .Text("Dias")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Indicaciones Especificas")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                             Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("CodAlmacen")
                                                         .Text("ALmacen").Hidden(true)
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),



                                                        Html.X().CommandColumn()
                                                        .Text("Acción")
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualRecetaIndividual(this.up('grid'),record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActual(record);")
                                                .Listeners(l => l.CellDblClick.Handler = "getActualizar(record);")
                                                 /* .Listeners(l => l.CellDblClick.Handler = "SelectDetalleRegistro(record.data);")*/
                                                 // .Listeners(l => l.CellClick.Handler = "SelectOnClik(record.data.Secuencia);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                  Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + "Medicamentos" + "</font></b>")
                                                                , X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button().ID("btnSelDesactivo0")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginDisabled)
                                                                //   .Handler("eventoActivarSeleccionMaterialEspecializado(App.btnSelDesactivo0, App.btnSelActivo0, 'grillaExamenes0')"),
                                                                .Handler("eventoActivarSeleccionMaterialEspecializado(App.btnSelDesactivo0, App.btnSelActivo0, 'grillaExamenes0')"),
                                                                         Html.X().Button().ID("btnSelActivo0")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginGo).Hidden(true)
                                                                         .Handler("eventoDesactivarSeleccionMaterialEspecializado(App.btnSelActivo0, App.btnSelDesactivo0)")
                                                             /*
                                                              Html.X().Button()
                                                                  .Text("Eliminar")
                                                                  .Icon(Icon.Delete)
                                                                  .Handler("deleteActual(this.up('grid'));")*/
                                                             )
                                                   )

                                                   .BottomBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>Tipo de Cobertura: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(6)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                                "</span>")
                                                             )

                                                             .Items(

                                                             )
                                                   )


                                        )
                                ),

                                  X.TextField().Hidden(true)
                                .ID("lblValidacion")
                                .Value("A")
                                ,

                                  X.TextField().Hidden(true)
                                .ID("txtdata")
                                ,


                      X.TextField().ID("fsDescanso")
                        .Hidden(true),
                   X.FormPanel()
                    .ID("Panel2")
                    .BodyPadding(5)
                    .AutoScroll(true)
                    .Border(false)
                    .Header(false)

                   .Items(

                       X.FieldSet().ID("fsGinecologico")  //F5.1
                        .ColumnWidth(0.4).Collapsible(true)
                        .Title("Epicrisis2")
                        .Border(true)
                        .MarginSpec("05 05 0 05")
                        .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })


                        .Items(
     X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })




                                   .Items(
                                        X.Component().Width(0),
                                        //X.TextFieldFor(m => m.IdMedico).FieldLabel("CodigoMédico").Width(50).Hidden(true),
                                        X.TextFieldFor(m => m.IdEpicrisis3).ID("IdEpicrisis3").FieldLabel("IdEpicrisis3").LabelWidth(170).Width(650).Hidden(true),
                                        X.TextFieldFor(m => m.Complicaciones).ID("Complicaciones").FieldLabel("Complicaciones").LabelWidth(170).Width(650)
                              ),

                             X.Component().Height(20),

                                X.TextField()
                                                .ID("RecepcionaRecurso")
                                                .Listeners(l =>
                                                {
                                                    l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                })
                                                .Hidden(true),

                                    X.GridPanel()
                                        .ID("grillaDiagnostico")
                                        .Border(true)
                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeDiagnostico")
                                                    .Model(
                                                    Html.X().Model()
                                                        .IDProperty("CodigoElemento")
                                                        .Fields(

                                                            new ModelField("CodigoElemento", ModelFieldType.String),
                                                            new ModelField("ValorCodigo1", ModelFieldType.String),
                                                            new ModelField("ValorCodigo5", ModelFieldType.String),
                                                            new ModelField("ACCION", ModelFieldType.String)

                                                        )
                                                    )


                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF201_3_Diagnostico")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("CodigoElemento")))))

                                        )
                                        .ColumnModel(
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("Secuencia")
                                                                  .DataIndex("CodigoElemento")
                                                                  .Hidden(true)
                                                                  //.Hidden(false)
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(false)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 ),
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("DIAGNÓSTICO")
                                                                  .Hidden(false)
                                                                  .DataIndex("ValorCodigo1")
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(false)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 )
                                      ,

                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("CODIGO")
                                                                  .Hidden(true)
                                                                  .DataIndex("ValorCodigo5")
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(false)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 )
                                      ,


                                       Html.X().Column().Text("Accion").DataIndex("ACCION").Width(85)
                                          .Hidden(true),

                                            Html.X().CommandColumn().Width(70)
                                                                    .Text("Acción")
                                                                    .Commands(
                                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                                              .CommandName("Delete")
                                                                                              .Icon(Icon.Delete)
                                                                                //.Text("")
                                                                                )
                                                                     // .Listeners(ls => ls.Command.Handler = "deleteActualDiagnostico(record,this.up('grid'),'IN');")
                                                                     .Listeners(ls => ls.Command.Handler = "deleteActualDiagnostico(record,this.up('grid'),'IN');")

                                            )
                                        .SelectionModel(
                                            Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                        )
                                        .Plugins(
                                            Html.X().CellEditing()
                                        )
                                    .Listeners(l => l.CellClick
                                            .Handler = "setSeleccionActualDiagnostico(record);")
                                        .TopBar(
                                                Html.X().Toolbar()
                                                        .Hidden(indicaModoLectura)
                                                        .Items(
                                                            Html.X().ToolbarSeparator(),
                                                            Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - Diagnóstico </font></b>")

                                                    )
                                        ),


                               X.Component().Height(10),
                                X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })
                                   .Items(
                                         X.ComboBoxFor(m => m.Pronostico).Items(
                                                                 SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos
                                                                                          .comboMiscelaneoLista.GetComboGenericosX("COMBOSGENERICOS", "TIPPRONOS")
                                                                                          .Select(d => new ListItem(d.Name, d.ID))

                                                                 )

                                                            .ID("Pronostico")
                                                            .EmptyText("Seleccione..")
                                                            .FieldLabel("Pronóstico")
                                                             .Editable(false)
                                                            .LabelWidth(170)

                              ),
                              X.Component().Height(10),
                                X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })
                                   .Items(
                                         X.ComboBoxFor(m => m.TipoAlta).Items(

                                                                      SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos
                                                                                          .comboMiscelaneoLista.GetComboGenericosX("COMBOSGENERICOS", "TIPOALTA")
                                                                                          .Select(d => new ListItem(d.Name, d.ID))

                                                                 )
                                                            .ID("TipoAlta")
                                                            .EmptyText("Seleccione..")
                                                            .FieldLabel("Tipo Alta")
                                                            .Editable(false)
                                                            .LabelWidth(170)

                              ),

                              X.Component().Height(10),
                                X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })

                                   .Items(
                                         X.ComboBoxFor(m => m.CondicionEgreso).Items(
                                                                    SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos
                                                                                          .comboMiscelaneoLista.GetComboGenericosX("COMBOSGENERICOS", "CONEGRESO")
                                                                                          .Select(d => new ListItem(d.Name, d.ID))

                                                                 )

                                                            .EmptyText("Seleccione..")
                                                            .FieldLabel("Condición de egreso")
                                                             .Editable(false)
                                                            .ID("CondicionEgreso")
                                                            .LabelWidth(170)
                                                            .Listeners(l => { l.Select.Handler = "Deshabilita2(this)"; })

                              ),
                                X.Component().Height(10),
                                X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })
                                    .ID("PanelCausa")
                                    .Hidden(false)
                                   .Items(
                                      ////X.TextFieldFor(m => m.CausaMuerte)
                                      //// .ID("CausaMuerte")
                                      //// .FieldLabel("Causa de Muerte")
                                      //// .LabelWidth(170)
                                      //// .Hidden(true)

                                      //// //.MarginSpec("00 00 00 10")
                                      //// //.Listeners(l => { l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');"; }).Hidden(true)
                                      //// ,

                                      X.TextFieldFor(c => c.CausaMuerte).ReadOnly(indicaModoLectura)
                                      .LabelWidth(170)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .ID("CausaMuerte")
                                                .Hidden(Informate)

                                                .FieldLabel("Causa de Muerte"),


                                    X.RadioGroupFor(m => m.Necropsia, new List<Radio.Config>  {
                                            new Radio.Config{BoxLabel = "Si", InputValue = "1", ReadOnly =indicaModoLectura, Width=70  },
                                            new Radio.Config{BoxLabel = "No", InputValue = "2", ReadOnly =indicaModoLectura, Width=70  },
                                            new Radio.Config{BoxLabel = "NA", InputValue = "3", ReadOnly =indicaModoLectura, Width=70 },
                                        })
                                        .Vertical(false)

                                        .FieldLabel("Necropsia")
                                        .Defaults(d =>
                                        {
                                            d.Add(new Parameter("LabelWidth", "250"));
                                            d.Add(new Parameter("DefaultAnchor", "50%"));
                                        }).MarginSpec("00 00 00 20")
                                        .AnchorVertical("100%")
                                        .ID("Necropsia").Hidden(Informate)
                                        //.Hidden(true)
                                        .LabelWidth(120)
                                        //.Width(50)
                                        ),



                                            X.GridPanel()
                                                .ID("grillaPrincipal")
                                                .Border(true).PaddingSpec("6")
                                                .Store(
                                                    Html.X().Store()
                                                    .ID("storePrincipal")
                                                    .Model(
                                                        Html.X().Model()
                                                        .IDProperty("Secuencia")
                                                        .Fields(
                                                            new ModelField("Secuencia"),
                                                            new ModelField("Codigo"),
                                                            new ModelField("DiagnosticoDescripcion", ModelFieldType.String),
                                                            new ModelField("Accion", ModelFieldType.String)
                                                            )
                                                        )
                                            .AutoLoad(true)
                                            .RemoteSort(false)
                                            .IsPagingStore(true)
                                            .RemotePaging(true)
                                            .PageSize(5)
                                            .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                            .Url("CCEPF201_3_Principal")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                            .IDProperty("Secuencia")))))
                                            )
                                            .ColumnModel(
                                           Html.X().ComponentColumn().Editor(true)
                                           .Hidden(true)
                                            //.Hidden(false)
                                            .DataIndex("Codigo")
                                            .Text("Código")
                                            //.Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                            Html.X().ComponentColumn().Editor(true)
                                            .DataIndex("DiagnosticoDescripcion")
                                            .Text("Detalle - Diagnostico Principal")
                                            .Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                          Html.X().Column().Text("Accion").DataIndex("Accion").Width(85)
                                          .Hidden(true)
                                          ,
                                          Html.X().CommandColumn().Width(70)
                                            .Text("Acción")
                                            .Commands(
                                                Html.X().GridCommand().Disabled(indicaModoLectura)
                                                    .CommandName("Delete")
                                                    .Icon(Icon.Delete)
                                            //.Text("Eliminar")
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualPrincipal(record);")
                                                     )
                                                     .SelectionModel(
                                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                     )
                                                     .Plugins(
                                                         Html.X().CellEditing()
                                                     )
                                            .Listeners(l => l.CellClick
                                                            .Handler = "setSeleccionActualPrincipal(record);")
                                                 //   .TopBar(
                                                 //       Html.X().Toolbar().Hidden(indicaModoLectura)
                                                 //           .Items(
                                                 //           Html.X().Label()
                                                 //           .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD2 + "</font></b>")
                                                 //           , X.ToolbarFill(), X.ToolbarSeparator()
                                                 //           , Html.X().Button().ID("IdbtnDesactivoPrincipal")
                                                 //           .Html("<b>Catálogo</b>")
                                                 //           .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionPrincipal(App.IdbtnDesactivoPrincipal);")
                                                 //           .Icon(Icon.PluginDisabled),
                                                 //           Html.X().Button().ID("IdbtnActivoPrincipal")
                                                 //            .Html("<b>Catálogo</b>")
                                                 //            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionPrincipal(App.IdbtnActivoPrincipal);")
                                                 //             .Icon(Icon.PluginGo).Hidden(true)
                                                 //            )
                                                 //)


                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                             // X.Button().Text("Agregar").ID("cmdAdd").ToolTip("Nuevo síntoma")
                                                             //.Handler("InsertRowNew();")
                                                             //.Handler("addRecordMain(this.up('grid'));")
                                                             //.Icon(Icon.Add),
                                                             Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivoPrincipal")
                                                            .Html("<b>Catálogo</b>")
                                                            //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionPrincipal(App.IdbtnDesactivoPrincipal);")
                                                                .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivoPrincipal")
                                                            .Html("<b>Catálogo</b>")
                                                            //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionPrincipal(App.IdbtnActivoPrincipal);")
                                                                .Icon(Icon.PluginGo).Hidden(true)
                                                            )
                                                   )



                     ,


                            X.GridPanel()
                                                .ID("grillaSecundario")
                                                .Border(true).PaddingSpec("6")
                                                .Store(
                                                    Html.X().Store()
                                                    .ID("storeSecundario")
                                                    .Model(
                                                        Html.X().Model()
                                                        .IDProperty("Secuencia")
                                                        .Fields(
                                                            new ModelField("Secuencia"),
                                                            new ModelField("Codigo"),
                                                            new ModelField("DiagnosticoDescripcion", ModelFieldType.String),
                                                            new ModelField("Accion", ModelFieldType.String)
                                                            )
                                                        )
                                            .AutoLoad(true)
                                            .RemoteSort(false)
                                            .IsPagingStore(true)
                                            .RemotePaging(true)
                                            .PageSize(5)
                                            .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                            .Url("CCEPF201_3_Secundario")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                            .IDProperty("Secuencia")))))
                                            )
                                            .ColumnModel(
                                           Html.X().ComponentColumn().Editor(true)
                                           .Hidden(true)
                                            //.Hidden(false)
                                            .DataIndex("Codigo")
                                            .Text("Código")
                                            //.Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                            Html.X().ComponentColumn().Editor(true)
                                            .DataIndex("DiagnosticoDescripcion")
                                            .Text("Diagnostico al Alta")
                                            .Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                          Html.X().Column().Text("ACCION").DataIndex("Accion").Width(85).Hidden(true),
                                          Html.X().CommandColumn()
                                            .Width(70)
                                            .Text("Acción")
                                            .Commands(
                                                Html.X().GridCommand().Disabled(indicaModoLectura)
                                                    .CommandName("Delete")
                                                    .Icon(Icon.Delete)
                                            //.Text("Eliminar")
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualSecundario(record);")
                                                     )
                                                     .SelectionModel(
                                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                     )
                                                     .Plugins(
                                                         Html.X().CellEditing()
                                                     )
                                            .Listeners(l => l.CellClick
                                                            .Handler = "setSeleccionActualSecundario(record);")
                                                .TopBar(
                                                    Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                        Html.X().Label()
                                                        .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD4 + "</font></b>")
                                                        , X.ToolbarFill(), X.ToolbarSeparator()
                                                        , Html.X().Button().ID("IdbtnDesactivoSecundario")
                                                        //.Text("Bienes/servicios")
                                                        .Html("<b>Catálogo</b>")
                                                        .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionSecundario(App.IdbtnDesactivoSecundario);")
                                                        .Icon(Icon.PluginDisabled),
                                                        Html.X().Button().ID("IdbtnActivoSecundario")
                                                         .Html("<b>Catálogo</b>")
                                                         //.Text("Bienes/servicios")
                                                         .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionSecundario(App.IdbtnActivoSecundario);")
                                                          .Icon(Icon.PluginGo).Hidden(true)
                                                         )
                                                       )

                     ,



                             X.Component().Height(10),
                                X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); })
                                    .Hidden(false)
                                   .Items(
                                    X.TextAreaFor(m => m.PlanAlta)
                                     .ID("PlanAlta")
                                     .FieldLabel("Plan de alta").Width(900)
                                     .LabelWidth(170)),
                                     X.Component().Height(20)

                                     )
               ),




                ////////ADD PARA MSGS/////
                X.TextArea().ID("taAlerts")
                .Border(false)
                .StyleSpec("background:white;border:1px solid gray;")
                .FieldStyle("color: red")
                .Hidden(true)
                .ReadOnly(true)
                     //////////////////////
                     )
                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),
                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),

                                X.ToolbarFill(),

                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                            , X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');")
                                ,

                X.ToolbarSpacer().Width(40),

                                X.Button()
                                .Text("Guardar").Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .CausesValidation(true)
                                 .Handler("EnviarData(this.up('grid'));")
                               /*   .DirectEvents(directEvents =>
                                 {
                                     directEvents.Click.Url = "CCEPF300_Save_SS_HC_DescansoMedicoFE";
                                     directEvents.Click.EventMask.ShowMask = true;
                                     directEvents.Click.Before = "return EnviarData('grid');";


                                     directEvents.Click.Success = "onSuccess(result.data);";
                                     directEvents.Click.Failure = "onFailure();";
                                 })*/
                               ,
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));"),

                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                         ))
                         .Listeners(l =>
                         {
                             l.FieldChange.Handler = "setIndicaCambios(true);";
                         }
                        )

                );
        }
        )


    )

}
