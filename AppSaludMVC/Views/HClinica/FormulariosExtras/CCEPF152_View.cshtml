@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_ProximaAtencion_FE

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA =
    AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI"); ;



    var DESC_ADD = "Proc. médicos (CIAP -2)";
    var COLOR_BLUE01 = "#284A89";


}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

    function eventoValidaReglaGen(PARAM_ACCION, PARAM_REGLA, numRegla) {
        var APMiscelaneos = new Array();
        var MA_MiscelaneosDetalle = {
            ValorEntero1: 1,
            ACCION: PARAM_ACCION
        };
        APMiscelaneos.push(MA_MiscelaneosDetalle);
        Ext.net.DirectMethod.request({
            url: PARAM_REGLA,
            params: {
                PacienteID: 0,
                valor: 0,
                regla: PARAM_ACCION,
                arrays: APMiscelaneos
            },
            success: function (result) { mostrarAlarmaGen(result.data, PARAM_ACCION, numRegla); }
        });
    };
    var mostrarAlarmaGen = function (data, accion, numRegla) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotifyPosi"))',
                    params: {
                        titulo: 'Advertencia Motor Reglas',
                        message: data[0].DESCRIPCION,
                        tipo: 'WARNING',
                        offsety: -650,
                        offsetx: 0 + ((numRegla - 1) * (-200))
                    }
                });
            } else {
            }
        }
    }


   function seleccionadorMedico() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoTres',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };

        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);

            var v = '@isNuevo';
            App.DBRecargar.setValue('');
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);

            }
        }


    var ALTURADEF = screen.height;

    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }

    function addRecordMain(grid) {
        setIndicaCambios(true);
        var f = new Date();
      //var fec = f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear();
      //alert(fec);
        grid.store.insert(0, {
            CodigoElemento: 'New' + count++, ValorFecha: f, ValorCodigo1: 1, ACCION: 'NUEVO'
        });
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    }

    var count = 0; // a counter for new records

    //function InsertRow(valor, estado, soloLectura) {
    //    if (valor.getValue() != '') {
    //        alert(valor.getValue());
    //        var f = new Date();
    //        var fec = f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear();
    //            var cadArray = valor.getValue().split('|');
    //            var VarIdMedico = cadArray[0];
    //            var VarMedico = cadArray[2];
    //            var VarIdEspecia = cadArray[3];
    //            var grid = Ext.getCmp("grillaExamenes");
    //            setIndicaCambios(true);
    //            grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorFecha: fec, ValorCodigo1: VarIdEspecia, ValorCodigo2: VarIdMedico, ValorCodigo3: VarMedico, ACCION: 'NUEVO' });
    //            valor.setValue('');
    //            Ext.Function.defer(function () {
    //                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
    //            }, 100);
    //        }
    //    //}
    //}

    function validaDuplicado(valor) {
        var estados = false;
        var valor1
        var valor2
        App.storeExamenes.each(function (r) {
            if (trim(r.get('CodigoElemento')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function deleteActual(record) {
        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.CodigoElemento;
            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addEliminar_CCEPF152"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        /*alert(data);*/
        var reload = true;
        if (data != null) {

            if (data.length > 0) {
                reload = true
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        /*alert(App.DBRecargar.getValue());*/
       /* alert(reload + ',' + App.DBRecargar.getValue());*/
        if (reload) {

            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };

    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    function eventoCancelarTest() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("eventoCancelarForm"))',
            params: {
                indica: ''
            }
        });
    }

    function eventoCancelar(form) {
        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //App.storeExamenes.reload();
        //setIndicaCambios(false);
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }

    }

    </script>

    <script>

        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');
            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

         }

        function EnviarData(grid) {
            beforeSave(App.formactual);
            //alert("Entro estad form " + App.formactual.getForm().isValid());
            if (App.formactual.getForm().isValid()) {

                App.cmdGuardar.setDisabled(false);
                source = App.grillaExamenes;
                var store = App.storeExamenes;
                var status = 0;
                var i = 1;
                var valores = App.DiagnosticoText;
                var mensajes = "";
                var ArrayList0 = new Array();
                var records = App.grillaExamenes.getSelectionModel().getSelection();
                App.DBRecargar.setValue("");
                App.storeExamenes.each(function (r) {
                    var fech = Date.parse(r.get('ValorFecha'));
                    var fech2 = new Date(); /*Date.now();*/
                    fech2 = fech2.setHours(0, 0, 0, 0);
                   /* alert(fech + ' - ' + fech2);*/
                    if (fech < fech2) {
                        /* alert(fech + ' - ' + fech2);*/
                        App.DBRecargar.setValue("NO");
                    } else { App.DBRecargar.setValue("SI"); }
                    var MA_MiscelaneosDetalle = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorFecha: r.get('ValorFecha'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
                    };
                    ArrayList0.push(MA_MiscelaneosDetalle);
                    i = i + 1;

                });

                App.Accion.value = mensajes;
                if (ArrayList0.length == 0) {
                    App.taAlerts.setValue('*Debe seleccionar una Especialidad.');
                    App.taAlerts.setVisible(true);

                    return false;
                } else {


                    App.taAlerts.setValue(''); App.taAlerts.setVisible(false);
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("Save_CCEPF152"))',
                        params: {
                            selection: ArrayList0,
                            text: 'O'
                        }
                    });
                }




                //return true;
            } else {
               App.cmdGuardar.setDisabled(false);
                return false;
            }
        }

        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }

        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) { accionMensajes(result.data); }
                });
            }
        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

    </script>
}


@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions
                .Add(Html.X().FormPanel()
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
                //.Layout(LayoutType.Auto)
               .ID("formactual")

                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                    l.AfterRender.Handler =
                        "eventoValidaReglaGen('POSaludControlGinecologia', '" + (Url.Action("POSaludControlGinecologia")) + "',1);" +
                        "eventoValidaReglaGen('POSaludExamenLaboratorio', '" + (Url.Action("POSaludExamenLaboratorio")) + "',2);" +
                        "";
                })
               .Items(
                    X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("Próxima Cita")
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                            .Items(
                                    X.TextField()
                                     .ID("ValorNuevo")
                                     .Listeners(l =>
                                     {
                                         l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                     })
                                     .Hidden(true),
                                     X.TextField()
                                     .ID("DBRecargar")
                                     .Hidden(true),
                                    X.GridPanel()
                                        .ID("grillaExamenes")
                                        .Border(false)
                                        .Store(
                                            Html.X().Store()
                                            .ID("storeExamenes")
                                            .Model(
                                                Html.X().Model()
                                                    .IDProperty("CodigoElemento")
                                                    .Fields(
                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                    new ModelField("ValorCodigo1", ModelFieldType.Int),
                                                    new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                    new ModelField("ValorCodigo3", ModelFieldType.String),
                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                    new ModelField("CodigoElemento", ModelFieldType.Int),
                                                    new ModelField("ACCION", ModelFieldType.String)
                                                    )
                                                )
                                        .AutoLoad(true)
                                        .RemoteSort(false)
                                        .IsPagingStore(true)
                                        .RemotePaging(true)
                                        .PageSize(5)
                                        .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                        .Url("CCEPF152_ENFER_ACTUAL")
                                        .Reader(reader => reader.Add(Html.X().JsonReader()
                                        .Root("data")
                                        .TotalProperty("total")
                                        .IDProperty("CodigoElemento")))))
                                        )
                                        .ColumnModel(
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha solicitada")
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                   
                                                   
                                       Html.X().ComponentColumn().Editor(true)
                                        .DataIndex("ValorCodigo1")
                                        .Text("Especialidad")
                                        .Flex(1)
                                        .Component(
                                            Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                            .MaskRe("[A-Za-z]")
                                            .Editable(true)
                                            .QueryMode(DataLoadMode.Local)
                                            .TriggerAction(TriggerAction.All)
                                            .EmptyText("Seleccione Especialidad")
                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESPECIALI").Select(d => new ListItem(d.Name, d.ID)))
                                            .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                            ),
                                      Html.X().Column().Text("ACCION").DataIndex("ACCION").Width(85).Hidden(true),
                                      Html.X().CommandColumn()
                                        .Width(70)
                                        .Text("Acción")
                                        .Commands(
                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                .CommandName("Delete")
                                                .Icon(Icon.Delete)
                //.Text("Eliminar")
                                        )
                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                        .Listeners(l => l.CellClick
                                                        .Handler = "setSeleccionActual(record);")
                                            .TopBar(
                                                Html.X().Toolbar()
                                                .Hidden(indicaModoLectura)
                                                .Items(
                                                    Html.X().ToolbarSeparator(),
                                                    Html.X().Label()
                                                    .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - Próxima Cita</font></b>"),
                                                    X.ToolbarFill(),
                //Html.X().Button().Disabled(indicaModoLectura)
                // .Text("Agregar")
                // .Icon(Icon.Add)
                // .Handler("seleccionadorMedico();")
                // ,
                                                    Html.X().Button().Disabled(indicaModoLectura)
                                                        .Text("Nuevo")
                                                        .Icon(Icon.Add)
                                                        .Handler("addRecordMain(this.up('grid'));")
                                                     )
                                                   ),
                                     X.HiddenFor(c => c.Accion),
                                     X.DateFieldFor(c => c.FechaCreacion).Hidden(true),
                                     X.DateFieldFor(c => c.FechaModificacion).Hidden(true),
                                     X.TextFieldFor(c => c.UsuarioCreacion).Hidden(true),
                                     X.TextFieldFor(c => c.UsuarioModificacion).Hidden(true),
                                     X.TextFieldFor(c => c.Estado).Hidden(true),
                                     X.TextArea().ID("taAlerts")
                                        .Border(false)
                                        .StyleSpec("background:white;border:1px solid gray;")
                                        .FieldStyle("color: red")
                                        .Hidden(true)
                                        .ReadOnly(true)
                        )

                     )

                    .MinButtonWidth(40)

                    .TopBar(
                        X.Toolbar().ID("bar")

                            .Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura)
                                , X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                                X.Button()
                                .Text("Guardar")
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .Icon(Icon.Disk)
                                .CausesValidation(true)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Before = "return EnviarData(this.up('grid'));";
                                    de.Click.Url = Url.Action("Save_CCEPF152");
                                    de.Click.EventMask.ShowMask = true;

                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                //.OnClientClick("this.up('form').getForm().reset();")
                                .Handler("eventoCancelar(this.up('form'));")

                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);"),

                             X.Button()
                                .Text("Variados")
                                .ID("cmdBuscar")
                                .Icon(Icon.Cancel)
                                .Hidden(true)
                                .OnClientClick("this.up('form').getForm().reset();")
                        ))
                        .Listeners(l =>
                           {
                               l.FieldChange.Handler = "setIndicaCambios(true);";
                           }
                        )
                );
        }
        )
    )
}
