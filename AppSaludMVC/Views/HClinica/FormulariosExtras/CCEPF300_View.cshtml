@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_DescansoMedico_FE

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    double DIASDES = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.DIASDES;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                        (Model.Accion == "UPDATE" ? true :
                        (Model.Accion == "DELETE" ? false :
                        (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI"); ;

    var MENS_NUMERO = "No se permite un valor negativo.";

    var DESC_ADD = "Diagnosticos";
    var COLOR_BLUE01 = "#284A89";

}
@section cabecera
{

<link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
            
        }
        .my-date-picker {
            top: 275px !important;
        }
        .x-css-shadow {
            top: 275px !important;
        }
    </style>
    <script>
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });

        var val = '@visibleImpresion';
        var vis = '@isVista';

        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);


                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);


                }
            }
        }

    };

    function validarfecha_inicio(obj, fecha1) {

        if (fecha1 != null) {
            var fechaactual = new Date;
            if (fechaactual > fecha1) {
                obj.setValue(null);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        message: 'La fecha de inicio no debe ser menor a la fecha actual.',
                        titulo: 'Advertencia',
                        tipo: 'WARNING'
                    }
                });

            } else {
                Mostrar(obj);
            }
        } else {
            App.Dias.setValue(null);
        }
    }



    function eventoValidaReglaGen(PARAM_ACCION, PARAM_REGLA, numRegla) {
        var APMiscelaneos = new Array();
        var MA_MiscelaneosDetalle = {
            ValorEntero1: 1,
            ACCION: PARAM_ACCION
        };
        APMiscelaneos.push(MA_MiscelaneosDetalle);
        Ext.net.DirectMethod.request({
            url: PARAM_REGLA,
            params: {
                PacienteID: 0,
                valor: 0,
                regla: PARAM_ACCION,
                arrays: APMiscelaneos
            },
            success: function (result) { mostrarAlarmaGen(result.data, PARAM_ACCION, numRegla); }
        });
    };


    var mostrarAlarmaGen = function (data, accion, numRegla) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotifyPosi"))',
                    params: {
                        titulo: 'Advertencia Motor Reglas',
                        message: data[0].DESCRIPCION,
                        tipo: 'WARNING',
                        offsety: -650,
                        offsetx: 0 + ((numRegla - 1) * (-200))
                    }
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    var Valores;
    var template = '<span style="color:{0};">{1}</span>';


    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };


    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

        
    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: data[0].TITULO,
                                message: data[0].DESCRIPCION,
                                tipo: 'ERROR'
                            }
                        });
                    } else {
                        accionMensajes(data);
                    }
                }
            }
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
            }
        };


        var refreshTree = function (tree) {
            App.direct.RefreshMenu({
                success: function (node) {
                    if (!Ext.isEmpty(node)) {
                        tree.setRootNode(node);
                    }
                    else {
                        tree.getRootNode().removeAll();
                    }
                }
            });
        };
        var aRecordSelector = {
            add: function (valor) {
                var rango = valor.split('RowIndex');
                var rango = rango[1].split(':');
                var rango = rango[1].split('}');
                source = App.GridPanel1;
                var store = App.StoreTasks;
                var status = 0;
                var i = 0;
                var clinico = "";
                var atencion = "";
                if (App.GridPanel1.getSelectionModel().hasSelection()) {
                    var records = App.GridPanel1.getSelectionModel().getSelection();
                    App.StoreTasks.each(function (r) {
                        if (rango[0] == i) {
                            clinico = r.get('Persona_Old');
                            atencion = r.get('IdPersonaUnificado');
                        }
                        i = i + 1;
                    });
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("SelectClinico"))',
                        params: {
                            Clinico: clinico,
                            Atencion: atencion
                        }
                    });
                }
            }
        };

    function eventoRenderForm() {
        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);

        var v = '@isNuevo';
        if (v == 'True') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }


    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }


    var count = 0; // a counter for new records

    function visibleGrid(grid) {
        grid.visibleGrid(true);
    }

    function addRecord(grid) {
        setIndicaCambios(true);
        grid.store.insert(0, { CODIGOELEMENTO: 'New' + count++ });

        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    }

    function deleteActual(record) {

        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.CodigoElemento;


            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF300_addEliminar_SS_HC_DescansoMedico_FE"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }

    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    function selectRecord(grid, id) {
        var record = grid.store.getById(id);

        grid.store.loadPage(grid.store.findPage(record), {
            callback: function () {
                grid.getSelectionModel().select(record);
            }
        });
    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };


    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var getInvalidFieldsGrid = function (form, invalidFields, fila) {
        var fields = App.formactual.getForm().getFields();

        fields.filterBy(function (field) {

            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });
        return invalidFields;
    };


    var beforeSave = function (form) {
        console.log("beforeSave llamado");
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        console.log("Campos inválidos: ", FieldsInvalidos);
        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }

    };

    var addRecursosValidacion = function (FieldsInvalidos) {
        console.log("Llamada a addRecursosValidacion con datos: ", FieldsInvalidos);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
            params: {
                data: FieldsInvalidos,
                indica: 'VALIDAR',
            },
            success: function (result) { accionMensajes(result.data); }
        });
    };



    var setValuesGridForm = function (r, valor) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var ValorCodigo1 = r.get('ValorCodigo1');
        var CodigoElemento = r.get('CodigoElemento');


        if (ValorCodigo1 == null || ValorCodigo1 == '') {
            //App.IdDiagnostico.setValue(null);
        }

    };

    function EnviarData(grid) {
        // Deshabilitar el botón de guardar mientras se procesa la información
        // App.cmdGuardar.setDisabled(true);

        let reload = true;
        beforeSave(App.formactual);
        if (App.formactual.getForm().isValid()) {
            // Ocultar mensajes de error
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);

            // Construir objeto principal con la información del formulario
            const HC_DescansoMedico = crearDescansoMedico();
            const ArrayListC = [HC_DescansoMedico];

            var i = 0;
            var invalidFieldsGrid = new Array();
            var fila = 0;

            var ArrayList0 = new Array();
            App.storeExamenes.each(function (r) {
                fila = fila + 1;
                ///VALIDACIÓN, no se valida
                setValuesGridForm(r, null);
                invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFieldsGrid, fila);
                var MA_MiscelaneosDetalle = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'INSERTDETALLE' : 'UPDATEDETALLE')
                };
                ArrayList0.push(MA_MiscelaneosDetalle);
                i = i + 1;
            });

            console.log("Ingreso storeExamenes :: " + invalidFieldsGrid);

            if (invalidFieldsGrid.length > 0) {
                addRecursosValidacion(invalidFieldsGrid);
                App.cmdGuardar.setDisabled(false);
            } else {
                guardarDatos(ArrayListC, ArrayList0, reload);
            }
        }
    }

    // Función para convertir "dd/MM/yyyy HH:mm:ss" a un objeto Date
    function parseDateString(dateString) {
        // Esperamos un formato "dd/MM/yyyy HH:mm:ss"
        const parts = dateString.split(/[\s/:]/); // Divide la cadena en partes
        if (parts.length < 6) return null;

        // Crea un nuevo objeto Date con los componentes de la fecha
        return new Date(parts[2], parts[1] - 1, parts[0], parts[3], parts[4], parts[5]);
    }

    // Función que crea el objeto HC_DescansoMedico a partir del formulario
    function crearDescansoMedico() {

        // Función para formatear las fechas al formato ISO 8601 "yyyy-MM-ddTHH:mm:ss"
        function formatDateToISO(date) {
            if (!date) return null;

            // Verifica si 'date' ya es un objeto Date; si no, lo convierte
            if (!(date instanceof Date)) {
                date = parseDateString(date); // Usamos la función de conversión personalizada
            }

            // Asegura que sea una fecha válida antes de formatear
            if (!isNaN(date.getTime())) {
                return date.toISOString().slice(0, 19); // Esto obtiene "yyyy-MM-ddTHH:mm:ss"
            }

            return null; // Si no es una fecha válida, devuelve null
        }

        return {
            fecha: App.fecha.getValue(),
            Observacion: App.Observacion.getValue(),
            FechaInicioDescanso: App.FechaInicioDescanso.getValue(),
            FechaFinDescanso: App.FechaFinDescanso.getValue(),
            Dias: App.Dias.getValue(),
            Accion: App.Accion.getValue(),
            FechaCreacion: formatDateToISO(App.FechaCreacion.getValue()),
            FechaModificacion: App.FechaModificacion.getValue(),
            UsuarioCreacion: App.UsuarioCreacion.getValue(),
            UsuarioModificacion: App.UsuarioModificacion.getValue(),
            Estado: App.Estado.getValue()
        };
    }
           

    // Función que maneja la validación y muestra los errores
    function manejarErrores(invalidFields) {
        addRecursosValidacion(invalidFields);
        App.cmdGuardar.setDisabled(false);  // Habilitamos el botón de guardar
        App.formactual.setDisabled(false);  // Habilitamos el formulario
        habilitarBotonesImpresion();        // Habilitar los botones de impresión en caso de error
    }

    function guardarDatos(ArrayListC, ArrayList0, reload) {
        console.log("Ingreso guardarDatos");
        App.formactual.setDisabled(true);  // Deshabilitar formulario mientras se guarda

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("CCEPF300_Save_SS_HC_DescansoMedicoFE"))',
            params: {
                HC_Descanso: ArrayListC,
                selectionArray1: ArrayList0,
                Evento: 'Server',
                Version: 'CCEPF300'
            },
            success: function (result) {
                console.log(result); // Revisa qué valor devuelve el servidor
                reload = true;
                if (reload) {
                    App.formactual.setDisabled(false); // Volvemos a habilitar el formulario si es correcto
                    App.cmdGuardar.setDisabled(false);  // Habilitamos el botón de guardar
                    parent.App.txtRecargarX.setValue('RELOAD');
                    habilitarBotonesImpresion();

                    // Aquí recargamos la página si se guardó correctamente
                 //   window.location.reload();  // Recarga la página actual
                } else {
                    App.formactual.setDisabled(false); // Volvemos a habilitar el formulario en caso de error
                    App.cmdGuardar.setDisabled(true); // Habilitamos el botón de guardar
                    App.taAlerts.setVisible(true);     // Mostrar alertas de error si es necesario
                    habilitarBotonesImpresion();
                }
            },
            failure: function (error) {
                // Manejo de error en caso de fallo en la solicitud
                App.formactual.setDisabled(false); // Rehabilitar el formulario si hay un fallo
                App.cmdGuardar.setDisabled(false); // Rehabilitar el botón de guardar
                App.taAlerts.setVisible(true);     // Mostrar alertas de error
                console.log("failure error");
                habilitarBotonesImpresion();
            }
        });
    }

    // Función para habilitar los botones de impresión
    function habilitarBotonesImpresion() {
        App.btnImpresion.setDisabled(false);  // Asumiendo que tienes un botón llamado btnImprimir
        App.btnImpresionHC.setDisabled(false);  // Si tienes más botones de impresión, habilítalos aquí
    }


    var hhValidation = function (h) {
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    }

    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    }


    function InsertRow(valor, estado, soloLectura) {

        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (valor.getValue() != '') {

                var obj = JSON.parse(valor.getValue());
                var DescripcionLocalVar = obj.DescripcionLocal;
                if (validaDuplicado(DescripcionLocalVar)) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    valor.setValue('');
                    return;
                }

                var grid = Ext.getCmp("grillaExamenes");
                setIndicaCambios(true);
                grid.store.insert(0, {
                    CodigoElemento: 'New' + count++,
                    ValorCodigo1: DescripcionLocalVar,
                    ValorCodigo5: DescripcionLocalVar,
                    ACCION: 'NUEVO'
                });

                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);
                valor.setValue('');

            }
        }
    }


        function validaDuplicado(valor) {
            var estados = false;
            var valor1
            var valor2
            App.storeExamenes.each(function (r) {
                if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
            });

            return estados;
        }

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    var formGen = null;
    function eventoCancelar(form) {

        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
       
        }
    }

        function eventoCancelarResult() {
            if (formGen != null) {
                var form = formGen;
                form.getForm().reset();
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
                setIndicaCambios(false);
                App.storeValoracion.reload();
            }
        }

    function DoCancel() {
        }

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }

        function setImpresion(store) {
            App.btnImpresionHC.setVisible(false);
            App.btnImpresion.setVisible(false);
            var contar = 0;
            if (store != null) {
                store.each(function (r) {
                    contar++;
                });
            }
            if (contar > 0) {
                App.btnImpresionHC.setVisible(true);
                App.btnImpresion.setVisible(true);
            }
        }
 
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        }


        function Mostrar(grid) {
           // debugger;
            var oneDay = 24 * 60 * 60 * 1000;
            var date1 = new Date(App.FechaInicioDescanso.getValue());
            var date2 = new Date(App.FechaFinDescanso.getValue());
            var dia = date1.getDate();
            var diffDays = Math.round(Math.abs((date1.getTime() - date2.getTime()) / (oneDay))) + 1;
               if (diffDays < 0) {
                   console.log("machucando")
               } else {
                   diaDescanso = diffDays;
                   App.Dias.setValue(diffDays);
               }

                var diaDescanso = 0;
                var APMiscelaneos = new Array();
                var MA_MiscelaneosDetalle = {
                    ValorEntero1: diaDescanso,
                    ValorFecha: App.FechaInicioDescanso.getValue(),
                    ACCION: "POSaludValidDescanso"
                };

                APMiscelaneos.push(MA_MiscelaneosDetalle);

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("POSaludDescansoMedico"))',
                    params: {
                        PacienteID: 0,
                        dias: diaDescanso,
                        regla: 'POSaludDescansoMedico',
                        arrays: APMiscelaneos
                    },
                    success: function (result) { mostrarAlarma(result.data); }
                });
        }

        var mostrarAlarma = function (data) {
            if (data != null) {
                if (data[0].ESTADOBOOL) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia Motor Reglas',
                            message: 'Excede numero de dias autorizadas..',
                            tipo: 'WARNING'
                        }
                    });
                    } else {
                    }
                }
        }
            function eventoVisorReportDescanso(param1) {
                window.location.href = '@Url.Action("VistaDescansoMedico", "HClinica")';
            }
            function validarfechas(obj, fecha1, fecha2) {

                if (fecha1 != null && fecha2 != null) {
                    if         (fecha1 > fecha2) {
                        obj.setValue(null);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                message: 'Las fecha inicial no debe ser mayor que la fecha final.',
                                titulo: 'Advertencia',
                                tipo: 'ERROR'
                            }
                        });

                    } else {
                        Mostrar(obj);
                    }
                } else {
                    App.Dias.setValue(null);
                }
            }

            function eventoIncrementoFecha(obj) {
                if (App.FechaInicioDescanso.getValue() != null && obj.getValue() != null) {
                    var dias = obj.getValue();
                    var fechaIni = App.FechaInicioDescanso.getValue();
                    var tiempo = fechaIni.getTime();
                    var milisegundos = parseInt(dias * 24 * 60 * 60 * 1000);
                    var total = fechaIni.setTime(tiempo + milisegundos);
                    var day = fechaIni.getDate();
                    var month = fechaIni.getMonth() + 1;
                    var year = fechaIni.getFullYear();
                    var monthShow = month;
                    if (month < 10) {
                        monthShow = '0' + month;
                    }
                    var dayShow = day;
                    if (day < 10) {
                        dayShow = '0' + day;
                    }
                    var fecha = monthShow + '/' + dayShow + '/' + year;
                    fecha = new Date(fecha);
                } else {
                    App.FechaFinDescanso.setValue(null);
                }
            }

            var eventoKey = function (tf, e) {
                if (e.getKey() == '190') {
                    var str = tf.getRawValue().replace('.', '');
                    tf.setValue(str);
                } else if (e.getKey() == '109') {
                    var str = tf.getRawValue().replace('-', '');
                    tf.setValue(str);
                }
            };

            var onFailure = function (data) {
                App.cmdGuardar.setDisabled(false);
            };

            var keyCode
            function ReplaceCaracterEspec(e) {
                /*Capturar tecla pulsada*/
                if (window.event) keyCode = window.event.keyCode;
                else if (e) keyCode = e.which;
                var prueba = keyCode;
                // alert(keyCode);          
                if (prueba == 60) {
                    var textactual = e.getValue();
                    e.value = e.setValue(textactual + " ");
                }
                var texto = e.getValue();
                var vacio = "";
                var cadena = vacio + e.getValue();
                var recortado = cadena.substr(-1, 1);
                if (recortado == "<" || recortado == ">") {
                    e.value = e.setValue(texto + " ");
                }

            }

    </script>

}


@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                    .ItemID("center")
                    .DefaultAnchor("100%")
                    .AutoScroll(true)
                    .Height(340)
                    .Header(false)
                    .Border(true)
                    .ID("formactual")
                    .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                })
               .Items(
                    X.FieldSet().ID("fsDescanso")
                     .ColumnWidth(0.4).Collapsible(true)
                     .Title("DESCANSO MÉDICO")
                     .MarginSpec("0 05 0 05")
      
                    .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "170"));
                        })
                    .DefaultAnchor("100%")
                    .FieldDefaults(d =>
                    {
                        d.LabelAlign = LabelAlign.Left;
                    })

                    .Items (
                                    X.TextField()
                                     .ID("RecepcionaRecurso")
                                     .Listeners(l => { l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');"; }).Hidden(true),
                                    X.GridPanel()
                                        .ID("grillaExamenes")
                                        .Border(true)
                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeExamenes")
                                                    .Model(
                                                    Html.X().Model()
                                                        .IDProperty("CodigoElemento")
                                                        .Fields(
                                                            new ModelField("CodigoElemento", ModelFieldType.String),
                                                            new ModelField("ValorCodigo1", ModelFieldType.String),
                                                            new ModelField("ValorCodigo5", ModelFieldType.String),
                                                            new ModelField("ACCION", ModelFieldType.String)
                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF300_DESC_MEDICO")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("CodigoElemento")))))

                                        )
                                        .ColumnModel(
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("DIAGNÓSTICO")
                                                                  .DataIndex("ValorCodigo1")
                                                                  .Hidden(true)
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(true)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 ),
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("DIAGNÓSTICO")
                                                                  .Hidden(false)
                                                                  .DataIndex("ValorCodigo5")
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(true)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 ) ,
                                            Html.X().CommandColumn().Width(70)
                                                                    .Text("Eliminar")
                                                                    .Commands(
                                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                                              .CommandName("Delete")
                                                                                              .Icon(Icon.Delete)
                                                                                              .Text("")
                                                                                )
                                                                    .Listeners(ls => ls.Command.Handler = "deleteActual(record,this.up('grid'),'IN');")
                              , Html.X().Column().Text("ACCION")
                                                         .DataIndex("ACCION")
                                                         .Width(85)
                                                         .Hidden(true)
                                            )
                                        .SelectionModel(
                                            Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                        )
                                        .Plugins(
                                            Html.X().CellEditing()
                                        )
                                    .Listeners(l => l.CellClick
                                            .Handler = "setSeleccionActual(record);")
                                        .TopBar(
                                                Html.X().Toolbar()
                                                        .Hidden(indicaModoLectura)
                                                        .Items(
                                                            Html.X().ToolbarSeparator(),
                                                            Html.X().Label()
                                                                    .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                    )
                                        ),
                                    X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='white'>Espacio</font>"),
                                    X.Container()
                                    .Layout(LayoutType.HBox)
                                    .Defaults(d =>
                                    {
                                        d.Add(new Parameter("LabelWidth", "170"));
                                    })
                                    .Items(
                                        X.DateFieldFor(c => c.fecha).FieldLabel("Fecha").ReadOnly(true)
                                        .Format("dd/MM/yyyy")
                                        .Value(DateTime.Now)
                                        )
                                    .PaddingSpec("8") ,
                                    X.TextAreaFor(c => c.Observacion).FieldLabel("Observación").ReadOnly(indicaModoLectura)
                                    .PaddingSpec("8").Height(100)
                                    .EnableKeyEvents(true)
                                    .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                    ,
                                    X.Container()
                                        .Layout(LayoutType.HBox)
                                        .PaddingSpec("8")
                                        .Defaults(d =>
                                        {
                                            d.Add(new Parameter("LabelWidth", "170"));
                                        })
                                        .Items(
                                                X.DateFieldFor(c => c.FechaInicioDescanso)
                                                .FieldLabel("Del")
                                                .Editable(false)
                                                .ReadOnly(indicaModoLectura)
                                  
                                                .Format("dd/MM/yyyy")
                                                .EnableKeyEvents(true)
                                                    .Listeners(l =>
                                                    {
                                                        l.Change.Handler =
                                                            "validarfechas(this,App.FechaInicioDescanso.getValue(),App.FechaFinDescanso.getValue());";                                                
                                                    })
                                                ,
                                                X.Component().Width(80),

                                                X.DateFieldFor(c => c.FechaFinDescanso).FieldLabel("Al").ReadOnly(indicaModoLectura).Editable(false).LabelWidth(30)
                                                    .Format("dd/MM/yyyy")
                                                 
                                                    .Listeners(l =>
                                                    {
                                                        l.Change.Handler =
                                                            "validarfechas(this,App.FechaInicioDescanso.getValue(),App.FechaFinDescanso.getValue()); ";                                                            
                                                    })
                                                ),

                                    X.Container()
                                        .Layout(LayoutType.HBox)
                                        .PaddingSpec("8")
                                        .Defaults(d =>
                                        {
                                            d.Add(new Parameter("LabelWidth", "170"));
                                        })
                                        .Items(
                                            X.NumberFieldFor(c => c.Dias).FieldLabel("Dias").ReadOnly(true)
                                            .MinValue(0)
                                            .MaxValue(DIASDES)
                                            .Editable(false)
                                            .NegativeText(MENS_NUMERO)
                                            .EnableKeyEvents(true)
                                            .Listeners(l =>
                                            {
                                                l.Blur.Handler = "eventoIncrementoFecha(this);";
                                                l.KeyUp.Fn = "eventoKey";
                                            })
                                        ),
                                     X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='white'>Espacio</font>")
                ),
                    X.HiddenFor(m => m.Accion),
                X.TextFieldFor(m => m.FechaCreacion).Hidden(true),
                X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                X.TextFieldFor(m => m.Estado).Hidden(true),
                ////////ADD PARA MSGS/////
                X.TextArea().ID("taAlerts")
                .Border(false)
                .StyleSpec("background:white;border:1px solid gray;")
                .FieldStyle("color: red")
                .Hidden(true)
                .ReadOnly(true)         
                  
                     )
                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),
                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                            , X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');")                                 
                                ,
                X.ToolbarSpacer().Width(40),
                                X.Button()
                                .Text("Guardar").Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .OnClientClick("return EnviarData('grid');")
                                .CausesValidation(true),                              
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));"),

                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                         ))
                         .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"                            
                            )
                );
        }
        )

    )

}
