@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Epicrisis_2_FE
@{
    ViewBag.TitLIAe = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;
    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : false);


    var NumGrupMed1 = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.GRUPOMEDICAMENTO;

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));



    var DESC_ADD = "Medicamentos";
    var DESC_ADD2 = "Material Medico";
    var COLOR_BLUE01 = "#284A89";

    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";


    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";
    var opcion = Session["OPCION"];
}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <style>
        .icon-plugindisabled {
            background-image: url(/icons/plugin_disabled-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-plugingo {
            background-image: url(/icons/plugin_go-png/ext.axd);
            background-repeat: no-repeat;
        }

        .icon-delete {
            background-image: url(/icons/delete-png/ext.axd);
            background-repeat: no-repeat;
        }
    </style>
    <script>


        var lectura="false";
        var haynuevos = false;
        var Edito = false;

        var COLOR_BLUE01_ = "#284A89";
        var COLOR_RED01_ = "#990000";
        var COLOR_YELLOW02_ = "#D9A407";
        var COLOR_GREEN01_ = "#177506";
        var COLOR_ORANGE01_ = "#E07509";

        var changeEPS2 = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };



        var changeModalidad2 = function (value) {
            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
            var template = '<span style="color:{0};">{1}</span>';
            if (value == 6)
                return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
            if (value == 5)
                return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
            if (value == 19)
                return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
            if (value == 3)
                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
            else
                return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
        };

        var ContDell = 1;
        var RegActivoMed = 0;
        var EstadoDetalle = 0;

        @*function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);

            lectura='@(indicaModoLectura)';
            App.formactual.setHeight(dimCentral);

            var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }*@

           function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
               App.formactual.setHeight(dimCentral);

                var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }


    }




        function eventoAfterRenderForm(grupos) {


            if (parseInt(grupos) > 0) {

                for (var x = 0; x < parseInt(grupos) ; x++) {
                    addgrupo(parseInt(x));
                    /*var grid = Ext.getCmp('grillaExamenes' + x);
                    grid.getStore().getSelectionModel().items*/
                }

            }

        };





        var seleccRecordActual = null;
        var seleccRecordActualInd = null;
        var changeGridMed = 0;
        var changeGridMedDetail = 0;

        function setChangedMed(value) {
            if (value == 1) {

                if (changeGridMed == 0) {
                    changeGridMed = 1;
                } else if (changeGridMed == 1) {
                    setIndicaCambios(true);
                }
            } else if (value == 0) {
                changeGridMed = 0;
            }
        };


        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }
        function setSeleccionActualIndicaciones(record) {
            seleccRecordActualInd = record;z
        }

        function deleteActual(grid,record) {
            seleccRecordActual = record;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addDataEliminarMedicamentos_201_2"))',
                    params: {
                        MODO: 'DELETE',
                        id: record.data.Secuencia,
                        tipo: 1
                    }
                });
                store.remove(record);
                tempEliminar = true;
                record = null;
            }
        };
        function deleteActualIndicaciones(grid,record) {
            seleccRecordActualInd = record;
            if (record != null) {
                setIndicaCambios(true);
                var store = grid.store;
                var secMed = record.data.SecuenciaMedicamento;
                var secInd = record.data.Secuencia;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addEliminar_CCEP0201_2_MEDICAMENTODETALLEINDI"))',
                    params: {
                        accion: 'DELETE',
                        codigo: record.data.Secuencia,
                        secuenciaMed: secMed,
                        secuenciaIndica: secInd
                    }
                });

                store.remove(record);
                record = null;
            }
        };

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);

                    }
                }
            }

        };

        var invalidFields = new Array();

        function updateActual(tipo, grid) {
            var indtipo = 1;
            var ArrayList0 = new Array();
            if (indtipo > 0) {
                setIndicaCambios(true);
               var store = grid.store;
                var fila = 0;



                grid.store.each(function (r) {

                    fila = fila + 1;
                    setValuesGridForm(r, null, 'MEDICINA');
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');

                    var HC_Medicamento = {
                        Secuencia: r.get('Secuencia'),
                        IdUnidadMedida: r.get('IdUnidadMedida'),
                        Dosis: r.get('Dosis'),
                        IdVia: r.get('IdVia'),
                        TipoComida: r.get('TipoComida'),
                        Cantidad: r.get('Cantidad'),
                        Frecuencia: r.get('Frecuencia'),
                        DiasTratamiento: r.get('DiasTratamiento'),
                        Linea: r.get('Linea'),
                        Familia: r.get('Familia'),
                        SubFamilia: r.get('SubFamilia'),
                        LineaDescripcion: r.get('LineaDescripcion'),
                        FamiliaDescripcion: r.get('FamiliaDescripcion'),
                        SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                        /*Comentario: r.get('Comentario'),*/
                        TipoMedicamento: r.get('TipoMedicamento'),
                        Estado: r.get('Estado'),
                        CodigoComponente: r.get('CodigoComponente'),
                        IndicadorEPS: r.get('IndicadorEPS')
                    };
                    ArrayList0.push(HC_Medicamento);
                });



                if (invalidFields.length > 0) {
                    addRecursosValidacion(invalidFields);
                    App.cmdGuardar.setDisabled(false);
                }
            }
            return ArrayList0;
        };


        var count = 0; // a counter for new records
        var countDell = 0; // a counter for new records

        var eventoOnEditar = function (btn) {
            App.cmdGuardar.setDisabled(false);
            App.btnOnEdit.setVisible(false);
            App.btnCancel.setVisible(true);

        };

        //function SelectDobleClik(secuencia, Linea, Familia) {
        function SelectDetalleClik() {
            //alert("fadfadsf");
            EstadoDetalle = 2;
            setIndicaCambios(true);
        };
        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        };
        function SelectDetalleRegistro(Obj) {
            if (EstadoDetalle == 2) {
                alert('Por favor presione Guardar Detalle.');
                return;
            } else if (EstadoDetalle == 0) {
                EstadoDetalle = 1;
            }
            RegActivoMed = Obj.Secuencia;
            App.IdMedica.setValue("Indicaciones Especificas / Generales : " + Obj.SubFamiliaDescripcion);
            var panel2 = App.Panel2;
            panel2.setVisible(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: "",
                    selectionArray2: "",
                    Id: RegActivoMed,
                    Evento: 'ListarDetalle',
                    idgrupo: 0,
                    Version: 'CCEPF101'
                }
            });
        };


        function EnviarIndicaciones() {
            var ArrayList1 = new Array();
            var i = 1;
            var ArrayList2 = new Array();
            var x = 1;
            App.storeExamenesDetalleIndic0.each(function (r) {
              //  alert(r.get('SecuenciaMedicamento'));
                var SS_HC_Indicaciones = {
                    SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                    GrupoMedicamento: 0,
                    Secuencia: r.get('Secuencia'),
                    TipoRegistro: r.get('TipoRegistro'),
                    IdTipoIndicacion: r.get('IdTipoIndicacion'),
                    Descripcion: r.get('Descripcion'),
                    Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO': 'UPDATE')
                };
                ArrayList2.push(SS_HC_Indicaciones);
                x = x + 1;
            });
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: ArrayList1,
                    selectionArray2: ArrayList2,
                    Id: 0,
                    Evento: 'Temp',
                    idgrupo: 0,
                    Version: 'CCEPF101'
                }
            });
            EstadoDetalle =0;
        }
        function PanelOcultar(grid) {
            var panel1 = App.Panel1;
            panel1.setVisible(false);
        };

        function PanelOcultar2(grid) {
            var panel8 = App.Panel8;
            panel8.setVisible(false);
        };

        function addRecordDetalle(grid) {
            //App.Window1.show();
            //alert(RegActivoMed);
            App.storeExamenesDetalleIndic0.each(function (r) {
                ContDell++
            });
            grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed,Accion:'NUEVO' });
            EstadoDetalle = 2;
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };

        function addRecordDetalleM(grid) {
            //App.Window1.show();
            //alert(RegActivoMed);
            App.storeExamenesDetalleIndic0M.each(function (r) {
                ContDell++
            });
            grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
            EstadoDetalle = 2;
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };

        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();

            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }

        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
           App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
               addRecursosValidacion(FieldsInvalidos);
            }
        };

        var addRecursosValidacion = function (FieldsInvalidos) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        };

        var getInvalidFieldsGrid = function (form, invalidFields, fila, tipo) {
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                var validar = true;
                if (!field.isValid() && validar) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: tipo + '; Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });

            return invalidFields;
        };
        var setValuesGridForm = function (r, valor, tipo) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var Secuencia = r.get('Secuencia');
            var IdUnidadMedida = r.get('IdUnidadMedida');
            var Dosis = r.get('Dosis');
            var IdVia = r.get('IdVia');
            var Cantidad = r.get('Cantidad');
            var Frecuencia = r.get('Frecuencia');
            var DiasTratamiento = r.get('DiasTratamiento');
            var Linea = r.get('Linea');
            var Familia = r.get('Familia');
            var SubFamilia = r.get('SubFamilia');
            var LineaDescripcion = r.get('LineaDescripcion');
            var FamiliaDescripcion = r.get('FamiliaDescripcion');
            var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
            var CodigoComponente = r.get('CodigoComponente');

            App.Linea.setValue(Linea == null ? null : Linea);

            App.Familia.setValue(Familia == null ? null : Familia);
            App.Dosis.setValue(Dosis == 0 ? null : Dosis);
            App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
            App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
            App.IdVia.setValue(IdVia == 0 ? null : IdVia);
            App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
            App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
            App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        };
        function eventoCancelar(form) {
            //form.getForm().reset();
            //App.taAlerts.setVisible(false);
            //App.conthbIndicaError.setVisible(false);
            //setIndicaCambios(false);
            //App.storeExamenes0.reload();
            //App.storeExamenes1.reload();

              App.bar.setDisabled(true);
            var reload = true;
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
                // beforeSave(form);
            }

        };



    </script>
    <script>
    var tempEliminar = false;
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
    var opcion_display = "";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";

    var numerogrupo = 0;
    var grillaActiva = null;/*"grillaExamenes0";*/

    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };

    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        /*
                    if (value == 6)
                        return Ext.String.format(templateX, '(COLOR_YELLOW02)', "");
                    if (value == 5)
                        return Ext.String.format(templateX, '(COLOR_GREEN01)', "");changeModalidad
                    if (value == 19)
                        return Ext.String.format(templateX, '(COLOR_ROSADO2)', "");
                    if (value == 3)
                        return Ext.String.format(templateX, '(COLOR_NARANJA)', "");
                    else
                        return Ext.String.format(templateX, '(COLOR_BLUE01)', "No especificada");
                    */

        if (value == 1)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 2)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");



        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 4)
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "Sin Seguro");

    };




    var SubFamilia = function (h) {
        var numero2 = grillaActiva.replace('grillaExamenes5', '')
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ReturnFindSubFamilia"))',
            params: {
                modo: 'set',
                linea: '',
                familia: '',
                subFamilia: str,
                descripcion: '',
                descripLinea: '',
                descripFamilia: '',
                idWindow: "IdBuscadorMedicamento",
                idgrupo: 0 /* parseInt(numero2)*/
            }
        });
    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }
    }










        function EnviarDataServer(grid) {


        if (true) {
            var store1 = 'storeExamenes5';

            alert("sss")
            if (tempEliminar == false) {


                var array01 = updateActualGrupo('MED', "");



                if (grillaActiva != null) {
                    var numero2 = grillaActiva.replace('grillaExamenes', '');
                }
                else { var numero2 = '0'; }

                /* if (invalidFields.length == 0) {*/
                App.formactual.setDisabled(true);
                alert("entro");

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Saves_Medicamentos_CCEPF201_2"))',
                    params: {
                        selectionArray1: array01,
                       // selectionArray2: array02,
                        Id: 0,
                        Evento: 'Server',
                        idgrupo: 0,/* parseInt(numero2),*/
                        Version: 'CCEPF201_2'
                    }
                });
                App.Panel2.setVisible(false);
                App.Panel1.setVisible(false);
                App.Panel8.setVisible(false)
                /* }*/
                App.cmdGuardar.setDisabled(false);
                tempEliminar = false;

                /*****ocular indicaciones
                for (var i = 1; i < numerogrupo; i++) {

                    //if (i != numero) {
                    Ext.getCmp('Indicaciones' + i).setVisible(false);

                    //}
            }*/
                /*******/
                @*Ext.net.DirectMethod.request({
                    url: '@(Url.Action("reloadFormatos"))',
                    params: {
                        indica: ''
                    }
                });*@
                var reload = true;
                if (reload) {

                    parent.App.txtRecargarX.setValue('RELOAD');
                }

                /*}*/
            }
            else {
                App.formactual.setDisabled(true);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'No se ingresó ningún medicamento',
                        tipo: 'WARNING'
                    }
                });
                //valor.setValue('');
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(true);
                return;
            }
        } else {
            App.cmdGuardar.setDisabled(false);
            App.cmdGuardar.setDisabled(false);
        }
    };

    var count = 0;
    function InsertRow(valor, estado, soloLectura) {


        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (grillaActiva != null) {
                if (valor.getValue() != '') {


                    /* App.btnAgregar.setVisible(true);
                     App.btnModificar.setVisible(false);
                     */


                    var obj = JSON.parse(valor.getValue());

                    var DescripcionLocalVar = obj.DescripcionLocal;

                    opcion_display = obj.Compania;



                    var grid = Ext.getCmp("" + grillaActiva);

                    var ValorEntero4Var = obj.ValorEntero4;


                    var numero2 = grillaActiva.replace('grillaExamenes', '')


                    App.NumeroStore1.setValue(numero2);



                    var TipoMedicamento_var = null;
                    if (grillaActiva == 'grillaExamenes0') {
                        TipoMedicamento_var = 2;
                    } else if (grillaActiva == 'grillaExamenes1') {
                        TipoMedicamento_var = 4;
                    } else if (grillaActiva == 'grillaExamenes5') {
                        TipoMedicamento_var = 5;
                    }



                    if (validaDuplicado(obj.CodigoElemento, grid)) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                    // valor.setValue('');
                    setIndicaCambios(true);

                    if (grillaActiva == "grillaExamenes0") {



                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.Periodo.setValue(null);
                        App.UnidadTiempo.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);
                        App.TipoComida.setValue(null);


                        App.btnAgregar.setVisible(true);
                        App.btnModificar.setVisible(false);


                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamilia"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: parseInt(numero2)
                            }
                        });



                    }

                    else if (grillaActiva == "grillaExamenes5") {



                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.Periodo.setValue(null);
                        App.UnidadTiempo.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);
                        App.TipoComida.setValue(null);


                        App.btnAgregar.setVisible(true);
                        App.btnModificar.setVisible(false);


                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamilia"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: parseInt(numero2)
                            }
                        });





                    }

                    else {

                        App.Linea.setValue(null);
                        App.cbIdUnidadMedida.setValue(null);
                        App.Familia.setValue(null);
                        App.Dosis.setValue(null);
                        App.Frecuencia.setValue(null);
                        App.SubFamilia.setValue(null);
                        App.IdVia.setValue(null);
                        App.Periodo.setValue(null);
                        App.UnidadTiempo.setValue(null);
                        App.DiasTratamiento.setValue(null);
                        App.Cantidad.setValue(null);
                        App.CodigoComponente.setValue(null);
                        App.IndicadorEPS.setValue(null);
                        App.TipoComida.setValue(null);

                        App.CantidadX.setValue(null);

                        App.btnAgregarX.setVisible(true);
                        App.btnModificarX.setVisible(false);

                        Edito = false;

                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("ReturnFindSubFamiliaX"))',
                            params: {
                                modo: 'set',
                                linea: '',
                                familia: '',
                                subFamilia: DescripcionLocalVar,
                                descripcion: '',
                                descripLinea: '',
                                descripFamilia: '',
                                indicadoreps: ValorEntero4Var,
                                idWindow: "IdBuscadorMedicamento",
                                idgrupo: 0
                            }
                        });


                    }

                    /*
                                            };



                                            Ext.net.DirectMethod.request({
                                               url: '(Url.Action("Save_MedicamentoTempGrupo"))',
                                                params: {
                                                    selectionArray1: valor.getValue()

                                                }
                                            });



                                            grid.store.insert(0, {
                                                IndicadorEPS: ValorEntero4Var,
                                                Secuencia: count++,
                                               // TipoReceta: obj,
                                                SubFamiliaDescripcion: DescripcionLocalVar
                                            });

                                            Ext.Function.defer(function () {
                                                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                                            }, 100);
                                        }*/


                    /*
                    var grid = Ext.getCmp("grillaExamenes");
                    setIndicaCambios(true);
                    grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorCodigo1: valor.getValue() });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);*/
                    valor.setValue('');

                    /*if (grillaActiva != "grillaExamenes0") {
                        var panel1 = App.Panel1;
                        panel1.setVisible(false);/

                        Ext.getCmp("btnAgre").el.dom.click();
                    }*/
                }

            }

            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las Tablas.',
                        tipo: 'WARNING'
                    }
                });
                return;
            }

        }
    }

    function EnviarIndicacionesGrupo() {
        var ArrayList1 = new Array();
        var i = 1;
        var ArrayList2 = new Array();
        var x = 1;
        var numero2 = grillaActiva.replace('grillaExamenes', '')

        App.storeExamenesDetalleIndic0.each(function (r) {
            //  alert(r.get('SecuenciaMedicamento'));
            var SS_HC_Indicaciones = {
                SecuenciaMedicamento: r.get('SecuenciaMedicamento'),
                Secuencia: r.get('Secuencia'),
                TipoRegistro: r.get('TipoRegistro'),
                IdTipoIndicacion: r.get('IdTipoIndicacion'),
                Descripcion: r.get('Descripcion'),
                Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
            };
            ArrayList2.push(SS_HC_Indicaciones);
            x = x + 1;
        });
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: ArrayList1,
                selectionArray2: ArrayList2,
                Id: parseInt(numero2),
                Evento: 'Temp',
                idgrupo: parseInt(numero2),
                Version: 'CCEPF101'
            }
        });
        EstadoDetalle = 0;
    }



    function validaDuplicado(valor, grid) {
        var numero = grillaActiva.replace('grillaExamenes', '')
        var store1 = 'storeExamenes' + numero;
        var store = Ext.getStore(store1);
        var estados = false;
        var valor1;
        var valor2;
        store.each(function (r) {
            if (trim(r.get('CodigoComponente')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }


    function noDuplicado(valor) {

        if (getValidarDatos(valor)) {

            if (App.Dosis.getValue() != null && App.Cantidad.getValue() != null) {


                var noHayDuplicado = false;

                var numero = 0;//grillaActiva.replace('grillaExamenes', '')

                //if (numero == 5) { App.NumeroStore1.setValue(numero); }
                //else {
                App.NumeroStore.setValue(numero);
                //}

                var grilla = grillaActiva;
                var store1 = 'storeExamenes0'// + numero;

                Ext.getStore(store1).each(function (r) {

                    if (trim(r.get('Linea')) == trim(App.Linea.getValue()) &&
                        trim(r.get('Familia')) == trim(App.Familia.getValue()) &&
                        trim(r.get('SubFamilia')) == trim(App.SubFamilia.getValue())) {
                        noHayDuplicado = true;
                    }
                });
                if (noHayDuplicado) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro.',
                            tipo: 'WARNING'
                        }
                    });
                }
                // alert(estados);


                App.taAlerts2.setVisible(false);


                return !noHayDuplicado;

            } else {
                /*Ext.net.DirectMethod.request({
                    url: '(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe completar los campos obligarios.',
                        tipo: 'WARNING'
                    }
                });*/
                App.taAlerts2.setVisible(true);
                var mensajesX = "";
                if (App.Dosis.getValue() == null) {
                    Ext.getCmp('Dosis').setActiveError('Debe ingresar la dosis');
                    mensajesX = mensajesX + "*" + "Debe ingresar la dosis" + "\n";

                }
                if (App.Cantidad.getValue() == null) {
                    Ext.getCmp('Cantidad').setActiveError('Debe ingresar la Cantidad');
                    mensajesX = mensajesX + "*" + "Debe ingresar la Cantidad" + "\n";

                }


                App.taAlerts2.setValue(mensajesX);

                return true;
            }
        } else {
            return false;
        }

    }
    function noDuplicado2(valor) {


        if (App.Dosis.getValue() != null && App.Cantidad.getValue() != null) {


            var noHayDuplicado = true;

            var numero = grillaActiva.replace('grillaExamenes', '')


            App.NumeroStore.setValue(numero);
            var grilla = grillaActiva;
            var store1 = 'storeExamenes' + numero;

            Ext.getStore(store1).each(function (r) {

                if (trim(r.get('Linea')) == trim(App.Linea.getValue()) &&
                    trim(r.get('Familia')) == trim(App.Familia.getValue()) &&
                    trim(r.get('SubFamilia')) == trim(App.SubFamilia.getValue())) {
                    noHayDuplicado = false;
                }
            });
            if (!noHayDuplicado) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Ya existe registro.',
                        tipo: 'WARNING'
                    }
                });
            }
            // alert(estados);


            App.taAlerts2.setVisible(false);


            return noHayDuplicado;

        } else {
            /*Ext.net.DirectMethod.request({
                url: '(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe completar los campos obligarios.',
                    tipo: 'WARNING'
                }
            });*/
            App.taAlerts2.setVisible(true);
            var mensajesX = "";
            if (App.Dosis.getValue() == null) {
                Ext.getCmp('Dosis').setActiveError('Debe ingresar la dosis');
                mensajesX = mensajesX + "*" + "Debe ingresar la dosis" + "\n";

            }
            if (App.Cantidad.getValue() == null) {
                Ext.getCmp('Cantidad').setActiveError('Debe ingresar la Cantidad');
                mensajesX = mensajesX + "*" + "Debe ingresar la Cantidad" + "\n";

            }


            App.taAlerts2.setValue(mensajesX);

            return true;
        }


    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }

    function setImpresion(store) {
        //     App.btnImpresion.setVisible(false);
        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0) {

            //       App.btnImpresion.setVisible(true);
        }

    }

    function setImpresion1(store) {

        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0 || Ext.getStore('storeExamenes1').getCount() > 0) {
            if (haynuevos == false) {
                App.btnImpresion.setVisible(true);
                App.btnImpresionHC.setVisible(true);
            }
            else {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        } else {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }
    function setImpresion2(store) {

        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0 || Ext.getStore('storeExamenes0').getCount() > 0) {
            if (haynuevos == false) {
                App.btnImpresion.setVisible(true);
                App.btnImpresionHC.setVisible(true);
            }
            else {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }

        } else {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }



    /*var grillaActiva = null;*/
    var grillaActiva = null;
    function eventoDesactivarSeleccion(btnComponente, btnComponenteMostrar) {

        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);
        grillaActiva = null;


        parent.App.East1.collapse();

        /* Ext.net.DirectMethod.request({
             url: '(Url.Action("PanelEast"))',
             params: {
                 containerId: 'East1'

             }
         });*/

        /*   var numero = btnComponente.id.replace('btnSelActivo0', '')

           Ext.getCmp(button.id).hide();

           Ext.getCmp('btnSelDesactivo0' + numero).show();
           */




        /* var panel3 = App.Panel3;
         panel3.setVisible(false);*/

        /*****ocular indicaciones**
        for (var i = 1; i < numerogrupo; i++) {


                Ext.getCmp('Indicaciones' + i).setVisible(false);


        }
        *******/


        /*grillaActiva = null;*/
    };
    function eventoActivarSeleccion(btnComponente, btnComponenteMostrar, idGrillaActiva) {

        App.btnSelDesactivo0M.setVisible(true);
        App.btnSelActivo0M.setVisible(false);

        App.btnSelDesactivo0.setVisible(true);
        App.btnSelActivo0.setVisible(false);


        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);

        grillaActiva = idGrillaActiva;

        /* var panelServ = Ext.getCmp('East1');*/



        /*parent.App.East1.collapse();*/


        /* Ext.net.DirectMethod.request({
             url: '(Url.Action("PanelEast"))',
             params: {
                 containerId: 'East1'

             }
         });*/
        parent.App.East1.expand();

        if (grillaActiva == 'grillaExamenes1') {
            /* parent.App.PanelServicios.items.items[3].ownerCt.items.items[3].items.items["0"].items.items["0"].setValue("13");*/
            parent.App.cbLinea.setValue('@opcion');
            parent.App.StoreBuscarServicios.reload()
        }
        else if (grillaActiva == 'grillaExamenes5') {
            parent.App.cbLinea.setValue("04");
            parent.App.StoreBuscarServicios.reload()
        }
        else {
            parent.App.cbLinea.setValue("04");
            parent.App.StoreBuscarServicios.reload()
        }

        /* var idGrillaActiva = 'grillaExamenes0';*/

        grillaActiva = idGrillaActiva;

        /*  var panelServ = Ext.getCmp('East1');

           parent.App.East1.expand();

           var numero = button.id.replace('btnSelDesactivo', '');

           Ext.getCmp(button.id).hide();

           Ext.getCmp('btnSelActivo' + numero).show();

           for (var i = 0; i < numerogrupo; i++) {

               if (i != numero) {
                   Ext.getCmp('btnSelActivo' + i).hide();
                   Ext.getCmp('btnSelDesactivo'+i).show();
               }
           }*/



        /*  var idGrillaActiva = 'grillaExamenes' + numero;

          grillaActiva = idGrillaActiva;


          if (grillaActiva != 'grillaExamenes0') {
              App.NumeroStore.setValue(numero);
              /*SelectDetalleRegistroGrupo(numero);*/
        /* var panel2 = App.Panel2;
         panel2.setVisible(false);

     }
     else {*/
        /* var panel3 = App.Panel3;
         panel3.setVisible(false);*/
        /*  }*/
        /*****ocular indicaciones**/
        /* for (var i = 1; i < numerogrupo; i++) {

             /*if (i != numero) {*/
        /*   Ext.getCmp('Indicaciones' + i).setVisible(false);*/

        /* }*/
        /*  }*/
        /*******/

    };



    function eventoVerIndicaciones(button, event) {

        var numero = button.id.replace('btnVerIndi', '')
        var store1 = 'storeExamenes' + numero;

        if (Ext.getStore(store1).getCount() > 0) {


            /*parent.App.East1.collapse();*/



            /* Ext.getCmp(button.id).hide();

            Ext.getCmp('btnSelDesactivo' + numero).show();

                        for (var i = 1; i < numerogrupo + 1; i++) {

                            if (i != numero) {
                                Ext.getCmp('btnSelDesactivo' + i).hide();
                                Ext.getCmp('btnSelActivo' + i).show();
                             }
                        }
            Indicaciones
            */
            var panel3 = Ext.getCmp('PanelIndicaciones' + numero);
            panel3.setVisible(true);

            for (var i = 1; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('PanelIndicaciones' + i).setVisible(false);

                }
            }
        }
        else {

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe ingresar almenos un registro',
                    tipo: 'WARNING'
                }
            });

        }

    };


    function addRecordDetalleG(grid) {
        //App.Window1.show();
        //alert(RegActivoMed);
        var numero = grillaActiva.replace('grillaExamenes', '')
        var grilla = grillaActiva;
        var store1 = 'storeExamenes' + numero;
        App.taAlerts2.setVisible(false);
        Ext.getStore(store1).each(function (r) {
            ContDell++
        });
        grid.store.insert(0, { Secuencia: ContDell++, SecuenciaMedicamento: RegActivoMed, Accion: 'NUEVO' });
        EstadoDetalle = 2;
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    };






    function EnviarIndicacionesG() {
        var ArrayList1 = new Array();
        var i = 1;
        var ArrayList2 = new Array();
        var x = 1;
        var numero = grillaActiva.replace('grillaExamenes', '');
        App.storeExamenesDetalleIndicGrupo.each(function (r) {
            /*var secuenciatmp= null;
            if (numero=='0') {
                secuenciatmp: r.get('SecuenciaMedicamento');
            }
            else{
                secuenciatmp: numero;}*/

            //  alert(r.get('SecuenciaMedicamento'));
            var SS_HC_Indicaciones = {

                SecuenciaMedicamento: numero,
                GrupoMedicamento: numero,

                Secuencia: r.get('Secuencia'),
                TipoRegistro: r.get('TipoRegistro'),
                IdTipoIndicacion: r.get('IdTipoIndicacion'),
                Descripcion: r.get('Descripcion'),
                Accion: (r.get('Accion') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
            };
            ArrayList2.push(SS_HC_Indicaciones);
            x = x + 1;
        });
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Medicamentos"))',
            params: {
                selectionArray1: ArrayList1,
                selectionArray2: ArrayList2,
                Id: parseInt(numero),
                Evento: 'Temp',
                idgrupo: parseInt(numero),
                Version: 'CCEPF101'
            }
        });
        EstadoDetalle = 0;
        App.taAlerts2.setVisible(false);
    }



















    function addgrupo(NumGrupMed1) {



        if (parseInt(numerogrupo) <= parseInt(NumGrupMed1)) {
            numerogrupo = parseInt(NumGrupMed1) + 1;
        }


        var panelG = new Ext.Panel({
            id: 'Grupo' + numerogrupo,
            title: "GRUPO" + numerogrupo,
            //tbar: tb,
            html: "<div>ghggg</div>",
            border: false,
            hidden: true
        });



        Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
            id: 'Grupo' + numerogrupo,
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            //title: "GRUPO " + numerogrupo,
            //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
            border: false,
            hidden: true

        }));
        Ext.getCmp('FSGrupos').add(Ext.create('Ext.Panel', {
            id: 'PanelIndicaciones' + numerogrupo,
            /*frame: true,*/
            layout: {
                type: 'vbox',
                align: 'stretch'
            },/**/
            //title: "GRUPO " + numerogrupo,
            //  html: "<div class='x-panel x-panel-default' style='height: 400px;width: 96%;left: 2%;right: 2%;top: 10px;' id='SubPanel'><div class='x-toolbar x-docked x-toolbar-default x-docked-top x-toolbar-docked-top x-toolbar-default-docked-top x-box-layout-ct' id='toolbar-1011' style='width: 100%; right: auto; left: 0px; top: 0px;'><div id='toolbar-1011-innerCt' class='x-box-inner ' role='presentation' style='width: 100%x; height: 0px;'><div id='toolbar-1011-targetEl' class='x-box-target' style='width: 665px;'></div></div></div><div id='SubPanel" + data[i].IdNanda + "-body' class='x-panel-body x-panel-body-default x-accordion-layout-ct x-panel-body-default' style='left: 0px; width: 669px; height: 395px; top: 5px;'><div id='SubPanel" + data[i].IdNanda + "-innerCt' class='x-box-inner ' role='presentation' style='height: 393px; width: 667px;'><div id='SubPanel" + data[i].IdNanda + "-targetEl' class='x-box-target' style='width: 667px;'></div></div></div></div>",
            border: false,
            hidden: true,
            items: [{

                xtype: 'fieldset',
                columnWidth: 0.5,
                title: 'Indicaciones Especificas del Grupo ' + numerogrupo,
                collapsible: true,
                defaultType: 'textfield',
                /* defaults: { anchor: '100%' },*/
                /*layout: 'anchor',*/
                items: [
                    {
                        xtype: 'combobox',
                        id: 'cbIdVia' + numerogrupo,
                        fieldLabel: 'Via',
                        readonly: true,
                        typeAhead: false,
                        lazyRender: false,
                        /*selectOnFocus: true,*/
                        forceSelection: true,
                        width: 250,
                        listWidth: 250,
                        lazyInit: true,
                        selectOnFocus: false,
                        /* maintainFlex: true,*/
                        hideMode: 'visibility',
                        triggerAction: "all",
                        editable: true,
                        hasfocus: true,

                        /*triggerAction: "all",*/
                        store: Ext.create('Ext.data.Store', {
                            id: 'storeG2',
                            fields: ['Name', 'ID'],

                            autoLoad: true,
                            proxy: {
                                type: 'ajax',
                                url: 'COMBOS2',
                                extraParams: { valor2: "TIPOVIA" },
                                reader: {
                                    type: 'json',
                                    root: 'data',
                                    idProperty: 'ID'
                                }
                            }
                        }

                        ),
                        valueField: 'ID',
                        displayField: 'Name'

                    }, {
                        xtype: 'form',
                        //title: 'Form',
                        layout: 'column',
                        border: false,
                        labelAlign: 'top',
                        defaults: {
                            xtype: 'container',
                            layout: 'form',
                            columnWidth: 0.25
                        },
                        items: [{
                            items: [{
                                xtype: 'numberfield',
                                readonly: true, ///modolectura
                                width: 200,
                                id: 'numeroFrecuencia' + numerogrupo,
                                fieldLabel: 'Frecuencia'
                            }]
                        }, {
                            items: [{
                                xtype: 'combobox',
                                id: 'cbUTfrecuencia' + numerogrupo,
                                fieldLabel: 'U. Tiempo',
                                readonly: true,
                                typeAhead: false,
                                lazyRender: false,
                                /*selectOnFocus: true,*/
                                forceSelection: true,
                                width: 200,
                                listWidth: 200,
                                lazyInit: true,
                                selectOnFocus: false,
                                /* maintainFlex: true,*/
                                hideMode: 'visibility',
                                triggerAction: "all",
                                editable: true,
                                hasfocus: true,
                                value: 64,
                                /*triggerAction: "all",*/
                                store: Ext.create('Ext.data.Store', {
                                    id: 'storeU',
                                    fields: ['Name', 'ID'],

                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: 'COMBOS2',
                                        extraParams: { valor2: "UNITIEMPO" },
                                        reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                        }
                                    }
                                }

                                ),
                                valueField: 'ID',
                                displayField: 'Name'
                            }]
                        }]
                    }, {
                        xtype: 'form',
                        //title: 'Form',
                        layout: 'column',
                        border: false,
                        labelAlign: 'top',
                        defaults: {
                            xtype: 'container',
                            layout: 'form',
                            columnWidth: 0.25
                        },
                        items: [{
                            items: [{
                                xtype: 'numberfield',
                                readonly: true, ///modolectura
                                width: 200,
                                id: 'numPeriodo' + numerogrupo,
                                fieldLabel: 'Periodo'
                            }]
                        }, {
                            items: [{
                                xtype: 'combobox',
                                id: 'cbUTperiodo' + numerogrupo,
                                fieldLabel: 'U. Tiempo',
                                readonly: true,
                                typeAhead: false,
                                lazyRender: false,
                                /*selectOnFocus: true,*/
                                forceSelection: true,
                                width: 200,
                                listWidth: 200,
                                lazyInit: true,
                                selectOnFocus: false,
                                /* maintainFlex: true,*/
                                hideMode: 'visibility',
                                triggerAction: "all",
                                editable: true,
                                hasfocus: true,
                                value: 64,
                                /*triggerAction: "all",*/
                                store: Ext.create('Ext.data.Store', {
                                    id: 'storeU',
                                    fields: ['Name', 'ID'],

                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: 'COMBOS2',
                                        extraParams: { valor2: "UNITIEMPO" },
                                        reader: {
                                            type: 'json',
                                            root: 'data',
                                            idProperty: 'ID'
                                        }
                                    }
                                }

                                ),
                                valueField: 'ID',
                                displayField: 'Name'
                            }]
                        }]
                    },

                    {
                        xtype: 'textareafield',
                        grow: true,
                        id: 'txtAindicacion' + numerogrupo,
                        fieldLabel: 'Indicación especifica',
                        width: 450,    /*,

                    anchor: '100%'*/
                    }]

            }]

        }));
        cargargrilla(parseInt(numerogrupo));

        numerogrupo = parseInt(numerogrupo) + 1;

    }


    var cargargrilla = function (numero) {
        //var d = data.length;
        var nomp = 'Grupo' + numero
        var Subpanel = Ext.getCmp(nomp);

        var myButton1 = new Ext.Button({
            id: 'btnSelDesactivo' + numero,
            html: "<b>Bienes/servicios</b>",
            iconCls: 'icon-plugindisabled',
            handler: this.eventoActivarSeleccion
        });
        var myButton2 = new Ext.Button({
            id: 'btnSelActivo' + numero,
            html: "<b>Bienes/servicios</b>",
            iconCls: 'icon-plugingo',
            hidden: true,
            handler: this.eventoDesactivarSeleccion
        });
        var myButton3 = new Ext.Button({
            id: 'btnVerIndi' + numero,
            html: "<b>Indicaciones</b>",
            /*iconCls: 'icon-plugingo',*/
            hidden: false,
            handler: this.eventoVerIndicaciones
        });

        var tb1 = new Ext.Toolbar({
            border: false,
            flex: 1,
            items: [
                {
                    xtype: 'label',
                    html: "<b><font color='#284A89'> GRUPO " + numerogrupo + "</font></b>"
                }, { xtype: 'tbfill' }, { xtype: 'tbseparator' }, myButton3, myButton1, myButton2,
            ]
        });

        var tb2 = new Ext.Toolbar({
            border: false,
            items: [{
                xtype: 'label',
                html: "<span style = 'color: " + COLOR_BLUE01 + "; '>" + "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" + "</span>"
            }, { xtype: 'tbspacer', width: 5 },
            {
                xtype: 'label',
                html: "<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" + "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" + "</span>"
            }
            ]
        });

        var comboP = new Ext.form.ComboBox({
            xtype: 'combobox',
            itemId: 'cbAVALORPRESENTACION',
            readonly: true,
            /*typeAhead: false,*/
            selectOnFocus: true,
            forceSelection: true,
            /*typeAhead: true,
            triggerAction: 'all',*/
            lazyRender: true,/**/
            lazyInit: true,
            selectOnFocus: false,
            maintainFlex: true,
            hideMode: 'visibility',
            triggerAction: "all",
            editable: true,
            hasfocus: true,
            /*  autoFocus: true,
           autoLoad: true,*/
            /*style: { 'class': 'x-form-field x-form-text x-form-focus x-field-form-focus x-field-default-form-focus' },*/
            /*hideEl: false,*/
            store: Ext.create('Ext.data.Store', {
                /*id: 'storeG',*/
                model: Ext.define('storeG', {
                    extend: "Ext.data.Model",
                    idProperty: 'ID',
                    fields: [
                        { name: "Name" },
                        { name: "ID" }
                    ]
                })

                ,
                /*fields: ['Name', 'ID'],*/
                /*data: {},*/
                autoLoad: true,
                proxy: {
                    type: 'ajax',
                    url: 'COMBOS',
                    extraParams: { valor: "UNIDADPRESENTACION" },
                    reader: {
                        type: 'json',
                        root: 'data',
                        idProperty: 'ID'
                    }
                }
            }

            ),
            valueField: 'ID',
            displayField: 'Name'
        });

        var comboV = new Ext.form.ComboBox({
            xtype: 'combobox',
            itemId: 'cbIdVia',
            readonly: true,
            typeAhead: false,
            lazyRender: false,
            /*selectOnFocus: true,*/
            forceSelection: true,

            lazyInit: true,
            selectOnFocus: false,
            maintainFlex: true,
            hideMode: 'visibility',
            triggerAction: "all",
            editable: true,
            hasfocus: true,

            triggerAction: "all",
            store: Ext.create('Ext.data.Store', {
                id: 'storeG2',
                fields: ['Name', 'ID'],

                autoLoad: true,
                proxy: {
                    type: 'ajax',
                    url: 'COMBOS2',
                    extraParams: { valor2: "TIPOVIA" },
                    reader: {
                        type: 'json',
                        root: 'data',
                        idProperty: 'ID'
                    }
                }
            }

            ),
            valueField: 'ID',
            displayField: 'Name'

        });



        Ext.util.Format.comboRenderer = function (combo) {
            return function (value) {
                var record = combo.findRecord(combo.valueField, value);
                return record ? record.get(combo.displayField) : combo.valueNotFoundText;
            }
        };





        var grid = Ext.create('Ext.grid.Panel', {
            id: 'grillaExamenes' + numero,
            /*renderTo: 'Grupo' + numerogrupo,
            layout: {
                padding: '10', align: 'stretch'
            },*/
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            stripeRows: true,
            /* forceFit: true,*/
            /*collapsible: true,*/
            enableColumnMove: true,
            enableColumnResize: true,
            enableColumnHide: false,
            /* frame: true,
            renderTo: Ext.getBody(),*/
            store: Ext.create('Ext.data.Store', {
                id: 'storeExamenes' + numero,
                model: Ext.define('storeExamenes' + numero, {/*Ext.id(), {*/
                    extend: "Ext.data.Model",
                    idProperty: 'Secuencia',
                    fields: [
                        { name: "Secuencia", type: 'string' },
                        { name: "IdUnidadMedida", type: 'int' },
                        { name: "Dosis", type: 'float' },
                        { name: "IdVia", type: 'int' },
                        { name: "Cantidad", type: 'float' },
                        { name: "Frecuencia", type: 'float' },
                        { name: "DiasTratamiento", type: 'float' },
                        { name: "Linea", type: 'string' },
                        { name: "Familia", type: 'string' },
                        { name: "SubFamilia", type: 'string' },
                        { name: "LineaDescripcion", type: 'string' },
                        { name: "FamiliaDescripcion", type: 'string' },
                        { name: "SubFamiliaDescripcion", type: 'string' },
                        { name: "Estado", type: 'int' },
                        { name: "TipoMedicamento", type: 'int' },
                        { name: "CodigoComponente", type: 'string' },
                        { name: "IndicadorEPS", type: 'int' },
                        { name: "TipoReceta", type: 'int' },
                        { name: "TipoComida", type: 'int' },
                        { name: "UnidadTiempo", type: 'int' },
                        { name: "Periodo", type: 'string' },
                        { name: "Indicacion", type: 'string' }
                    ]
                }),
                autoLoad: true,
                groupField: 'Secuencia',
                remoteSort: false,
                ispadingstore: true,
                remotepaging: true,/**/


                proxy: {

                   type: 'ajax',
                    url: 'CCEP0304_MEDICAMENTO',
                    extraParams: { tipoRecurso: 1, grupo: parseInt(numero) },
                    reader: {
                        type: "json",

                        root: 'data',
                        totalproperty: 'total',
                        idProperty: 'Secuencia'
                    }
                },
                listeners: {
                    load: function (ref, records, successful) {
                        if (records.length > 0) {
                            Ext.getCmp('numeroFrecuencia' + numero).setValue(records[0].data.Frecuencia);
                            Ext.getCmp('numPeriodo' + numero).setValue(records[0].data.Periodo);
                            Ext.getCmp('cbIdVia' + numero).setValue(records[0].data.IdVia);
                            Ext.getCmp('cbUTfrecuencia' + numero).setValue(records[0].data.UnidadTiempo);
                            Ext.getCmp('cbUTperiodo' + numero).setValue(records[0].data.TipoComida);
                            Ext.getCmp('txtAindicacion' + numero).setValue(records[0].data.Indicacion);
                        } else {
                            /*alert('Image load error.');*/
                        }
                    }

                }
            }),
            columns: {
                items: [
                    {
                        dataIndex: "IndicadorEPS",
                        text: "EPS",
                        width: 30,
                        sortable: true,
                        hideable: true,
                        renderer: function (value) {
                            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
                            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
                            if (value == 1)
                                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
                            else if (value == 2)
                                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
                            else if (value == 3)
                                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
                            else if (value == 4)
                                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
                            else
                                return Ext.String.format(template, "gray", "No especificada");
                        }
                    },
                    {
                        dataIndex: "Secuencia",
                        text: "Nro",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "TipoReceta",
                        text: "Modalidad",
                        width: 60,
                        renderer: function (value) {
                            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
                            var template = '<span style="color:{0};">{1}</span>';
                            if (value == 6)
                                return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
                            if (value == 5)
                                return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
                            if (value == 19)
                                return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
                            if (value == 3)
                                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
                            else
                                return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");

                        }
                    },
                    {
                        dataIndex: "SubFamiliaDescripcion",
                        text: "Medicamentos",
                        xtype: 'componentcolumn',
                        flex: 1,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true,
                            maskRe: /¬/
                        }
                    },
                    {
                        dataIndex: "Dosis",
                        text: "Dosis",
                        xtype: 'componentcolumn',
                        width: 70,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "IdUnidadMedida",
                        text: "Und. Medida", /*"Presentación",*/
                        /*xtype: 'componentcolumn',*/
                        width: 100,
                        /*sortable: true,*/
                        /* mode: 'local',*/
                        queryMode: 'local',
                        /*hideable: true,*/
                        editor: comboP,
                        renderer:/* Ext.ux.util.ComboRenderer,*/Ext.util.Format.comboRenderer(comboP)/*comboRenderer*/


                    },
                    {
                        dataIndex: "IdVia",
                        text: "Via",
                        /*xtype: 'componentcolumn',*/
                        width: 110,
                        /*sortable: true,*/
                        /* mode: 'local',*/
                        queryMode: 'local',
                        hidden: true,
                        editor: comboV,
                        renderer: Ext.util.Format.comboRenderer(comboV)


                    },
                    {
                        dataIndex: "Cantidad",
                        text: "Cantidad",
                        xtype: 'componentcolumn',
                        width: 80,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "Frecuencia",
                        text: "C/. hr.",
                        xtype: 'componentcolumn',
                        width: 70,
                        hidden: true,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///modolectura
                        }
                    },
                    {
                        dataIndex: "DiasTratamiento",
                        text: "Dias",
                        xtype: 'componentcolumn',
                        width: 70,
                        hidden: true,
                        editor: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true ///moddolectura
                        }
                    },
                    {
                        dataIndex: "TipoComida",
                        text: "TipoComida",
                        xtype: 'componentcolumn',
                        width: 70,
                        editor: true,
                        hidden: true,
                        component: {
                            xtype: 'numberfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "UnidadTiempo",
                        text: "Und. Tiempo",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "Periodo",
                        text: "Periodo",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        dataIndex: "Indicacion",
                        text: "Indicaciones Especificas",
                        xtype: 'componentcolumn',
                        width: 30,
                        hidden: true,
                        sortable: true,
                        hideable: true,
                        editor: true,
                        component: {
                            xtype: 'textfield',
                            readonly: true
                        }
                    },
                    {
                        text: "Acción",
                        xtype: 'actioncolumn',
                        width: 70,

                        items: [{
                            xtype: 'button',
                            // disabled: true, ///moddolectura,
                            //commandname: 'Delete',
                            /* id: 'elimina'+numero,*/
                            iconCls: 'icon-delete',
                            text: 'Eliminar',
                            html: "<b>Eliminar</b>",
                            tooltip: 'Eliminar',
                            handler: function (grid, rowIndex, colIndex) {


                                var grid = Ext.getCmp('grillaExamenes' + numero);
                                var selection = grid.getView().getSelectionModel().getSelection()[0];
                                var record = grid.getStore().getAt(rowIndex);
                                seleccRecordActual = record;
                                if (record != null) {
                                    /*setIndicaCambios(true);*/
                                    var store = grid.store;
                                    Ext.net.DirectMethod.request({
                                        url: '@(Url.Action("addDataEliminarMedicamentos"))',
                                        params: {
                                            MODO: 'DELETE',
                                            id: record.data.Secuencia,
                                            tipo: 1
                                        }

                                    });
                                    store.remove(record);
                                    record = null;

                                }


                            }

                        }]
                    }

                ]
            },
            selModel: {
                selType: 'rowmodel',
                mode: 'MULTI'
            }, viewConfig: {
                forceFit: true
            },
            plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                clicksToEdit: 1
            })
           ],
            tbar: [tb1],
            //bbar: [tb2 ],
            // enableDragDrop: true,
            // stripeRows: true,
            //autoExpandColumn: 'name',
            width: '100%',
            // height: 325,
            /* region: 'west'*/
            listeners: {
                mouseover: {
                    fn: function (e) {
                        var grid = Ext.getCmp('grillaExamenes' + numero);
                        var idx = grid.getView().findRowIndex(e.target);
                        var row = this.getStore().getAt(idx);
                        Ext.Msg.alert('ALERT', row.get('company') + ' - change:' + row.get('change'));
                    }
                }
            }
        });


        Subpanel.add(grid);
        Subpanel.doLayout();

    };



    function SelectDetalleRegistroGrupo(Obj) {
        /* if (EstadoDetalle == 2) {
             alert('Por favor presione Guardar Detalle.');
             return;
         } else if (EstadoDetalle == 0) {
             EstadoDetalle = 1;
         }*/
        RegActivoMed = Obj;

        if (Obj != 0) {
            App.IdMedicaGrupo.setValue("Indicaciones Especificas / Generales : Grupo " + Obj);
            var panel3 = App.Panel3;
            panel3.setVisible(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Medicamentos"))',
                params: {
                    selectionArray1: "",
                    selectionArray2: "",
                    Id: RegActivoMed,
                    Evento: 'ListarDetalle',
                    idgrupo: RegActivoMed,
                    Version: 'CCEPF101'
                }
            });
        }
        else {
            var panel3 = App.Panel3;
            panel3.setVisible(false);
        }
    };



    function deleteActualG(grid, record) {
        seleccRecordActual = record;

        var numero = grillaActiva.replace('grillaExamenes', '');
        var grilla = grillaActiva;
        var store1 = 'storeExamenes' + numero;




        if (record != null) {
            setIndicaCambios(true);
            var store = Ext.getStore(store1);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addDataEliminarMedicamentos"))',
                params: {
                    MODO: 'DELETE',
                    id: record.data.Secuencia,
                    tipo: 1
                }
            });
            store.remove(record);
            record = null;
        }
    };

        var invalidFields = new Array();

           function updateActualGrupo(tipo, grid) {
        var indtipo = 1;
               var ArrayList0 = new Array();




        if (indtipo > 0) {
            setIndicaCambios(true);



            var numerotemp = numerogrupo;
            if (numerotemp == 0) { numerotemp = 1 }
            var numeroX = 0;
            var frecuencia = 0;
            var periodo = 0;
            var via = 0;
            var unitiempo1 = 0;
            var unitiempo2 = 0;
            var txtindicacion = '';

            alert(numerotemp);

            for (var i = 0; i < numerotemp; i++) {
                var grid1 = Ext.getCmp('grillaExamenes5' + i);



                var fila = 0;
                numeroX = numeroX + 1;


                grid1.store.each(function (r) {


                    ///VALIDACIÓN
                    fila = fila + 1;


                    if (i == 0) {
                        frecuencia = r.get('Frecuencia');
                        periodo = r.get('Periodo');
                        via = r.get('IdVia');
                        unitiempo1 = r.get('UnidadTiempo');
                        unitiempo2 = r.get('TipoComida');
                        txtindicacion = r.get('Indicacion');




                    } else {



                        frecuencia = Ext.getCmp('numeroFrecuencia' + i).getValue();
                        periodo = Ext.getCmp('numPeriodo' + i).getValue();
                        via = Ext.getCmp('cbIdVia' + i).getValue();
                        unitiempo1 = Ext.getCmp('cbUTfrecuencia' + i).getValue();
                        unitiempo2 = Ext.getCmp('cbUTperiodo' + i).getValue();
                        txtindicacion = Ext.getCmp('txtAindicacion' + i).getValue();


                    }



                    var HC_Medicamento = {
                        Secuencia: r.get('Secuencia'),
                        IdUnidadMedida: r.get('IdUnidadMedida'),
                        Dosis: r.get('Dosis'),
                        IdVia: via,
                        TipoComida: unitiempo2,/*r.get('TipoComida'),*/
                        Cantidad: r.get('Cantidad'),
                        Frecuencia: frecuencia,
                        DiasTratamiento: r.get('DiasTratamiento'),
                        Linea: r.get('Linea'),
                        Familia: r.get('Familia'),
                        SubFamilia: r.get('SubFamilia'),
                        LineaDescripcion: r.get('LineaDescripcion'),
                        FamiliaDescripcion: r.get('FamiliaDescripcion'),
                        SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
                        GrupoMedicamento: i,
                        /*Comentario: r.get('Comentario'),*/
                        TipoMedicamento: r.get('TipoMedicamento'),
                        Estado: r.get('Estado'),
                        UnidadTiempo: unitiempo1,
                        CodigoComponente: r.get('CodigoComponente'),
                        IndicadorEPS: r.get('IndicadorEPS'),
                        Periodo: periodo,
                        Indicacion: txtindicacion
                    };
                    ArrayList0.push(HC_Medicamento);
                });

            }

               }




        return ArrayList0;
    };




    //    function updateActualGrupo(tipo, grid) {


    //    var indtipo = 1;
    //    var ArrayList0 = new Array();
    //    if (indtipo > 0) {
    //        setIndicaCambios(true);



    //        var numerotemp = numerogrupo;

    //        if (numerotemp == 0) { numerotemp = 1 }

    //        var numeroX = 0;
    //        var frecuencia = 0;
    //        var periodo = 0;
    //        var via = 0;
    //        var unitiempo1 = 0;
    //        var unitiempo2 = 0;
    //        var txtindicacion = '';

    //        //for (var i = 0; i < numerotemp; i++) {
    //            var grid1 = Ext.getCmp('grillaExamenes5' + grid);
    //            var store = grid1.store;
    //            var fila = 0;
    //            numeroX = numeroX + 1;

    //           alert("EEEEE")



    //            grid1.store.each(function (r) {
    //                ///VALIDACIÓN
    //                fila = fila + 1;
    //                /*setValuesGridFormGrupo(r, null, 'MEDICINA');
    //                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila, 'MEDICINA');*/

    //                if (grid == 0 || grid == 5) {
    //                    frecuencia = r.get('Frecuencia');
    //                    periodo = r.get('Periodo');
    //                    via = r.get('IdVia');
    //                    unitiempo1 = r.get('UnidadTiempo');
    //                    unitiempo2 = r.get('TipoComida');
    //                    txtindicacion = r.get('Indicacion');

    //                } else {
    //                    frecuencia = Ext.getCmp('numeroFrecuencia' + grid).getValue();
    //                    periodo = Ext.getCmp('numPeriodo' + grid).getValue();
    //                    via = Ext.getCmp('cbIdVia' + grid).getValue();
    //                    unitiempo1 = Ext.getCmp('cbUTfrecuencia' + grid).getValue();
    //                    unitiempo2 = Ext.getCmp('cbUTperiodo' + grid).getValue();
    //                    txtindicacion = Ext.getCmp('txtAindicacion' + grid).getValue();
    //                }



    //                var HC_Medicamento = {
    //                    Secuencia: r.get('Secuencia'),
    //                    IdUnidadMedida: r.get('IdUnidadMedida'),
    //                    Dosis: r.get('Dosis'),
    //                    IdVia: via,
    //                    TipoComida: unitiempo2,/*r.get('TipoComida'),*/
    //                    Cantidad: r.get('Cantidad'),
    //                    Frecuencia: frecuencia,
    //                    DiasTratamiento: r.get('DiasTratamiento'),
    //                    Linea: r.get('Linea'),
    //                    Familia: r.get('Familia'),
    //                    SubFamilia: r.get('SubFamilia'),
    //                    LineaDescripcion: r.get('LineaDescripcion'),
    //                    FamiliaDescripcion: r.get('FamiliaDescripcion'),
    //                    SubFamiliaDescripcion: r.get('SubFamiliaDescripcion'),
    //                    GrupoMedicamento: i,
    //                    /*Comentario: r.get('Comentario'),*/
    //                    TipoMedicamento: r.get('TipoMedicamento'),
    //                    Estado: r.get('Estado'),
    //                    UnidadTiempo: unitiempo1,
    //                    CodigoComponente: r.get('CodigoComponente'),
    //                    IndicadorEPS: r.get('IndicadorEPS'),
    //                    Periodo: periodo,
    //                    Indicacion: txtindicacion
    //                };
    //                ArrayList0.push(HC_Medicamento);
    //            });



    //    }
    //    return ArrayList0;
    //};


    function GetGrillaActual() {
        var numero = grillaActiva.replace('grillaExamenes', '')
        return numero

    };
    var setValuesGridFormGrupo = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var CodigoComponente = r.get('CodigoComponente');

        App.Linea.setValue(Linea == null ? null : Linea);

        App.Familia.setValue(Familia == null ? null : Familia);
        App.Dosis.setValue(Dosis == 0 ? null : Dosis);
        App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
        App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
        App.IdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
    };


    function recargarGrilla() {

        var numero = grillaActiva.replace('grillaExamenes', '');
        /*var grilla = grillaActiva;*/
        var store1 = 'storeExamenes' + numero;
        /*storeG2*/
        var grid1 = Ext.getCmp('grillaExamenes' + numero);
        var store = grid1.store;

        if (numero == 0) {
            grid1.store.reload();

        } else {



            grid1.getView().refresh();
        }




        /* App.storeG.reload();
         App.storeG2.reload();*/


    }


    function getActualizar(grid) {
        var indtipo = 1;
        if (lectura != "True") {
            /*   alert(lectura);*/
            App.Panel1.setVisible(true);

            /* App.Panel8.setVisible(true);*/
            App.btnAgregar.setVisible(false);
            App.btnModificar.setVisible(true);
            seleccRecordActual = grid;
            setIndicaCambios(true);
            invalidFields = setValuesGridForm(seleccRecordActual, null, 'MEDICINA');
        }
    }

    function getActualizarX(grid) {
        var indtipo = 1;
        if (lectura != "True") {
            /*   alert(lectura);*/
            /*  App.Panel1.setVisible(true);*/
            Edito = true;
            App.Panel8.setVisible(true);
            App.btnAgregarX.setVisible(false);
            App.btnModificarX.setVisible(true);
            seleccRecordActual = grid;
            setIndicaCambios(true);
            invalidFields = setValuesGridFormX(seleccRecordActual, null, 'MEDICINA');
        }
    }


    var setValuesGridForm = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var MedicamentoDescripcion = r.get('MedicamentoDescripcion');
        var CodigoComponente = r.get('CodigoComponente');
        var TipoReceta = r.get('TipoReceta');
        var Periodo = r.get('Periodo');
        var UnidadTiempo = r.get('UnidadTiempo');
        var Indicacion = r.get('Indicacion');
        var Medicamento = r.get('Medicamento');
        var IndicadorEPS = r.get('IndicadorEPS');
        var Presentacion = r.get('Presentacion');
        var TipoComida = r.get('TipoComida');
        var Accion = r.get('Accion');

        //alert(r.getValue());

        App.Linea.setValue(Linea == null ? null : Linea);
        App.LineaDescripcion.setValue(LineaDescripcion == null ? null : LineaDescripcion);

        App.Familia.setValue(Familia == null ? null : Familia);
        App.FamiliaDescripcion.setValue(FamiliaDescripcion == null ? null : FamiliaDescripcion);

        App.SubFamilia.setValue(SubFamilia == null ? null : SubFamilia);
        App.SubFamiliaDescripcion.setValue(SubFamiliaDescripcion == null ? null : SubFamiliaDescripcion);

        App.CodigoComponente.setValue(CodigoComponente == null ? null : CodigoComponente);
        App.MedicamentoDescripcion.setValue(MedicamentoDescripcion == null ? null : MedicamentoDescripcion);
        App.Medicamento.setValue(Medicamento == null ? null : Medicamento);

        App.Accion.setValue(Accion == null ? null : Accion);
        App.TipoComida.setValue(TipoComida == null ? null : TipoComida);
        App.IndicadorEPS.setValue(IndicadorEPS == null ? null : IndicadorEPS);
        App.Secuencia.setValue(Secuencia == null ? null : Secuencia);

        App.Presentacion.setValue(Presentacion == null ? null : Presentacion);
        App.cbIdUnidadMedida.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        App.Dosis.setValue(Dosis == 0 ? null : Dosis);
        App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);
        App.Cantidad.setValue(Cantidad == 0 ? null : Cantidad);
        App.UnidadTiempo.setValue(UnidadTiempo == 0 ? null : UnidadTiempo);

        App.Periodo.setValue(Periodo == null ? null : Periodo);
        App.Indicacion.setValue(Indicacion == null ? null : Indicacion);

    };

    var setValuesGridFormX = function (r, valor, tipo) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var Secuencia = r.get('Secuencia');
        var IdUnidadMedida = r.get('IdUnidadMedida');
        var Dosis = r.get('Dosis');
        var IdVia = r.get('IdVia');
        var Cantidad = r.get('Cantidad');
        var Frecuencia = r.get('Frecuencia');
        var DiasTratamiento = r.get('DiasTratamiento');
        var Linea = r.get('Linea');
        var Familia = r.get('Familia');
        var SubFamilia = r.get('SubFamilia');
        var LineaDescripcion = r.get('LineaDescripcion');
        var FamiliaDescripcion = r.get('FamiliaDescripcion');
        var SubFamiliaDescripcion = r.get('SubFamiliaDescripcion');
        var MedicamentoDescripcion = r.get('MedicamentoDescripcion');
        var CodigoComponente = r.get('CodigoComponente');
        var TipoReceta = r.get('TipoReceta');
        var Periodo = r.get('Periodo');
        var UnidadTiempo = r.get('UnidadTiempo');
        var Indicacion = r.get('Indicacion');
        var Medicamento = r.get('Medicamento');
        var IndicadorEPS = r.get('IndicadorEPS');
        var Presentacion = r.get('Presentacion');
        var TipoComida = r.get('TipoComida');
        var Accion = r.get('Accion');

        //alert(r.getValue());

        App.LineaX.setValue(Linea == null ? null : Linea);
        App.LineaDescripcionX.setValue(LineaDescripcion == null ? null : LineaDescripcion);

        App.FamiliaX.setValue(Familia == null ? null : Familia);
        App.FamiliaDescripcionX.setValue(FamiliaDescripcion == null ? null : FamiliaDescripcion);

        App.SubFamiliaX.setValue(SubFamilia == null ? null : SubFamilia);
        App.SubFamiliaDescripcionX.setValue(SubFamiliaDescripcion == null ? null : SubFamiliaDescripcion);

        App.CodigoComponenteX.setValue(CodigoComponente == null ? null : CodigoComponente);
        App.MedicamentoDescripcionX.setValue(MedicamentoDescripcion == null ? null : MedicamentoDescripcion);
        App.MedicamentoX.setValue(Medicamento == null ? null : Medicamento);

        App.AccionX.setValue(Accion == null ? null : Accion);
        /*App.TipoComida.setValue(TipoComida == null ? null : TipoComida);*/
        App.IndicadorEPSX.setValue(IndicadorEPS == null ? null : IndicadorEPS);
        App.SecuenciaX.setValue(Secuencia == null ? null : Secuencia);

        App.PresentacionX.setValue(Presentacion == null ? null : Presentacion);
        App.cbIdUnidadMedidaM.setValue(IdUnidadMedida == 0 ? null : '' + IdUnidadMedida);
        /*  App.DosisX.setValue(Dosis == 0 ? null : Dosis);
       App.Frecuencia.setValue(Frecuencia == 0 ? null : Frecuencia);
        App.IdVia.setValue(IdVia == 0 ? null : IdVia);
        App.DiasTratamiento.setValue(DiasTratamiento == 0 ? null : DiasTratamiento);*/
        App.CantidadX.setValue(Cantidad == 0 ? null : Cantidad);
        /*App.UnidadTiempo.setValue(UnidadTiempo == 0 ? null : UnidadTiempo);

        App.Periodo.setValue(Periodo == null ? null : Periodo);*/
        App.IndicacionX.setValue(Indicacion == null ? null : Indicacion);

    };

    function getValidarDatos(valor) {
        // Revisar, agregar componente, Jordan
        varIsValidForm = true;
        beforeSaveNew(App.formactual, 'Agregar'); // Valida Cabecera
        if (varIsValidForm) {

        }

        return varIsValidForm;
    }
    var beforeSaveNew = function (form, Accion) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);

        var FieldsInvalidos = getInvalidFieldsNew(form, Accion);

        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }
    };
    var varIsValidForm = true;
    var getInvalidFieldsNew = function (form, Accion) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();

        var varValidar = false;
        fields.filterBy(function (field) {

            if (Accion == 'Agregar') {  // ò Modificar
                varValidar = true;
                if (field.name == 'Indicacion') {
                    //varValidar = true;
                }

                if (field.name == 'Comentario') {
                    varValidar = false;
                }


            } else if (Accion == 'Enviar') {

                if (field.name == 'Comentario') {
                    varValidar = true;
                }

            }

            if (!field.isValid() && varValidar) {
                // alert('if ' + field.name);
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                varIsValidForm = false;
            } else {
                //alert('else ' + field.name);
            }
        });
        return invalidFields;
    };

    function AgregarMaterialTemp() {

        var cantidad = App.CantidadX.getValue();
        var unidad = App.cbIdUnidadMedidaM.getValue();

        if (unidad != null) {

            if (cantidad != null) {
                if (noDuplicado2('DATA')) {

                    var ArrayList1 = new Array();
                    var BE_Medicamento_FE = {

                        Linea: App.LineaX.getValue(),
                        LineaDescripcion: App.LineaDescripcionX.getValue(),
                        Familia: App.FamiliaX.getValue(),
                        FamiliaDescripcion: App.FamiliaDescripcionX.getValue(),
                        SubFamilia: App.SubFamiliaX.getValue(),
                        CodigoComponente: App.CodigoComponenteX.getValue(),
                        SubFamiliaDescripcion: App.SubFamiliaDescripcionX.getValue(),
                        Medicamento: App.MedicamentoX.getValue(),
                        MedicamentoDescripcion: App.MedicamentoDescripcionX.getValue(),
                        Presentacion: App.PresentacionX.getValue(),
                        Cantidad: App.CantidadX.getValue(),
                        IdUnidadMedida: App.cbIdUnidadMedidaM.getValue(),
                        IndicadorEPS: App.IndicadorEPSX.getValue(),
                        Secuencia: 0,/*App.SecuenciaX.getValue(),*/
                        Indicacion: App.IndicacionX.getValue(),
                        Accion: App.AccionX.getValue()
                    }

                    ArrayList1.push(BE_Medicamento_FE);


                    if (App.IndicacionX.getValue().length > 250) {
                        /* alert(App.IndicacionX.getValue().length);*/
                        App.IndicacionX.setActiveError('El campo Indicaciones solo admite 250 caracteres.');
                        App.taAlerts.setValue('*El campo Indicaciones solo admite 250 caracteres.');
                        App.taAlerts.setVisible(true);
                        return false;
                    }
                    else {
                        App.taAlerts.setValue('');
                        App.taAlerts.setVisible(false);
                    }



                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("Save_MedicamentoTemp_X"))',
                        params: {
                            dato: ArrayList1,
                            id: '0'
                        }
                    });
                    haynuevos = true;
                    recargarGrilla();
                    App.taAlerts.setVisible(false);
                    App.taAlerts.setValue(null);

                }
                else {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    /*valor.setValue('');*/
                    return;


                }

            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe ingresar la cantidad',
                        tipo: 'WARNING'
                    }
                });
                /*valor.setValue('');*/
                return;


            }

        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe seleccionar la unidad de medida',
                    tipo: 'WARNING'
                }
            });
            /*valor.setValue('');*/
            return;


        }







    }


    function ModificarMaterialTemp() {
        var cantidad = App.CantidadX.getValue();
        var unidad = App.cbIdUnidadMedidaM.getValue();

        if (unidad != null) {

            if (cantidad != null) {
                /*if (getValidarDatos('DATA')) {*/

                var ArrayList1 = new Array();
                var BE_Medicamento_FE = {

                    Linea: App.LineaX.getValue(),
                    LineaDescripcion: App.LineaDescripcionX.getValue(),
                    Familia: App.FamiliaX.getValue(),
                    FamiliaDescripcion: App.FamiliaDescripcionX.getValue(),
                    SubFamilia: App.SubFamiliaX.getValue(),
                    CodigoComponente: App.CodigoComponenteX.getValue(),
                    SubFamiliaDescripcion: App.SubFamiliaDescripcionX.getValue(),
                    Medicamento: App.MedicamentoX.getValue(),
                    MedicamentoDescripcion: App.MedicamentoDescripcionX.getValue(),
                    Presentacion: App.PresentacionX.getValue(),
                    Cantidad: App.CantidadX.getValue(),
                    IdUnidadMedida: App.cbIdUnidadMedidaM.getValue(),
                    IndicadorEPS: App.IndicadorEPSX.getValue(),
                    Secuencia: App.SecuenciaX.getValue(),
                    Indicacion: App.IndicacionX.getValue(),
                    Accion: App.AccionX.getValue()
                }

                ArrayList1.push(BE_Medicamento_FE);


                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Editar_MedicamentoTemp_X"))',
                    params: {
                        dato: ArrayList1,
                        id: '0'
                    }
                });

                recargarGrilla();

                /*   }
                   else {
                     /*  Ext.net.DirectMethod.request({
                           url: '(Url.Action("showMensajeNotify"))',
                           params: {
                               titulo: 'Advertencia',
                               message: 'Ya existe registro',
                               tipo: 'WARNING'
                           }
                       });*/
                /*valor.setValue('');*/
                /* return;


             }*/
            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe ingresar la cantidad',
                        tipo: 'WARNING'
                    }
                });
                /*valor.setValue('');*/
                return;


            }

        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe seleccionar la unidad de medida',
                    tipo: 'WARNING'
                }
            });
            /*valor.setValue('');*/
            return;


        }
    }
    function setear(store, dato) {
        /* App.StoreUM.on('load', function (store) {*/

        if (dato.length > 0) {
            Ext.getCmp('cbIdUnidadMedida').setValue(dato[0].data.codigo);
        }
        /* });*/
    }
    function setear2(store, dato) {
        /* App.StoreUM.on('load', function (store) {*/
        var codigo;
        if (opcion_display == "") {
            if (dato.length > 0) {
                codigo = dato[0].data.codigo;
            }
        } else {
            for (var x = 0; x < dato.length; x++) {
                /* alert(dato[x].data.name+" = "+ opcion_display)*/
                if (dato[x].data.name == opcion_display) {
                    codigo = dato[x].data.codigo;
                }
            }
        }
        if (dato.length > 0) {
            if (Edito == false) {
                Ext.getCmp('cbIdUnidadMedidaM').setValue(codigo);
            }
        }
        /* });*/
    }


    var keyCode
    function ReplaceCaracterEspec(e) {
        /*Capturar tecla pulsada*/
        if (window.event) keyCode = window.event.keyCode;
        else if (e) keyCode = e.which;
        var prueba = keyCode;
        // alert(keyCode);
        //
        if (prueba == 60) {
            var textactual = e.getValue();
            e.value = e.setValue(textactual + " ");
        }
        var texto = e.getValue();
        var vacio = "";
        var cadena = vacio + e.getValue();
        var recortado = cadena.substr(-1, 1);
        // alert(recortado + ' antes');
        if (recortado == "<" || recortado == ">") {
            //  alert(recortado + ' despues');
            e.value = e.setValue(texto + " ");
        }

    }
    </script>
}
@section cuerpo
{
    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )




        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
               .ID("formactual")



                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                    //  l.AfterRender.Handler = "eventoAfterRenderForm('" + NumGrupMed1 + "');";
                })
               .Items(

                        X.FormPanel()
                                .ID("Panel01")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                //.Hidden(true)
                                .Items(
                              X.TextField().ID("NumeroStore1").ReadOnly(true).Hidden(true),
                             X.FieldSet() //F5.1
                        .ColumnWidth(0.4).Collapsible(true)
                        .Title("<b>TRATAMIENTO RECIBIDO</b>")
                        .Border(true)
                        .MarginSpec("05 05 0 05")
                        .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })

                                     .Items(

                                      X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                    .Defaults(d => { d.Add(new Parameter("LabelWidth", "0")); }),



                                             X.TextField()
                                                 .ID("RecepcionaRecurso1")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                            X.GridPanel()
                                                 .ID("grillaExamenes5")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes5")
                //.Listeners(l =>{l.BeforeLoad.Handler = "setChangedMed(0);";})
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                .Fields(new ModelField("Secuencia", ModelFieldType.String),

                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                //
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                //
                                                                           new ModelField("TipoReceta", ModelFieldType.Int),
                                                                           new ModelField("Periodo", ModelFieldType.String),
                                                                           new ModelField("MedicamentoDescripcion", ModelFieldType.String),
                                                                           new ModelField("Medicamento", ModelFieldType.String),
                                                                           new ModelField("UnidadTiempo", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String),
                                                                           new ModelField("UsuarioAuditoria", ModelFieldType.String),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int)

                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Listeners(l => { l.Load.Handler = "setImpresion1(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0201_2_MEDICAMENTO_EPI_LIST")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia")))))
                                                         .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0,
                                                                    tipo = 1
                                                                })
                                                            )

                                                 )
                                                 .ColumnModel(
                                                     Html.X().Column().Text("Cobertura").DataIndex("IndicadorEPS")
                                                    .Width(55).Renderer("changeEPS"),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),
                                                              Html.X().Column().Text("Modalidad").DataIndex("TipoReceta")
                                                    .Width(60).Renderer("changeModalidad")

                                                             ,
                                                      Html.X().ComponentColumn()
                                                        .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("DCI")
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("MedicamentoDescripcion")
                                                         .Text("Medicamento").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("UsuarioAuditoria")
                                                         .Text("Indicación").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentacion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoComida")
                                                         .Text("TipoComida")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("IdUnidadMedida")
                                                                                .Editor(true)
                                                                                .Hidden(true)
                                                                                .Text("Und. Medida")
                                                                                .Component(
                                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                      Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("UnidadTiempo")
                                                         .Text("Und.Tiempo")
                                                         .Component(
                                                            Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                             .Editor(true).Hidden(true)
                                                             .DataIndex("Periodo")
                                                             .Text("Periodo")
                                                             .Component(
                                                                       Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Via")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("Cantidad")
                                                                                .Editor(true).Hidden(true)
                                                                                 .Text("Cantidad")
                                                                                 .Component(
                                                                                      Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                     ),
                                                    Html.X().ComponentColumn().DataIndex("DiasTratamiento")
                                                         .Editor(true).Hidden(true)
                                                         .Text("Dias")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Indicaciones Especificas")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(true)
                                                             ),
                                                        Html.X().CommandColumn()
                                                        .Text("Acción").Hidden(true)
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(this.up('grid'),record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                //.Listeners(l => l.CellClick.Handler = "setSeleccionActual(record);")
                //.Listeners(l => l.CellDblClick.Handler = "getActualizar(record);")
                /* .Listeners(l => l.CellDblClick.Handler = "SelectDetalleRegistro(record.data);")*/
                // .Listeners(l => l.CellClick.Handler = "SelectOnClik(record.data.Secuencia);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                            .Items(
                                                                  Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                                , X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button().ID("btnSelDesactivo5").Hidden(true)
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginDisabled)
                                                                         .Handler("eventoActivarSeleccion(App.btnSelDesactivo5, App.btnSelActivo5, 'grillaExamenes5')"),
                                                                         Html.X().Button().ID("btnSelActivo5")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginGo).Hidden(true)
                                                                         .Handler("eventoDesactivarSeleccion(App.btnSelActivo5, App.btnSelDesactivo5)")
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActual(this.up('grid'));")*/
                                                             )
                                                   )
                                                   .BottomBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>Tipo de Cobertura: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(6)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                                "</span>")
                                                             )

                                                             .Items(

                                                             )
                                                   )


                                        )
                                ),

                                            //********

                                            X.GridPanel()
                                                .ID("grillaPrincipal")
                                                .Border(true).PaddingSpec("6")
                                                .Store(
                                                    Html.X().Store()
                                                    .ID("storePrincipal")
                                                    .Model(
                                                        Html.X().Model()
                                                        .IDProperty("Secuencia")
                                                        .Fields(
                                                            new ModelField("Secuencia"),
                                                            new ModelField("Codigo"),
                                                            new ModelField("DiagnosticoDescripcion", ModelFieldType.String),
                                                            new ModelField("Accion", ModelFieldType.String)
                                                            )
                                                        )
                                            .AutoLoad(true)
                                            .RemoteSort(false)
                                            .IsPagingStore(true)
                                            .RemotePaging(true)
                                            .PageSize(5)
                                            .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                            .Url("CCEPF200_DIAGALTA")
                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                            .IDProperty("Secuencia")))))
                                            )
                                            .ColumnModel(
                                           Html.X().ComponentColumn().Editor(true)
                                           .Hidden(true)
                //.Hidden(false)
                                            .DataIndex("Codigo")
                                            .Text("Código")
                //.Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                            Html.X().ComponentColumn().Editor(true)
                                            .DataIndex("DiagnosticoDescripcion")
                                            .Text("Diagnostico al Alta")
                                            .Flex(1)
                                            .Component(
                                                 Html.X().TextField().ReadOnly(indicaModoLectura)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                ),
                                          Html.X().Column().Text("Accion").DataIndex("Accion").Width(85)
                                          .Hidden(true)
                                          ,
                                          Html.X().CommandColumn().Width(70)
                                            .Text("Acción")
                                            .Commands(
                                                Html.X().GridCommand().Disabled(indicaModoLectura)
                                                    .CommandName("Delete")
                                                    .Icon(Icon.Delete)
                //.Text("Eliminar")
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualPrincipal(record);")
                                                     )
                                                     .SelectionModel(
                                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                     )
                                                     .Plugins(
                                                         Html.X().CellEditing()
                                                     )
                                            .Listeners(l => l.CellClick
                                                            .Handler = "setSeleccionActualPrincipal(record);")
                                                .TopBar(
                                                    Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                        Html.X().Label()
                                                        .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD2 + "</font></b>")
                                                        , X.ToolbarFill(), X.ToolbarSeparator()
                                                        , Html.X().Button().ID("IdbtnDesactivoPrincipal")
                //.Text("Bienes/servicios")
                                                        .Html("<b>Catálogo</b>")
                                                        .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionPrincipal(App.IdbtnDesactivoPrincipal);")
                                                        .Icon(Icon.PluginDisabled),
                                                        Html.X().Button().ID("IdbtnActivoPrincipal")
                                                         .Html("<b>Catálogo</b>")
                //.Text("Bienes/servicios")
                                                         .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionPrincipal(App.IdbtnActivoPrincipal);")
                                                          .Icon(Icon.PluginGo).Hidden(true)
                                                         )
                                                       ),

                                           X.TextFieldFor(c => c.Complicaciones).ReadOnly(indicaModoLectura)
                                      .FieldLabel("Complicaciones")

                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                       ,
                                             X.ComboBoxFor(c => c.Pronostico).ReadOnly(indicaModoLectura)
                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("PRONOSTICO").Select(d => new ListItem(d.Name, d.ID)))
                                    .FieldLabel("Pronostico").Editable(false)
                                    .PaddingSpec("3")
                                    .SimpleSubmit(true),

                                               X.ComboBoxFor(c => c.TipoAlta).ReadOnly(indicaModoLectura)
                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPALTA").Select(d => new ListItem(d.Name, d.ID)))
                                    .FieldLabel("Tipo de Alta").Editable(false)
                                    .PaddingSpec("3")
                                    .SimpleSubmit(true),

                                                 X.ComboBoxFor(c => c.CondicionEgreso).ReadOnly(indicaModoLectura)
                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("CONEGRESO").Select(d => new ListItem(d.Name, d.ID)))
                                    .FieldLabel("Condición de Egreso").Editable(false)
                                    .PaddingSpec("3")
                                    .SimpleSubmit(true),


                                                 X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("F202.4 Datos de la Referencia")
                                 .MarginSpec("0 05 0 05")
                                 .DefaultAnchor("100%")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                     d.Add(new Parameter("LabelAlign", "Left"));
                                 })
                                     .Items(
                                            X.TextFieldFor(c => c.CausaMuerte).ReadOnly(indicaModoLectura)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .ID("CausaMuerte")
                                                .FieldLabel("Causa de Muerte"),
                                            X.RadioGroupFor(c => c.Necropsia, new List<Radio.Config> {
                                                        new Radio.Config{BoxLabel = "Si", InputValue = "1" ,ReadOnly =indicaModoLectura},
                                                        new Radio.Config{BoxLabel = "No", InputValue = "2",ReadOnly =indicaModoLectura},
                                                        new Radio.Config{BoxLabel = "NA", InputValue = "3",ReadOnly =indicaModoLectura},
                                                    })
                                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })



                                         ),


                                     X.TextAreaFor(c => c.PlanAlta).ReadOnly(indicaModoLectura)
                                     .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .Height(40)
                                                    .FieldLabel("Plan de Alta"),

                           X.FormPanel()
                                .ID("Panel2")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                    X.FieldSet()
                                         .ColumnWidth(0.4)
                // .Title("Indicaciones Especificas / Generales")
                                          .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })
                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                                       X.TextField()
                                                        .ID("IdMedica")
                                                        .ReadOnly(true),
                                                       X.GridPanel()
                                                         .ID("grillaExamenesDetalleIndic")
                                                         .Border(false)
                                                         .Store(
                                                             Html.X().Store()
                                                             .ID("storeExamenesDetalleIndic0")
                                                             .Model(
                                                              Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                    .Fields(new ModelField("Secuencia", ModelFieldType.Int),
                                                                           new ModelField("IdTipoIndicacion", ModelFieldType.Int),
                                                                           new ModelField("Descripcion", ModelFieldType.String),
                                                                           new ModelField("TipoRegistro", ModelFieldType.String),
                                                                           new ModelField("SecuenciaMedicamento", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)
                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                              //.Url("CCEP0304_MEDICAMENTODETALLEINDI")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia")))))
                                                 )
                                                 .ColumnModel(
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro")
                                                          .Width(30)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("TipoRegistro")
                                                         .Text("Tipo Registro")
                                                         .Width(150)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbTipoRegistros")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("TIPOREGMED").Select(d => new ListItem(d.Name, d.Codigo)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls =>
                                                                           ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdTipoIndicacion")
                                                         .Text("Tipo Indicación")
                                                         .Width(200)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbIdTipoIndicacions")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("INDIRECETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls => ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                        .DataIndex("Descripcion")
                                                         .Text("Descripción")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                              .Listeners(ls => ls.Focus.Handler = "SelectDetalleClik();")
                                                             )
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualIndicaciones(this.up('grid'),record);")


                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActualIndicaciones(record);")
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                X.ToolbarSeparator(),

                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Agregar")
                                                                     .Icon(Icon.Add)
                                                                     .Handler("addRecordDetalle(this.up('grid'));"),
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActualIndicaciones(this.up('grid'));"),*/
                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Guardar Detalle")
                                                                     .Icon(Icon.ApplicationFormAdd)
                                                                     .Handler("EnviarIndicaciones(this.up('grid'));")
                                                             )
                                                   )

                                             )
                                 )
                                 .Items(

                                  X.Container().Layout(LayoutType.HBox).MarginSpec("10 10 0 10")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                                   .Items(


                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "180"));
                //    d.Add(new Parameter("DefaultAnchor", "50%"));
                //})
                ),


                                    X.Container().Layout(LayoutType.HBox).MarginSpec("10 10 10 10")
                                        .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })





                                )
                ////////ADD PARA MSGS/////
                                ,
                                 X.FormPanel()
                                .ID("PanelGrupo")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false).Hidden(true)
                                .Items(
                                    X.FieldSet().Collapsible(true).ID("FSGrupos")
                                 .ColumnWidth(0.4)
                                 .Title("<b>Receta Grupal</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(


                                     X.Toolbar()
                                        .Items(X.ToolbarFill(),
                                                X.Button()
                                                .Text("Crear Grupo")
                                                .Icon(Icon.Add)
                                                .ID("btnCrearGru")
                                                .Handler("addgrupo(" + NumGrupMed1 + ");")/*,
                                                X.Button()
                                                .Text("Editar Grupo")
                                                .Icon(Icon.Add)
                                                .ID("btnEditarGru")
                                                .Handler("")*/
                                                )

                                     )
                                ),




                                X.FormPanel()
                                .ID("Panel8")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                        X.FieldSet()
                                         .ColumnWidth(0.4)
                                         .Title("<b>INFORMACIÓN DEL MATERIAL MÉDICO</b>")
                                         .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })

                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                              X.Container().Layout(LayoutType.HBox)
                                              .Defaults(d =>
                                              {
                                                  d.Add(new Parameter("LabelWidth", "70"));
                                              })
                                              .Items(
                                                     X.NumberField().ID("IndicadorEPSX").FieldLabel("EPS").Hidden(true),
                                                     X.TextField().ID("SecuenciaX").FieldLabel("Secuencia").Hidden(true),
                                                     X.TextField().ID("AccionX").FieldLabel("Accion").Hidden(true)
                                              ),
                                              X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })

                                                        .Items(
                                                               X.TextField().ID("LineaX").Hidden(true)
                                                               .FieldLabel("Linea").ReadOnly(true)
                                                               .Width(160),
                                                               X.TextField().ID("LineaDescripcionX").ReadOnly(true)
                                                               .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                              X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                              .Defaults(d =>
                                                              {
                                                                  d.Add(new Parameter("LabelWidth", "70"));
                                                              })
                                                              .Items(
                                                                   X.TextField().ID("FamiliaX").ReadOnly(true).Hidden(true)
                                                                   .FieldLabel("Familia")
                                                                   .Width(160),
                                                                   X.TextField().ID("FamiliaDescripcionX").ReadOnly(true)
                                                                   .FieldLabel("").Flex(1).Hidden(true)

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                                                                   X.TextField().ID("SubFamiliaX").ReadOnly(true)
                                                                  .FieldLabel("DCI")
                                                                  .Listeners(ls =>
                                                                         ls.Change.Handler = "App.cbIdUnidadMedidaM.clearValue(); App.cbIdUnidadMedidaM.getStore().reload()")
                                                                  .Width(160),
                                                                 X.TextField().ID("CodigoComponenteX").ReadOnly(true).Hidden(true),
                                                                 X.TextField().ID("SubFamiliaDescripcionX").ReadOnly(true).Flex(1)

                                                                   .FieldLabel("")

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(
                  X.TextField().ID("MedicamentoX").ReadOnly(true)
                   .FieldLabel("Med/DCI")
                    .Width(160),
                  X.TextField().ID("MedicamentoDescripcionX").ReadOnly(true).Listeners(ls =>
                                                                         ls.Change.Handler = "App.cbIdUnidadMedidaM.clearValue(); App.cbIdUnidadMedidaM.getStore().reload()")
                    .FieldLabel("").Flex(1)

                                                              ),
                                                            X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "70"));
                                                            })
                                                            .Items(

                                                              X.Component(),

                                                            X.ComboBox()
                                                                    .ID("cbIdUnidadMedidaM")
                                                                    .FieldLabel("U. Medida")
                                                                    .TypeAhead(true)
                                                                    .QueryMode(DataLoadMode.Local)
                                                                    .ForceSelection(true)
                                                                    .TriggerAction(TriggerAction.All)
                                                                    .DisplayField("name")
                                                                    .ValueField("codigo")
                                                                    .EmptyText("Loading...")

                                                                    .ValueNotFoundText("Loading...")
                                                                    .Listeners(l =>
                                                                            l.Select.Handler = "App.cbIdUnidadMedidaM.setValue(App.cbIdUnidadMedidaM.getValue());")
                                                                    .Store(Html.X().Store()
                                                                        .AutoLoad(true).Listeners(l => { l.Load.Handler = "setear2(this,records);"; })
                                                                        .Model(Html.X().Model()
                                                                            .IDProperty("Codigo")
                                                                            .Fields(
                                                                                new ModelField("codigo", ModelFieldType.String) { Mapping = "Codigo" },
                                                                                new ModelField("name", ModelFieldType.String) { Mapping = "Name" }
                                                                            )
                                                                        )
                                                                        .Proxy(Html.X().AjaxProxy()
                                                                            .Url(Url.Action("UnidadMedidas"))
                                                                            .Reader(Html.X().JsonReader().Root("data"))
                                                                        )
                                                                        .Parameters(ps =>
                                                                             ps.Add(new
                                                                             {
                                                                                 Linea = JRawValue.From("App.LineaX.getValue()"),
                                                                                 Familia = JRawValue.From("App.FamiliaX.getValue()"),
                                                                                 SubFamilia = JRawValue.From("App.SubFamiliaX.getValue()"),
                                                                                 Accion = "MEDUNIDAMED"
                                                                             })
                                                                        )






                                                            ),
                                                             X.Component().Width(10),
                                                            X.NumberField().ID("DosisX")/*.AllowBlank(false)*/.Hidden(true)
                                                             .MinValue(0).MaskRe("/-+/").AllowExponential(false)
                                                             .FieldLabel("Dosis"),
                                                             X.Component().Width(10),
                                     X.TextField().ID("PresentacionX").FieldLabel("Presentacion").Flex(1).Hidden(true).AllowBlank(true)
                                                             ),
                                                X.Container()
                                                        .Layout(LayoutType.HBox).PaddingSpec("6")
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })

                                                        .Items(
                   X.Component(),
                       X.NumberField().ID("CantidadX")/*.AllowBlank(false)*/
                        .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                        .FieldLabel("Cantidad"),




                       X.Component().Width(10),
                       X.NumberField().ID("FrecuenciaX").Hidden(true)
                        .MinValue(0)
                        .FieldLabel("Frecuencia"),
                         X.Component().Width(10),
                    Html.X().ComboBox().ID("UnidadTiempoX").Hidden(true)
   .FieldLabel("U. Tiempo").EmptyText("Seleccione")
   .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("UNITIEMPO").Select(d => new ListItem(d.Name, d.ID)))
   .SimpleSubmit(true)
   .Editable(false)
                                                            ),
                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })

                                                        .Items().PaddingSpec("6"),
                                                            X.Component().Width(10),
                 X.TextArea().ID("IndicacionX").FieldLabel("Indicaciones Especificas").ReadOnly(indicaModoLectura).PaddingSpec("6")
                 .EnableKeyEvents(true)
                  .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                 ,
                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "170"));
                                                        })
                //.MarginSpec("0 0 10")
                                                        .Items(
                /*
                     X.TextArea().ID("taAlerts2M")
                     .Border(false)
                     .StyleSpec("background:white;border:1px solid gray; width:100%;")
                     .FieldStyle("color: red")
                     .Hidden(true)
                     .ReadOnly(true).Flex(1)*/
                                                        )

                                                    ,
                                                    X.Container()
                                                        .Layout(LayoutType.HBox)
                                                        .Defaults(d =>
                                                        {
                                                            d.Add(new Parameter("LabelWidth", "70"));
                                                        })

                                                        .Items(


                                                             X.Button()
                                                                .Text("Agregar")
                                                                .ID("btnAgregarX")
                                                                .Handler("AgregarMaterialTemp();")

                                                                /* .DirectEvents(directEvents =>
                                                                 {
                                                                     directEvents.Click.Url = "Save_MedicamentoTemp_X";
                                                                     directEvents.Click.Before = "return noDuplicado('DATA'); ";
                                                                     //directEvents.Click.Success = "alert('s');";
                                                                     directEvents.Click.EventMask.ShowMask = true;
                                                                     directEvents.Click.EventMask.Msg = "Loading...";
                                                                     directEvents.Click.ExtraParams.Add(new
                                                                     {
                                                                         id = "0"/JRawValue.From("App.NumeroStoreM.getValue()")/
                                                                     });
                                                                     directEvents.Click.After = "recargarGrilla();";
                                                                 })
                                                                 */
                                                                ,
                                                               X.Button()
                                    .Text("Modificar").ID("btnModificarX").Hidden(true).Handler("ModificarMaterialTemp()")
                /*.DirectEvents(directEvents =>
                {

                    directEvents.Click.Url = "Editar_MedicamentoTemp_CCEP0304";
                    directEvents.Click.Before = "return getValidarDatosM('DATA'); ";
                    directEvents.Click.EventMask.ShowMask = true;
                    directEvents.Click.EventMask.Msg = "Loading Modificar...";
                })*/

                                    ,

                                                            X.Component().Width(10),
                                                              X.Button()
                                                                .Text("Ocultar")
                                                                .Handler("PanelOcultar2(this.up('grid'));")
                                                            )
                                            )
                                ),

                                    X.FormPanel()
                                .ID("PanelM")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Hidden(true)
                                .Header(false)
                //.Hidden(true)
                                .Items(




                                 X.TextField().ID("NumeroStoreM").ReadOnly(true).Hidden(true),
                                 X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("<b> MATERIAL MÉDICO</b>")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(

                                            X.GridPanel()
                                                 .ID("grillaExamenes1")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes1")
                //.Listeners(l =>{l.BeforeLoad.Handler = "setChangedMed(0);";})
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                .Fields(new ModelField("Secuencia", ModelFieldType.String),

                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                //
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                //
                                                                           new ModelField("TipoReceta", ModelFieldType.Int),
                                                                           new ModelField("Periodo", ModelFieldType.String),
                                                                           new ModelField("MedicamentoDescripcion", ModelFieldType.String),
                                                                           new ModelField("Medicamento", ModelFieldType.String),
                                                                           new ModelField("UnidadTiempo", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String),
                                                                           new ModelField("UsuarioAuditoria", ModelFieldType.String),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int)

                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Listeners(l => { l.Load.Handler = "setImpresion2(this);"; })
                                                         .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                          .Url("CCEP0304_MEDICAMENTO_EPI2")
                                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                          .Root("data")
                                                                                          .TotalProperty("total")
                                                                                          .IDProperty("Secuencia")))
                                                                           ))
                                                         .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0,
                                                                    tipo = 4
                                                                })
                                                            )

                                                 )
                                                 .ColumnModel(
                                                     Html.X().Column().Text("Cobertura").DataIndex("IndicadorEPS")
                                                    .Width(55).Renderer("changeEPS"),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),
                                                              Html.X().Column().Text("Modalidad").DataIndex("TipoReceta")
                                                    .Width(60).Renderer("changeModalidad")

                                                             ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("DCI")
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("MedicamentoDescripcion")
                                                         .Text("Medicamento").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("UsuarioAuditoria")
                                                         .Text("Indicación").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentacion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                        .Editor(true).Hidden(true)
                                                         .DataIndex("TipoComida")
                                                         .Text("TipoComida")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("IdUnidadMedida")
                                                                                .Editor(true)
                                                                                .Hidden(true)
                                                                                .Text("Und. Medida")
                                                                                .Component(
                                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                      Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("UnidadTiempo")
                                                         .Text("Und.Tiempo")
                                                         .Component(
                                                            Html.X().TextField().ReadOnly(indicaModoLectura)
                                                           ),
                                                       Html.X().ComponentColumn()
                                                             .Editor(true).Hidden(true)
                                                             .DataIndex("Periodo")
                                                             .Text("Periodo")
                                                             .Component(
                                                                       Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Via")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn().DataIndex("Cantidad")
                                                                                .Editor(true).Hidden(true)
                                                                                 .Text("Cantidad")
                                                                                 .Component(
                                                                                      Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                     ),
                                                    Html.X().ComponentColumn().DataIndex("DiasTratamiento")
                                                         .Editor(true).Hidden(true)
                                                         .Text("Dias")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Indicaciones Especificas")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                        Html.X().CommandColumn()
                                                        .Text("Acción")
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(this.up('grid'),record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActual(record);")
                                                .Listeners(l => l.CellDblClick.Handler = "getActualizarX(record);")
                /* .Listeners(l => l.CellDblClick.Handler = "SelectDetalleRegistro(record.data);")*/
                // .Listeners(l => l.CellClick.Handler = "SelectOnClik(record.data.Secuencia);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                  Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD2 + "</font></b>")
                                                                , X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button().ID("btnSelDesactivo0M")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginDisabled)
                                                                         .Handler("eventoActivarSeleccion(App.btnSelDesactivo0M , App.btnSelActivo0M, 'grillaExamenes1');"),
                                                                         Html.X().Button().ID("btnSelActivo0M")
                                                                        .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginGo).Hidden(true)
                                                                         .Handler("eventoDesactivarSeleccion(App.btnSelActivo0M, App.btnSelDesactivo0M)")
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActual(this.up('grid'));")*/
                                                             )
                                                   )
                                                   .BottomBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>Tipo de Cobertura: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(6)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                               .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                                "</span>")
                                                             )

                                                             .Items(

                                                             )
                                                   )


                                        )
                                ),


                                 X.FormPanel()
                                .ID("Panel3")
                                .BodyPadding(5)
                                .AutoScroll(true)
                                .Border(false)
                                .Header(false)
                                .Hidden(true)
                                .Items(
                                    X.FieldSet()
                                         .ColumnWidth(0.4)
                // .Title("Indicaciones Especificas / Generales")
                                          .MarginSpec("0 05 0 05")
                                         .Defaults(d =>
                                         {
                                             d.Add(new Parameter("LabelWidth", "170"));
                                         })
                                         .DefaultAnchor("100%")
                                         .FieldDefaults(d =>
                                         {
                                             d.LabelAlign = LabelAlign.Left;
                                         })
                                             .Items(
                                                       X.TextField()
                                                        .ID("IdMedicaGrupo")
                                                        .ReadOnly(true),
                                                       X.GridPanel()
                                                         .ID("grillaExamenesDetalleIndicGrupo")
                                                         .Border(false)
                                                         .Store(
                                                             Html.X().Store()
                                                             .ID("storeExamenesDetalleIndicGrupo")
                                                             .Model(
                                                              Html.X().Model()
                                                                 .IDProperty("Secuencia")
                //Html.X().ComboBoxFor(c => c.b),
                                                                    .Fields(new ModelField("Secuencia", ModelFieldType.Int),
                                                                           new ModelField("IdTipoIndicacion", ModelFieldType.Int),
                                                                           new ModelField("Descripcion", ModelFieldType.String),
                                                                           new ModelField("TipoRegistro", ModelFieldType.String),
                                                                           new ModelField("SecuenciaMedicamento", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)
                                                                 )
                                                            )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                              // .Url("CCEP0304_MEDICAMENTODETALLEGRUPO")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("Secuencia"))))
                                                                                           )
                                                          .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    grupo = JRawValue.From("App.NumeroStore.getValue()")
                                                                })
                                                       )
                                                 )
                                                 .ColumnModel(
                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro")
                                                          .Width(30)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("TipoRegistro")
                                                         .Text("Tipo Registro")
                                                         .Width(150)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbTipoRegistrosGrupo")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("TIPOREGMED").Select(d => new ListItem(d.Name, d.Codigo)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls =>
                                                                           ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdTipoIndicacion")
                                                         .Text("Tipo Indicación")
                                                         .Width(200)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("cbIdTipoIndicacionsGrupo")
                                                                         .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("INDIRECETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true)
                                                                        .Listeners(ls => ls.Select.Handler = "SelectDetalleClik();")
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Descripcion")
                                                         .Text("Descripción")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                              .Listeners(ls => ls.Focus.Handler = "SelectDetalleClik();")
                                                             )
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        .Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualIndicaciones(this.up('grid'),record);")


                                                 )
                                                .Listeners(l => l.CellClick.Handler = "setSeleccionActualIndicaciones(record);")
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                X.ToolbarSeparator(),

                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Agregar")
                                                                     .Icon(Icon.Add)
                                                                     .Handler("addRecordDetalleG(this.up('grid'));"),
                /*
                 Html.X().Button()
                     .Text("Eliminar")
                     .Icon(Icon.Delete)
                     .Handler("deleteActualIndicaciones(this.up('grid'));"),*/
                                                                 Html.X().Button().Disabled(indicaModoLectura)
                                                                     .Text("Guardar Detalle")
                                                                     .Icon(Icon.ApplicationFormAdd)
                                                                     .Handler("EnviarIndicacionesG(this.up('grid'));")
                                                             )
                                                   )

                                             )
                                 )




                                ////////////////////////////////////MATERIAL MEDICO/////////////////////////////////////////////////////






                                ////////ADD PARA MSGS/////
                                ,

                                X.TextArea().ID("taAlerts")
                                .Border(false)
                                .StyleSpec("background:white;border:1px solid gray;")
                                .FieldStyle("color: red")
                                .Hidden(true)
                                .ReadOnly(true)
                //////////////////////
                ///////////////////////////////////////////////////////////////////



                     ///////////////////////////////////////////////////////////////////
                     )
                    .TopBar(X.Toolbar().ID("bar").Items(
                            X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),

                            X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                            , X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');")

                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar").Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .CausesValidation(true)
                                .Handler("EnviarDataServer(this.up('grid'));"),
                /*   .DirectEvents(directEvents =>
                  {
                      directEvents.Click.Url = "CCEPF300_Save_SS_HC_DescansoMedicoFE";
                      directEvents.Click.EventMask.ShowMask = true;
                      directEvents.Click.Before = "return EnviarData('grid');";


                      directEvents.Click.Success = "onSuccess(result.data);";
                      directEvents.Click.Failure = "onFailure();";
                  })*/
                               X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));"),

                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))



                );
        }
        )
    )
}

