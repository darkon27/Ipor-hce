@using Region = Ext.Net.Region

@model SoluccionSalud.Entidades.Entidades.SS_HC_AntePerGinecoObstetricos_FE

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var IdEpisodioAtencion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioAtencion;
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";

    var DESC_ADD1 = "Cirigias G-O ";
    var DESC_ADD = "Antecedente Fisiologico Obstetrico ";
    var Abortosxd = (Model.Abortos_flag == "1" ? false : true);
    var COLOR_BLUE01 = "#284A89";

}

@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

    </script>

    <script>


        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);

            var v = '@isNuevo';
            if (v.toUpperCase() == 'TRUE') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }

        }

    var count = 0; // a counter for new records
    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    function eventoRadio(radio, tipo, SubTipo) {
        var obj = radio.getValue();
        if (obj) {
            if (tipo == 'Aborto') {

                if (SubTipo == 'S') {
                    App.nAbortos.setVisible(true);

                } else {
                    App.nAbortos.setVisible(false);
                    App.nAbortos.setValue(null);
                }
            }
        }

    }


    //function lol(){
    //}

    //var lol = function (valor){

    //}

    //const lol = (valor) => {

    //}
    var calcular = function (valor) {
        var id1=0;
        var id2=0;
        var id3=0;
        var V = '@indicaModoLectura';

        if(V== 'False'){
            if(App.IdPariedad1.getValue()==''){
                id1=0;
            }else{
                id1= App.IdPariedad1.getValue()
            }if(App.IdPariedad2.getValue()==''){
                id2=0;
            }else{
                id2= App.IdPariedad2.getValue();
            }if(App.IdPariedad3.getValue()==''){
                id3=0;
            }else{
                id3= App.IdPariedad3.getValue();
            }

            var valoracion = id1+id2+id3;
            App.IdPariedad4.setValue(valoracion)


        }
    }

    function eventoCancelar(form) {
        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //setIndicaCambios(false);
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    };

    function deleteActual(record, grid, tipo) {

        if (record != null) {

            var store = grid.store;

            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;

            store.remove(record);

            //"addEliminar_SS_HC_Anamnesis_AP"
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF005_Eliminar_AntePerGinecoObstetricosDetalle"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2
                }
            });

            seleccRecordActual = null;
        }

    };

    var grillaActiva = null;

    grillaActiva = "GRILLA_Diagnostico";
    var count = 0; // a counter for new records

    function InsertRow(valor, estado, soloLectura) {

        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (grillaActiva != null) {
                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;




                    var grid = Ext.getCmp("" + grillaActiva);
                    if (validaDuplicado(DescripcionLocalVar, grid)) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                    valor.setValue('');
                    setIndicaCambios(true);
                    var fecha_actual = new Date();

                    grid.store.insert(0, {
                        CodigoElemento: count++,
                        ValorCodigo1: DescripcionLocalVar,
                        ValorEntero4: fecha_actual.getFullYear(),
                        ValorEntero5: 57,
                        ACCION: 'NUEVO'

                    });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);
                    valor.setValue('');
                }
            } else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las Tablas.',
                        tipo: 'WARNING'
                    }
                });
                return;
            }
        }
    }

        function validaDuplicadoCatalogo(valor1, valor2) {
            var estados = false;
            App.StoreCatalogoCirugia.each(function (r) {
                if (valor2 == r.get('CirugiaGO')) { estados = true; }
            });
            return estados;
        };

        function validaDuplicado(valor, grid) {
            var store = grid.store;
            var estados = false;
            var valor1;
            var valor2;
            store.each(function (r) {
                if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
            });
            return estados;
        }
        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }


    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }



        function seleccionadorMedico() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoDos',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        var keyCode
        function ReplaceCaracterEspec(e) {

            /*Capturar tecla pulsada*/
            if (window.event) keyCode = window.event.keyCode;
            else if (e) keyCode = e.which;
            var prueba = keyCode;
            // alert(keyCode);
            //
            if (prueba == 60) {
                var textactual = e.getValue();
                e.value = e.setValue(textactual + " ");
            }
            var texto = e.getValue();
            var vacio = "";
            var cadena = vacio + e.getValue();
            var recortado = cadena.substr(-1, 1);
            // alert(recortado + ' antes');
            if (recortado == "<" || recortado == ">") {
                //  alert(recortado + ' despues');
                e.value = e.setValue(texto + " ");
            }
        }



        function EnviarData(grid) {
            var menstruacion = App.txtMenstruacion.getValue().length;
            var pap = App.txtPap.getValue().length;
            var mamografia = App.txtMamografia.getValue().length;
            var conductaxd = App.cboConducSexualRies.getValue().length;
            var primerarelacion = App.cbo1eraRelSex.getValue();
            var parejassexuales = App.cboNumParejasSex.getValue();

            if (primerarelacion != null) {
                if (String(primerarelacion).length > 10) {
                    beforeSave(App.formactual);
                    return false;
                }
                
            }
            if (parejassexuales != null) {
                if (String(parejassexuales).length > 10) {
                    beforeSave(App.formactual);
                    return false;
                }
              
            }
            if (conductaxd > 50) {
                beforeSave(App.formactual);
                return false;
            }
            if (menstruacion > 80) {
                beforeSave(App.formactual);
                return false;
            }
            if (pap > 80) {
                beforeSave(App.formactual);
                return false;
            }
            if (mamografia > 80) {
                beforeSave(App.formactual);
                return false;
            }
            else {
                App.taAlerts.setValue('');
                App.taAlerts.setVisible(false);
            }


            if (true) {

                App.taAlerts.setVisible(false);
                App.taAlerts.setValue(null);
                App.conthbIndicaError.setVisible(false);
                var store = App.storeExamenes;
                var status = 0;
                var i = 0;
                var valores = "";
                var invalidFields = new Array();
                var fila = 0;
                var ArrayCatalogo = new Array();
                App.StoreCatalogoCirugia.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN
                    setValuesGridForm(r, null);
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);
                    var SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE = {
                        CirugiaGO: r.get('CirugiaGO'),
                        Secuencia: r.get('Secuencia'),
                        //ValorCodigo1: r.get('ValorCodigo1'),
                        //ValorCodigo6: r.get('CirugiaGO'),
                        //CodigoElemento: r.get('Secuencia'),

                        Accion: (r.get('Accion') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')

                    };
                    ArrayCatalogo.push(SS_HC_AntePerGinecoObstetricosCatalogoCirugia_FE);

                });


                var ArrayDiagnostico = new Array();
                App.STORE_Diagnostico.each(function (r) {

                    fila = fila + 1;
                    ///VALIDACIÓN
                    setValuesGridForm(r, null);
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                    var MA_MiscelaneosDetalle = {

                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorEntero4: r.get('ValorEntero4'),
                        ValorEntero5: r.get('ValorEntero5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ValorEntero1: r.get('ValorEntero1'),
                        ValorEntero2: r.get('ValorEntero2'),
                        ValorEntero3: r.get('ValorEntero3'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayDiagnostico.push(MA_MiscelaneosDetalle);
                    i = i + 1;

                });


                if (invalidFields.length > 0) {

                    addRecursosValidacion(invalidFields);
                    App.cmdGuardar.setDisabled(false);
                }

                else {

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEPF005_Save_AntePerGinecoObstetricos"))',
                        params: {
                            selectionArray1: ArrayCatalogo,
                            selectionArray2: ArrayDiagnostico,
                            text: '0'
                        }
                    });
                }

            } else {
                App.cmdGuardar.setDisabled(false);
            }

        }

        var setValuesGridForm = function (r, valor) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var ValorCodigo1 = r.get('ValorCodigo1');
            var CodigoElemento = r.get('CodigoElemento');

            if (ValorCodigo1 == null || ValorCodigo1 == '') {
                //App.IdDiagnostico.setValue(null);
            }

        };

        var getInvalidFieldsGrid = function (form, invalidFields, fila) {
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });
            return invalidFields;
        };

        function PanelOcultar(grid) {
            var panel2 = App.Panel2;
            var panel3 = App.Panel3;
            panel2.setVisible(false);
            panel3.setVisible(false);

        };

        function PanelMostrar(grid) {
            var panel2 = App.Panel2;
            var panel3 = App.Panel3;
            panel3.setVisible(true);
            panel2.setVisible(true);
        };

        var valcheck=0;
        var eventoCheck = function (chk, pregunta, valor) {
            var CheckAll = chk.getValue();

            var FieldSet1 = App.fsGinecologico;
            var FieldSet2 = App.fsObstetrico;
            var FieldSet3 = App.fsObstetrico2;
            //var panel1 = App.Panel1;
            //var panel2 = App.Panel2;
            if (CheckAll) {

                if (pregunta == 'CTodo1') {

                    FieldSet1.setVisible(false);
                    var store = App.GridPanelCirugiaGO.store;
                    store.reload();

                }

                if (pregunta == 'C1') {
                    App.cbo1eraRelSex.setDisabled(true)

                    //panel1.setVisible(false);

                    App.cbo1eraRelSex.setValue("")


                    FieldSet1.setVisible(true);
                } if (pregunta == 'C1_1') {
                    App.cboRelacionesSex.setDisabled(true)
                    App.cboRelacionesSex.setValue("")
                    FieldSet1.setVisible(true);
                } if (pregunta == 'C1_2') {

                    App.cboNumParejasSex.setDisabled(true)
                    App.cboNumParejasSex.setValue("")
                    FieldSet1.setVisible(true);

                } if (pregunta == 'C1_3') {
                    App.cboConducSexualRies.setDisabled(true)
                    App.cboConducSexualRies.setValue("")
                    FieldSet1.setVisible(true);
                } if (pregunta == 'C1_4') {
                    App.cboUltimoPap.setDisabled(true)
                    App.txtPap.setValue("");
                    App.txtPap.setDisabled(true)

                    FieldSet1.setVisible(true)
                } if (pregunta == 'C1_5') {
                    App.cboManografia.setDisabled(true)
                    App.txtMamografia.setDisabled(true)
                    App.txtMamografia.setValue("")
                    FieldSet1.setVisible(true)
                }

                if (pregunta == 'C2') {
                    FieldSet2.setVisible(false);
                    FieldSet3.setVisible(false);
                    var store = App.GRILLA_Diagnostico.store;
                    store.reload();
                }

            }

            else {

                if (pregunta == 'CTodo1') {
                    FieldSet1.setVisible(true);
                    var store = App.GridPanelCirugiaGO.store;
                    store.reload();

                }

                if (pregunta == 'C1') {
                    App.cbo1eraRelSex.setDisabled(false)
                    //panel1.setVisible(true);
                    FieldSet1.setVisible(true);
                    //var store = App.GridPanelCirugiaGO.store;
                    //store.reload();
                }

                if (pregunta == 'C1_1') {
                App.cboRelacionesSex.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();
            } if (pregunta == 'C1_2') {

                App.cboNumParejasSex.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();

            } if (pregunta == 'C1_3') {
                App.cboConducSexualRies.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();
            } if (pregunta == 'C1_4') {
                App.cboUltimoPap.setDisabled(false)

                App.txtPap.setDisabled(false)
                FieldSet1.setVisible(true)
            } if (pregunta == 'C1_5') {
                App.cboManografia.setDisabled(false)
                App.txtMamografia.setDisabled(false)
                FieldSet1.setVisible(true)

            }




                if (pregunta == 'C2') {

                    FieldSet2.setVisible(true);
                    FieldSet3.setVisible(true);
                    var store = App.GRILLA_Diagnostico.store;
                    store.reload();
                }


            }

        };

        var countCatalogo = 0; // a counter for new records de Catalogo
        function addRecord(grid, grupo, IdUnidad, idEpisodioAte, idPacient, componenteAdd) {
           //alert(App.cmbTipAt.getValue() + "");

            if (componenteAdd.getValue() != null) {

                var valorSelec = componenteAdd.getValue();

                if (componenteAdd.getValue().length > 100) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Solo se admiten 100 Caracteres.",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                    return;
                }
                if (validaDuplicadoCatalogo(grupo, valorSelec)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Registro de Catalogo de cirugías y/o procedimientos gineco obstericos",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    grid.store.insert(0,
                        {

                            UnidadReplicacion: IdUnidad,
                            IdEpisodioAtencion: idEpisodioAte,
                            IdPaciente: idPacient,
                            Secuencia: countCatalogo++,
                            CirugiaGO: valorSelec,
                            Accion: 'NUEVO'
                        });


                }
            } else {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Debe seleccionar un tipo de atención para añadirlo.",
                    icon: Ext.Msg.INFO,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            }

            App.cmbTipAt.setValue("");

        };

        function deleteActualCatalogo(record) {

            var store = App.GridPanelCirugiaGO.store;


            store.remove(record);
            Ext.net.DirectMethod.request({
                // "CCEPF013add_DataDeleteInmunizacionesAdulto"
                url: '@(Url.Action("CCEPF005_add_DataDeleteCatalogoCirugiaGO"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '',
                    secuencia: record.data.Secuencia
                }
            });
        };


        var seleccRecordActual = null;
        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }



        function addRecordMain(grid) {
            setIndicaCambios(true);

            grid.store.insert(0, {
                CODIGOELEMENTO: 'New' + count++, ValorCodigo1: '', ValorCodigo7: '', ValorEntero6: '', ACCION: 'NUEVO'
            });

            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };

        function eventoActivarSeleccion(button, event) {

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();

            var numero = button.id.replace('IdbtnDesactivo', '');

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo' + numero).show();

            for (var i = 0; i < numerogrupo; i++) {

                if (i != numero) {
                    Ext.getCmp('IdbtnActivo' + i).hide();
                    Ext.getCmp('IdbtnDesactivo' + i).show();
                }
            }

            //var idGrillaActiva = 'grillaExamenes' + numero;

            //grillaActiva = idGrillaActiva;

            //if (grillaActiva != 'grillaExamenes0') {
            //    App.NumeroStore.setValue(numero);
            //}
            //else {

            //}
        };

        function eventoDesactivarSeleccion(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo' + numero).show();

        };


        var eventoOnEditar = function (btn) {
            App.cmdGuardar.setDisabled(false);
            App.btnOnEdit.setVisible(false);
            App.btnCancel.setVisible(true);

        };


        var CalcularParto = function (m) {

            var parto1 = 0;
            var parto2 = 0;



            var grid = Ext.getCmp("" + grillaActiva);

            var store = grid.store;
            store.each(function (r) {

                if (r.get('ValorEntero6') == 1) parto1 = parto1 + 1;
                if (r.get('ValorEntero6') == 2) parto2 = parto2 + 1;
            });

            App.IdNff1.setValue(parto1);
            App.IdNff2.setValue(parto2);
            App.IdNff3.setValue(parto1 + parto2);

        };




    </script>
}   @* fin @section cabecera *@


@section cuerpo
{
    @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions.Add(
              Html.X().FormPanel()
                  .ItemID("center")
                  .DefaultAnchor("100%")
                  .AutoScroll(true)
                // .Height(340)

                  .Header(false)
                  .Border(true)
                  .ID("formactual")
                  .Listeners(l =>
                  {
                      l.Render.Handler = "eventoRenderForm(); ";
                      l.AfterRender.Handler = "setIndicaCambios(false);";
                  })
                 .Items(
                          X.TextField()
                          .ID("RecepcionaRecurso")
                          .Listeners(l =>
                          {
                              l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                          })
                          .Hidden(true),

                          X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                              .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                              .Items(

                              X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='black'> ANTECEDENTES FISIOLOGICOS -  GINECOLOGICO</font>"),
                              X.Component().Width(180),
                              X.CheckboxGroupFor(m => m.AntFisioGinecologico_flag, new List<Checkbox.Config> {
                                new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.AntFisioGinecologico_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'CTodo1', 'N');"}
                                })
                          ),

                     X.FormPanel()
                      .ID("Panel1")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
                //.Hidden(true)

                      .Items(

                         X.FieldSet().ID("fsGinecologico").Hidden(Model.AntFisioGinecologico_flag == "S")  //F5.1
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Antecedente Fisiologico Ginecológico")
                          .Border(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                              {
                                  d.LabelAlign = LabelAlign.Left;
                              })
                          .Items(
                              X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                                .Items(
                                  X.NumberFieldFor(m => m.PrimeraRelacionSexual).FieldLabel("1era relación sexual").ReadOnly(indicaModoLectura).Disabled(Model.PrimeraRelacionSexual_flag == "S")
                                  .MinValue(0).MaxLength(10)
                                  .ID("cbo1eraRelSex")
                //.NegativeText(MENS_NUMERO)
                                  .EnableKeyEvents(true),
                //.Listeners(l =>
                //{
                //    l.Blur.Handler = "eventoIncrementoFecha(this);";
                //    l.KeyUp.Fn = "eventoKey";
                //})
                                  X.CheckboxGroupFor(m => m.PrimeraRelacionSexual_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.PrimeraRelacionSexual_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C1', 'N');"}
                                    }),
                                  X.Component().Width(100),
                                  X.DateFieldFor(m => m.RelacionesSexuales).FieldLabel("Relaciones Sexuales").ReadOnly(indicaModoLectura).Disabled(Model.RelacionesSexuales_flag == "S")
                                  .ID("cboRelacionesSex")
                                   .Format("dd/MM/yyyy")
                //.Listeners(l =>
                //   {
                //       l.Change.Handler =
                //           "validarfechas(this,App.FechaInicioDescanso.getValue(),App.FechaFinDescanso.getValue()); ";
                //   })
                                  ,
                                  X.CheckboxGroupFor(m => m.RelacionesSexuales_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.RelacionesSexuales_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C1_1', 'N');"}
                                    })

                                      // colocar + Items Container
                                 ),


                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                                .Items(
                                  X.NumberFieldFor(m => m.NoParejasSexuales).FieldLabel("N° de parejas sexuales ").ReadOnly(indicaModoLectura).Disabled(Model.NoParejasSexuales_flag == "S")
                                  .MinValue(0).MaxLength(10)
                                  .ID("cboNumParejasSex")
                                  .EnableKeyEvents(true),

                                  X.CheckboxGroupFor(m => m.NoParejasSexuales_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.NoParejasSexuales_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C1_2', 'N');"}
                                    }),
                                  X.Component().Width(100),
                                  X.TextFieldFor(m => m.ConductaSexualRiesgo).FieldLabel("Conducta sexual de riesgo").ReadOnly(false).Disabled(false).MaxLength(50).Disabled(Model.ConductaSexualRiesgo_flag == "S")
                                  .ID("cboConducSexualRies").MaxLength(50),

                                  X.CheckboxGroupFor(m => m.ConductaSexualRiesgo_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.ConductaSexualRiesgo_flag=="S"?true:false), ReadOnly=indicaModoLectura ,Handler="eventoCheck(this, 'C1_3', 'N');"}
                                    })

                                      // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "100")); })
                                .Items(
                                  X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='black'>Métodos anticonceptivos:</font>"),
                                  X.Component().Width(30)
                                  .ID("chkDeBarrera"),
                                  X.CheckboxGroupFor(m => m.Barrera_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "De barrera", InputValue="S",  Checked=(Model.Barrera_flag=="S"?true:false), ReadOnly=indicaModoLectura}
                                    }),
                                  X.Component().Width(50)
                                  .ID("chkHormonal"),
                                  X.CheckboxGroupFor(m => m.Hormonal_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "Hormonal", InputValue="S",  Checked=(Model.Hormonal_flag=="S"?true:false), ReadOnly=indicaModoLectura}
                                    }),
                                  X.Component().Width(50)
                                  .ID("chkDui"),
                                  X.CheckboxGroupFor(m => m.DIU_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "DIU", InputValue="S",  Checked=(Model.DIU_flag=="S"?true:false), ReadOnly=indicaModoLectura}
                                    }),
                                  X.Component().Width(50)
                                  .ID("chkRitmo"),
                                  X.CheckboxGroupFor(m => m.Ritmo_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "Ritmo", InputValue="S",  Checked=(Model.Ritmo_flag=="S"?true:false), ReadOnly=indicaModoLectura
                                       }
                                    }),
                                  X.Component().Width(50)
                                  .ID("chkNoUsa")
                                  ,
                                  X.CheckboxGroupFor(m => m.NoUsa_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "No usa", InputValue="S",  Checked=(Model.NoUsa_flag=="S"?true:false), ReadOnly=indicaModoLectura,Handler="eventoCheck(this, 'CHK_MetodosAntico', 'N');"}
                                    })
                // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "100")); })
                                .Items(
                                      X.DateFieldFor(m => m.Menarquia).FieldLabel("Menarquía").ReadOnly(indicaModoLectura)
                                       .Format("dd/MM/yyyy").LabelWidth(130),
                                       X.Component().Width(30),
                                      X.DateFieldFor(m => m.FUR).FieldLabel("F.U.R").ReadOnly(indicaModoLectura)
                                       .Format("dd/MM/yyyy"),
                                       X.Component().Width(50),
                                      X.NumberFieldFor(m => m.RegimenCatamenialNoDias).FieldLabel("Régimen Catamenial").ReadOnly(indicaModoLectura)
                                      .MinValue(0).LabelWidth(120).InputWidth(50)
                                      .EnableKeyEvents(true),
                                      X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='black'>/</font>"),
                                      X.NumberFieldFor(m => m.RegimenCatamenialNoIntervalo).FieldLabel("").ReadOnly(indicaModoLectura)
                                      .MinValue(0).InputWidth(50)
                                      .EnableKeyEvents(true),
                                      X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='black'>días</font>")
                // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "100")); })
                                .Items(
                                      X.RadioGroupFor(m => m.Dismenorrea, new List<Radio.Config> {
                                        new Radio.Config{BoxLabel = "Si", InputValue = "S", ReadOnly =indicaModoLectura},
                                        new Radio.Config{BoxLabel = "No", InputValue = "N", ReadOnly =indicaModoLectura},
                                        new Radio.Config{BoxLabel = "NA", InputValue = "X", ReadOnly =indicaModoLectura}
                                        })
                                          .Vertical(false)
                                          .FieldLabel("Dismenorrea")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "580"));
                //    d.Add(new Parameter("DefaultAnchor", "150%"));
                //})
                                          .AnchorVertical("100%")
                                          .ID("IdRadio1")
                                          .LabelWidth(80).Width(250),

                                       X.Component().Width(165),
                                       X.TextFieldFor(m => m.menstruaciones).FieldLabel("Características de las menstruaciones:").ID("txtMenstruacion")
                                        .Disabled(false).MaxLength(80)
                                        .LabelWidth(150).InputWidth(300)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Items(
                                      X.RadioGroupFor(m => m.Leucorrea, new List<Radio.Config> {
                                        new Radio.Config{BoxLabel = "Si", InputValue = "S", ReadOnly =indicaModoLectura,},
                                        new Radio.Config{BoxLabel = "No", InputValue = "N", ReadOnly =indicaModoLectura},
                                        new Radio.Config{BoxLabel = "NA", InputValue = "X", ReadOnly =indicaModoLectura}
                                        })
                                          .Vertical(false)
                                          .FieldLabel("Leucorrea")
                                          .AnchorVertical("100%")
                                          .ID("IdRadio2")
                                          .LabelWidth(80).Width(250)
                // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Items(
                                      X.DateFieldFor(m => m.UltimoPAP).FieldLabel("Ultimo PAP").ReadOnly(indicaModoLectura).Disabled(Model.UltimoPAP_flag == "S")
                                       .Format("MM/yyyy").LabelWidth(130)
                                       .ID("cboUltimoPap"),

                                      X.Component().Width(3),
                                      X.CheckboxGroupFor(m => m.UltimoPAP_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.UltimoPAP_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C1_4', 'N');"}
                                    }),
                                      X.Component().Width(100),
                                      X.TextFieldFor(m => m.UltimoPAP_Resultado).FieldLabel("Resultado").ReadOnly(indicaModoLectura).MaxLength(80).ID("txtPap").Disabled(Model.UltimoPAP_flag == "S")
                                       .LabelWidth(110).InputWidth(300)
                                       .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                // Agregar + Items Container
                                      ),
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Items(
                                      X.DateFieldFor(m => m.Mamografia).FieldLabel("Mamografia").ReadOnly(indicaModoLectura).Disabled(Model.Mamografia_flag == "S")
                                       .Format("MM/yyyy").LabelWidth(130)
                                       .ID("cboManografia"),
                                      X.Component().Width(3),
                                      X.CheckboxGroupFor(m => m.Mamografia_flag, new List<Checkbox.Config> {
                                    new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.Mamografia_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C1_5', 'N');"}
                                    }),
                                      X.Component().Width(100),
                                      X.TextFieldFor(m => m.Mamografia_Resultado).FieldLabel("Resultado").ReadOnly(indicaModoLectura).MaxLength(80).ID("txtMamografia").Disabled(Model.Mamografia_flag == "S")
                                       .LabelWidth(110).InputWidth(300)
                                       .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                // Agregar + Items Container
                                      ),
                              X.FieldSet()
                                  .Title("Agregar otras Cirugia G-O :")
                                  .Items
                                  (
                                X.Container().Layout(LayoutType.HBox).Defaults(d => { d.Add(new Parameter("LabelWidth", "90")); })
                                  .Items(

                                      X.TextField().ID("cmbTipAt").Disabled(false).Name("buscarCod")

                                                   .FieldLabel("Otras Cirugia G-O").PaddingSpec("3").InputWidth(250).LabelWidth(150).MaxLength(100),
                                      X.Component().Width(20).PaddingSpec("3"),
                                      X.Button().Text("Agregar").Icon(Icon.Add).PaddingSpec("3")
                // .Handler("addRecord(App.GridPanelInmunizacion, 'IdOtrasVacunas',  '" + Model.UnidadReplicacion + "', App.cmbTipAt );")
                                       .Handler("addRecord( App.GridPanelCirugiaGO, 'IdCirugiaGO',  '" + Model.UnidadReplicacion + "','" + Model.IdEpisodioAtencion + "','" + Model.IdPaciente + "', App.cmbTipAt );")
                // Agregar + Items Container
                                     ),


                             //          X.TextField().ID("txtEpisodioAtencion")
                //.Value(varEpisodioAtencion)
                //     ,
                // Insertar + Items FieldSet
                // grilla
                                X.GridPanel()
                //.Flex(1)
                                 .ID("GridPanelCirugiaGO")
                                 .Border(false)
                                 .Store(
                                   Html.X().Store().ID("StoreCatalogoCirugia")
                                          .Model(
                                              Html.X().Model().IDProperty("IdCirugiaGO").Fields(
                                                          Html.X().ModelField().Name("UnidadReplicacion"),
                                                          Html.X().ModelField().Name("IdEpisodioAtencion"),
                                                          Html.X().ModelField().Name("IdPaciente"),
                                                          Html.X().ModelField().Name("IdepisodioClinico"),
                                                          Html.X().ModelField().Name("IdGinecoobstetricos"),
                                                          Html.X().ModelField().Name("Secuencia"),
                                                          Html.X().ModelField().Name("CirugiaGO"),
                                                          Html.X().ModelField().Name("IdUsuarioCreacion"),
                                                          Html.X().ModelField().Name("IdFechaCreacion"),
                                                          Html.X().ModelField().Name("IdUsuarioModificacion"),
                                                          Html.X().ModelField().Name("IdFechaModificacion"),
                                                          Html.X().ModelField().Name("Accion"),
                                                          Html.X().ModelField().Name("Version"))
                                                   )
                                          .Proxy(proxy => proxy.Add(
                                          Html.X().AjaxProxy().Url("CCEPF005_getGrillaCatalogoCirugiaGO").Reader(reader => reader.Add(
                                                  Html.X().JsonReader().Root("data").TotalProperty("total").IDProperty("IdCirugiaGO")))))
                                          .AutoLoad(true)
                                      )
                               .ColumnModel(
                //Html.X().ComponentColumn().Editor(true)
                //                          .DataIndex("UnidadReplicacion")
                //                          .Text("Unidad Replicacion").Width(110).Hidden(false)
                //                          .Component(Html.X().TextField().ReadOnly(true)),
                //Html.X().ComponentColumn().Editor(true).DataIndex("IdEpisodioAtencion").Text("Episodio Atencion").Width(100).Hidden(false)
                //        .Component(Html.X().NumberField().ReadOnly(true)),
                //Html.X().ComponentColumn().Editor(true).DataIndex("IdPaciente").Text("Paciente ").Width(100).Hidden(false)
                //        .Component(Html.X().NumberField().ReadOnly(true)),
                                      Html.X().ComponentColumn().Editor(true).DataIndex("Secuencia").Text("Secuencia ").Width(100).Hidden(true)
                                              .Component(Html.X().NumberField().ReadOnly(true)),
                                      Html.X().ComponentColumn().Editor(true)
                                                                .DataIndex("CirugiaGO")
                                                                .Text("Cirugía G - O")
                                                                .Flex(1)
                                                                .Width(250)
                                                                .Hidden(false)
                                                                .Component(
                                                                  Html.X().TextField().ReadOnly(true)
                                                                  ),

                                      Html.X().CommandColumn().Width(80)
                                                              .Text("Eliminar")
                                                              .Commands(
                                                                   Html.X().GridCommand().CommandName("Delete")
                                                                   .Icon(Icon.Delete).Text(""))
                                                              .Listeners(ls => ls.Command.Handler = "deleteActualCatalogo(record);"),
                                      Html.X().ComponentColumn().Editor(true).DataIndex("Accion").Text("ACCION").Hidden(true)
                                          .Component(Html.X().TextField().ReadOnly(true))
                                          )
                                  .SelectionModel(
                                          Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                                  .Plugins(
                                          Html.X().CellEditing())
                                  .TopBar(
                                      Html.X().Toolbar().Hidden(indicaModoLectura)
                                      .Items(
                                              Html.X().ToolbarSeparator()
                                          , Html.X().Label()
                                                  .Html("<b><font color='" + COLOR_BLUE01 + "'> Otras  " + DESC_ADD1 + "</font></b>")
                                          , X.ToolbarFill()

                                         )
                                      )


                              // fin grilla
                           )

                          // Agregar + Items  FieldSet
                          )
                // Agregar + Items  FormPanel
                        ),
                          X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                              .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                              .Items(
                              X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='black'> ANTECEDENTES FISIOLOGICOS - OBSTETRICOS (solo para gestantes)</font>"),

                              X.Component().Width(180),
                              X.CheckboxGroupFor(m => m.AntFisioObstetrico_flag, new List<Checkbox.Config> {
                                new Checkbox.Config{BoxLabel = "NA", InputValue="S",  Checked=(Model.AntFisioObstetrico_flag=="S"?true:false), ReadOnly=indicaModoLectura, Handler="eventoCheck(this, 'C2', 'N');"}
                                })

                          ),
                     X.FormPanel()
                      .ID("Panel3")
                       .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)

                      //.Hidden(true)
                      .Items(


                         X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .ID("fsObstetrico2").Hidden(Model.AntFisioObstetrico_flag == "S")  //F5.2
                          .Title("<b>Antecedente Fisiologico Obstetrico</b>")
                          .Border(true)
                          .MarginSpec("05 05 0 05")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                // .FieldDefaults(d => { d.LabelAlign = LabelAlign.Top; })

                          //.MarginSpec("0 05 0 05")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "170"));
                //})
                //.FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                           .Items(
                              X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                          .Items(
                // Grilla Diagnóstico de ingreso

                //X.Component().Width(30),
                //X.Label().Text("Tiempo de enfermedad:"),
                 X.Component().Width(50),

                                      X.NumberFieldFor(m => m.Gravidez).FieldLabel("Gravidez").ReadOnly(indicaModoLectura).LabelWidth(50).ID("IdGravidez").MinValue(1)
                //.Listeners(l =>
                //{
                //    l.Blur.Handler = "validargravidez(this);";
                //    l.KeyUp.Fn = "eventoKey";
                //})
                                       .Width(150),
                                   X.Component().Width(50),
                                X.NumberFieldFor(m => m.ParidadATermino).FieldLabel("Paridad").ReadOnly(indicaModoLectura).LabelWidth(50).ID("IdPariedad1")
                                      .Listeners(l =>
                                      {
                                          l.Blur.Handler = "calcular(this);";
                                          l.KeyUp.Fn = "eventoKey";
                                      })
                                      .MinValue(0)
                                      .Width(100)
                                      ,

                                       X.NumberFieldFor(m => m.ParidadObitoPrematuro).FieldLabel("").ReadOnly(indicaModoLectura).LabelWidth(50).ID("IdPariedad2")
                                          .Listeners(l =>
                                          {
                                              l.Blur.Handler = "calcular(this);";
                                              l.KeyUp.Fn = "eventoKey";
                                          })
                                       .MinValue(0)
                                      .Width(40),
                                       X.NumberFieldFor(m => m.ParidadAborto).FieldLabel("").ReadOnly(indicaModoLectura).LabelWidth(50).ID("IdPariedad3")
                                        .Listeners(l =>
                                        {
                                            l.Blur.Handler = "calcular(this);";
                                            l.KeyUp.Fn = "eventoKey";
                                        })
                                        .MinValue(0)
                                        .Width(40),
                                       X.TextFieldFor(m => m.ParidadVivo).FieldLabel("").ReadOnly(true).LabelWidth(50).ID("IdPariedad4")
                                       .Listeners(l =>
                                       {
                                           l.Blur.Handler = "calcular(this);";
                                           l.KeyUp.Fn = "eventoKey";
                                       })

                                      .Width(40),
                                       X.Component().Width(50),
                                       X.RadioGroupFor(m => m.Abortos_flag, new List<Radio.Config> {
                                            new Radio.Config{BoxLabel = "Si", InputValue = "1", ReadOnly =indicaModoLectura, Width=50,Handler="eventoRadio(this,'Aborto','S');"  },
                                            new Radio.Config{BoxLabel = "No", InputValue = "2", ReadOnly =indicaModoLectura, Width=50, Handler="eventoRadio(this,'Aborto','N');"  }

                                        })
                                            .Vertical(false)
                                            .FieldLabel("Abortos")
                                            .Defaults(d =>
                                            {
                                                d.Add(new Parameter("LabelWidth", "250"));
                                                d.Add(new Parameter("DefaultAnchor", "50%"));
                                            })
                                            .AnchorVertical("100%")

                                            .LabelWidth(70)
                                            .Width(50),


                                         X.Component().Width(135),
                                         X.NumberFieldFor(m => m.AbortosNo).FieldLabel("N°").ReadOnly(indicaModoLectura).LabelWidth(10).ID("nAbortos").Hidden(Abortosxd)
                                        .Width(70)
                                        .MaxLength(100)
                                        .EnableKeyEvents(true)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })


                                        // X.Component().Height(50)
                                         ))),


                  X.FormPanel()
                      .ID("Panel2")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
                //.Hidden(true)
                      .Items(
                         X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .ID("fsObstetrico").Hidden(Model.AntFisioObstetrico_flag == "S")  //F5.2
                          .Title("<b>Agregar Detalle de Antecedente Fisiologico Obstetrico</b>")
                          .Border(true)
                          .MarginSpec("05 05 0 05")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d => { d.LabelAlign = LabelAlign.Top; })

                          //.MarginSpec("0 05 0 05")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "170"));
                //})
                //.FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                          .Items(
                // Grilla Diagnóstico de ingreso

                                  X.GridPanel()
                                          .ID("GRILLA_Diagnostico")
                                          .Border(true)
                                          .Store(
                                              Html.X().Store()
                                                  .ID("STORE_Diagnostico")
                                                  .Model(
                                                      Html.X()
                                                          .Model()
                                                          .IDProperty("CodigoElemento")
                                                          .Fields(
                                                              new ModelField("CodigoElemento", ModelFieldType.String),
                                                              new ModelField("ValorCodigo2", ModelFieldType.String), //Sexo
                                                              new ModelField("ValorEntero4", ModelFieldType.Int),    // Año
                                                              new ModelField("ValorEntero5", ModelFieldType.Int),    // Nacido vivo
                                                              new ModelField("ValorEntero6", ModelFieldType.Int),    //Tipo de parto
                                                              new ModelField("ValorEntero7", ModelFieldType.Int),    //Lugar del Parto
                                                              new ModelField("ValorEntero1", ModelFieldType.Int),    //Atendido por
                                                              new ModelField("ValorEntero2", ModelFieldType.Int),    //Complic. del parto
                                                              new ModelField("ValorEntero3", ModelFieldType.Int),    //Peso nacer (kg.)
                                                              new ModelField("ValorCodigo1", ModelFieldType.String), // Especifique
                                                              new ModelField("DescripcionLocal", ModelFieldType.String),
                                                              new ModelField("ACCION", ModelFieldType.String)



                                                           )
                                                        )
                                                  .AutoLoad(true)
                                                  .RemoteSort(false)
                                                  .IsPagingStore(true)
                                                  .RemotePaging(true)
                                                  .PageSize(5)
                                                  .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                  .Url("CCEPF005_LISTAR_GRILLADIAGNOSTICO")
                                                                  .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                  .Root("data")
                                                                                  .TotalProperty("total")
                                                                                  .IDProperty("CodigoElemento")))
                                                                                  ))
                                          )


                                         .ColumnModel(

                                           Html.X().ComponentColumn()
                                                      .Editor(true)
                                                      .DataIndex("ValorCodigo1")
                                                      .Text("Especifique")
                                                      .Flex(1)
                //.Component(
                //    Html.X().TextField().ReadOnly(indicaModoLectura)
                //        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //    )

                                                .Component(

                                                   /* Html.X().TextArea().ReadOnly(true).Height(40)*/
                                                   Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                  .DisplayField("DescripcionLocal")
                                                  .ValueField("DescripcionLocal")

                                                  .TypeAhead(false)
                                                  .Width(500)
                                                  .PageSize(5)
                                                  .HideBaseTrigger(true)
                                                  .MinChars(0)
                //.Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DESCDIAGN").Select(d => new ListItem(d.Name, d.ID)))
                                                  .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                  .TriggerAction(TriggerAction.Query)
                                                 .ListConfig(Html.X().BoundList()
                                                  .LoadingText("Searching...")
                                                  .ItemTpl(Html.X().XTemplate()

                                                  .Html(@<text>
                                                    <div class="search-item">
                                                        <h3>{DescripcionLocal}</h3>

                                                    </div>
                                                </text>)

                                                 )).Store(Html.X().Store()
                                               .AutoLoad(false)
                                              .Proxy(Html.X().AjaxProxy()
                                              .Url(Url.Action("GetPlants"))
                                              .ActionMethods(am => am.Read = HttpMethod.POST)
                                              .Reader(Html.X().JsonReader().Root("data"))
                                                        )
                                                        .Model(Html.X().Model()
                                                            .Fields(
                                                                Html.X().ModelField().Name("DescripcionLocal")

                                                            )
                                                        )
                                                    )

                                                ),
                                            Html.X().ComponentColumn().Editor(true)
                                            .DataIndex("ValorEntero4")
                                            .Text("Año")
                                            .Width(70)
                                            .Component(
                                                Html.X().NumberField() //.FieldStyle("border-color: red")
                                                .MinValue(0)
                                                .EnableKeyEvents(true)
                                                .ReadOnly(false)
                                             ),

                                            Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .Hidden(false)
                                                    .DataIndex("ValorCodigo2").Text("Sexo").Width(80)
                                                    .Component(
                                                        Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("Seleccione ")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboMiscelaneoLista.GetComboGenericoTxt("TIPOSEXO").Select(d => new ListItem(d.Name, d.Codigo)))
                                                         )
                                            ,

                                            Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .Hidden(false)
                                                    .DataIndex("ValorEntero5").Text("Nacido vivo").Width(70)
                                                    .Component(
                                                        Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("Seleccione ")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))

                                                         )
                                            ,

                                        Html.X().ComponentColumn().Editor(true)
                                        .DataIndex("ValorEntero3")
                                        .Text("Peso nacer (kg.)")
                                        .Width(100)
                                        .Component(
                                            Html.X().NumberField()//.FieldStyle("border-color: red")
                                            .MinValue(0)
                                            .EnableKeyEvents(true)
                                            .ReadOnly(false)
                                         ),

                                        Html.X().ComponentColumn()
                                                .Editor(true)
                                                .Hidden(false)
                                                .DataIndex("ValorEntero6").Text("Tipo de parto").Width(85)
                                                .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                        .Editable(false)
                                                        .QueryMode(DataLoadMode.Local)
                                                        .TriggerAction(TriggerAction.All)
                                                        .EmptyText("Seleccione")
                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPPARTO")
                                                                             .Select(d => new ListItem(d.Name, d.ID)))
                                                        .Listeners(l => { l.Select.Handler = "CalcularParto(this);"; })
                                                        )

                                            ,
                                            Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .Hidden(false)
                                                    .DataIndex("ValorEntero7").Text("Lugar del Parto").Width(85)

                                                    .Component(
                                                        Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                //.EmptyText("Seleccione")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("LUGPARTO")
                                                                                 .Select(d => new ListItem(d.Name, d.ID)))
                                                            .Value("Leo")
                                                         )
                                            ,
                                            Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .Hidden(false)
                                                    .DataIndex("ValorEntero1").Text("Atendido por").Width(85)
                                                    .Component(
                                                        Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("Seleccione ")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ATENDIDOPOR").Select(d => new ListItem(d.Name, d.ID)))
                                                         )
                                            ,
                                            Html.X().ComponentColumn()
                                                    .Editor(true)
                                                    .Hidden(false)
                                                    .DataIndex("ValorEntero2").Text("Complic. del parto").Width(100)
                                                    .Component(
                                                        Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("Seleccione ")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                         )
                                            ,

                                            Html.X().CommandColumn().Width(70)
                                                                    .Text("Eliminar")
                                                                    .Commands(
                                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                                              .CommandName("Delete")
                                                                                              .Icon(Icon.Delete)
                                                                                              .Text("")
                                                                                )
                                                                    .Listeners(ls => ls.Command.Handler = "deleteActual(record,this.up('grid'),'IN');")
                                        )
                                       .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                                       .Plugins(Html.X().CellEditing())

                                        .View(view => view.Add(Html.X().GridView()
                                                     .TrackOver(false)))



                                       //.TopBar(
                //     Html.X().Toolbar().Hidden(indicaModoLectura)
                //         .Items(
                //                 Html.X().ToolbarSeparator()


                //.Listeners(l => l.CellClick.Handler = "aRecordSelector.add(record.data.CodigoElemento);")
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                             X.Button().Text("Agregar").ID("cmdAdd").ToolTip("Nuevo Antecendente")
                //.Handler("InsertRowNew();")
                                                            .Handler("addRecordMain(this.up('grid'));")
                                                            .Icon(Icon.Add)


                                                    , Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                   , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo")
                                                            .Html("<b>Catálogo</b>")
                //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccion(App.IdbtnDesactivo);")
                                                                .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo")
                                                            .Html("<b>Catálogo</b>")
                //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccion(App.IdbtnActivo);")
                                                                .Icon(Icon.PluginGo).Hidden(true)

                                                )
                                         )



                        // fin grillas
                        ,
                        X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                        .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                        .Items(
                        X.NumberFieldFor(m => m.TotalPartos).FieldLabel("Total de partos").ReadOnly(indicaModoLectura)
                        .MinValue(0)
                        .EnableKeyEvents(true)
                        .ID("IdNff3"),

                        X.Component().Width(100),
                        X.NumberFieldFor(m => m.NoPartosEutocicos).FieldLabel("N° partos Eutócicos").ReadOnly(indicaModoLectura)
                        .MinValue(0)
                        .EnableKeyEvents(true)
                        .ID("IdNff1"),

                        X.Component().Width(100),
                        X.NumberFieldFor(m => m.NoPartosDistocicos).FieldLabel("N° partos x Distócicos").ReadOnly(indicaModoLectura)
                        .MinValue(0)

                        .EnableKeyEvents(true)
                        .ID("IdNff2"),

                        X.Component().Width(100),

                        X.RadioGroupFor(m => m.PartosGemelares, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Si", InputValue = "S", ReadOnly =indicaModoLectura},
                            new Radio.Config{BoxLabel = "No", InputValue = "N", ReadOnly =indicaModoLectura}
                            })
                            .Vertical(false)
                            .FieldLabel("Partos gemelares ?")
                            .AnchorVertical("100%")
                            .ID("IdRadio3")
                            .LabelWidth(80).Width(250)
                            )
                        )

                        )
                ////////ADD PARA MSGS/////

                       ,
                        X.TextFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                        X.TextFieldFor(m => m.Estado).Hidden(true),

                       X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                //////////////////////
                     )
                     .CloseAction(CloseAction.Destroy)

                    .TopBar(
                        X.Toolbar().ID("bar")

                        .Items(
                            X.ToolbarSpacer(20),

                            X.TextField().Width(15)
                             .FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                            X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),
                            X.ToolbarSpacer(20),

                            Html.X().Container().Layout(LayoutType.HBox)
                            .ID("conthbIndicaError").Hidden(true).Items(
                                X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")


                            ),

                            X.TextFieldFor(m => m.IdPaciente).Hidden(true).ReadOnly(true),

                            X.ToolbarFill(),
                            X.Button()
                             .Text("Imprimir")
                             .Icon(Icon.Report)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresion")
                             .Handler("eventoVisorReporte('');"),

                            X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');"),

                            X.ToolbarSpacer().Width(40),

                            X.Button()
                             .Text("Guardar")
                             .Icon(Icon.Disk)
                             .ID("cmdGuardar").Hidden(indicaModoLectura)
                             .DirectEvents(de =>
                                {   
                                    de.Click.Before = "return EnviarData(this.up('grid'));";
                                    de.Click.Url = Url.Action("CCEPF005_Save_AntePerGinecoObstetricos");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                             .Text("Cancelar")
                             .ID("btnCancel").Hidden(indicaModoLectura)
                             .Icon(Icon.Cancel)
                           .Handler("eventoCancelar(this.up('form'));"),

                            X.Button()
                             .Text("Editar")
                             .ID("btnOnEdit")
                             .Icon(Icon.ApplicationFormEdit)
                             .Hidden(true)
                             .Handler("eventoOnEditar(App.btnOnEdit);")

                        )
                       )
                    .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"

                    )
             ); // fin regions.Add
        }  // fin  Items(regions
                )
        //
    )

}  

