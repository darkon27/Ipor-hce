@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_FichaAnestesia_1_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";


    var DESC_ADD = "Proc. Médicos SEGUS";

    var DESC_ADD2 = "Proc. Médicos SEGUS";
    var DESC_ADD3 = "Proc. Médicos SEGUS";
    var DESC_ADD4 = "Proc. Médicos SEGUS";
    
    var DESC_ADDCPT = "Proc. Médicos CPT";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
   // String varEliminar = Convert.ToString(Session["ELIMINAR_DATA"]);


}
@section cabecera
{   <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>
     var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });


        var val = '@visibleImpresion';
        var vis = '@isVista';
        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);
                    // parent.App.btnContEpisodio_HCE.setDisabled(true);//A TODOS

                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);
                    //parent.App.btnContEpisodio_HCE.setDisabled(false);//A TODOS
                }
            }
        }
    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
        else {
            App.formactual.setDisabled(true);

        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    }

    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };
        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);

            var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }
    </script>

    <script>
        var eventoRadio = function (rd1, pregunta, valor) {
            var radioAll = rd1.getValue();

            if (radioAll) {
                if (pregunta == 'R3') {
                    if (valor == 'S') {
                        App.TxtEspecificar1.setDisabled(false);

                    } else {
                        App.TxtEspecificar1.setDisabled(true);
                    };
                }

                if (pregunta == 'R4') {
                    if (valor == 'S') {
                        App.TxtEspecificar2.setDisabled(false);

                    } else {
                        App.TxtEspecificar2.setDisabled(true);
                    };
                }

            }

        };
   
        var keyCode
        function ReplaceCaracterEspec(e) {

            /*Capturar tecla pulsada*/
            if (window.event) keyCode = window.event.keyCode;
            else if (e) keyCode = e.which;
            var prueba = keyCode;
            if (prueba == 60) {
                var textactual = e.getValue();
                e.value = e.setValue(textactual + " ");
            }
            var texto = e.getValue();
            var vacio = "";
            var cadena = vacio + e.getValue();
            var recortado = cadena.substr(-1, 1);
            if (recortado == "<" || recortado == ">") {
                e.value = e.setValue(texto + " ");
            }
        }
    
    



        var tempEliminar = false;
        var COLOR_BLUE01_ = "#284A89";
        var COLOR_RED01_ = "#990000";
        var COLOR_YELLOW02_ = "#D9A407";
        var COLOR_GREEN01_ = "#177506";
        var COLOR_ORANGE01_ = "#E07509";

        var changeEPS = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };


        var setValuesGridForm = function (r, valor) {
            ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
            var ValorFecha = r.get('ValorFecha');
            var ValorCodigo1 = r.get('ValorCodigo1');
            var ValorCodigo4 = r.get('ValorCodigo4');
            var varDescripcionExtranjera = r.get('DescripcionExtranjera');

            App.FechaSolitada.setValue(ValorFecha == null ? null : ValorFecha);
            App.Observacion.setValue(ValorCodigo4 == null ? null : ValorCodigo4);
            App.Especificaciones.setValue(ValorCodigo4 == null ? null : varDescripcionExtranjera);
        };


        var getInvalidFieldsGrid = function (form, invalidFields, fila) {
       
            var fields = App.formactual.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                    field.reset();
                }
            });
            return invalidFields;
        };



        function EnviarData(grid) {

            beforeSave(App.formactual);
            var reload = true;

            if (App.formactual.getForm().isValid()) {

                App.taAlerts.setVisible(false);
                App.taAlerts.setValue(null);
                App.conthbIndicaError.setVisible(false);
                //   var store = App.storeExamenes;
                var status = 0;
                var i = 0;
                var errores = 0;
                var valores = "";
                var invalidFields = new Array();
                var fila = 0;
                var objCabezeraOrdenAtencion = new Array();
                var ArrayOrdInterQuirurDiagnosti = new Array();

                var invalidFieldsGrid = new Array();

                var Estomagolleno = App.IdRadioEstomagoLleno.getValue();
                var ArrayEstomagolleno = new Array();
                ArrayEstomagolleno.push(Estomagolleno);
                var valorEstomagolleno = ArrayEstomagolleno[0].EstomagoLleno;

                console.log("llegoo valorEstomagolleno >>", valorEstomagolleno);

                var objCabecerra2 = {
                    Peso: App.Peso.getValue(),
                    Talla: App.Talla.getValue(),
                    Fecha: App.Fecha.getValue(),
                    NSop: App.NSop.getValue(),
                    Glucosa: App.Glucosa.getValue(),
                    Hb: App.Hb.getValue(),
                    PLAQ: App.PLAQ.getValue(),
                    GrupoSanguineo: App.GrupoSanguineo.getValue(),
                    VDRL: App.VDRL.getValue(),
                    Hcto: App.Hcto.getValue(),
                    PTPIT: App.PTPIT.getValue(),
                    FactorRH: App.FactorRH.getValue(),
                    PSA: App.PSA.getValue(),
                    UreaCreat: App.UreaCreat.getValue(),
                    INR: App.INR.getValue(),
                    Ayuno: App.Ayuno.getValue(),
                    EstomagoLleno: valorEstomagolleno,


                    IdMedico: App.nfMedico.getValue(),
                    Anestesiologo: App.nfMedicoAnaste.getValue(),
                    Ayudante: App.nfMedicoAyudante.getValue(),
                    EnfInstrumentista: App.nfMedicoInstrumentista.getValue(),
                    EnfCirculante: App.nfMedicoCirculantes.getValue(),
                    Neonatologo: App.nfMedicoNeonatologo.getValue(),
                    Cardiologo: App.nfMedicoCardiologo.getValue()




                };
                objCabezeraOrdenAtencion.push(objCabecerra2);




                var ArrayList0 = new Array();
                App.storeExamenes.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN, no se valida
                    setValuesGridForm(r, null);
                    invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFieldsGrid, fila);
                    var MA_MiscelaneosDetalle = {
                        ValorFecha: r.get('ValorFecha'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ValorCodigo6: r.get('ValorCodigo6'),
                        ValorCodigo7: r.get('ValorCodigo7'),
                        ValorEntero5: r.get('ValorEntero5'),
                        CodigoElemento: r.get('CodigoElemento'),
                        DescripcionExtranjera: r.get('DescripcionExtranjera'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayList0.push(MA_MiscelaneosDetalle);
                    i = i + 1;
                });

                

                var ArrayAnestesiaDiagnosti1 = new Array();

                App.storeDiagnostico.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN
                    setValuesGridForm(r, null);
                    invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFields, fila);
                    var SS_HC_AnestesiaDiagnostico1_FE = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ValorEntero4: r.get('ValorEntero4'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        ValorCodigo6: r.get('ValorCodigo6'),
                        ValorEntero5: r.get('ValorEntero5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayAnestesiaDiagnosti1.push(SS_HC_AnestesiaDiagnostico1_FE);
                });


                var ArrayListAnestesiaExam2 = new Array();
                App.storeAnestesiaExamen2.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN, no se valida
                    setValuesGridForm(r, null);
                    invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFieldsGrid, fila);
                    var MA_MiscelaneosDetalle = {
                        ValorFecha: r.get('ValorFecha'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ValorCodigo6: r.get('ValorCodigo6'),
                        ValorCodigo7: r.get('ValorCodigo7'),
                        ValorEntero5: r.get('ValorEntero5'),
                        CodigoElemento: r.get('CodigoElemento'),
                        DescripcionExtranjera: r.get('DescripcionExtranjera'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayListAnestesiaExam2.push(MA_MiscelaneosDetalle);
                    i = i + 1;
                });




                var ArrayListAnesteExam3 = new Array();
                App.storeAnestesiaExamenes3.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN, no se valida
                    setValuesGridForm(r, null);
                    invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFieldsGrid, fila);
                    var MA_MiscelaneosDetalle = {
                        ValorFecha: r.get('ValorFecha'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ValorCodigo6: r.get('ValorCodigo6'),
                        ValorCodigo7: r.get('ValorCodigo7'),
                        ValorEntero5: r.get('ValorEntero5'),
                        CodigoElemento: r.get('CodigoElemento'),
                        DescripcionExtranjera: r.get('DescripcionExtranjera'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayListAnesteExam3.push(MA_MiscelaneosDetalle);
                    i = i + 1;
                });


                var ArrayAnestesiaDiagnostiPost3 = new Array();

                App.storeDiagnosticopost3.each(function (r) {
                    fila = fila + 1;
                    ///VALIDACIÓN
                    setValuesGridForm(r, null);
                    invalidFieldsGrid = getInvalidFieldsGrid(App.formactual, invalidFields, fila);
                    var SS_HC_AnestesiaDiagnosticoPost3_FE = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        ValorCodigo2: r.get('ValorCodigo2'),
                        ValorCodigo3: r.get('ValorCodigo3'),
                        ValorCodigo4: r.get('ValorCodigo4'),
                        ValorEntero4: r.get('ValorEntero4'),
                        ValorCodigo5: r.get('ValorCodigo5'),
                        ValorCodigo6: r.get('ValorCodigo6'),
                        ValorEntero5: r.get('ValorEntero5'),
                        ValorEntero6: r.get('ValorEntero6'),
                        ValorEntero7: r.get('ValorEntero7'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                    };
                    ArrayAnestesiaDiagnostiPost3.push(SS_HC_AnestesiaDiagnosticoPost3_FE);
                });
                


                if (invalidFields.length > 0) {
                    addRecursosValidacion(invalidFields);
                    App.cmdGuardar.setDisabled(false);
                    App.formactual.setDisabled(false);
                    return false;
                } else {
                    App.formactual.setDisabled(true);

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEPF323_1_Save_anestesia"))',
                        params: {
                            selectionArrayCabezera: objCabezeraOrdenAtencion,
                            selectionArray1: ArrayList0,
                            selectionArray2: ArrayAnestesiaDiagnosti1,
                            selectionArray3: ArrayListAnestesiaExam2,
                            selectionArray4: ArrayListAnesteExam3,
                            selectionArray5: ArrayAnestesiaDiagnostiPost3,
                            
                            text: '0'
                        }
                        , success: function (result) {
                            reload = true;
                        }

                    });
                }

                if (reload) {
                    parent.App.txtRecargarX.setValue('RELOAD');

                } else {
                    App.cmdGuardar.setDisabled(false);
                    App.taAlerts.setVisible(true);
                }

            } else {
                App.cmdGuardar.setDisabled(false);
                return false;
            }

        }




        function seleccionadorMedico() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedico',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        function seleccionadorMedicoAnestesiologo() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoAnestesiologo',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        function seleccionadorMedicoAyudante() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoAyudante',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        function seleccionadorMedicoInstrumentista() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoInstrumentista',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };
        

        function seleccionadorMedicoCirculante() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoCirculante',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        function seleccionadorMedicoNeonatologo() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoNeonatologo',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };


        function seleccionadorMedicoCardiologo() {
            setIndicaCambios(true);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoCardiologo',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };




        function eventoActivarSeleccionExamenes1(button, event) {
            grillaActiva = 1;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '3567'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });
            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();

            var numero = button.id.replace('IdbtnDesactivo', '');
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo' + numero).show();
            grilla_Actual = "grillaExamenes1";



            Ext.getCmp('IdbtnDesactivo6').show();
            Ext.getCmp('IdbtnActivo6').hide();

            Ext.getCmp('IdbtnDesactivo2').show();
            Ext.getCmp('IdbtnActivo2').hide();

            Ext.getCmp('IdbtnDesactivo7').show();
            Ext.getCmp('IdbtnActivo7').hide();

            Ext.getCmp('IdbtnDesactivo8').show();
            Ext.getCmp('IdbtnActivo8').hide();




        };



        
        
        function eventoDesactivarSeleccionExamenes1(button, event) {
            grillaActiva = null;
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo' + numero).show();
            //Ext.getCmp('IdbtnDesactivoSecundario').show();

        };




        


        function eventoActivarSeleccionDiagnostico1(button, event) {

            grillaActiva = 1;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '6209'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            var numero = button.id.replace('IdbtnDesactivo6', '');

            grilla_Actual = "grillaDiag1Anestesia";

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo6' + numero).show();

            Ext.getCmp('IdbtnDesactivo').show();
            Ext.getCmp('IdbtnActivo').hide();

            Ext.getCmp('IdbtnDesactivo2').show();
            Ext.getCmp('IdbtnActivo2').hide();

            Ext.getCmp('IdbtnDesactivo7').show();
            Ext.getCmp('IdbtnActivo7').hide();

            Ext.getCmp('IdbtnDesactivo8').show();
            Ext.getCmp('IdbtnActivo8').hide();


            for (var i = 0; i < numerogrupo; i++) {
                if (i != numero) {
                    Ext.getCmp('IdbtnActivo6' + i).hide();
                    Ext.getCmp('IdbtnDesactivo6' + i).show();
                }
            }
        };




        function eventoDesactivarSeleccionDiagnostico1(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo6', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo6' + numero).show();

        };


        function eventoActivarSeleccionDiagnosticoPost3(button, event) {

            grillaActiva = 1;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '6209'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            var numero = button.id.replace('IdbtnDesactivo8', '');

            grilla_Actual = "grillaDiag1AnestesiaPost3";

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo8' + numero).show();

            Ext.getCmp('IdbtnDesactivo').show();
            Ext.getCmp('IdbtnActivo').hide();

            Ext.getCmp('IdbtnDesactivo2').show();
            Ext.getCmp('IdbtnActivo2').hide();

            Ext.getCmp('IdbtnDesactivo7').show();
            Ext.getCmp('IdbtnActivo7').hide();

            Ext.getCmp('IdbtnDesactivo6').show();
            Ext.getCmp('IdbtnActivo6').hide();




            for (var i = 0; i < numerogrupo; i++) {
                if (i != numero) {
                    Ext.getCmp('IdbtnActivo8' + i).hide();
                    Ext.getCmp('IdbtnDesactivo8' + i).show();
                }
            }
        };

        



        

        function eventoActivarSeleccionCirugiaProceExam2(button, event) {

            grillaActiva = 1;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '3567'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            var numero = button.id.replace('IdbtnDesactivo2', '');

            grilla_Actual = "grillaExamenes2";

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo2' + numero).show();

            Ext.getCmp('IdbtnDesactivo').show();
            Ext.getCmp('IdbtnActivo').hide();


            Ext.getCmp('IdbtnDesactivo6').show();
            Ext.getCmp('IdbtnActivo6').hide();

            Ext.getCmp('IdbtnDesactivo7').show();
            Ext.getCmp('IdbtnActivo7').hide();

            Ext.getCmp('IdbtnDesactivo8').show();
            Ext.getCmp('IdbtnActivo8').hide();
         

            for (var i = 0; i < numerogrupo; i++) {
                if (i != numero) {
                    Ext.getCmp('IdbtnActivo2' + i).hide();
                    Ext.getCmp('IdbtnDesactivo2' + i).show();
                }
            }
        };

        function eventoDesactivarSeleccionCirugiaProceExam2(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo2', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo2' + numero).show();

        };



        function eventoActivarSeleccionAnestesiaExam3(button, event) {

            grillaActiva = 1;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("LoadFormatos"))',
                params: {
                    containerId: 'Center1',
                    text: '3567'
                },
                success: function (result) {
                    parent.App.StoreBuscarServicios.reload();
                }
            });

            var panelServ = Ext.getCmp('East1');
            parent.App.East1.expand();
            
            var numero = button.id.replace('IdbtnDesactivo7', '');

            grilla_Actual = "grillaExamenes3";

            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnActivo7' + numero).show();

            Ext.getCmp('IdbtnDesactivo').show();
            Ext.getCmp('IdbtnActivo').hide();

            Ext.getCmp('IdbtnDesactivo6').show();
            Ext.getCmp('IdbtnActivo6').hide();


            Ext.getCmp('IdbtnDesactivo8').show();
            Ext.getCmp('IdbtnActivo8').hide();

            Ext.getCmp('IdbtnDesactivo2').show();
            Ext.getCmp('IdbtnActivo2').hide();
            

            for (var i = 0; i < numerogrupo; i++) {
                if (i != numero) {
                    Ext.getCmp('IdbtnActivo7' + i).hide();
                    Ext.getCmp('IdbtnDesactivo7' + i).show();
                }
            }

        };




        function eventoDesactivarSeleccionAnestesiaExam3(button, event) {
            parent.App.East1.collapse();
            var numero = button.id.replace('IdbtnActivo7', '')
            Ext.getCmp(button.id).hide();
            Ext.getCmp('IdbtnDesactivo7' + numero).show();

        };
        






        function InsertRow(valor, estado, soloLectura) {
            var datito = grillaActiva;
            if (soloLectura == '1') {
                setIndicaCambios(false);
            } else {
                if (datito == null) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Debe activar la selección de una de las Tablas.',
                            tipo: 'WARNING'
                        }
                    });
                    //  parent.App.btnBuscarServiviosNota.setDisabled(true);
                    valor.setValue('');
                    return;
                }
                if (grilla_Actual == 'grillaDiag1Anestesia') {

                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        console.log(JSON.stringify(obj));
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }
                        }
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }
                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        var grid = Ext.getCmp("grillaDiagnosticoCirugia");
                        setIndicaCambios(true);
                        grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }
                }else if (grilla_Actual == 'grillaDiag1AnestesiaPost3') {

                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        console.log(JSON.stringify(obj));
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }
                        }
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }
                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        var grid = Ext.getCmp("grillaDiagnosticoCirugiaPost3");
                        setIndicaCambios(true);
                        grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }

                } else if (grilla_Actual == 'grillaExamenes1') {
                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var ValorIndicadorEPS = obj.ValorEntero4;
                        var ValorCodSEGUS = obj.ValorCodigo1;

                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }
                        }
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }

                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        var grid = Ext.getCmp("grillaExamenes");
                        setIndicaCambios(true);
                        grid.store.insert(0, {
                            CodigoElemento: 'New' + count++, ValorFecha: new Date(), ValorEntero5: ValorIndicadorEPS, ValorCodigo2: DescripcionLocalVar,
                            ValorCodigo1: DescripcionLocalVar2, ValorCodigo7: ValorCodSEGUS, ACCION: 'NUEVO'
                        });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }
                }
                else if (grilla_Actual == 'grillaExamenes2') {
                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var ValorIndicadorEPS = obj.ValorEntero4;
                        var ValorCodSEGUS = obj.ValorCodigo1;

                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }
                        }
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }

                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        var grid = Ext.getCmp("grillaExamenCirugiaoProcedimiento");
                        setIndicaCambios(true);
                        grid.store.insert(0, {
                            CodigoElemento: 'New' + count++, ValorFecha: new Date(), ValorEntero5: ValorIndicadorEPS, ValorCodigo2: DescripcionLocalVar,
                            ValorCodigo1: DescripcionLocalVar2, ValorCodigo7: ValorCodSEGUS, ACCION: 'NUEVO'
                        });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }
                }
                else if (grilla_Actual == 'grillaExamenes3') {

                    if (valor.getValue() != '') {
                        var obj = JSON.parse(valor.getValue());
                        var DescripcionLocalVar = obj.DescripcionLocal;
                        var ValorIndicadorEPS = obj.ValorEntero4;

                    

                        var ValorCodSEGUS = obj.ValorCodigo1;

                        var cadena1 = '';
                        var cadena2 = '';
                        var posicion = 0;

                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (DescripcionLocalVar[i] == '|') {
                                posicion = i;
                            }
                        }
                        for (var i = 0; i < DescripcionLocalVar.length; i++) {
                            if (i < posicion) {
                                cadena1 = cadena1 + DescripcionLocalVar[i];
                            } else if (i > posicion) {
                                cadena2 = cadena2 + DescripcionLocalVar[i];
                            }
                        }

                        var DescripcionLocalVar2 = '';
                        DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                        var grid = Ext.getCmp("grillaAnestesiaExamenes3");
                        setIndicaCambios(true);
                        grid.store.insert(0, {
                            CodigoElemento: 'New' + count++, ValorFecha: new Date(), ValorEntero5: ValorIndicadorEPS, ValorCodigo2: DescripcionLocalVar,
                            ValorCodigo1: DescripcionLocalVar2, ValorCodigo7: ValorCodSEGUS, ACCION: 'NUEVO'
                        });
                        Ext.Function.defer(function () {
                            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                        }, 100);
                        valor.setValue('');
                    }


                }

                else {
                }

            }
        }


        var seleccRecordActual = null;
        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }



        function deleteActualExamen1(record, grid, tipo) {
            if (record != null) {
                var store = grid.store;
                setIndicaCambios(true);
                var par1 = record.data.ValorCodigo2;
                var par2 = record.data.CodigoElemento;
                store.remove(record);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF323_1_Eliminar_AnestesiaExamenes1"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };

        function deleteActualAnestesiaExamen2(record, grid, tipo) {
            if (record != null) {
                var store = grid.store;
                setIndicaCambios(true);
                var par1 = record.data.ValorCodigo1;
                var par2 = record.data.CodigoElemento;
                store.remove(record);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF323_1_Eliminar_AnestesiaExamenes2"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };


        function deleteActualAnestesiaExamen3(record, grid, tipo) {
            if (record != null) {
                var store = grid.store;
                setIndicaCambios(true);
                var par1 = record.data.ValorCodigo2;
                var par2 = record.data.CodigoElemento;
                store.remove(record);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF323_1_Eliminar_AnestesiaExamenes3"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };
        





        function deleteActualDiagnostico1(record, grid, tipo) {
            if (record != null) {
                var store = grid.store;
                setIndicaCambios(true);
                var par1 = record.data.ValorCodigo1;
                var par2 = record.data.CodigoElemento;
                store.remove(record);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF323_1_Eliminar_AnestesiaDiagnostico1"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };

        function deleteActualDiagnosticoPost3(record, grid, tipo) {
            if (record != null) {
                var store = grid.store;
                setIndicaCambios(true);
                var par1 = record.data.ValorCodigo1;
                var par2 = record.data.CodigoElemento;
                store.remove(record);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF323_1_Eliminar_AnestesiaDiagnosticoPost3"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };

        



        function addRecordMain(grid) {
            setIndicaCambios(true);

            grid.store.insert(0, {
                CODIGOELEMENTO: 'New' + count++, ValorCodigo1: '', ValorCodigo7: '', ValorEntero6: '', ACCION: 'NUEVO'
            });

            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        };

        


        
    
     </script>
}


@section cuerpo
{

   @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions.Add(
              Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(900)
               .Header(false)
               .Border(true)
                  .ID("formactual")
                  
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";

                })
               .Items(
                X.FormPanel()
                      .ID("Panel1")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
                 .Items(
                       X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Datos Generales de la Notificación")
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(
                          
                                X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                            .Items(
                          X.Component().Width(60),
                               X.TextFieldFor(c => c.Peso)
                                                            .Width(150)
                                                            .FieldLabel("Peso")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),
                                             X.Component().Width(10),

                                            X.TextFieldFor(c => c.Talla)
                                                            .Width(150)
                                                            .FieldLabel("Talla")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                        ,
                                         X.Label().Html("<b>Cm.</b>"),
                                          X.Component().Width(10),
                                                X.DateFieldFor(c => c.Fecha)
                                        .Format("dd/MM/yyyy")
                                                            .Width(150)
                                                            .FieldLabel("Fecha:")
                                                            .LabelWidth(50)
                                                            .ReadOnly(false)
                                                            // .Value(DateTime.Now),
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Fecha),
                                                            
                                            X.Component().Width(10),
                                            X.TextFieldFor(c => c.NSop)
                                                            .Width(150)
                                                            .FieldLabel("N° SOP")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })                  
                                        ),
                                        
                                    X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                            .Items(
                                    X.Component().Width(60),
                                    X.Label().Html("<b>Antecedentes Personales Importantes.</b>"),
                                             X.Component().Width(10),
                                                X.Button()
                                                .Text("Ir al formato F8")
                                                .Icon(Icon.ReportGo)
                                                .Hidden(!visibleImpresion)
                                                .ID("btnformatof08")
                                                .Handler("eventoVisorReporte('HC');")
                                        )
                             ),


                              X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("EXÁMENES")
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                          .Items(
                                        X.TextField()
                                            .ID("RecepcionaRecurso")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                                        X.DateField().ID("FechaSolitada").Hidden(true).Value(DateTime.Now),
                                        X.TextField().ID("Observacion").Hidden(true).Value("DATA"),
                                        X.TextField().ID("Especificaciones").Hidden(true).Value("DATA"),
                                            X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaExamenes")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                //   .Listeners(l => { l.Load.Handler = "setImpresion(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF323_1_EXAMENES").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 .ColumnModel(
                                                    Html.X().Column().Text("N°").DataIndex("ValorEntero5")
                                                        .Width(30).Renderer("changeEPS"),

                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn().Editor(true).DataIndex("ValorCodigo5").Hidden(true)
                                                        .Component(
                                                             Html.X().TextField()
                                                           ),
                                                     Html.X().ComponentColumn()
                                                         .Hidden(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)

                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura).EnableKeyEvents(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                                 .Listeners(l => { l.Focus.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("DescripcionExtranjera")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                             )
                                                        ,
                                                        Html.X().CommandColumn().Width(70).Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                       // .Listeners(ls => ls.Command.Handler = "deleteActualExamen1(record);")
                                                         .Listeners(ls => ls.Command.Handler = "deleteActualExamen1(record,this.up('grid'),'IN');")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo")
                //.Text("Bienes/servicios")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');  eventoActivarSeleccionExamenes1(App.IdbtnDesactivo);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo")
                                                            .Html("<b>Catálogo</b>")
                //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionExamenes1(App.IdbtnActivo);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                   .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        )
                                                   )
                                     ),
                                     
                          X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Datos Generales de la Notificación")
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(
                          
                              X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                            .Items(
                            X.Component().Width(60),
                               X.TextFieldFor(c => c.Glucosa)
                                                            .Width(150)
                                                            .FieldLabel("Glucosa")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),

                                             X.Component().Width(10),

                                            X.TextFieldFor(c => c.Hb)
                                                            .Width(150)
                                                            .FieldLabel("Hb")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                        ,
                                      //   X.Label().Html("<b>Cm.</b>"),
                                          X.Component().Width(10),
                                                X.TextFieldFor(c => c.PLAQ)
                                                             .Width(150)
                                                            .FieldLabel("PLAQ")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),
                                                            
                                            X.Component().Width(10),
                                            X.TextFieldFor(c => c.GrupoSanguineo)
                                                            .Width(200)
                                                            .FieldLabel("Grupo Sanguineo")
                                                            .LabelWidth(100)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })         
                          )
                          ,


                          X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                            .Items(
                            X.Component().Width(60),
                               X.TextFieldFor(c => c.VDRL)
                                                            .Width(150)
                                                            .FieldLabel("VDRL")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),

                                             X.Component().Width(10),

                                            X.TextFieldFor(c => c.Hcto)
                                                            .Width(150)
                                                            .FieldLabel("Hcto")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                        ,
                                          X.Component().Width(10),
                                                X.TextFieldFor(c => c.PTPIT)
                                                             .Width(150)
                                                            .FieldLabel("PT/PIT")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),

                                            X.Component().Width(10),
                                            X.TextFieldFor(c => c.FactorRH)
                                                            .Width(200)
                                                            .FieldLabel("Factor RH")
                                                            .LabelWidth(100)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                          )

                          ,


                             X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                            .Items(
                            X.Component().Width(60),
                               X.TextFieldFor(c => c.PSA)
                                                            .Width(150)
                                                            .FieldLabel("PSA")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),

                                             X.Component().Width(10),

                                            X.TextFieldFor(c => c.UreaCreat)
                                                            .Width(150)
                                                            .FieldLabel("Urea/Creat.")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                        ,
                                          X.Component().Width(10),
                                                X.TextFieldFor(c => c.INR)
                                                             .Width(150)
                                                            .FieldLabel("INR")
                                                            .LabelWidth(50)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                          )
                          )
                        ),
                        
                  
                        
                         X.FormPanel()
                      .ID("Panel2")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false),
                      X.FieldSet()
                      .ColumnWidth(0.4).Collapsible(true)
                     .Title("<b>Cirugia y/o Procedimientos</b>")
             .MarginSpec("05 05 05 00")
             .DefaultAnchor("100%")
                      .Items(
                      
                      
                         X.FieldSet()
                         .Border(false)
                          .ColumnWidth(0.4).Collapsible(false)
                          .MarginSpec("05 05 05 00")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                         .Items(
                              X.TextField()
                                   .ID("RecepcionaRecurso2")
                                   .Listeners(l =>
                                   {
                                       l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                   })
                                   .Hidden(true),
                                X.NumberField().ID("IdDiagnostico").Hidden(true).Value(1),
                                X.ComboBox().ID("DeterminacionDiagnostica").Hidden(true).Value(1),
                                X.ComboBox().ID("IdDiagnosticoPrincipal").Hidden(true).Value(1),
                                X.ComboBox().ID("GradoAfeccion").Hidden(true).Value(1),
                                X.GridPanel()
                                   .ID("grillaDiagnosticoCirugia")
                                   .Border(false)
                                   .Store(
                                       Html.X().Store()
                                              .ID("storeDiagnostico")
                                             .Model(
                                               Html.X().Model()
                                                   .IDProperty("CodigoElemento")
                                                   .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                             new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo4", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo6", ModelFieldType.String),
                                                             new ModelField("ValorEntero5", ModelFieldType.Int),
                                                             new ModelField("ValorEntero6", ModelFieldType.Int),
                                                             new ModelField("ValorEntero7", ModelFieldType.Int),
                                                             new ModelField("ValorEntero3", ModelFieldType.Int),
                                                             new ModelField("CodigoElemento", ModelFieldType.String),
                                                             new ModelField("ValorCodigo7", ModelFieldType.String),
                                                             new ModelField("DescripcionLocal", ModelFieldType.String),
                                                             new ModelField("ACCION", ModelFieldType.String)
                                                               ))

                                            .AutoLoad(true)
                                          .RemoteSort(false)
                                          .IsPagingStore(true)
                                          .RemotePaging(true)
                                          .PageSize(5)
                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()

                                                          .Url("CCEPF323_1_GRID_DIAGNOSTICO1")

                                                          .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                             .Root("data")
                                                                             .TotalProperty("total")
                                                                             .IDProperty("CodigoElemento")))))
                                   ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                                   .ColumnModel(
                                   Html.X().ComponentColumn()
                                           .Editor(true)
                                           .DataIndex("ValorCodigo1")/*.MenuDisabled(true) PARA QUITAR EL FILTRO DE LAS PESTAÑAS*/
                                           .Text("Diagnóstico")
                                           .Flex(1)
                              .Component(
    /* Html.X().TextArea().ReadOnly(true).Height(40)*/
                                   Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                  .DisplayField("DescripcionLocal")
                                  .ValueField("DescripcionLocal")
                                  .TypeAhead(false)
                                  .Width(500)
                                  .PageSize(5)
                                  .HideBaseTrigger(true)
                                  .MinChars(0)
                                  .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                  .TriggerAction(TriggerAction.Query)
                                 .ListConfig(Html.X().BoundList()
                                  .LoadingText("Searching...")
                                  .ItemTpl(Html.X().XTemplate()

                                  .Html(@<text>
                                    <div class="search-item">
                                        <h3>{DescripcionLocal}</h3>

                                    </div>
                                </text>)

                                     )).Store(Html.X().Store()
                                   .AutoLoad(false)
                                  .Proxy(Html.X().AjaxProxy()
                                  .Url(Url.Action("GetPlants"))
                                  .ActionMethods(am => am.Read = HttpMethod.POST)
                                  .Reader(Html.X().JsonReader().Root("data"))
                                            )
                                            .Model(Html.X().Model()
                                                .Fields(
                                                    Html.X().ModelField().Name("DescripcionLocal")

                                                )
                                            )
                                        )

                                    ),

                                        Html.X().ComponentColumn().Hidden(true)
                                             .Editor(true)
                                             .DataIndex("ValorCodigo1")
                                             .Text("Diagnostico")
                                             .Flex(1)
                                             .Component(
                                                 Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo2")
                                             .Text("Determinación")
                                             .Width(150)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.Query)
                                                            .EmptyText("Seleccione tipo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABDIAGNOSTICO").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                        Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo4")
                                             .Text("Grado Afección")
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .ID("CmbGrado").Editable(false)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo grado afección")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGAFECCION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                       Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo3")
                                             .Text("Principal")
                                             .Width(75)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                            Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo5")
                                             .Text("Tipo Antecedente")
                                             .Hidden(true)
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo tipo antecedente")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGANTECED").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                           Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo6")
                                             .Text("Tiempo de Enfermedad")
                                             .Flex(1)
                                             .Component(
                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                             .EnableKeyEvents(true)
                                          .Listeners(l =>
                                          {
                                              l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                              l.KeyDown.Handler = "setIndicaCambios(true);";
                                          })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero5")
                                             .Text("Preexistencia")
                                             .Hidden(true)
                                             .Width(70)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo preexistencia")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero6")
                                             .Text("Crónico")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo crónico")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero7")
                                             .Text("Nuevo")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo nuevo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("CodigoElemento")
                                             .Hidden(true)
                                             ,
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ACCION")
                                             .Hidden(true)
                                            ,
                                            Html.X().CommandColumn()
                                            .Width(70)
                                            .Text("Acción")
                                            .Commands(
                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                            .CommandName("Delete")
                                            .Icon(Icon.Delete)
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualDiagnostico1(record,this.up('grid'),'IN');")
                                     )
                                     .SelectionModel(
                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                     )
                                     .Plugins(
                                         Html.X().CellEditing()
                                     )
                                     .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                    .Listeners(l => l.CellClick
                                        .Handler = "setSeleccionActual(record);")
                                     .TopBar(
                                             Html.X().Toolbar().Hidden(indicaModoLectura)
                                                 .Items(
                                                 X.Button().Text("Agregar").ID("cmdAdd6").ToolTip("Nuevo síntoma")
                                                .Handler("addRecordMain(this.up('grid'));")
                                                .Icon(Icon.Add),
                                                 Html.X().Label()
                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD + "</font></b>")
                                                , X.ToolbarFill(), X.ToolbarSeparator()
                                                , Html.X().Button().ID("IdbtnDesactivo6")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionDiagnostico1(App.IdbtnDesactivo6);")
                                                    .Icon(Icon.PluginDisabled),
                                                Html.X().Button().ID("IdbtnActivo6")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionDiagnostico1(App.IdbtnActivo6);")
                                                    .Icon(Icon.PluginGo).Hidden(true)
                                                )
                                       )
                                           ).PaddingSpec("16"),



                         X.FieldSet()
                         .Border(false)
                          .ColumnWidth(0.4).Collapsible(false)
                          .MarginSpec("05 05 05 00")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                         .Items(
                                               X.TextField()
                                                 .ID("RecepcionaRecurso3")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                              X.GridPanel()
                                                 .ID("grillaExamenCirugiaoProcedimiento")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                            .ID("storeAnestesiaExamen2")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                 .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                                           new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                           new ModelField("ValorCodigo4", ModelFieldType.Int),
                                                                           new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                                           new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                           new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                          new ModelField("ValorEntero3", ModelFieldType.Int),
                                                                          new ModelField("ValorEntero2", ModelFieldType.Int),
                                                                           new ModelField("ValorEntero1", ModelFieldType.Int),
                                                                           new ModelField("CodigoElemento", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                           new ModelField("DescripcionLocal", ModelFieldType.String),
                                                                           new ModelField("ACCION", ModelFieldType.String)

                                                                             ))
                                                    .AutoLoad(true)
                                                      .RemoteSort(false)
                                                      .IsPagingStore(true)
                                                      .RemotePaging(true)
                                                      .PageSize(5)
                                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                      .Url("CCEPF323_1_GRID_ANESTESIA1_EXAMEN2")
                                                                      .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                         .Root("data")
                                                                                         .TotalProperty("total")
                                                                                         .IDProperty("CodigoElemento")))))
                                               ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                                                 .ColumnModel(
                                                 Html.X().ComponentColumn().Text("N°")
                                                         .Editor(true)
                                                         .DataIndex("CodigoElemento").Hidden(true).Renderer("changeEPS")
                                                        // .Text("Nrr°")
                                                         .Width(70)
                                           .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                                      })
                                                             ),

                                                              Html.X().Column().Text("N°")
                                                    .DataIndex("ValorEntero5").Hidden(false).Width(30).Renderer("changeEPS")
                                                    ,


                                                   Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Cirugia")
                                                          .Flex(1)
                                                         .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                                      })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                        .DataIndex("ValorCodigo7")
                                                         .Text("Codigo")
                                                          .Width(180)
                                                         .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                                      })
                                                             ),
                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("CodigoElemento")
                                                         .Hidden(true)
                                                         ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                        ,
                                                        Html.X().CommandColumn().Text("N°")
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualAnestesiaExamen2(record,this.up('grid'),'IN');")

                                                 )

                                                  .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .View(view => view.Add(Html.X().GridView().TrackOver(false)))

                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                             Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'>  " + DESC_ADD2 + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo2")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionCirugiaProceExam2(App.IdbtnDesactivo2);")
                                                                .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo2")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionCirugiaProceExam2(App.IdbtnActivo2);")
                                                                .Icon(Icon.PluginGo).Hidden(true)
                                                            )
                                                   )
                                           ).PaddingSpec("16")

                                            ),
                                            
                      X.FormPanel()
                      .ID("Panel3")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false),
                      X.FieldSet()
                      .ColumnWidth(0.4).Collapsible(true)
                     .Title("<b>Riesgo Quirurgico</b>")
             .MarginSpec("05 05 05 00")
             .DefaultAnchor("100%")
                      .Items(
                         X.FieldSet()
                         .Border(false)
                          .ColumnWidth(0.4).Collapsible(false)
                          .MarginSpec("05 05 05 00")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                         .Items(
                              X.TextField()
                                   .ID("RecepcionaRecurso4")
                                   .Listeners(l =>
                                   {
                                       l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                   })
                                   .Hidden(true),
                                X.NumberField().ID("IdDiagnostico4").Hidden(true).Value(1),
                                X.ComboBox().ID("DeterminacionDiagnostica4").Hidden(true).Value(1),
                                X.ComboBox().ID("IdDiagnosticoPrincipal4").Hidden(true).Value(1),
                                X.ComboBox().ID("GradoAfeccion4").Hidden(true).Value(1),
                                X.GridPanel()
                                   .ID("grillaDiagnosticoCirugia4")
                                   .Border(false)
                                   .Store(
                                       Html.X().Store()
                                              .ID("storeDiagnostico4")
                                             .Model(
                                               Html.X().Model()
                                                   .IDProperty("CodigoElemento")
                                                   .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                             new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo4", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo6", ModelFieldType.String),
                                                             new ModelField("ValorEntero5", ModelFieldType.Int),
                                                             new ModelField("ValorEntero6", ModelFieldType.Int),
                                                             new ModelField("ValorEntero7", ModelFieldType.Int),
                                                             new ModelField("ValorEntero3", ModelFieldType.Int),
                                                             new ModelField("CodigoElemento", ModelFieldType.String),
                                                             new ModelField("ValorCodigo7", ModelFieldType.String),
                                                             new ModelField("DescripcionLocal", ModelFieldType.String),
                                                             new ModelField("ACCION", ModelFieldType.String)
                                                               ))

                                            .AutoLoad(true)
                                          .RemoteSort(false)
                                          .IsPagingStore(true)
                                          .RemotePaging(true)
                                          .PageSize(5)
                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                          .Url("CCEPF327_GRID_DIAGNOSTICO")
                                                          .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                             .Root("data")
                                                                             .TotalProperty("total")
                                                                             .IDProperty("CodigoElemento")))))
                                   ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                   .ColumnModel(
                                   Html.X().ComponentColumn()
                                           .Editor(true)
                                           .DataIndex("ValorCodigo1")/*.MenuDisabled(true) PARA QUITAR EL FILTRO DE LAS PESTAÑAS*/
                                           .Text("Diagnóstico")
                                           .Flex(1)
                              .Component(
                                   Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                  .DisplayField("DescripcionLocal")
                                  .ValueField("DescripcionLocal")
                                  .TypeAhead(false)
                                  .Width(500)
                                  .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                    ),

                                        Html.X().ComponentColumn().Hidden(true)
                                             .Editor(true)
                                             .DataIndex("ValorCodigo1")
                                             .Text("Diagnostico")
                                             .Flex(1)
                                             .Component(
                                                 Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo2")
                                             .Text("Determinación")
                                             .Width(150)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.Query)
                                                            .EmptyText("Seleccione tipo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABDIAGNOSTICO").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                        Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo4")
                                             .Text("Grado Afección")
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .ID("CmbGrado2").Editable(false)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo grado afección")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGAFECCION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                       Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo3")
                                             .Text("Principal")
                                             .Width(75)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                            Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo5")
                                             .Text("Tipo Antecedente")
                                             .Hidden(true)
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo tipo antecedente")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGANTECED").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                           Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo6")
                                             .Text("Tiempo de Enfermedad")
                                             .Flex(1)
                                             .Component(
                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                             .EnableKeyEvents(true)
                                          .Listeners(l =>
                                          {
                                              l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                              l.KeyDown.Handler = "setIndicaCambios(true);";
                                          })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero5")
                                             .Text("Preexistencia")
                                             .Hidden(true)
                                             .Width(70)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo preexistencia")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero6")
                                             .Text("Crónico")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo crónico")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero7")
                                             .Text("Nuevo")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo nuevo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("CodigoElemento")
                                             .Hidden(true)
                                             ,
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ACCION")
                                             .Hidden(true)
                                            ,
                                            Html.X().CommandColumn()
                                            .Width(70)
                                            .Text("Acción")
                                            .Commands(
                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                            .CommandName("Delete")
                                            .Icon(Icon.Delete)
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualDiagnostico(record,this.up('grid'),'IN');")
                                     )
                                     .SelectionModel(
                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                     )
                                     .Plugins(
                                         Html.X().CellEditing()
                                     )
                                     .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                    .Listeners(l => l.CellClick
                                        .Handler = "setSeleccionActual(record);")
                                     .TopBar(
                                             Html.X().Toolbar().Hidden(indicaModoLectura)
                                                 .Items(
                                                 X.Button().Text("Agregar").ID("cmdAdd4").ToolTip("Nuevo síntoma")
                                                .Handler("addRecordMain(this.up('grid'));")
                                                .Icon(Icon.Add),
                                                 Html.X().Label()
                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD + "</font></b>")
                                                , X.ToolbarFill(), X.ToolbarSeparator()
                                                , Html.X().Button().ID("IdbtnDesactivo4")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccion(App.IdbtnDesactivo4);")
                                                    .Icon(Icon.PluginDisabled),
                                                Html.X().Button().ID("IdbtnActivo4")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccion(App.IdbtnActivo4);")
                                                    .Icon(Icon.PluginGo).Hidden(true)
                                                )
                                       )
                                           ).PaddingSpec("16")
                                           
                                           
                         // ,
                         //X.FieldSet()
                         //.Border(false)
                         // .ColumnWidth(0.4).Collapsible(false)
                         // .MarginSpec("05 05 05 00")
                         // .Defaults(d =>
                         // {
                         //     d.Add(new Parameter("LabelWidth", "250"));
                         //     d.Add(new Parameter("DefaultAnchor", "100%"));
                         //     d.Add(new Parameter("LabelAlign", "Left"));
                         //     d.Add(new Parameter("InputWidth", "700"));
                         // })
                         // .DefaultAnchor("100%")
                         //.Items(
                         //                      X.TextField()
                         //                        .ID("RecepcionaRecurso3")
                         //                        .Listeners(l =>
                         //                        {
                         //                            l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                         //                        })
                         //                        .Hidden(true),
                         //                     X.GridPanel()
                         //                        .ID("grillaCirugiaProcedimiento")
                         //                        .Border(false)
                         //                        .Store(
                         //                            Html.X().Store()
                         //                                   .ID("storeCirugiaProcedimiento")
                         //                                  .Model(
                         //                                    Html.X().Model()
                         //                                        .IDProperty("CodigoElemento")
                         //                                        .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                         //                                                  new ModelField("ValorCodigo2", ModelFieldType.Int),
                         //                                                  new ModelField("ValorCodigo3", ModelFieldType.Int),
                         //                                                  new ModelField("ValorCodigo4", ModelFieldType.Int),
                         //                                                  new ModelField("ValorCodigo5", ModelFieldType.Int),
                         //                                                  new ModelField("ValorCodigo6", ModelFieldType.String),
                         //                                                  new ModelField("ValorEntero5", ModelFieldType.Int),
                         //                                                 new ModelField("ValorEntero3", ModelFieldType.Int),
                         //                                                 new ModelField("ValorEntero2", ModelFieldType.Int),
                         //                                                  new ModelField("ValorEntero1", ModelFieldType.Int),
                         //                                                  new ModelField("CodigoElemento", ModelFieldType.String),
                         //                                                  new ModelField("ValorCodigo7", ModelFieldType.String),
                         //                                                  new ModelField("DescripcionLocal", ModelFieldType.String),
                         //                                                  new ModelField("ACCION", ModelFieldType.String)

                         //                                                    ))
                         //                           .AutoLoad(true)
                         //                             .RemoteSort(false)
                         //                             .IsPagingStore(true)
                         //                             .RemotePaging(true)
                         //                             .PageSize(5)
                         //                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                         //                                             .Url("CCEPF327_GRID_CIRUG_PROCEDIMIENTO")
                         //                                             .Reader(reader => reader.Add(Html.X().JsonReader()
                         //                                                                .Root("data")
                         //                                                                .TotalProperty("total")
                         //                                                                .IDProperty("CodigoElemento")))))
                         //                      ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                         //                        .ColumnModel(
                         //                        Html.X().ComponentColumn().Text("N°")
                         //                                .Editor(true)
                         //                                .DataIndex("CodigoElemento").Hidden(true).Renderer("changeEPS")
                         //                                .Text("Nrr°")
                         //                                .Width(70)
                         //                  .Component(
                         //                                Html.X().TextArea().ReadOnly(true).Height(40)
                         //                                .EnableKeyEvents(true)
                         //                             .Listeners(l =>
                         //                             {
                         //                                 l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                         //                                 l.KeyDown.Handler = "setIndicaCambios(true);";
                         //                             })
                         //                                    ),

                         //                                     Html.X().Column().Text("N°")
                         //                           .DataIndex("ValorEntero5").Hidden(false).Width(30).Renderer("changeEPS")
                         //                           ,


                         //                          Html.X().ComponentColumn()
                         //                                .Editor(true)
                         //                                .DataIndex("ValorCodigo1")
                         //                                .Text("Cirugia")
                         //                                 .Flex(1)
                         //                                .Component(
                         //                                Html.X().TextArea().ReadOnly(true).Height(40)
                         //                             .Listeners(l =>
                         //                             {
                         //                                 l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                         //                                 l.KeyDown.Handler = "setIndicaCambios(true);";
                         //                             })
                         //                                    ),
                         //                              Html.X().ComponentColumn()
                         //                                .Editor(true)
                         //                               .DataIndex("ValorCodigo7")
                         //                                .Text("Codigo")
                         //                                 .Width(180)
                         //                                .Component(
                         //                                Html.X().TextArea().ReadOnly(true).Height(40)
                         //                                .EnableKeyEvents(true)
                         //                             .Listeners(l =>
                         //                             {
                         //                                 l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                         //                                 l.KeyDown.Handler = "setIndicaCambios(true);";
                         //                             })
                         //                                    ),
                         //                                Html.X().ComponentColumn()
                         //                                .Editor(true)
                         //                                .DataIndex("CodigoElemento")
                         //                                .Hidden(true)
                         //                                ,
                         //                             Html.X().ComponentColumn()
                         //                                .Editor(true)
                         //                                .DataIndex("ACCION")
                         //                                .Hidden(true)
                         //                               ,
                         //                               Html.X().CommandColumn().Text("N°")
                         //                               .Width(70)
                         //                               .Text("Acción")
                         //                               .Commands(
                         //                               Html.X().GridCommand().Disabled(indicaModoLectura)
                         //                               .CommandName("Delete")
                         //                               .Icon(Icon.Delete)
                         //                               )
                         //                               .Listeners(ls => ls.Command.Handler = "deleteActualCirugiaPro(record,this.up('grid'),'IN');")

                         //                        )

                         //                         .SelectionModel(
                         //                            Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                         //                        )
                         //                        .Plugins(
                         //                            Html.X().CellEditing()
                         //                        )
                         //                        .View(view => view.Add(Html.X().GridView().TrackOver(false)))

                         //                       .Listeners(l => l.CellClick
                         //                           .Handler = "setSeleccionActual(record);")
                         //                        .TopBar(
                         //                                Html.X().Toolbar().Hidden(indicaModoLectura)
                         //                                    .Items(
                         //                                    Html.X().Label()
                         //                                   .Html("<b><font color='" + COLOR_BLUE01 + "'>  " + DESC_ADD + "</font></b>")
                         //                                   , X.ToolbarFill(), X.ToolbarSeparator()
                         //                                   , Html.X().Button().ID("IdbtnDesactivo2")
                         //                                   .Html("<b>Catálogo</b>")
                         //                                   .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionCirugiaProce(App.IdbtnDesactivo2);")
                         //                                       .Icon(Icon.PluginDisabled),
                         //                                   Html.X().Button().ID("IdbtnActivo2")
                         //                                   .Html("<b>Catálogo</b>")
                         //                                   .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionCirugiaProce(App.IdbtnActivo2);")
                         //                                       .Icon(Icon.PluginGo).Hidden(true)
                         //                                   )
                         //                          )
                         //                  ).PaddingSpec("16")

                                            ),



                      X.FormPanel()
                      .ID("Panel4")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false),
                      X.FieldSet()
                      .ColumnWidth(0.4).Collapsible(true)
                     .Title("<b>Disgnostico Post Quirurgico</b>")
             .MarginSpec("05 05 05 00")
             .DefaultAnchor("100%")
                      .Items(
                         X.FieldSet()
                         .Border(false)
                          .ColumnWidth(0.4).Collapsible(false)
                          .MarginSpec("05 05 05 00")
                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "250"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                              d.Add(new Parameter("InputWidth", "700"));
                          })
                          .DefaultAnchor("100%")
                         .Items(
                              X.TextField()
                                   .ID("RecepcionaRecurso5")
                                   .Listeners(l =>
                                   {
                                       l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                   })
                                   .Hidden(true),
                                X.NumberField().ID("IdDiagnostico5").Hidden(true).Value(1),
                                X.ComboBox().ID("DeterminacionDiagnostica5").Hidden(true).Value(1),
                                X.ComboBox().ID("IdDiagnosticoPrincipal5").Hidden(true).Value(1),
                                X.ComboBox().ID("GradoAfeccion5").Hidden(true).Value(1),
                                X.GridPanel()
                                   .ID("grillaDiagnosticoCirugiaPost3")
                                   .Border(false)
                                   .Store(
                                       Html.X().Store()
                                              .ID("storeDiagnosticopost3")
                                             .Model(
                                               Html.X().Model()
                                                   .IDProperty("CodigoElemento")
                                                   .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                             new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo4", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                             new ModelField("ValorCodigo6", ModelFieldType.String),
                                                             new ModelField("ValorEntero5", ModelFieldType.Int),
                                                             new ModelField("ValorEntero6", ModelFieldType.Int),
                                                             new ModelField("ValorEntero7", ModelFieldType.Int),
                                                             new ModelField("ValorEntero3", ModelFieldType.Int),
                                                             new ModelField("CodigoElemento", ModelFieldType.String),
                                                             new ModelField("ValorCodigo7", ModelFieldType.String),
                                                             new ModelField("DescripcionLocal", ModelFieldType.String),
                                                             new ModelField("ACCION", ModelFieldType.String)
                                                               ))

                                            .AutoLoad(true)
                                          .RemoteSort(false)
                                          .IsPagingStore(true)
                                          .RemotePaging(true)
                                          .PageSize(5)
                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                          .Url("CCEPF321_1_GRID_DIAGNOSTICOPOST3")
                                                          .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                             .Root("data")
                                                                             .TotalProperty("total")
                                                                             .IDProperty("CodigoElemento")))))
                                   ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                   .ColumnModel(
                                   Html.X().ComponentColumn()
                                           .Editor(true)
                                     .DataIndex("ValorCodigo1")/*.MenuDisabled(true) PARA QUITAR EL FILTRO DE LAS PESTAÑAS*/
                                           .Text("Diagnóstico")
                                           .Flex(1)
                              .Component(
    /* Html.X().TextArea().ReadOnly(true).Height(40)*/
                                   Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                  .DisplayField("DescripcionLocal")
                                  .ValueField("DescripcionLocal")
                                  .TypeAhead(false)
                                  .Width(500)
                                  .PageSize(5)
                                  .HideBaseTrigger(true)
                                  .MinChars(0)
                                  .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                  .TriggerAction(TriggerAction.Query)
                                 .ListConfig(Html.X().BoundList()
                                  .LoadingText("Searching...")
                                  .ItemTpl(Html.X().XTemplate()

                                  .Html(@<text>
                                    <div class="search-item">
                                        <h3>{DescripcionLocal}</h3>

                                    </div>
                                </text>)

                                     )).Store(Html.X().Store()
                                   .AutoLoad(false)
                                  .Proxy(Html.X().AjaxProxy()
                                  .Url(Url.Action("GetPlants"))
                                  .ActionMethods(am => am.Read = HttpMethod.POST)
                                  .Reader(Html.X().JsonReader().Root("data"))
                                            )
                                            .Model(Html.X().Model()
                                                .Fields(
                                                    Html.X().ModelField().Name("DescripcionLocal")

                                                )
                                            )
                                        )

                                    ),
                                    
                                        Html.X().ComponentColumn().Hidden(true)
                                             .Editor(true)
                                             .DataIndex("ValorCodigo1")
                                             .Text("Diagnostico")
                                             .Flex(1)
                                             .Component(
                                                 Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                 .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo2")
                                             .Text("Determinación")
                                             .Width(150)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.Query)
                                                            .EmptyText("Seleccione tipo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABDIAGNOSTICO").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                        Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo4")
                                             .Text("Grado Afección")
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .ID("CmbGrado3").Editable(false)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo grado afección")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGAFECCION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                       Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo3")
                                             .Text("Principal")
                                             .Width(75)
                                             .Component(
                                                    Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                            .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 ),
                                            Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo5")
                                             .Text("Tipo Antecedente")
                                             .Hidden(true)
                                             .Width(100)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .EmptyText("-Select-").EmptyValue(0)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo tipo antecedente")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGANTECED").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                           Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorCodigo6")
                                             .Text("Tiempo de Enfermedad")
                                             .Flex(1)
                                             .Component(
                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                             .EnableKeyEvents(true)
                                          .Listeners(l =>
                                          {
                                              l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                              l.KeyDown.Handler = "setIndicaCambios(true);";
                                          })
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero5")
                                             .Text("Preexistencia")
                                             .Hidden(true)
                                             .Width(70)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo preexistencia")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero6")
                                             .Text("Crónico")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo crónico")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                         Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ValorEntero7")
                                             .Text("Nuevo")
                                             .Hidden(true)
                                             .Width(50)
                                             .Component(
                                                 Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                            .Editable(false)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                            .AllowBlank(false).BlankText("Debe ingresar el campo nuevo")
                                                            .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                 ),
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("CodigoElemento")
                                             .Hidden(true)
                                             ,
                                          Html.X().ComponentColumn()
                                             .Editor(true)
                                             .DataIndex("ACCION")
                                             .Hidden(true)
                                            ,
                                            Html.X().CommandColumn()
                                            .Width(70)
                                            .Text("Acción")
                                            .Commands(
                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                            .CommandName("Delete")
                                            .Icon(Icon.Delete)
                                            )
                                            .Listeners(ls => ls.Command.Handler = "deleteActualDiagnosticoPost3(record,this.up('grid'),'IN');")
                                     )
                                     .SelectionModel(
                                         Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                     )
                                     .Plugins(
                                         Html.X().CellEditing()
                                     )
                                     .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                    .Listeners(l => l.CellClick
                                        .Handler = "setSeleccionActual(record);")
                                     .TopBar(
                                             Html.X().Toolbar().Hidden(indicaModoLectura)
                                                 .Items(
                                                 X.Button().Text("Agregar").ID("cmdAdd8").ToolTip("Nuevo síntoma")
                                                .Handler("addRecordMain(this.up('grid'));")
                                                .Icon(Icon.Add),
                                                 Html.X().Label()
                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD3 + "</font></b>")
                                                , X.ToolbarFill(), X.ToolbarSeparator()
                                                , Html.X().Button().ID("IdbtnDesactivo8")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionDiagnosticoPost3(App.IdbtnDesactivo8);")
                                                    .Icon(Icon.PluginDisabled),
                                                Html.X().Button().ID("IdbtnActivo8")
                                                .Html("<b>Catálogo</b>")
                                                .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionDiagnosticoPost3(App.IdbtnActivo8);")
                                                    .Icon(Icon.PluginGo).Hidden(true)
                                                )
                                       )
                                           ).PaddingSpec("16")
                                           ,




                               X.FieldSet()
                                 //.ColumnWidth(0.4)
                               //  .Title("EXÁMENES")
                                    .Border(false)
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                     
                                        X.TextField()
                                            .ID("RecepcionaRecurso7")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                                        X.DateField().ID("FechaSolitada7").Hidden(true).Value(DateTime.Now),
                                        X.TextField().ID("Observacion7").Hidden(true).Value("DATA"),
                                        X.TextField().ID("Especificaciones7").Hidden(true).Value("DATA"),
                                      //  X.TextFieldFor(c => c.Motivo)
                                         // .FieldLabel("Motivo").ReadOnly(indicaModoLectura).Hidden(true)
                                         // .EnableKeyEvents(true)
                                         // .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),
                                            X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaAnestesiaExamenes3")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeAnestesiaExamenes3")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                //   .Listeners(l => { l.Load.Handler = "setImpresion(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF323_1_GRID_EXAMENES3").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 .ColumnModel(
                                                    Html.X().Column().Text("N°").DataIndex("ValorEntero5")
                                                        .Width(30).Renderer("changeEPS"),

                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn().Editor(true).DataIndex("ValorCodigo5").Hidden(true)
                                                        .Component(
                                                             Html.X().TextField()
                                                           ),
                                                     Html.X().ComponentColumn()
                                                         .Hidden(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)

                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura).EnableKeyEvents(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                                 .Listeners(l => { l.Focus.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("DescripcionExtranjera")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                             )
                                                        ,
                                                        Html.X().CommandColumn().Width(70).Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                           .Listeners(ls => ls.Command.Handler = "deleteActualAnestesiaExamen3(record,this.up('grid'),'IN');")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD4 + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo7")
                //.Text("Bienes/servicios")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');  eventoActivarSeleccionAnestesiaExam3(App.IdbtnDesactivo7);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo7")
                                                            .Html("<b>Catálogo</b>")
                //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionAnestesiaExam3(App.IdbtnActivo7);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                   .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        )
                                                   )
                                     )
                                            ),   
                                            
                      X.FormPanel()
                      .ID("Panel5")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false),
                      X.FieldSet()
                      .ColumnWidth(0.4).Collapsible(true)
                     .Title("<b>Datos de medicos</b>")
             .MarginSpec("05 05 05 00")
             .DefaultAnchor("100%")
                      .Items(


                         X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.IdMedico).ID("nfMedico").FieldLabel("Cirujano").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMed").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMed").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedico();")
                                                    )
                                                    ,


                    X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.Anestesiologo).ID("nfMedicoAnaste").FieldLabel("Anestesiologo").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedAnaste").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMedAnaste").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoAnestesiologo();")
                                                    )
                                                    ,



                        X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.Ayudante).ID("nfMedicoAyudante").FieldLabel("Ayudante").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedAyudante").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMedAyudante").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoAyudante();")
                                                    )
                                                    ,


                          X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.EnfInstrumentista).ID("nfMedicoInstrumentista").FieldLabel("Enf.  instrumentistas").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedInstrumentista").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMedInstrumentista").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoInstrumentista();")
                                                    )

                                                    ,

                                             X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.EnfCirculante).ID("nfMedicoCirculantes").FieldLabel("Enf.  circulante").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedCirculantes").Width(50).FieldLabel("").ReadOnly(true),
                                                    X.TextField().ID("tfNomMedCirculantes").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoCirculante();")
                                                    )
                                                    ,



                                             X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.Neonatologo).ID("nfMedicoNeonatologo").FieldLabel("Neonatologo").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedNeonatologo").Width(50).FieldLabel("").ReadOnly(true),
                                                    X.TextField().ID("tfNomMedNeonatologo").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoNeonatologo();")
                                                    )
                                                    ,


                                                       X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.Cardiologo).ID("nfMedicoCardiologo").FieldLabel("Cardiologo").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMedCardiologo").Width(50).FieldLabel("").ReadOnly(true),
                                                    X.TextField().ID("tfNomMedCardiologo").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoCardiologo();")
                                                    )
                      ),
                      
                      
                        X.FormPanel()
                      .ID("Panel6")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false),
                      X.FieldSet()
                      .ColumnWidth(0.4).Collapsible(true)
                     .Title("<b>Datos</b>")
                     .MarginSpec("05 05 05 00")
                     .DefaultAnchor("100%")
                      .Items(
                           X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                           .Items(
                           X.Component().Width(60),
                           X.TextFieldFor(c => c.Ayuno)
                           .Width(200)
                           .FieldLabel("Ayuno")
                           .LabelWidth(50)
                           .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; }),
                              X.Component().Width(4),
                            X.Label().Html("<b>Hrs.</b>"),
                           X.Component().Width(20),
                           X.RadioGroupFor(c => c.EstomagoLleno, new List<Radio.Config> {
                           new Radio.Config{BoxLabel = "Si" , Checked= (Model.EstomagoLleno=="S"?true:false), InputValue = "S", ReadOnly =indicaModoLectura, Width = 100, Handler="eventoRadio(this,'TipoAnamnesis','D');"}, //
                           new Radio.Config{BoxLabel = "No" , Checked= (Model.EstomagoLleno=="N"?true:false), InputValue = "N", ReadOnly =indicaModoLectura, Width = 100, Handler="eventoRadio(this,'TipoAnamnesis','I');"}//
                           }).FieldLabel("Estomago lleno").LabelWidth(130).ID("IdRadioEstomagoLleno")
                                            
                           ) 
                      ),
                                 
                        X.HiddenFor(m => m.Accion),
                        X.DateFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                //  X.TextFieldFor(m => m.Estado).Hidden(true),
                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)

                     )

                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                                 X.Button()
                            .Text("Imprimir")
                            .Icon(Icon.Report)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresion")
                            .Handler("eventoVisorReporte('');"),

                            X.Button()
                            .Text("Imprimir Todos")
                            .Icon(Icon.ReportGo)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresionHC")
                            .Handler("eventoVisorReporte('HC');"),

                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                
                                 .ID("cmdGuardar").Hidden(indicaModoLectura)
                             .Handler("EnviarData(this.up('grid'));"),
                                
                                
                                
                                //.ID("cmdGuardar").Hidden(indicaModoLectura)
                                //.DirectEvents(de =>
                                //{  //Model.ACCION : Posee el MODO ACTUAL
                                //    de.Click.Url = Url.Action("CCEPF323_2_Save_FichaAnestesia");
                                //    de.Click.EventMask.ShowMask = true;
                                //    //de.Click.Before = "return EnviarData('grid');";
                                //    de.Click.Before = "" +
                                //            "beforeSave(App.formactual); return App.formactual.getForm().isValid();";

                                //    de.Click.Success = "onSuccess(result.data);";
                                //    de.Click.Failure = "onFailure();";
                                //}),
                                
                                

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                       // .Listeners(l => l.FieldChange
                         //   .Handler = "setIndicaCambios(true);"
                       // )
                );
        }
        )


)

}

