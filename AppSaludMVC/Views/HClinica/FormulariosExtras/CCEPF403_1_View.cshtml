@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Kardex1_FE

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();


    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;

    var Paciente = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PacienteID;
    long EpiAtencion = (long)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioAtencion;
    int EpiClinico = (int)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioClinico;
    int total = Convert.ToInt32(Session["CANTIDAD"]);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);


    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                        (Model.Accion == "UPDATE" ? true :
                        (Model.Accion == "DELETE" ? false :
                        (Model.Accion == "VISTA" ? false : false))));
    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);


    var COLOR_RED02 = "#F05F5F";
    var COLOR_GRAY = "gray";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";
    var COLOR_BLANCO = "#FFFFFF";
    var COLOR_RED01 = "#990000";
    var COLOR_ORANGE01 = "#E07509";
    var DESC_ADD = "Proc. Médicos SEGUS";
    var DESC_ADDCPT = "Proc. Médicos CPT";
    var DESC_ADD3 = "Apoyo al diagnóstico";
    var DESC_ADD1 = "Diagnóstico de ingreso";

    var PARTICULAR = 3;
    var CPM = 6;
    var PDS = 19;
    var PPS = 5;



}

@{
    MvcResourceManager.RegisterGlobalIcon(Icon.Accept);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyEuro);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyAdd);
}

@section cabecera
{

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>
        var myRenderer1 = function (value, metadata) {
            metadata.style = "background-color: green;";

            return value;
        };

        var myRenderer2 = function (value, metadata) {
            metadata.style = "background-color: yellow;";

            return value;
        };

        @*function seleccionadorMedico() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorPersona","HClinica"))',
                params: {
                    accionSeleccion: 'getSeleccionPersonaMaestroMedico',
                    accionListado: 'LISTARPAGSELECUSER'
                }
            });
        };*@

        function seleccionadorMedico() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoDos',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };

        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        };

        var keyCode
        function ReplaceCaracterEspec(e) {
            /*Capturar tecla pulsada*/
            if (window.event) keyCode = window.event.keyCode;
            else if (e) keyCode = e.which;
            var prueba = keyCode;
            // alert(keyCode);
            //
            if (prueba == 60) {
                var textactual = e.getValue();
                e.value = e.setValue(textactual + " ");
            }
            var texto = e.getValue();
            var vacio = "";
            var cadena = vacio + e.getValue();
            var recortado = cadena.substr(-1, 1);
            // alert(recortado + ' antes');
            if (recortado == "<" || recortado == ">") {
                //  alert(recortado + ' despues');
                e.value = e.setValue(texto + " ");
            }

        };
    </script>
    <script>
    var GlobalSelect = false;

    var grupoAnterior = 0;
    var ContadorColumnas = 0;
    var ContadorColumnas2 = 0;
    var ocultarCheck = false;

    var Valores;
    var template = '<span style="color:{0};">{1}</span>';

    var SecuenciaMax = '@total';

    var seleccRecordActual = null;

    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;

    }

    /*   function eventoRenderForm() {

           var kk = 120;
           var scrH = screen.height;
           var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
           var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

           if (southH == 0) {
               southH = 30;
           } else if (parent.App.PanelMainSouth.collapsed) {
               southH = 30;
           }
           var dimCentral = (scrH - (northH + southH) - kk);
           App.formactual.setHeight(dimCentral);
       }*/


    function eventoRenderForm() {
        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);

        var v = '@isNuevo';
        if (v == 'True') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }

    }


    function deleteActual(record) {
        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            //var par1 = seleccRecordActual.data.ValorCodigo2;
            var par1 = seleccRecordActual.data.ValorCodigo2;
            var par2 = seleccRecordActual.data.CodigoElemento;
            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF150_addEliminar_Examen"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2,
                    accion: seleccRecordActual.data.ACCION
                }
            });

            tempEliminar = true;
            seleccRecordActual = null;
            //setFocus(false);
        }

    };

    var ALTURADEF = screen.height;
        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

    var Valores;


    var changeGrupo = function (value) {
        var template = '<span>{0}</span>';
        if (value == 0 || value == null || value == "") {
            return Ext.String.format(template, "Individual");
        } else {
            return Ext.String.format(template, value);
        }
    };/**/



    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "ProgramarKardex") ';
    }


    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "ProgramarKardex") ';
    }



    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    //var onSuccess = function (grid, data) {
    //    grid.show();
    //    grid.getStore().loadData(data);
    //};



    function deleteSelected(grid) {
        var store = grid.store,
            records = grid.selModel.getSelection();

        store.remove(records);
        store.load(true);
    }





    var varTipoBuscar = "LOAD";

    var accionBuscarFiltro = function (tipo, fechaActual) {
        if (App.txtFecha1.getValue() == null) {
            App.txtFecha1.setValue(fechaActual);
        }
        if (App.txtFecha2.getValue() == null) {
            App.txtFecha2.setValue(fechaActual);
        }
        varTipoBuscar = tipo;
        App.GrillaVisorRecetas.getStore().reload();
        varTipoBuscar = 'LOAD';

    };
    function ConfirmaFinaliza() {
        Ext.Msg.confirm("Ventana de Confirmación", "¿Está seguro de finalizar Episodio Clínico?", function (btn) {
            if (btn === "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("EstadoClinico"))',
                    params: {
                        selection: "",
                        accion: "Finalizar"
                    }
                    , success: function (result) { App.GrillaVisorRecetas.getStore().reload(); }
                });
            }
        })

    }
    function showResult() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Finalizar"
            }
        });
    }


    function getFormatDate(fecha, parent) {
        var fechaForm = null;
        if (fecha != null) {
            var diaFec = fecha.getDate();
            var mmFec = fecha.getMonth() + 1;
            var yyyyFec = fecha.getFullYear();
            var diaForm = '' + diaFec;
            var mmForm = '' + mmFec;
            var yyyyForm = '' + yyyyFec;
            if (diaFec < 10) {
                diaForm = '0' + diaFec;
            }
            if (mmFec < 10) {
                mmForm = '0' + mmFec;
            }
            fechaForm = diaForm + '/' + mmForm + '/' + yyyyForm;
        }
        return fechaForm;
    };
    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };



    function mostrarAlarmaReglas(data) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }


    function chkFechasActosFiltros(fechaActual) {
        var checkAll = App.chFechas.getValue();
        if (checkAll) {
            App.txtFecha1.setDisabled(true);
            App.txtFecha1.setValue(null);
            App.txtFecha2.setDisabled(true);
            App.txtFecha2.setValue(null);
        } else {
            App.txtFecha1.setValue(fechaActual);
            App.txtFecha2.setValue(fechaActual);
            App.txtFecha1.setDisabled(false);
            App.txtFecha2.setDisabled(false);
        }
    }

    function InsertRow(valor, estado) {
        var grid = Ext.getCmp("GrillaVisorRecetas");
        if (valor.getValue() != '') {
            SecuenciaMax = parseInt(SecuenciaMax) + 1;
            var obj = JSON.parse(valor.getValue());
            var DescripcionLocalVar = obj.DescripcionLocal;
            var episodio = obj.ValorCodigo5;
            var linea = obj.ValorCodigo1;
            var familia = obj.ValorCodigo2;
            var subfamilia = obj.ValorCodigo3;
            var codigo = obj.CodigoElemento;


            setIndicaCambios(true);
            grid.store.insert(0, {


                /* IdEpisodioAtencion: episodio,*/
                FechaCreacion: new Date(),
                GrupoMedicamento: 99,
                IdPaciente: '@Paciente',
                EpisodioClinico: '@EpiClinico',
                IdEpisodioAtencion: '@EpiAtencion',
                Secuencia: SecuenciaMax,
                Linea: linea,
                Familia: familia,
                SubFamilia: subfamilia,
                TipoComponente: 'M',
                CodigoComponente: codigo,

                Medicamento: DescripcionLocalVar,
                Cantidad: 0,
                Estado: 2/*,
                ACCION: ''*/

            });
            valor.setValue('');
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        }

    }

    function validaDuplicado(valor) {
        var estados = false;
        App.storeExamenes.each(function (r) {
            if (trim(r.get('Medicamento')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }




    /* }*/

    @*function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "ProgramarKardex")';
        } else {
            window.location.href = '@Url.Action("HCEReportesViewReceta", "ProgramarKardex")';
        }
    }*@
    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }

    function setImpresion(store) {
        App.btnImpresion.setVisible(false);
        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0) {

            App.btnImpresion.setVisible(true);
        }
    }

    function deleteActual(grid, record) {
        seleccRecordActual = record;

        if (record != null) {


            if (record.data.TipoComponente == "M") {
                setIndicaCambios(true);
                var store = Ext.getStore('StoreTasks');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Delete_SolicitudDetalle"))',
                    params: {
                        accion: 'DELETE',
                        codigo: record.data.CodigoComponente,
                        secuencia: record.data.Secuencia
                    }
                });
                store.remove(record);
                record = null;

            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'No se puede eliminar los medicamentos recetados por el médico',
                        tipo: 'WARNING'
                    }
                });
                record = null;
            }

        }
    };


    function ObtenerHoras(ev) {
        App.StoreTasks.each(function (r) {
            var horainicio = '--:--';
            if (r.get('Medico') != null & r.get('Medico') != '') {
                var cadena = (r.get('Medico')).split(',');

                /* if (cadena.length>0){*/
                /*var ultimo = '';
                var ultimoentero = 0;*/
                /* var horainicio = '--:--';*/
                var numInicio = '';
                /* if (cadena.length > 0) {
                     if (cadena[0].length < 2) {

                         r.set('HI', horainicio);
                     }
                     else {
                         horainicio = cadena[0] + ':00';
                         r.set('HI', horainicio);
                     }
                 };*/
                /* else { r.set('HI', horainicio); }*/


                for (var x = 0, longitud = cadena.length ; x < longitud; x++) {
                    var numero = '';

                    if (cadena[x].length < 2) {
                        numero = '0' + cadena[x];
                    }
                    else { numero = cadena[x]; }

                    r.set(numero, true);
                    /* ultimo = numero;
                     ultimoentero = x;
                      }*/

                };

                if (r.get('Estado') == 4) {
                    r.set('CT', true);

                }

                /* if (ultimo != '')
                 {
                     var num = parseInt(ultimo)+1;
                     var i=0;
                     for (i = 1; i < num; i++)
                     {
                         var numero2 = '';

                         if (i < 10) {
                             numero2 = '0' + i;
                         }
                         else { numero2 = i.toString(); }

                         r.get(numero2).setReadOnly(true);

                     }
                 }*/

                /* else {
                     for (i = 1; i <= 24; i++) {
                         var Xnumero = '';
                         if (i < 10) {
                             Xnumero = '0' + i;
                         }

                         else { Xnumero = i; }
                         var numeroX = Xnumero.toString();
                         /* alert(r.get('19'));*/
                /*  r.set(Xnumero) = false

              }

          }*/

            }
            else {
                /* alert(':-(');*/
                /* r.set('Medico', null);*/
                /*  if (r.get('Estado') == 4) {
                      ev.setReadOnly(true);
                  }*/


                r.set('HI', horainicio);
                var template = '<span style="text-align: center;"></span>';
                return Ext.String.format(template);



                /*   if (r.get('Estado') == 4) {



                           for (var x = 0, longitud = 24; x < longitud; x++) {
                               ev.setReadOnly(true);
                           };

                       r.set('CT', true);

                   }*/



                /*for (i = 1; i <= 24; i++) {
                    var Xnumero = '';
                    if (i < 10) {
                        Xnumero = '0' + i;
                    }

                    else { Xnumero = i; }
                    var numeroX = Xnumero.toString();
                    /* alert(r.get('19'));*/
                /* r.set(Xnumero)= false

             }*/

            }


        });
        /* r.set('Medico', r.get('Medico'));*/
    };

    var changeIndicaHoraCheck = function (value) {

        var deshabilitadoCode = "readonly = 'true'";
        /* var template = '<span><input type="checkbox" name="cheAcceso" value="2" {1} ' +
                          deshabilitadoCode + '  ></span>';
         */
        var template = '<span style="text-align: center;"><input type="checkbox" name="cheAcceso"   style="margin-left: 0px;" value="2" {1}></span>';

        if (value == '2') {
            return Ext.String.format(template, "'" + "" + "'", 'checked = "true" ');
        }
        if (value == '1') {
            return Ext.String.format(template, "'" + "" + "'", '');
        }
        return Ext.String.format(template, "'" + "" + "'", '');
    };


    function BackDate(value) {
        var fecha2 = App.txtFecha1.getValue();
        var tiempo = fecha2.getTime();
        var fecha = new Date(tiempo - (1 * 24 * 60 * 60 * 1000));
        var dia = fecha.getDate();
        if (dia.toString().length < 2) { dia = '0' + dia.toString(); }

        var mes = fecha.getMonth() + 1;
        if (mes.toString().length < 2) { mes = '0' + mes.toString(); }

        var year = fecha.getFullYear();
        var fechanew = dia + '/' + mes + '/' + year;

        App.txtFecha1.setValue(fechanew);
        App.GrillaVisorRecetas.getStore().reload();

    };

    function NextDate(value) {
        var fecha2 = App.txtFecha1.getValue();
        var tiempo = fecha2.getTime();
        var fecha = new Date(tiempo + (1 * 24 * 60 * 60 * 1000));
        var dia = fecha.getDate();
        if (dia.toString().length < 2) { dia = '0' + dia.toString(); }

        var mes = fecha.getMonth() + 1;
        if (mes.toString().length < 2) { mes = '0' + mes.toString(); }

        var year = fecha.getFullYear();
        var fechanew = dia + '/' + mes + '/' + year;

        App.txtFecha1.setValue(fechanew);
        App.GrillaVisorRecetas.getStore().reload();
    };


    /*function changeGrupo(ev) {
        var template = '<span>{0}</span>';
        var templateX = '<span style="Visibility:hidden;">{0}</span>';

        if (ev.record.data.Celular == 'Ocultar') {
            return Ext.String.format(templateX, value);
        }

        if (ev.record.data.GrupoMedicamento == 0 || ev.record.data.GrupoMedicamento == null || ev.record.data.GrupoMedicamento == "") {
            return Ext.String.format(template, "Individual");
        } else {
            return Ext.String.format(template, value);
        }
    };*/
    function Editable(ev, numero2) {

        if (ev.record.data.Celular == 'Ocultar') {
            ev.hide();
        }


        if (ev.record.data.Medico != null) {

            var cadena = (ev.record.data.Medico).split(',');

            /* if (cadena.length>0){*/
            var ultimo = '';
            var ultimoentero = cadena[cadena.length];

            for (var x = 0, longitud = cadena.length ; x < longitud; x++) {
                var numero = '';

                if (cadena[x].length < 2) {
                    numero = '0' + cadena[x];
                }
                else { numero = cadena[x]; }

                if (parseInt(numero2) <= parseInt(cadena[x])) {
                    ev.setReadOnly(true);
                }
                /* }*/
                if (ev.record.data.Estado == 4 || ev.record.data.Estado == 3) {
                    /* for (var x = 0, longitud = 24; x < longitud; x++) {*/
                    ev.setReadOnly(true);

                    /* };*/
                }

            };
        }
        /*  if (ev.record.data.Estado == 4) {
              for (var x = 0, longitud = 24; x < longitud; x++) {
                  ev.setReadOnly(true);

              };
          }*/
        if (ev.record.data.Estado == 4) {
            ev.setReadOnly(true);
        }

    };

    function EditableAll(ev) {
        if (ev.record.data.Celular == 'Ocultar') {
            ev.hide();
        }
        if (ev.record.data.Estado == 4 || ev.record.data.Estado == 3) {
            for (var x = 0, longitud = 24; x < longitud; x++) {
                ev.setReadOnly(true);
            };
        }

    }
    function validarDeseleccion(param1, index) { }

    var changeEst = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_YELLOW02, "No Iniciado");
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Programado");
        if (value == 3)
            return Ext.String.format(template, COLOR_GREEN01, "Realizado");
        if (value == 4)
            return Ext.String.format(template, COLOR_RED01, "Cortado");
    };


    var tempEliminar = false;


    var numerogrupo = 0;
    var grillaActiva = null;/*"grillaExamenes0";*/

    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };

    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';

        if (value == 0)
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "");
        if (value == 1) {
            App.Administrado.setValue(1);
            //document.Administrado.value = 1;
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
        }
        if (value == 2)
            return Ext.String.format(templateX, '@(COLOR_BLANCO)', "");

    };

    var changeModalidadCortado = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';

        if (value == 1)
            return Ext.String.format(templateX, '@(COLOR_BLANCO)', "");
        if (value == 0)
            return Ext.String.format(templateX, '@(COLOR_BLANCO)', "");
        if (value == 2)
            return Ext.String.format(templateX, '@(COLOR_RED01)', "");

    };
        function eventoCancelar(form) {
            App.bar.setDisabled(true);
            var reload = true;
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
                // beforeSave(form);
            }
        }

        function EnviarDataServer(grid, data) {
       console.log(1)
        var ArrayList0 = new Array();
        var ArrayList1 = new Array();
        var ArrayList2 = new Array();
        var Insertar = 0;
        var Ayuno = App.IdRadio1.getValue().Ayuno;
        var SS_HC_Medicamento_Kardex;
        //alert(App.Administrado.value);
        //if (App.Administrado.value == 1) {
        if (false) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'No puede modificar una programación que se encuentra en administración',
                    tipo: 'ERROR'
                }
            });
        }
        else {


            var reload = false;
            beforeSave(App.formactual);
            if (true) {

                var HC_SS_Kardex1_FE = {
                    IdMedico: App.IdPersonalSalud.getValue(),
                    NombreMedico: App.tfNomMed.getValue(),
                    CMP: App.tfNroMed.getValue(),
                    Religion: App.Religion.getValue(),
                    Ayuno: Ayuno,

                    Version: "CCEPF403_1"
                };


                if (HC_SS_Kardex1_FE.IdMedico == null || HC_SS_Kardex1_FE.NombreMedico == null) {
                    //alert("Seleccione Medico tratante" );
                    //Insertar = 1;
                }

                else if (HC_SS_Kardex1_FE.Religion == null || HC_SS_Kardex1_FE.Religion == "") {
                    //alert("Ingrese Religión");
                    //Insertar = 1;
                }

                else if (HC_SS_Kardex1_FE.Ayuno == null) {
                    //alert("Seleccione Ayuno " );
                    //Insertar = 1;
                }

                else {
                    if (HC_SS_Kardex1_FE.CMP == null || HC_SS_Kardex1_FE.CMP.trim() == "" || HC_SS_Kardex1_FE.CMP == "null") { HC_SS_Kardex1_FE.CMP = 0; }


                }
                ArrayList0.push(HC_SS_Kardex1_FE);


                //var store1 = 'storeMedicacion';
                var grid1 = Ext.getCmp('grillaMedicacion');
                var store = grid1.store;


                console.log(2)


                grid1.store.each(function (r) {

                    var SS_HC_Medicamento_FE = {
                        Secuencia: r.get('Secuencia'),
                        Medicacion: r.get('MedicamentoDescripcion'),
                        DiasTratamiento: r.get('DiasTratamiento'),
                        Descripcion: r.get('Descripcion'),
                        Dosis: r.get('Dosis'),
                        HoraInicio: r.get('HoraInicio'),
                        HoraAdministracion: r.get('HoraAdministracion'),
                        MedicamentoDescripcion: r.get('MedicamentoDescripcion'),
                        CodigoComponente: r.get('CodigoComponente'),
                        Frecuencia: r.get('Frecuencia'),
                        IdVia: r.get('IdVia'),
                        Cantidad: r.get('Cantidad'),
                        TipoComida: r.get('TipoComida'),
                        VolumenDia: r.get('VolumenDia'),
                        FrecuenciaToma: r.get('FrecuenciaToma'),
                        Periodo: r.get('Periodo'),
                        UnidadTiempo: r.get('UnidadTiempo'),
                        IndicadorAuditoria: r.get('IndicadorAuditoria'),
                        UsuarioAuditoria: r.get('UsuarioAuditoria'),
                        Accion: r.get('Accion'),
                        Version: "CCEP0403_1",
                        SecuencialHCE: r.get('SecuencialHCE')

                    };
                    console.log(3)

                    if (SS_HC_Medicamento_FE.HoraInicio == null || SS_HC_Medicamento_FE.HoraInicio == "") {
                        //alert("Seleccione Hora de Inicio del medicamento: " + SS_HC_Medicamento_FE.MedicamentoDescripcion);
                        //Insertar = 1;
                    }
                    else if (SS_HC_Medicamento_FE.HoraAdministracion == null || SS_HC_Medicamento_FE.HoraAdministracion == "") {
                        //alert("Seleccione Hora de Adminsitración del medicamento: " + SS_HC_Medicamento_FE.MedicamentoDescripcion);
                        //Insertar = 1;
                    }

                    else {
                        //ArrayList2.push(SS_HC_Medicamento_FE);
                    }
                    ArrayList2.push(SS_HC_Medicamento_FE);

                });

                console.log(4)
                if (ArrayList2.length <= 0) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'No hay medicamentos registrados',
                            tipo: 'WARNING'

                        }
                    });
                    //App.cmdGuardar.setDisabled(true);
                    return;
                }

                console.log(5)
                
                if (Insertar == 0 && data == 'save') {
                    App.formactual.setDisabled(true);

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEP0403_1_InsertarMedicacion_Kardex"))',
                        params: {
                            Array1: ArrayList0,
                            Array0: ArrayList2,
                            tipo: 'CCEP0403_1'
                        }
                    ,
                        success: function (result) {
                            reload = true;
                        }
                    ,
                        failure: function (result) {
                            reload = false;
                        }
                    });
                    parent.App.txtRecargarX.setValue('RELOAD');
                }


                grid1.store.each(function (r) {

                    SS_HC_Medicamento_Kardex = {
                        Secuencia: r.get('Secuencia'),
                        Medicacion: r.get('MedicamentoDescripcion'),
                        DiasTratamiento: r.get('DiasTratamiento'),
                        // Medicacion: r.get('Descripcion'),
                        Medicacion: r.get('UsuarioAuditoria'),
                        UsuarioCreacion: r.get('SecuencialHCE'),
                        Dosis: r.get('Dosis'),
                        HoraInicio: r.get('HoraInicio'),
                        HoraAdministracion: r.get('HoraAdministracion'),
                        MedicamentoDescripcion: r.get('MedicamentoDescripcion'),
                        CodigoComponente: r.get('CodigoComponente'),
                        Frecuencia: r.get('Frecuencia'),
                        Hora0: r.get('Cantidad'),
                        Accion: r.get('Accion'),
                        Version: "CCEP0403_1",
                        Hora1: "2",
                        Hora2: "2",
                        Hora3: "2",
                        Hora4: "2",
                        Hora5: "2",
                        Hora6: "2",
                        Hora7: "2",
                        Hora8: "2",
                        Hora9: "2",
                        Hora10: "2",
                        Hora11: "2",
                        Hora12: "2",
                        Hora13: "2",
                        Hora14: "2",
                        Hora15: "2",
                        Hora16: "2",
                        Hora17: "2",
                        Hora18: "2",
                        Hora19: "2",
                        Hora20: "2",
                        Hora21: "2",
                        Hora22: "2",
                        Hora23: "2"


                    };


                    if (SS_HC_Medicamento_Kardex.HoraInicio == null || SS_HC_Medicamento_Kardex.HoraInicio == "") {

                        Insertar = 1;

                        //App.cmdGuardar.setDisabled(true);

                        //alert("Seleccione Hora de Inicio del medicamento: " + SS_HC_Medicamento_Kardex.MedicamentoDescripcion);
                        //Insertar = 1;
                    }
                    else if (SS_HC_Medicamento_Kardex.HoraAdministracion == null || SS_HC_Medicamento_Kardex.HoraAdministracion == "") {
                        //alert("Seleccione Hora de Adminsitración del medicamento: " + SS_HC_Medicamento_Kardex.MedicamentoDescripcion);
                        //Insertar = 1;
                    }

                    else {

                    }

                    ArrayList1.push(SS_HC_Medicamento_Kardex);

                });
                if (Insertar == 0 && data == 'pro') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("CCEP0403_1_InsertarProgramacion_Kardex"))',
                        params: {
                            Array0: ArrayList1,
                            tipo: 'CCEP0403_1'
                        }
                        ,
                        success: function (result) {
                            App.storeMedicacion1.reload();
                            reload = true;
                        }
            ,
                        failure: function (result) {
                            App.storeMedicacion1.reload();
                            reload = false;
                        }



                    });
                   
                } else if (Insertar == 1 && data == 'pro') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Debe Asignar Una hora de Inicio',
                            tipo: 'WARNING'

                        }
                    });
                    App.formactual.setDisabled(false);
                    return;
                }



            }
        }
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    </script>
}
@section cuerpo
{


    @(Html.X().Viewport().ID("ViewP")
                .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            /* l.Render.Handler = "eventoRenderForm2();";*/
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {

            regions
                .Add(
                Html.X().FormPanel().AutoScroll(true)
                 .TopBar(

                    X.Toolbar()
                        .Height(30)
                            .Items(
                                    X.TextField().Hidden(true)
                                     .ID("txtEventoUnidServicioNuevoEpiHCE")
                                     .Listeners(l =>
                                     {
                                         /* l.Change.Handler = "eventoSeleccionUnidadServicio(this);";*/

                                     })
                                     ,
                                      Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                /* X.Button()
                    .Text("Buscar Pacientes")
                    .Icon(Icon.PageWhiteFind)
                    .Handler("accionBuscarFiltro('FILTRO',new Date());")
                    ,*/
                                X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                                X.Button()
                                .ID("cmdGuardar").Disabled(false)
                                .Text("Guardar").Hidden(false)
                                .Icon(Icon.PageSave)
                                .Handler("EnviarDataServer(this.up('grid'),'save');")
                //,
                //X.Button()
                //.ID("btnImprimiraaa").Hidden(true)
                // .Text("Imprimir")/*.Hidden(!visibleImpresion)*/
                //.Icon(Icon.Report).Handler("eventoVisorReporte('');")
                                , X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));")

                              )
                              )

                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(500)

                .Header(false)
                .Border(true)
                .ID("formactual")
                /* .Listeners(l =>
                 {
                     l.Render.Handler = "eventoRenderForm();";

                 })*/
               .Items(Html.X().FormPanel()
                    .ItemID("north").AutoScroll(true)
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(

                       ),


                                    X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4).PaddingSpec("2")
                            .Title("")
                            .MarginSpec("0 05 0 05")

                            .Items(

                            X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                     .Defaults(d => { d.Add(new Parameter("LabelWidth", "100")); })
                                                    .Items(

                                                    //X.NumberFieldFor(m => m.Estado).FieldLabel("Cirujano").Width(170).ReadOnly(true),
                //X.TextFieldFor(m => m.Estado).ID("tfDescMed").Width(200).FieldLabel("").ReadOnly(true),
                //X.Button().ID("btnMed").Text("...").Handler("seleccionadorMedico();"),
                                                  X.NumberFieldFor(m => m.IdMedico).ID("IdPersonalSalud").FieldLabel("Medico Tratante").Width(170).ReadOnly(true)
                                                 // .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })
                                                  ,

                                            X.TextFieldFor(m => m.NombreMedico).ID("tfNomMed").FieldLabel("").Width(170).ReadOnly(true),

                                            X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedico();"),
                                            X.TextFieldFor(m => m.CMP).ID("tfNroMed").Width(200).FieldLabel("C.M.P").ReadOnly(true).Hidden(true).PaddingSpec("2"),

                                                    X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 05 10")
                                                            .Defaults(d => { d.Add(new Parameter("LabelWidth", "100")); })
                                                            .Items(
                                                                    X.TextFieldFor(m => m.Religion).ID("Religion").FieldLabel("Religión").Width(200).ReadOnly(indicaModoLectura).MaxLength(25)
                                                                    .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })
                                                                )

                                                        ),
                                                        X.TextField().ID("Administrado").Width(170).ReadOnly(false).Hidden(true),
                                        X.GridPanel()
                                        .ID("grillaDiagnostico")
                                        .Border(true)

                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeDiagnostico")
                                                    .Model(
                                                    Html.X().Model()
                //.IDProperty("CodigoElemento")
                                                        .Fields(

                                                            new ModelField("Secuencia"),
                                                            new ModelField("DiagnosticoDescripcion", ModelFieldType.String),
                                                            new ModelField("Codigo", ModelFieldType.String),
                                                            new ModelField("Accion", ModelFieldType.String)

                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF403_1_DIAGPRINCIPAL")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("Secuencia")))))

                                        )
                                        .ColumnModel(
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("DIAGNÓSTICO")
                                                                  .DataIndex("Codigo")
                                                                  .Hidden(true)
                //.Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(true)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 ),
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("Diagnóstico")
                                                                  .Hidden(false)
                                                                  .DataIndex("DiagnosticoDescripcion")
                                                                  .Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(true)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 )

                                        ).TopBar(
                                          Html.X().Toolbar()
                                                             .Items(
                                                                Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Diagnóstico de Ingreso</font></b>")
                                                                    ))

                                                                    , X.Component().Height(10)



                                                )
                                                        ,
                 X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4).PaddingSpec("2")
                            .Title("403.1 Dieta")
                            .MarginSpec("0 05 0 05")

                            .Items(

                           X.RadioGroupFor(m => m.Ayuno, new List<Radio.Config> {
                                            new Radio.Config{BoxLabel = "Si", InputValue = "1", Width=50  },
                                            new Radio.Config{BoxLabel = "No", InputValue = "2", Width=50  }

                                        }).FieldLabel("Ayuno")
                                        .ID("IdRadio1").Width(100).Disable(indicaModoLectura)
                                        .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })
                                        ,


                              X.GridPanel()
                                        .ID("grillaDieta")
                                        .Border(true)

                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeDieta")
                                                    .Model(
                                                    Html.X().Model()
                                                    .IDProperty("Secuencia")
                                                        .Fields(

                                                                           new ModelField("Secuencia", ModelFieldType.String),
                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Dosis", ModelFieldType.String),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("Comentario", ModelFieldType.String),
                                                                           new ModelField("VolumenDia", ModelFieldType.String),
                                                                           new ModelField("FrecuenciaToma", ModelFieldType.String),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Hora", ModelFieldType.Date),
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IdPadreNutriente", ModelFieldType.Int),
                                                                           new ModelField("IdHijoNutriente", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String)

                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF100_MED_MICRONUTRIENTES_KARDEX")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("Secuencia")))))
                                                                                     .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 2 //Micro
                                                                })
                                                                )

                                        )
                                        .ColumnModel(
                                        Html.X().ComponentColumn().Editor(true)
                                                                  .Text("Nro")
                                                                  .DataIndex("Secuencia")
                                                                  .Hidden(true)
                //.Flex(1)
                                                                  .Component(
                                                                    Html.X().TextField()
                                                                        .ReadOnly(true)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                 ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Vía")
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(true)
                                                                        .ID("cbIdVia")
                                                                        .Editable(false)
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("VIADIETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .SimpleSubmit(true)
                                                                      //  .Listeners(l => l.Select.Handler = "setIndicaCambios(true);")
                                                             ),
                                          Html.X().ComponentColumn()
                                                         .Editor(true).ID("CombosPadres")
                                                         .DataIndex("IdPadreNutriente").Hidden(true)
                                                         .Text("Dieta")
                                                         .Flex(1)
                                                        .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                                        .ID("cbIdDieta")

                                                             )
                                                             ,
                                                              Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Dieta")
                                                         .Flex(1)
                                                        .Component(
                                                             Html.X().TextField().ReadOnly(true)


                                                             ),
                                                     Html.X().ComponentColumn()
                                                     .Editor(true).Editor(true)
                                                     .DataIndex("IdHijoNutriente").Hidden(true)
                                                     .Text("Tipo de Dieta")
                                                     .Component(
                                                           Html.X().TextField().ReadOnly(true)
                                                   )
                                                 , Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Tipo de Dieta")
                                                         .Flex(1)
                                                        .Component(
                                                             Html.X().TextField().ReadOnly(true)


                                                             )
                                                      , Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("VolumenDia")
                                                         .Text("Volumen al día")
                                                         .Width(100)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("FrecuenciaToma")
                                                         .Text("Frec. de tomas")
                                                          .Width(100)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Hora")
                                                         .Text("Hora inicio")
                                                         .Width(70)
                                                         .Component(
                                                         Html.X().TimeField()
                                                             .Format("HH:mm")
                                                            .ReadOnly(true)
                                                             ),
                                                              Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Comentario")
                                                         .Text("Indicaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true)

                                                                ),
                                                    Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoMedicamento")
                                                         .Text("Tipo")
                                                         .Width(70)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             )


                                        ).TopBar(
                                          Html.X().Toolbar()
                                                             .Items(
                                                                Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - Dietas</font></b>")
                                                                    )),
                                     X.Component().Height(15),
                              X.GridPanel()
                                        .ID("grillaComplemento")
                                        .Border(true)

                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeComplemento")
                                                    .Model(
                                                    Html.X().Model()
                                                .IDProperty("Secuencia")
                                                        .Fields(

                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Dosis", ModelFieldType.String),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),
                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),
                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("Comentario", ModelFieldType.String),
                                                                           new ModelField("VolumenDia", ModelFieldType.String),
                                                                           new ModelField("FrecuenciaToma", ModelFieldType.String),
                                                                           new ModelField("Presentacion", ModelFieldType.String),
                                                                           new ModelField("Hora", ModelFieldType.String),
                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)

                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    //.Url("CCEPF100_MEDNUT_KARDEX")
                                                                    .Url("CCEPF100_MED_MICRONUTRIENTES_KARDEX")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("Secuencia")))))
                                                           .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 3 //Micro
                                                                })
                                                                )
                                        )
                                        .ColumnModel(
                                             Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Secuencia").Hidden(true)
                                                         .Text("Nro")
                                                          .Width(30)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                    .ReadOnly(true)
                                                             ),
                                              Html.X().ComponentColumn()
                                                     .Editor(true)
                                                     .DataIndex("IdVia")
                                                     .Text("Vía")
                                                     .Width(110)
                                                     .Component(
                                                         Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                    .ID("cbIdVia2")
                                                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("VIADIETA").Select(d => new ListItem(d.Name, d.ID)))
                                                                    .SimpleSubmit(true)
                                                                    .Editable(false)

                                                         ), Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("Micronutriente")
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(50)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ), Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentación")

                                                         .Width(110)
                                                          .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)/*.ReadOnly(true)*/

                                                                     .EnableKeyEvents(true)



                                                             ), Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Width(50)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             .EnableKeyEvents(true)

                                                             ),

                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Comentario")
                                                         .Text("Indicaciones (cantidad x horas, etc.)")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                             .EnableKeyEvents(true)

                                                             ),
                                                    Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoMedicamento")
                                                         .Text("Tipo")
                                                         .Width(70)
                                                         .Component(
                                                             Html.X().NumberField()
                                                             //.Listeners(l => l.Focus.Handler = "setIndicaCambios(true);")
                                                             )


                                        ).TopBar(
                                          Html.X().Toolbar()
                                                             .Items(
                                                                Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Complemento de Dietas</font></b>")
                                                                    ))
                            , X.Component().Height(10)


                            ),
                             X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4).PaddingSpec("2")
                            .Title("Medicación")
                            .MarginSpec("0 05 0 05")

                            .Items(
                             X.GridPanel()
                                        .ID("grillaMedicacion")
                                        .Border(true)

                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeMedicacion")
                                                    .Model(
                                                    Html.X().Model()
                                                .IDProperty("Secuencia")
                                                        .Fields(

                                                                           new ModelField("Secuencia", ModelFieldType.String),
                                                                           new ModelField("IdUnidadMedida", ModelFieldType.Int),
                                                                           new ModelField("Presentacion", ModelFieldType.String),

                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("IdVia", ModelFieldType.Int),
                                                                           new ModelField("Cantidad", ModelFieldType.Float),

                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),
                                                                           new ModelField("Linea", ModelFieldType.String),

                                                                           new ModelField("Familia", ModelFieldType.String),
                                                                           new ModelField("SubFamilia", ModelFieldType.String),
                                                                           new ModelField("LineaDescripcion", ModelFieldType.String),

                                                                           new ModelField("FamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("SubFamiliaDescripcion", ModelFieldType.String),
                                                                           new ModelField("Estado", ModelFieldType.Int),

                                                                           new ModelField("TipoMedicamento", ModelFieldType.Int),
                                                                           new ModelField("CodigoComponente", ModelFieldType.String),
                                                                           new ModelField("TipoReceta", ModelFieldType.Int),

                                                                           new ModelField("Periodo", ModelFieldType.String),
                                                                           new ModelField("MedicamentoDescripcion", ModelFieldType.String),
                                                                           new ModelField("Medicamento", ModelFieldType.String),
                                                                           new ModelField("Descripcion", ModelFieldType.String),

                                                                           new ModelField("UnidadTiempo", ModelFieldType.Int),
                                                                           new ModelField("TipoComida", ModelFieldType.Int),
                                                                           new ModelField("Indicacion", ModelFieldType.String),

                                                                           new ModelField("UsuarioAuditoria", ModelFieldType.String),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("IndicadorEPS", ModelFieldType.Int),
                                                                           new ModelField("FechaModificacion", ModelFieldType.Date),
                                                                           new ModelField("FechaCreacion", ModelFieldType.Date),
                                                                           new ModelField("Hora", ModelFieldType.Date),
                                                                           new ModelField("Accion", ModelFieldType.String),
                                                                           new ModelField("SecuencialHCE", ModelFieldType.String),
                                                                           new ModelField("HoraInicio", ModelFieldType.Date),
                                                                           new ModelField("HoraAdministracion", ModelFieldType.Date)


                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEPF403_1_MEDICAMENTO_KARDEX")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("Secuencia")))))
                                                           .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0,
                                                                    tipo = 1
                                                                })
                                                                )
                                        ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                                             .ColumnModel(

                                                        Html.X().DateColumn().Text("Fecha")
                                                            .Width(55).DataIndex("FechaCreacion").Format("dd/MM/yyyy").Width(100),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("SubFamiliaDescripcion")
                                                         .Text("DCI").Hidden(true)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)
                                                                     .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),

                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("MedicamentoDescripcion").Hidden(true)
                                                         .Text("Medicamento").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),

                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("UsuarioAuditoria")
                                                         .Text("Medicación").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),

                                                             Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Descripcion")
                                                         .Text("Descripcion").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),
                                                                 Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Cantidad")
                                                         .Text("Cantidad").Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Presentacion")
                                                         .Text("Presentacion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("TipoComida")
                                                         .Text("TipoComida")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),

                                                      Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis")
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura)
                                                             ),

                                                      Html.X().ComponentColumn().DataIndex("IdUnidadMedida")
                                                                                .Editor(true)
                                                                                .Hidden(true)
                                                                                .Text("Und. Medida")
                                                                                .Component(
                                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),

                                                      Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),

                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("UnidadTiempo")
                                                         .Text("Und.Tiempo")
                                                         .Component(
                                                            Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),

                                                       Html.X().ComponentColumn()
                                                             .Editor(true).Hidden(true)
                                                             .DataIndex("Periodo")
                                                             .Text("Periodo")
                                                             .Component(
                                                                       Html.X().TextField().ReadOnly(indicaModoLectura)
                                                            ),

                                                       Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("IdVia")
                                                         .Text("Via")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                      Html.X().ComponentColumn().DataIndex("Cantidad")
                                                                                .Editor(true).Hidden(true)
                                                                                 .Text("Cantidad")
                                                                                 .Component(
                                                                                      Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                     ),

                                                    Html.X().ComponentColumn().DataIndex("DiasTratamiento")
                                                         .Editor(true).Hidden(true)
                                                         .Text("Dias")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Indicacion")
                                                         .Text("Indicaciones Especificas")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                             Html.X().ComponentColumn().Editor(true)
                                                             .Text("Hora de Administración")
                                                             .DataIndex("HoraInicio")
                                                             .Width(135)
                                                             .Component(
                                                                    X.TimeField().Format("H:mm").Width(70).Increment(60).AllowBlank(false)
                                                                   // .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })
                                                             ),

                                                              Html.X().ComponentColumn().Editor(true).Hidden(true)
                                                             .Text("Hora de Administración")
                                                             .DataIndex("HoraAdministracion")
                                                             .Width(135)
                                                             .Component(
                                                                    X.TimeField().Format("H:mm").Width(70).Increment(60).AllowBlank(false)
                                                                    .Listeners(l => { l.Change.Handler = "setIndicaCambios(true);"; })
                                                             ),



                                                        Html.X().CommandColumn().Hidden(true)
                                                        .Text("Acción")
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura).Hidden(true)

                                                        .Icon(Icon.Delete)

                                                        )


                                        ).TopBar(
                                          Html.X().Toolbar()
                                                             .Items(
                                                                Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Medicación</font></b>"),
                                                                 X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button()
                                                                .Text("Programar")
                                                                .Icon(Icon.Accept)
                                                                .ID("cmGuardar")
                                                                .Handler("EnviarDataServer(this.up('grid'),'pro');")
                //.DirectEvents(de =>
                //    {  //Model.ACCION : Posee el MODO ACTUAL
                //        //de.Click.Url = Url.Action("CCEPF460_2_Save_SeguridadCirugia");
                //        de.Click.EventMask.ShowMask = true;
                //        de.Click.Before = "" +
                //                "beforeSave(App.formactual); return App.formactual.getForm().isValid();";

                                                                //        de.Click.Success = "onSuccess(result.data);";
                //        de.Click.Failure = "onFailure();";
                //    })
                                                                    ))

                            , X.Component().Height(10)



                            ),


                            X.Component().Height(20),




                        Html.X().Panel()
               .ItemID("center")

               .Header(false)
               .Border(false)
               .Items(X.GridPanel()
                                        .ID("grillaMedicacion1")
                                        .Border(true)

                                        .Store(
                                            Html.X().Store()
                                                    .ID("storeMedicacion1")
                                                    .Model(
                                                    Html.X().Model()
                                                .IDProperty("Secuencia")
                                                        .Fields(

                                                                           new ModelField("Secuencia", ModelFieldType.String),
                                                                           new ModelField("IdMedicacion", ModelFieldType.Int),
                                                                           new ModelField("Medicacion", ModelFieldType.String),

                                                                           new ModelField("Dosis", ModelFieldType.Float),
                                                                           new ModelField("Frecuencia", ModelFieldType.Float),
                                                                           new ModelField("DiasTratamiento", ModelFieldType.Float),


                                                                           new ModelField("Hora0", ModelFieldType.Int),
                                                                           new ModelField("Hora1", ModelFieldType.Int),
                                                                           new ModelField("Hora2", ModelFieldType.Int),
                                                                           new ModelField("Hora3", ModelFieldType.Int),
                                                                           new ModelField("Hora4", ModelFieldType.Int),
                                                                           new ModelField("Hora5", ModelFieldType.Int),
                                                                           new ModelField("Hora6", ModelFieldType.Int),
                                                                           new ModelField("Hora7", ModelFieldType.Int),
                                                                           new ModelField("Hora8", ModelFieldType.Int),
                                                                           new ModelField("Hora9", ModelFieldType.Int),

                                                                           new ModelField("Hora10", ModelFieldType.Int),
                                                                           new ModelField("Hora11", ModelFieldType.Int),
                                                                           new ModelField("Hora12", ModelFieldType.Int),
                                                                           new ModelField("Hora13", ModelFieldType.Int),
                                                                           new ModelField("Hora14", ModelFieldType.Int),
                                                                           new ModelField("Hora15", ModelFieldType.Int),
                                                                           new ModelField("Hora16", ModelFieldType.Int),
                                                                           new ModelField("Hora17", ModelFieldType.Int),
                                                                           new ModelField("Hora18", ModelFieldType.Int),
                                                                           new ModelField("Hora19", ModelFieldType.Int),

                                                                           new ModelField("Hora20", ModelFieldType.Int),
                                                                           new ModelField("Hora21", ModelFieldType.Int),
                                                                           new ModelField("Hora21", ModelFieldType.Int),
                                                                           new ModelField("Hora22", ModelFieldType.Int),
                                                                           new ModelField("Hora23", ModelFieldType.Int),

                                                                           new ModelField("Version", ModelFieldType.String),

                                                                           new ModelField("Estado", ModelFieldType.Int),
                                                                           new ModelField("Accion", ModelFieldType.String)

                                                        )
                                                    )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                    .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                    .Url("CCEP0304_MEDICAMENTO_KARDEX_PROGRAMACION")
                                                                    .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                    .Root("data")
                                                                                    .TotalProperty("total")
                                                                                    .IDProperty("Secuencia")))))
                                                           .Parameters(ps =>
                                                                ps.Add(new
                                                                {
                                                                    tipoRecurso = 1,
                                                                    grupo = 0,
                                                                    tipo = 1
                                                                })
                                                                )
                                        )

                                             .ColumnModel(

                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Secuencia")
                                                         .Text("Nro").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),
                                                              Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("IdMedicacion")
                                                         .Text("IdMedicacion").Hidden(true)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                             ),

                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("Dosis")
                                                         .Text("Dosis").Hidden(true)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(true).Height(40)

                                                             ),
                                                  Html.X().ComponentColumn().DataIndex("Frecuencia")
                                                                                 .Editor(true)
                                                                                 .Hidden(true)
                                                                                 .Text("Frecuencia")
                                                                                 .Component(
                                                                                     Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                                  ),


                                                      Html.X().ComponentColumn().ColSpan(3)
                                                         .Editor(true)
                                                         .DataIndex("Medicacion")
                                                         .Text("Indicacion Médica").Width(400)
                                                         .Component(
                                                            Html.X().TextArea().ReadOnly(true).Height(40)
                                                             ),

                                                        Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("DiasTratamiento")
                                                         .Text("DiasTratamiento")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                 Html.X().Column().Text("08:00").DataIndex("Hora8")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("09:00").DataIndex("Hora9")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("10:00").DataIndex("Hora10")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("11:00").DataIndex("Hora11")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("12:00").DataIndex("Hora12")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("13:00").DataIndex("Hora13")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("14:00").DataIndex("Hora14")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("15:00").DataIndex("Hora15")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("16:00").DataIndex("Hora16")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("17:00").DataIndex("Hora17")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("18:00").DataIndex("Hora18")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("19:00").DataIndex("Hora19")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("20:00").DataIndex("Hora20")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("21:00").DataIndex("Hora21")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("22:00").DataIndex("Hora22")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("23:00").DataIndex("Hora23")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("00:00").DataIndex("Hora0")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("01:00").DataIndex("Hora1")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("02:00").DataIndex("Hora2")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("03:00").DataIndex("Hora3")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("04:00").DataIndex("Hora4")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("05:00").DataIndex("Hora5")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("06:00").DataIndex("Hora6")
                                                    .Width(35).Renderer("changeModalidad"),

                                                    Html.X().Column().Text("07:00").DataIndex("Hora7")
                                                    .Width(35).Renderer("changeModalidad"),

                                                     Html.X().Column().Text("Cortado").DataIndex("Estado")
                                                    .Width(35).Renderer("changeModalidadCortado"),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Version")
                                                         .Text("Version")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),

                                                     Html.X().ComponentColumn()
                                                         .Editor(true).Hidden(true)
                                                         .DataIndex("Accion")
                                                         .Text("Accion")
                                                         .Component(
                                                              Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),


                                                        Html.X().CommandColumn().Hidden(true)
                                                        .Text("Acción")
                                                        .Width(60)
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura).Hidden(true)

                                                        .Icon(Icon.Delete)

                                                        )


                                        ).TopBar(
                                          Html.X().Toolbar().ID("bar")
                                                             .Items(
                                                                Html.X().Label().Html("<b><font color='" + COLOR_BLUE01 + "'> Programación de medicación</font></b>")
                                                                    ))
                                                     .BottomBar(
                                                         Html.X().Toolbar().Hidden(false).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>Leyenda: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(6)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_BLUE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '> Programado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '> Administrado </span>" +
                                                                "</span>"), X.ToolbarSpacer(6)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '> Cortado </span>" +
                                                                "</span>")


                                                             )

                                                             .Items(

                                                             )
                                                   )
                            , X.Component().Height(10),

                             X.TextArea().ID("taAlerts")
                            .Border(false)
                            .StyleSpec("background:white;border:1px solid gray;")
                            .FieldStyle("color: red")
                            .Hidden(true)
                            .ReadOnly(true)

                            )

                       )
                );
        }
        )
    )

    @(X.KeyNav()
                        .Target("={document.body}")
            /*.Down(a => a.Handler = "move(#{Window1}, 'down');")
            .Home(a => a.Handler = "move(#{Window1}, 'home');")*/
                                .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO',new Date());")
    )

}
