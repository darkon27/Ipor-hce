@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_EvolucionMedica_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";


    var DESC_ADD = "Evolucion";
    var COLOR_BLUE01 = "#284A89";
}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>



        function deleteActual(record) {
            seleccRecordActual = record;
            if (seleccRecordActual != null) {
                setIndicaCambios(true);
                var store = App.grillaExamenes.store;
                //var par1 = seleccRecordActual.data.ValorCodigo1;
                var par2 = seleccRecordActual.data.EvolucionObjetiva;

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addVer_CCEPF080"))',
                    params: {
                        MODO: 'DELETE',

                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };
        function seleccionadorMedico() {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("seleccionadorMedico"))',
                params: {
                    AccionSeleccion: 'getSeleccionMedicoDos',
                    AccionListado: 'LISTARPAGEMPLEADO'
                }
            });
        };

        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);
            var v = '@isNuevo';
            if (v.toUpperCase() == 'TRUE') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }


    var count = 0; // a counter for new records

    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();


        fields.filterBy(function (field) {

            if (!field.isValid()) {

                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });

        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //setIndicaCambios(false);
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }

    };

    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

        var prepareGroupToolbar = function (grid, toolbar, groupId, records) {
            // you can prepare ready toolbar
        };

        var onGroupCommand = function (column, command, group) {
            if (command === 'SelectGroup') {
                column.gridRef.getSelectionModel().select(group.items, true);
                return;
            }

            Ext.Msg.alert(command, 'Group name: ' + group.getGroupKey() + '<br/>Count - ' + group.items.length);
        };

        //var getAdditionalData = function (data, idx, record, orig) {


        //   //alert(JSON.stringify(data));

        //    return {
        //        //  rowBodyColspan: record.self.fields.length,
        //        rowBody: Ext.String.format('<div style=\'padding:0 5px 5px 5px;\'><b>Medico:</b>  {0} <i></i>.<br /><b>Especialidad:</b> {1}.<br /><b>Evolución:</b> {2}   </div>', data.Medico, data.Especialidad, data.EvolucionObjetiva)

        //    };



        //};

        var getAdditionalData = function (data, idx, record, orig) {


            //    alert(JSON.stringify(data));

            return {
                //  rowBodyColspan: record.self.fields.length,
                rowBody: Ext.String.format('<div style=\'padding:0 5px 5px 5px;\'><b>Medico:</b>  {0} <i></i>.<br /><b>Especialidad:</b> {1}.<br /><b>Evolución:</b> {2} <i></i>.<br /><b>Numero de Visitas:</b> {3} <br /><b>Fecha y Hora:</b> {4} <i></i></div>', data.Medico, data.Especialidad, data.EvolucionObjetiva, data.IdEpisodioAtencion, data.UsuarioModificacion)

            };



        };



    </script>
}


@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";

                })

               .Items(
                      X.FieldSet().ColumnWidth(0.4).Title("Evolución")
                        .Layout(LayoutType.Fit)
                        .MarginSpec("05 05 0 05")

                        .Items(


                            X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")

                            .Items(

                                X.DateFieldFor(m => m.FechaIngreso).Format("dd/MM/yyyy").Width(230)
                                .FieldLabel("Fecha de Ingreso").ReadOnly(indicaModoLectura).Editable(false)
                                .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaIngreso),
                                X.Component().Width(50),
                                X.TimeFieldFor(m => m.FechaIngreso).ID("FechaIngresoHora").Format("HH:mm").ReadOnly(indicaModoLectura).Editable(false)
                                .Width(230)
                                .FieldLabel("Hora de Ingreso")


                            ),


                            X.TextAreaFor(m => m.Version).FieldLabel("Evolución Previa/Histórica")//AUX
                            .Height(150).Hidden(true)
                            ,
                            X.TextAreaFor(m => m.EvolucionObjetiva).FieldLabel("Evolución:  SOAP (En cada evolución siempre mencionar la evolución médica previa) +  Dictamen de Riesgo").ReadOnly(indicaModoLectura)
                            .LabelAlign(LabelAlign.Top)
                            .Height(150).MaxLength(1500)
                            , X.TextFieldFor(m => m.DictamenRiesgo).FieldLabel("Dictamen de Riesgo")
                            .Hidden(true)

                            ,




                            Html.X().GridPanel()
            .Title("Historico")
            .Width(600)
            .Height(330)
            .Store(
                Html.X().Store()
                    .RemotePaging(false)
                    .PageSize(3) 
                    .Proxy(
                        Html.X().AjaxProxy()
                            .Url(Url.Action("CCEPF080_EVOLUCION_MEDICA"))
                            .Reader(Html.X().JsonReader().Root("data"))
                    )

            //        .Sorters(sorters =>
                //    sorters.Add(Html.X().DataSorter()
                //        .Property("IdEpisodioAtencion")
                //        .Direction(Ext.Net.SortDirection.DESC)
                //    )
                //)
                //.Model(
                //    Html.X().Model()
                //        .Fields(
                //            Html.X().ModelField().Name("field")
                //        )
                //)
                .GroupField("IdEpisodioAtencion").GroupDir(Ext.Net.SortDirection.DESC)
                     .Model(
                                                    Html.X().Model()
                                                        .IDProperty("IdEpisodioAtencion")
                                                        .Fields(

                                                            new ModelField("IdEpisodioAtencion", ModelFieldType.String),
                                                            new ModelField("EvolucionObjetiva", ModelFieldType.String),
                                                            new ModelField("Medico", ModelFieldType.String),
                                                            new ModelField("UsuarioModificacion", ModelFieldType.String),
                                                            new ModelField("Especialidad", ModelFieldType.String),
                                                            new ModelField("NumeroVisitas", ModelFieldType.String),
                                                            new ModelField("ACCION", ModelFieldType.String)

                                                        )
                                                    )

                    .Parameters(new
                    {
                        //startRemote = JRawValue.From("App.Slider1.getValue()[0]"),
                        //limitRemote = 1000,
                        start = 0,
                        limit = 10
                    })
                    //.GroupDir(Ext.Net.SortDirection.DESC)
            )


                             .ColumnModel(
                    Html.X().Column()
                        .Text("EVOLUCION MEDICA")
                // .DataIndex("EvolucionObjetiva")
                        .Width(900),

            Html.X().Column()
                        .Text("Nombre Medico")
                        .DataIndex("Medico").Hidden(true)
                        .Width(130),

            Html.X().Column()
                        .Text("ESPECIALIDAD")
                        .DataIndex("Especialidad").Hidden(true)
                        .Width(70)
                //  .Align(ColumnAlign.End)
                        .Groupable(false)
                        .Renderer(RendererFormat.UsMoney),

            Html.X().Column()
                        .Text("FECHA DE NOTA")
                        .DataIndex("ValorCodigo2").Hidden(true)
                        .Width(95)
                        .Groupable(false)
                //.Format("yyyy-MM-dd")
                        ,

            Html.X().Column()
                        .Text("ACCION")
                        .DataIndex("ACCION").Hidden(true)
                        .Width(55),

            Html.X().CommandColumn()
                        .Hidden(true)
                        .GroupCommands(
                        )
                ).SelectionModel(Html.X().CheckboxSelectionModel().RowSpan(2))
        .Features(
            Html.X().Grouping()
                .HideGroupedHeader(true)
                .GroupHeaderTplString("{columnName}: {name} ({[values.rows.length]} {[values.rows.length > 1 ? \"Items\" : \"Item\"]})"),

            Html.X().RowBody().GetAdditionalData("getAdditionalData")
        )

            .View(
                Html.X().GridView().LoadingText("Loading Data...")
            )
            .BottomBar(
                Html.X().PagingToolbar()
            )
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                //Html.X().ToolbarTextItem().Text("Remote Pager:"),
                //Html.X().ToolbarSpacer().Width(20),

                        //Html.X().Slider()
                //    .ID("Slider1")
                //    .MinValue(0)
                //    .MaxValue(7000)
                //    .Increment(1000)
                //    .Width(250)
                //    .Plugins(
                //        Html.X().SliderTip()
                //    )
                //    .Listeners(l =>
                //    {
                //        l.Change.Handler = "if (this.nextSibling('tbtext')) this.nextSibling('tbtext').setText((newValue+1) + '-' + (newValue + 1000));";
                //        l.ChangeComplete.Handler = "this.up('grid').store.load();";
                //    }),

                        //Html.X().ToolbarSpacer().Width(20),
                //Html.X().ToolbarTextItem().Text("(1-1000)")
                    )
            )




        //                            X.GridPanel()
                //                                .ID("grillaExamenes")
                //                                .Border(true)

        //                            .Store(Html.X().Store()
                //                        .GroupField("IdEpisodioAtencion")
                //              .Model(
                //                                    Html.X().Model()
                //                                        .IDProperty("IdEpisodioAtencion")
                //                                        .Fields(

                //                                            new ModelField("IdEpisodioAtencion", ModelFieldType.String),
                //// new ModelField("ValorCodigo1", ModelFieldType.String),
                //                                            new ModelField("EvolucionObjetiva", ModelFieldType.String),
                //                                            new ModelField("Medico", ModelFieldType.String),

                //                                            new ModelField("Especialidad", ModelFieldType.String),
                //                                            new ModelField("ACCION", ModelFieldType.String)

                //                                        )
                //                                    )



        //    .Proxy(Html.X().AjaxProxy()
                //        .Url(Url.Action("CCEPF080_EVOLUCION_MEDICA"))
                //        .ActionMethods(ams =>
                //            ams.Read = HttpMethod.POST
                //        )
                //        .Reader(Html.X().JsonReader().Root("data")
                //        .TotalProperty("total")
                //        .IDProperty("IdEpisodioAtencion")
                //        )
                //    )


        //    .Sorters(sorters =>
                //        sorters.Add(Html.X().DataSorter()
                //            .Property("IdEpisodioAtencion")
                //            .Direction(Ext.Net.SortDirection.ASC)
                //        )
                //    )
                //)

        //                   .ColumnModel(
                //    Html.X().Column()
                //        .Text("EVOLUCION MEDICA")
                //       // .DataIndex("EvolucionObjetiva")
                //        .Width(900),

        //    Html.X().Column()
                //        .Text("Nombre Medico")
                //        .DataIndex("Medico").Hidden(true)
                //        .Width(130),

        //    Html.X().Column()
                //        .Text("ESPECIALIDAD")
                //        .DataIndex("Especialidad").Hidden(true)
                //        .Width(70)
                //        //  .Align(ColumnAlign.End)
                //        .Groupable(false)
                //        .Renderer(RendererFormat.UsMoney),

        //    Html.X().Column()
                //        .Text("FECHA DE NOTA")
                //        .DataIndex("ValorCodigo2").Hidden(true)
                //        .Width(95)
                //        .Groupable(false)
                //        //.Format("yyyy-MM-dd")
                //        ,

        //    Html.X().Column()
                //        .Text("ACCION")
                //        .DataIndex("ACCION").Hidden(true)
                //        .Width(55),

        //    Html.X().CommandColumn()
                //        .Hidden(true)
                //        .GroupCommands(
                //        )
                //)

        // .SelectionModel(Html.X().CheckboxSelectionModel().RowSpan(2))
                //.Features(
                //    Html.X().Grouping()
                //        .HideGroupedHeader(true)
                //        .GroupHeaderTplString("{columnName}: {name} ({[values.rows.length]} {[values.rows.length > 1 ? \"Items\" : \"Item\"]})"),

        //    Html.X().RowBody().GetAdditionalData("getAdditionalData")
                //)

                        )
                ////////ADD PARA MSGS/////
                            ,
                            X.TextArea().ID("taAlerts")
                            .Border(false)
                            .StyleSpec("background:white;border:1px solid gray;")
                            .FieldStyle("color: red")
                            .Hidden(true)
                            .ReadOnly(true)


                            //////////////////////
                     )





                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>"),

                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                               X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("CCEPF080_Save_EvolucionObjetiva");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Before = "" +
                                    "beforeSave(App.formactual); return App.formactual.getForm().isValid();";
                                    de.Click.ExtraParams.Add(new { HoraIngreso = JRawValue.From("App.FechaIngresoHora.getValue()") });
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        )


                        )
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"
                        )
                );
        }
        )


    )

}

