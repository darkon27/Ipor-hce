@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_VIGILANCIA_DISPOSITIVOS_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true : (Model.Accion == "UPDATE" ? true : (Model.Accion == "DELETE" ? false : (Model.Accion == "VISTA" ? false : false))));
    var indicaTieneVacuna = (Model.Accion == "NUEVO" ? false : true);

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var COLOR_BLUE01 = "#284A89";
    var DESC_ADD = " OTRAS ENFERMEDADES PATOLÓGICAS ";

}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }

        element.style {
            width: 55%;
        }
    </style>

    <script>

    var valido = true;
    var secuenciaMax = 1;/* parseInt(SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX)+1;*/

    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);
        /*  secuenciaMax = parseInt(SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX)+1;*/
        var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }

        }

    var indicaCambios = false;
     function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });


        var val = '@visibleImpresion';
        var vis = '@isVista';
        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);
                    // parent.App.btnContEpisodio_HCE.setDisabled(true);//A TODOS

                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);
                    //parent.App.btnContEpisodio_HCE.setDisabled(false);//A TODOS
                }
            }
        }
    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

        var reload = true;
        if (valido == false) {
            reload = false;
        }

        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            /*  if('SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_RECARGAR'==1){*/
            parent.App.txtRecargarX.setValue('RELOAD');
            /*   }*/
        }
    };

    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    }

    </script>
    <script>

    var hhValidation = function (h) {
        str = h.value;

        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    };

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }


    function validaDuplicadoNew(valor) {
        var estados = false;
        App.StoreAtencion.each(function (r) {
            if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
        });

        return estados;
    }

    function validaDuplicado(valor1, valor2) {
        var estados = false;
        App.StoreAtencion.each(function (r) {
            if (valor2 == r.get('OtrasEnfermedades')) { estados = true; }
        });
        return estados;
    };


    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }


    var count = 0; // a counter for new records

    function deleteActualNew(record) {
        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.GridPanelInmunizacion.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.CodigoElemento;
            var accionDef = seleccRecordActual.data.ACCION;


            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF006add_DataDeletePatologicosGenerales"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: par1,
                    secuencia: par2
                }
            });

            store.remove(seleccRecordActual);
            seleccRecordActual = null;
        }
    };

    function deleteActual(record) {
        var store = App.GridPanelInmunizacion.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("CCEPF006add_DataDeletePatologicosGenerales"))',
            params: {
                MODO: 'DELETEDETALLE',
                codigo: '',
                secuencia: record.data.Secuencia
            }
        });
    };

    function EnviarData(grid) {

        if (true) {
            var contadorvacios = 0;
            App.StoreAtencion.each(function (r) {
                var ver = r.get('ValorCodigo1');
                if (r.get('ValorCodigo1') == null || r.get('ValorCodigo1') == '' || r.get('ValorCodigo1').trim().length < 1) {
                    contadorvacios = contadorvacios + 1;
                    /* r.get('ValorCodigo1').setActiveError('your_custom_error_message');*/
                }

            });

            if (contadorvacios > 0) {
                valido = false;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("SetInvalido"))',
                    params: {
                        Accion: 'invalido'

                    }
                });
            }
            else {
                valido = true;
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("SetInvalido"))',
                    params: {
                        Accion: 'valido'

                    }
                });
            }

            /* if (valido == false)
             {
                 var mensajes = '';
                 mensajes = mensajes + "*" + "Debe ingresar un diagnostico" + "\n";
                 App.taAlerts.setValue(mensajes);
                 App.taAlerts.setVisible(true);


             }*/
            /* else{*/
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            source = App.GridPanelInmunizacion;
            var store = App.StoreAtencion;
            var status = 0;
            var i = 0;
            var valores = "";
            var ArrayList0 = new Array();
            var records = App.GridPanelInmunizacion.getSelectionModel().getSelection();
            var invalidFields = new Array();
            var fila = 0;

            App.StoreAtencion.each(function (r) {

                fila = fila + 1;
                ///VALIDACIÓN
                setValuesGridForm(r, null);

                if (r.get('ValorCodigo1') == null || r.get('ValorCodigo1') == '' || r.get('ValorCodigo1').trim().length < 1) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: 'Diagnostico',
                        IdEvento: 1,
                        ValorTexto: 'Fila N° ' + fila + '-' + 'Diagnostico' + ': ' + 'Debe ingresar informacion'
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);



                }
                else {
                    invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);
                }
                var MA_MiscelaneosDetalle = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo3: r.get('ValorCodigo3'),

                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),

                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')

                };
                ArrayList0.push(MA_MiscelaneosDetalle);
                i = i + 1;
            });
            if (invalidFields.length > 0) {

                addRecursosValidacion(invalidFields);
                App.cmdGuardar.setDisabled(false);
                /*  if (valido == false) {
                      var mensajes = '';
                      mensajes = mensajes + "*" + "Debe ingresar un diagnostico" + "\n";
                      App.taAlerts.setValue(mensajes);
                      App.taAlerts.setVisible(true);
                      return false;

                  }*/

               /* return false;*/
            } else {

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF006_Save_PatologicosGenerales"))',
                    params: {
                        selectionArray1: ArrayList0,
                        text: '0'
                    }
                });
            }
            /*}*/
        } else {
            App.cmdGuardar.setDisabled(false);
        }

    }

    var getInvalidFieldsGrid = function (form, invalidFields, fila) {
        var fields = App.formactual.getForm().getFields();



        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });

        return invalidFields;
    };

    var addRecursosValidacion = function (FieldsInvalidos) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
            params: {
                data: FieldsInvalidos,
                indica: 'VALIDAR',
            },
            success: function (result) { accionMensajes(result.data); }
        });
    };


    var setValuesGridForm = function (r, valor) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var ValorCodigo1 = r.get('ValorCodigo1');
        var CodigoElemento = r.get('CodigoElemento');


        if (ValorCodigo1 == null || ValorCodigo1 == '') {

        }

    };

    function InsertRow(valor, estado, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (valor.getValue() != '') {


                var obj = JSON.parse(valor.getValue());
                var DescripcionLocalVar = obj.DescripcionLocal;

                var cadena1 = '';
                var cadena2 = '';
                var posicion = 0;

                for (var i = 0; i < DescripcionLocalVar.length; i++) {
                    if (DescripcionLocalVar[i] == '|') {
                        posicion = i;
                    }

                }

                for (var i = 0; i < DescripcionLocalVar.length; i++) {
                    if (i < posicion) {
                        cadena1 = cadena1 + DescripcionLocalVar[i];
                    } else if (i > posicion) {
                        cadena2 = cadena2 + DescripcionLocalVar[i];
                    }
                }

                var DescripcionLocalVar2 = '';
                DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                if (validaDuplicadoNew(DescripcionLocalVar)) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    valor.setValue('');
                    return;
                }


                var grid = Ext.getCmp("GridPanelInmunizacion");
                setIndicaCambios(true);
                grid.store.insert(0, {
                    CodigoElemento: count++,
                    ValorCodigo1: DescripcionLocalVar,
                    ValorCodigo3: DescripcionLocalVar2,
                    ACCION: 'NUEVO'
                }
                );
                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);

                valor.setValue('');
            }
        }
    }

    var countOtras = 0; // a counter for new records de Otras
    function addRecord(grid, grupo, IdUnidad, componenteAdd) {

        if ((componenteAdd.getValue() != null) && (componenteAdd.getValue() != '')) {

            var valorSelec = componenteAdd.getValue();
            if (validaDuplicado(grupo, valorSelec)) {
                Ext.Msg.show({
                    title: "Mensaje",
                    msg: "Ya existe el Registro de Otras Enfermedades",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            } else {

                grid.store.insert(0,
                    {

                        UnidadReplicacion: IdUnidad,
                        Secuencia: countOtras++,
                        OtrasEnfermedades: valorSelec,
                        Accion: 'NUEVO'
                    });


            }
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Ingresar Otra Enfermedades para añadirlo.",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }

        App.cmbTipAt.setValue('');
    };


    var eventoRadioMedicacion = function (rd1, pregunta, valor) {
        var getValueVar = rd1.getValue();

        if (getValueVar) {
            if (pregunta == 'R1') {
                if (valor == 'S') {
                    App.CateterInvasivo1ZonaInsercion.setDisabled(false);
                    alerttt(ee)

                } else {
                    App.CateterInvasivo1ZonaInsercion.setDisabled(true);
                };
            }

            if (pregunta == 'R2') {
                if (valor == 'S') {
                    App.CateterInvasivo2ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo2ZonaInsercion.setDisabled(true);
                };
            }
            if (pregunta == 'R3') {
                if (valor == 'S') {
                    App.CateterInvasivo3ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo3ZonaInsercion.setDisabled(true);
                };
            }

            if (pregunta == 'R4') {
                if (valor == 'S') {
                    App.CateterInvasivo4ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo4ZonaInsercion.setDisabled(true);
                };
            }

            if (pregunta == 'R5') {
                if (valor == 'S') {
                    App.CateterInvasivo5ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo5ZonaInsercion.setDisabled(true);
                };
            }

            if (pregunta == 'R6') {
                if (valor == 'S') {
                    App.CateterInvasivo6ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo6ZonaInsercion.setDisabled(true);
                };
            }
            if (pregunta == 'R7') {
                if (valor == 'S') {
                    App.CateterInvasivo7ZonaInsercion.setDisabled(false);

                } else {
                    App.CateterInvasivo7ZonaInsercion.setDisabled(true);
                };
            }

            if (pregunta == 'R8') {
                if (valor == 'S') {
                    App.IdNivel8.setDisabled(false);

                } else {
                    App.IdNivel8.setDisabled(true);
                };
            }

            if (pregunta == 'R9') {
                if (valor == 'S') {
                    App.IdNivel9.setDisabled(false);

                } else {
                    App.IdNivel9.setDisabled(true);
                };
            }

            if (pregunta == 'R10') {
                if (valor == 'S') {
                    App.IdNivel10.setDisabled(false);

                } else {
                    App.IdNivel10.setDisabled(true);
                };
            }
            if (pregunta == 'R11') {
                if (valor == 'S') {
                    App.IdNivel11.setDisabled(false);

                } else {
                    App.IdNivel11.setDisabled(true);
                };
            }

            if (pregunta == 'R12') {
                if (valor == 'S') {
                    App.IdNivel12.setDisabled(false);

                } else {
                    App.IdNivel12.setDisabled(true);
                };
            }

            if (pregunta == 'R13') {
                if (valor == 'S') {
                    App.IdNivel13.setDisabled(false);

                } else {
                    App.IdNivel13.setDisabled(true);
                };
            }

            if (pregunta == 'R14') {
                if (valor == 'S') {
                    App.IdNivel14.setDisabled(false);

                } else {
                    App.IdNivel14.setDisabled(true);
                };
            }
            if (pregunta == 'R15') {
                if (valor == 'S') {
                    App.IdNivel15.setDisabled(false);

                } else {
                    App.IdNivel15.setDisabled(true);
                };
            }

            if (pregunta == 'R16') {
                if (valor == 'S') {
                    App.IdNivel16.setDisabled(false);

                } else {
                    App.IdNivel16.setDisabled(true);
                };
            }
            if (pregunta == 'R17') {
                if (valor == 'S') {
                    App.IdNivel17.setDisabled(false);

                } else {
                    App.IdNivel17.setDisabled(true);
                };
            }
            if (pregunta == 'R18') {
                if (valor == 'S') {
                    App.IdNivel18.setDisabled(false);

                } else {
                    App.IdNivel18.setDisabled(true);
                };
            }

            if (pregunta == 'R19') {
                if (valor == 'S') {
                    App.IdNivel19.setDisabled(false);

                } else {
                    App.IdNivel19.setDisabled(true);
                };
            }

        }

    };

    var eventoRadio = function (rd, pregunta, valor) {

        var varRadioValue = rd.getValue();
        var FieldSet1 = App.fsCateterInvasivos;
        var FieldSet2 = App.fsDrenaje;
        var FieldSet3 = App.fsImagen;




        if (varRadioValue) {

            if (pregunta == 'RG1') {

                if (valor == 1) { // Si

                    FieldSet1.setVisible(true);
                    FieldSet2.setVisible(true);
                    App.IdFlag.setValue('S');
                    FieldSet3.setVisible(true);
                }
                if (valor == 0  ) { // No

                    FieldSet1.setVisible(false);
                    FieldSet2.setVisible(false);
                    FieldSet3.setVisible(false);
                    App.IdFlag.setValue('N');
                }


            }

        } else {

            if (pregunta == 'RG2') {


                if (valor == 1) {// si

                    FieldSet1.setVisible(false);
                    FieldSet2.setVisible(false);
                }
                if (valor == 0 || valor == 2) {// no ó ignora

                }
            }

        }
    };


    var eventoRadio_old = function (rd1, pregunta, valor) {

        var rdAll1 = rd1.getValue();

        if (rdAll1) {

            if (valor == 1) {
                App.Chb1.setDisabled(false);
                App.Chb2.setDisabled(false);
                App.Chb3.setDisabled(false);
                App.Chb4.setDisabled(false);
                App.Chb5.setDisabled(false);
                App.Chb6.setDisabled(false);
                App.Chb7.setDisabled(false);
                App.Chb8.setDisabled(false);
                App.Chb9.setDisabled(false);
                App.Chb10.setDisabled(false);
                App.Chb11.setDisabled(false);
                App.Chb12.setDisabled(false);
                App.Chb13.setDisabled(false);
                App.Chb14.setDisabled(false);
                App.Chb15.setDisabled(false);
                App.Chb16.setDisabled(false);
                App.Chb17.setDisabled(false);
                App.Chb18.setDisabled(false);
                App.Chb19.setDisabled(false);
                App.Chb20.setDisabled(false);
                App.Chb21.setDisabled(false);
                App.Chb22.setDisabled(false);
                App.Chb23.setDisabled(false);
                App.Chb24.setDisabled(false);
                App.Chb25.setDisabled(false);
                App.Chb26.setDisabled(false);
                App.Chb27.setDisabled(false);
                App.Chb28.setDisabled(false);

            }

            if (valor == 0) {
                App.Chb1.setDisabled(true);
                App.Chb2.setDisabled(true);
                App.Chb3.setDisabled(true);
                App.Chb4.setDisabled(true);
                App.Chb5.setDisabled(true);
                App.Chb6.setDisabled(true);
                App.Chb7.setDisabled(true);
                App.Chb8.setDisabled(true);
                App.Chb9.setDisabled(true);
                App.Chb10.setDisabled(true);
                App.Chb11.setDisabled(true);
                App.Chb12.setDisabled(true);
                App.Chb13.setDisabled(true);
                App.Chb14.setDisabled(true);
                App.Chb15.setDisabled(true);
                App.Chb16.setDisabled(true);
                App.Chb17.setDisabled(true);
                App.Chb18.setDisabled(true);
                App.Chb19.setDisabled(true);
                App.Chb20.setDisabled(true);
                App.Chb21.setDisabled(true);
                App.Chb22.setDisabled(true);
                App.Chb23.setDisabled(true);
                App.Chb24.setDisabled(true);
                App.Chb25.setDisabled(true);
                App.Chb26.setDisabled(true);
                App.Chb27.setDisabled(true);
                App.Chb28.setDisabled(true);

            }




        } else {


            if (valor == 1) {
                App.Chb1.setDisabled(true);
                App.Chb2.setDisabled(true);
                App.Chb3.setDisabled(true);
                App.Chb4.setDisabled(true);
                App.Chb5.setDisabled(true);
                App.Chb6.setDisabled(true);
                App.Chb7.setDisabled(true);
                App.Chb8.setDisabled(true);
                App.Chb9.setDisabled(true);
                App.Chb10.setDisabled(true);
                App.Chb11.setDisabled(true);
                App.Chb12.setDisabled(true);
                App.Chb13.setDisabled(true);
                App.Chb14.setDisabled(true);
                App.Chb15.setDisabled(true);
                App.Chb16.setDisabled(true);
                App.Chb17.setDisabled(true);
                App.Chb18.setDisabled(true);
                App.Chb19.setDisabled(true);
                App.Chb20.setDisabled(true);
                App.Chb21.setDisabled(true);
                App.Chb22.setDisabled(true);
                App.Chb23.setDisabled(true);
                App.Chb24.setDisabled(true);
                App.Chb25.setDisabled(true);
                App.Chb26.setDisabled(true);
                App.Chb27.setDisabled(true);
                App.Chb28.setDisabled(true);

            }

            if (valor == 0) {


                App.Chb1.setDisabled(false);
                App.Chb2.setDisabled(false);
                App.Chb3.setDisabled(false);
                App.Chb4.setDisabled(false);
                App.Chb5.setDisabled(false);
                App.Chb6.setDisabled(false);
                App.Chb7.setDisabled(false);
                App.Chb8.setDisabled(false);
                App.Chb9.setDisabled(false);
                App.Chb10.setDisabled(false);
                App.Chb11.setDisabled(false);
                App.Chb12.setDisabled(false);
                App.Chb13.setDisabled(false);
                App.Chb14.setDisabled(false);
                App.Chb15.setDisabled(false);
                App.Chb16.setDisabled(false);
                App.Chb17.setDisabled(false);
                App.Chb18.setDisabled(false);
                App.Chb19.setDisabled(false);
                App.Chb20.setDisabled(false);
                App.Chb21.setDisabled(false);
                App.Chb22.setDisabled(false);
                App.Chb23.setDisabled(false);
                App.Chb24.setDisabled(false);
                App.Chb25.setDisabled(false);
                App.Chb26.setDisabled(false);
                App.Chb27.setDisabled(false);
                App.Chb28.setDisabled(false);

            }

        }

    };



    var eventoCheck = function (ch1, pregunta, valor) {
        var varCheckValue = ch1.getValue();
        if (varCheckValue) {
            var fecha = new Date();
            if (pregunta == 'C1') {
                App.IdDate1.setDisabled(false);
                App.IdDate1.setValue(fecha);
                App.IdFC1.setDisabled(false);
                App.IdFR1.setDisabled(false);
                App.listTE1.setDisabled(false);
                App.CateterInvasivo1ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C2') {
                App.IdDate2.setDisabled(false);
                App.IdDate2.setValue(fecha);
                App.IdFC2.setDisabled(false);
                App.IdFR2.setDisabled(false);
                App.listTE2.setDisabled(false);
                App.CateterInvasivo2ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C3') {
                App.IdDate3.setDisabled(false);
                App.IdDate3.setValue(fecha);
                App.IdFC3.setDisabled(false);
                App.IdFR3.setDisabled(false);
                App.listTE3.setDisabled(false);
                App.CateterInvasivo3ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C4') {
                App.IdDate4.setDisabled(false);
                App.IdDate4.setValue(fecha);
                App.IdFC4.setDisabled(false);
                App.IdFR4.setDisabled(false);
                App.listTE4.setDisabled(false);
                App.CateterInvasivo4ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C5') {
                App.IdDate5.setDisabled(false);
                App.IdDate5.setValue(fecha);
                App.IdFC5.setDisabled(false);
                App.IdFR5.setDisabled(false);
                App.listTE5.setDisabled(false);
                App.CateterInvasivo5ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C6') {
                App.IdDate6.setDisabled(false);
                App.IdDate6.setValue(fecha);
                App.IdFC6.setDisabled(false);
                App.IdFR6.setDisabled(false);
                App.listTE6.setDisabled(false);
                App.CateterInvasivo6ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C7') {
                App.IdDate7.setDisabled(false);
                App.IdDate7.setValue(fecha);
                App.IdFC7.setDisabled(false);
                App.IdFR7.setDisabled(false);
                App.listTE7.setDisabled(false);
                App.CateterInvasivo7ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C8') {
                App.IdDate8.setDisabled(false);
                App.IdDate8.setValue(fecha);
                App.IdFC8.setDisabled(false);
                App.IdFR8.setDisabled(false);
                App.listTE8.setDisabled(false);
                App.CateterInvasivo8ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C9') {
                App.IdDate9.setDisabled(false);
                App.IdDate9.setValue(fecha);
                App.IdFC9.setDisabled(false);
                App.IdFR9.setDisabled(false);
                App.listTE9.setDisabled(false);
                App.CateterInvasivo9ZonaInsercion.setDisabled(false);
            }


            if (pregunta == 'C10') {
                App.IdDate10.setDisabled(false);
                App.IdDate10.setValue(fecha);
                App.IdFC10.setDisabled(false);
                App.IdFR10.setDisabled(false);
                App.listTE10.setDisabled(false);
                App.CateterInvasivo10ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C11') {
                App.IdDate11.setDisabled(false);
                App.IdDate11.setValue(fecha);
                App.IdFC11.setDisabled(false);
                App.IdFR11.setDisabled(false);
                App.listTE11.setDisabled(false);
                App.CateterInvasivo11ZonaInsercion.setDisabled(false);
            }
            if (pregunta == 'C12') {
                App.IdDate12.setDisabled(false);
                App.IdDate12.setValue(fecha);
                App.IdFC12.setDisabled(false);
                App.IdFR12.setDisabled(false);
                App.listTE12.setDisabled(false);
                App.CateterInvasivo12ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C13') {
                App.IdDate13.setDisabled(false);
                App.IdDate13.setValue(fecha);
                App.IdFC13.setDisabled(false);
                App.IdFR13.setDisabled(false);
                App.listTE13.setDisabled(false);
                App.CateterInvasivo13ZonaInsercion.setDisabled(false);
            }
            if (pregunta == 'C14') {
                App.IdDate14.setDisabled(false);
                App.IdDate14.setValue(fecha);
                App.IdFC14.setDisabled(false);
                App.IdFR14.setDisabled(false);
                App.listTE14.setDisabled(false);
                App.CateterInvasivo14ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C15') {
                App.IdDate15.setDisabled(false);
                App.IdDate15.setValue(fecha);
                App.IdFC15.setDisabled(false);
                App.IdFR15.setDisabled(false);
                App.listTE15.setDisabled(false);
                App.CateterInvasivo15ZonaInsercion.setDisabled(false);
            }


            if (pregunta == 'C16') {
                App.IdDate16.setDisabled(false);
                App.IdDate16.setValue(fecha);
                App.IdFC16.setDisabled(false);
                App.IdFR16.setDisabled(false);
                App.listTE16.setDisabled(false);
                App.CateterInvasivo16ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C17') {
                App.IdDate17.setDisabled(false);
                App.IdDate17.setValue(fecha);
                App.IdFC17.setDisabled(false);
                App.IdFR17.setDisabled(false);
                App.listTE17.setDisabled(false);
                App.CateterInvasivo17ZonaInsercion.setDisabled(false);
            }
            if (pregunta == 'C18') {
                App.IdDate18.setDisabled(false);
                App.IdDate18.setValue(fecha);
                App.IdFC18.setDisabled(false);
                App.IdFR18.setDisabled(false);
                App.listTE18.setDisabled(false);
                App.CateterInvasivo18ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C19') {
                App.IdDate19.setDisabled(false);
                App.IdDate19.setValue(fecha);
                App.IdFC19.setDisabled(false);
                App.IdFR19.setDisabled(false);
                App.listTE19.setDisabled(false);
                App.CateterInvasivo19ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C20') {
                App.IdDate20.setDisabled(false);
                App.IdDate20.setValue(fecha);
                App.IdFC20.setDisabled(false);
                App.IdFR20.setDisabled(false);
                App.listTE20.setDisabled(false);
                App.CateterInvasivo20ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C21') {
                App.IdDate21.setDisabled(false);
                App.IdDate21.setValue(fecha);
                App.IdFC21.setDisabled(false);
                App.IdFR21.setDisabled(false);
                App.listTE21.setDisabled(false);
                App.CateterInvasivo21ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C22') {
                App.IdDate22.setDisabled(false);
                App.IdDate22.setValue(fecha);
                App.IdFC22.setDisabled(false);
                App.IdFR22.setDisabled(false);
                App.listTE22.setDisabled(false);
                App.CateterInvasivo22ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C23') {
                App.IdDate23.setDisabled(false);
                App.IdDate23.setValue(fecha);
                App.IdFC23.setDisabled(false);
                App.IdFR23.setDisabled(false);
                App.listTE23.setDisabled(false);
                App.CateterInvasivo23ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C24') {
                App.IdDate24.setDisabled(false);
                App.IdDate24.setValue(fecha);
                App.IdFC24.setDisabled(false);
                App.IdFR24.setDisabled(false);
                App.listTE24.setDisabled(false);
                App.CateterInvasivo24ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C25') {
                App.IdDate25.setDisabled(false);
                App.IdDate25.setValue(fecha);
                App.IdFC25.setDisabled(false);
                App.IdFR25.setDisabled(false);
                App.listTE25.setDisabled(false);
                App.CateterInvasivo25ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C26') {
                App.IdDate26.setDisabled(false);
                App.IdDate26.setValue(fecha);
                App.IdFC26.setDisabled(false);
                App.IdFR26.setDisabled(false);
                App.listTE26.setDisabled(false);
                App.CateterInvasivo26ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C27') {
                App.IdDate27.setDisabled(false);
                App.IdDate27.setValue(fecha);
                App.IdFC27.setDisabled(false);
                App.IdFR27.setDisabled(false);
                App.listTE27.setDisabled(false);
                App.CateterInvasivo27ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C28') {
                App.IdDate28.setDisabled(false);
                App.IdDate28.setValue(fecha);
                App.IdFC28.setDisabled(false);
                App.IdFR28.setDisabled(false);
                App.listTE28.setDisabled(false);
                App.CateterInvasivo28ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C29') {
                App.IdDate29.setDisabled(false);
                App.IdDate29.setValue(fecha);
                App.IdFC29.setDisabled(false);
                App.IdFR29.setDisabled(false);
                App.listTE29.setDisabled(false);
                App.CateterInvasivo29ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C30') {
                App.IdDate30.setDisabled(false);
                App.IdDate30.setValue(fecha);
                App.IdFC30.setDisabled(false);
                App.IdFR30.setDisabled(false);
                App.listTE30.setDisabled(false);
                App.Drenajes1ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C31') {
                App.IdDate31.setDisabled(false);
                App.IdDate31.setValue(fecha);
                App.IdFC31.setDisabled(false);
                App.IdFR31.setDisabled(false);
                App.listTE31.setDisabled(false);
                App.Drenajes2ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C32') {
                App.IdDate32.setDisabled(false);
                App.IdDate32.setValue(fecha);
                App.IdFC32.setDisabled(false);
                App.IdFR32.setDisabled(false);
                App.listTE32.setDisabled(false);
                App.Drenajes3ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C33') {
                App.IdDate33.setDisabled(false);
                App.IdDate33.setValue(fecha);
                App.IdFC33.setDisabled(false);
                App.IdFR33.setDisabled(false);
                App.listTE33.setDisabled(false);
                App.Drenajes4ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C34') {
                App.IdDate34.setDisabled(false);
                App.IdDate34.setValue(fecha);
                App.IdFC34.setDisabled(false);
                App.IdFR34.setDisabled(false);
                App.listTE34.setDisabled(false);
                App.Drenajes5ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C35') {
                App.IdDate35.setDisabled(false);
                App.IdDate35.setValue(fecha);
                App.IdFC35.setDisabled(false);
                App.IdFR35.setDisabled(false);
                App.listTE35.setDisabled(false);
                App.Drenajes6ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C36') {
                App.IdDate36.setDisabled(false);
                App.IdDate36.setValue(fecha);
                App.IdFC36.setDisabled(false);
                App.IdFR36.setDisabled(false);
                App.listTE36.setDisabled(false);
                App.Drenajes7ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C37') {
                App.IdDate37.setDisabled(false);
                App.IdDate37.setValue(fecha);
                App.IdFC37.setDisabled(false);
                App.IdFR37.setDisabled(false);
                App.listTE37.setDisabled(false);
                App.Drenajes8ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C38') {
                App.IdDate38.setDisabled(false);
                App.IdDate38.setValue(fecha);
                App.IdFC38.setDisabled(false);
                App.IdFR38.setDisabled(false);
                App.listTE38.setDisabled(false);
                App.Drenajes9ZonaInsercion.setDisabled(false);
            }

            if (pregunta == 'C39') {
                App.IdDate39.setDisabled(false);
                App.IdDate39.setValue(fecha);
                App.IdFC39.setDisabled(false);
                App.IdFR39.setDisabled(false);
                App.listTE39.setDisabled(false);
                App.Drenajes10ZonaInsercion.setDisabled(false);
            }

        }
        else {


            if (pregunta == 'C1') {
                App.IdDate1.setDisabled(true);
                App.IdFC1.setDisabled(true);
                App.IdFC1.setValue(null);
                App.IdFR1.setDisabled(true);
                App.IdFR1.setValue(null);
                App.listTE1.setDisabled(true);
                App.listTE1.setValue(null);
                App.CateterInvasivo1ZonaInsercion.setDisabled(true);
                App.CateterInvasivo1ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C2') {
                App.IdDate2.setDisabled(true);
                App.IdFC2.setDisabled(true);
                App.IdFC2.setValue(null);
                App.IdFR2.setDisabled(true);
                App.IdFR2.setValue(null);
                App.listTE2.setDisabled(true);
                App.listTE2.setValue(null);
                App.CateterInvasivo2ZonaInsercion.setDisabled(true);
                App.CateterInvasivo2ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C3') {
                App.IdDate3.setDisabled(true);
                App.IdFC3.setDisabled(true);
                App.IdFC3.setValue(null);
                App.IdFR3.setDisabled(true);
                App.IdFR3.setValue(null);
                App.listTE3.setDisabled(true);
                App.listTE3.setValue(null);
                App.CateterInvasivo3ZonaInsercion.setDisabled(true);
                App.CateterInvasivo3ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C4') {
                App.IdDate4.setDisabled(true);
                App.IdFC4.setDisabled(true);
                App.IdFC4.setValue(null);
                App.IdFR4.setDisabled(true);
                App.IdFR4.setValue(null);
                App.listTE4.setDisabled(true);
                App.listTE4.setValue(null);
                App.CateterInvasivo4ZonaInsercion.setDisabled(true);
                App.CateterInvasivo4ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C5') {
                App.IdDate5.setDisabled(true);
                App.IdFC5.setDisabled(true);
                App.IdFC5.setValue(null);
                App.IdFR5.setDisabled(true);
                App.IdFR5.setValue(null);
                App.listTE5.setDisabled(true);
                App.listTE5.setValue(null);
                App.CateterInvasivo5ZonaInsercion.setDisabled(true);
                App.CateterInvasivo5ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C6') {
                App.IdDate6.setDisabled(true);
                App.IdFC6.setDisabled(true);
                App.IdFC6.setValue(null);
                App.IdFR6.setDisabled(true);
                App.IdFR6.setValue(null);
                App.listTE6.setDisabled(true);
                App.listTE6.setValue(null);
                App.CateterInvasivo6ZonaInsercion.setDisabled(true);
                App.CateterInvasivo6ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C7') {
                App.IdDate7.setDisabled(true);
                App.IdFC7.setDisabled(true);
                App.IdFC7.setValue(null);
                App.IdFR7.setDisabled(true);
                App.IdFR7.setValue(null);
                App.listTE7.setDisabled(true);
                App.listTE7.setValue(null);
                App.CateterInvasivo7ZonaInsercion.setDisabled(true);
                App.CateterInvasivo7ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C8') {
                App.IdDate8.setDisabled(true);
                App.IdFC8.setDisabled(true);
                App.IdFC8.setValue(null);
                App.IdFR8.setDisabled(true);
                App.IdFR8.setValue(null);
                App.listTE8.setDisabled(true);
                App.listTE8.setValue(null);
                App.CateterInvasivo8ZonaInsercion.setDisabled(true);
                App.CateterInvasivo8ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C9') {
                App.IdDate9.setDisabled(true);
                App.IdFC9.setDisabled(true);
                App.IdFC9.setValue(null);
                App.IdFR9.setDisabled(true);
                App.IdFR9.setValue(null);
                App.listTE9.setDisabled(true);
                App.listTE9.setValue(null);
                App.CateterInvasivo9ZonaInsercion.setDisabled(true);
                App.CateterInvasivo9ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C10') {
                App.IdDate10.setDisabled(true);
                App.IdFC10.setDisabled(true);
                App.IdFC10.setValue(null);
                App.IdFR10.setDisabled(true);
                App.IdFR10.setValue(null);
                App.listTE10.setDisabled(true);
                App.listTE10.setValue(null);
                App.CateterInvasivo10ZonaInsercion.setDisabled(true);
                App.CateterInvasivo10ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C11') {
                App.IdDate11.setDisabled(true);
                App.IdFC11.setDisabled(true);
                App.IdFC11.setValue(null);
                App.IdFR11.setDisabled(true);
                App.IdFR11.setValue(null);
                App.listTE11.setDisabled(true);
                App.listTE11.setValue(null);
                App.CateterInvasivo11ZonaInsercion.setDisabled(true);
                App.CateterInvasivo11ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C12') {
                App.IdDate12.setDisabled(true);
                App.IdFC12.setDisabled(true);
                App.IdFC12.setValue(null);
                App.IdFR12.setDisabled(true);
                App.IdFR12.setValue(null);
                App.listTE12.setDisabled(true);
                App.listTE12.setValue(null);
                App.CateterInvasivo12ZonaInsercion.setDisabled(true);
                App.CateterInvasivo12ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C13') {
                App.IdDate13.setDisabled(true);
                App.IdFC13.setDisabled(true);
                App.IdFC13.setValue(null);
                App.IdFR13.setDisabled(true);
                App.IdFR13.setValue(null);
                App.listTE13.setDisabled(true);
                App.listTE13.setValue(null);
                App.CateterInvasivo13ZonaInsercion.setDisabled(true);
                App.CateterInvasivo13ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C14') {
                App.IdDate14.setDisabled(true);
                App.IdFC14.setDisabled(true);
                App.IdFC14.setValue(null);
                App.IdFR14.setDisabled(true);
                App.IdFR14.setValue(null);
                App.listTE14.setDisabled(true);
                App.listTE14.setValue(null);
                App.CateterInvasivo14ZonaInsercion.setDisabled(true);
                App.CateterInvasivo14ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C15') {
                App.IdDate15.setDisabled(true);
                App.IdFC15.setDisabled(true);
                App.IdFC15.setValue(null);
                App.IdFR15.setDisabled(true);
                App.IdFR15.setValue(null);
                App.listTE15.setDisabled(true);
                App.listTE15.setValue(null);
                App.CateterInvasivo15ZonaInsercion.setDisabled(true);
                App.CateterInvasivo15ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C16') {
                App.IdDate16.setDisabled(true);
                App.IdFC16.setDisabled(true);
                App.IdFC16.setValue(null);
                App.IdFR16.setDisabled(true);
                App.IdFR16.setValue(null);
                App.listTE16.setDisabled(true);
                App.listTE16.setValue(null);
                App.CateterInvasivo16ZonaInsercion.setDisabled(true);
                App.CateterInvasivo16ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C17') {
                App.IdDate17.setDisabled(true);
                App.IdFC17.setDisabled(true);
                App.IdFC17.setValue(null);
                App.IdFR17.setDisabled(true);
                App.IdFR17.setValue(null);
                App.listTE17.setDisabled(true);
                App.listTE17.setValue(null);
                App.CateterInvasivo17ZonaInsercion.setDisabled(true);
                App.CateterInvasivo17ZonaInsercion.setValue(null);
            }
            if (pregunta == 'C18') {
                App.IdDate18.setDisabled(true);
                App.IdFC18.setDisabled(true);
                App.IdFC18.setValue(null);
                App.IdFR18.setDisabled(true);
                App.IdFR18.setValue(null);
                App.listTE18.setDisabled(true);
                App.listTE18.setValue(null);
                App.CateterInvasivo18ZonaInsercion.setDisabled(true);
                App.CateterInvasivo18ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C19') {
                App.IdDate19.setDisabled(true);
                App.IdFC19.setDisabled(true);
                App.IdFC19.setValue(null);
                App.IdFR19.setDisabled(true);
                App.IdFR19.setValue(null);
                App.listTE19.setDisabled(true);
                App.listTE19.setValue(null);
                App.CateterInvasivo19ZonaInsercion.setDisabled(true);
                App.CateterInvasivo19ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C20') {
                App.IdDate20.setDisabled(true);
                App.IdFC20.setDisabled(true);
                App.IdFC20.setValue(null);
                App.IdFR20.setDisabled(true);
                App.IdFR20.setValue(null);
                App.listTE20.setDisabled(true);
                App.listTE20.setValue(null);
                App.CateterInvasivo20ZonaInsercion.setDisabled(true);
                App.CateterInvasivo20ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C21') {
                App.IdDate21.setDisabled(true);
                App.IdFC21.setDisabled(true);
                App.IdFC21.setValue(null);
                App.IdFR21.setDisabled(true);
                App.IdFR21.setValue(null);
                App.listTE21.setDisabled(true);
                App.listTE21.setValue(null);
                App.CateterInvasivo21ZonaInsercion.setDisabled(true);
                App.CateterInvasivo21ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C22') {
                App.IdDate22.setDisabled(true);
                App.IdFC22.setDisabled(true);
                App.IdFC22.setValue(null);
                App.IdFR22.setDisabled(true);
                App.IdFR22.setValue(null);
                App.listTE22.setDisabled(true);
                App.listTE22.setValue(null);
                App.CateterInvasivo22ZonaInsercion.setDisabled(true);
                App.CateterInvasivo22ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C23') {
                App.IdDate23.setDisabled(true);
                App.IdFC23.setDisabled(true);
                App.IdFC23.setValue(null);
                App.IdFR23.setDisabled(true);
                App.IdFR23.setValue(null);
                App.listTE23.setDisabled(true);
                App.listTE23.setValue(null);
                App.CateterInvasivo23ZonaInsercion.setDisabled(true);
                App.CateterInvasivo23ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C24') {
                App.IdDate24.setDisabled(true);
                App.IdFC24.setDisabled(true);
                App.IdFC24.setValue(null);
                App.IdFR24.setDisabled(true);
                App.IdFR24.setValue(null);
                App.listTE24.setDisabled(true);
                App.listTE24.setValue(null);
                App.CateterInvasivo24ZonaInsercion.setDisabled(true);
                App.CateterInvasivo24ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C25') {
                App.IdDate25.setDisabled(true);
                App.IdFC25.setDisabled(true);
                App.IdFC25.setValue(null);
                App.IdFR25.setDisabled(true);
                App.IdFR25.setValue(null);
                App.listTE25.setDisabled(true);
                App.listTE25.setValue(null);
                App.CateterInvasivo25ZonaInsercion.setDisabled(true);
                App.CateterInvasivo25ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C26') {
                App.IdDate26.setDisabled(true);
                App.IdFC26.setDisabled(true);
                App.IdFC26.setValue(null);
                App.IdFR26.setDisabled(true);
                App.IdFR26.setValue(null);
                App.listTE26.setDisabled(true);
                App.listTE26.setValue(null);
                App.CateterInvasivo26ZonaInsercion.setDisabled(true);
                App.CateterInvasivo26ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C27') {
                App.IdDate27.setDisabled(true);
                App.IdFC27.setDisabled(true);
                App.IdFC27.setValue(null);
                App.IdFR27.setDisabled(true);
                App.IdFR27.setValue(null);
                App.listTE27.setDisabled(true);
                App.listTE27.setValue(null);
                App.CateterInvasivo27ZonaInsercion.setDisabled(true);
                App.CateterInvasivo27ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C28') {
                App.IdDate28.setDisabled(true);
                App.IdFC28.setDisabled(true);
                App.IdFC28.setValue(null);
                App.IdFR28.setDisabled(true);
                App.IdFR28.setValue(null);
                App.listTE28.setDisabled(true);
                App.listTE28.setValue(null);
                App.CateterInvasivo28ZonaInsercion.setDisabled(true);
                App.CateterInvasivo28ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C29') {
                App.IdDate29.setDisabled(true);
                App.IdFC29.setDisabled(true);
                App.IdFC29.setValue(null);
                App.IdFR29.setDisabled(true);
                App.IdFR29.setValue(null);
                App.listTE29.setDisabled(true);
                App.listTE29.setValue(null);
                App.CateterInvasivo29ZonaInsercion.setDisabled(true);
                App.CateterInvasivo29ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C30') {
                App.IdDate30.setDisabled(true);
                App.IdFC30.setDisabled(true);
                App.IdFC30.setValue(null);
                App.IdFR30.setDisabled(true);
                App.IdFR30.setValue(null);
                App.listTE30.setDisabled(true);
                App.listTE30.setValue(null);
                App.Drenajes1ZonaInsercion.setDisabled(true);
                App.Drenajes1ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C31') {
                App.IdDate31.setDisabled(true);
                App.IdFC31.setDisabled(true);
                App.IdFC31.setValue(null);
                App.IdFR31.setDisabled(true);
                App.IdFR31.setValue(null);
                App.listTE31.setDisabled(true);
                App.listTE31.setValue(null);
                App.Drenajes2ZonaInsercion.setDisabled(true);
                App.Drenajes2ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C32') {
                App.IdDate32.setDisabled(true);
                App.IdFC32.setDisabled(true);
                App.IdFC32.setValue(null);
                App.IdFR32.setDisabled(true);
                App.IdFR32.setValue(null);
                App.listTE32.setDisabled(true);
                App.listTE32.setValue(null);
                App.Drenajes3ZonaInsercion.setDisabled(true);
                App.Drenajes3ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C33') {
                App.IdDate33.setDisabled(true);
                App.IdFC33.setDisabled(true);
                App.IdFC33.setValue(null);
                App.IdFR33.setDisabled(true);
                App.IdFR33.setValue(null);
                App.listTE33.setDisabled(true);
                App.listTE33.setValue(null);
                App.Drenajes4ZonaInsercion.setDisabled(true);
                App.Drenajes4ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C34') {
                App.IdDate34.setDisabled(true);
                App.IdFC34.setDisabled(true);
                App.IdFC34.setValue(null);
                App.IdFR34.setDisabled(true);
                App.IdFR34.setValue(null);
                App.listTE34.setDisabled(true);
                App.listTE34.setValue(null);
                App.Drenajes5ZonaInsercion.setDisabled(true);
                App.Drenajes5ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C35') {
                App.IdDate35.setDisabled(true);
                App.IdFC35.setDisabled(true);
                App.IdFC35.setValue(null);
                App.IdFR35.setDisabled(true);
                App.IdFR35.setValue(null);
                App.listTE35.setDisabled(true);
                App.listTE35.setValue(null);
                App.Drenajes6ZonaInsercion.setDisabled(true);
                App.Drenajes6ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C36') {
                App.IdDate36.setDisabled(true);
                App.IdFC36.setDisabled(true);
                App.IdFC36.setValue(null);
                App.IdFR36.setDisabled(true);
                App.IdFR36.setValue(null);
                App.listTE36.setDisabled(true);
                App.listTE36.setValue(null);
                App.Drenajes7ZonaInsercion.setDisabled(true);
                App.Drenajes7ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C37') {
                App.IdDate37.setDisabled(true);
                App.IdFC37.setDisabled(true);
                App.IdFC37.setValue(null);
                App.IdFR37.setDisabled(true);
                App.IdFR37.setValue(null);
                App.listTE37.setDisabled(true);
                App.listTE37.setValue(null);
                App.Drenajes8ZonaInsercion.setDisabled(true);
                App.Drenajes8ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C38') {
                App.IdDate38.setDisabled(true);
                App.IdFC38.setDisabled(true);
                App.IdFC38.setValue(null);
                App.IdFR38.setDisabled(true);
                App.IdFR38.setValue(null);
                App.listTE38.setDisabled(true);
                App.listTE38.setValue(null);
                App.Drenajes9ZonaInsercion.setDisabled(true);
                App.Drenajes9ZonaInsercion.setValue(null);
            }

            if (pregunta == 'C39') {
                App.IdDate39.setDisabled(true);
                App.IdFC39.setDisabled(true);
                App.IdFC39.setValue(null);
                App.IdFR39.setDisabled(true);
                App.IdFR39.setValue(null);
                App.listTE39.setDisabled(true);
                App.listTE39.setValue(null);
                App.Drenajes10ZonaInsercion.setDisabled(true);
                App.Drenajes10ZonaInsercion.setValue(null);
            }


        }

    };

    /***************/
    function InsertRowNew(valor, estado, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {

            var grid = Ext.getCmp("GridPanelInmunizacion");
            var conta = grid.store.getCount();
            if (secuenciaMax == 1 && conta > 0) {
                App.StoreAtencion.each(function (r) {

                    var secuencia = r.get('ValorCodigo3');
                    if (parseInt(secuenciaMax) <= parseInt(secuencia)) {
                        secuenciaMax = parseInt(secuencia) + 1;
                    }
                });
            }

          /*  if(secuenciaMax < parseInt(SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX))
            {
              secuenciaMax = parseInt(SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDSECUENCIA_AUX)+1;
            }
        */

            setIndicaCambios(true);
            grid.store.insert(parseInt(conta), {
                CodigoElemento: secuenciaMax,/*count++,*/
                ValorCodigo1: '',
                ValorCodigo3: secuenciaMax,/*count++,*/
                ACCION: 'NUEVO'
            }
            );


            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);

            secuenciaMax = secuenciaMax + 1;
        }
    }



    </script>
}


@section cuerpo
{

    @(X.Window()
        .ID("Window1")
            .Title("Localización de dispositivos")
        .Width(1216)
        .Height(694)
        .Modal(true)
        .AutoRender(false)
        .Collapsible(false)
        .Maximizable(false)
        .Hidden(true)
        .Loader(X.ComponentLoader()
                .Url("/Dispositivos/")
            .Mode(LoadMode.Frame)
            .LoadMask(lm => lm.ShowMask = true)
        )
    )


    @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)
        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .Height(450)
                .Collapsible(true)
                .AutoScroll(true)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";
                })
               .Items(
               X.TextFieldFor(d => d.Idvigilancia_dispositivos).FieldLabel("").ReadOnly(true).LabelWidth(60).Width(140).Hidden(true),
                    X.Label().Hidden(false)
                            .Border(false)
                            .PaddingSpec("15")
                            .Html("<b><font  size='3.5em'; color='black'>VIGILANCIA DE DISPOSITIVOS INVASIVOS</font></b>"),
                     X.Container().Layout(LayoutType.HBox)
                                  .MarginSpec("05 05 05 00")
                                  .Items(
                                  X.Label().Hidden(false)
                                                    .Border(false)
                                                    .PaddingSpec("15")
                                                    .Html("<b><font  size='2.5em'; color='black'>Procedimientos Invasivos:</font></b>"),
                                 X.RadioGroupFor(m => m.ProcedimientosInvasivos, new List<Radio.Config> {
                                    new Radio.Config{BoxLabel = "Si", InputValue = "S",
                                                    Checked=(Model.ProcedimientosInvasivos=="S"?true:false),
                                                    ReadOnly =indicaModoLectura,
                                                    Handler="eventoRadio(this, 'RG1', 1);"},
                                    new Radio.Config{BoxLabel = "No" , InputValue = "N"
                                                ,  Checked=(Model.ProcedimientosInvasivos=="N"?true:false)
                                               // ,  Disabled =indicaTieneVacuna
                                                ,  ReadOnly =indicaModoLectura
                                                ,  Handler="eventoRadio(this, 'RG1', 0);"}
                                    //            ,
                                    //new Radio.Config{BoxLabel = "Ignora" , InputValue = "X"
                                    //            ,  Checked=(Model.ProcedimientosInvasivos=="X"?true:false)
                                    //            ,  Disabled =indicaTieneVacuna
                                    //            ,  ReadOnly =indicaModoLectura
                                    //            ,  Handler="eventoRadio(this, 'RG1', 2);"}

                                    })
                                .Vertical(false)
                                .PaddingSpec("15")
                                .LabelWidth(180).Width(300)
                                .FieldLabel("")
                                .AnchorVertical("100%")
                                )
                , X.TextFieldFor(m => m.ProcedimientosInvasivos).Hidden(true).ID("IdFlag")

               , X.FieldSet().ID("fsCateterInvasivos").Hidden(Model.ProcedimientosInvasivos != "S")
                            .Collapsible(true).AutoScroll(true)
                            .ColumnWidth(0.4).Title("CATÉTER INVASIVOS")
                            .Layout(LayoutType.VBox)
                            .MarginSpec("05 05 0 05")
                            .Height(1040)
                            .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "150"));
                                    d.Add(new Parameter("DefaultAnchor", "100%"));
                                    d.Add(new Parameter("LabelAlign", "Left"));
                                })
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                            .Items(

                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(
                                    X.Component().Width(250),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha Inicio</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha curación</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha Recambio</font></b>"),
                                    X.Component().Width(20),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Motivo de Cambio</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Zona de inserción</font></b>")

                                  )
                //FIELSET 1

                      , X.Component().Height(2),
                      X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(


                                    X.CheckboxGroupFor(m => m.CateterInvasivo1, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo1=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C1', 'N');"}
                                    }).ID("Chb1")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.5em'; color='black'>Catéter periférico con branula.</font>")
                                            .Width(180).Hidden(false).Disabled(Model.CateterInvasivo1 == "S" ? false : true),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo1Fechainicio).Format("dd/MM/yyyy").ID("IdDate1")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .LabelWidth(100).Editable(false)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo1Fechainicio)
                                                            .Disabled(Model.CateterInvasivo1 == "S" ? false : true)
                // , X.Component().Width(30), //Con fecha curación
                                  , X.Component().Width(130), //Sin fecha curación
                                  X.TextFieldFor(m => m.CateterInvasivo1FechaCuracion).ID("IdFC1").Disabled(Model.CateterInvasivo1 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo1FechaRecambio).ID("IdFR1").Disabled(Model.CateterInvasivo1 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo1 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo1MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                             .Disabled(Model.CateterInvasivo1 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(45)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE1")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo1ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo1ZonaInsercion == null ? "" : Model.CateterInvasivo1ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo1 == "S" ? false : true)


                                  ))
                //FIELSET 2
                     , X.Component().Height(2)
                      , X.FieldSet().Border(true)
                               .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                               X.CheckboxGroupFor(m => m.CateterInvasivo2, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo2=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C2', 'N');"}
                                    }).ID("Chb2")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.5em'; color='black'>Catéter periférico con íntima.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo2Fechainicio).Format("dd/MM/yyyy").ID("IdDate2")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo2Fechainicio)
                                                            .Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                // , X.Component().Width(30), //Con fecha curación
                                  , X.Component().Width(130), //Sin fecha curación
                                  X.TextFieldFor(m => m.CateterInvasivo2FechaCuracion).ID("IdFC2")//.Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo2FechaRecambio).ID("IdFR2").Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo2 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo2MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                            .Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(45)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE2")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo2ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo2ZonaInsercion == null ? "" : Model.CateterInvasivo2ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo2 == "S" ? false : true)


                                  ))
                //FIELSET 3
                      , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo3, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo3=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C3', 'N');"}
                                    }).ID("Chb3")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.5em'; color='black'>Catéter Porth.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo3Fechainicio).Format("dd/MM/yyyy").ID("IdDate3")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo3 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo3Fechainicio)
                                                            .Disabled(Model.CateterInvasivo3 == "S" ? false : true)

                                    , X.Component().Width(30), //Con fecha curación

                                  X.TextFieldFor(m => m.CateterInvasivo3FechaCuracion).ID("IdFC3").Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo3 == "S" ? false : true),
                                   X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo3FechaRecambio).ID("IdFR3").Disabled(Model.CateterInvasivo2 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo3 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo3MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo3 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(45)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE3")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo3ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo3ZonaInsercion == null ? "" : Model.CateterInvasivo3ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo3 == "S" ? false : true)

                                  ))
                //FIELSET 4
                      , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo4, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo4=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C4', 'N');"}
                                    }).ID("Chb4")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.5em'; color='black'>Catéter Epidural.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo4Fechainicio).Format("dd/MM/yyyy").ID("IdDate4")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo4 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo4Fechainicio)
                                                            .Disabled(Model.CateterInvasivo4 == "S" ? false : true)
                                 , X.Component().Width(30),
                                 X.TextFieldFor(m => m.CateterInvasivo4FechaCuracion).ID("IdFC4").Hidden(true)//.Disabled(Model.CateterInvasivo4 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo4FechaRecambio).ID("IdFR4").Hidden(true)//Disabled(Model.CateterInvasivo4 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo4MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo4 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(45)
                                                            .Hidden(true)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE4")
                                  , X.Component().Width(130)
                                  , X.TextFieldFor(m => m.CateterInvasivo4ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo4ZonaInsercion == null ? "" : Model.CateterInvasivo4ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo4 == "S" ? false : true)

                                  ))
                //FIELSET 5
                      , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                 X.CheckboxGroupFor(m => m.CateterInvasivo5, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo5=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C5', 'N');"}
                                    }).ID("Chb5")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.5em'; color='black'>Catéter Subcutáneo.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo5Fechainicio).Format("dd/MM/yyyy").ID("IdDate5")
                                                            .Width(100)
                                                            .FieldLabel("").Editable(false)
                                                            .LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo5Fechainicio)
                                                            .Disabled(Model.CateterInvasivo5 == "S" ? false : true)
                // , X.Component().Width(30), //Con fecha curación
                                  , X.Component().Width(160), //Sin fecha curación
                                  X.TextFieldFor(m => m.CateterInvasivo5FechaCuracion).ID("IdFC5")//.Disabled(Model.CateterInvasivo5 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(0),
                                  X.TextFieldFor(m => m.CateterInvasivo5FechaRecambio).ID("IdFR5")//.Disabled(Model.CateterInvasivo5 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(140),
                                    X.ComboBoxFor(m => m.CateterInvasivo5MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                 .Disabled(Model.CateterInvasivo5 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(45)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE5")
                                                            .Hidden(false)
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo5ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo5ZonaInsercion == null ? "" : Model.CateterInvasivo5ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo5 == "S" ? false : true)

                                  ))
                //FIELSET 6
                      , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "160")); })
                                .Items(

                                   X.CheckboxGroupFor(m => m.CateterInvasivo6, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo6=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C6', 'N');"}
                                    }).ID("Chb6")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.6em'; color='black'>Catéter de Alto Flujo.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo6Fechainicio).Format("dd/MM/yyyy").ID("IdDate6")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo6 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo6Fechainicio)
                                                            .Disabled(Model.CateterInvasivo6 == "S" ? false : true)
                // , X.Component().Width(30), //Con fecha curación
                                  , X.Component().Width(30), //Sin fecha curación
                                  X.TextFieldFor(m => m.CateterInvasivo6FechaCuracion).ID("IdFC6")//.Disabled(Model.CateterInvasivo6 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo6 == "S" ? false : true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo6FechaRecambio).ID("IdFR6").Disabled(Model.CateterInvasivo6 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo6 == "S" ? false : true),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo6 == "S" ? false : true),  //Sin fecha curacion , ni fech. recambio
                                    X.ComboBoxFor(m => m.CateterInvasivo6MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo6 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(46)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE6")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo6ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo6ZonaInsercion == null ? "" : Model.CateterInvasivo6ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo6 == "S" ? false : true)

                                  ))
                //FIELSET 7
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                X.CheckboxGroupFor(m => m.CateterInvasivo7, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo7=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C7', 'N');"}
                                    }).ID("Chb7")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.7em'; color='black'>Catéter urinario.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo7Fechainicio).Format("dd/MM/yyyy").ID("IdDate7")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo7Fechainicio)
                                                            .Disabled(Model.CateterInvasivo7 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo7FechaCuracion).ID("IdFC7").Hidden(true)//Disabled(Model.CateterInvasivo7 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo7FechaRecambio).ID("IdFR7").Disabled(Model.CateterInvasivo7 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo7 == "S" ? false : true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo7MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo7 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(47)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE7")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo7ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo7ZonaInsercion == null ? "" : Model.CateterInvasivo7ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo7 == "S" ? false : true)

                                  ))
                //FIELSET 8
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                               X.CheckboxGroupFor(m => m.CateterInvasivo8, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo8=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C8', 'N');"}
                                    }).ID("Chb8")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.8em'; color='black'>Catéter urinario siliconada.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo8Fechainicio).Format("dd/MM/yyyy").ID("IdDate8")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo8Fechainicio)
                                                            .Disabled(Model.CateterInvasivo8 == "S" ? false : true)
                                  , X.Component().Width(130),  //30 sin el hidden
                                  X.TextFieldFor(m => m.CateterInvasivo8FechaCuracion).ID("IdFC8").Disabled(Model.CateterInvasivo8 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo8FechaRecambio).ID("IdFR8").Disabled(Model.CateterInvasivo8 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo8 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo8MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                             .Disabled(Model.CateterInvasivo8 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(48)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE8")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo8ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo8ZonaInsercion == null ? "" : Model.CateterInvasivo8ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo8 == "S" ? false : true)

                                  ))
                //FIELSET 9
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                     X.CheckboxGroupFor(m => m.CateterInvasivo9, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo9=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C9', 'N');"}
                                    }).ID("Chb9")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.9em'; color='black'>Catéter Percutáneo (PIC).</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo9Fechainicio).Format("dd/MM/yyyy").ID("IdDate9")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo9FechaCuracion == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo9Fechainicio)
                                                            .Disabled(Model.CateterInvasivo9 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo9FechaCuracion).ID("IdFC9").Disabled(Model.CateterInvasivo9 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo9FechaRecambio).ID("IdFR9").Hidden(true)//Disabled(Model.CateterInvasivo9 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo9MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo9 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .LabelWidth(49)
                                                            .SimpleSubmit(true)
                                                            .ID("listTE9")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo9ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo9ZonaInsercion == null ? "" : Model.CateterInvasivo9ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo9 == "S" ? false : true)

                                  ))

//FIELSET 10
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                   X.CheckboxGroupFor(m => m.CateterInvasivo10, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo10=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C10', 'N');"}
                                    }).ID("Chb10")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Catéter Arterial.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo10Fechainicio).Format("dd/MM/yyyy").ID("IdDate10")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo10FechaCuracion == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo10Fechainicio)
                                                            .Disabled(Model.CateterInvasivo10 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo10FechaCuracion).ID("IdFC10").Hidden(true)//Disabled(Model.CateterInvasivo10 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),

                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo10FechaRecambio).ID("IdFR10").Hidden(true)//.Disabled(Model.CateterInvasivo10 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo10MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo10 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE10")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo10ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo10ZonaInsercion == null ? "" : Model.CateterInvasivo10ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo10 == "S" ? false : true)

                                  ))
                //FIELSET 11
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                               X.CheckboxGroupFor(m => m.CateterInvasivo11, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo11=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C11', 'N');"}
                                    }).ID("Chb11")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Cat. Umbilical arterial.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo11Fechainicio).Format("dd/MM/yyyy").ID("IdDate11")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Editable(false).Disabled(Model.CateterInvasivo11 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo11Fechainicio)
                                                            .Disabled(Model.CateterInvasivo11 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo11FechaCuracion).ID("IdFC11")//.Disabled(Model.CateterInvasivo11 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo11 == "S" ? false : true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo11FechaRecambio).ID("IdFR11").Hidden(true)//Disabled(Model.CateterInvasivo11 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo11MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                            .Disabled(Model.CateterInvasivo11 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE11")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo11ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo11ZonaInsercion == null ? "" : Model.CateterInvasivo11ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo11 == "S" ? false : true)

                                  ))
                //FIELSET 12
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                     X.CheckboxGroupFor(m => m.CateterInvasivo12, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo12=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C12', 'N');"}
                                    }).ID("Chb12")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Cat. Umbilical venoso.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo12Fechainicio).Format("dd/MM/yyyy").ID("IdDate12")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo12 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo12Fechainicio)
                                                            .Disabled(Model.CateterInvasivo12 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo12FechaCuracion).ID("IdFC12").Disabled(Model.CateterInvasivo12 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo12FechaRecambio).ID("IdFR12").Hidden(true)//Disabled(Model.CateterInvasivo12 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo12MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo12 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE12")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo12ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo12ZonaInsercion == null ? "" : Model.CateterInvasivo12ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo12 == "S" ? false : true)

                                  ))
                //FIELSET 13
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo13, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo13=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C13', 'N');"}
                                    }).ID("Chb13")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Cat. Dialisis permanente.</font>")
                                            .Width(180),
                                     X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo13Fechainicio).Format("dd/MM/yyyy").ID("IdDate13")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo13Fechainicio)
                                                            .Disabled(Model.CateterInvasivo13 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo13FechaCuracion).ID("IdFC13").Hidden(true)//Disabled(Model.CateterInvasivo13 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo13FechaRecambio).ID("IdFR13").Hidden(true)//Disabled(Model.CateterInvasivo13 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo13MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                            .Disabled(Model.CateterInvasivo13 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE13")

                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo13ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo13ZonaInsercion == null ? "" : Model.CateterInvasivo13ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo13 == "S" ? false : true)

                                  ))
                //FIELSET 14
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                X.CheckboxGroupFor(m => m.CateterInvasivo14, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo14=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C14', 'N');"}
                                    }).ID("Chb14")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Cat. Introductores.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo14Fechainicio).Format("dd/MM/yyyy").ID("IdDate14")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo14Fechainicio)
                                                            .Disabled(Model.CateterInvasivo14 == "S" ? false : true)
                                  , X.Component().Width(130),
                                  X.TextFieldFor(m => m.CateterInvasivo14FechaCuracion).ID("IdFC14")//.Disabled(Model.CateterInvasivo14 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo14FechaRecambio).ID("IdFR14").Hidden(true)//Disabled(Model.CateterInvasivo14 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo14MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo14 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE14")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo14ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo14ZonaInsercion == null ? "" : Model.CateterInvasivo14ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo14 == "S" ? false : true)

                                  ))
                //FIELSET 15
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                               X.CheckboxGroupFor(m => m.CateterInvasivo15, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo15=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C15', 'N');"}
                                    }).ID("Chb15")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Colostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo15Fechainicio).Format("dd/MM/yyyy").ID("IdDate15")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo15Fechainicio)
                                                            .Disabled(Model.CateterInvasivo15 == "S" ? false : true)
                                  , X.Component().Width(130),
                                  X.TextFieldFor(m => m.CateterInvasivo15FechaCuracion).ID("IdFC15")//.Disabled(Model.CateterInvasivo15 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo15FechaRecambio).ID("IdFR15").Hidden(true)//Disabled(Model.CateterInvasivo15 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo15MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo15 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE15")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo15ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo15ZonaInsercion == null ? "" : Model.CateterInvasivo15ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo15 == "S" ? false : true)

                                  ))
                //FIELSET 16
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo16, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo16=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C16', 'N');"}
                                    }).ID("Chb16")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Gastrostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo16Fechainicio).Format("dd/MM/yyyy").ID("IdDate16")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo16 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo16Fechainicio)
                                                            .Disabled(Model.CateterInvasivo16 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo16FechaCuracion).ID("IdFC16").Disabled(Model.CateterInvasivo16 == "S" ? false : true)//.Disabled(Model.CateterInvasivo16 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo16FechaRecambio).ID("IdFR16")//.Disabled(Model.CateterInvasivo16 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo16 == "S" ? false : true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo16MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo16 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE16")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo16ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo16ZonaInsercion == null ? "" : Model.CateterInvasivo16ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo16 == "S" ? false : true)

                                  ))
                //FIELSET 17
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                    X.CheckboxGroupFor(m => m.CateterInvasivo17, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo17=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C17', 'N');"}
                                    }).ID("Chb17")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Hilos de marcapaso.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo17Fechainicio).Format("dd/MM/yyyy").ID("IdDate17")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo17Fechainicio)
                                                            .Disabled(Model.CateterInvasivo17 == "S" ? false : true)
                                  , X.Component().Width(130),
                                  X.TextFieldFor(m => m.CateterInvasivo17FechaCuracion).ID("IdFC17")//.Disabled(Model.CateterInvasivo17 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo17FechaRecambio).ID("IdFR17").Hidden(true)//Disabled(Model.CateterInvasivo17 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo17MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                  .Disabled(Model.CateterInvasivo17 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE17")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo17ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo17ZonaInsercion == null ? "" : Model.CateterInvasivo17ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo17 == "S" ? false : true)

                                  ))

//FIELSET 18


                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                   X.CheckboxGroupFor(m => m.CateterInvasivo18, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo18=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C18', 'N');"}
                                    }).ID("Chb18")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Ileostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo18Fechainicio).Format("dd/MM/yyyy").ID("IdDate18")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo18Fechainicio)
                                                            .Disabled(Model.CateterInvasivo18 == "S" ? false : true)
                                  , X.Component().Width(50),
                                  X.TextFieldFor(m => m.CateterInvasivo18FechaCuracion).ID("IdFC18").Hidden(true)//Disabled(Model.CateterInvasivo18 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(200),
                                  X.TextFieldFor(m => m.CateterInvasivo18FechaRecambio).ID("IdFR18")//.Disabled(Model.CateterInvasivo18 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(50),
                                    X.ComboBoxFor(m => m.CateterInvasivo18MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                             .Disabled(Model.CateterInvasivo18 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE18")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo18ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo18ZonaInsercion == null ? "" : Model.CateterInvasivo18ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo18 == "S" ? false : true)

                                  ))
                //FIELSET 19
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo19, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo19=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C19', 'N');"}
                                    }).ID("Chb19")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Nefrostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo19Fechainicio).Format("dd/MM/yyyy").ID("IdDate19")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo19FechaCuracion == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo19Fechainicio)
                                                            .Disabled(Model.CateterInvasivo19 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo19FechaCuracion).ID("IdFC19").Hidden(false).Disabled(Model.CateterInvasivo19 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo19FechaRecambio).ID("IdFR19")//.Disabled(Model.CateterInvasivo19 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo19MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo19 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE19")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo19ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo19ZonaInsercion == null ? "" : Model.CateterInvasivo19ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo19 == "S" ? false : true)

                                  ))
                //FIELSET 20
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo20, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo20=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C20', 'N');"}
                                    }).ID("Chb20")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>SNG.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo20Fechainicio).Format("dd/MM/yyyy").ID("IdDate20")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo20 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo20Fechainicio)
                                                            .Disabled(Model.CateterInvasivo20 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo20FechaCuracion).ID("IdFC20").Hidden(true)//Disabled(Model.CateterInvasivo20 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo20FechaRecambio).ID("IdFR20").Disabled(Model.CateterInvasivo20 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo20 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo20MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo20 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE20")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo20ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo20ZonaInsercion == null ? "" : Model.CateterInvasivo20ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo20 == "S" ? false : true)

                                  ))
                //FIELSET 21
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo21, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo21=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C21', 'N');"}
                                    }).ID("Chb21")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>SNG siliconada.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo21Fechainicio).Format("dd/MM/yyyy").ID("IdDate21")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo21 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo21Fechainicio)
                                                            .Disabled(Model.CateterInvasivo21 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo21FechaCuracion).ID("IdFC21").Hidden(true)//Disabled(Model.CateterInvasivo21 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo21FechaRecambio).ID("IdFR21").Disabled(Model.CateterInvasivo21 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo21MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo21 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE21")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo21ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo21ZonaInsercion == null ? "" : Model.CateterInvasivo21ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo21 == "S" ? false : true)

                                  ))
                //FIELSET 22
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo22, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo22=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C22', 'N');"}
                                    }).ID("Chb22")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Sonda Nasoyeyunal.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo22Fechainicio).Format("dd/MM/yyyy").ID("IdDate22")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo22 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo22Fechainicio)
                                                            .Disabled(Model.CateterInvasivo22 == "S" ? false : true)
                                  , X.Component().Width(130),
                                  X.TextFieldFor(m => m.CateterInvasivo22FechaCuracion).ID("IdFC22")//.Disabled(Model.CateterInvasivo22 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo22FechaRecambio).ID("IdFR22")//.Disabled(Model.CateterInvasivo22 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo22 == "S" ? false : true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo22MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo22 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE22")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo22ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo22ZonaInsercion == null ? "" : Model.CateterInvasivo22ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo22 == "S" ? false : true)

                                  ))
                //FIELSET 23
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo23, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo23=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C23', 'N');"}
                                    }).ID("Chb23")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Sonda Orogástrica.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo23Fechainicio).Format("dd/MM/yyyy").ID("IdDate23")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo23 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo23Fechainicio)
                                                            .Disabled(Model.CateterInvasivo23 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo23FechaCuracion).ID("IdFC23")//.Disabled(Model.CateterInvasivo23 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo23FechaRecambio).ID("IdFR23").Disabled(Model.CateterInvasivo23 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo23 == "S" ? false : true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo23MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                              .Disabled(Model.CateterInvasivo23 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE23")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo23ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo23ZonaInsercion == null ? "" : Model.CateterInvasivo23ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo23 == "S" ? false : true)

                                  ))
                //FIELSET 24
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo24, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo24=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C24', 'N');"}
                                    }).ID("Chb24")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Sonda Rectal.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo24Fechainicio).Format("dd/MM/yyyy").ID("IdDate24")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo24Fechainicio)
                                                             .Disabled(Model.CateterInvasivo24 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo24FechaCuracion).ID("IdFC24").Hidden(true)//Disabled(Model.CateterInvasivo24 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo24FechaRecambio).ID("IdFR24").Hidden(true)//Disabled(Model.CateterInvasivo24 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo24MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo24 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE24")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo24ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo24ZonaInsercion == null ? "" : Model.CateterInvasivo24ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo24 == "S" ? false : true)

                                  ))
                //FIELSET 25
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo25, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo25=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C25', 'N');"}
                                    }).ID("Chb25")

                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Talla Vesical.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo25Fechainicio).Format("dd/MM/yyyy").ID("IdDate25")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo25FechaCuracion == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo25Fechainicio)
                                                            .Disabled(Model.CateterInvasivo25 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo25FechaCuracion).ID("IdFC25").Disabled(Model.CateterInvasivo25 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo25FechaRecambio).ID("IdFR25").Hidden(true)//Disabled(Model.CateterInvasivo25 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.CateterInvasivo25MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo25 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE25")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo25ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo25ZonaInsercion == null ? "" : Model.CateterInvasivo25ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo25 == "S" ? false : true)

                                  ))
                //FIELSET 26
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo26, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo26=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C26', 'N');"}
                                    }).ID("Chb26")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Traqueostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo26Fechainicio).Format("dd/MM/yyyy").ID("IdDate26")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo26FechaCuracion == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo26Fechainicio)
                                                            .Disabled(Model.CateterInvasivo26 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo26FechaCuracion).ID("IdFC26").Disabled(Model.CateterInvasivo26 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo26FechaRecambio).ID("IdFR26")//.Disabled(Model.CateterInvasivo26 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo26MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo26 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE26")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo26ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo26ZonaInsercion == null ? "" : Model.CateterInvasivo26ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo26 == "S" ? false : true)

                                  ))

                                  //FIELSET 27
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo27, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo27=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C27', 'N');"}
                                    }).ID("Chb27")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Tubo endotraqueal.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo27Fechainicio).Format("dd/MM/yyyy").ID("IdDate27")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo27Fechainicio)
                                                            .Disabled(Model.CateterInvasivo27 == "S" ? false : true)
                                  , X.Component().Width(130),
                                  X.TextFieldFor(m => m.CateterInvasivo27FechaCuracion).ID("IdFC27")//.Disabled(Model.CateterInvasivo27 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.CateterInvasivo27FechaRecambio).ID("IdFR27")//.Disabled(Model.CateterInvasivo27 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo27MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo27 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE27")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo27ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo27ZonaInsercion == null ? "" : Model.CateterInvasivo27ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo27 == "S" ? false : true)

                                  ))

                                                 //FIELSET 28
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo28, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo28=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C28', 'N');"}
                                    }).ID("Chb28")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Vía Central.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo28Fechainicio).Format("dd/MM/yyyy").ID("IdDate28")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo28 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo28Fechainicio)
                                                            .Disabled(Model.CateterInvasivo28 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo28FechaCuracion).ID("IdFC28")//.Disabled(Model.CateterInvasivo28 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo28 == "S" ? false : true),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo28FechaRecambio).ID("IdFR28").Disabled(Model.CateterInvasivo28 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false).Disabled(Model.CateterInvasivo28 == "S" ? false : true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.CateterInvasivo28MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo28 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE28")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo28ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo28ZonaInsercion == null ? "" : Model.CateterInvasivo28ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo28 == "S" ? false : true)

                                  ))
                //FIELSET 29
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.CateterInvasivo29, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.CateterInvasivo29=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C29', 'N');"}
                                    }).ID("Chb29")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Yeyunostomía.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.CateterInvasivo29Fechainicio).Format("dd/MM/yyyy").ID("IdDate29")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100).Hidden(false).Disabled(Model.CateterInvasivo29 == "S" ? false : true)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.CateterInvasivo29Fechainicio)
                                                            .Disabled(Model.CateterInvasivo29 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.CateterInvasivo29FechaCuracion).ID("IdFC29").Disabled(Model.CateterInvasivo29 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(false),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.CateterInvasivo29FechaRecambio).ID("IdFR29").Disabled(Model.CateterInvasivo29 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30).Hidden(false).Disabled(Model.CateterInvasivo29 == "S" ? false : true),
                                    X.ComboBoxFor(m => m.CateterInvasivo29MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.CateterInvasivo29 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE29")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.CateterInvasivo29ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.CateterInvasivo29ZonaInsercion == null ? "" : Model.CateterInvasivo29ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.CateterInvasivo29 == "S" ? false : true)

                                  ))
                // Comentar fin

                            ),
                             X.FieldSet().ID("fsDrenaje").Hidden(Model.ProcedimientosInvasivos != "S")
                            .Collapsible(true).AutoScroll(true)
                            .ColumnWidth(0.4).Title("DRENAJES")
                            .Layout(LayoutType.VBox)
                            .MarginSpec("05 05 0 05")
                            .Height(450)
                            .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "150"));
                                    d.Add(new Parameter("DefaultAnchor", "100%"));
                                    d.Add(new Parameter("LabelAlign", "Left"));
                                })
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                            .Items(
                             X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                     .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                     .Items(
                                    X.Component().Width(250),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha Inicio</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha curación</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Fecha Recambio</font></b>"),
                                    X.Component().Width(20),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Motivo de Cambio</font></b>"),
                                    X.Component().Width(40),
                                    X.Label().Hidden(false).Border(false).Html("<b><font  size='2.5em'; color='black'>Zona de Inserción</font></b>")

                                  )
                //FIELSET 30
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes1, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes1=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C30', 'N');"}
                                    }).ID("Chb30")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje a presión negativa.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes1Fechainicio).Format("dd/MM/yyyy").ID("IdDate30")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes1Fechainicio)
                                                            .Disabled(Model.Drenajes1 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes1FechaCuracion).Disabled(Model.Drenajes1 == "S" ? false : true).ID("IdFC30")
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.Drenajes1FechaRecambio).ID("IdFR30").Disabled(Model.Drenajes1 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes1MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes1 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE30")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes1ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes1ZonaInsercion == null ? "" : Model.Drenajes1ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes1 == "S" ? false : true)

                                  ))
                //FIELSET 31
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes2, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes2=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C31', 'N');"}
                                    }).ID("Chb31")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje laminar (Penrose, Guante).</font>")
                                            .Width(180).Height(36),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes2Fechainicio).Format("dd/MM/yyyy").ID("IdDate31")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes2Fechainicio)
                                                            .Disabled(Model.Drenajes2 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes2FechaCuracion).ID("IdFC31").Disabled(Model.Drenajes2FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.Drenajes2FechaRecambio).ID("IdFR31")//.Disabled(Model.Drenajes2 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes2MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes2 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE31")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes2ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes2ZonaInsercion == null ? "" : Model.Drenajes2ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes2 == "S" ? false : true)

                                  ))
                //FIELSET 32
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes3, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes3=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C32', 'N');"}
                                    }).ID("Chb32")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje torácico derecho (Pleural).</font>")
                                            .Width(180).Height(36),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes3Fechainicio).Format("dd/MM/yyyy").ID("IdDate32")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes3Fechainicio)
                                                            .Disabled(Model.Drenajes3 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes3FechaCuracion).ID("IdFC32").Disabled(Model.Drenajes3FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.DateFieldFor(m => m.Drenajes3FechaRecambio).ID("IdFR32").Format("dd/MM/yyyy").Disabled(Model.Drenajes3FechaRecambio == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes3MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes3 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE32")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes3ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes3ZonaInsercion == null ? "" : Model.Drenajes3ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes3 == "S" ? false : true)

                                  ))
                //FIELSET 33
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes4, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes4=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C33', 'N');"}
                                    }).ID("Chb33")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje torácico izquierdo (Pleural).</font>")
                                            .Width(180).Height(36),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes4Fechainicio).Format("dd/MM/yyyy").ID("IdDate33")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes4Fechainicio)
                                                            .Disabled(Model.Drenajes4 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes4FechaCuracion).ID("IdFC33").Disabled(Model.Drenajes4FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.DateFieldFor(m => m.Drenajes4FechaRecambio).ID("IdFR33").Format("dd/MM/yyyy").Disabled(Model.Drenajes4FechaRecambio == "S" ? false : true)
                                 .Editable(false).Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes4MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                            .Disabled(Model.Drenajes4 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE33")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes4ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes4ZonaInsercion == null ? "" : Model.Drenajes4ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes4 == "S" ? false : true)

                                  ))
                //FIELSET 34
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes5, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes5=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C34', 'N');"}
                                    }).ID("Chb34")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje torácico (Pericardico).</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes5Fechainicio).Format("dd/MM/yyyy").ID("IdDate34")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes5Fechainicio)
                                                            .Disabled(Model.Drenajes5 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes5FechaCuracion).ID("IdFC34").Disabled(Model.Drenajes5FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.DateFieldFor(m => m.Drenajes5FechaRecambio).ID("IdFR34").Format("dd/MM/yyyy").Disabled(Model.Drenajes5FechaRecambio == "S" ? false : true)
                                  .Editable(false).Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes5MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes5 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE34")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes5ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes5ZonaInsercion == null ? "" : Model.Drenajes5ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes5 == "S" ? false : true)

                                  ))
                //FIELSET 35
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes6, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes6=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C35', 'N');"}
                                    }).ID("Chb35")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje tubular (Kher).</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes6Fechainicio).Format("dd/MM/yyyy").ID("IdDate35")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes6Fechainicio)
                                                            .Disabled(Model.Drenajes6 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes6FechaCuracion).ID("IdFC35").Disabled(Model.Drenajes6FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.Drenajes6FechaRecambio).ID("IdFR35")//.Disabled(Model.Drenajes6 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes6MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes6 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE35")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes6ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes6ZonaInsercion == null ? "" : Model.Drenajes6ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes6 == "S" ? false : true)

                                  ))
                //FIELSET 36
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes7, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes7=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C36', 'N');"}
                                    }).ID("Chb36")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje de derivación ventrículo externo.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes7Fechainicio).Format("dd/MM/yyyy").ID("IdDate36")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(150)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes7Fechainicio)
                                                            .Disabled(Model.Drenajes7 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes7FechaCuracion).ID("IdFC36").Disabled(Model.Drenajes7 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.Drenajes7FechaRecambio).ID("IdFR36").Disabled(Model.Drenajes7 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes7MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes7 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Hidden(true)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE36")
                                  , X.Component().Width(130)
                                  , X.TextFieldFor(m => m.Drenajes7ZonaInsercion).FieldLabel("")

                                                                      .Hidden(false)
                                                                      .Value(Model.Drenajes6ZonaInsercion == null ? "" : Model.Drenajes6ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes7 == "S" ? false : true)

                                  ))
                //FIELSET 37
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes8, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes8=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C37', 'N');"}
                                    }).ID("Chb37")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Drenaje torácico (Mediastinal).</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes8Fechainicio).Format("dd/MM/yyyy").ID("IdDate37")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes8Fechainicio)
                                                            .Disabled(Model.Drenajes8 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes8FechaCuracion).ID("IdFC37").Disabled(Model.Drenajes8FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(140),
                                  X.TextFieldFor(m => m.Drenajes8FechaRecambio).ID("IdFR37")//.Disabled(Model.Drenajes8 == "S" ? false : true)
                                  .Width(100).FieldLabel("").Hidden(true),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes8MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes8 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Hidden(true)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE37")
                                  , X.Component().Width(130)
                                  , X.TextFieldFor(m => m.Drenajes8ZonaInsercion).FieldLabel("")

                                                                      .Hidden(true)
                                                                      .Value(Model.Drenajes8ZonaInsercion == null ? "" : Model.Drenajes8ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes8 == "S" ? false : true)

                                  ))
                //FIELSET 38
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes9, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes9=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C38', 'N');"}
                                    }).ID("Chb38")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Dren Biliar.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes9Fechainicio).Format("dd/MM/yyyy").ID("IdDate38")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                           .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes9Fechainicio)
                                                            .Disabled(Model.Drenajes9 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes9FechaCuracion).ID("IdFC38").Disabled(Model.Drenajes9FechaCuracion == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.Drenajes9FechaRecambio).ID("IdFR38").Disabled(Model.Drenajes9FechaRecambio == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(130),
                                    X.ComboBoxFor(m => m.Drenajes9MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes9 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Hidden(true)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE38")
                                  , X.Component().Width(30)
                                  , X.TextFieldFor(m => m.Drenajes9ZonaInsercion).FieldLabel("")

                                                                      .Hidden(true)
                                                                      .Value(Model.Drenajes9ZonaInsercion == null ? "" : Model.Drenajes9ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes9 == "S" ? false : true)

                                  ))
                //FIELSET 39
                     , X.FieldSet().Border(true)
                                         .Items(
                               X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                .Items(

                                  X.CheckboxGroupFor(m => m.Drenajes10, new List<Checkbox.Config> {
                                        new Checkbox.Config{BoxLabel = "",
                                                            InputValue="S",
                                                            Checked=(Model.Drenajes10=="S"?true:false),
                                                            ReadOnly=indicaModoLectura,
                                                            Handler="eventoCheck(this, 'C39', 'N');"}
                                    }).ID("Chb39")
                                  , X.Component().Width(10),
                                    X.Label().Hidden(false).Border(false)
                                            .Html("<font  size='2.10em'; color='black'>Sistema Vac.</font>")
                                            .Width(180),
                                    X.Component().Width(30),
                                    X.DateFieldFor(m => m.Drenajes10Fechainicio).Format("dd/MM/yyyy").ID("IdDate39")
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Editable(false).LabelWidth(100)
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Drenajes10Fechainicio)
                                                            .Disabled(Model.Drenajes10 == "S" ? false : true)
                                  , X.Component().Width(30),
                                  X.TextFieldFor(m => m.Drenajes10FechaCuracion).ID("IdFC39").Disabled(Model.Drenajes10 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(40),
                                  X.TextFieldFor(m => m.Drenajes10FechaRecambio).ID("IdFR39").Disabled(Model.Drenajes10 == "S" ? false : true)
                                  .Width(100).FieldLabel(""),
                                  X.Component().Width(30),
                                    X.ComboBoxFor(m => m.Drenajes10MotivoCambio).Items(
                                                                    new ListItem("Cambio programado", 1),
                                                                    new ListItem("Flebitis", 2),
                                                                    new ListItem("Auto retiro", 3),
                                                                    new ListItem("Obst. De dispositivo", 4),
                                                                    new ListItem("Contaminado", 5)
                                                                 )
                                                                 .Disabled(Model.Drenajes10 == "S" ? false : true)
                                                            .ReadOnly(indicaModoLectura)
                                                            .Width(100)
                                                            .FieldLabel("")
                                                            .Hidden(true)
                                                            .EmptyText("Seleccione..")
                                                            .SimpleSubmit(true)
                                                            .ID("listTE39")
                                  , X.Component().Width(130)
                                  , X.TextFieldFor(m => m.Drenajes10ZonaInsercion).FieldLabel("")

                                                                      .Hidden(true)
                                                                      .Value(Model.Drenajes10ZonaInsercion == null ? "" : Model.Drenajes10ZonaInsercion.ToString())
                                                                      .ReadOnly(indicaModoLectura).Disabled(Model.Drenajes10 == "S" ? false : true)

                                  ))

                            ),
                          X.FieldSet().ID("fsOtras")
                           .Collapsible(true)
                           .ColumnWidth(0.4)
                           .AutoScroll(true)
                           .Height(1)
                           .Hidden(true)
                           .Title("CIE - 10 ")
                           .Layout(LayoutType.VBox)
                           .MarginSpec("05 05 0 05")
                           .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                            .Items(

                                 )

                         , X.TextField()
                                            .ID("RecepcionaRecurso")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),



 X.FieldSet().ID("fsImagen").Hidden(Model.ProcedimientosInvasivos != "S")
                            .Collapsible(true).AutoScroll(true)
                            .ColumnWidth(0.4).Title("LOCALIZACIÓN DE DISPOSITIVOS")
                            .Layout(LayoutType.VBox)
                            .MarginSpec("05 05 0 05")
                            .Height(50)
                            .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "150"));
                                    d.Add(new Parameter("DefaultAnchor", "100%"));
                                    d.Add(new Parameter("LabelAlign", "Left"));
                                })
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                            .Items(
                             X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                     .Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                                     .Items(
                                    X.Component().Width(250),

                                     X.Button()
                            .Text("Abrir Vista").Icon(Icon.Eyes)
                            .ID("cmdOpenModalCuerpo")
                            .CausesValidation(false)
                //.Handler("OpenModal();")
                              .Handler("App.Window1.show(this);")



                                  ))

                //            // Grilla 1 inicio
                //                     , X.GridPanel()
                //                            .ID("GridPanelInmunizacion")
                //                            .Border(false).PaddingSpec("6")
                //                            .Store(
                //                                Html.X().Store()
                //                                .ID("StoreAtencion")
                //                                .Model(
                //                                    Html.X().Model()
                //                                    .IDProperty("CodigoElemento")
                //                                    .Fields(
                //                                        new ModelField("ValorCodigo1", ModelFieldType.String),
                //                                        new ModelField("CodigoElemento", ModelFieldType.Int),
                //                                        new ModelField("ValorCodigo3", ModelFieldType.String),
                //                                        new ModelField("ACCION", ModelFieldType.String),
                //                                        new ModelField("ValorCodigo5", ModelFieldType.String),
                //                                        new ModelField("ValorCodigo6", ModelFieldType.String),
                //                                        new ModelField("ValorCodigo7", ModelFieldType.String)
                //                                        )
                //                                    )
                //                                .AutoLoad(true)
                //                                .RemoteSort(false)
                //                                .IsPagingStore(true)
                //                                .RemotePaging(true)
                //                                .PageSize(5)
                //                                .Proxy(proxy => proxy.Add(
                //                                    Html.X().AjaxProxy()
                //                                        .Url("CCEPF006_getGrillaPatologicosGenerales")
                //                                        .Reader(reader => reader.Add(Html.X().JsonReader()
                //                                                .Root("data")
                //                                                .TotalProperty("total")
                //                                                .IDProperty("CodigoElemento"))))
                //                                                )
                //                                    )
                //                            .ColumnModel(
                //                                   Html.X().ComponentColumn().Editor(true)
                //                                    .Hidden(true)
                //                                    .DataIndex("CodigoElemento")
                //                                    .Text("CodigoElemento")
                ////.Flex(1)
                //                                    .Component(
                //                                         Html.X().TextField().ReadOnly(indicaModoLectura)
                //                                         .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //                                        )
                //                                  , Html.X().ComponentColumn().Editor(true)
                //                                    .Hidden(true)
                //                                    .DataIndex("ValorCodigo3")
                //                                    .Text("Diagnosticos de Referencia Hide")
                ////.Flex(1)
                //                                    .Component(
                //                                         Html.X().TextField().ReadOnly(indicaModoLectura)
                //                                         .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //                                        )

                //                                  , Html.X().ComponentColumn().Editor(true)
                //                                    .DataIndex("ValorCodigo1")
                //                                    .Text("Diagnosticos de Referencia")
                //                                    .Width(400)
                //                                    .Component(
                //                                         Html.X().TextField().ReadOnly(indicaModoLectura).AllowBlank(false)
                //                                         .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //                                         .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                //                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                //                                        )
                //                                  , Html.X().ComponentColumn().Editor(true)
                //                                    .Width(130)
                //                                    .DataIndex("ValorCodigo5")
                //                                    .Text("Tiempo de Enfermedad")
                //                                    .Component(
                //                                         Html.X().ComboBox().ReadOnly(indicaModoLectura)
                //                                         .Editable(false).EmptyText("Seleccione")
                //                                         .Items(
                //                                                    new ListItem("0-1 año", '1'),
                //                                                    new ListItem("1 a 5", '2'),
                //                                                    new ListItem("5 a 10", '3'),
                //                                                    new ListItem("10 a 15", '4'),
                //                                                    new ListItem("15 a 20", '5'),
                //                                                    new ListItem("20 a más", '6')
                //                                                 )
                //                                 .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                //                                        )
                //                                  , Html.X().ComponentColumn().Editor(true)
                //                                    .DataIndex("ValorCodigo6")
                //                                    .Text("Medicación")
                //                                    .Flex(1)
                //                                    .Component(
                //                                         Html.X().TextField().ReadOnly(indicaModoLectura)
                //                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //                                        .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                //                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                //                                        )
                //                                  , Html.X().ComponentColumn().Editor(true)
                //                                    .DataIndex("ValorCodigo7")
                //                                    .Text("Tipo de Diagn.")
                //                                    .Component(
                //                                         Html.X().ComboBox().ReadOnly(indicaModoLectura).EmptyText("Seleccione")
                //                                         .Items(
                //                                                    new ListItem("Presuntivo", '1'),
                //                                                    new ListItem("Definitivo", '2')
                //                                                 ).Editable(false)
                //                          .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                //                                        )


                //                                , Html.X().Column().Text("ACCION").DataIndex("ACCION").Width(85).Hidden(true),
                //                                  Html.X().CommandColumn()
                //                                    .Width(70)
                //                                    .Text("Acción")
                //                                    .Commands(
                //                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                //                                            .CommandName("Delete")
                //                                            .Icon(Icon.Delete)
                ////.Text("Eliminar")
                //                                    )
                //                                    .Listeners(ls => ls.Command.Handler = "deleteActualNew(record);")
                //                          )
                //                                 .SelectionModel(
                //                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                //                                 )
                //                                 .Plugins(
                //                                     Html.X().CellEditing()
                //                                 )
                //                            .Listeners(l => l.CellClick
                //                                        .Handler = "setSeleccionActual(record);")
                //                            .TopBar(
                //                                Html.X().Toolbar().Hidden(indicaModoLectura)
                //                                    .Items(
                //                                    X.ToolbarSeparator()
                //                                    , Html.X().Label()
                //                                    .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                //                                        , X.ToolbarFill()
                //                                    , X.Button().Text("Bienes/servicios").ID("cmdServicios").Hidden(true)
                //                                    .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');")
                //                                    .Icon(Icon.CogAdd)
                //                                    , X.Button().Text("Agregar").ID("cmdAdd").Disabled(Model.EnfermedadesAnteriores_rb == "S" ? false : true)
                //                                    .Handler("InsertRowNew();")
                //                                    .Icon(Icon.Add)
                //                                     )
                //                                   )

                    // grilla 1 fin





                        //  MENSAJE DE VALIDACION COLOR ROJO
                      ,
                        X.HiddenFor(m => m.Accion),
                        X.DateFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                        X.TextFieldFor(m => m.Estado).Hidden(true),
                      X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)

                      //, X.TextArea()
                //  .Border(false)
                //  .StyleSpec("background:white; border:0px solid gray;")
                //  .FieldStyle("color: white")
                //  .Hidden(false)
                //  .ReadOnly(true)
                // fin add
                     )



                    .TopBar(X.Toolbar().ID("bar").Items(
                            X.ToolbarSpacer(20),
                            X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                            X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                            X.ToolbarSpacer(20),
                            Html.X().Container().Layout(LayoutType.HBox)
                            .ID("conthbIndicaError").Hidden(true).Items(
                                X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                            ),

                            X.ToolbarFill(),

                            X.Button()
                            .Text("Imprimir")
                            .Icon(Icon.Report)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresion")
                            .Handler("eventoVisorReporte('');"),

                            X.Button()
                            .Text("Imprimir Todos")
                            .Icon(Icon.ReportGo)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresionHC")
                            .Handler("eventoVisorReporte('HC');"),

                            X.ToolbarSpacer().Width(40),

                            X.Button()
                            .Text("Guardar").Icon(Icon.Disk)
                            .ID("cmdGuardar").Hidden(indicaModoLectura)
                            .CausesValidation(false)
                             .DirectEvents(de =>
                             {  //Model.ACCION : Posee el MODO ACTUAL
                                 de.Click.Url = Url.Action("CCEPF425_Save_VigilanciaDispositivos");
                                 de.Click.EventMask.ShowMask = true;
                                 de.Click.Before = "" +
                                         "beforeSave(App.formactual); return App.formactual.getForm().isValid();";
                                 de.Click.Success = "onSuccess(result.data);";
                                 de.Click.Failure = "onFailure();";
                             }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));"),

                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"

                        )
                );
        }
        )



    )

}

