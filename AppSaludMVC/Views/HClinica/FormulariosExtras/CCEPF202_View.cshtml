@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Referencia_FE

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));


    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var DESC_ADD = "DIAGNÓSTICO";
    var DESC_ADD2 = "EGRESO";
    var COLOR_BLUE01 = "#284A89";
    var opcion = Session["OPCION"];


}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>

    function eventoValidaReglaGen(PARAM_ACCION, PARAM_REGLA, numRegla) {
        var APMiscelaneos = new Array();
        var MA_MiscelaneosDetalle = {
            ValorEntero1: 1,
            ACCION: PARAM_ACCION
        };
        APMiscelaneos.push(MA_MiscelaneosDetalle);
        Ext.net.DirectMethod.request({
            url: PARAM_REGLA,
            params: {
                PacienteID: 0,
                valor: 0,
                regla: PARAM_ACCION,
                arrays: APMiscelaneos
            },
            success: function (result) { mostrarAlarmaGen(result.data, PARAM_ACCION, numRegla); }
        });
    };
    var mostrarAlarmaGen = function (data, accion, numRegla) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotifyPosi"))',
                    params: {
                        titulo: 'Advertencia Motor Reglas',
                        message: data[0].DESCRIPCION,
                        tipo: 'WARNING',
                        offsety: -650,
                        offsetx: 0 + ((numRegla - 1) * (-200))
                    }
                });
            } else {
            }
        }
    }

        function seleccionadorMedico() {
            setIndicaCambios(true);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedico',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };

        function seleccionadorMedicoServicio() {
            setIndicaCambios(true);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoServicio',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };



        function seleccionadorMedicoPersonal() {
            setIndicaCambios(true);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoPersonal',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };

        function seleccionadorPersonal() {
            setIndicaCambios(true);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionPersonal',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };

    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);
    }

    var ALTURADEF = screen.height;



    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
        var val = '@visibleImpresion';
        var vis = '@isVista';
        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);
                    //parent.App.btnContEpisodio_HCE.setDisabled(true); //A TODOS

                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);
                    //parent.App.btnContEpisodio_HCE.setDisabled(false); //A TODOS
                }
            }
        }
    }



        function eventoActivarSeleccion(btnComponente, btnComponenteMostrar, idGrillaActiva) {

            //App.btnSelDesactivo0M.setVisible(true);
            //App.btnSelActivo0M.setVisible(false);

            App.btnSelDesactivo0.setVisible(true);
            App.btnSelActivo0.setVisible(false);


            btnComponente.setVisible(false);
            btnComponenteMostrar.setVisible(true);

            grillaActiva = idGrillaActiva;

            parent.App.East1.expand();

            if (grillaActiva == 'grillaExamenes1') {
                /* parent.App.PanelServicios.items.items[3].ownerCt.items.items[3].items.items["0"].items.items["0"].setValue("13");*/
                parent.App.cbLinea.setValue('@opcion');
                parent.App.StoreBuscarServicios.reload()
            }
            else if (grillaActiva == 'grillaExamenes5') {
                parent.App.cbLinea.setValue("04");
                parent.App.StoreBuscarServicios.reload()
            }
            else {
                parent.App.cbLinea.setValue("04");
                parent.App.StoreBuscarServicios.reload()
            }

            grillaActiva = idGrillaActiva;

        };


        var grillaActiva = null;
        function eventoDesactivarSeleccion(btnComponente, btnComponenteMostrar) {

            btnComponente.setVisible(false);
            btnComponenteMostrar.setVisible(true);
            grillaActiva = null;
            parent.App.East1.collapse();

        };




    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }

    var count = 1; // a counter for new records

    function InsertRow(valor,estado,soloLectura) {
        //App.Window1.show();
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (valor.getValue() != '') {
                var obj = JSON.parse(valor.getValue());
                var DescripcionLocalVar = obj.DescripcionLocal;
                var posicion = DescripcionLocalVar.split('|');


                if (validaDuplicado(DescripcionLocalVar)) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    valor.setValue('');
                    return;
                }
                var grid = Ext.getCmp("grillaExamenes");
                setIndicaCambios(true);
                //alert(count);
                grid.store.insert(0, {
                    CodigoElemento: count++,
                    ValorCodigo1: DescripcionLocalVar,
                    ACCION: 'NUEVO'
                });
                valor.setValue('');
                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);
            }
        }
    }
    function validaDuplicado(valor) {
        var estados = false;
        var valor1
        var valor2
        App.storeExamenes.each(function (r) {
            if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    var keyCode
    function ReplaceCaracterEspec(e) {
        /*Capturar tecla pulsada*/
        if (window.event) keyCode = window.event.keyCode;
        else if (e) keyCode = e.which;
        var prueba = keyCode;
        // alert(keyCode);
        //
        if (prueba == 60) {
            var textactual = e.getValue();
            e.value = e.setValue(textactual + " ");
        }
        var texto = e.getValue();
        var vacio = "";
        var cadena = vacio + e.getValue();
        var recortado = cadena.substr(-1, 1);
        // alert(recortado + ' antes');
        if (recortado == "<" || recortado == ">") {
            //  alert(recortado + ' despues');
            e.value = e.setValue(texto + " ");
        }

    }



    function eventoclickglasgow(tipoglasgow) {

        if (tipoglasgow == 'A') {


            var vista = 'Procesos/VisorVerEscalaGlasgow';
            var container = 'Center1';
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("visorHCECVerEscalaGlasgow"))',
                params: {
                    Accion: 'VER',
                    opcionCodigo: '5353',
                    nombrePaciente: 0,
                    Form: vista,
                    FormContainer: container
                }
            });

        } else if (tipoglasgow == 'B') {

            var vista = 'Procesos/VisorVerEscalaGlasgow';
            var container = 'Center1';
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("visorHCECVerEscalaGlasgow"))',
                params: {
                    Accion: 'VER',
                    opcionCodigo: '5361',
                    nombrePaciente: 0,
                    Form: vista,
                    FormContainer: container
                }
            });

        } else if (tipoglasgow == 'C') {

            var vista = 'Procesos/VisorVerEscalaGlasgow';
            var container = 'Center1';
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("visorHCECVerEscalaGlasgow"))',
                params: {
                    Accion: 'VER',
                    opcionCodigo: '5358',
                    nombrePaciente: 0,
                    Form: vista,
                    FormContainer: container
                }
            });

        }





    }


 
    



    function deleteActual(record) {
        seleccRecordActual = record;
        if (seleccRecordActual != null) {
            setIndicaCambios(true);
            var store = App.grillaExamenes.store;
            var par1 = seleccRecordActual.data.ValorCodigo1;
            var par2 = seleccRecordActual.data.CodigoElemento;
            store.remove(seleccRecordActual);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF202_Eliminar_ReferencialDetalle"))',
                params: {
                    MODO: 'DELETE',
                    codigo: par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };


    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }

        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };

    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    function eventoCancelarTest() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("eventoCancelarForm"))',
            params: {
                indica: ''
            }
        });
    }

    function eventoCancelar(form) {

        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //App.storeExamenes.reload();
        //setIndicaCambios(false);

        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }



    }

    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;
            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

         }

        function EnviarData(grid) {

            beforeSave(App.formactual);
            if (App.formactual.getForm().isValid()) {
                  var reload = true;
                App.cmdGuardar.setDisabled(true);
                source = App.grillaExamenes;
                var store = App.storeExamenes;
                var status = 0;
                var i = 1;
                var valores = "";
                var mensajes = "";
                var ArrayList0 = new Array();
                var records = App.grillaExamenes.getSelectionModel().getSelection();
                App.storeExamenes.each(function (r) {
                    var MA_MiscelaneosDetalle = {
                        CodigoElemento: r.get('CodigoElemento'),
                        ValorCodigo1: r.get('ValorCodigo1'),
                        //Compania: r.get('Compania'),
                        ACCION: (r.get('ACCION') == 'NUEVO' ? 'NUEVO' : 'UPDATE')
                    };
                    ArrayList0.push(MA_MiscelaneosDetalle);
                    i = i + 1;
                });
                App.formactual.setDisabled(true);
                App.Accion.value = mensajes;
                //alert(mensajes);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF202_Save_Referencia"))',
                    params: {
                        selectionArray1: ArrayList0,
                        text: '0'
                    }, success: function (result) {
                               reload = true;
                            }
                });

                if (reload) {
                        parent.App.txtRecargarX.setValue('RELOAD');

                    } else {
                        App.cmdGuardar.setDisabled(false);
                        App.taAlerts.setVisible(true);
                    }

                App.cmdGuardar.setDisabled(false);
                return true;
            } else {
                App.cmdGuardar.setDisabled(false);
                return false;
            }
        }

        var accionMensajes = function (data) {
            var mensajes = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
                }
                App.taAlerts.setVisible(true);
                App.taAlerts.setValue(mensajes);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
            } else {
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);
            }

        };

        var getInvalidFields = function (form) {
            var invalidFields = new Array();
            var fields = form.getForm().getFields();
            fields.filterBy(function (field) {
                if (!field.isValid()) {
                    var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                        NombreCampo: field.name,
                        IdEvento: (field.isValid() ? 1 : 0),
                        ValorTexto: field.name + ': ' + field.getErrors()
                    };
                    invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                }
            });
            return invalidFields;
        };

        var beforeSave = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) { accionMensajes(result.data); }
                });
            }
        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

    </script>
}


@section cuerpo
{

    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {
            regions
                .Add(Html.X().FormPanel()
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
               .ID("formactual")

                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                    l.AfterRender.Handler =
                        "eventoValidaReglaGen('POSaludControlGinecologia', '" + (Url.Action("POSaludControlGinecologia")) + "',1);" +
                        "eventoValidaReglaGen('POSaludExamenLaboratorio', '" + (Url.Action("POSaludExamenLaboratorio")) + "',2);" +
                        "";
                })
               .Items(
                    X.FieldSet().ID("fsGenerales")
                                .ColumnWidth(0.4).Collapsible(true)
                                 .Title("F202.1 Datos Generales")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                     d.Add(new Parameter("DefaultAnchor", "100%"));
                                     d.Add(new Parameter("LabelAlign", "Left"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                          X.Container().PaddingSpec("6")
                                            .Layout(LayoutType.HBox)
                                            .Defaults(d =>
                                            {
                                                d.Add(new Parameter("LabelWidth", "170"));
                                            })
                                            .Items(
                                                X.TextFieldFor(c => c.NroReferencia)
                                                    .FieldLabel("N° de informe").ReadOnly(true),
                                                X.Component().Width(100)
                                            ),
                                        X.RadioGroupFor(c => c.Prioridad, new List<Radio.Config> {
                                                new Radio.Config{BoxLabel = "I", InputValue = "1" ,ReadOnly =indicaModoLectura},
                                                new Radio.Config{BoxLabel = "II", InputValue = "2",ReadOnly =indicaModoLectura},
                                                new Radio.Config{BoxLabel = "III", InputValue = "3",ReadOnly =indicaModoLectura},
                                                new Radio.Config{BoxLabel = "IV", InputValue = "4",ReadOnly =indicaModoLectura},
                                                new Radio.Config{BoxLabel = "Consulta", InputValue = "5",ReadOnly =indicaModoLectura}
                                            })
                                            .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                            .FieldLabel("Prioridad")
                                            .DefaultAnchor("100%")
                                            .Defaults(d =>
                                            {
                                                d.Add(new Parameter("LabelWidth", "170"));
                                            }),
                                    X.TextFieldFor(c => c.EstablecimientoOri)
                                      .FieldLabel("Establecimiento de origen").ReadOnly(indicaModoLectura)
                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })


                                      //.Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                      ,
                                    X.TextFieldFor(c => c.ServicioOri).ReadOnly(indicaModoLectura)
                                      .FieldLabel("Servicio de origen")

                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                       ,
                                    X.TextFieldFor(c => c.EstablecimientoDest).ReadOnly(indicaModoLectura)
                                      .FieldLabel("Establecimiento de destino")

                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                       ,
                                    X.TextFieldFor(c => c.ServicioDest).ReadOnly(indicaModoLectura)
                                      .FieldLabel("Servicio de destino")

                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })


                                         ),
                        X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("F202.2 Identificación del Usuario")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                .Items(
                                      X.TextFieldFor(c => c.IdentificacionUsu).ReadOnly(indicaModoLectura)
                                       .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                      .ID("IdentificacionUsu")
                                      .FieldLabel("Usuario")
                                    ),
                      X.FieldSet().Collapsible(true)
                            .ColumnWidth(0.4)
                            .Title("F202.3 Resumen de la Historia Clínica")
                            .MarginSpec("0 05 0 05")
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "170"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })

                            .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })

                            .Items(
                                     X.TextAreaFor(c => c.Anamnesis).ReadOnly(indicaModoLectura)
                                     .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .Height(40)
                                                    .FieldLabel("Anamnesis"),
                                     X.TextAreaFor(c => c.EstadoGeneral).ReadOnly(indicaModoLectura)
                                     .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .Height(40)
                                                    .FieldLabel("Estado General"),

                                    X.TextFieldFor(c => c.Glasgow).ReadOnly(indicaModoLectura)
                                    .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                      .FieldLabel("Glasgow")
                                      .Width(50)
                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; }),


                                        X.Container().PaddingSpec("6")
                                            .Layout(LayoutType.HBox)
                                            .Defaults(d =>
                                            {
                                                d.Add(new Parameter("LabelWidth", "170"));
                                            })
                                            .Items(
                                             X.Component().Width(180),
                                             
                                               X.Button()
                                                .ID("btnverglasgow_HCE1")
                                                .Text("Ver Lista de Glasgow")
                                                .Icon(Icon.PageCopy)
                                                .ToolTip("Ver Lista de Glasgow")
                                               // .Hidden((indicaVisibleCopy == 1 ? false : true))
                                                .Handler("eventoclickglasgow('A');")
                                                ,
                                                
                                                   X.Component().Width(30),
                                                       X.Button()
                                                .ID("btnverglasgow_HCE2")
                                                .Text("Ver Lista de Glasgow Lactante")
                                                .Icon(Icon.PageCopy)
                                                .ToolTip("Ver Lista de Glasgow Lactante")
                                               // .Hidden((indicaVisibleCopy == 1 ? false : true))
                                                .Handler("eventoclickglasgow('B');")
                                                ,

                                                 X.Component().Width(30),
                                                
                                                    X.Button()
                                                .ID("btnverglasgow_HCE3")
                                                .Text("Ver Lista de Glasgow Pre Escolar")
                                                .Icon(Icon.PageCopy)
                                                .ToolTip("Ver Lista de Glasgow Pre Escolar")
                                               // .Hidden((indicaVisibleCopy == 1 ? false : true))
                                                .Handler("eventoclickglasgow('C');")
                                                
                                                   
                                                
                                            ),

                   
                                    

                                    X.Container().Layout(LayoutType.HBox).PaddingSpec("6")
                                            .Layout(LayoutType.HBox)

                                            .Items
                                            (

                                               /// X.Component().Width(200),
                                                 X.Label("Funciones Vitales:").Width(200).Height(50),
                                                X.TextFieldFor(c => c.FV_T)
                                                .ReadOnly(indicaModoLectura).Flex(1).MaxLength(50)

                                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .FieldLabel("T°")
                                                    .LabelWidth(30),
                                                X.Component().Width(30),
                                                X.TextFieldFor(c => c.FV_PA).ReadOnly(indicaModoLectura).Flex(1)
                                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .FieldLabel("PA")
                                                    .LabelWidth(30),
                                                X.Component().Width(30),
                                                X.TextFieldFor(c => c.FV_FR).ReadOnly(indicaModoLectura).Flex(1)
                                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .FieldLabel("FR")
                                                    .LabelWidth(30),
                                                X.Component().Width(30),
                                                X.TextFieldFor(c => c.FV_FC).ReadOnly(indicaModoLectura).Flex(1)
                                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                    .FieldLabel("FC")
                                                    .LabelWidth(30),
                                                X.Component().Width(20)
                                                        )


                                                        ,
                                            X.TextAreaFor(c => c.ExamenesAux).ReadOnly(indicaModoLectura).MaxLength(500)
                                               .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })


                                                    .Height(50)
                                                    .FieldLabel("Exámenes Aux."),
                                             X.TextField()
                                                 .ID("RecepcionaRecurso")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                             X.GridPanel()
                                                 .ID("grillaExamenes")
                                                 .Border(false)
                                                 .PaddingSpec("5")
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                 .Fields(
                                                                   new ModelField("CodigoElemento", ModelFieldType.String),
                                                                   new ModelField("ValorCodigo1", ModelFieldType.String),
                //new ModelField("Compania", ModelFieldType.String),
                                                                   new ModelField("ACCION", ModelFieldType.String)

                                                                 )
                                                         )
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEPF202_LISTAR_GRILLA")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("CodigoElemento")))))
                //.Parameters(ps => ps.Add(new
                //{
                //    Tipo = JRawValue.From("App.Compania.getValue()")

                                                                                            //}))
                                                 )
                                                 .ColumnModel(
                                                   Html.X().ComponentColumn().Editor(true).Text("Nro").DataIndex("CodigoElemento").Width(110).Component(
                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                        ),
                                                   Html.X().ComponentColumn().Editor(true).Text("Diagnóstico").DataIndex("ValorCodigo1").Flex(1).Component(
                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                        ),

                                                        //   Html.X().ComponentColumn().Editor(true).Text("idReferencia").DataIndex("Compania").Flex(1).Component(
                //Html.X().TextField().ReadOnly(indicaModoLectura)
                //            .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                //),


                                                  Html.X().Column().Text("ACCION").DataIndex("ACCION").Width(85).Hidden(true)
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete")
                                                                .Icon(Icon.Delete)
                //.Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                        .Handler = "setSeleccionActual(record);")
                //.TopBar(
                //        Html.X().Toolbar()
                //            .Hidden(indicaModoLectura)
                //            .Items(
                //               Html.X().ToolbarSeparator()
                //               , Html.X().Label()
                //               .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                //               , X.ToolbarFill()
                //               , X.Button().Text("Catálogo")
                //               .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');")

                                                 //               .Icon(Icon.CogAdd)
                //               )
                //  ),


                                                     .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                  Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle -  " + DESC_ADD + "</font></b>")
                                                                , X.ToolbarFill(), X.ToolbarSeparator(),
                                                                Html.X().Button().ID("btnSelDesactivo0")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginDisabled)
                                                                         .Handler("eventoActivarSeleccion(App.btnSelDesactivo0, App.btnSelActivo0, 'grillaExamenes')"),
                                                                         Html.X().Button().ID("btnSelActivo0")
                                                                         .Html("<b>Catálogo</b>")
                                                                         .Icon(Icon.PluginGo).Hidden(true)
                                                                         .Handler("eventoDesactivarSeleccion(App.btnSelActivo0, App.btnSelDesactivo0)")

                                                             )
                                                   ),






                                     X.TextAreaFor(c => c.Tratamiento).ReadOnly(indicaModoLectura)
                                       .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                      .PaddingSpec("5")
                                      .Height(40)
                                      .FieldLabel("Tratamiento"),
                                     X.HiddenFor(c => c.Accion),
                                     X.DateFieldFor(c => c.FechaCreacion).Hidden(true),
                                     X.DateFieldFor(c => c.FechaModificacion).Hidden(true),
                                     X.TextFieldFor(c => c.UsuarioCreacion).Hidden(true),
                                     X.TextFieldFor(c => c.UsuarioModificacion).Hidden(true),
                                     X.TextFieldFor(c => c.Estado).Hidden(true)
                                     ,
                                X.TextArea().ID("taAlerts")
                                    .Border(false)
                                    .StyleSpec("background:white;border:1px solid gray;")
                                    .FieldStyle("color: red")
                                    .Hidden(true)
                                    .ReadOnly(true)
                        ),
                        X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("F202.4 Datos de la Referencia")
                                 .MarginSpec("0 05 0 05")
                                 .DefaultAnchor("100%")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                     d.Add(new Parameter("LabelAlign", "Left"));
                                 })
                                     .Items(
                                            X.TextFieldFor(c => c.Motivo).ReadOnly(indicaModoLectura)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .ID("Motivo")
                                                .FieldLabel("Motivo"),
                                            X.RadioGroupFor(c => c.TipoAtencionRef, new List<Radio.Config> {
                                                        new Radio.Config{BoxLabel = "Emergencia", InputValue = "1" ,ReadOnly =indicaModoLectura},
                                                        new Radio.Config{BoxLabel = "Consulta Externa", InputValue = "2",ReadOnly =indicaModoLectura},
                                                        new Radio.Config{BoxLabel = "Hospitalización", InputValue = "3",ReadOnly =indicaModoLectura},
                                                    })
                                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .FieldLabel("Destino de la Referencia:")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                }),
                                       X.Container().PaddingSpec("6")
                                            .Layout(LayoutType.HBox)
                                            .Defaults(d =>
                                            {
                                                d.Add(new Parameter("LabelWidth", "170"));
                                            })
                                            .Items(
                                            X.DateFieldFor(m => m.FechaReferencia).Format("dd/MM/yyyy").Editable(false)
                                                    .FieldLabel("Fecha en la que será atendido")
                                                      .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                     .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaReferencia),
                                            X.Component().Width(100)
                                            ,
                                            X.TimeFieldFor(m => m.HoraReferencia).Format("H:mm").Editable(false)
                                                .FieldLabel("Hora en la que será atendido").Increment(30)
                                                 .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })


                                        ),
                                             X.TextFieldFor(c => c.PersonaAtiende).ReadOnly(indicaModoLectura).PaddingSpec("6").MaxLength(100)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .FieldLabel("Nombre de quien lo atenderá")
                                         ),
                        X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("F202.5 Condición del Paciente al Salir de la Clínica")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                     d.Add(new Parameter("DefaultAnchor", "100%"));
                                     d.Add(new Parameter("LabelAlign", "Left"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                                              X.RadioGroupFor(c => c.CondicionSalida, new List<Radio.Config> {
                                                                new Radio.Config{BoxLabel = "Estable", InputValue = "1" ,ReadOnly =indicaModoLectura},
                                                                new Radio.Config{BoxLabel = "Inestable", InputValue = "2",ReadOnly =indicaModoLectura},
                                                            })
                                                             .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                            .DefaultAnchor("100%")
                                                            .Defaults(d =>
                                                            {
                                                                d.Add(new Parameter("LabelWidth", "100%"));
                                                            }),
                                             X.TextFieldFor(c => c.MedicoSanna).ReadOnly(indicaModoLectura)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .FieldLabel("Médico que coordina la atención (Sanna)"),
                                             X.TextFieldFor(c => c.MedicoAtencion).ReadOnly(indicaModoLectura).MaxLength(100)
                                              .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                .FieldLabel("Médico con quien se coordinó la atención"),
                                             X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.IdResponsableRef).ID("nfMedico").FieldLabel("Responsable de la Ref.").Width(170).ReadOnly(true),

                                                    X.TextField().ID("tfNroMed").Width(50).FieldLabel("").ReadOnly(true),

                                                    X.TextField().ID("tfNomMed").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedico();")
                                                    )


                                                    ,
                                            X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.IdResponsableSer).FieldLabel("Responsable del Servicio").Width(170).ReadOnly(true),
                                                    X.TextField().ID("tfResNroMed").Width(50).FieldLabel("").ReadOnly(true),
                                                    X.TextField().ID("tfResNomMed").Flex(1).FieldLabel("").ReadOnly(true),
                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoServicio();")
                                                 ),
                                             X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(
                                                    X.NumberFieldFor(c => c.IdResponsableAco).FieldLabel("Personal que acompaña").Width(170).ReadOnly(true),
                                                     X.TextField().ID("tfacoNroMed").Width(50).FieldLabel("").ReadOnly(true),
                                                     X.TextField().ID("tfacoNomMed").Flex(1).FieldLabel("").ReadOnly(true),

                                                    X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedicoPersonal();")
                                                 ),
                                            X.Container().Layout(LayoutType.HBox).MarginSpec("00 00 00 00").PaddingSpec("6")
                                                .Defaults(d =>
                                                {
                                                    d.Add(new Parameter("LabelWidth", "170"));
                                                })
                                                .Items(


                                                    X.TextFieldFor(c => c.IdResponsableRec).FieldLabel("Personal que recibe").Width(1070).ReadOnly(false)
                                                 .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                 )
                                         ),
                        X.FieldSet().Collapsible(true)
                                 .ColumnWidth(0.4)
                                 .Title("F202.6 Condición del Paciente a la llegada al lugar de referencia")
                                 .Layout(LayoutType.VBox)
                                .MarginSpec("05 05 0 05")
                                .Defaults(d =>
                                {
                                    d.Add(new Parameter("LabelWidth", "120"));
                                    d.Add(new Parameter("DefaultAnchor", "100%"));
                                    d.Add(new Parameter("LabelAlign", "Left"));
                                })
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                    .Items(
                                    X.RadioGroupFor(c => c.Condicionllegada, new List<Radio.Config> {
                                            new Radio.Config{BoxLabel = "Estable", InputValue = "1" ,ReadOnly =indicaModoLectura},
                                            new Radio.Config{BoxLabel = "Inestable", InputValue = "2",ReadOnly =indicaModoLectura},
                                            new Radio.Config{BoxLabel = "Fallecido", InputValue = "3",ReadOnly =indicaModoLectura},
                                        })
                                        .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                //.FieldLabel("Destino de la Referencia:")
                                        .Defaults(d =>
                                        {
                                            d.Add(new Parameter("LabelWidth", "170"));
                                        })
                                            )

                     )
                    .MinButtonWidth(40)

                    .TopBar(
                        X.Toolbar().ID("bar")

                            .Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>")
                                , X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                                X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                                X.Button()
                                .Text("Guardar")
                                .ID("cmdGuardar").Hidden(indicaModoLectura)
                                .Icon(Icon.Disk)
                                .CausesValidation(true)
                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Before = "return EnviarData(this.up('grid'));";
                                    de.Click.Url = Url.Action("CCEPF202_Save_Referencia");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")

                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);"),

                             X.Button()
                                .Text("Variados")
                                .ID("cmdBuscar")
                                .Icon(Icon.Cancel)
                                .Hidden(true)
                                .OnClientClick("this.up('form').getForm().reset();")


                        ))
                //.Listeners(l =>
                //   {
                //       l.FieldChange.Handler = "setIndicaCambios(true);";
                //   }
                //)
                );


        }
        )

    )



}

