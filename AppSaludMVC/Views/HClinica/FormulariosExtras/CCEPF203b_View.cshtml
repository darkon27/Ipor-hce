@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_CONTRARREFERENCIA_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);

    
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var DESC_ADD = "INGRESO";

    var DESC_ADD2 = "EGRESO";
    var COLOR_BLUE01 = "#284A89";
}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>
    //function eventoRenderForm() {

    //    var kk = 195;
    //    var scrH = screen.height;
    //    var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
    //    var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

    //    if (southH == 0) {
    //        southH = 30;
    //    } else if (parent.App.PanelMainSouth.collapsed) {
    //        southH = 30;
    //    }
    //    var dimCentral = (scrH - (northH + southH) - kk);
    //}

    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.FormActual.setHeight(545);


    }

    @*var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }*@

        var tempEliminar = false;

       var indicaCambios = false;
        function setIndicaCambios(value) {
            /* alert('cambio:' + value);*/
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });
            var val = '@visibleImpresion';
            var vis = '@isVista';
            var v = '@isNuevo';
            /* alert(vis.toUpperCase() + ' ' + val.toUpperCase()+' '+value);*/
            if (vis.toUpperCase() == 'FALSE') {
                if (val.toUpperCase() == 'TRUE') {
                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);

                    }
                }
            }
            if (v.toUpperCase() == 'TRUE') {
                App.btnImpresion.setDisabled(true);
                App.btnImpresionHC.setDisabled(true);
            }
        }


    var count = 0; // a counter for new records
    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };
    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };

    function deleteActual(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            //"addEliminar_SS_HC_Anamnesis_AP"
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF203_Eliminar_ContrarreferencialDetalle"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2,
                    tipoRegistro: tipo
                }
            });
            seleccRecordActual = null;
        }
    };


    var grillaActiva = null;
    function eventoDesactivarSeleccion(btnComponente, btnComponenteMostrar) {
        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);
        grillaActiva = null;
        parent.App.East1.collapse();
        Ext.getCmp(button.id).hide();
    };

    function eventoActivarSeleccion(btnComponente, btnComponenteMostrar, idGrillaActiva) {
        App.btnSelDesactivo_Patolo.setVisible(true);
        App.btnSelActivo_Patolo.setVisible(false);
        App.btnSelDesactivo_APTrabajo.setVisible(true);
        App.btnSelActivo_APTrabajo.setVisible(false);
        btnComponente.setVisible(false);
        btnComponenteMostrar.setVisible(true);
        grillaActiva = idGrillaActiva;

    };

    var count = 0; // a counter for new records
    function InsertRow(valor, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (grillaActiva != null) {
                if (valor.getValue() != '') {

                    var obj = JSON.parse(valor.getValue());

                    var DescripcionLocalVar = obj.DescripcionLocal;
                    // Codigo Seus
                    var CodigoElementoVar = obj.CodigoElemento;
                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }
                    }

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }

                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 = cadena1 + '|[' + CodigoElementoVar + ']';
                    //*


                    var grid = Ext.getCmp("" + grillaActiva);
                    if (validaDuplicado(DescripcionLocalVar, grid)) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: 'Ya existe registro',
                                tipo: 'WARNING'
                            }
                        });
                        valor.setValue('');
                        return;
                    }
                    valor.setValue('');
                    setIndicaCambios(true);
                    grid.store.insert(0, {
                        CodigoElemento: count--,
                        ValorCodigo1: DescripcionLocalVar,
                        ValorCodigo5: DescripcionLocalVar2,
                        ACCION: 'NUEVO'
                    });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);
                    valor.setValue('');
                }
            } else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las grillas.',
                        tipo: 'WARNING'
                    }
                });
                return;
            }
        }
    }

    function validaDuplicado(valor, grid) {
        var store = grid.store;
        var estados = false;
        var valor1;
        var valor2;
        store.each(function (r) {
            if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
        });

        return estados;
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    var hhValidation = function (h) {
        str = h.value;

        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    };

    </script>
    <script>



    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }

    function seleccionadorMedico() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoDos',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };
            
        @*function EnviarDataServer(grid) {
        beforeSave(App.FormActual);
        //if (true) {
            if (App.FormActual.getForm().isValid()) {
                alert("todo bien");
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var i = 0;
            var invalidFieldsGrid = new Array();
            var fila = 0;
            var ArrayIngreso = new Array();
            var ArrayEgreso = new Array();
            App.STORE_ContrarreferenciaIngreso.each(function (r) {
                fila = fila + 1;
                ///VALIDACIÓN campos ingresos
                setValuesGridForm(r, null);
                invalidFieldsGrid = getInvalidFieldsGrid(App.FormActual, invalidFieldsGrid, fila);
                var MA_MiscelaneosDetalle = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                };
                ArrayIngreso.push(MA_MiscelaneosDetalle);
                i = i + 1;
            });
            App.STORE_ContrarreferenciaEgreso.each(function (r) {
                fila = fila + 1;
                ///VALIDACIÓN campos ingresos
                setValuesGridForm(r, null);
                invalidFieldsGrid = getInvalidFieldsGrid(App.FormActual, invalidFieldsGrid, fila);
                var MA_MiscelaneosDetalle2 = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                };
                ArrayEgreso.push(MA_MiscelaneosDetalle2);
                i = i + 1;
            });
            if (invalidFieldsGrid.length > 0) {
                addRecursosValidacion(invalidFieldsGrid);
                App.cmdGuardar.setDisabled(false);
            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF203b_Save_CONTRARREFERENCIA"))',
                    params: {
                        selectionArray1: ArrayIngreso,
                        selectionArray2: ArrayEgreso,
                        text: '0'
                    }
                });
            }
            } else {

           if (invalidFieldsGrid.length > 0) {
                addRecursosValidacion(invalidFieldsGrid);
                App.cmdGuardar.setDisabled(false);
            }
                App.cmdGuardar.setDisabled(false);
                return true;

        }

        }*@


        var addRecursosValidacion = function (FieldsInvalidos) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        };


            //var eventoCheck = function (ch1, pregunta, valor) {
            //    var varCheckValue = ch1.getValue();
            //    if (varCheckValue) {
            //        if (pregunta == 'C1') {
            //            alert("oluu");
            //        }
            //    }
            //}



            function EnviarDataServer(grid) {
            beforeSave(App.FormActual);
            //var CabezeraContraRefere = new Array();
                //var CABEZERA = {
                //    NroContrarreferencia: App.NroContrarreferencia.getValue(),
                //    FechaContrarreferencia: App.FechaContrarreferencia.getValue(),
                //    HoraContrarreferencia: App.HoraContrarreferencia.getValue(),
                //    EstablecimientoOrigen: App.EstablecimientoOrigen.getValue(),
                //    ServicioOrigen: App.ServicioOrigen.getValue(),
                //    EstablecimientoDestino: App.EstablecimientoDestino.getValue(),
                //    ServicioDestino: App.ServicioDestino.getValue(),
                //    IdentificacionUsuario: App.IdentificacionUsuario.getValue(),
                //    FechaIngreso: App.FechaIngreso.getValue(),
                //    FechaEgreso: App.FechaEgreso.getValue(),
                //    TratamientoRealizados: App.TratamientoRealizados.getValue(),
                //    ProcedimientosRealizados: App.ProcedimientosRealizados.getValue(),
                //    IdEspecialidad: App.IdEspecialidad.getValue(),
                //    //IdPersonalSalud:App.IdPersonalSalud.getValue(),
                //    //CondicionPaciente: App.CondicionPaciente.getValue(),
                //    Recomendaciones: App.Recomendaciones.getValue()

                //};
                //CabezeraContraRefere.push(CABEZERA);

                if (App.FormActual.getForm().isValid()) {
                    var reload = true;  
                    var i = 0;
                    var invalidFieldsGrid = new Array();
                    var fila = 0;
                    var ArrayIngreso = new Array();
                        var ArrayEgreso = new Array();
                    App.STORE_ContrarreferenciaIngreso.each(function (r) {
                        fila = fila + 1;
                        ///VALIDACIÓN campos ingresos
                        setValuesGridForm(r, null);
                        invalidFieldsGrid = getInvalidFieldsGrid(App.FormActual, invalidFieldsGrid, fila);
                        var MA_MiscelaneosDetalle = {
                            CodigoElemento: r.get('CodigoElemento'),
                            ValorCodigo1: r.get('ValorCodigo1'),
                            ValorCodigo5: r.get('ValorCodigo5'),
                            ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                        };
                        ArrayIngreso.push(MA_MiscelaneosDetalle);
                        i = i + 1;
                    });


                    App.STORE_ContrarreferenciaEgreso.each(function (r) {
                        fila = fila + 1;
                        ///VALIDACIÓN campos ingresos
                        setValuesGridForm(r, null);
                        invalidFieldsGrid = getInvalidFieldsGrid(App.FormActual, invalidFieldsGrid, fila);
                        var MA_MiscelaneosDetalle2 = {
                            CodigoElemento: r.get('CodigoElemento'),
                            ValorCodigo1: r.get('ValorCodigo1'),
                            ValorCodigo5: r.get('ValorCodigo5'),
                            ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                        };
                        ArrayEgreso.push(MA_MiscelaneosDetalle2);
                        i = i + 1;
                    });

                          if (invalidFieldsGrid.length > 0) {
                            addRecursosValidacion(invalidFieldsGrid);
                            App.cmdGuardar.setDisabled(false);
                          } else {
                              App.FormActual.setDisabled(true);

                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("CCEPF203b_Save_CONTRARREFERENCIA"))',
                            params: {
                                selectionArray1: ArrayIngreso,
                                selectionArray2: ArrayEgreso,
                                //selectionArray3: CabezeraContraRefere,
                                text: '0'
                            }
                            , success: function (result) {
                               reload = true;
                            }
                        });

                  }

                    if (reload) {
                        parent.App.txtRecargarX.setValue('RELOAD');

                    } else {
                        App.cmdGuardar.setDisabled(false);
                        App.taAlerts.setVisible(true);
                    }

                } else {

           if (invalidFieldsGrid.length > 0) {
                addRecursosValidacion(invalidFieldsGrid);
                App.cmdGuardar.setDisabled(false);
            }
                App.cmdGuardar.setDisabled(false);
                return true;

        }

        }
        

    var setValuesGridForm = function (r, valor) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var ValorCodigo1 = r.get('ValorCodigo1');
        var CodigoElemento = r.get('CodigoElemento');
        if (ValorCodigo1 == null || ValorCodigo1 == '') {
            //App.IdDiagnostico.setValue(null);
        }

    };


    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };




    var getInvalidFieldsGrid = function (form, invalidFields, fila) {
        var fields = App.FormActual.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });
        return invalidFields;
    };


      

         var beforeSave = function (form) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            var FieldsInvalidos = getInvalidFields(form);
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) { accionMensajes(result.data); }
                });
            }
        };






        var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.Formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.Formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };


        var onFailure = function (data) {
            App.cmdGuardar.setDisabled(false);
        };

    </script>
}


@section cuerpo
{
    @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)
        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(
            Html.X().FormPanel().ItemID("center")
                                .DefaultAnchor("100%")
                                .AutoScroll(true)
                                .Height(340)
                                .Header(false)
                                .Border(true)
                                .ID("FormActual")
                                .Listeners(l =>
                                    {
                                        l.Render.Handler = "eventoRenderForm(); ";
                                    })
                               .Items(
                        X.TextField().ID("RecepcionaRecurso")
                                     .Listeners(l =>
                                        {
                                            l.Change.Handler = "InsertRow(this, '" + (indicaModoLectura ? 1 : 0) + "');";
                                        })
                                     .Hidden(true),

                        X.FieldSet().ID("fsDatosGral")
                         .ColumnWidth(0.4).Collapsible(true)
                         .Title("Datos Generales")
                //.Border(false)
                         .MarginSpec("0 05 0 05")
                         .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "150"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })
                         .DefaultAnchor("100%")
                         .FieldDefaults(d =>
                            {
                                d.LabelAlign = LabelAlign.Left;
                            })

                         .Items(

                        // F203.1
                        X.NumberFieldFor(m => m.NroContrarreferencia).FieldLabel("Nº ").ReadOnly(indicaModoLectura)

                        .MinValue(0)
                        .MaxValue(9999)
                        .NegativeText(MENS_NUMERO)
                        .EnableKeyEvents(true)
                        .InputWidth(50)
                        .Listeners(l =>
                        {
                            l.Blur.Handler = "eventoValorCognitiva(this, 'P1');";
                            l.KeyUp.Fn = "eventoKey";
                            l.KeyDown.Handler = "setIndicaCambios(true);";
                        }),

                        X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "150")); })
                        .Items(
                            X.DateFieldFor(m => m.FechaContrarreferencia).Format("dd/MM/yyyy").Width(280).Editable(false)


                             .FieldLabel("Fecha").LabelWidth(150)
                             .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaContrarreferencia),
                            X.Component().Width(100),
                            X.TimeFieldFor(m => m.HoraContrarreferencia)

                           .Listeners(l => l.Select.Handler = "setIndicaCambios(true);")
                //.ID("IdHoraContrarreferencia")
                            .Format("H:mm").Width(180)
                            .FieldLabel("Hora").Editable(false).LabelWidth(40).Increment(60)

                            ),

                        X.TextFieldFor(m => m.EstablecimientoOrigen).FieldLabel("Establecimiento de refiere").ReadOnly(false).Disabled(false).MaxLength(100)
                            .EnableKeyEvents(true)
                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                        ,
                        X.TextFieldFor(m => m.ServicioOrigen).FieldLabel("Servicio de origen").Hidden(false).MaxLength(100)
                            .EnableKeyEvents(true)
                          .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                        ,
                        X.TextFieldFor(m => m.EstablecimientoDestino).FieldLabel("Establecimiento de destino").Hidden(false).MaxLength(100)

                            .EnableKeyEvents(true)
                          .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                          ,
                        X.TextFieldFor(m => m.ServicioDestino).FieldLabel("Servicio de destino").Hidden(false).MaxLength(100)
                              .EnableKeyEvents(true)
                          .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })

                        ),

                        X.FieldSet().ID("fsIdentificacion")
                         .ColumnWidth(0.4).Collapsible(true)
                         .Title("Identificación del usuario")
                //.Border(false)
                         .MarginSpec("0 05 0 05")
                         .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "150"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })
                         .DefaultAnchor("100%")
                         .FieldDefaults(d =>
                            {
                                d.LabelAlign = LabelAlign.Left;
                            })

                            .Items(
                //F203.2
                       X.TextFieldFor(m => m.IdentificacionUsuario).FieldLabel("Identificación del usuario").Hidden(false).PaddingSpec("5").LabelWidth(150).InputWidth(800)
                          .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                          .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                       ),
                //F203.3

                        // Grilla Diagnóstico de ingreso
                // GrillaDiagnóstico de egreso

                        X.FieldSet().ID("fsResumen")

                        .ColumnWidth(0.4).Collapsible(true)
                        .Title("<b>Resumen de la Historia Clínica</b>")
                        .MarginSpec("0 05 0 05")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "170"));
                        })
                        .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })
                            .Items(

                                X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                 .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                                 .Items(
                                    X.DateFieldFor(m => m.FechaIngreso).Format("dd/MM/yyyy").Width(230)
                                     .FieldLabel("Fecha de ingreso")
                                    .EnableKeyEvents(true)
                                .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                                     .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaIngreso)
                                     .PaddingSpec("5").LabelWidth(155).Editable(false).InputWidth(100),
                                    X.Component().Width(50),
                                    X.DateFieldFor(m => m.FechaEgreso).Format("dd/MM/yyyy").Width(230).Editable(false)
                                       .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                                .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                                     .FieldLabel("Fecha de egreso")
                                     .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaEgreso)
                                  ),
                                X.GridPanel()
                                        .ID("GRILLA_Ingreso")
                                        .Border(true)
                                        .PaddingSpec("5")
                                        .Store(
                                            Html.X().Store()
                                                .ID("STORE_ContrarreferenciaIngreso")
                                                .Model(
                                                    Html.X().Model()
                                                        .IDProperty("CodigoElemento")
                                                        .Fields(
                                                            Html.X().ModelField().Name("CodigoElemento"),
                                                            Html.X().ModelField().Name("ValorCodigo1"),
                                                            Html.X().ModelField().Name("ValorCodigo5"),
                                                            Html.X().ModelField().Name("ACCION")
                                                        )
                                                )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                .Url("CCEPF203_LISTAR_GRILLADIAGNOSTICO")
                                                                .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                .Root("data")
                                                                                .TotalProperty("total")
                                                                                .IDProperty("CodigoElemento")))
                                                                .ExtraParams(e => e.Add(new Parameter("Tipo", "IN")))
                                                                                ))
                                        )
                                        .ColumnModel(
                                            Html.X().ComponentColumn().Editor(true)
                                                                      .Hidden(true)
                                                                      .Text("CIE-10")
                                                                      .DataIndex("ValorCodigo1")
                                                                      .Flex(1)
                                                                      .Component(
                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                            .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                        )
                                            ,
                                            Html.X().ComponentColumn().Editor(true)
                                                                      .Text("CIE-10")
                                                                      .DataIndex("ValorCodigo5")
                                                                      .Flex(1)
                                                                      .Component(
                                                                        Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                            .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                        )
                                            ,
                                            Html.X().CommandColumn().Width(70)
                                                                    .Text("Eliminar")
                                                                    .Commands(
                                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                            .CommandName("Delete")
                                                                            .Icon(Icon.Delete)
                                                                            .Text("")
                                                                        )
                                                                    .Listeners(ls => ls.Command.Handler = "deleteActual(record,this.up('grid'),'IN');")
                                        )
                                        .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                                        .Plugins(Html.X().CellEditing())
                                        .TopBar(
                                                Html.X().Toolbar().Hidden(indicaModoLectura)
                                                    .Items(
                                                          Html.X().ToolbarSeparator()
                                                        , Html.X().Label()
                                                              .Html("<b><font color='" + COLOR_BLUE01 + "'> Diagnóstico de  " + DESC_ADD + "</font></b>")
                                                        , X.ToolbarFill()
                                                        , Html.X().Button().ID("btnSelDesactivo_Patolo")
                                                              .Html("<b>Cátalogo</b>")
                //.Icon(Icon.PluginDisabled)
                                                              .Icon(Icon.CogAdd)
                                                              .Handler("eventoActivarSeleccion(App.btnSelDesactivo_Patolo, App.btnSelActivo_Patolo, 'GRILLA_Ingreso');  parent.App.txtEventoBienes.setValue('FILTRO_X');")

                                                       , Html.X().Button().ID("btnSelActivo_Patolo")
                                                            .Html("<b>Cátalogo</b>")
                                                            .Icon(Icon.PluginGo)
                                                            .Hidden(true)
                                                            .Handler("eventoDesactivarSeleccion(App.btnSelActivo_Patolo, App.btnSelDesactivo_Patolo)")

                                                    )



                                        ),

                                X.GridPanel()
                                        .ID("GRILLA_Egreso")
                                        .Border(true)
                                        .PaddingSpec("5")
                                        .Store(
                                            Html.X().Store()
                                                .ID("STORE_ContrarreferenciaEgreso")
                                                .Model(
                                                    Html.X().Model()
                                                        .IDProperty("CodigoElemento")
                                                        .Fields(
                                                            Html.X().ModelField().Name("CodigoElemento"),
                                                            Html.X().ModelField().Name("ValorCodigo1"),
                                                            Html.X().ModelField().Name("ValorCodigo5"),
                                                            Html.X().ModelField().Name("ACCION")
                                                        )
                                                )
                                                .AutoLoad(true)
                                                .RemoteSort(false)
                                                .IsPagingStore(true)
                                                .RemotePaging(true)
                                                .PageSize(5)
                                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                .Url("CCEPF203_LISTAR_GRILLADIAGNOSTICO")
                                                                .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                .Root("data")
                                                                                .TotalProperty("total")
                                                                                .IDProperty("CodigoElemento")))
                                                                .ExtraParams(e => e.Add(new Parameter("Tipo", "EG")))
                                                                                ))
                                        )
                                        .ColumnModel(
                                            Html.X().ComponentColumn().Editor(true)
                                                                .Text("CIE-10")
                                                                .Hidden(true)
                                                                .DataIndex("ValorCodigo1")
                                                                .Flex(1)
                                                                .Component(
                                                                    Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                    )
                                                ,
                                            Html.X().ComponentColumn().Editor(true)
                                                                .Text("CIE-10")
                                                                .DataIndex("ValorCodigo5")
                                                                .Flex(1)
                                                                .Component(
                                                                    Html.X().TextField().ReadOnly(indicaModoLectura)
                                                                        .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                                    )
                                                ,
                                            Html.X().CommandColumn().Width(70)
                                                                    .Text("Eliminar")
                                                                    .Commands(
                                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                                .CommandName("Delete")
                                                                                .Icon(Icon.Delete)
                                                                                .Text("")
                                                                        )
                                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record,this.up('grid'),'EG');")
                                        )
                                        .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi))
                                        .Plugins(Html.X().CellEditing())
                                        .TopBar(
                                                Html.X().Toolbar().Hidden(indicaModoLectura)
                                                    .Items(
                                                          Html.X().ToolbarSeparator()
                                                        , Html.X().Label()
                                                              .Html("<b><font color='" + COLOR_BLUE01 + "'> Diagnóstico de " + DESC_ADD2 + "</font></b>")
                                                        , X.ToolbarFill()

                                                        , Html.X().Button().ID("btnSelDesactivo_APTrabajo")
                                                              .Html("<b>Cátalogo</b>")
                //.Icon(Icon.PluginDisabled)
                                                              .Icon(Icon.CogAdd)
                                                              .Handler("eventoActivarSeleccion(App.btnSelDesactivo_APTrabajo, App.btnSelActivo_APTrabajo, 'GRILLA_Egreso'); ; parent.App.txtEventoBienes.setValue('FILTRO_X');")

                                                        , Html.X().Button().ID("btnSelActivo_APTrabajo")
                                                              .Html("<b>Cátalogo</b>")
                                                              .Icon(Icon.PluginGo)
                                                              .Hidden(true)
                                                              .Handler("eventoDesactivarSeleccion(App.btnSelActivo_APTrabajo, App.btnSelDesactivo_APTrabajo)")


                                                    )
                                        ),
                           X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 0 0")
                            .Items(
                                X.TextFieldFor(m => m.TratamientoRealizados).PaddingSpec("5")
                                 .FieldLabel("Tratamiento realizados").Hidden(false)
                                 .LabelWidth(150).InputWidth(800)
                             ),
                            X.TextFieldFor(m => m.ProcedimientosRealizados)
                             .FieldLabel("Procedimientos realizados").Hidden(false).PaddingSpec("5").LabelWidth(150).InputWidth(800)

                                ),

                        // fin grillas



                       // F203.4
                       X.FieldSet()
                        .ID("fsDatos")
                        .Collapsible(true)
                        .ColumnWidth(0.4).Title("Datos de la Contrarreferencia")
                        .MarginSpec("05 05 0 05")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "250"));
                //    d.Add(new Parameter("DefaultAnchor", "100%"));
                //    d.Add(new Parameter("LabelAlign", "Left"));
                //    d.Add(new Parameter("InputWidth", "700"));
                //})
                //.FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                        .Items(
                        X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 0 0")
                        .Items(
                            X.RadioGroupFor(m => m.Origen, new List<Radio.Config> {
                                new Radio.Config{BoxLabel = "De la Comunidad", InputValue = "D", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Establecimiento de salud", InputValue = "E", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Autorreferencia", InputValue = "A", ReadOnly =indicaModoLectura}
                            }).Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                            .Vertical(false)
                            .PaddingSpec("3")
                            .FieldLabel("Origen de la referencia")
                            .LabelWidth(250).Width(800)
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "580"));
                //    d.Add(new Parameter("DefaultAnchor", "150%"));
                //})
                            .AnchorVertical("100%")
                            .ID("IdRadio1")
                             )
                           ,

                        X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 0 0")
                        .Items(
                            X.RadioGroupFor(m => m.Calificacion, new List<Radio.Config> {
                                new Radio.Config{BoxLabel = "Justificada", InputValue = "J", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "No justificada", InputValue = "N", ReadOnly =indicaModoLectura}
                            }).Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                            .Vertical(false)
                            .PaddingSpec("3")
                            .FieldLabel("Calificación pre liminar de la referencia")
                            .LabelWidth(250).Width(620)
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "80"));
                //    d.Add(new Parameter("DefaultAnchor", "50%"));
                //})
                            .AnchorVertical("100%")
                            .ID("IdRadio2")
                            ),

                        X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 0 0")
                        .Items(
                            X.RadioGroupFor(m => m.UPSContrarreferencia, new List<Radio.Config> {
                                new Radio.Config{BoxLabel = "Consulta externa", InputValue = "C", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Emergencia", InputValue = "E", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Apoyo al Dx", InputValue = "A", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Hospitalización", InputValue = "H", ReadOnly =indicaModoLectura}

                            }

                            ).Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                            .Vertical(false)
                            .PaddingSpec("3")
                            .FieldLabel("UPS que ordena la Contrarreferencia")
                //.Defaults(d =>
                //{
                //    d.Add(new Parameter("LabelWidth", "80"));
                //    d.Add(new Parameter("DefaultAnchor", "50%"));
                //})
                            .LabelWidth(250).Width(977)
                            .AnchorVertical("100%")
                            .ID("IdRadio3")
                            ),

                            X.ComboBoxFor(c => c.IdEspecialidad).ReadOnly(indicaModoLectura)
                                    .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESPECIALI").Select(d => new ListItem(d.Name, d.ID)))
                                    .FieldLabel("Especialidad").Editable(false)
                                    .PaddingSpec("3")
                                   .SimpleSubmit(true)
                                   .Listeners(l => l.Select.Handler = "setIndicaCambios(true);")
                                ,
                        X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 05 0")
                        .Items(
                           X.TextAreaFor(c => c.Recomendaciones).FieldLabel("Recomendaciones e indicaciones para el seguimiento")
                            .LabelAlign(LabelAlign.Top)
                            .PaddingSpec("6")
                            .Height(100)
                //.InputWidth(300)
                            .Width(800)
                              .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                              .Listeners(l => { l.KeyDown.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })
                         )

                        ),



                       X.FieldSet().ID("fsResponsable")
                        .Collapsible(true) //F203.5
                        .ColumnWidth(0.4).Title("Responsable de la contrarreferencia")
                        .Layout(LayoutType.VBox)
                        .MarginSpec("05 05 0 05")
                        .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "100"));
                                d.Add(new Parameter("DefaultAnchor", "100%"));
                                d.Add(new Parameter("LabelAlign", "Left"));
                            })
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Left })
                        .Items
                        (

                               X.Container()
                                .Layout(LayoutType.VBox)
                                .Items(

                                    X.Container()
                                    .Layout(LayoutType.HBox)
                                    .Items(
                                        X.NumberFieldFor(c => c.IdPersonalSalud).FieldLabel("Codigo").Width(170).ReadOnly(true)
                                        .PaddingSpec("2"),
                                        X.Component().Width(20),
                                        X.TextField().ID("tfNomMed").Width(500).FieldLabel("Nombre Medico").ReadOnly(true)
                                        .PaddingSpec("2"),
                                        X.Button().Text("...").Disabled(indicaModoLectura).Handler("seleccionadorMedico(); setIndicaCambios(true);").PaddingSpec("2")

                                        ),
                                    X.Container()
                                     .Layout(LayoutType.HBox)
                                     .Items(
                                        X.TextField().ID("tfNroMed").Width(200).FieldLabel("C.M.P").ReadOnly(true).PaddingSpec("2"))

                                )

                         ),



                       X.FieldSet().ID("fsCondicion")
                        .Collapsible(true) //F203.6
                        .ColumnWidth(0.4).Title("Condición del Paciente para la contrarreferencia")
                        .Layout(LayoutType.VBox)
                        .MarginSpec("05 05 0 05")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "120"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                            d.Add(new Parameter("LabelAlign", "Left"));
                        })
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(

                            X.RadioGroupFor(m => m.CondicionPaciente, new List<Radio.Config> {
                                new Radio.Config{BoxLabel = "Curado", InputValue = "C", ReadOnly =indicaModoLectura,Handler="eventoCheck(this, 'C1', 'N');"},
                                new Radio.Config{BoxLabel = "Mejorado", InputValue = "M", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Atendido por apoyo al Dx", InputValue = "A", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Diserción", InputValue = "D", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Retiro voluntario", InputValue = "R", ReadOnly =indicaModoLectura},
                                new Radio.Config{BoxLabel = "Fallecido", InputValue = "F", ReadOnly =indicaModoLectura}
                            })


                            .Vertical(true)
                            .FieldLabel("")
                            .Defaults(d =>
                            {
                                d.Add(new Parameter("LabelWidth", "80"));
                                d.Add(new Parameter("DefaultAnchor", "50%"));
                            })
                            .AnchorVertical("100%")
                            .ID("IdRadio4")

                         )
                ////////ADD PARA MSGS/////
                        ,
                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                //////////////////////
                        , X.Label().Hidden(false).Border(false).Html("<font  size='2.5em'; color='white'>Espacio</font>")
                     ).DirectEvents(de =>
                     {
                         de.Render.Url = Url.Action("postWindowProxima");
                         de.Render.ExtraParams.Add(new Parameter(
                               "id", "" + Model.IdPersonalSalud, ParameterMode.Value));
                     }).CloseAction(CloseAction.Destroy)

                    .TopBar(X.Toolbar().ID("bar").Items(
                            X.ToolbarSpacer(20),
                            X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true),
                            X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>"),

                            X.ToolbarSpacer(20),
                            Html.X().Container().Layout(LayoutType.HBox)
                            .ID("conthbIndicaError").Hidden(true).Items(
                                X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                            ),

                            X.ToolbarFill(),

                            X.Button()
                            .Text("Imprimir")
                            .Icon(Icon.Report)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresion")
                            .Handler("eventoVisorReporte('');"),

                            X.Button()
                            .Text("Imprimir Todos")
                            .Icon(Icon.ReportGo)
                            .Hidden(!visibleImpresion)
                            .ID("btnImpresionHC")
                            .Handler("eventoVisorReporte('HC');"),

                            X.ToolbarSpacer().Width(40),

                            X.Button()
                             .Text("Guardar")
                                .Icon(Icon.Disk)
                               .ID("cmdGuardar").Hidden(indicaModoLectura)
                               .CausesValidation(true)
                //.Handler(" EnviarDataServer(this.up('grid'));")
                //.Handler("capturar();")
                            .DirectEvents(directEvents =>
                            {  //Model.ACCION : Posee el MODO ACTUAL

                                //de.Click.Before = "return EnviarDataServer(this.up('grid'));";
                                //de.Click.EventMask.ShowMask = true;
                                //de.Click.Url = Url.Action("CCEPF203b_Save_CONTRARREFERENCIA");
                                //de.Click.Success = "onSuccess(result.data);";
                                //de.Click.Failure = "onFailure();";
                                
                                directEvents.Click.Url = Url.Action("CCEPF203b_Save_CONTRARREFERENCIA");
                                directEvents.Click.Before = "return EnviarDataServer(this.up('grid'));";
                                directEvents.Click.EventMask.ShowMask = true;
                                directEvents.Click.EventMask.Msg = "Loading...";
                                directEvents.Click.Success = "onSuccess(result.data);";
                                directEvents.Click.Failure = "onFailure();";

                            })
                                ,

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                //    ,

                            //X.Button()
                //    .Text("Editar")
                //    .ID("btnOnEdit")
                //    .Icon(Icon.ApplicationFormEdit)
                //    .Hidden(true)
                //    .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                //.Listeners(l => l.FieldChange
                //    .Handler = "setIndicaCambios(true);"

                        //)
                );
        }
        )



    )

}

