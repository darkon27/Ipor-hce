@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_OrdenIntervencionQuirurgicaCab_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var IdEpisodioAtencion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioAtencion;
    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                             (Model.Accion == "UPDATE" ? true :
                             (Model.Accion == "DELETE" ? false :
                             (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var Informate = (Model.OrdIntNinguna == "S" ? false : true);
    var DESC_ADD1 = "Cirigias G-O ";
    var DESC_ADD = "";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
    var STYLE_LABEL = "'width:100px;height: 18px; margin-right:5px; font: bold 11px tahoma ; color: #284A89 ' >";
    var STYLE_ETQ_ABR = "<label style= ";
    var STYLE_ETQ_CER = "</label>";
    var COLORBORDE = "#ef092c";
    var STYLE_TEXT = "Border : none; background: none; font: normal 11px tahoma; height: 18px;";
    var opcionAlmacen = Session["OPCIONALMACEN"];
    var COLOR_BLUE01 = "#284A89";

}

@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>
        var ValidacionAroC = false;

        var ValidacionchkEndesNasosinus = false;
        var ValidacionchkMicroscopio = false;
        var ValidacionchkTorreLaparoscopia = false;
        var ValidacionchkArtroscopio = false;
        var ValidacionchkHisteroscopio = false;
        var ValidacionchkLitotriciaEx = false;
        var ValidacionchkLitrotripSphHolm = false;

        var ValidacionchkPreOpe1 = false;
        var ValidacionchkPrenatal = false;
        var ValidacionchkRiegNeu = false;
        var ValidacionchkEvaAnaste = false;
        var ValidacionchkPreOpe2= false;
        var ValidacionchkRiegQuiru = false;
        var ValidacionchkRiegCardio = false;
        var ValidacionchkPlacaToraxRx = false;
        var ValidacionchkArthrocare = false;
        var ValidacionchkHojaShaver = false;
        var ValidacionchkDobleArtrodesis = false;
        var ValidacionchkExtracOsteo = false;
        var ValidacionchkLigasure= false;
        var ValidacionchkPlacaTorax = false;
        var ValidacionchkTripleArtrodesis = false;
        var ValidacionchkExtracOsteClavo = false;

    </script>

    <script>

        function SetChekExamUsoEquipos() {
            alert(@ViewBag.FlagArcoC);
        }

        var getRowClassMaterial = function (record) {
          
        }

        var getRowClassExamenes = function (record) {
            // alert("entro "+1)

            //if (record.data.ValorCodigo7 == "P0331004") {

            //    ValidacionchkPreOpe1 = true;
            //    App.chkPreOpe1.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "P0331007") {

            //    ValidacionchkPrenatal = true;
            //    App.chkPrenatal.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "370114") {

            //    ValidacionchkRiegNeu = true;
            //    App.chkRiegNeu.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "500117") {

            //    ValidacionchkEvaAnaste = true;
            //    App.chkEvaAnaste.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "P0333437") {

            //    ValidacionchkPreOpe2 = true;
            //    App.chkPreOpe2.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "230101") {

            //    ValidacionchkRiegQuiru = true;
            //    App.chkRiegQuiru.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "230102") {

            //    ValidacionchkRiegCardio = true;
            //    App.chkRiegCardio.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "440406") {

            //    ValidacionchkPlacaToraxRx = true;
            //    App.chkPlacaToraxRx.setValue(true);
            //    setIndicaCambios(false);
            //}
        }

        var getRowClass = function (record) {
            // alert("entro "+1)          

            //if (record.data.ValorCodigo7 == "001501") {
            //    ValidacionAroC = true;
            //    App.chkArcoenC.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "001264") {
            //    ValidacionchkEndesNasosinus = true;
            //    App.chkEndesNasosinus.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "000091") {
            //    ValidacionchkMicroscopio = true;
            //    App.chkMicroscopio.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "001473") {
            //    ValidacionchkTorreLaparoscopia = true;
            //    App.chkTorreLaparoscopia.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "001224") {

            //    ValidacionchkArtroscopio = true;
            //    App.chkArtroscopio.setValue(true);
            //    setIndicaCambios(false);

            //}

            //if (record.data.ValorCodigo7 == "001225") {

            //    ValidacionchkHisteroscopio = true;
            //    App.chkHisteroscopio.setValue(true);
            //    setIndicaCambios(false);

            //}

            //if (record.data.ValorCodigo7 == "001266") {

            //    ValidacionchkLitotriciaEx = true;
            //    App.chkLitotriciaEx.setValue(true);
            //    setIndicaCambios(false);
            //}

            //if (record.data.ValorCodigo7 == "001288") {

            //    ValidacionchkLitrotripSphHolm = true;
            //    App.chkLitrotripSphHolm.setValue(true);
            //    setIndicaCambios(false);

            //}
        }

        var indicaCambios = false;
        function setIndicaCambios(value) {

            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

    </script>

    <script>


    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);

        var v = '@isNuevo';
        if (v.toUpperCase() == 'TRUE') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }

    }

    var grillaActiva = "";
    var grilla_Actual = "";

    var cuenta = 0;


    var count = 0; // a counter for new records
    var count2 = 0;
    var count3 = 0;
    var count4 = 0;
    var count5 = 0;

    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };
        

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }
    };


    var addRecursosValidacion = function (FieldsInvalidos) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
            params: {
                data: FieldsInvalidos,
                indica: 'VALIDAR',
            },
            success: function (result) { accionMensajes(result.data); }
        });
    };

        var COLOR_RED01_ = "#990000";
        var COLOR_YELLOW02_ = "#D9A407";
        var COLOR_GREEN01_ = "#177506";
        var COLOR_ORANGE01_ = "#E07509";


        var changeEPS = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };



    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };

    function eventoRadio(radio, tipo, SubTipo) {
        var obj = radio.getValue();
        if (obj) {
            if (tipo == 'TipoAnamnesis') {
                //  alert(App.OrdIntOtro.getValue());

                if (SubTipo == 'S') {
                    App.OrdIntOtro.setVisible(true);
                    App.OrdIntOtro.focus();
                }
                else {
                    App.OrdIntOtro.setVisible(false);
                    App.OrdIntOtro.setValue(null);
                }
            }
        }

    }
        

    var calcular = function (valor) {
        var id1 = 0;
        var id2 = 0;
        var id3 = 0;
        var V = '@indicaModoLectura';

        if (V == 'False') {
            if (App.IdPariedad1.getValue() == '') {
                id1 = 0;
            } else {
                id1 = App.IdPariedad1.getValue();
            } if (App.IdPariedad2.getValue() == '') {
                id2 = 0;
            } else {
                id2 = App.IdPariedad2.getValue();
            } if (App.IdPariedad3.getValue() == '') {
                id3 = 0;
            } else {
                id3 = App.IdPariedad3.getValue();
            }

            var valoracion = id1 + id2 + id3;
            App.IdPariedad4.setValue(valoracion);

        }
    }

    function eventoCancelar(form) {
        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //setIndicaCambios(false);
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    };

    function deleteActualDiagnostico(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF327_Eliminar_CirugiaDiagnosticoDetalle"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };


    function deleteActualCirugiaPro(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF327_Eliminar_CirugiaProcedimientoDetalle"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };


    function deleteActualCirugiaExamenes(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF327_Eliminar_CirugiaExamenes"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };



    function deleteActualCirugiaUsoDeEquipos(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF327_Eliminar_CirugiaUsodeEquipos"))',
                params: {
                    MODO: 'DELETEDETALLE',
                    codigo: '' + par1,
                    secuencia: par2
                }
            });
            seleccRecordActual = null;
        }
    };


    function deleteActualCirugiaMatEspecializado(record, grid, tipo) {
        if (record != null) {
            var store = grid.store;
            setIndicaCambios(true);
            var par1 = record.data.ValorCodigo1;
            var par2 = record.data.CodigoElemento;
            store.remove(record);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CCEPF327_Eliminar_CirugiaMaterialEspecializado"))',
                    params: {
                        MODO: 'DELETEDETALLE',
                        codigo: '' + par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null;
            }
        };



    function InsertRow(valor, estado, soloLectura) {
        var datito = grillaActiva;
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (datito == null) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Debe activar la selección de una de las Tablas.',
                        tipo: 'WARNING'
                    }
                });
              //  parent.App.btnBuscarServiviosNota.setDisabled(true);
                valor.setValue('');
                return;
            }
            if (grilla_Actual == 'grillaDiagCiru') {

                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());

                    console.log(JSON.stringify(obj));

                var DescripcionLocalVar = obj.DescripcionLocal;
                var cadena1 = '';
                var cadena2 = '';
                var posicion = 0;

                for (var i = 0; i < DescripcionLocalVar.length; i++) {
                    if (DescripcionLocalVar[i] == '|') {
                        posicion = i;
                    }

                }
                for (var i = 0; i < DescripcionLocalVar.length; i++) {
                    if (i < posicion) {
                        cadena1 = cadena1 + DescripcionLocalVar[i];
                    } else if (i > posicion) {
                        cadena2 = cadena2 + DescripcionLocalVar[i];
                    }
                }
                var DescripcionLocalVar2 = '';
                DescripcionLocalVar2 = cadena1 + '|[' + obj.CodigoElemento + ']';
                    var grid = Ext.getCmp("grillaDiagnosticoCirugia");
                    setIndicaCambios(true);
                    grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);



                valor.setValue('');
                }
            }
            else if (grilla_Actual == 'grillaCirugiProce') {

                if (valor.getValue() != '') {



                    var obj = JSON.parse(valor.getValue());

                    //alert(JSON.stringify(obj));

                    //console.log(JSON.stringify(obj));


                    var DescripcionLocalVar = obj.DescripcionLocal;

                    var ValorIndicadorEPS = obj.ValorEntero4;

                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }

                    }
                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }
                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 ='[' + obj.CodigoElemento + ']';
                      var grid = Ext.getCmp("grillaCirugiaProcedimiento");
                      setIndicaCambios(true);

                    //grid.store.insert(0, { CodigoElemento: count2++, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });

                      grid.store.insert(0, { CodigoElemento: 'New' + count++, ValorEntero5: ValorIndicadorEPS, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: 'NUEVO' });


                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);
                    valor.setValue('');

                    //alert("proceimiento");
                }

            } else if (grilla_Actual == 'grillaExamenesCiru') {


                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;

                    var ValorIndicadorEPS = obj.ValorEntero4;


                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }

                    }
                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }
                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 = '[' + obj.CodigoElemento + ']';
                    var grid = Ext.getCmp("grillaExamenes");
                    setIndicaCambios(true);
                   // alert(DescripcionLocalVar);

                    grid.store.insert(0, { CodigoElemento: 'New' + count3++, ValorEntero5: ValorIndicadorEPS, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);

                    valor.setValue('');
                   // alert("examenes");

                }

            } else if (grilla_Actual == 'grillaUsoEquipos') {

                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;
                    var ValorIndicadorEPS = obj.ValorEntero4;

                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }

                    }
                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }
                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 = '[' + obj.CodigoElemento + ']';

                    var grid = Ext.getCmp("grillaExamUsoEquipos");

                    setIndicaCambios(true);
                  //  alert(DescripcionLocalVar);

                    grid.store.insert(0, { CodigoElemento: 'New' + count4++, ValorEntero5: ValorIndicadorEPS, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);

                    valor.setValue('');
                }

            } else if (grilla_Actual == 'gridllMaterialEspe') {

                if (valor.getValue() != '') {
                    var obj = JSON.parse(valor.getValue());
                    var DescripcionLocalVar = obj.DescripcionLocal;
                    var ValorIndicadorEPS = obj.ValorEntero4;

                    var cadena1 = '';
                    var cadena2 = '';
                    var posicion = 0;

                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (DescripcionLocalVar[i] == '|') {
                            posicion = i;
                        }

                    }
                    for (var i = 0; i < DescripcionLocalVar.length; i++) {
                        if (i < posicion) {
                            cadena1 = cadena1 + DescripcionLocalVar[i];
                        } else if (i > posicion) {
                            cadena2 = cadena2 + DescripcionLocalVar[i];
                        }
                    }
                    var DescripcionLocalVar2 = '';
                    DescripcionLocalVar2 = '[' + obj.CodigoElemento + ']';

                    var grid = Ext.getCmp("grillaMaterialEspe");

                    setIndicaCambios(true);
                  //  alert(DescripcionLocalVar);

                    grid.store.insert(0, { CodigoElemento: 'New' + count5++, ValorEntero5: ValorIndicadorEPS, ValorCodigo1: DescripcionLocalVar, ValorCodigo7: DescripcionLocalVar2, ACCION: "NUEVO" });
                    Ext.Function.defer(function () {
                        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                    }, 100);

                    valor.setValue('');
                }

            }

            else {
               // alert("falta");
            }


        }
    }





    function validaDuplicadoCatalogo(valor1, valor2) {
        var estados = false;
        App.StoreCatalogoCirugia.each(function (r) {
            if (valor2 == r.get('CirugiaGO')) { estados = true; }
        });
        return estados;
    };


    var keyCode2;
    function isNumberKey() {
        if ((event.keyCode < 48) || (event.keyCode > 57)) {
            event.returnValue = false;
        }
    }



    function validaDuplicado(valor) {
        var estados = false;
        var valor1
        var valor2
        App.storeValoracion.each(function (r) {
            if (trim(r.get('ValorCodigo1')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }



    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }


    </script>
    <script>

    var hhValidation = function (h) {
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    };

    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    };

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
        }
    }



    function seleccionadorMedico() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoDos',
                AccionListado: 'LISTARPAGEMPLEADO'
            }
        });
    };


    var keyCode
    function ReplaceCaracterEspec(e) {
        /*Capturar tecla pulsada*/
        if (window.event) keyCode = window.event.keyCode;
        else if (e) keyCode = e.which;
        var prueba = keyCode;
        // alert(keyCode);
        //
        if (prueba == 60) {
            var textactual = e.getValue();
            e.value = e.setValue(textactual + " ");
        }
        var texto = e.getValue();
        var vacio = "";
        var cadena = vacio + e.getValue();
        var recortado = cadena.substr(-1, 1);
        // alert(recortado + ' antes');
        if (recortado == "<" || recortado == ">") {
            //  alert(recortado + ' despues');
            e.value = e.setValue(texto + " ");
        }

    }



    function ProbarCabezera() {


        var CirugiaComplejae = {
            CirugiaCompleja: App.IdRadio1.getValue(),
            TipoDeHospitalizacion: App.IdRadioHospi.getValue()

        };
        var obj = new Object();
        // obj.ID = CirugiaCompleja;
        var datito = new Array();
        datito.push(CirugiaComplejae);
        var valor = datito[0].CirugiaCompleja
        var valor2 = datito[0].TipoDeHospitalizacion
        //  alert(valor + "-" + valor2);
        console.log(valor + "-" + valor2)

        //  console.log(obj[0].CirugiaCompleja);
        //alert(obj[0].CirugiaCompleja);
        for (x = 0; x < datito.length; x++) {
            //  alert(obj[x].CirugiaCompleja);
            // alert(obj[x].TipoDeHospitalizacion);
        }
        //var daciru = JSON.stringify(CirugiaCompleja);
        //var valor = daciru['CirugiaCompleja'];
        //alert(DescripcionLocalVar);
        // alert(JSON.stringify(CirugiaCompleja));
    }




    function EnviarData(grid) {
        var dateValue = App.txDate.getValue();
        if (dateValue) {
            var formattedDate = Ext.Date.format(dateValue, 'd/m/Y');
            console.log(formattedDate);
        }
        console.log(App.txTiempo.getValue())
        beforeSave(App.formactual);
        var reload = true;

        if (true) {


            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            //   var store = App.storeExamenes;
            var status = 0;
            var i = 0;
            var errores = 0;
            var erroresDiag = 0;
            var erroresExamenes = 0;
            var erroresExaUsoEquipos = 0;
            var erroresExaMatEspecializados = 0;

            var valores = "";
            var invalidFields = new Array();
            var fila = 0;
            var objCabezeraOrdenAtencion = new Array();
            var ArrayOrdInterQuirurDiagnosti = new Array();

            var CirugiaCompleja = App.IdRadio1.getValue();
            var datito = new Array();
            datito.push(CirugiaCompleja);
            var valorCirugiaCompleja = datito[0].CirugiaCompleja
            //alert(valorCirugiaCompleja);

            //var TipoHospi = App.IdRadioHospi.getValue();
            //var ArrayTipoHospi = new Array();
            //ArrayTipoHospi.push(TipoHospi);
            //var valorTipoHospi = ArrayTipoHospi[0].TipoDeHospitalizacion
            //alert(valorTipoHospi);

            var TipoAnastesiaCi = App.IdRadioTipoAnaste.getValue();
            var ArrayTipoAnastesia = new Array();
            ArrayTipoAnastesia.push(TipoAnastesiaCi);
            var valorTipoAnastesia = ArrayTipoAnastesia[0].TipoAnastesia


            var TipoOrdIntNinguna = App.IdRadioOrdIntNinguna.getValue();
            var ArrayOrdIntNinguna = new Array();
            ArrayOrdIntNinguna.push(TipoOrdIntNinguna);
            var valorOrdIntNinguna = ArrayOrdIntNinguna[0].OrdIntNinguna

            // Obtener el estado de los checkboxes
            var isHospitalaria = Ext.getCmp("chHospitalaria").getValue();
            var isHospitalariaInt = Number(isHospitalaria);
            var isUCI = Ext.getCmp("chUCI").getValue();
            var isUCIInt = Number(isUCI);
            var isUCIN = Ext.getCmp("chUCIN").getValue();
            var isUCINInt = Number(isUCIN);
            var isAmbulatorio = Ext.getCmp("chAmbulatorio").getValue();
            var isAmbulatorioInt = Number(isAmbulatorio);

            // Obtener los valores de los campos de texto
            var vdiaHospitalaria = Ext.getCmp("txtHospitalaria").getValue();
            var vdiaUCI = Ext.getCmp("txtUCI").getValue();
            var vdiaUCIN = Ext.getCmp("txtUCIN").getValue();
            var vdiaAmbulatorio = Ext.getCmp("txtAmbulatorio").getValue();


            var objCabecerra2 = {
                CirugiaCompleja: valorCirugiaCompleja,
                DuracionAprox: App.DuracionAprox.getValue(),
                DiasAproximados: App.DiasAproximados.getValue(),
                //TipoDeHospitalizacion: valorTipoHospi,
                TipoAnastesia: valorTipoAnastesia,
                NumeroAyudantes: App.NumeroAyudantes.getValue(),
                NumeroInstrumentos: App.NumeroInstrumentos.getValue(),
                OrdAnastesiologo: App.OrdAnastesiologo.getValue(),
                OrdIntOtro: App.OrdIntOtro.getValue(),
                OrdIntNinguna: valorOrdIntNinguna,
                Comentario: App.Comentario.getValue(),
                flagHospitalaria: isHospitalariaInt,
                diaHospitalaria: vdiaHospitalaria,
                flagUCI: isUCIInt,
                diaUCI: vdiaUCI,
                flagUCIN: isUCINInt,
                diaUCIN: vdiaUCIN,
                flagAmbulatorio: isAmbulatorioInt,
                diaAmbulatorio: vdiaAmbulatorio
            };

            console.log("objCabezeraOrdenAtencion");
            objCabezeraOrdenAtencion.push(objCabecerra2);
            //alert(JSON.stringify(objCabecerra2));
            App.storeDiagnostico.each(function (r) {
                //var consola = r.get('ACCION');
                //console.log(consola);

                //if (consola === 'NUEVO' || consola === 'UPDATEDETALLERECUPERADO') {
                //    r.set('ACCION', 'DETALLE');
                //} else {
                //    r.set('ACCION', 'UPDATEDETALLE');
                //}

                fila = fila + 1;
                ///VALIDACIÓN
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                var num = r.get('ValorCodigo6');

                if (num.length > 200) {
                    var grid = Ext.getCmp('grillaDiagnosticoCirugia');
                    var indice = grid.store.indexOf(r);
                    var column = grid.columns[6];
                    var record = grid.store.getAt(indice);
                    var cell = grid.getView().getCell(record, column);
                    var textarea = cell.dom.firstChild.firstChild.id;
                    Ext.getCmp(textarea).setActiveError('El campo Tiempo Enfermedad solo admite 200 caracteres.');
                    erroresDiag = erroresDiag + 1;
                }

                var SS_HC_OrdenIntervencionQuirurgicaDiagnostico_FE = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorEntero4: r.get('ValorEntero4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorEntero5: r.get('ValorEntero5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                };
                ArrayOrdInterQuirurDiagnosti.push(SS_HC_OrdenIntervencionQuirurgicaDiagnostico_FE);
                console.log("SS_HC_OrdenIntervencionQuirurgicaDiagnostico_FE");
            });

            //ARRAY CIRUGIA PROCEDIMIENTO
            var ArrayOrdInterCirugiaProce = new Array();
            App.storeCirugiaProcedimiento.each(function (r) {
                fila = fila + 1;
                ///VALIDACIÓN
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                var SS_HC_OrdenInterQuirurCirugiaProce_FE = {
                    CodigoElemento: r.get('CodigoElemento'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorEntero5: r.get('ValorEntero5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                };
                ArrayOrdInterCirugiaProce.push(SS_HC_OrdenInterQuirurCirugiaProce_FE);
            });

            var ArrayOrdInterExamenApoyo = new Array();
            App.storeExamenes.each(function (r) {
                fila = fila + 1;
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);


                var num = r.get('ValorCodigo2');

                if (num.length > 200) {
                    var grid = Ext.getCmp('grillaExamenes');
                    var indice = grid.store.indexOf(r);
                    var column = grid.columns[8];
                    var record = grid.store.getAt(indice);
                    var cell = grid.getView().getCell(record, column);
                    var textarea = cell.dom.firstChild.firstChild.id;
                    Ext.getCmp(textarea).setActiveError('El campo Especificaciones solo admite 200 caracteres.');
                    erroresExamenes = erroresExamenes + 1;

                }


                var SS_HC_OrdenIntervencionQuirurExamenApoyo_FE = {
                    ValorFecha: r.get('ValorFecha'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorEntero5: r.get('ValorEntero5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),
                    CodigoElemento: r.get('CodigoElemento'),
                    DescripcionExtranjera: r.get('DescripcionExtranjera'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')

                };
                ArrayOrdInterExamenApoyo.push(SS_HC_OrdenIntervencionQuirurExamenApoyo_FE);
                i = i + 1;

            });

            console.log("ArrayOrdInterExamenApoyo");
            var ArrayOrdUsoDeEquipos = new Array();

            App.storeExamUsoEquipos.each(function (r) {
                fila = fila + 1;
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                var num = r.get('ValorCodigo2');

                if (num.length > 200) {
                    var grid = Ext.getCmp('grillaExamUsoEquipos');
                    var indice = grid.store.indexOf(r);
                    var column = grid.columns[8];
                    var record = grid.store.getAt(indice);
                    var cell = grid.getView().getCell(record, column);
                    var textarea = cell.dom.firstChild.firstChild.id;
                    Ext.getCmp(textarea).setActiveError('El campo Especificaciones solo admite 200 caracteres.');
                    erroresExaUsoEquipos = erroresExaUsoEquipos + 1;

                }

                var SS_HC_OrdenIntervencionUsodeEquipos_FE = {
                    ValorFecha: r.get('ValorFecha'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorEntero5: r.get('ValorEntero5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),
                    CodigoElemento: r.get('CodigoElemento'),
                    DescripcionExtranjera: r.get('DescripcionExtranjera'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')

                };
                ArrayOrdUsoDeEquipos.push(SS_HC_OrdenIntervencionUsodeEquipos_FE);
                i = i + 1;
            });



            var ArrayMaterialEspecializados = new Array();
            App.storeMaterialEspe.each(function (r) {
                fila = fila + 1;
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                var num = r.get('ValorCodigo2');

                if (num.length > 200) {
                    var grid = Ext.getCmp('grillaMaterialEspe');
                    var indice = grid.store.indexOf(r);
                    var column = grid.columns[8];
                    var record = grid.store.getAt(indice);
                    var cell = grid.getView().getCell(record, column);
                    var textarea = cell.dom.firstChild.firstChild.id;
                    Ext.getCmp(textarea).setActiveError('El campo Especificaciones solo admite 200 caracteres.');
                    erroresExaMatEspecializados = erroresExaMatEspecializados + 1;

                }


                var SS_HC_OrdenInterQuirurMaterialEspecializado_FE = {
                    ValorFecha: r.get('ValorFecha'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorEntero5: r.get('ValorEntero5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),
                    CodigoElemento: r.get('CodigoElemento'),
                    DescripcionExtranjera: r.get('DescripcionExtranjera'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? 'DETALLE' : 'UPDATEDETALLE')
                };
                ArrayMaterialEspecializados.push(SS_HC_OrdenInterQuirurMaterialEspecializado_FE);
                i = i + 1;
            });

            console.log("ArrayMaterialEspecializados");
            if (erroresDiag != 0) {
                App.taAlerts.setValue('*El campo Tiempo Enfermedad solo admite 200 caracteres.');
                App.taAlerts.setVisible(true);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
                return false;

            } else if (erroresExamenes != 0) {
                App.taAlerts.setValue('*El campo Especificaciones solo admite 200 caracteres.');
                App.taAlerts.setVisible(true);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
                return false;

            } else if (erroresExaUsoEquipos != 0) {
                App.taAlerts.setValue('*El campo Especificaciones solo admite 200 caracteres.');
                App.taAlerts.setVisible(true);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
                return false;

            } else if (erroresExaMatEspecializados != 0) {
                App.taAlerts.setValue('*El campo Especificaciones solo admite 200 caracteres.');
                App.taAlerts.setVisible(true);
                App.conthbIndicaError.setVisible(true);
                App.taAlerts.focus();
                return false;

            }

            else {
                App.taAlerts.setValue('');
                App.taAlerts.setVisible(false);
                App.conthbIndicaError.setVisible(false);

            }

            if (invalidFields.length > 0) {
                addRecursosValidacion(invalidFields);
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);

                return false;


            } else {

                App.formactual.setDisabled(true);
                console.log("CCEPF327_Save_OrdenIntervencionQuirurgica");
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("CCEPF327_Save_OrdenIntervencionQuirurgica"))',
                    params: {
                        selectionArrayCabezera: objCabezeraOrdenAtencion,
                        selectionArray1: ArrayOrdInterQuirurDiagnosti,
                        selectionArrayCiruProce: ArrayOrdInterCirugiaProce,
                        selectionArray2: ArrayOrdInterExamenApoyo,
                        selectionUsoEquipos: ArrayOrdUsoDeEquipos,
                        selectionMaterEspeciliza: ArrayMaterialEspecializados,
                        text: '0',
                        txDate: formattedDate,
                        txTiempo: App.txTiempo.getValue()
                    }
                    , success: function (result) {
                        reload = true;
                    }

                });
            }

            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');

            } else {
                App.cmdGuardar.setDisabled(false);
                App.taAlerts.setVisible(true);
            }

        } else {
            App.cmdGuardar.setDisabled(false);
        }

    }

    function validaDuplicadoPreOperaUsoEqui(valor1) {
        var estados = false;
        App.storeExamUsoEquipos.each(function (r) {
            if (trim(r.get('ValorCodigo7')) == trim(valor1)) {

                estados = true;
            }
        });
        return estados;
    }



    function validaDuplicadoMaterialEspeci(valor1) {
        var estados = false;
        App.storeMaterialEspe.each(function (r) {
            if (trim(r.get('ValorCodigo7')) == trim(valor1)) {

                estados = true;
            }
        });
        return estados;
    }



    function validaDuplicadoPreOpera1(valor1) {
        var estados = false;
        App.storeExamenes.each(function (r) {
            if (trim(r.get('ValorCodigo7')) == trim(valor1)) {

                estados = true;
            }
        });
        return estados;
    }

    function cargarExamenes(tipo, id) {
        console.log("cargarExamenes");
        Ext.Ajax.request({
            url: '/HClinica/ObtenerExamenes',
            method: 'GET',
            params: {
                sucursal: 'ceg',
                tipo: tipo
            },
            success: function (response) {
                var data = Ext.decode(response.responseText);

                var checkboxGroup = Ext.getCmp(id);

                var items = data.map(function (examen) {
                    return {
                        boxLabel: examen.Descripcion,
                        inputValue: examen.Id,
                        width: 200,
                        listeners: {
                            change: function (checkbox, newValue, oldValue) {
                                // Esta es la función que se ejecutará al hacer clic en el checkbox
                                checkboxClickHandler(checkbox, newValue, examen);
                            }
                        }

                    };
                });

                checkboxGroup.add(items); // Agregar los elementos al CheckboxGroup
                checkboxGroup.updateLayout(); // Actualiza el layout para que se muestren los nuevos checkboxes
            },
            failure: function () {
                Ext.Msg.alert('Error', 'No se pudo cargar los examenes.');
            }
        });
    }

    // Función que se ejecutará cuando se haga clic en el checkbox
    function checkboxClickHandler(checkbox, newValue, examen) {

        console.log("Checkbox clicked:", checkbox.boxLabel, "Checked:", newValue);
        console.log("Examen details:", examen);



        if (newValue) {


            switch (examen.Tipo) {

                case 1:
                    //validamos si existe en la grilla
                    if (validaDuplicadoPreOpera1(examen.CodigoMedi)) {
                        Ext.Msg.show({
                            title: "Advertencia",
                            msg: "Ya existe el Medicamento",
                            icon: Ext.Msg.WARNING,
                            minWidth: 200,
                            buttons: Ext.Msg.OK
                        });
                        return;
                    }
                    cuenta = cuenta + 1;
                    App.grillaExamenes.store.insert(0, {
                        CodigoElemento: 'New' + cuenta,
                        ValorFecha: '06/01/2020',
                        ValorCodigo1: examen.Descripcion + '|[' + examen.CodigoMedi + ']', // Usamos la descripción y código del examen
                        ValorCodigo7: examen.CodigoMedi, // Código del examen
                        ValorEntero6: examen.Tipo, // Usamos el tipo de examen
                        ValorCodigo2: '',
                        ACCION: 'NUEVO'
                    });
                    App.grillaExamenes.getView().refresh()
                    break;

                case 2:
                    //validamos si existe en la grilla
                    if (validaDuplicadoPreOperaUsoEqui(examen.CodigoMedi)) {
                        Ext.Msg.show({
                            title: "Advertencia",
                            msg: "Ya existe el Medicamento",
                            icon: Ext.Msg.WARNING,
                            minWidth: 200,
                            buttons: Ext.Msg.OK
                        });
                        return;
                    }
                    cuenta = cuenta + 1;
                    App.grillaExamUsoEquipos.store.insert(0, {
                        CodigoElemento: 'New' + cuenta,
                        ValorFecha: '06/01/2020',
                        ValorCodigo1: examen.Descripcion + '|[' + examen.CodigoMedi + ']', // Usamos la descripción y código del examen
                        ValorCodigo7: examen.CodigoMedi, // Código del examen
                        ValorEntero6: 1, // Usamos el tipo de examen
                        ValorCodigo2: '',
                        ACCION: 'NUEVO'
                    });
                    break;

                case 3:
                    //validamos si existe en la grilla
                    if (validaDuplicadoMaterialEspeci(examen.CodigoMedi)) {
                        Ext.Msg.show({
                            title: "Advertencia",
                            msg: "Ya existe el Medicamento",
                            icon: Ext.Msg.WARNING,
                            minWidth: 200,
                            buttons: Ext.Msg.OK
                        });
                        return;
                    }
                    cuenta = cuenta + 1;
                    App.grillaMaterialEspe.store.insert(0, {
                        CodigoElemento: 'New' + cuenta,
                        ValorFecha: '06/01/2020',
                        ValorCodigo1: examen.Descripcion + '|[' + examen.CodigoMedi + ']', // Usamos la descripción y código del examen
                        ValorCodigo7: examen.CodigoMedi, // Código del examen
                        ValorEntero6: 1, // Usamos el tipo de examen
                        ValorCodigo2: '',
                        ACCION: 'NUEVO'
                    });
                    break;
            }
            // Insertar una nueva fila en el store del grid

        }


        // Aquí puedes ejecutar cualquier otra lógica, como llamar otra función o hacer una solicitud AJAX
    }

    function onCheckboxGroupChange(group, newValue, oldValue) {
        console.log("onCheckboxGroupChange");
        // Llamar a la acción del controlador para obtener los datos
        Ext.Ajax.request({
            url: '/HClinica/TuAccion', // Cambia esto por la ruta de tu acción
            method: 'GET', // O 'POST' según lo que necesites
            success: function (response) {
                // Procesar la respuesta y cargar los datos en el CheckboxGroup
                var data = Ext.decode(response.responseText);
                var checkboxGroup = Ext.getCmp('CheckboxGroupMaterialEspe');
                checkboxGroup.setChecked(data); // Asegúrate de que `data` esté en el formato correcto
            },
            failure: function () {
                Ext.Msg.alert('Error', 'No se pudo cargar los datos.');
            }
        });
    }


    function addRecordPreOpe1(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();
        console.log(chk);
        console.log(grid);
        if (ValidacionchkPreOpe1 == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //  alert("chekiado");
                var codigoMedi = 'P0331004';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'PERFIL PREOPERATORIOS (Hg, Glu, Urea, Crea, HIV, GS-Rh, CyS, VHBsAg, RPR)|[P0331004]',
                            ValorCodigo7: 'P0331004',
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });

                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkPreOpe1 = false;
        }


    };

    function addRecordPreOpe2(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkPreOpe2 == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = 'P0333437';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    //alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'PERFIL PREOPERATORIO 2 (Hg, Gluc, Crea, Gs-Rh, TC. TS, Orina Completa)|[P0333437]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'

                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkPreOpe2 = false;
        }

    };


    function addRecordPrenatal(chk, grid) {
        console.log(grid);
        //var sucur = App.cmbSucursal.getRawValue();
        if (ValidacionchkPrenatal == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                // alert("chekiado");
                var codigoMedi = 'P0331007';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    App.grillaExamenes.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'PERFIL PRENATAL (Hg, Glu, Urea, Crea, OC, GS-Rh, RPR)|[P0331007]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                // alert("no seleccionado");
            }
        } else {
            ValidacionchkPrenatal = false;
        }

    };


    function addRecordRiegoQuirurgico(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkRiegQuiru == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                // alert("chekiado");
                var codigoMedi = '230101';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'RIESGO QUIRURGICO, INCLUYE CONSULTA|[230101]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'

                        });
                }
            } else {
                // alert("no seleccionado");
            }
        } else {
            ValidacionchkRiegQuiru = false;

        }

    };


    function addRecordRiegoCardiologico(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkRiegCardio == false) {

            var CheckAll = chk.getValue();
            if (CheckAll) {
                // alert("chekiado");
                var codigoMedi = '230102';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'RIESGO CARDIOLOGICO, INCLUYE CONSULTA|[230102]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                // alert("no seleccionado");
            }
        } else {

            ValidacionchkRiegCardio = false;
        }

    };


    function addRecordPlacaToraxRX(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkPlacaToraxRx == false) {



            var CheckAll = chk.getValue();
            if (CheckAll) {
                // alert("chekiado");
                var codigoMedi = '440406';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'TORAX F (1)|[440406]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                // alert("no seleccionado");
            }
        } else {
            ValidacionchkPlacaToraxRx = false;
        }

    };




    function addRecordRiegoNeumonologico(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkRiegNeu == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '370114';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'RIESGO NEUMOLOGICO, INCLUYE CONSULTA|[370114]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkRiegNeu = false;
        }


    };

    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };

    function addRecordEvaluacionAnastesia(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkEvaAnaste == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '500117';
                if (validaDuplicadoPreOpera1(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;

                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'CONSULTA PRE- ANESTESIA|[500117]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkEvaAnaste = false;
        }


    };

    function addRecordTorreLaparoscopia(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkTorreLaparoscopia == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '001473';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'USO DE TORRE DE LAPAROSCOPIA|[001473]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkTorreLaparoscopia = false;
        }

    };

    function siwtchEquipos(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkTorreLaparoscopia == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '001473';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'USO DE TORRE DE LAPAROSCOPIA|[001473]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkTorreLaparoscopia = false;
        }

    };

    function addRecordArcoEnC(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        console.log("CHECK : " + chk);
        console.log("GRID : " + grid);



        if (ValidacionAroC == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '001501';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'ARCO EN C|[001501]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionAroC = false;
        }





    };


    function addRecordEndescopiaNasosinus(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();



        if (ValidacionchkEndesNasosinus == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '001264';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'EQUIPO DE CIRUGIA NASOENDOSCOPICA|[001264]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkEndesNasosinus = false;
        }


    };


    function addRecordMicroscopio(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkMicroscopio == false) {


            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '000091';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'MICROSCOPIO USO|[000091]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }

        } else {
            ValidacionchkMicroscopio = false;
        }


    };

    function addRecordArtroscopia(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkArtroscopio == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                var codigoMedi = '001224';
                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            ValorCodigo1: 'CIRUGIA ENDOSCOPICA, INCLUYENDO LAPAROSCOPIA, TORACOSCOPIA, ARTROSCOPIA|[001224]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkArtroscopio = false;
        }



    };

    function addRecordHisteroscopio(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();


        if (ValidacionchkHisteroscopio == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '001225';

                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'VIDEO ENDOSCOPIA (INCLUYE DOCUMENTO FOTOGRAFICO) GASTROCITOSCOPIA, HISTEROSCOPIA, BRONCOSCOPIA, ARTROSCOPIA | [001225]',

                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkHisteroscopio = false;

        }

    };


    function addRecordLitotriciaExtracorpo(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkLitotriciaEx == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '001266';

                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'EQUIPO DE LITOTRICIA EXTRACORPOREA | [001266]',

                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {

            ValidacionchkLitotriciaEx = false;
        }


    };


    function addRecordLitotriptorLaserSphinx(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkLitrotripSphHolm == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '001288';

                if (validaDuplicadoPreOperaUsoEqui(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'ALQUILER DE EQUIPO LASER SPHINX HOLMIUM (UYCPERU) | [001288]',

                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkLitrotripSphHolm = false;
        }


    };


    function addRecordArthrocare(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkArthrocare == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '000050';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: ' PUNTA DE RADIOFRECUENCIA ( TOPAZ ARTHROCARE) | [000050]',

                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkArthrocare = false;
        }

    };


    function addRecordHojaShaver(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkHojaShaver == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '001241';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'HOJA DE SHAVER | [001241]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkHojaShaver = false;
        }


    };


    function addRecordDobleArtrodesis(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkDobleArtrodesis == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '121203';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'DOBLE ARTRODESIS | [121203]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkDobleArtrodesis = false;
        }


    };


    function addRecordOsteosintesisClavoProfundo(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();



        if (ValidacionchkExtracOsteo == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '120607';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                        {
                            CodigoElemento: 'New' + cuenta,
                            ValorFecha: '06/01/2020',
                            //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                            ValorCodigo1: 'Extrac. Osteosintesis - Clavo profundo | [120607]',
                            ValorCodigo7: codigoMedi,
                            ValorEntero6: 1,
                            ValorCodigo2: '',
                            ACCION: 'NUEVO'
                        });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkExtracOsteo = false;
        }


    };


    function addRecordLigasure(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkLigasure == false) {



            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '001251';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                            {
                                CodigoElemento: 'New' + cuenta,
                                ValorFecha: '06/01/2020',
                                //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                                ValorCodigo1: 'EQUIPO LIGASURE | [001251]',
                                ValorCodigo7: codigoMedi,
                                ValorEntero6: 1,
                                ValorCodigo2: '',
                                ACCION: 'NUEVO'
                            });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkLigasure = false;
        }
    };


    function addRecordPlaca_TORAXF(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();


        if (ValidacionchkPlacaTorax == false) {



            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '440406';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                            {
                                CodigoElemento: 'New' + cuenta,
                                ValorFecha: '06/01/2020',
                                //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                                ValorCodigo1: 'TORAX F (1) | [440406]',
                                ValorCodigo7: codigoMedi,
                                ValorEntero6: 1,
                                ValorCodigo2: '',
                                ACCION: 'NUEVO'
                            });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkPlacaTorax = false;
        }
    };


    function addRecordTriple_Artrodesis(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkTripleArtrodesis == false) {
            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '121204';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                            {
                                CodigoElemento: 'New' + cuenta,
                                ValorFecha: '06/01/2020',
                                //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                                ValorCodigo1: 'TRIPLE ARTRODESIS-TIBIOTARSIANA-SUBASTRAGALINAS | [121204]',
                                ValorCodigo7: codigoMedi,
                                ValorEntero6: 1,
                                ValorCodigo2: '',
                                ACCION: 'NUEVO'
                            });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkTripleArtrodesis = false;
        }
    };


    function addRecordOsteosintesis_Clavo(chk, grid) {
        // var sucur = App.cmbSucursal.getRawValue();

        if (ValidacionchkExtracOsteClavo == false) {


            var CheckAll = chk.getValue();
            if (CheckAll) {
                //alert("chekiado");
                //  var codigoMedi = '290105';
                var codigoMedi = '120606';

                if (validaDuplicadoMaterialEspeci(codigoMedi)) {
                    Ext.Msg.show({
                        title: "Advertencia",
                        msg: "Ya existe el Medicamento",
                        icon: Ext.Msg.WARNING,
                        minWidth: 200,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    // alert("agregoOOO" + codigoMedi);
                    cuenta = cuenta + 1;
                    grid.store.insert(0,
                            {
                                CodigoElemento: 'New' + cuenta,
                                ValorFecha: '06/01/2020',
                                //  ValorCodigo1: 'HISTEROSCOPIA | [290105]',
                                ValorCodigo1: 'EXTRAC. OSTEOSINTESIS -CLAVO |[120606]',
                                ValorCodigo7: codigoMedi,
                                ValorEntero6: 1,
                                ValorCodigo2: '',
                                ACCION: 'NUEVO'
                            });
                }
            } else {
                //  alert("no seleccionado");
            }
        } else {
            ValidacionchkExtracOsteClavo = false;
        }

    };

    var setValuesGridForm = function (r, valor) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:
        var ValorCodigo1 = r.get('ValorCodigo1');
        var CodigoElemento = r.get('CodigoElemento');

        if (ValorCodigo1 == null || ValorCodigo1 == '') {
            //App.IdDiagnostico.setValue(null);
        }

    };

    var getInvalidFieldsGrid = function (form, invalidFields, fila) {
        var fields = App.formactual.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });
        return invalidFields;
    };

    function PanelOcultar(grid) {
        var panel2 = App.Panel2;
        var panel3 = App.Panel3;
        panel2.setVisible(false);
        panel3.setVisible(false);

    };

    function PanelMostrar(grid) {
        var panel2 = App.Panel2;
        var panel3 = App.Panel3;
        panel3.setVisible(true);
        panel2.setVisible(true);
    };

    var valcheck = 0;
    var eventoCheck = function (chk, pregunta, valor) {
        var CheckAll = chk.getValue();

        var FieldSet1 = App.fsGinecologico;
        var FieldSet2 = App.fsObstetrico;
        var FieldSet3 = App.fsObstetrico2;
        //var panel1 = App.Panel1;
        //var panel2 = App.Panel2;
        if (CheckAll) {

            if (pregunta == 'CTodo1') {

                FieldSet1.setVisible(false);
                var store = App.GridPanelCirugiaGO.store;
                store.reload();

            }

            if (pregunta == 'C1') {
                App.cbo1eraRelSex.setDisabled(true)

                //panel1.setVisible(false);

                App.cbo1eraRelSex.setValue("")


                FieldSet1.setVisible(true);
            } if (pregunta == 'C1_1') {
                App.cboRelacionesSex.setDisabled(true)
                App.cboRelacionesSex.setValue("")
                FieldSet1.setVisible(true);
            } if (pregunta == 'C1_2') {

                App.cboNumParejasSex.setDisabled(true)
                App.cboNumParejasSex.setValue("")
                FieldSet1.setVisible(true);

            } if (pregunta == 'C1_3') {
                App.cboConducSexualRies.setDisabled(true)
                App.cboConducSexualRies.setValue("")
                FieldSet1.setVisible(true);
            } if (pregunta == 'C1_4') {
                App.cboUltimoPap.setDisabled(true)
                App.txtPap.setValue("");
                App.txtPap.setDisabled(true)

                FieldSet1.setVisible(true)
            } if (pregunta == 'C1_5') {
                App.cboManografia.setDisabled(true)
                App.txtMamografia.setDisabled(true)
                App.txtMamografia.setValue("")
                FieldSet1.setVisible(true)
            }

            if (pregunta == 'C2') {
                FieldSet2.setVisible(false);
                FieldSet3.setVisible(false);
                var store = App.GRILLA_Diagnostico.store;
                store.reload();
            }

        }

        else {

            if (pregunta == 'CTodo1') {
                FieldSet1.setVisible(true);
                var store = App.GridPanelCirugiaGO.store;
                store.reload();

            }

            if (pregunta == 'C1') {
                App.cbo1eraRelSex.setDisabled(false)
                //panel1.setVisible(true);
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();
            }

            if (pregunta == 'C1_1') {
                App.cboRelacionesSex.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();
            } if (pregunta == 'C1_2') {

                App.cboNumParejasSex.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();

            } if (pregunta == 'C1_3') {
                App.cboConducSexualRies.setDisabled(false)
                FieldSet1.setVisible(true);
                //var store = App.GridPanelCirugiaGO.store;
                //store.reload();
            } if (pregunta == 'C1_4') {
                App.cboUltimoPap.setDisabled(false)

                App.txtPap.setDisabled(false)
                FieldSet1.setVisible(true)
            } if (pregunta == 'C1_5') {
                App.cboManografia.setDisabled(false)
                App.txtMamografia.setDisabled(false)
                FieldSet1.setVisible(true)

            }
            if (pregunta == 'C2') {

                FieldSet2.setVisible(true);
                FieldSet3.setVisible(true);
                var store = App.GRILLA_Diagnostico.store;
                store.reload();
            }

        }

    };

    var countCatalogo = 0; // a counter for new records de Catalogo
    function addRecord(grid, grupo, IdUnidad, idEpisodioAte, idPacient, componenteAdd) {
        //alert(App.cmbTipAt.getValue() + "");

        if (componenteAdd.getValue() != null) {

            var valorSelec = componenteAdd.getValue();

            if (componenteAdd.getValue().length > 100) {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Solo se admiten 100 Caracteres.",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return;
            }
            if (validaDuplicadoCatalogo(grupo, valorSelec)) {
                Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Ya existe el Registro de Catalogo de cirugías y/o procedimientos gineco obstericos",
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
            } else {
                grid.store.insert(0,
                    {

                        UnidadReplicacion: IdUnidad,
                        IdEpisodioAtencion: idEpisodioAte,
                        IdPaciente: idPacient,
                        Secuencia: countCatalogo++,
                        CirugiaGO: valorSelec,
                        Accion: 'NUEVO'
                    });


            }
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe seleccionar un tipo de atención para añadirlo.",
                icon: Ext.Msg.INFO,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }

        App.cmbTipAt.setValue("");

    };

    function deleteActualCatalogo(record) {
        var store = App.GridPanelCirugiaGO.store;
        store.remove(record);
        Ext.net.DirectMethod.request({
            // "CCEPF013add_DataDeleteInmunizacionesAdulto"
            url: '@(Url.Action("CCEPF005_add_DataDeleteCatalogoCirugiaGO"))',
            params: {
                MODO: 'DELETEDETALLE',
                codigo: '',
                secuencia: record.data.Secuencia
            }
        });
    };


    var seleccRecordActual = null;
    function setSeleccionActual(record) {
        seleccRecordActual = record;
    }

    function addRecordMain(grid) {
        setIndicaCambios(true);
        grid.store.insert(0, {
            CODIGOELEMENTO: 'New' + count++, ValorCodigo1: '', ValorCodigo7: '', ValorEntero6: '', ACCION: 'NUEVO'
        });
        Ext.Function.defer(function () {
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
        }, 100);
    };

    function eventoActivarSeleccion(button, event) {

        grillaActiva = 1;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1_CCEP',
                text: '3813'
            },
            success: function (result) {
                parent.App.StoreBuscarServicios.reload();
            }
        });

        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivo', '');
        grilla_Actual = "grillaDiagCiru";
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivo' + numero).show();
        Ext.getCmp('IdbtnDesactivo2').show();
        Ext.getCmp('IdbtnActivo2').hide();
        Ext.getCmp('IdbtnDesactivoExamen').show();
        Ext.getCmp('IdbtnActivoExamen').hide();
        Ext.getCmp('IdbtnDesactivoExaUsoEqui').show();
        Ext.getCmp('IdbtnActivoExaUsoEqui').hide();
        Ext.getCmp('IdbtnDesactivoMaterialEspe').show();
        Ext.getCmp('IdbtnActivoMaterialEspe').hide();

        //for (var i = 0; i < numerogrupo; i++) {

        //    if (i != numero) {
        //        Ext.getCmp('IdbtnActivo' + i).hide();
        //        Ext.getCmp('IdbtnDesactivo' + i).show();
        //    }
        //}

        parent.App.chkServicio.show(); // Mostrar el contenedor
        parent.App.cbServicios.show(); // Mostrar el contenedor

        parent.App.IdLineaPQ.hide(); // Mostrar el contenedor
        parent.App.IdFamiliaPQ.hide(); // Mostrar el contenedor
        parent.App.IdAlmacenPQ.hide(); // Mostrar el contenedor
        parent.App.IdStockPQ.hide(); // Mostrar el contenedor

    };

    function eventoDesactivarSeleccion(button, event) {
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivo', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivo' + numero).show();
    };



    function eventoActivarSeleccionExamenes(button, event) {
        grillaActiva = 1;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1_CCEP',
                text: '6405'
            },
            success: function (result) {
                parent.App.StoreBuscarServicios.reload();
            }
        });
        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivoExamen', '');
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivoExamen' + numero).show();
        grilla_Actual = "grillaExamenesCiru";

        Ext.getCmp('IdbtnDesactivo').show();
        Ext.getCmp('IdbtnActivo').hide();

        Ext.getCmp('IdbtnDesactivo2').show();
        Ext.getCmp('IdbtnActivo2').hide();

        Ext.getCmp('IdbtnDesactivoExaUsoEqui').show();
        Ext.getCmp('IdbtnActivoExaUsoEqui').hide();

        Ext.getCmp('IdbtnDesactivoMaterialEspe').show();
        Ext.getCmp('IdbtnActivoMaterialEspe').hide();

        parent.App.chkServicio.show(); // Mostrar el contenedor
        parent.App.cbServicios.show(); // Mostrar el contenedor

        parent.App.IdLineaPQ.hide(); // Mostrar el contenedor
        parent.App.IdFamiliaPQ.hide(); // Mostrar el contenedor
        parent.App.IdAlmacenPQ.hide(); // Mostrar el contenedor
        parent.App.IdStockPQ.hide(); // Mostrar el contenedor

    };


    function eventoDesactivarSeleccionExamenes(button, event) {
        grillaActiva = null;
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivoExamen', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivoExamen' + numero).show();
    };


    function eventoActivarSeleccionCirugiaProce(button, event) {
        grillaActiva = 1;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1_CCEP',
                text: '6405'
            },
            success: function (result) {
                parent.App.StoreBuscarServicios.reload();
            }
        });
        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivo2', '');
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivo2' + numero).show();
        grilla_Actual = "grillaCirugiProce";
        Ext.getCmp('IdbtnDesactivo').show();
        Ext.getCmp('IdbtnActivo').hide();

        Ext.getCmp('IdbtnDesactivoExamen').show();
        Ext.getCmp('IdbtnActivoExamen').hide();

        Ext.getCmp('IdbtnDesactivoExaUsoEqui').show();
        Ext.getCmp('IdbtnActivoExaUsoEqui').hide();

        Ext.getCmp('IdbtnDesactivoMaterialEspe').show();
        Ext.getCmp('IdbtnActivoMaterialEspe').hide();

        parent.App.chkServicio.show(); // Mostrar el contenedor  3567
        parent.App.cbServicios.show(); // Mostrar el contenedor

        parent.App.IdLineaPQ.hide(); // Mostrar el contenedor
        parent.App.IdFamiliaPQ.hide(); // Mostrar el contenedor
        parent.App.IdAlmacenPQ.hide(); // Mostrar el contenedor
        parent.App.IdStockPQ.hide(); // Mostrar el contenedor

    };

    function eventoDesactivarSeleccionCirugiaProce(button, event) {
        grillaActiva = null;
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivo2', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivo2' + numero).show();
        //Ext.getCmp('IdbtnDesactivoSecundario').show();

    };


    function eventoActivarSeleccionUsodeEquipos(button, event) {
        grillaActiva = 1;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1_CCEP',
                text: '6405'
            },
            success: function (result) {
                parent.App.StoreBuscarServicios.reload();
            }
        });
        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivoExaUsoEqui', '');
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivoExaUsoEqui' + numero).show();

        grilla_Actual = "grillaUsoEquipos";

        Ext.getCmp('IdbtnDesactivo').show();
        Ext.getCmp('IdbtnActivo').hide();

        Ext.getCmp('IdbtnDesactivoExamen').show();
        Ext.getCmp('IdbtnActivoExamen').hide();

        Ext.getCmp('IdbtnDesactivo2').show();
        Ext.getCmp('IdbtnActivo2').hide();

        Ext.getCmp('IdbtnDesactivoMaterialEspe').show();
        Ext.getCmp('IdbtnActivoMaterialEspe').hide();

        parent.App.chkServicio.show(); // Mostrar el contenedor
        parent.App.cbServicios.show(); // Mostrar el contenedor

        parent.App.IdLineaPQ.hide(); // Mostrar el contenedor
        parent.App.IdFamiliaPQ.hide(); // Mostrar el contenedor
        parent.App.IdAlmacenPQ.hide(); // Mostrar el contenedor
        parent.App.IdStockPQ.hide(); // Mostrar el contenedor
    };


    function eventoDesactivarSeleccionUsodeEquipos(button, event) {
        grillaActiva = null;
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivoExaUsoEqui', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivoExaUsoEqui' + numero).show();
        //Ext.getCmp('IdbtnDesactivoSecundario').show();

        parent.App.chkServicio.show(); // Mostrar el contenedor
        parent.App.cbServicios.show(); // Mostrar el contenedor

        parent.App.IdLineaPQ.hide(); // Mostrar el contenedor
        parent.App.IdFamiliaPQ.hide(); // Mostrar el contenedor
        parent.App.IdAlmacenPQ.hide(); // Mostrar el contenedor
        parent.App.IdStockPQ.hide(); // Mostrar el contenedor
    };



    function eventoActivarSeleccionMaterialEspecializado(button, event) {
        grillaActiva = 1;
        //3567     6405
        var panelServ = Ext.getCmp('East1');
        parent.App.East1.expand();
        var numero = button.id.replace('IdbtnDesactivoMaterialEspe', '');
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnActivoMaterialEspe' + numero).show();
        grilla_Actual = "gridllMaterialEspe";
        Ext.getCmp('IdbtnDesactivo').show();
        Ext.getCmp('IdbtnActivo').hide();
        Ext.getCmp('IdbtnDesactivoExamen').show();
        Ext.getCmp('IdbtnActivoExamen').hide();
        Ext.getCmp('IdbtnDesactivo2').show();
        Ext.getCmp('IdbtnActivo2').hide();
        Ext.getCmp('IdbtnDesactivoExaUsoEqui').show();
        Ext.getCmp('IdbtnActivoExaUsoEqui').hide();

        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadFormatos"))',
            params: {
                containerId: 'Center1_CCEP',
                text: '6401'
            },
            success: function (result) {
                parent.App.IdLineaPQ.show(); // Mostrar el contenedor
                parent.App.IdFamiliaPQ.show(); // Mostrar el contenedor
                parent.App.IdAlmacenPQ.show(); // Mostrar el contenedor
                parent.App.IdStockPQ.show(); // Mostrar el contenedor

                parent.App.chkServicio.hide();
                parent.App.cbServicios.hide();

                parent.App.cbLinea.show();
                parent.App.chkFamilia.show();
                parent.App.cbFamilia.show();
                parent.App.cbAlmacen.show();
                parent.App.cmbStock.show();

                parent.App.txtparametro.setValue("MEDLINEA");
                parent.App.cbLinea.clearValue();
                parent.App.cbLinea.getStore().load();
                parent.App.cbLinea.setValue("13");
                parent.App.cbAlmacen.setValue('@opcionAlmacen');
                parent.App.StoreBuscarServicios.reload();
            }
        });


    };


    function eventoDesactivarSeleccionMaterialEspecializado(button, event) {
        grillaActiva = null;
        parent.App.East1.collapse();
        var numero = button.id.replace('IdbtnActivoMaterialEspe', '')
        Ext.getCmp(button.id).hide();
        Ext.getCmp('IdbtnDesactivoMaterialEspe' + numero).show();
        //Ext.getCmp('IdbtnDesactivoSecundario').show();
        var contenedor = Ext.getCmp('IdContainerPQ');
        if (contenedor) {
            contenedor.setHidden(true); // Ocultar el contenedor
        }
    };

    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    function calcularDiasAproximados() {
        var hospitalaria = Ext.getCmp('txtHospitalaria').getValue() || 0;
        var uci = Ext.getCmp('txtUCI').getValue() || 0;
        var ucin = Ext.getCmp('txtUCIN').getValue() || 0;
        var ambulatorio = Ext.getCmp('txtAmbulatorio').getValue() || 0;

        var totalDias = parseInt(hospitalaria) + parseInt(uci) + parseInt(ucin) + parseInt(ambulatorio);

        Ext.getCmp('DiasAproximados').setValue(totalDias);
    }

    </script>
}   @* fin @section cabecera *@


@section cuerpo
{
    @(
 Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)
        .LayoutConfig(   new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>  { l.AfterLayout.BroadcastOnBus = "App.resize"; l.AfterLayout.Single = true; })
        .Items(regions =>
        {
            regions.Add(Html.X().FormPanel()
                  .ID("formactual")
                  .ItemID("center")
                  .DefaultAnchor("100%")
                  .AutoScroll(true)
                 // .Height(340)
                  .Header(false)
                  .Border(true)

                  .Listeners(l =>
                  {
                      l.Render.Handler = "eventoRenderForm();";
                  })
               .Items(
                        X.FormPanel()
                      .ID("Panel1")
                     .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
                     .MarginSpec("05 05 05 00")
                     .DefaultAnchor("100%")
                    .Items(

                       X.FieldSet().ID("fsGinecologico")
                        .ColumnWidth(0.4).Collapsible(true)
                        .Title("Datos Paciente")
                        .Border(true)
                        .MarginSpec("05 05 0 05")
                        .DefaultAnchor("100%")
                        .FieldDefaults(d =>
                        {
                            d.LabelAlign = LabelAlign.Left;
                        })
                        .Items(
                         Html.X().Container()
                                         .Layout(LayoutType.HBox)
                                             .Layout(LayoutType.Column)
                               .Items(
                                                 Html.X().TextFieldFor("Nombre").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Nombre" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["NOMBREPACIENTE_EMERGE"])

                                                           .Width(300),

                                                              Html.X().TextFieldFor("Tipo Documento").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Tipo Documento" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["TIPODOCUMENTO_EMERGE"] == "D" ? "Documento" : "TIPODOCUMENTO_EMERGE")
                                                           .Width(300),

                                                //NUEVOS CAMPOS
                                                Html.X().TextFieldFor("CIA Seguros").ReadOnly(true)
                                                 .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "CIA Seguros" + STYLE_ETQ_CER)
                                                   .FieldStyle(STYLE_TEXT)
                                                   .LabelSeparator("")
                                                      .Text("" + Session["EmpresaAseguradoraNombre"])

                                                          .Width(300)
                                        )
                                        ,

                                        Html.X().Container()
                                         .Layout(LayoutType.HBox)
                                             .Layout(LayoutType.Column)
                                         .Items(
                                                 Html.X().TextFieldFor("Correo Electronico").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Correo Electronico" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["CORREOELECTRO_EMERGE"])

                                                           .Width(300),


                                                 Html.X().TextFieldFor("N° Documento").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "N° Documento" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["NUMDOCUMENTO_EMERGE"])
                                                         .Width(300),

                                                 Html.X().TextFieldFor("Fecha de Atención").ReadOnly(true)
                                                 .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Fecha de Atención" + STYLE_ETQ_CER)
                                                   .FieldStyle(STYLE_TEXT)
                                                   .LabelSeparator("")
                                                      .Text("" + Session["FechaCitaIntervencion"])

                                                          .Width(300),

                                                 Html.X().TextFieldFor("HC").ReadOnly(true)
                                                 .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "HC" + STYLE_ETQ_CER)
                                                   .FieldStyle(STYLE_TEXT)
                                                   .LabelSeparator("")
                                                      .Text("" + Session["CodigoHC_PACIENTE"])

                                                          .Width(300)

                                  )
                                  ,

                                        Html.X().Container()
                                         .Layout(LayoutType.HBox)
                                             .Layout(LayoutType.Column)
                                         .Items(
                                                 Html.X().TextFieldFor("Fecha Nacimiento").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Fecha Nacimiento" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["FECHANACIMIENTO_EMERGE"])
                                                           .Width(300),


                                                 Html.X().TextFieldFor("Telefono").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Telefono" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["TELEFONO_EMERGE"])
                                                         .Width(300)
                                                         ,

                                                           Html.X().TextFieldFor("Celular").ReadOnly(true)
                                                  .FieldLabel(STYLE_ETQ_ABR + STYLE_LABEL + "Celular" + STYLE_ETQ_CER)
                                                    .FieldStyle(STYLE_TEXT)
                                                    .LabelSeparator("")
                                                       .Text("" + Session["CELULAR_EMERGE"])
                                                         .Width(300)
                                  )
                        )
                      ),

                   X.FormPanel()
                    .ID("Panel2")
                     .BodyPadding(5)
                    .AutoScroll(true)
                   .Border(false)
                    .Header(false)
                    .Items(

                        X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Diagnóstico")
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(
                                            X.TextField()
                                               .ID("RecepcionaRecurso")
                                               .Listeners(l =>
                                               {
                                                   l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                               })
                                               .Hidden(true),
                                            X.NumberField().ID("IdDiagnostico").Hidden(true).Value(1),
                                            X.ComboBox().ID("DeterminacionDiagnostica").Hidden(true).Value(1),
                                            X.ComboBox().ID("IdDiagnosticoPrincipal").Hidden(true).Value(1),
                                            X.ComboBox().ID("GradoAfeccion").Hidden(true).Value(1),
                                            X.GridPanel()
                                               .ID("grillaDiagnosticoCirugia")
                                               .Border(false)
                                               .Store(
                                                   Html.X().Store()
                                                          .ID("storeDiagnostico")
                                                         .Model(
                                                           Html.X().Model()
                                                               .IDProperty("CodigoElemento")
                                                               .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                         new ModelField("ValorCodigo2", ModelFieldType.Int),
                                                                         new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                         new ModelField("ValorCodigo4", ModelFieldType.Int),
                                                                         new ModelField("ValorCodigo5", ModelFieldType.Int),
                                                                         new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                         new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                         new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                         new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                         new ModelField("ValorEntero3", ModelFieldType.Int),
                                                                         new ModelField("CodigoElemento", ModelFieldType.String),
                                                                         new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                         new ModelField("DescripcionLocal", ModelFieldType.String),
                                                                         new ModelField("ACCION", ModelFieldType.String)
                                                                           ))

                                                        .AutoLoad(true)
                                                      .RemoteSort(false)
                                                      .IsPagingStore(true)
                                                      .RemotePaging(true)
                                                      .PageSize(10)
                                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()

                                                                      .Url("CCEPF327_GRID_DIAGNOSTICO")

                                                                      .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                         .Root("data")
                                                                                         .TotalProperty("total")
                                                                                         .IDProperty("CodigoElemento")))))
                                               ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                                               .ColumnModel(
                                               Html.X().ComponentColumn()
                                                       .Editor(true)
                                                       .DataIndex("ValorCodigo1")/*.MenuDisabled(true) PARA QUITAR EL FILTRO DE LAS PESTAÑAS*/
                                                       .Text("Diagnóstico")
                                                       .Flex(1)
                                          .Component(
                                               /* Html.X().TextArea().ReadOnly(true).Height(40)*/
                                               Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                              .DisplayField("DescripcionLocal")
                                              .ValueField("DescripcionLocal")
                                              .TypeAhead(false)
                                              .Width(500)
                                              .PageSize(5)
                                              .HideBaseTrigger(true)
                                              .MinChars(0)
                                              //.Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DESCDIAGN").Select(d => new ListItem(d.Name, d.ID)))
                                              .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                              .TriggerAction(TriggerAction.Query)
                                             .ListConfig(Html.X().BoundList()
                                              .LoadingText("Searching...")
                                              .ItemTpl(Html.X().XTemplate()

                                              .Html(@<text>
                                                <div class="search-item">
                                                    <h3>{DescripcionLocal}</h3>

                                                </div>
                                            </text>)

                                                 )).Store(Html.X().Store()
                                               .AutoLoad(false)
                                              .Proxy(Html.X().AjaxProxy()
                                              .Url(Url.Action("GetPlants"))
                                              .ActionMethods(am => am.Read = HttpMethod.POST)
                                              .Reader(Html.X().JsonReader().Root("data"))
                                                        )
                                                        .Model(Html.X().Model()
                                                            .Fields(
                                                                Html.X().ModelField().Name("DescripcionLocal")

                                                            )
                                                        )
                                                    )

                                                ),

                                                    Html.X().ComponentColumn().Hidden(true)
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Diagnóstico")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                             .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Determinación")
                                                         .Width(150)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.Query)
                                                                        .EmptyText("Seleccione tipo")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABDIAGNOSTICO").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Grado Afección")
                                                         .Width(100)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .ID("CmbGrado").Editable(false)
                                                                        .EmptyText("-Select-").EmptyValue(0)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .AllowBlank(false).BlankText("Debe ingresar el campo grado afección")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGAFECCION").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                   Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo3")
                                                         .Text("Principal")
                                                         .Width(75)
                                                         .Component(
                                                                Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        //.QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .EmptyText("-Select-").EmptyValue(0)
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                        Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo5")
                                                         .Text("Tipo Antecedente")
                                                         .Hidden(true)
                                                         .Width(100)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .EmptyText("-Select-").EmptyValue(0)
                                                                        .AllowBlank(false).BlankText("Debe ingresar el campo tipo antecedente")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("DIAGANTECED").Select(d => new ListItem(d.Name, d.ID)))
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo6")
                                                         .Text("Tiempo Efermedad")
                                                         .Flex(1)
                                                         .Component(
                                                         Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                                      })

                                                             //Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero5")
                                                         .Text("Preexistencia")
                                                         .Hidden(true)
                                                         .Width(70)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .AllowBlank(false).BlankText("Debe ingresar el campo preexistencia")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Crónico")
                                                         .Hidden(true)
                                                         .Width(50)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .AllowBlank(false).BlankText("Debe ingresar el campo crónico")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero7")
                                                         .Text("Nuevo")
                                                         .Hidden(true)
                                                         .Width(50)
                                                         .Component(
                                                             Html.X().ComboBox().ReadOnly(indicaModoLectura)
                                                                        .Editable(false)
                                                                        .QueryMode(DataLoadMode.Local)
                                                                        .TriggerAction(TriggerAction.All)
                                                                        .AllowBlank(false).BlankText("Debe ingresar el campo nuevo")
                                                                        .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TABCOLABORACION").Select(d => new ListItem(d.Name, d.ID)))
                                                             ),
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("CodigoElemento")
                                                         .Hidden(true)
                                                         ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualDiagnostico(record,this.up('grid'),'IN');")
                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                             X.Button().Text("Agregar").ID("cmdAdd").ToolTip("Nuevo síntoma")
                                                            .Handler("addRecordMain(this.up('grid'));")
                                                            .Icon(Icon.Add),
                                                             Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccion(App.IdbtnDesactivo);")
                                                                .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccion(App.IdbtnActivo);")
                                                                .Icon(Icon.PluginGo).Hidden(true)
                                                            )
                                                   )
                                           ).PaddingSpec("16")
                        ) ,

               X.FormPanel()
                    .ID("Panel3")
                     .BodyPadding(5)
                    .AutoScroll(true)
                   .Border(false)
                    .Header(false)
                      .Items(
                        X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Cirugía y/o Procedimientos")
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(
                                               X.TextField()
                                                 .ID("RecepcionaRecurso2222")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                              X.GridPanel()
                                                 .ID("grillaCirugiaProcedimiento")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                            .ID("storeCirugiaProcedimiento")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                 .Fields(new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                           new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo5", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                           new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                          new ModelField("ValorEntero3", ModelFieldType.Int),
                                                                          new ModelField("ValorEntero2", ModelFieldType.Int),
                                                                           new ModelField("ValorEntero1", ModelFieldType.Int),
                                                                           new ModelField("CodigoElemento", ModelFieldType.String),
                                                                           new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                           new ModelField("DescripcionLocal", ModelFieldType.String),
                                                                           new ModelField("ACCION", ModelFieldType.String)

                                                                             ))
                                                    .AutoLoad(true)
                                                      .RemoteSort(false)
                                                      .IsPagingStore(true)
                                                      .RemotePaging(true)
                                                      .PageSize(5)
                                                .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                      .Url("CCEPF327_GRID_CIRUG_PROCEDIMIENTO")
                                                                      .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                         .Root("data")
                                                                                         .TotalProperty("total")
                                                                                         .IDProperty("CodigoElemento")))))
                                               ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })

                                                 .ColumnModel(
                                                 Html.X().ComponentColumn().Text("N°")
                                                         .Editor(true)
                                                         .DataIndex("CodigoElemento").Hidden(true).Renderer("changeEPS")/*.MenuDisabled(true) PARA QUITAR EL FILTRO DE LAS PESTAÑAS*/
                                                         .Text("Nrr°")
                                                         .Width(70)
                                           .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                                      })
                                                             ),

                                                              Html.X().Column().Text("N°")
                                                    .DataIndex("ValorEntero5").Hidden(false).Width(30).Renderer("changeEPS")
                                                    ,


                                                   Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Cirugía")
                                                          .Flex(1)
                                                         .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";
                                          
                                                      })
                                                             ),

                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                        .DataIndex("ValorCodigo7")
                                                         .Text("Codigo")
                                                          .Width(180)
                                                         .Component(
                                                         Html.X().TextArea().ReadOnly(true).Height(40)/*.MaxLength(250).MaxLength(250)*/
                                                         .EnableKeyEvents(true)
                                                      .Listeners(l =>
                                                      {
                                                          l.KeyPress.Handler = "ReplaceCaracterEspec(this);";
                                                          l.KeyDown.Handler = "setIndicaCambios(true);";                                                
                                                      })                                             
                                                             ),
                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("CodigoElemento")
                                                         .Hidden(true)
                                                         , 
                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                                      Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                        ,
                                                        Html.X().CommandColumn().Text("N°")
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                        Html.X().GridCommand().Disabled(indicaModoLectura)
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete)
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualCirugiaPro(record,this.up('grid'),'IN');")

                                                 )

                                                  .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                 .View(view => view.Add(Html.X().GridView().TrackOver(false)))

                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                             Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'>  " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivo2")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoActivarSeleccionCirugiaProce(App.IdbtnDesactivo2);")
                                                                .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivo2")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionCirugiaProce(App.IdbtnActivo2);")
                                                                .Icon(Icon.PluginGo).Hidden(true)
                                                            )
                                                   )
                        ,
                    X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00").DefaultAnchor("100%")
                           .Items(
                                 X.Component().Width(30),
                                 X.RadioGroupFor(m => m.CirugiaCompleja, new List<Radio.Config> {
                                        new Radio.Config{BoxLabel = "Si", InputValue = "S", ReadOnly =indicaModoLectura, Width=50},
                                        new Radio.Config{BoxLabel = "No", InputValue = "N", ReadOnly =indicaModoLectura, Width=50}
                                        })
                                          .Vertical(false)
                                          .FieldLabel("Cirugía Compleja")
                                          .AnchorVertical("100%")
                                          .ID("IdRadio1")
                                          .LabelWidth(120).Width(200).Height(50),
                                  X.Component().Width(25),
                                  X.TextFieldFor(m => m.DuracionAprox).FieldLabel("Duración Aproximada:")
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                        .LabelWidth(100)
                                        .MaxLength(20)
                                        .InputWidth(100),                               
                                  X.Component().Width(25),
                                  X.TextFieldFor(m => m.TiempoEnfermedad).ID("txTiempo").FieldLabel("Tiempo de Enfermedad:")
                                        .MaxLength(50)
                                        .Disabled(false)
                                        .LabelWidth(100)
                                        .InputWidth(200)
                                        .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })

                          ),
                   X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00").DefaultAnchor("100%").Height(50)
                          .Items(
                                X.Component().Width(30),
                                 X.Label().Text("Tipo Cirugía:"),
                                  X.Component().Width(50),
                                          X.CheckboxFor(c => c.flagHospitalaria)
                                                     .FieldLabel("Hospitalaria")
                                                     .ID("chHospitalaria")
                                                     .LabelWidth(80)
                                                     .Listeners(l => l.Change.Handler = @"var checkAll = #{chHospitalaria}.getValue();
                                                            if(checkAll){
                                                                 #{txtHospitalaria}.setDisabled(false);                                                        
                                                            }else{
                                                                #{txtHospitalaria}.setDisabled(true);
                                                                #{txtHospitalaria}.setValue(null);
                                                            }calcularDiasAproximados();"),
                                          X.TextFieldFor(c => c.diaHospitalaria)
                                                      .ID("txtHospitalaria")
                                                      .Width(50)
                                                      .Disabled(true)
                                                      .HideLabel(true)
                                                      .Listeners(l => l.Change.Handler = @"
                                                                    calcularDiasAproximados();
                                                                " ),
                                  X.Component().Width(10),
                                          X.CheckboxFor(c => c.flagUCI)
                                                     .FieldLabel("UCI")
                                                     .ID("chUCI")
                                                     .LabelWidth(25)
                                                     .Listeners(l => l.Change.Handler = @"var checkAll = #{chUCI}.getValue();
                                                            if(checkAll){
                                                                #{txtUCI}.setDisabled(false);                                                       
                                                            }else{
                                                                #{txtUCI}.setDisabled(true);
                                                                #{txtUCI}.setValue(null);
                                                            }calcularDiasAproximados(); "),
                                          X.TextFieldFor(c => c.diaUCI)
                                                      .ID("txtUCI")
                                                      .Width(50)
                                                      .Disabled(true)
                                                      .HideLabel(true)
                                                      .Listeners(l => l.Change.Handler = @"
                                                                    calcularDiasAproximados();
                                                                "
                                            ),
                                  X.Component().Width(10),
                                          X.CheckboxFor(c => c.flagUCIN)
                                                     .FieldLabel("UCIN")
                                                     .ID("chUCIN")
                                                     .LabelWidth(30)
                                                     .Listeners(l => l.Change.Handler = @"var checkAll = #{chUCIN}.getValue();
                                                            if(checkAll){
                                                                #{txtUCIN}.setDisabled(false);                                                       
                                                            }else{
                                                                #{txtUCIN}.setDisabled(true);
                                                                #{txtUCIN}.setValue(null);
                                                            }calcularDiasAproximados(); "),
                                          X.TextFieldFor(c => c.diaUCIN)
                                                      .ID("txtUCIN")
                                                      .Width(50)
                                                      .Disabled(true)
                                                      .HideLabel(true)
                                                      .Listeners(l => l.Change.Handler = @"
                                                                    calcularDiasAproximados();
                                                                "
                                             ),
                                  X.Component().Width(10),
                                          X.CheckboxFor(c => c.flagAmbulatorio)
                                                     .FieldLabel("Ambulatorio")
                                                     .ID("chAmbulatorio")
                                                     .LabelWidth(60)
                                                     .Listeners(l => l.Change.Handler = @"var checkAll = #{chAmbulatorio}.getValue();
                                                            if(checkAll){
                                                                #{txtAmbulatorio}.setDisabled(false);                                                       
                                                            }else{
                                                                #{txtAmbulatorio}.setDisabled(true);
                                                                #{txtAmbulatorio}.setValue(null);
                                                            }calcularDiasAproximados(); "),
                                          X.TextFieldFor(c => c.diaAmbulatorio)
                                                      .ID("txtAmbulatorio")
                                                      .Width(50)                                                
                                                      .Disabled(true)
                                                      .HideLabel(true)
                                                      .Listeners(l => l.Change.Handler = @"
                                                                    calcularDiasAproximados();
                                                                "
                                             ),
                                 X.Component().Width(10),
                                 X.TextFieldFor(m => m.DiasAproximados).FieldLabel("Días Aproximados:")
                                      .Disabled(true)
                                      .MaxLength(10)
                                      .LabelWidth(130)
                                      .InputWidth(50)
                                      .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })

                                 //X.RadioGroupFor(m => m.TipoDeHospitalizacion, new List<Radio.Config> {
                //               new Radio.Config{BoxLabel = "Ambulatorio", InputValue = "Ambulatorio", ReadOnly =indicaModoLectura,Width=100},
                //               new Radio.Config{BoxLabel = "Hospitalaria", InputValue = "Hospitalaria", ReadOnly =indicaModoLectura,Width=100},
                //               new Radio.Config{BoxLabel = "UCI", InputValue = "UCI", ReadOnly =indicaModoLectura,Width=70},
                //               new Radio.Config{BoxLabel = "UCIN", InputValue = "UCIN", ReadOnly =indicaModoLectura,Width=70}
                //               })
                //         .Vertical(false)
                //         .FieldLabel("Tipo Cirugía")
                //         .LabelWidth(120)          
                //         .ID("IdRadioHospi")
                //         .Height(50),   
                                 ),

                    X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00").DefaultAnchor("100%")
                           .Items(
                                  X.Component().Width(30),
                                  X.RadioGroupFor(m => m.TipoAnastesia, new List<Radio.Config> {
                                        new Radio.Config{BoxLabel = "General", InputValue = "General", ReadOnly =indicaModoLectura,Width=100},
                                        new Radio.Config{BoxLabel = "Regional", InputValue = "Regional", ReadOnly =indicaModoLectura,Width=100},
                                         new Radio.Config{BoxLabel = "Local", InputValue = "Local", ReadOnly =indicaModoLectura,Width=70},
                                         new Radio.Config{BoxLabel = "Sedación", InputValue = "Sedacion", ReadOnly =indicaModoLectura,Width=70}
                                        })
                                          .Vertical(false)
                                          .FieldLabel("Tipo de Anestesia").LabelWidth(120)
                                          .ID("IdRadioTipoAnaste")
                                          .Height(50),
                              
                                  X.Component().Width(150),
                                  X.DateFieldFor(m => m.FechaIntervencion).ID("txDate")
                                        .FieldLabel("Fecha de intervención:")
                                        .Editable(false)
                                        .Format("dd/MM/yyyy") 
                                      ),  
                   X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00").DefaultAnchor("100%")
                          .Items(
                                 X.Component().Width(30),
                                 X.Label("Equipo Humano :").Width(130).Height(50),
                                 X.TextFieldFor(m => m.NumeroAyudantes).FieldLabel("N° de Ayudantes").ReadOnly(indicaModoLectura)
                                      .LabelWidth(100)
                                      .InputWidth(50)
                                      .Disabled(false)
                                      .MaxLength(10)                                   
                                      .EnableKeyEvents(true)
                                      .Listeners(l => { l.KeyPress.Handler = "isNumberKey()"; }),                                            
                                X.Component().Width(10),
                                X.TextFieldFor(m => m.NumeroInstrumentos).FieldLabel("N° de Instrumentistas").ReadOnly(indicaModoLectura)
                                      .LabelWidth(130)
                                      .InputWidth(50)
                                      .Disabled(false)
                                      .MaxLength(10)                                    
                                      .EnableKeyEvents(true)
                                      .Listeners(l => { l.KeyPress.Handler = "isNumberKey()"; }),                   
                                X.Component().Width(10),
                                X.TextFieldFor(m => m.OrdAnastesiologo).FieldLabel("Anastesiologo").ReadOnly(indicaModoLectura)
                                      .LabelWidth(100)
                                      .InputWidth(50)
                                      .MaxLength(10)
                                      .Disabled(false)
                                      .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                               )
                      ).PaddingSpec("16")), 

                  X.FormPanel()
                      .ID("Panel4")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
             .DefaultAnchor("100%")
                    .Items(
                        X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Exámenes") // Material Especializado
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(



                          X.Container().Layout(LayoutType.HBox)
                          .MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                           .Items(
                            X.Component().Width(20),
                             X.CheckboxGroup()
                        .ID("CheckboxGroupExamenes").ColumnsNumber(5).Listeners(l =>
                        {
                            l.AfterRender.Handler = "cargarExamenes(1,'CheckboxGroupExamenes');";
                        })
                                      ),
                         
                            X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Border(false)
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })

                          .Items(
                           X.TextField()
                                            .ID("RecepcionaRecursoExamenes")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                                        X.DateField().ID("FechaSolitada").Hidden(true).Value(DateTime.Now),
                                        X.TextField().ID("Observacion").Hidden(true).Value("DATA"),
                                        X.TextField().ID("Especificaciones").Hidden(true).Value("DATA"),

                                        X.TextFieldFor(c => c.EquipoHumano)
                                          .FieldLabel("Motivo").ReadOnly(indicaModoLectura).Hidden(true)
                                          .EnableKeyEvents(true)
                                          .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })
                                          ,

                                            X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaExamenes")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          //   .Listeners(l => { l.Load.Handler = "setImpresion(this);"; })
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF327_GRID_CIRUG_EXAMENES").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 .ColumnModel(
                                                    Html.X().Column().Text("Nee°")
                                                    .DataIndex("CodigoElemento").Hidden(true)
                                                   //.Width(30).Renderer("changeEPS")
                                                   ,
                                                    Html.X().Column().Text("N°")
                                                    .DataIndex("ValorEntero5").Hidden(false).Width(30).Renderer("changeEPS")
                                                    ,


                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Hidden(true)
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn().Editor(true)
                                                    .DataIndex("ValorCodigo5").Hidden(true)
                                                        .Component(
                                                             Html.X().TextField()
                                                           ),
                                                     Html.X().ComponentColumn()
                                                         .Hidden(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)

                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura).EnableKeyEvents(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                                 .Listeners(l => { l.Focus.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })

                                                             )
                                                        ,
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                             )
                                                        ,

                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                          .Text("ACCION")
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                         ,

                                                        Html.X().CommandColumn().Width(70).Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActualCirugiaExamenes(record,this.up('grid'),'IN');")


                                                 ).View(X.GridView()
                                        .StripeRows(true)
                                        .GetRowClass(grc => grc.Fn = "getRowClassExamenes"))

                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 ).Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivoExamen")
                                                            //.Text("Bienes/servicios")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');  eventoActivarSeleccionExamenes(App.IdbtnDesactivoExamen);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivoExamen")
                                                            .Html("<b>Catálogo</b>")
                                                            //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionExamenes(App.IdbtnActivoExamen);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                    .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        )
                                                   )
                          )
                          )

                        )
                        ,


                  X.FormPanel()
                      .ID("Panel5")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
             .DefaultAnchor("100%")

                       .Items(
                        X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Uso de Equipos")
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(

                          X.Container().Layout(LayoutType.HBox)
                          .MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                           .Items(
                            X.Component().Width(20),
                             X.CheckboxGroup()
                        .ID("CheckboxGroupUsoEquipos").ColumnsNumber(5).Listeners(l =>
                        {
                            l.AfterRender.Handler = "cargarExamenes(2,'CheckboxGroupUsoEquipos');";
                        })
                                      ),
                         X.Container().Layout(LayoutType.HBox)
                          .MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                           .Items(
                            X.Component().Width(20),
                             X.CheckboxGroup()
                        .ID("CheckboxGroupUsoEqu2")
                                      ),

                           X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Border(false)
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })

                          .Items(
                           X.TextField()
                           .ID("RecepcionaRecursoExaUsoEquipos")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                                        X.DateField().ID("FechaSolitadaUsoEqui").Hidden(true).Value(DateTime.Now),
                                        X.TextField().ID("ObservacionUsoEqui").Hidden(true).Value("DATA"),
                                        X.TextField().ID("EspecificacionesUsoEqui").Hidden(true).Value("DATA"),
                             X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaExamUsoEquipos")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamUsoEquipos")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF327_GRID_CIRUG_USOEQUIPOS").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 .ColumnModel(
                                                    Html.X().Column().Text("Nee°")
                                                    .DataIndex("CodigoElemento").Hidden(true)
                                                   ,
                                                    Html.X().Column().Text("N°")
                                                    .DataIndex("ValorEntero5").Hidden(true).Width(30).Renderer("changeEPS")
                                                    ,
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Hidden(true)
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn().Editor(true)
                                                    .DataIndex("ValorCodigo5").Hidden(true)
                                                        .Component(
                                                             Html.X().TextField()
                                                           ),
                                                     Html.X().ComponentColumn()
                                                         .Hidden(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura).EnableKeyEvents(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                                 .Listeners(l => { l.Focus.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                             )
                                                        ,

                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                          .Text("ACCION")
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                         ,

                                                        Html.X().CommandColumn().Width(70).Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                      //   .Listeners(ls => ls.Command.Handler = "deleteActual(record);")

                                                      .Listeners(ls => ls.Command.Handler = "deleteActualCirugiaUsoDeEquipos(record,this.up('grid'),'IN');")
                                                 ).View(X.GridView()
                                        .StripeRows(true)
                                        .GetRowClass(grc => grc.Fn = "getRowClass")
                                    )

                                                  .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivoExaUsoEqui")
                                                            //.Text("Bienes/servicios")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X');  eventoActivarSeleccionUsodeEquipos(App.IdbtnDesactivoExaUsoEqui);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivoExaUsoEqui")
                                                            .Html("<b>Catálogo</b>")
                                                            //.Text("Bienes/servicios")
                                                            .Handler("parent.App.txtEventoBienes.setValue('FILTRO_X'); eventoDesactivarSeleccionUsodeEquipos(App.IdbtnActivoExaUsoEqui);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                   .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        )
                                                   )
                            )
                           ,
                               X.Component().Height(4),
                            X.Container().Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                            .Items(
                                  X.Component().Width(80),
                            X.RadioGroupFor(c => c.OrdIntNinguna, new List<Radio.Config> {
                                    new Radio.Config{BoxLabel = "Si" , Checked= (Model.OrdIntNinguna=="S"?true:false), InputValue = "S", ReadOnly =indicaModoLectura, Width = 100,Handler="eventoRadio(this,'TipoAnamnesis','S');"}, //
                                    new Radio.Config{BoxLabel = "No" , Checked= (Model.OrdIntNinguna=="N"?true:false), InputValue = "N", ReadOnly =indicaModoLectura, Width = 100, Handler="eventoRadio(this,'TipoAnamnesis','N');"}//
                                }).FieldLabel("").LabelWidth(130).ID("IdRadioOrdIntNinguna"),
                            X.Component().Width(100).Height(20),
                            X.TextFieldFor(m => m.OrdIntOtro).FieldLabel("Otros").ReadOnly(indicaModoLectura)
                            .MaxLength(100)
                        .Hidden(Informate)
                            .Width(480).LabelWidth(90)
                            ,
                               X.Component().Height(40)
                            )
                              )
                        )
                        ,
                X.FormPanel()
                      .ID("Panel6")
                      .BodyPadding(5)
                      .AutoScroll(true)
                      .Border(false)
                      .Header(false)
             .DefaultAnchor("100%")
                      .Items(

                       X.FieldSet()
                          .ColumnWidth(0.4).Collapsible(true)
                          .Title("Material Especializado") // Exámenes
                          .Border(true)
                          .AutoScroll(true)
                          .MarginSpec("05 05 0 05")

                          .Defaults(d =>
                          {
                              d.Add(new Parameter("LabelWidth", "150"));
                              d.Add(new Parameter("DefaultAnchor", "100%"));
                              d.Add(new Parameter("LabelAlign", "Left"));
                          })
                          .DefaultAnchor("100%")
                          .FieldDefaults(d =>
                          {
                              d.LabelAlign = LabelAlign.Left;
                          })

                          .Items(


                 X.Container().Layout(LayoutType.HBox)
                          .MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                           .Items(
                            X.Component().Width(20),
                             X.CheckboxGroup()
                        .ID("CheckboxGroupMaterialEspe").ColumnsNumber(5).Listeners(l =>
                        {
                            l.AfterRender.Handler = "cargarExamenes(3,'CheckboxGroupMaterialEspe');";
                        })
                        ),
                          X.Container().Layout(LayoutType.HBox)
                          .MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "130")); })
                           .Items(
                            X.Component().Width(20),
                             X.CheckboxGroup()
                        .ID("CheckboxGroupMaterialEspe2")

                        ),
                            X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .MarginSpec("0 05 0 05")
                                 .PaddingSpec("10")
                                 .Border(false)
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })
                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })

                          .Items(
                           X.TextField()
                           .ID("RecepcionaRecursoMaterialEspe")
                                            .Listeners(l =>
                                            {
                                                l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                            })
                                            .Hidden(true),
                                        X.DateField().ID("FechaSolitadaMaterialEspe").Hidden(true).Value(DateTime.Now),
                                        X.TextField().ID("ObservacionUsoEquiMaterialEspe").Hidden(true).Value("DATA"),
                                        X.TextField().ID("EspecificacionesUsoEquiMaterialEspe").Hidden(true).Value("DATA"),
                             X.GridPanel().PaddingSpec("6")
                                                 .ID("grillaMaterialEspe")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeMaterialEspe")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                                                                .Fields(
                                                                    new ModelField("ACCION", ModelFieldType.String),
                                                                    new ModelField("ValorFecha", ModelFieldType.Date),
                                                                    new ModelField("ValorCodigo1", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo2", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo3", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo4", ModelFieldType.String),
                                                                    new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                    new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                    new ModelField("CodigoElemento", ModelFieldType.String),
                                                                    new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                    new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                    new ModelField("ValorCodigo7", ModelFieldType.String),
                                                                    new ModelField("DescripcionExtranjera", ModelFieldType.String)
                                                                  ))
                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy().Url("CCEPF327_GRID_CIRUG_MATESPECI").Reader(reader => reader.Add
                                                              (Html.X().JsonReader()
                                                                .Root("data")
                                                                .TotalProperty("total")
                                                                .IDProperty("CodigoElemento")))))
                                                          .Parameters(ps =>
                                                           ps.Add(new { tipoCodigo = "S" })
                                                            )
                                                 ).Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                 .ColumnModel(
                                                    Html.X().Column().Text("NE°")
                                                    .DataIndex("CodigoElemento").Hidden(true)
                                                   ,

                                                    Html.X().Column().Text("N°")
                                                    .DataIndex("ValorEntero5").Hidden(true).Width(30).Renderer("changeEPS")
                                                    ,
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha de Solicitud")
                                                         .Hidden(true)
                                                         .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                                                 .MaskRe("[0-9/]")
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                        .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                        .Listeners(l => { l.Select.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                    Html.X().ComponentColumn().Editor(true)
                                                    .DataIndex("ValorCodigo5").Hidden(true)
                                                        .Component(
                                                             Html.X().TextField()
                                                           ),
                                                     Html.X().ComponentColumn()
                                                         .Hidden(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)

                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                              .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40).ReadOnly(true)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(65)
                                                         .Component(
                                                             Html.X().NumberField().ReadOnly(indicaModoLectura).EnableKeyEvents(true)
                                                                 .MinValue(1).MaskRe("/-+/").AllowExponential(false)
                                                                 .Listeners(l => { l.Focus.Handler = "setIndicaCambios(true);"; })
                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo2")
                                                         .Text("Especificaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)/*.MaxLength(200)*/
                                                             .EnableKeyEvents(true)  //Hace que funcione el evento KeyPress y otros mas
                                                            .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this);"; })
                                                             )
                                                        ,
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Hidden(true)
                                                         .Flex(1)
                                                         .Component(
                                                              Html.X().TextArea().ReadOnly(indicaModoLectura).Height(40)
                                                              .Listeners(l => { l.KeyPress.Handler = "setIndicaCambios(true);"; })
                                                             )
                                                        ,

                                                         Html.X().ComponentColumn()
                                                         .Editor(true)
                                                          .Text("ACCION")
                                                         .DataIndex("ACCION")
                                                         .Hidden(true)
                                                         ,

                                                        Html.X().CommandColumn().Width(70).Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete").Icon(Icon.Delete)
                                                         )
                                                    .Listeners(ls => ls.Command.Handler = "deleteActualCirugiaMatEspecializado(record,this.up('grid'),'IN');")
                                                 ).View(X.GridView()
                                        .StripeRows(true)
                                        .GetRowClass(grc => grc.Fn = "getRowClassMaterial"))
                                                  .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura)
                                                        .Items(
                                                         Html.X().Label()
                                                            .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")
                                                            , X.ToolbarFill(), X.ToolbarSeparator()
                                                            , Html.X().Button().ID("IdbtnDesactivoMaterialEspe")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('MEDMATERIAL');  eventoActivarSeleccionMaterialEspecializado(App.IdbtnDesactivoMaterialEspe);")
                                                            .Icon(Icon.PluginDisabled),
                                                            Html.X().Button().ID("IdbtnActivoMaterialEspe")
                                                            .Html("<b>Catálogo</b>")
                                                            .Handler("parent.App.txtEventoBienes.setValue('MEDMATERIAL'); eventoDesactivarSeleccionMaterialEspecializado(App.IdbtnActivoMaterialEspe);")
                                                            .Icon(Icon.PluginGo).Hidden(true)
                                                        )
                                                   )
                                                   .BottomBar(
                                                        Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                        .Items(
                                                            Html.X().Label()
                                                            .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                            "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                            "</span>")
                                                            , X.ToolbarSpacer(5)
                                                            , Html.X().Label()
                                                            .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                            "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                            "</span>")
                                                        )
                                                   )
                           )

                        )

                        )
                      ,

                                    X.TextAreaFor(c => c.Comentario).FieldLabel("Especificación de Material Requerido").ReadOnly(indicaModoLectura)
                                    .PaddingSpec("8").Height(100)
                                    .EnableKeyEvents(true)
                                    .Listeners(l => { l.KeyPress.Handler = "ReplaceCaracterEspec(this)"; })

                       ,
                        X.TextFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                        X.TextFieldFor(m => m.Estado).Hidden(true),

                       X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                     //////////////////////
                     )
                     .CloseAction(CloseAction.Destroy)
                    .TopBar(
                        X.Toolbar().ID("bar")

                        .Items(
                            X.ToolbarSpacer(20),
                            X.TextField().Width(15)
                             .FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                            X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),
                            X.ToolbarSpacer(20),
                            Html.X().Container().Layout(LayoutType.HBox)
                            .ID("conthbIndicaError").Hidden(true).Items(
                                X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                            ),

                            X.TextFieldFor(m => m.IdPaciente).Hidden(true).ReadOnly(true),
                            X.ToolbarFill(),
                            X.Button()
                             .Text("Imprimir")
                             .Icon(Icon.Report)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresion")
                             .Handler("eventoVisorReporte('');"),

                            X.Button()
                             .Text("Imprimir Todos")
                             .Icon(Icon.ReportGo)
                             .Hidden(!visibleImpresion)
                             .ID("btnImpresionHC")
                             .Handler("eventoVisorReporte('HC');"),

                            X.ToolbarSpacer().Width(40),

                            X.Button()
                             .Text("Guardar")
                             .Icon(Icon.Disk)
                             .ID("cmdGuardar").Hidden(indicaModoLectura)
                             .Handler("EnviarData(this.up('grid'));")

                              ,



                            X.Button()
                             .Text("Cancelar")
                             .ID("btnCancel").Hidden(indicaModoLectura)
                             .Icon(Icon.Cancel)
                           .Handler("eventoCancelar(this.up('form'));"),

                            X.Button()
                             .Text("Editar")
                             .ID("btnOnEdit")
                             .Icon(Icon.ApplicationFormEdit)
                             .Hidden(true)
                             .Handler("ProbarCabezera();")
                        )

                       )
                    .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"

                    )
             ); // fin regions.Add
        }  // fin  Items(regions
                                    )
    //
    )

}   @*fin @section cuerpo*@

