@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Escala_Glasgow_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var DisableRadio = (Model.TipoPaciente == "1" || Model.TipoPaciente == "2" ? false : true);

}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>
    <script>
        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);

            var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }

    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });

        var val = '@visibleImpresion';
        var vis = '@isVista';

        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setVisible(false);
                    App.btnImpresionHC.setVisible(false);
                } else {
                    App.btnImpresion.setVisible(true);
                    App.btnImpresionHC.setVisible(true);

                }
            }
        }

    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };


    var valor = 0;
    var cont = 0;

    var value1 = 0;
    var value2 = 0;
    var value3 = 0;
    var value4 = 0;
    var value5 = 0;
    var total = 0;

    var valoracion = 0;
    var valpreg1 = 0;
    var valpreg2 = 0;
    var valpreg3 = 0;
    var valpreg4 = 0;
    var valpreg5 = 0;




    var eventoRadioTipoPaciente = function (rd1, Tipo) {
        var obj = rd1.getValue();
        if (obj) {
            var Valor_P = App.IDFlagParametro1.getValue();

            if (Tipo == '1') {
                App.IDFlagParametro1.setValue('1');

                App.GrupoRadio1.setDisabled(false);
                App.GrupoRadio2.setDisabled(false);
                App.GrupoRadio3.setDisabled(false);

            }
            else if (Tipo = '2') {
                App.IDFlagParametro1.setValue('2');

                App.GrupoRadio1.setDisabled(false);
                App.GrupoRadio2.setDisabled(false);
                App.GrupoRadio3.setDisabled(false);
            }
            eventoRadio2();
        }

    }

    function eventoRadio2() {

        var id = App.IdClasificacion.getValue();
        var total = parseInt(App.IdTotal.getValue());

        var ValorSelection = App.IDFlagParametro1.getValue();
        var total = 0;

        if (App.IdTotal.getValue() == '') {total = 0} else {total = parseInt(App.IdTotal.getValue());}

        if (App.txtAO.getValue() == '') {puntaj1 = 0} else {puntaj1 = parseInt(App.txtAO.getValue());}

        if (App.txtRM.getValue() == '') {puntaj2 = 0} else {puntaj2 = parseInt(App.txtRM.getValue());}

        if (App.txtRV.getValue() == '') {puntaj3 = 0} else {puntaj3 = parseInt(App.txtRV.getValue());}

        if (ValorSelection == 1) {

             if (total <= 8 ) {
                App.IdClasificacion.setValue('Tec Grave');
            } else if (total <= 12) {
                App.IdClasificacion.setValue('Tec Moderado')
            } else if (total <= 15) {
                App.IdClasificacion.setValue('Tec Leve')
            } else {
                App.IdClasificacion.setValue('');
            }
        }

        if (ValorSelection == 2) {
            if (total <= 4 && total >= 3) {
                App.IdClasificacion.setValue('Coma Profundo');
            } else if (total <= 6) {
                App.IdClasificacion.setValue('Coma moderado');
            } else if (total <= 8) {
                App.IdClasificacion.setValue('Estupor Superficial');
            } else if (total <= 10) {
                App.IdClasificacion.setValue('Estupor Profundo');
            } else if (total <= 12) {
                App.IdClasificacion.setValue('Estupor Moderado');
            } else if (total <= 14) {
                App.IdClasificacion.setValue('Estupor Ligero');
            } else if (total = 15) {
                App.IdClasificacion.setValue('Consciente');
            }
            else {
                App.IdClasificacion.setValue('');
            }

        }

        if (total == 0) {

            App.IdTotal.setValue('');
            App.IdClasificacion.setValue('');
        } else {
            App.IdTotal.setValue(puntaj1 + puntaj2 + puntaj3);
        }
    }

    var eventoRadio = function (radio, Tipo, puntaje) {
        var obj = radio.getValue();
        var valor = 0;
        var puntaj1 = App.txtAO.getValue();
        var puntaj2 = App.txtRM.getValue();
        var puntaj3 = App.txtRV.getValue();
        var total = App.IdTotal.getValue();
        var ValorSelection = App.IDFlagParametro1.getValue();
        if (total == '') { total = 0 } else { total = parseInt(App.IdTotal.getValue()); }
        if (puntaj1 == '') { puntaj1 = 0 } else { puntaj1 = parseInt(App.txtAO.getValue()); }
        if (puntaj2 == '') { puntaj2 = 0 } else { puntaj2 = parseInt(App.txtRM.getValue()); }
        if (puntaj3 == '') { puntaj3 = 0 } else { puntaj3 = parseInt(App.txtRV.getValue()); }

        if (obj) {

            if (Tipo == 'AO') {
                App.txtAO.setValue(puntaje);
                var suma = puntaje + puntaj2 + puntaj3;
            } else if (Tipo == 'RM') {
                App.txtRM.setValue(puntaje);
                var suma = puntaj1 + puntaje + puntaj3;
            } else if (Tipo == 'RV') {
                App.txtRV.setValue(puntaje);
                var suma = puntaj1 + puntaj2 + puntaje;
            }

            App.IdTotal.setValue(suma);

            if (ValorSelection == 1) {

                if (suma <= 8 && suma >= 1) {
                    App.IdClasificacion.setValue('Tec Grave');
                } else if (suma <= 12) {
                    App.IdClasificacion.setValue('Tec Moderado');
                } else if (suma <= 15) {
                    App.IdClasificacion.setValue('Tec Leve');
                }
            }

            if (ValorSelection == 2) {

                if (suma <= 4 && suma >= 3) {
                    App.IdClasificacion.setValue('Coma Profundo');
                } else if (suma <= 6) {
                    App.IdClasificacion.setValue('Coma moderado');
                } else if (suma <= 8) {
                    App.IdClasificacion.setValue('Estupor Superficial');
                } else if (suma <= 10) {
                    App.IdClasificacion.setValue('Estupor Profundo');
                } else if (suma <= 12) {
                    App.IdClasificacion.setValue('Estupor Moderado');
                } else if (suma <= 14) {
                    App.IdClasificacion.setValue('Estupor Ligero');
                } else if (suma = 15) {
                    App.IdClasificacion.setValue('Consciente');
                }
            }

        } else {

        }
    };



    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }
    </script>
}


@section cuerpo
{

    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                 .Height(500)
                .Header(false)
               .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";

                })
               .Items(

                      X.TextFieldFor(m => m.TipoPaciente).ReadOnly(true).ID("IDFlagParametro1").Hidden(true),

                       X.FieldSet()
                        .ID("fsDolorEvaAdultos")
                        .ColumnWidth(0.4).Title("")
                        .Layout(LayoutType.Fit)
                        .MarginSpec("05 05 0 05")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "180"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                            d.Add(new Parameter("LabelAlign", "Left"));
                        })
                        .FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                        .Items(
                          X.TextFieldFor(d => d.IdEscala).FieldLabel("").ReadOnly(true).LabelWidth(60).Width(140).Hidden(true),

                            X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                            .Items(
                                X.Component().Width(50),
                                X.DateFieldFor(m => m.Fecha).Format("dd/MM/yyyy")
                                                            .Width(200)
                                                            .FieldLabel("Fecha").Editable(false)
                                                            .LabelWidth(100)
                                                            .AllowBlank(false).BlankText("Debe ingresar datos en este campo.")
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Fecha),
                                X.Component().Width(50),
                                X.TimeFieldFor(m => m.Hora).Format("H:mm")
                                                           .Width(180)
                                                           .LabelWidth(50)
                                                            .ID("IdHora")
                                                           .FieldLabel("Hora").Editable(false)
                                                           .Increment(60)
                                                           .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.Hora)
                                                           .AllowBlank(false).BlankText("Debe ingresar datos en este campo."),
                                X.Component().Width(50),
                                    X.RadioFor(m => m.TipoPaciente).BoxLabel("Politraumatizado").ID("Id_P").InputValue("1").FieldLabel("Tipo de paciente").Checked(Model.TipoPaciente == "1" ? true : false)// Checked = (Model.AO == 4 ? true : false)
                                    .Listeners(m => { m.Change.Handler = "eventoRadioTipoPaciente(this,'1');"; })
                                    ,
                                    X.Component().Width(30),
                                    X.RadioFor(m => m.TipoPaciente).BoxLabel("Otro").ID("Id_O").InputValue("2").FieldLabel("").Checked(Model.TipoPaciente == "2" ? true : false)
                                    .Listeners(m => { m.Change.Handler = "eventoRadioTipoPaciente(this,'2');"; })
                                    ),


                     //agregado - FIELSET GENERAL
                           X.FieldSet().ID("fsEvolucion").Border(false)
                          .ColumnWidth(0.4).Title("")
                          .Layout(LayoutType.Fit)
                          .MarginSpec("05 05 0 05")
                          .FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                          .Items(
                                     Html.X().Container().Layout(LayoutType.HBox)
                                     .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                     .Items(
                //-----
                //FIELSET 1
                                      X.FieldSet().ID("fsAperturaOcular")
                                      .Height(155)
                                      .Title("APERTURA OCULAR(AO)")
                                      .FieldDefaults(d => { d.LabelWidth = 40; d.InputWidth = 120; })
                                      .Items(
                                      X.RadioGroupFor(c => c.AO, new List<Radio.Config> {
                                    new Radio.Config{BoxLabel = "Espontaneo 	4" , Checked= (Model.AO==4?true:false), InputValue ="4", ReadOnly =indicaModoLectura , Handler="eventoRadio(this,'AO',4);"}, //
                                    new Radio.Config{BoxLabel = "Al hablarle  3" , Checked= (Model.AO==3?true:false), InputValue ="3", ReadOnly =indicaModoLectura , Handler="eventoRadio(this,'AO',3);"}, //
                                    new Radio.Config{BoxLabel = "Al dolor  2" , Checked= (Model.AO==2?true:false), InputValue ="2", ReadOnly =indicaModoLectura , Handler="eventoRadio(this,'AO',2);"}, //
                                    new Radio.Config{BoxLabel = "Ninguno  1" , Checked= (Model.AO==1?true:false), InputValue ="1", ReadOnly =indicaModoLectura , Handler="eventoRadio(this,'AO',1);"}, //
                                })
                                  .Vertical(true)
                                  .FieldLabel("").ColumnsNumber(1)
                                  ).Disabled(DisableRadio)
                                  .Width(300).ID("GrupoRadio1"),
                //FIELSET 2
                                  X.FieldSet().ID("fsRespuestaMotora").Height(155)
                                   .Title("RESPUESTA MOTORA(RM)").FieldDefaults(d => { d.LabelWidth = 90; d.InputWidth = 120; })
                                   .Items(
                                  X.RadioGroupFor(c => c.RM, new List<Radio.Config> {
                                    new Radio.Config{BoxLabel = "Mov. Espontanea  6" , Checked= (Model.RM==6?true:false), InputValue = "6", ReadOnly =indicaModoLectura , Handler="eventoRadio(this,'RM',6);"}, //
                                    new Radio.Config{BoxLabel = "Retira al tacto  5" , Checked= (Model.RM==5?true:false), InputValue = "5", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RM',5);"}, //
                                    new Radio.Config{BoxLabel = "Retira al dolor  4" , Checked= (Model.RM==4?true:false), InputValue = "4", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RM',4);" }, //
                                    new Radio.Config{BoxLabel = "Flexión anormal  3" , Checked= (Model.RM==3?true:false), InputValue = "3", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RM',3);"}, //
                                    new Radio.Config{BoxLabel = "Extensión anormal  2" , Checked= (Model.RM==2?true:false), InputValue = "2", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RM',2);"}, //
                                    new Radio.Config{BoxLabel = "Ninguno  1" , Checked= (Model.RM==1?true:false), InputValue = "1", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RM',1);"} //
                                })
                                  .Vertical(true)
                                  .FieldLabel("").ColumnsNumber(1)
                                  ).Disabled(DisableRadio)
                                  .Width(300).ID("GrupoRadio2"),
                //FIELSET 3
                                  X.FieldSet().ID("fsRespuestaVerbal").Height(155)
                                   .Title("RESPUESTA VERBAL(RV)").FieldDefaults(d => { d.LabelWidth = 90; d.InputWidth = 120; })
                                   .Items(
                                  X.RadioGroupFor(c => c.RV, new List<Radio.Config> {
                                    new Radio.Config{BoxLabel = "Balbuceo  5" , Checked= (Model.RV==5?true:false), InputValue = "5", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RV',5);"}, //
                                    new Radio.Config{BoxLabel = "Irritable  4" , Checked= (Model.RV==4?true:false), InputValue = "4", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RV',4);"}, //
                                    new Radio.Config{BoxLabel = "Llanto al dolor  3" , Checked= (Model.RV==3?true:false), InputValue = "3", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RV',3);" }, //
                                    new Radio.Config{BoxLabel = "Mueca al dolor  2" , Checked= (Model.RV==2?true:false), InputValue = "2", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RV',2);"}, //
                                    new Radio.Config{BoxLabel = "Ninguno  1" , Checked= (Model.RV==1?true:false), InputValue = "1", ReadOnly =indicaModoLectura, Handler="eventoRadio(this,'RV',1);"} //
                                })
                                  .Vertical(true)
                                  .FieldLabel("").ColumnsNumber(1)
                                  ).Disabled(DisableRadio)
                                  .Width(300).ID("GrupoRadio3")
                                   ).Height(180),
                //
                                   Html.X().Container().Layout(LayoutType.VBox)
                                     .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                     .Items(
                                          X.Container().Layout(LayoutType.HBox)
                                          .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                          .Items(
                                          X.Label().Text("AO").Width(100),
                                                  X.Label().Text("RM").Width(100),
                                                  X.Label().Text("RV").Width(100),
                                                  X.Label().Text("TOTAL").Width(100)
                                          ),
                                          X.Container().Layout(LayoutType.HBox)
                                          .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                          .Items(
                                                  X.TextFieldFor(m => m.AO).Width(80).ReadOnly(true).ID("txtAO").FieldLabel(""),
                                                  X.Label().Html("<font  size='4em'; color='black'> + </font>"),
                                                  X.TextFieldFor(m => m.RM).Width(80).ReadOnly(true).ID("txtRM").FieldLabel(""),
                                                  X.Label().Html("<font  size='4em'; color='black'> + </font>"),
                                                  X.TextFieldFor(m => m.RV).Width(80).ReadOnly(true).ID("txtRV").FieldLabel(""),
                                                  X.Label().Html("<font  size='4em'; color='black'> = </font>"),
                                                  X.TextFieldFor(m => m.Total).Width(80).ReadOnly(true).ID("IdTotal").FieldLabel("")
                                          ),
                                          X.Component().Height(10),
                                          X.Container().Layout(LayoutType.HBox)
                                          .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                          .Items(
                                                   X.TextFieldFor(m => m.Clasificacion).ID("IdClasificacion").Width(360).LabelWidth(80).FieldLabel("Clasificación").ReadOnly(true)
                                          ),

                                          X.Container().Layout(LayoutType.HBox)
                                          .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                          .Items(
                                          X.Component().Width(400),
                                               Html.X().Image()
                                                                 .ID("IMGDDD11")
                                                                 .ImageUrl("~/resources/images/LeyendaPolitraumatizado_F442.JPG")
                                                                 .MarginSpec("0 0 0 0")
                                                                 .ApplyStyles("position: relative")
                                                                 .Width(270)
                                                                 .Height(150),

                                                            Html.X().Image()
                                                                .ID("IMGOSSSO12")
                                                                .ImageUrl("~/resources/images/LeyendaOtro_F442.JPG")
                                                                .MarginSpec("0 0 0 0")
                                                                .ApplyStyles("position: relative")
                                                                .Width(270)
                                                                .Height(150)
                                          )

                                     )
                //
                                 )  //CIERRE FIELSET GENERAL








                        )
                ////////ADD PARA MSGS/////
                        ,
                        X.HiddenFor(m => m.Accion),
                        X.DateFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                        X.TextFieldFor(m => m.Estado).Hidden(true),
                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                //////////////////////
                     )

                    .TopBar(X.Toolbar().Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                               X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("CCEPF442_Save");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Before = "" +
                                            "beforeSave(App.formactual); return App.formactual.getForm().isValid();";
                                    de.Click.ExtraParams.Add(new { HoraIngreso = JRawValue.From("App.IdHora.getValue()") });
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"
                        )
                );
        }
        )


    )

}

