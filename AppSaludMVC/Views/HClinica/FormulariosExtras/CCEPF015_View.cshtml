@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_ValoracionFuncionalAM_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    //var visibleImpresion = (Model.Accion == "UPDATE" ? true : false);
    
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";
    var COLOR_GREENPbackg = "#CADCEE";
}
@section cabecera
{
<link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
<style>
    html body {
        padding: 0px;
        background: none;
        background: none;
        background: none;
        background-attachment: fixed;
        background-position: center;
        font-family: tahoma,verdana,sans-serif;
        background-color: #ffffff;
    }
</style>

    <script>

        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });

            var val = '@visibleImpresion';
            var vis = '@isVista';

            if (vis == 'False') {
                if (val == 'True') {

                    if (value == true) {
                        App.btnImpresion.setDisabled(true);
                        App.btnImpresionHC.setDisabled(true);
                        parent.App.btnGuardarFirma.setDisabled(true);
                    } else {
                        App.btnImpresion.setDisabled(false);
                        App.btnImpresionHC.setDisabled(false);
                        parent.App.btnGuardarFirma.setDisabled(false);
                    }
                }
            }

        };

        function eventoRenderForm() {

            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

            if (southH == 0) {
                southH = 30;
            } else if (parent.App.PanelMainSouth.collapsed) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(545);

            var v = '@isNuevo';
            if (v == 'True') {
                App.btnImpresion.setVisible(false);
                App.btnImpresionHC.setVisible(false);
            }
        }

   
    var count = 0; // a counter for new records

    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

    var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };
    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        //form.getForm().reset();
        //App.taAlerts.setVisible(false);
        //App.conthbIndicaError.setVisible(false);
        //setIndicaCambios(false);

        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    };

    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }

        var valoracion = 0;
        var valpreg1 = 0;
        var valpreg2 = 0;
        var valpreg3 = 0;
        var valpreg4 = 0;
        var valpreg5 = 0;
        var valpreg6 = 0;

        var eventoRadio = function (rd1, pregunta, valor) {

            var rdAll1 = rd1.getValue();



            if (rdAll1) {
                if (pregunta == 'P1') {
                    valpreg1 = valor;

                } if (pregunta == 'P2') {
                    valpreg2 = valor;

                } if (pregunta == 'P3') {
                    valpreg3 = valor;

                } if (pregunta == 'P4') {
                    valpreg4 = valor;
                    
                } if (pregunta == 'P5') {
                    valpreg5 = valor;

                } if (pregunta == 'P6') {
                    valpreg6 = valor;
                }

                valoracion = valpreg1 + valpreg2 + valpreg3 + valpreg4 + valpreg5 +  valpreg6;

              

                if (valoracion == 0) {
                    App.IdSeleccionMain.setValue("Independiente");

                } if (valoracion >= 1 && valoracion <= 5) {
                    App.IdSeleccionMain.setValue("Dependiente Parcial");

                } if (valoracion == 6) {
                    App.IdSeleccionMain.setValue("Dependiente Total");
                }



            } else {
            }
        };

    </script>
}


@section cuerpo
{

    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                    .ItemID("center")
                    .DefaultAnchor("100%")
                    .AutoScroll(true)
                    .Height(340)
                    .Header(false)
                    .Border(true)
                    .ID("formactual")
                    .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";

                })
               .Items(
                      X.FieldSet().ColumnWidth(0.4).Title("ACTIVIDADES BÁSICAS DE LA VIDA DIARIA (ABVD)")
                        .Layout(LayoutType.Fit)
                        .MarginSpec("05 05 0 05")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "120"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                            d.Add(new Parameter("LabelAlign", "Left"));
                        })
                        .FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                        .Items(
                        
                        Html.X().Container().Layout(LayoutType.HBox)
                                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                        X.FieldSet().Title("KATZ").FieldDefaults(d => { d.LabelWidth = 150; d.InputWidth = 120; })
                        .Items(                                
                        
                        X.RadioGroupFor(c => c.Lavarse, new List<Radio.Config> {
                            new Radio.Config{BoxLabel ="Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P1', 1);"},
                            new Radio.Config{BoxLabel ="Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P1', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("1. Lavarse")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "180"));
                            d.Add(new Parameter("DefaultAnchor", "50%"));
                        })
                        .AnchorVertical("150%"),

                       X.RadioGroupFor(c => c.Vestirse, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P2', 1);"},
                            new Radio.Config{BoxLabel = "Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P2', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("2. Vestirse")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "80"));
                            d.Add(new Parameter("DefaultAnchor", "50%"));
                        })
                        .AnchorVertical("150%"),                     

                        X.RadioGroupFor(c => c.UsoServHigienico, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P3', 1);"},
                            new Radio.Config{BoxLabel = "Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P3', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("3. Uso del Serv. Higiénico")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "100"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                        })
                        .AnchorVertical("100%"),

                       X.RadioGroupFor(c => c.Movilizarse, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P4', 1);"},
                            new Radio.Config{BoxLabel = "Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P4', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("4. Movilizarse")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "100"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                        })
                        .AnchorVertical("100%"),                          

                       X.RadioGroupFor(c => c.Continencia, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P5', 1);"},
                            new Radio.Config{BoxLabel = "Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P5', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("5. Continencia")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "100"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                        })
                        .AnchorVertical("100%"),
                        
                       X.RadioGroupFor(c => c.Alimentarse, new List<Radio.Config> {
                            new Radio.Config{BoxLabel = "Dependiente", InputValue = "D", ReadOnly =indicaModoLectura, Width=100, Handler="eventoRadio(this, 'P6', 1);"},
                            new Radio.Config{BoxLabel = "Independiente", InputValue = "I", ReadOnly =indicaModoLectura, Width=150, Handler="eventoRadio(this, 'P6', 0);"}
                        })
                        .Vertical(true)
                        .FieldLabel("6. Alimentarse")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "100"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                        })
                        .AnchorVertical("100%"),
                        
                        X.RadioGroupFor(c => c.DiagnosticoFuncional, new List<Radio.Config> {
                        new Radio.Config{InputValue = "I", Checked= (Model.DiagnosticoFuncional=="I"?true:false), ReadOnly = indicaModoLectura, BoxLabel = "Independiente" , LabelWidth=60, MarginSpec = "0 0 5 0"},
                        new Radio.Config{InputValue = "DP", Checked= (Model.DiagnosticoFuncional=="DP"?false:true), ReadOnly = indicaModoLectura, BoxLabel = "Dependiente Parcial",  LabelWidth=60, MarginSpec = "0 0 5 0"},
                        new Radio.Config{InputValue = "DT", Checked= (Model.DiagnosticoFuncional=="DT"?true:false), ReadOnly = indicaModoLectura, BoxLabel = "Dependiente Total", LabelWidth=60}
                        })
                        .Vertical(true).ColumnsNumber(1)
                        .FieldLabel("").AutomaticGrouping(false).Hidden(true)
                        .ID("IdValoracion"),
                        
                        Html.X().Container().Layout(LayoutType.HBox)
                                     .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                     .Items(

                                     X.Label().Html("El resultado es:"),
                                     X.TextField().ID("IdSeleccionMain").ReadOnly(true).Hidden(false)
                                    .Value(Model.DiagnosticoFuncional == "I " ? "Independiente" : Model.DiagnosticoFuncional == "DP" ? "Dependiente Parcial" : Model.DiagnosticoFuncional == "DT" ? "Dependiente Total" : " ")
                                    .FieldStyle("background: " + COLOR_GREENPbackg + "; border-color: " + COLOER_IND_OBLIGA) 
                                     
                                     )//,
                        
                        
                                                                    
                        
                        ),
                         Html.X().Container().Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                            .Items(
                                X.FieldSet().Title("LEYENDA").FieldDefaults(d => { d.LabelWidth = 150; d.InputWidth = 250; })
                                .Items( 
                                Html.X().Image()
                                     .ID("IMG")
                                    .ImageUrl("~/resources/images/LeyendaValoracion.JPG")
                                        .MarginSpec("0 05 0 05")
                                        .ApplyStyles("position: relative")
                                    .Width(250)
                                    .Height(250)                          
                          ))                                             
                        
                        ))                       
                                
                        //
                        //ADD PARA MSGS
                        ,

                                                
                        X.TextFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),

                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                        
                     )

                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                               X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir Todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("CCEPF015_Save_ValoracionFuncionalAM");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Before = "" +
                                            "beforeSave(App.formactual); return App.formactual.getForm().isValid();";

                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"
                        )
                );
        }
        )


    )

}

