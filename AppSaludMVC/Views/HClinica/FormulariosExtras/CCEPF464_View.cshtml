@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_EscalaAltaCirugiaAmbulatoria_FE
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var visibleImpresion = (indicaVisiblePrint == 2/* && Model.Accion == "UPDATE"*/ ? true : false);
    var isVista = (Model.Accion == "VISTA" ? true : false);
    var isNuevo = (Model.Accion == "NUEVO" ? true : false);
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    var COLOER_IND_OBLIGA = AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("COL_BCOBLI");
    var MENS_NUMERO = "No se permite un valor negativo.";
    var PAR_FORMATO02 = "999";


}
@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>
    function eventoRenderForm() {

        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

        if (southH == 0) {
            southH = 30;
        } else if (parent.App.PanelMainSouth.collapsed) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(545);
        var v = '@isNuevo';
        if (v == 'True') {
            App.btnImpresion.setVisible(false);
            App.btnImpresionHC.setVisible(false);
        }
    }

    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });


        var val = '@visibleImpresion';
        var vis = '@isVista';
        if (vis == 'False') {
            if (val == 'True') {

                if (value == true) {
                    App.btnImpresion.setDisabled(true);
                    App.btnImpresionHC.setDisabled(true);
                    parent.App.btnGuardarFirma.setDisabled(true);
                    // parent.App.btnContEpisodio_HCE.setDisabled(true);//A TODOS

                } else {
                    App.btnImpresion.setDisabled(false);
                    App.btnImpresionHC.setDisabled(false);
                    parent.App.btnGuardarFirma.setDisabled(false);
                    //parent.App.btnContEpisodio_HCE.setDisabled(false);//A TODOS
                }
            }
        }
    }
    var count = 0; // a counter for new records



    var eventoKey = function (tf, e) {
        if (e.getKey() == '110' || e.getKey() == '190' || e.getKey() == '100') {
            var str = tf.getRawValue().replace('.', '');
            tf.setValue(str);
        } else if (e.getKey() == '109' || e.getKey() == '189') {
            var str = tf.getRawValue().replace('-', '');
            tf.setValue(str);
        }
    };
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };


    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
        }
    };

  var onSuccess = function (data) {
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);
        App.formactual.setDisabled(true);
        var reload = true;
        if (data != null) {
            if (data.length > 0) {
                reload = false
                App.cmdGuardar.setDisabled(false);
                App.formactual.setDisabled(false);
                if (data[0].TIPOMSG == 'EXCEPTION') {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: data[0].TITULO,
                            message: data[0].DESCRIPCION,
                            tipo: 'ERROR'
                        }
                    });
                } else {
                    accionMensajes(data);
                }
            }
        }
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
        }
    };



    var onFailure = function (data) {
        App.cmdGuardar.setDisabled(false);
    };


    function eventoCancelar(form) {
        App.bar.setDisabled(true);
        var reload = true;
        if (reload) {
            parent.App.txtRecargarX.setValue('RELOAD');
            // beforeSave(form);
        }
    }

    var valor = 0;
    var cont = 0;

    var value1 = 0;
    var value2 = 0;
    var value3 = 0;
    var value4 = 0;
    var value5 = 0;
    var total = 0;

    var valoracion = 0;
    var valpreg1 = 0;
    var valpreg2 = 0;
    var valpreg3 = 0;
    var valpreg4 = 0;
    var valpreg5 = 0;

    var eventoRadio = function (rd1, Tipo, puntaje) {

        var obj = rd1.getValue();
        var valor = 0;
        var parametro1 = App.IDFlagParametro1.getValue();
        var parametro2 = App.IDFlagParametro2.getValue();
        var parametro3 = App.IDFlagParametro3.getValue();
        var parametro4 = App.IDFlagParametro4.getValue();
        var parametro5 = App.IDFlagParametro5.getValue();

        if (App.IdTotal.getValue() != '') {
            numero = App.IdTotal.getValue();
        } else {
            numero = 0;
        }

        if (obj) {

            if (Tipo == 'P1' && puntaje == 2) {
                valor = 2 + parseInt(numero);
                App.IDFlagParametro1.setValue('2');
            }

            if (Tipo == 'P1' && puntaje == 1) {
                valor = 1 + parseInt(numero);
                App.IDFlagParametro1.setValue('1');
            }

            if (Tipo == 'P1' && puntaje == 0) {
                valor = 0 + parseInt(numero);
                App.IDFlagParametro1.setValue('0');
            }

            if (Tipo == 'P2' && puntaje == 2) {
                valor = 2 + parseInt(numero);
                App.IDFlagParametro2.setValue('2');
            }

            if (Tipo == 'P2' && puntaje == 1) {
                valor = 1 + parseInt(numero);
                App.IDFlagParametro2.setValue('1');
            }

            if (Tipo == 'P2' && puntaje == 0) {
                valor = 0 + parseInt(numero);
                App.IDFlagParametro2.setValue('0');
            }

            if (Tipo == 'P3' && puntaje == 2) {
                valor = 2 + parseInt(numero);
                App.IDFlagParametro3.setValue('2');
            }

            if (Tipo == 'P3' && puntaje == 1) {
                valor = 1 + parseInt(numero);
                App.IDFlagParametro3.setValue('1');
            }

            if (Tipo == 'P3' && puntaje == 0) {
                valor = 0 + parseInt(numero);
                App.IDFlagParametro3.setValue('0');
            }

            if (Tipo == 'P4' && puntaje == 2) {
                valor = 2 + parseInt(numero);
                App.IDFlagParametro4.setValue('2');
            }

            if (Tipo == 'P4' && puntaje == 1) {
                valor = 1 + parseInt(numero);
                App.IDFlagParametro4.setValue('1');
            }

            if (Tipo == 'P4' && puntaje == 0) {
                valor = 0 + parseInt(numero);
                App.IDFlagParametro4.setValue('0');
            }

            if (Tipo == 'P5' && puntaje == 2) {
                valor = 2 + parseInt(numero);
                App.IDFlagParametro5.setValue('2');
            }

            if (Tipo == 'P5' && puntaje == 1) {
                valor = 1 + parseInt(numero);
                App.IDFlagParametro5.setValue('1');
            }

            if (Tipo == 'P5' && puntaje == 0) {
                valor = 0 + parseInt(numero);
                App.IDFlagParametro5.setValue('0');
            }

        } else {

            if (Tipo == 'P1' && puntaje == 2) { valor = numero - 2; }
            if (Tipo == 'P1' && puntaje == 1) { valor = numero - 1; }
            if (Tipo == 'P1' && puntaje == 0) { valor = numero - 0; }
            if (Tipo == 'P2' && puntaje == 2) { valor = numero - 2; }
            if (Tipo == 'P2' && puntaje == 1) { valor = numero - 1; }
            if (Tipo == 'P2' && puntaje == 0) { valor = numero - 0; }
            if (Tipo == 'P3' && puntaje == 2) { valor = numero - 2; }
            if (Tipo == 'P3' && puntaje == 1) { valor = numero - 1; }
            if (Tipo == 'P3' && puntaje == 0) { valor = numero - 0; }
            if (Tipo == 'P4' && puntaje == 2) { valor = numero - 2; }
            if (Tipo == 'P4' && puntaje == 1) { valor = numero - 1; }
            if (Tipo == 'P4' && puntaje == 0) { valor = numero - 0; }
            if (Tipo == 'P5' && puntaje == 2) { valor = numero - 2; }
            if (Tipo == 'P5' && puntaje == 1) { valor = numero - 1; }
            if (Tipo == 'P5' && puntaje == 0) { valor = numero - 0; }

        }

        App.IdTotal.setValue(valor);
    };



    </script>
    <script>

        var hhValidation = function (h) {
            str = h.value;

            tempo = "'";
            str = str.replace('javascript:myFunction(' + tempo, '');
            str = str.replace('%20', ' ');
            str = str.replace('%C3%B3', 'ó');
            str = str.replace('%C3%A1', 'á');
            str = str.replace('%C3%A9', 'é');
            str = str.replace('%C3%AD', 'í');
            str = str.replace('%C3%BA', 'ú');
            str = str.replace('%C3%B1', 'ñ');

            str = str.replace('%C3%8D', 'Í');
            str = str.replace('%C3%93', 'Ó');
            str = str.replace('%C3%81', 'Á');
            str = str.replace('%C3%91', 'Ñ');
            str = str.replace('%C3%9A', 'Ú');
            str = str.replace(tempo + ')', '');
            h.setValue(str);

        }
        var mmValidation = function (m) {
            if (m.getValue() > 59) {
                m.setValue(59);
            }

        };

        function eventoVisorReporte(param1) {
            if(param1=='HC'){
                window.location.href = '@Url.Action("HCEReportesView_total", "HClinica")';
            } else {
                window.location.href = '@Url.Action("HCEReportesView", "HClinica")';
            }
        }
    </script>
}


@section cuerpo
{

    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                 .Height(500)
                .Header(false)
               .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm(); ";

                })
               .Items(

                    //  X.TextFieldFor(m => m.FlagParametro1).ReadOnly(true).ID("IdParametro1").Hidden(true)
                //, X.TextFieldFor(m => m.FlagParametro2).ReadOnly(true).ID("IdParametro2").Hidden(true)
                //, X.TextFieldFor(m => m.FlagParametro3).ReadOnly(true).ID("IdParametro3").Hidden(true)
                //, X.TextFieldFor(m => m.FlagParametro4).ReadOnly(true).ID("IdParametro4").Hidden(true)
                //, X.TextFieldFor(m => m.FlagParametro5).ReadOnly(true).ID("IdParametro5").Hidden(true),

                       X.FieldSet()
                        .ID("fsDolorEvaAdultos")
                        .ColumnWidth(0.4).Title("")
                        .Layout(LayoutType.Fit)
                        .MarginSpec("05 05 0 05")
                        .Defaults(d =>
                        {
                            d.Add(new Parameter("LabelWidth", "180"));
                            d.Add(new Parameter("DefaultAnchor", "100%"));
                            d.Add(new Parameter("LabelAlign", "Left"));
                        })
                        .FieldDefaults(d => { d.LabelAlign = LabelAlign.Left; })
                        .Items(
                          X.TextFieldFor(d => d.IdEscalaAltaCirugiaAmb).FieldLabel("").ReadOnly(true).LabelWidth(60).Width(140).Hidden(true),

                            X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                //.Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                            .Items(
                                X.Component().Width(50),
                                X.DateFieldFor(m => m.FechaIngreso).Format("dd/MM/yyyy")
                                                            .Width(200)
                                                            .FieldLabel("Fecha de Ingreso")
                                                            .LabelWidth(100)//.EmptyValue(DateTime.Now)
                                                            .AllowBlank(false).Editable(false).BlankText("Debe ingresar datos en este campo.")
                                                            .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.FechaIngreso),
                                X.Component().Width(50),
                                X.TimeFieldFor(m => m.HoraIngreso).Format("H:mm")
                                                           .Width(180)
                                                           .LabelWidth(90)
                                                            .ID("IdHora")
                                                           .FieldLabel("Hora")
                                                           .Increment(60)
                                                           .Value(Model.Accion == "NUEVO" ? DateTime.Now : Model.HoraIngreso)
                                                           .AllowBlank(false).Editable(false).BlankText("Debe ingresar datos en este campo.")

                            ),

                    X.Container().Layout(LayoutType.HBox)
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                    ).Height(20),
                         X.Container().Layout(LayoutType.HBox)
                                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(
                                 X.Component().Width(50),  //dar espacio desde el borde izquierdo
                                 X.FieldSet().ID("fsEscala2")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                                            .Items(
                                            X.Label().Hidden(false).Border(true).Html("<font  size='2.8em'; color='black'>Parámetros</font>")
                                          )
                                         .Width(160)

                                         ,
                              X.FieldSet().ID("fsEscala1")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                                            .Items(
                                            X.Label().Hidden(false).Border(true).Html("<font  size='2.8em'; color='black'>Factores de Riesgo</font>")
                                          )
                                         .Width(300)

                                         ,
                //X.FieldSet().ID("fsEscala3")
                //   .Title("")
                //   .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                //   .Items(
                //   X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Factores de Riesgo</font>")
                // )
                //.Width(100)

                                         //,
                //
                //-----
                                      X.FieldSet().ID("fsEscala3")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 200; d.InputWidth = 200; })
                                            .Items(
                                            X.Label().Hidden(false).Border(true).Html("<font  size='2.8em'; color='black'>Puntos</font>")
                                        )
                                     .Width(100)


                                )
                         ,
                          X.Container().Layout(LayoutType.HBox)
                                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(

                                X.Component().Width(50),  //dar espacio desde el borde izquierdo
                                 X.FieldSet().ID("fsEscala12")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                                 .Items(
                                    X.Component().Height(30),

                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Signos Vitales(PA / FC)</font><BR><BR><BR><BR>"),

                                  X.Component().Height(25),

                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Nivel de Actividad</font><BR><BR><BR><BR>"),

                                  X.Component().Height(30),
                                  
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Dolor, Nauseas, Vomitos</font><BR><BR><BR>"),
                                  X.Component().Height(30),
                                  
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Sangrado Quirúrgico</font><BR><BR><BR><BR><BR>"),
                                  X.Component().Height(23),
                                  
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Ingesta y miccíón</font><BR><BR><BR><BR><BR>")
                                 ).Width(160).Height(500),


                                 //X.Component().Width(70),  //dar espacio desde el borde izquierdo
                                 X.FieldSet().ID("fsEscala5")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                                 .Items(
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Dentro del 20% valor preoperatorio<BR><BR>20% - 40% valor preoperatorio<BR><BR> Mayor de los valores preoperatorios</font><BR><BR>"),


                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Deambula sin asistencia<BR><BR>Deambula con asistencia<BR><BR>Incapaz de ambular</font><BR><BR>"),
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Leve<BR><BR> Moderado<BR><BR>Severo</font><BR><BR>"),
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Leve<BR><BR> Moderado<BR><BR>Severo</font><BR><BR>"),
                                 X.Label().Hidden(false).Border(false).Html("<font  size='2.8em'; color='black'>Líquidos por boca y micciona solo<BR><BR> Líquidos por boca o micciona solo<BR><BR>Ninguno</font><BR><BR>")
                                 ).Width(300).Height(500),
                //-----
                //**

                //**
                                X.FieldSet().ID("fsEscala6")
                                            .Title("")
                                            .FieldDefaults(d => { d.LabelWidth = 10; d.InputWidth = 10; })
                                            .Items(
                //     X.CheckboxGroupFor(m => m.FlagParametro1, new List<Checkbox.Config> {
                //    new Checkbox.Config{BoxLabel = "1", InputValue = "1", Checked= (Model.FlagParametro2=="1"?true:false), ReadOnly =indicaModoLectura, Width=100,Handler="eventoRadio(this,1);",Height=46 }
                //}).ID("Check1"),
                //GRUPO 1
                                X.RadioGroupFor(m => m.FlagParametro1, new List<Radio.Config> {
                                   new Radio.Config{BoxLabel = "2",InputValue = "2",Width = 60, Height=32,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro1==2?true:false),Handler="eventoRadio(this,'P1',2);"},
                                   new Radio.Config{BoxLabel = "1",InputValue = "1",Width = 60,Height=32,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro1==1?true:false),Handler="eventoRadio(this,'P1',1);"},
                                   new Radio.Config{BoxLabel = "0",InputValue = "0",Width = 60,Height=25,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro1==0?true:false),Handler="eventoRadio(this,'P1',0);"}
                                }).Vertical(true).ColumnsNumber(1),
                //Fin grupo 1
                //GRUPO 2
                                X.RadioGroupFor(m => m.FlagParametro2, new List<Radio.Config> {
                                   new Radio.Config{BoxLabel = "2",InputValue = "2",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro2==2?true:false),Handler="eventoRadio(this,'P2',2);"},
                                   new Radio.Config{BoxLabel = "1",InputValue = "1",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro2==1?true:false),Handler="eventoRadio(this,'P2',1);"},
                                   new Radio.Config{BoxLabel = "0",InputValue = "0",Width = 60,Height=26,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro2==0?true:false),Handler="eventoRadio(this,'P2',0);"}
                                }).Vertical(true).ColumnsNumber(1),
                //Fin grupo 2
                //GRUPO 3
                                X.RadioGroupFor(m => m.FlagParametro3, new List<Radio.Config> {
                                   new Radio.Config{BoxLabel = "2",InputValue = "2",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro3==2?true:false),Handler="eventoRadio(this,'P3',2);"},
                                   new Radio.Config{BoxLabel = "1",InputValue = "1",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro3==1?true:false),Handler="eventoRadio(this,'P3',1);"},
                                   new Radio.Config{BoxLabel = "0",InputValue = "0",Width = 60,Height=26,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro3==0?true:false),Handler="eventoRadio(this,'P3',0);"}
                                }).Vertical(true).ColumnsNumber(1),
                //Fin grupo 3
                //GRUPO 4
                                X.RadioGroupFor(m => m.FlagParametro4, new List<Radio.Config> {
                                   new Radio.Config{BoxLabel = "2",InputValue = "2",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro4==2?true:false),Handler="eventoRadio(this,'P4',2);"},
                                   new Radio.Config{BoxLabel = "1",InputValue = "1",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro4==1?true:false),Handler="eventoRadio(this,'P4',1);"},
                                   new Radio.Config{BoxLabel = "0",InputValue = "0",Width = 60,Height=26,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro4==0?true:false),Handler="eventoRadio(this,'P4',0);"}
                                }).Vertical(true).ColumnsNumber(1),
                //Fin grupo 4
                //GRUPO 5
                                X.RadioGroupFor(m => m.FlagParametro5, new List<Radio.Config> {
                                   new Radio.Config{BoxLabel = "2",InputValue = "2",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro5==2?true:false),Handler="eventoRadio(this,'P5',2);"},
                                   new Radio.Config{BoxLabel = "1",InputValue = "1",Width = 60,Height=33,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro5==1?true:false),Handler="eventoRadio(this,'P5',1);"},
                                   new Radio.Config{BoxLabel = "0",InputValue = "0",Width = 60,Height=30,ReadOnly =indicaModoLectura,Checked= (Model.FlagParametro5==0?true:false),Handler="eventoRadio(this,'P5',0);"}
                                }).Vertical(true).ColumnsNumber(1)
                //Fin grupo 5
                                        )
                                        .Width(100).Height(500)

                                ),
                                 X.Container().Layout(LayoutType.HBox)
                                .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                .Items(

                                   X.Component().Width(550),
                                   X.TextFieldFor(d => d.Total).FieldLabel("Total").LabelWidth(60).ID("IdTotal").Width(140).ReadOnly(true),
                                   X.Component().Width(20),
                                   X.TextField().FieldLabel("Puntaje de alta").ReadOnly(true).LabelWidth(100).ID("").Width(180).Text("Mínimo 8-9"),
                                   X.Component().Width(550),
                                   X.TextFieldFor(d => d.FlagParametro1).LabelWidth(60).ID("IDFlagParametro1").Width(140).AllowBlank(true).ReadOnly(true),
                                   X.TextFieldFor(d => d.FlagParametro2).LabelWidth(60).ID("IDFlagParametro2").Width(140).AllowBlank(true).ReadOnly(true),
                                   X.TextFieldFor(d => d.FlagParametro3).LabelWidth(60).ID("IDFlagParametro3").Width(140).AllowBlank(true).ReadOnly(true),
                                   X.TextFieldFor(d => d.FlagParametro4).LabelWidth(60).ID("IDFlagParametro4").Width(140).AllowBlank(true).ReadOnly(true),
                                   X.TextFieldFor(d => d.FlagParametro5).LabelWidth(60).ID("IDFlagParametro5").Width(140).AllowBlank(true).ReadOnly(true)
                                )






                        )
                ////////ADD PARA MSGS/////
                        ,
                        X.HiddenFor(m => m.Accion),
                        X.DateFieldFor(m => m.FechaCreacion).Hidden(true),
                        X.DateFieldFor(m => m.FechaModificacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioCreacion).Hidden(true),
                        X.TextFieldFor(m => m.UsuarioModificacion).Hidden(true),
                        X.TextFieldFor(m => m.Estado).Hidden(true),
                        X.TextArea().ID("taAlerts")
                        .Border(false)
                        .StyleSpec("background:white;border:1px solid gray;")
                        .FieldStyle("color: red")
                        .Hidden(true)
                        .ReadOnly(true)
                //////////////////////
                     )

                    .TopBar(X.Toolbar().ID("bar").Items(
                                X.ToolbarSpacer(20),
                                X.TextField().Width(15).FieldStyle("border-color: " + COLOER_IND_OBLIGA).ReadOnly(true).Hidden(indicaModoLectura),
                                X.Label().Html("<b><font color='" + COLOER_IND_OBLIGA + "'>Campos Obligatorios</font></b>").Hidden(indicaModoLectura),

                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),
                                X.ToolbarFill(),
                               X.Button()
                                .Text("Imprimir")
                                .Icon(Icon.Report)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresion")
                                .Handler("eventoVisorReporte('');")
                                ,
                                X.Button()
                                .Text("Imprimir todos")
                                .Icon(Icon.ReportGo)
                                .Hidden(!visibleImpresion)
                                .ID("btnImpresionHC")
                                .Handler("eventoVisorReporte('HC');")
                                ,
                                X.ToolbarSpacer().Width(40)
                                ,
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk)
                                .ID("cmdGuardar").Hidden(indicaModoLectura)

                                .DirectEvents(de =>
                                {  //Model.ACCION : Posee el MODO ACTUAL
                                    de.Click.Url = Url.Action("CCEPF464_Save");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.Before = "" +
                                            "beforeSave(App.formactual); return App.formactual.getForm().isValid();";
                                    de.Click.ExtraParams.Add(new { HoraIngreso = JRawValue.From("App.IdHora.getValue()") });
                                    de.Click.Success = "onSuccess(result.data);";
                                    de.Click.Failure = "onFailure();";
                                }),

                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(indicaModoLectura)
                                .Icon(Icon.Cancel)
                                .Handler("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")

                        ))
                        .Listeners(l => l.FieldChange
                            .Handler = "setIndicaCambios(true);"
                        )
                );
        }
        )


    )

}

