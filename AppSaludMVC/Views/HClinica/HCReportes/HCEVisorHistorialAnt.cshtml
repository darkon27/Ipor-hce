@model SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL


@{
    var X = Html.X();
    var COLOR_BLUE01_temp = "#284A89";
    var COLOR_IdOrden = "#892828";
    var COLOR_RED01_temp = "#990000";
    var COLOR_GREEN01_temp = "#177506";
    var COLOR_YELLOW02_temp = "#D9A407";
    var urlActivo = "";
    urlActivo = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PacienteDatos1;
    var NODOROOT_desc = "DOCUMENTOS-SALUD";
    var NODOROOT_id = "1|0|0|";
}

<style type="text/css">
    /*<![CDATA[*/
    #img_uno {
        width: auto;
        height: 100%;
        align-self: center;
        -webkit-user-select: none;
        cursor: zoom-in;
    }

    #img_dos {
        -webkit-user-select: none;
        cursor: zoom-out;
    }

    .logo {
        border: solid 3px #000;
    }
    /*]]>*/
</style>

<script>

    var actualPrev_X = null;
    var actualPrev_Y = null;
    var actualPrev_H = null;
    var actualPrev_W = null;
    var panelActual = null;
    var pathImage = "resources/IndexImagen/";
    var loadReporte = function (record) {
        var desc = record.data.text;
        var id = record.data.id;
        var showURL = '';
        var path = '';
        var accionReport = '';
        var pathLocalURL = "/Reportes/VisorReportesHCE.aspx?ReportID=";
        var showURL_end = '&Visor=I';
        if (id > 1) {
            var cont = App.centerPanels;
            cont.setTitle('Selección actual: ' + desc);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("eventoLoadReporte"))',
                params: {
                    containerId : '',
                    text: id
                },
                success: function (resultRegla) {
                    if (resultRegla.data != null) {
                        if (resultRegla.data[0].TIPOMSG == 'FFIJO') {
                            showURL_end = '&Visor=I';
                            path = resultRegla.data[0].TITULO;
                            accionReport = resultRegla.data[0].DESCRIPCION;
                            if (accionReport != null) {
                                showURL = path + pathLocalURL + accionReport + showURL_end;
                            } else {
                                showURL = 'http://www.sanna.pe';
                            }
                            var contX = cont.getLoader();
                            cont.getLoader().url = 'http://' + showURL;
                            contX.load({
                                params: {
                                }
                            });
                        } else {
                        }
                    }
                }
            });

        } else {
        }
    };

    function contendiv(showURL) {
        var div = document.getElementById('centerPanels-body');
        div.style.overflow = 'scroll';
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function () {
            if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
                div.innerHTML = xmlHttp.responseText;
            }
        };
        xmlHttp.open("GET", showURL, true);
        xmlHttp.send(null);
    }

    function imagendiv(showURL) {
        var imagen = document.createElement('img');
        imagen.src = showURL;
        imagen.id = 'img_uno';
        imagen.className = 'logo';
        imagen.title = 'titulo de la imagen';
        imagen.alt = 'texto alternativo';
        imagen.onclick = function () {
            if (this.id == 'img_uno') {
                this.id = 'img_dos';
            } else {
                this.id = 'img_uno';
            }
        };

        var div = document.getElementById("centerPanels-body");
        div.innerHTML = "";
        div.style.overflow = "scroll";
        div.appendChild(imagen);
    }

    var eventoExpandir = function (window, contraer) {
        if (contraer) {
            if (actualPrev_X != null && actualPrev_Y != null && actualPrev_H != null && actualPrev_W != null) {
                window.setHeight(actualPrev_H);
                window.setWidth(actualPrev_W);
                window.setX(actualPrev_X);
                window.setY(actualPrev_Y);
                App.btnContract.setVisible(false);
                App.btnExpand.setVisible(true);
            }
        } else {
            actualPrev_H = window.getHeight();
            actualPrev_W = window.getWidth();
            actualPrev_X = window.getX();
            actualPrev_Y = window.getY();
            var KK = 30;
            var h = screen.height;
            var w = screen.width;
            window.setHeight(h - KK - 100);
            window.setWidth(w);
            window.setX(0);
            window.setY(KK);
            App.btnContract.setVisible(true);
            App.btnExpand.setVisible(false);
        }

    };

    var accionReloadNodoRoot = function (buscar) {
        if (true) {
            var tree = App.TreeDocumentosHC;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setNodoRootGeneral"))',
                params: {
                    tipo: 0,
                    text: '@(NODOROOT_desc)',
                    id: '@(NODOROOT_id)',
                    leaf: false
                },
                success: function (node) {
                    if (!Ext.isEmpty(node)) {
                        tree.setRootNode(node);
                    }
                    else {
                        tree.getRootNode().removeAll();
                    }
                    if (buscar) {
                        buscarfiltrosArbol(node.text);
                    }
                }
            });
        } else {
        }
    };

    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    };

    var buscarfiltrosArbol = function (texto) {
        var tree = App.TreeDocumentosHC;
        tree.clearFilter();
        if (Ext.isEmpty(texto, false)) {
            return;
        } else {
            var re = new RegExp(".*" + texto + ".*", "i");
            tree.filterBy(function (node) {
                return re.test(node.data.text);
            });
        }
    };

    var eventoCheckFiltroCompuesto = function (check, componente1, componente2, componente3, btn) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente1.setDisabled(true);
            componente1.setValue(null);
            componente2.setDisabled(true);
            componente2.setValue(null);
            componente3.setDisabled(true);
            componente3.setValue(null);
            btn.setDisabled(true);
        } else {
            componente1.setDisabled(false);
            componente2.setDisabled(false);
            componente3.setDisabled(false);
            btn.setDisabled(false);
        }
    };

    function seleccionadorMedico() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorMedico"))',
            params: {
                AccionSeleccion: 'getSeleccionMedicoEsp_DocHC',
                AccionListado: 'LISTARPAG'
            }
        });
    };

    function seleccionadorDiagnosticoDoc() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorDiagnostico"))',
            params: {
                AccionSeleccion: 'getSeleccionDiagnostico_DocHC',
                AccionListado: 'LISTARPAG'
            }
        });
    };

    function seleccionadorUnidadServicio() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorUnidadServicio"))',
            params: {
                AccionSeleccion: 'getSeleccionCatUnidadServicio_DocHC',
                AccionListado: 'LISTARPAG'
            }
        });
    };

    var SelectClik_VisorInf = function (record) {
        selecRecordActual_Visorpdf = record;
        if (record.Accion == " " || record.Accion == undefined) {
            alert("No exite Ruta de informe");
            return;

        } else {
            if (selecRecordActual_Visorpdf != null) {
                var cont = App.centerPanelsCopy;
                cont.setTitle('Selección actual: ');
                var contX = cont.getLoader();
                cont.getLoader().load({ url: selecRecordActual_Visorpdf.Accion });
            };
        }
    };

    var varTipoBuscar = "LOAD";
    var accionBuscarFiltro_InfSpring = function (tipo) {
        varTipoBuscar = tipo;
        App.GridPanelInfSpring.getStore().reload();
        varTipoBuscar = 'LOAD';
    };

</script>


@(Html.X().Window()
    .Width(960)
    .Height(600)
    .Maximizable(false)
    .Closable(false)
    .Modal(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Resizable(false)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
     .ID("" + "windowsin")
            .Title("Visor de historial antiguo")
    .Padding(4)
        .TopBar(
            X.Toolbar()
            .Height(30)
            .Items(
                X.ToolbarSpacer(),
                      X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" +
                        "Paciente" + ": " + Model.NombreCompletoPaciente + "</span> </b>")
                ,
                    X.ToolbarSpacer(),
                                  X.Label().Html("<b><span style='color:" + COLOR_IdOrden + ";'>" +
                                "    " + "Orden de Atencion" + ": " + Model.IdOrdenAtencion + "</span> </b>")
                    ,
                X.ToolbarSpacer(40),
                  X.Label().Html("<b><span style='color:" + COLOR_BLUE01_temp + ";'>" +
                        "Unidad de Replicación" + "</span> </b>").Hidden(false)
                ,
                X.ToolbarFill()
                ,
                X.Button().ID("btnExpand")
                    .Text("Expandir")
                    .Icon(Icon.ApplicationSideExpand)
                        .Handler("eventoExpandir (App." + "windowsin" + ",false);")
                            ,
                X.Button().ID("btnContract")
                    .Text("Restaurar").Hidden(true)
                    .Icon(Icon.ApplicationSideContract)
                        .Handler("eventoExpandir (App." + "windowsin" + ",true);")
                )
          )
        //INICIO
    .Items(
        X.Panel()
        .Border(false)
        .Layout(LayoutType.VBox)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .TopBar(
                X.Toolbar()
                .Height(30)
                .Items(

                    X.Button().ID("btnBuscar")
                        .Text("Buscar")
                        .Icon(Icon.Find)
                            .Handler("accionBuscarFiltro_InfSpring('FILTRO');")
                    , X.ToolbarFill()
                    , X.ToolbarSeparator()
                    ,
                    X.Button()
                        .Text("Cerrar")
                        .Icon(Icon.Cancel)
                        .DirectEvents(de =>
                         {  //Model.ACCION : Posee el MODO ACTUAL
                             de.Click.Url = Url.Action("cerrarWindow");
                             de.Click.ExtraParams.Add(new Parameter(
                             "id", "" + "windowsin", ParameterMode.Value));
                         })
                    )
        )
        .Items(
            X.FieldSet().Height(50).ColumnWidth(0.4).Collapsible(true)
            .Title("Filtros de Búsqueda").MarginSpec("0 05 05 05")//BOTT LEFT TOP RIGHT
            .Items(
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                    X.Checkbox()
                    .FieldLabel("Código OA")
                     .ID("CodOA")
                             .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.CodOA,App.CodOA_txtOA);")
                    .Checked(true),
                    X.TextField()
                    .Width(220)
                    .ID("CodOA_txtOA")
                    .Disabled(true),
                         X.Component().Width(30)
                    ,
                          X.Checkbox()
                        .FieldLabel("Componentes")
                         .ID("CompchkComp")
                                         .Listeners(l => l.Change.Handler = "eventoCheckFiltro(App.CompchkComp,App.Comp_txt);")
                        .Checked(true),
                        X.TextField()
                        .Width(220)
                        .ID("Comp_txt")
                        .Disabled(true)
                )
                ,
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                )
                ,
                Html.X().Container().Layout(LayoutType.HBox).MarginSpec("0 00 05 00")//BOTT LEFT TOP RIGHT
                .Defaults(d =>
                {
                    d.Add(new Parameter("LabelWidth", "90"));
                })
                .Items(
                )
            )
            ,
            X.Panel().Header(false).Border(false).Flex(1)
            .Layout(LayoutType.Border)
            .Items(
                    X.Panel().Icon(Icon.BookOpen).Collapsible(true).Resizable(true)
                    .Draggable(false)
                    .Layout(LayoutType.Fit)
                    .Region(Region.West)
                    .Title("Información de Informes de Procedimientos Spring")
                    .Width(400)
                    .Border(true)
                    .Items(
                        X.GridPanel()
                        .Layout(LayoutType.Fit)
                        .Border(false)
                        .Scroll(ScrollMode.Both)
                        .AutoScroll(true)
                        .ID("GridPanelInfSpring")
                        .Margins("0 0 0 0")
                        .Store(store => store.Add(
                        Html.X().Store()
                        .ID("storeInfSpring")
                        .AutoLoad(true)
                        .IsPagingStore(true)
                        .RemotePaging(true)
                        .PageSize(10)
                        .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                    .Url("HClinica/ListadoPacienteCodigoOA")
                        .Reader(reader => reader.Add(Html.X().JsonReader()
                        .Root("data")
                        .TotalProperty("total")
                       .IDProperty("Persona"))))
                        )
                        .Parameters(ps =>
                        ps.Add(new
                        {
                            codigooa = JRawValue.From("App.CodOA_txtOA.getValue()"),
                            componente = JRawValue.From("App.Comp_txt.getValue()")
                        })
                         )
                         .Model(model => model.Add(Html.X().Model()
                         .Fields(fields =>
                         {
                             fields.Add(Html.X().ModelField().Name("IdProcedimiento"));
                             fields.Add(Html.X().ModelField().Name("NombreArchivo"));
                             fields.Add(Html.X().ModelField().Name("RutaInforme"));
                             fields.Add(Html.X().ModelField().Name("IdPaciente"));
                             fields.Add(Html.X().ModelField().Name("Paciente"));
                             fields.Add(Html.X().ModelField().Name("CodigoOA"));
                             fields.Add(Html.X().ModelField().Name("CodigoComponente"));
                             fields.Add(Html.X().ModelField().Name("DescripcionComponente"));
                             fields.Add(Html.X().ModelField().Name("IdOrdenAtencion"));
                             fields.Add(Html.X().ModelField().Name("LineaOA"));
                             fields.Add(Html.X().ModelField().Name("TipoOrdenAtencion"));
                             fields.Add(Html.X().ModelField().Name("Medico"));
                             fields.Add(Html.X().ModelField().Name("Observacion"));
                             fields.Add(Html.X().ModelField().Name("FechaProcedimiento"));
                             fields.Add(Html.X().ModelField().Name("UsuarioCreacion"));
                             fields.Add(Html.X().ModelField().Name("CodigoEpisodioClinico"));
                             fields.Add(Html.X().ModelField().Name("Accion"));
                         })))))
                         .ColumnModel(columnModel =>
                         {
                             columnModel.Columns.Add(Html.X().Column().Text("Sucursal").DataIndex("UsuarioCreacion").Width(90).Hidden(false));
                             columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha de Examen").DataIndex("FechaProcedimiento").Width(120).Format("dd/MM/yyyy"));
                             columnModel.Columns.Add(Html.X().Column().Text("IdProcedimiento").DataIndex("IdProcedimiento").Width(80).Hidden(true)); 
                             columnModel.Columns.Add(Html.X().Column().Text("NombreArchivo").DataIndex("NombreArchivo").Width(150).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("RutaInforme").DataIndex("RutaInforme").Width(50).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(250).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("Paciente").Width(250).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("MotivoConsulta").DataIndex("MotivoConsulta").Width(300).Hidden(true));        
                             columnModel.Columns.Add(Html.X().Column().Text("Código OA").DataIndex("CodigoOA").Width(100).Hidden(false));
                             columnModel.Columns.Add(Html.X().Column().Text("CodigoComponente").DataIndex("CodigoComponente").Width(90).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("Descripcion").DataIndex("DescripcionComponente").Width(100).Hidden(false));
                             columnModel.Columns.Add(Html.X().Column().Text("IdOrdenAtencion").DataIndex("IdOrdenAtencion").Width(90).Hidden(true));
                             columnModel.Columns.Add(Html.X().Column().Text("Medico").DataIndex("Medico").Width(90).Hidden(false));                            
                             columnModel.Columns.Add(Html.X().Column().Text("Ruta").DataIndex("Accion").Width(90).Hidden(true));
                         })

                           .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                           .InputItemWidth(50)
                           .BeforePageText("Pág.")
                           .DisplayInfo(true)
                           .DisplayMsg("{0} - {1} de {2} Elementos")))
                            .View(X.GridView()
                            .Plugins(X.GridDragDrop().EnableDrop(false))
                            )
                            .Features(
                                Html.X().Grouping()
                                .ID("GroupingRecursos")
                                .GroupHeaderTplString("{columnName}: {name} - ({[values.rows.length]} {[values.rows.length > 1 ? \"Items\" : \"Item\"]})")
                                .HideGroupedHeader(true)
                                .EnableGroupingMenu(false)
                            )
                            .Border(false)
                            .Listeners(l =>
                            {
                                l.CellClick.Handler = "SelectClik_VisorInf(record.data);";
                            }
                            )
                    )
                     ,
                     Html.X().Panel()
                     .Region(Region.Center)
                     .ID("centerPanelsCopy")
                     .Height(600)
                     .Title("Formulario seleccionado")
                     .AutoDoLayout(true)
                     .Loader(
                            Html.X().ComponentLoader()
                                        .AutoLoad(true)
                                        .Url(Url.Action("/Content/pdf/mozilla12-pdf" + ".pdf"))
                                        .Mode(LoadMode.Frame)
                     )
                     .Loader(new ComponentLoader
                     {
                         AutoLoad = false,
                         DisableCaching = true,
                         Url = "http://www.sanna.pe/clinicas/san-borja-lima/",
                         ReloadOnEvent = true
                     }
                     )
            )
        )
    )//FIN
        .DirectEvents(de =>
        {

        })
    .CloseAction(CloseAction.Destroy)

)

@(X.KeyNav()
                    .Target("={document.body}")
                        .Enter(a => a.Handler = "accionBuscarFiltro_InfSpring('FILTRO');")
)
