@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_ExamenSolicitado
@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VISTA" ? false : false))));

    

    var DESC_ADD = "Proc. Médicos SEGUS";
    var COLOR_BLUE01 = "#284A89";

    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";  
}
@section cabecera
{
<style>
    html body {
        padding: 0px;
        background: none;
        background: none;
        background: none;
        background-attachment: fixed;
        background-position: center;
        font-family: tahoma,verdana,sans-serif;
        background-color: #ffffff;
    }
</style>


    <script>

        var COLOR_BLUE01_ = "#284A89";
        var COLOR_RED01_ = "#990000";
        var COLOR_YELLOW02_ = "#D9A407";
        var COLOR_GREEN01_ = "#177506";
        var COLOR_ORANGE01_ = "#E07509";

        var changeEPS = function (value) {

            var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
            var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_RED01_, "No Coberturado");
            else if (value == 2)
                return Ext.String.format(template, COLOR_GREEN01_, "Coberturado");
            else if (value == 3)
                return Ext.String.format(template, COLOR_ORANGE01_, "Auditoria");
            else if (value == 4)
                return Ext.String.format(template, COLOR_YELLOW02_, "Carta de Garantia");
            else
                return Ext.String.format(template, "gray", "No especificada");

        };

        function eventoRenderForm() {
            var kk = 195;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
            if (southH == 0) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(dimCentral);
        }
        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });
        }

        var seleccRecordActual = null;
        function setSeleccionActual(record) {
            seleccRecordActual = record;
        }

        var count = 0; // a counter for new records


        function deleteActual(record) {
            seleccRecordActual = record;
            if (seleccRecordActual != null) {
                setIndicaCambios(true);
                var store = App.grillaExamenes.store;
                var par1 = seleccRecordActual.data.ValorCodigo1;
                var par2 = seleccRecordActual.data.CodigoElemento;
                store.remove(seleccRecordActual);
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addEliminar_Examen"))',
                    params: {
                        MODO: 'DELETE',
                        codigo: par1,
                        secuencia: par2
                    }
                });
                seleccRecordActual = null; setFocus(false);
            }

        };

    </script>
    <script>
    var hhValidation = function (h) {
        str = h.value;
        tempo = "'";
        str = str.replace('javascript:myFunction(' + tempo, '');
        str = str.replace('%20', ' ');
        str = str.replace('%C3%B3', 'ó');
        str = str.replace('%C3%A1', 'á');
        str = str.replace('%C3%A9', 'é');
        str = str.replace('%C3%AD', 'í');
        str = str.replace('%C3%BA', 'ú');
        str = str.replace('%C3%B1', 'ñ');

        str = str.replace('%C3%8D', 'Í');
        str = str.replace('%C3%93', 'Ó');
        str = str.replace('%C3%81', 'Á');
        str = str.replace('%C3%91', 'Ñ');
        str = str.replace('%C3%9A', 'Ú');
        str = str.replace(tempo + ')', '');
        h.setValue(str);

    }
    var mmValidation = function (m) {
        if (m.getValue() > 59) {
            m.setValue(59);
        }

    }
    var eventoOnEditar = function (btn) {
        App.cmdGuardar.setDisabled(false);
        App.btnOnEdit.setVisible(false);
        App.btnCancel.setVisible(true);

    };

    function EnviarData(grid) {

        if (true) {
            App.taAlerts.setVisible(false);
            App.taAlerts.setValue(null);
            App.conthbIndicaError.setVisible(false);
            source = App.grillaExamenes;
            var store = App.storeExamenes;
            var status = 0;
            var i = 0;
            var valores = "";
            var ArrayList0 = new Array();
            var records = App.grillaExamenes.getSelectionModel().getSelection();
            var invalidFields = new Array();
            var fila = 0;

            App.storeExamenes.each(function (r) {
                fila = fila + 1;
                ///VALIDACIÓN
                setValuesGridForm(r, null);
                invalidFields = getInvalidFieldsGrid(App.formactual, invalidFields, fila);

                var MA_MiscelaneosDetalle = {
                    ValorFecha: r.get('ValorFecha'),
                    ValorCodigo1: r.get('ValorCodigo1'),
                    ValorCodigo2: r.get('ValorCodigo2'),
                    ValorCodigo3: r.get('ValorCodigo3'),
                    ValorCodigo4: r.get('ValorCodigo4'),
                    ValorCodigo5: r.get('ValorCodigo5'),
                    ValorEntero6: r.get('ValorEntero6'),
                    ValorEntero7: r.get('ValorEntero7'),
                    ValorCodigo6: r.get('ValorCodigo6'),
                    ValorCodigo7: r.get('ValorCodigo7'),
                    CodigoElemento: r.get('CodigoElemento'),
                    ACCION: (r.get('ACCION') == 'NUEVO' ? r.get('ACCION') : 'UPDATE')

                };
                ArrayList0.push(MA_MiscelaneosDetalle);
                i = i + 1;
            });

            if (invalidFields.length > 0) {
                addRecursosValidacion(invalidFields);
                App.cmdGuardar.setDisabled(false);
            } else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Save_Examen"))',
                    params: {
                        selectionArray1: ArrayList0,
                        text: 'O'
                    }
                });
            }

        } else {
            App.cmdGuardar.setDisabled(false);
        }
    }

        function InsertRow(valor, estado, soloLectura) {
        if (soloLectura == '1') {
            setIndicaCambios(false);
        } else {
            if (valor.getValue() != '') {
                var obj = JSON.parse(valor.getValue());
                var DescripcionLocalVar = obj.DescripcionLocal;
                var ValorIndicadorEPS = obj.ValorEntero4;
                var ValorCodSEGUS = obj.ValorCodigo1;                
                var ValorTipoCod = 'S';
                if (validaDuplicado(ValorCodSEGUS, 'ValorCodigo7')) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'Ya existe registro',
                            tipo: 'WARNING'
                        }
                    });
                    valor.setValue('');
                    return;
                }
                var grid = Ext.getCmp("grillaExamenes");
                setIndicaCambios(true);
                grid.store.insert(0, {
                    CodigoElemento: count--,
                    ValorCodigo1: DescripcionLocalVar,
                    ValorFecha: new Date(),
                    ValorEntero6: 1,
                    ValorEntero7: ValorIndicadorEPS,
                    ValorCodigo6: ValorTipoCod,
                    ValorCodigo7: ValorCodSEGUS,
                    ACCION: 'NUEVO'
                });
                Ext.Function.defer(function () {
                    grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
                }, 100);
                valor.setValue('');
            }
        }
    }
        function validaDuplicado(valor,campoCompara) {
            var estados = false;
            App.storeExamenes.each(function (r) {
                if (trim(r.get('' + campoCompara)) == trim(valor)) estados = true;
            });
            // alert(estados);
            return estados;
        }
        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }
    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
            App.conthbIndicaError.setVisible(true);
            App.taAlerts.focus();
        } else {
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        App.taAlerts.setVisible(false);
        App.taAlerts.setValue(null);
        App.conthbIndicaError.setVisible(false);
        var FieldsInvalidos = getInvalidFields(form);
        if (FieldsInvalidos.length > 0) {
            addRecursosValidacion(FieldsInvalidos);
        }

    };
    var addRecursosValidacion = function (FieldsInvalidos) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("addRecursosValidacion"))',
                params: {
                    data: FieldsInvalidos,
                    indica: 'VALIDAR',
                },
                success: function (result) { accionMensajes(result.data); }
            });
    };

    var getInvalidFieldsGrid = function (form, invalidFields, fila) {
        var fields = App.formactual.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: 'Fila N° ' + fila + '-' + field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
                field.reset();
            }
        });
        return invalidFields;
    };
    var setValuesGridForm = function (r,valor) {
        ////ESTE METODO  CAMBIA DE ACUERDO A CADA FORMULARIO:

        var ValorFecha = r.get('ValorFecha');
        var ValorCodigo1= r.get('ValorCodigo1');
        var ValorCodigo4= r.get('ValorCodigo4');
        App.FechaSolitada.setValue(ValorFecha == null ? null : ValorFecha);
        App.Observacion.setValue(ValorCodigo4 == null ? null : ValorCodigo4);

    };


    function eventoCancelar(form) {
            form.getForm().reset();
            App.taAlerts.setVisible(false);
            App.conthbIndicaError.setVisible(false);
            setIndicaCambios(false);
            App.storeExamenes.reload();
    }

    </script>
}


@section cuerpo
{


    @(Html.X().Viewport()
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        .Items(regions =>
        {

            regions.Add(Html.X().FormPanel()
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
               .Header(false)
               .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                })
               .Items(

                    X.FieldSet()
                                 .ColumnWidth(0.4)
                                 .Title("EXÁMENES")
                                 .MarginSpec("0 05 0 05")
                                 .Defaults(d =>
                                 {
                                     d.Add(new Parameter("LabelWidth", "170"));
                                 })

                                 .DefaultAnchor("100%")
                                 .FieldDefaults(d =>
                                 {
                                     d.LabelAlign = LabelAlign.Left;
                                 })
                                     .Items(
                //X.ComboBoxFor(c => c.IdTipoExamen)
                //   .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("HCC_FORMAINICIO").Select(d => new ListItem(d.Name, d.ID)))
                //   .FieldLabel("Tipo de Examen")
                //   .SimpleSubmit(true),

                                             X.TextField()
                                                 .ID("RecepcionaRecurso")
                                                 .Listeners(l =>
                                                 {
                                                     l.Change.Handler = "InsertRow(this,'Logico','" + (indicaModoLectura ? 1 : 0) + "');";
                                                 })
                                                 .Hidden(true),
                                             X.DateField().ID("FechaSolitada").Hidden(true).Value(DateTime.Now),
                                             X.TextField().ID("Observacion").Hidden(true).Value("DATA"),

                                            X.GridPanel()
                                                 .ID("grillaExamenes")
                                                 .Border(false)
                                                 .Store(
                                                     Html.X().Store()
                                                             .ID("storeExamenes")
                                                           .Model(
                                                             Html.X().Model()
                                                                 .IDProperty("CodigoElemento")
                //.Fields(
                //    Html.X().ModelField().Name("CodigoElemento"),
                //    Html.X().ModelField().Name("ValorCodigo1"),
                //    Html.X().ModelField().Name("ValorFecha"),
                //    Html.X().ModelField().Name("ValorCodigo2"),
                //    Html.X().ModelField().Name("ValorCodigo3")
                //))
                                                                    .Fields(
                                                                               new ModelField("ACCION", ModelFieldType.String),
                                                                               new ModelField("ValorFecha", ModelFieldType.Date),
                                                                               new ModelField("ValorCodigo1", ModelFieldType.String),  // PROCED
                                                                               new ModelField("ValorCodigo2", ModelFieldType.String), // TIPOEXAMEN
                                                                               new ModelField("ValorCodigo3", ModelFieldType.Int), // especial
                                                                               new ModelField("ValorCodigo4", ModelFieldType.String), // Observaciones
                                                                               new ModelField("ValorEntero5", ModelFieldType.Int),
                                                                               new ModelField("ValorEntero6", ModelFieldType.Int),
                                                                               new ModelField("CodigoElemento", ModelFieldType.String),
                                                                               new ModelField("ValorEntero7", ModelFieldType.Int),
                                                                               new ModelField("ValorCodigo6", ModelFieldType.String),
                                                                               new ModelField("ValorCodigo7", ModelFieldType.String)
                                                                             ))

                                                          .AutoLoad(true)
                                                          .RemoteSort(false)
                                                          .IsPagingStore(true)
                                                          .RemotePaging(true)
                                                          .PageSize(5)
                                                          .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                                            .Url("CCEP0306_EXAMENES")
                                                                            .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                           .Root("data")
                                                                                           .TotalProperty("total")
                                                                                           .IDProperty("CodigoElemento")))))
                                                         .Parameters(ps =>
                                                         ps.Add(new { tipoCodigo = "S" })
                                                         )

                                                 )
                                                 .ColumnModel(
                                                    Html.X().Column().Text("EPS").DataIndex("ValorEntero7")
                                                    .Width(30).Renderer("changeEPS"),                                                 
                                                    Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorFecha")
                                                         .Text("Fecha")
                                                          .Width(110)
                                                         .Component(
                                                             Html.X().DateField().ReadOnly(indicaModoLectura)
                                                             ),
                                                     Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo1")
                                                         .Text("Examen")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField()
                                                                    .ReadOnly(true)
                                                                    .Listeners(l => { l.Change.Handler = "hhValidation(this);"; })
                                                             ),
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo7")
                                                         .Text("Cód. Segus")
                                                         .Width(90)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(true)                                                                
                                                             ),                                                                                                                          
                                                       Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorEntero6")
                                                         .Text("Cantidad")
                                                         .Width(80)
                                                         .Component(
                                                             Html.X().NumberField()
                                                                .MinValue(1)

                                                             ),
                                                 Html.X().ComponentColumn()
                                                         .Editor(true)
                                                         .DataIndex("ValorCodigo4")
                                                         .Text("Observaciones")
                                                         .Flex(1)
                                                         .Component(
                                                             Html.X().TextField().ReadOnly(indicaModoLectura)
                                                             )
                                                        ,
                                                        Html.X().CommandColumn()
                                                        .Width(70)
                                                        .Text("Acción")
                                                        .Commands(
                                                            Html.X().GridCommand().Disabled(indicaModoLectura)
                                                                .CommandName("Delete")
                                                                .Icon(Icon.Delete)
                                                                .Text("Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "deleteActual(record);")

                                                 )
                                                 .SelectionModel(
                                                     Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                                 )
                                                 .Plugins(
                                                     Html.X().CellEditing()
                                                 )
                                                .Listeners(l => l.CellClick
                                                    .Handler = "setSeleccionActual(record);")
                                                 .TopBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura)
                                                             .Items(
                                                                X.ToolbarSeparator()
                                                                , Html.X().Label()
                                                                .Html("<b><font color='" + COLOR_BLUE01 + "'> Detalle - " + DESC_ADD + "</font></b>")

                                                             )
                                                   )
                                                   .BottomBar(
                                                         Html.X().Toolbar().Hidden(indicaModoLectura).Height(30)
                                                             .Items(
                                                                Html.X().Label()
                                                                .Html("<span style = 'color: " + COLOR_BLUE01 + "; '>" +
                                                                "<span style=' color:" + COLOR_BLUE01 + ";'> <b>EPS: </b></span>" + "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_RED01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>No Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_GREEN01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Coberturado </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_ORANGE01 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Auditoría </span>" +
                                                                "</span>")
                                                                , X.ToolbarSpacer(5)
                                                                , Html.X().Label()
                                                                .Html("<span style='font-size: 1.6em; color:" + COLOR_YELLOW02 + ";'> <b>&bull;</b>" +
                                                                "<span style = 'font-size: 0.6em; color: " + COLOR_BLUE01 + "; '>Carta de Garantía </span>" +
                                                                "</span>")
                                                             )
                                                   )                                                   
                                           )
                ////////ADD PARA MSGS/////
                                    ,
                                    X.TextArea().ID("taAlerts")
                                    .Border(false)
                                    .StyleSpec("background:white;border:1px solid gray;")
                                    .FieldStyle("color: red")
                                    .Hidden(true)
                                    .ReadOnly(true)
                //////////////////////
                     )

                    .TopBar(X.Toolbar().Hidden(indicaModoLectura).Items(
                                X.ToolbarSpacer(20)
                                ,
                                Html.X().Container().Layout(LayoutType.HBox)
                                .ID("conthbIndicaError").Hidden(true).Items(
                                    X.Label().Html("<font  size='1.9em'; color='red'>(</font>"),
                                    X.Label().Html("<font  size='3.9em'; color='red'><b>&#161;</b></font>"),
                                    X.Label().Html("<font  size='1.9em'; color='red'>) Verificar los errores presentados</font>")
                                ),                    
                            X.ToolbarFill(),
                            X.Button()
                                .Text("Guardar")
                                .Icon(Icon.Disk).ID("cmdGuardar")
                                .Handler("EnviarData(this.up('grid'));"),
                //.OnClientClick("var form = this.up('form'); form.getForm().updateRecord(form.down('grid').getSelectionModel().getLastSelected());"),
                            X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel")
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));")
                                ,
                            X.Button()
                                .Text("Editar")
                                .ID("btnOnEdit")
                                .Icon(Icon.ApplicationFormEdit)
                                .Hidden(true)
                                .Handler("eventoOnEditar(App.btnOnEdit);")
                        ))
                /*.Listeners(l => l.FieldChange
                    .Handler = "setIndicaCambios(true);"
                )      */
                );
        }
        )


    )

}

