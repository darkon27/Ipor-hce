@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_KardexEnfermeria

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    

    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;

    var Paciente = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PacienteID;
    long EpiAtencion = (long)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioAtencion;
    int EpiClinico = (int)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioClinico;
    int total = Convert.ToInt32(Session["CANTIDAD"]);
   

    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);



    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);

    var Agente = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDAGENTE;
    
    var COLOR_RED02 = "#F05F5F";
    var COLOR_GRAY = "gray";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";


    var PARTICULAR = 3;
    var CPM = 6;
    var PDS = 19;
    var PPS = 5;

}

@{
    MvcResourceManager.RegisterGlobalIcon(Icon.Accept);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyEuro);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyAdd);
}

@section cabecera
{

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;


        }

        .x-form-cb {
            margin-top: 2px !important;
        }
    </style>
    <script>
        var myRenderer1 = function (value, metadata) {
            metadata.style = "background-color: green;";

            return value;
        };

        var myRenderer2 = function (value, metadata) {
            metadata.style = "background-color: yellow;";

            return value;
        };
    </script>


    <script>
        var GlobalSelect = false;

        var grupoAnterior = 0;
        var ContadorColumnas = 0;
        var ContadorColumnas2 = 0;
        var ocultarCheck = false;
        var checkAgente = null;

    var Valores;
    var template = '<span style="color:{0};">{1}</span>';

    var SecuenciaMax = '@total';

    var seleccRecordActual = null;

    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;

    }

    /*   function eventoRenderForm() {

           var kk = 120;
           var scrH = screen.height;
           var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
           var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);

           if (southH == 0) {
               southH = 30;
           } else if (parent.App.PanelMainSouth.collapsed) {
               southH = 30;
           }
           var dimCentral = (scrH - (northH + southH) - kk);
           App.formactual.setHeight(dimCentral);
       }*/


    function eventoRenderForm() {
        var kk = 195;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);
    }

    var ALTURADEF = screen.height;
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }

    var Valores;

    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";


    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 14px; height: 14px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 6)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 5)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 3)
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
    };


    var changeGrupo = function (value) {
        var template = '<span>{0}</span>';
        if (value == 0 || value == null || value == "") {
            return Ext.String.format(template, "Individual");
        } else {
            return Ext.String.format(template, value);
        }
    };/**/


    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";




    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "ProgramarKardex") ';
    }


    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "ProgramarKardex") ';
    }



    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };



    function deleteSelected(grid) {
        var store = grid.store,
            records = grid.selModel.getSelection();

        store.remove(records);
        store.load(true);
    }





    var varTipoBuscar = "LOAD";

    var accionBuscarFiltro = function (tipo, fechaActual) {
        if (App.txtFecha1.getValue() == null) {
            App.txtFecha1.setValue(fechaActual);
        }
        if (App.txtFecha2.getValue() == null) {
            App.txtFecha2.setValue(fechaActual);
        }
        varTipoBuscar = tipo;
        App.GrillaVisorRecetas.getStore().reload();
        varTipoBuscar = 'LOAD';

    };
    function ConfirmaFinaliza() {
        Ext.Msg.confirm("Ventana de Confirmación", "¿Está seguro de finalizar Episodio Clínico?", function (btn) {
            if (btn === "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("EstadoClinico"))',
                    params: {
                        selection: "",
                        accion: "Finalizar"
                    }
                    , success: function (result) { App.GrillaVisorRecetas.getStore().reload(); }
                });
            }
        })

    }
    function showResult() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Finalizar"
            }
        });
    }


    function getFormatDate(fecha, parent) {
        var fechaForm = null;
        if (fecha != null) {
            var diaFec = fecha.getDate();
            var mmFec = fecha.getMonth() + 1;
            var yyyyFec = fecha.getFullYear();
            var diaForm = '' + diaFec;
            var mmForm = '' + mmFec;
            var yyyyForm = '' + yyyyFec;
            if (diaFec < 10) {
                diaForm = '0' + diaFec;
            }
            if (mmFec < 10) {
                mmForm = '0' + mmFec;
            }
            fechaForm = diaForm + '/' + mmForm + '/' + yyyyForm;
        }
        return fechaForm;
    };
    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };

    function mostrarAlarmaReglas(data) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    function chkFechasActosFiltros(fechaActual) {
        var checkAll = App.chFechas.getValue();
        if (checkAll) {
            App.txtFecha1.setDisabled(true);
            App.txtFecha1.setValue(null);
            App.txtFecha2.setDisabled(true);
            App.txtFecha2.setValue(null);
        } else {
            App.txtFecha1.setValue(fechaActual);
            App.txtFecha2.setValue(fechaActual);
            App.txtFecha1.setDisabled(false);
            App.txtFecha2.setDisabled(false);
        }
    }

    function InsertRow(valor, estado) {
        var grid = Ext.getCmp("GrillaVisorRecetas");
        if (valor.getValue() != '') {
            SecuenciaMax = parseInt(SecuenciaMax) + 1;
            var obj = JSON.parse(valor.getValue());
            var DescripcionLocalVar = obj.DescripcionLocal;
            var episodio = obj.ValorCodigo5;
            var linea = obj.ValorCodigo1;
            var familia = obj.ValorCodigo2;
            var subfamilia = obj.ValorCodigo3;
            var codigo = obj.CodigoElemento;


            setIndicaCambios(true);
            grid.store.insert(0, {
                
                /* IdEpisodioAtencion: episodio,*/
                FechaCreacion: new Date(),
                GrupoMedicamento: 99,
                IdPaciente: '@Paciente',
                EpisodioClinico: '@EpiClinico',
                IdEpisodioAtencion: '@EpiAtencion',
                Secuencia: SecuenciaMax,
                Linea: linea,
                Familia: familia,
                SubFamilia: subfamilia,
                TipoComponente: 'M',
                CodigoComponente: codigo,

                Medicamento: DescripcionLocalVar,
                Cantidad: 0,
                Estado: 2/*,
                ACCION: ''*/

            });
            valor.setValue('');
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        }

    }

    function validaDuplicado(valor) {
        var estados = false;
        App.storeExamenes.each(function (r) {
            if (trim(r.get('Medicamento')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function guardarSolicitud() {
        var grid = Ext.getCmp("GrillaVisorRecetas");

        var ArrayList0 = new Array();
        var ArrayList1 = new Array();
        var idOA = 0;
        var isError = false;
        /*if ( App.txtIdSolicitudProducto.getValue()!='') {
            idOA=parseInt(App.txtIdSolicitudProducto.getValue());
        }
        */
        var temp = '';
        var grupoAnt = 0;
        var HorasSeleccionadasBackup = new Array(); 
        var AgentesSuministroBackup = new Array();
        var countG = 0;
        var horasSum = '';
        var AgentSum = '';
        var estadoBackup = 0;
        var DateCut = null;
        var DateCutBackup = null;
        var isDCB = 0;
        /*for (i = 0; i <= Selecionados.length - 1; i++)*/
        var idPaciente = '@Paciente';
        var EpA = '@EpiAtencion';
        var EpC = '@EpiClinico';

        var HC_KardexEnfermeria = {
            IdPaciente: idPaciente,
            EpisodioClinico: EpC,/* r.get('EpisodioClinico'),*/
            IdEpisodioAtencion: EpA/* r.get('IdEpisodioAtencion')*//*,
                Observacion: App.txtObservacion.getValue(),*/
            /*NumeroDocumento: App.txtDocumento.getValue()/*,*/
            /* IdOrdenAtencion: idOA*/
            /* Estado: Selecionados[i].get('Estado')*/
        };
        ArrayList0.push(HC_KardexEnfermeria);



        grid.store.each(function (r) {
            var HorasSeleccionadas = new Array();
            var AgentesSuministro = new Array();
            var numerosTemporal = new Array();
            var ArregloTem = null;
            /*var VerificaNumero = null;*/

            if (r.get('Dosis') != null & r.get('Dosis') != '')
            {
                ArregloTem = (r.get('Dosis')).split(',');
                AgentesSuministro.push(ArregloTem);
                for (var x = 0; x < ArregloTem.length; x++)
                {
                  var  VerificaNumero = (ArregloTem[x]).split('_');
                    numerosTemporal.push(VerificaNumero[0]);
                }
            }


            
            /********/
            if (parseInt(r.get('GrupoMedicamento')) != grupoAnt & parseInt(r.get('GrupoMedicamento')) != 0)
            {
                grupoAnt = parseInt(r.get('GrupoMedicamento'));
                countG = 0;
                isDCB = 0;
            }

            if (parseInt(r.get('GrupoMedicamento')) == grupoAnt & parseInt(r.get('GrupoMedicamento')) != 0 & grupoAnt != 0 & countG == 1) {
                horasSum = HorasSeleccionadasBackup.toString();
                HorasSeleccionadas = HorasSeleccionadasBackup;
                AgentSum = AgentesSuministroBackup.toString();
                AgentesSuministro = AgentesSuministroBackup;
            }
            else {

                for (i = 0; i < 24; i++) {
                    var Xnumero = '';
                    if (i < 10) {
                        Xnumero = '0' + i;
                    }
                    else { Xnumero = i; }
                    var numeroX = Xnumero.toString();
                    if (r.get(Xnumero) == true) {
                        HorasSeleccionadas.push(Xnumero);
                        var encontrado = false;
                        for (var x = 0; x < numerosTemporal.length; x++)
                        {
                            if (numerosTemporal[x] == Xnumero) {
                                encontrado = true;                               
                            }
                        }
                        if (encontrado == false)
                        {
                            var XD = Xnumero + '_' + '@Agente';
                            AgentesSuministro.push(XD);
                        }


                    }
                }

                HorasSeleccionadasBackup = HorasSeleccionadas;
                AgentesSuministroBackup = AgentesSuministro;

                horasSum = HorasSeleccionadas.toString();
                AgentSum = AgentesSuministro.toString();
            }

            /********/
            var totalS = 1;
            var veces = ' vez';
            var newEstado = 2;
            if (parseInt(r.get('Cama')) == 64) {
                totalS = 24 / parseInt(r.get('Frecuencia'));
            } else { totalS = 1; }

            if (totalS > 1) { veces = ' veces'; }

            if (HorasSeleccionadas.length > totalS) {
                var mensaje = 'El medicamento ' + r.get('Medicamento') + ' solo se debe suministrar ' + totalS + veces + ' al día';
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                titulo: 'Advertencia',
                message: mensaje,
                tipo: 'WARNING'
            }
            });
                isError = true;
                return false;
            }

            /*************************/

            if (parseInt(r.get('GrupoMedicamento')) == grupoAnt & parseInt(r.get('GrupoMedicamento')) != 0 & grupoAnt != 0 & countG == 1) {

                newEstado = estadoBackup;
            }
            else {

                if (r.get('CT') == true) {
                    newEstado = 4;
                    estadoBackup = newEstado;
                }
                else {
                    if (HorasSeleccionadas.length == totalS) {
                        newEstado = 3;
                    }
                    else {
                        if (r.get('Estado') == 4) {
                            newEstado = r.get('Estado');
                        }
                        else {
                            if (HorasSeleccionadas[0] == null || HorasSeleccionadas[0] == '') {
                                newEstado = 1;
                            } else { newEstado = 2; }

                        }
                    }
                    estadoBackup = newEstado;
                }

            }
            /***********************/

            if (parseInt(r.get('GrupoMedicamento')) == grupoAnt & parseInt(r.get('GrupoMedicamento')) != 0 & grupoAnt != 0 & countG == 1 & isDCB == 1) {

                DateCut = DateCutBackup;
            }
            else {

                if (r.get('CT') == true) {
                    DateCut = new Date();
                    DateCutBackup = DateCut;
                    isDCB = 1;

                }
                else {
                   /* if (HorasSeleccionadas.length == totalS) {
                        newEstado = 3;
                    }
                    else {*/
                        if (r.get('Estado') == 4) {
                            DateCut = new Date(r.get('CodigoOA'));
                        }
                      /*  else {
                            if (HorasSeleccionadas[0] == null || HorasSeleccionadas[0] == '') {
                                newEstado = 1;
                            } else { newEstado = 2; }

                        }*/
                  /*  }*/
                    DateCutBackup = DateCut;
                }

            }



            /***********************/



            var horaA=null;

           /* if (r.get('IngresoFechaRegistro') == null || r.get('IngresoFechaRegistro') == '') {*/

           /* var mydate = new Date(App.txtFecha1.getValue());
                var horasOfDay = mydate.getHours();
                mydate.setHours(horasOfDay + parseInt(HorasSeleccionadas[0]));
                horaA = mydate;
                alert(horaA);*/
          /*  }
            else { horaA = r.get('IngresoFechaRegistro'); }*/


            if (HorasSeleccionadas[0] == null) {
                horaA = null;
            }
            else { horaA = HorasSeleccionadas[0] + ':00';  }


            /*  HorasSeleccionadasBackup = HorasSeleccionadas;*/

            if (parseInt(r.get('GrupoMedicamento')) == countG & countG != 0) { }

            
            var horaCorte = null;

            if (r.get('CodigoOA') == null || r.get('CodigoOA') == '') {
                horaCorte = new Date();

            } else { horaCorte = new Date(r.get('CodigoOA')); }

            if (r.get('Estado') == 4) {
                DateCut = new Date(r.get('CodigoOA'));
            }
           
            
            var HC_KardexEnfermeriaDetalle = {
                IdPaciente: r.get('IdPaciente'),
                EpisodioClinico: r.get('EpisodioClinico'),
                IdEpisodioAtencion: r.get('IdEpisodioAtencion'),
                Secuencia: r.get('Secuencia'),
                HoraInicioProg: App.txtFecha1.getValue(),
               /* FechaCorte: DateCut,/*new Date(r.get('CodigoOA')),*/
                HorasSuministradas: horasSum,/* /*HorasSeleccionadas.toString(),*/
                EnfermeraSuministro: AgentSum,
                Linea: r.get('Linea'),
                Familia: r.get('Familia'),
                SubFamilia: r.get('SubFamilia'),
                Fecha: App.txtFecha1.getValue(),
                /*CodigoOA: Selecionados[i].get('CodigoOA'),*/
                /*FechaCreacion: Selecionados[i].get('FechaCreacion'),*/
                CodigoComponente: r.get('CodigoComponente'),
                GrupoMedicamento: r.get('GrupoMedicamento'),
                UsuarioModificacion: horaA,
                /* Cantidad: r.get('CodigoOA'),*/
               /* Observacion: horasSum,*/

                Estado: newEstado,/*r.get('Estado'),*/
                Accion: r.get('Accion'),
                Version: r.get('GrupoMedicamento')
            };
            ArrayList1.push(HC_KardexEnfermeriaDetalle);

            if (parseInt(r.get('GrupoMedicamento')) == grupoAnt) {
                countG = 1;
            }


        });

        if(isError==false){
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Save_Kardex"))',
            params: {
                selectionArray1: ArrayList0,
                selectionArray2: ArrayList1
                /*Evento: 'Server'*/
            }
        });

        parent.App.txtRecargarX.setValue('RELOAD');
        }

    }
    /* }*/

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "ProgramarKardex")';
        } else {
            window.location.href = '@Url.Action("HCEReportesViewReceta", "ProgramarKardex")';
        }
    }

    function setImpresion(store) {
        App.btnImpresion.setVisible(false);
        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0) {

            App.btnImpresion.setVisible(true);
        }
    }

    function deleteActual(grid, record) {
        seleccRecordActual = record;

        if (record != null) {
            if (record.data.TipoComponente == "M") {
                setIndicaCambios(true);
                var store = Ext.getStore('StoreTasks');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Delete_SolicitudDetalle"))',
                    params: {
                        accion: 'DELETE',
                        codigo: record.data.CodigoComponente,
                        secuencia: record.data.Secuencia
                    }
                });
                store.remove(record);
                record = null;

            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'No se puede eliminar los medicamentos recetados por el médico',
                        tipo: 'WARNING'
                    }
                });
                record = null;
            }

        }
    };


    function ObtenerHoras(ev) {
        App.StoreTasks.each(function (r) {
            var horainicio = '--:--';
            /*if (r.get('Medico') != null & r.get('Medico') != '') {
                var cadena = (r.get('Medico')).split(',');*/
            if (r.get('Comentario') != null & r.get('Comentario') != '') {
                var cadena = (r.get('Comentario')).split(',');

                /* if (cadena.length>0){*/
                /*var ultimo = '';
                var ultimoentero = 0;*/
                /* var horainicio = '--:--';*/
                var numInicio = '';
               /* if (cadena.length > 0) {
                    if (cadena[0].length < 2) {

                        r.set('HI', horainicio);
                    }
                    else {
                        horainicio = cadena[0] + ':00';
                        r.set('HI', horainicio);
                    }
                };*/
                /* else { r.set('HI', horainicio); }*/

                for (var x = 0, longitud = cadena.length ; x < longitud; x++) {
                    var numero = '';

                    if (cadena[x].length < 2) {
                        numero = '0' + cadena[x];
                    }
                    else { numero = cadena[x]; }

                    r.set(numero, true);
                   /* r.style = "background-color:green;";*/
                    /* ultimo = numero;
                     ultimoentero = x;
                      }*/
                };

                if (r.get('Estado') == 4) {
                    r.set('CT', true);
                }

                /* if (ultimo != '')
                 {
                     var num = parseInt(ultimo)+1;
                     var i=0;
                     for (i = 1; i < num; i++)
                     {
                         var numero2 = '';

                         if (i < 10) {
                             numero2 = '0' + i;
                         }
                         else { numero2 = i.toString(); }

                         r.get(numero2).setReadOnly(true);

                     }
                 }*/

                /* else {
                     for (i = 1; i <= 24; i++) {
                         var Xnumero = '';
                         if (i < 10) {
                             Xnumero = '0' + i;
                         }

                         else { Xnumero = i; }
                         var numeroX = Xnumero.toString();
                         /* alert(r.get('19'));*/
                /*  r.set(Xnumero) = false

              }

          }*/

            }
            else {
                /* alert(':-(');*/
                /* r.set('Medico', null);*/
              /*  if (r.get('Estado') == 4) {
                    ev.setReadOnly(true);
                }*/


                r.set('HI', horainicio);
                var template = '<span style="text-align: center;"></span>';
                return Ext.String.format(template);

             /*   if (r.get('Estado') == 4) {



                        for (var x = 0, longitud = 24; x < longitud; x++) {
                            ev.setReadOnly(true);
                        };

                    r.set('CT', true);

                }*/

                /*for (i = 1; i <= 24; i++) {
                    var Xnumero = '';
                    if (i < 10) {
                        Xnumero = '0' + i;
                    }

                    else { Xnumero = i; }
                    var numeroX = Xnumero.toString();
                    /* alert(r.get('19'));*/
                /* r.set(Xnumero)= false

             }*/
            }
        });
        /* r.set('Medico', r.get('Medico'));*/
    };

    var changeIndicaHoraCheck = function (value) {

        var deshabilitadoCode = "readonly = 'true'";
        /* var template = '<span><input type="checkbox" name="cheAcceso" value="2" {1} ' +
                          deshabilitadoCode + '  ></span>';
         */
        var template = '<span style="text-align: center;"><input type="checkbox" name="cheAcceso"   style="margin-left: 0px;" value="2" {1}></span>';

        if (value == '2') {
            return Ext.String.format(template, "'" + "" + "'", 'checked = "true" ');
        }
        if (value == '1') {
            return Ext.String.format(template, "'" + "" + "'", '');
        }
        return Ext.String.format(template, "'" + "" + "'", '');
    };

    function BackDate(value) {
        var fecha2 = App.txtFecha1.getValue();
        var tiempo = fecha2.getTime();
        var fecha = new Date(tiempo - (1 * 24 * 60 * 60 * 1000));
        var dia = fecha.getDate();
        if (dia.toString().length < 2) { dia = '0' + dia.toString(); }

        var mes = fecha.getMonth() + 1;
        if (mes.toString().length < 2) { mes = '0' + mes.toString(); }

        var year = fecha.getFullYear();
        var fechanew = dia + '/' + mes + '/' + year;

        App.txtFecha1.setValue(fechanew);
        App.GrillaVisorRecetas.getStore().reload();

    };

    function NextDate(value) {
        var fecha2 = App.txtFecha1.getValue();
        var tiempo = fecha2.getTime();
        var fecha = new Date(tiempo + (1 * 24 * 60 * 60 * 1000));
        var dia = fecha.getDate();
        if (dia.toString().length < 2) { dia = '0' + dia.toString(); }

        var mes = fecha.getMonth() + 1;
        if (mes.toString().length < 2) { mes = '0' + mes.toString(); }

        var year = fecha.getFullYear();
        var fechanew = dia + '/' + mes + '/' + year;

        App.txtFecha1.setValue(fechanew);
        App.GrillaVisorRecetas.getStore().reload();
    };
        
    /*function changeGrupo(ev) {
        var template = '<span>{0}</span>';
        var templateX = '<span style="Visibility:hidden;">{0}</span>';

        if (ev.record.data.Celular == 'Ocultar') {
            return Ext.String.format(templateX, value);
        }

        if (ev.record.data.GrupoMedicamento == 0 || ev.record.data.GrupoMedicamento == null || ev.record.data.GrupoMedicamento == "") {
            return Ext.String.format(template, "Individual");
        } else {
            return Ext.String.format(template, value);
        }
    };*/

    function Sombrear(ev, numero3)
    {
        if (ev.record.data.Medico != null) {

            var cadena = (ev.record.data.Medico).split(',');

            /* if (cadena.length>0){*/
            var ultimo = '';
            var ultimoentero = cadena[cadena.length];

            for (var x = 0, longitud = cadena.length ; x < longitud; x++) {
                var numero = '';

                if (cadena[x].length < 2) {
                    numero = '0' + cadena[x];
                }
                else { numero = cadena[x]; }
                if (parseInt(numero3) == parseInt(cadena[x])) {
                    /*ev.setBorder(5);*/
                    ev.style = "background-color:green;";
                }

            };


          /*  Ext.QuickTips.register({
                target: ev.getEl().getAttribute("id"),
                trackMouse: true,
                renderTo: document.body,
                html: this.htmlTip,
                title: this.title,
                text: ev.record.data.NombreCompleto
            });

            */


        }


    }


    function Editable(ev, numero2) {
        var AgentesSuministro2 = new Array();
        var numerosTemporal2 = new Array();
        var ArregloTem2 = null;

        if (ev.record.data.Celular=='Ocultar') {
                  ev.hide();
        }


        if (ev.record.data.Comentario != null) {

            var cadena = (ev.record.data.Comentario).split(',');

            if (ev.record.data.Dosis != null) { 
                ArregloTem2 = (ev.record.data.Dosis).split(',');
                for (var x = 0; x < ArregloTem2.length; x++) {
                    var VerificaNumero = (ArregloTem2[x]).split('_');
                    var nombre = '';
                    if (VerificaNumero[0] == numero2)
                    {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("LogMessage"))',
                            params: {
                                msg: VerificaNumero[1]
                            },
                            success: function (result) {
                                nombre = result;

                                Ext.QuickTips.register({
                                    target: ev.getEl().getAttribute("id"),
                                    trackMouse: true,
                                    renderTo: document.body,
                                    html: this.htmlTip,
                                    title: this.title,
                                    text: 'Suministrado por: ' + result
                                });

                            }
                        });


                        

                    }
                }
            }

            

            
            /* if (cadena.length>0){*/
            var ultimo = '';
            var ultimoentero = cadena[cadena.length];

            for (var x = 0, longitud = cadena.length ; x < longitud; x++) {
                var numero = '';

                if (cadena[x].length < 2) {
                    numero = '0' + cadena[x];
                }
                else { numero = cadena[x]; }
                if (parseInt(numero2) == parseInt(cadena[x])) {
                    ev.setBorder(5);
                   /* ev.style = "background-color:green;";*/
                }

                if (parseInt(numero2) <= parseInt(cadena[x])) {
                    ev.setReadOnly(true);
                }
                /* }*/
                if (ev.record.data.Estado == 4 || ev.record.data.Estado == 3) {
                   /* for (var x = 0, longitud = 24; x < longitud; x++) {*/
                        ev.setReadOnly(true);

                   /* };*/
                }

            };
        }
      /*  if (ev.record.data.Estado == 4) {
            for (var x = 0, longitud = 24; x < longitud; x++) {
                ev.setReadOnly(true);

            };
        }*/
        if (ev.record.data.Estado == 4) {
            ev.setReadOnly(true);
        }

    };

    function EditableAll(ev) {

        if (ev.record.data.Estado == 4 || ev.record.data.Estado == 3) {
            for (var x = 0, longitud = 24; x < longitud; x++) {
                ev.setReadOnly(true);
            };
        }
        if (ev.record.data.Celular == 'Ocultar') {
            ev.hide();
        }
    }
    function validarDeseleccion(param1, index) { }

    var changeEst = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_YELLOW02, "No Iniciado");
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Programado");
        if (value == 3)
            return Ext.String.format(template, COLOR_GREEN01, "Realizado");
        if (value == 4)
            return Ext.String.format(template, COLOR_RED01, "Cortado");
    };


    cellTooltipRenderer = function (value, metaData, record, rowIdx, colIdx, store) {
        var column = this.headerCt.getGridColumns()[colIdx];
        var newVal;
        switch (column.xtype) {
            case 'booleancolumn':
                newVal = Ext.create('Ext.grid.column.Boolean').defaultRenderer(value);
                break;
            case 'datecolumn':
                newVal = Ext.create('Ext.grid.column.Date', { format: column.format }).defaultRenderer(value);
                break;
            case 'numbercolumn':
                newVal = Ext.create('Ext.grid.column.Number').defaultRenderer(value, column.format);
                break;
            case 'templatecolumn':
                newVal = Ext.create('Ext.grid.column.Template', { tpl: column.tpl }).defaultRenderer(value, metaData, record);
                break;
            case 'actioncolumn':
            default:
                newVal = value;
        }
      /*  metaData.tdAttr = 'data-qtip="' + newVal + '"'; */
        metaData.tdAttr = 'data-qtip="Programado por: ' + record.data.NombreCompleto + '"';



        return newVal;
    };



    </script>
}
@section cuerpo
{


    @(Html.X().Viewport().ID("ViewP")
                .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            /* l.Render.Handler = "eventoRenderForm2();";*/
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {

            regions
                .Add(
                Html.X().FormPanel()
                 .TopBar(

                    X.Toolbar()
                        .Height(30)
                            .Items(
                                    X.TextField().Hidden(true)
                                     .ID("txtEventoUnidServicioNuevoEpiHCE")
                                     .Listeners(l =>
                                     {
                                         /* l.Change.Handler = "eventoSeleccionUnidadServicio(this);";*/

                                     })
                                     ,
                /* X.Button()
                    .Text("Buscar Pacientes")
                    .Icon(Icon.PageWhiteFind)
                    .Handler("accionBuscarFiltro('FILTRO',new Date());")
                    ,*/
                                X.ToolbarFill(),
                                X.Button()
                                .ID("btnGuardar").Disabled(false)
                                .Text("Guardar").Hidden(false)
                                .Icon(Icon.PageSave)
                .Handler("guardarSolicitud();")
                                ,
                                X.Button()
                                .ID("btnImprimiraaa").Hidden(true)
                                 .Text("Imprimir")/*.Hidden(!visibleImpresion)*/
                                .Icon(Icon.Report).Handler("eventoVisorReporte('');")

                              ))

                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(600)

                .Header(false)
                .Border(true)
                .ID("formactual")
                /* .Listeners(l =>
                 {
                     l.Render.Handler = "eventoRenderForm();";

                 })*/
               .Items(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Registro de Kardex")
                //.Border(false)
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(

                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                        X.TextField()
                                     .ID("RecepcionaRecurso")
                                     .Listeners(l =>
                                     {
                                         l.Change.Handler = "InsertRow(this,'Logico');";
                                     })
                                     .Hidden(true),

                                      
                                            
                                                   X.Component().Width(45),
                                              X.Component().Width(12),
                                              X.Component().Width(17),
                                           

                                        
                                             X.Component().Width(30),
                                              X.Component().Width(30),
                                                X.Component().Width(30),
                                                 X.Component().Width(30),
                                               X.Component().Width(20),
                                               X.Component().Width(20),
                                            

                                                
                                                    X.Component().Width(30),
                                              X.Component().Width(10),


                                             
                                               
                                                    X.Component().Width(30),
                                              X.Component().Width(10)


                                              

                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                              

                                                
                                                   X.Component().Width(31),
                                              X.Component().Width(30),
                                               X.Component().Width(20),
                                            
                                                  X.Component().Width(20)

                                              

                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(


                                            
                                              X.Component().Width(30),
                                              X.Component().Width(12),
                                              X.Component().Width(19)
                                              ,
                                               X.TextField().Hidden(true)
                                                 .ID("txtPaciente").Width(250)
                //.Width(350)
                //.Disabled(true)
                                                 .ReadOnly(true)
                                               
                                                 ),

                                       Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       }).Padding(25)
                                       .Items(
                /* X.Component().Width(570),*/
                X.Component().Width(5),
                                          X.Button()
                                       .ID("btnVerReceta").Width(125)
                                        .Text("Ver Receta")
                                       .Icon(Icon.Report)
                                        .DirectEvents(de =>
                                        {
                                            // de.Click.Url = Url.Action("cerrarWindow");
                                            // de.Click.ExtraParams.Add(new Parameter("id", "WindowVisorCronologiasForm", ParameterMode.Value));

                                            de.Click.Url = Url.Action("HCEReportesPartialView");
                                            //de.Click.ExtraParams.Add(new Parameter("id", "WindowVisorCronologiasForm", ParameterMode.Value));
                                            //de.Click.Success = "onSuccess(result.data);";

                                        }),
                                            X.Component().Width(350),
                                            X.Button().ID("btnBack")/*.Text("<<")*/.Icon(Icon.RewindBlue).Width(22)
                                            .Handler("BackDate('FILTRO_X');"),
                                              X.DateField()
                                            .ID("txtFecha1").Hidden(false)
                                             .Width(110).Value(DateTime.Now),
                                             X.Button().ID("btnNext")/*.Text(">>")*/.Icon(Icon.ForwardBlue).Width(22)
                                             .Handler("NextDate('FILTRO_X');")

                                             ,
                                             X.DateField()
                                            .ID("txtFecha2").Hidden(true)
                                             .Width(110).Value(DateTime.Now)
                                             .ReadOnly(true)

                                       )
                                 )
                       ),
                        Html.X().Panel()
               .ItemID("center")

               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                // .Title("Listado de Pacientes: " + Model.CONCEPTODESCRIPCION)

                                        .Scroll(ScrollMode.Both)
                                        .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
                                        .Anchor("100% 100%")
                                        .ID("GrillaVisorRecetas")
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                        .Store(store => store.Add(
                                         Html.X().Store()
                                        .ID("StoreTasks")
                                        .AutoLoad(true)
                                        .RemoteSort(false)
                                        .IsPagingStore(true)
                                       .RemotePaging(true)
                                       .PageSize(10)
                                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                           .Url("GrillaListadoMedicamentoKardex")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                           .Root("data")
                                                           .TotalProperty("total")
                                                               .IDProperty("Secuencia")
                                                           ))))
                                        .Parameters(ps =>
                                        ps.Add(
                                                new
                                                {
                                                    start = 0,
                                                    limit = 5,
                                                    // txtHC = JRawValue.From("App.txtHC.getValue()"),
                                                    txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                    txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                    //txtHCA = JRawValue.From("App.txtHCA.getValue()"),
                                                    //txtCodigoOA = JRawValue.From("App.txtCodigoOA.getValue()"),
                                                    txtPaciente = JRawValue.From("App.txtPaciente.getValue()"),
                                                    //tipoConsulta = "CA",
                                                    //tipoConsulta = JRawValue.From("App.cmbTipoConsulta.getValue()"),
                                               //     tipoEstado = JRawValue.From("App.txtObservacion.getValue()"),
                                                    //idespecialidad = JRawValue.From("App.cmbBuscarEsp.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar")
                                                    //tipoListado = PAR_TIPOLISTADO

                                                }
                                            )
                                        )
                                        .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {
                                                           fields.Add(Html.X().ModelField().Name("IdPaciente").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioClinico"));
                                                           fields.Add(Html.X().ModelField().Name("IdEpisodioAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("Secuencia"));
                                                           fields.Add(Html.X().ModelField().Name("Linea"));
                                                           fields.Add(Html.X().ModelField().Name("Familia"));
                                                           fields.Add(Html.X().ModelField().Name("SubFamilia"));
                                                           fields.Add(Html.X().ModelField().Name("Dosis"));
                                                           fields.Add(Html.X().ModelField().Name("TipoComponente"));
                                                           fields.Add(Html.X().ModelField().Name("FechaCreacion"));
                                                           fields.Add(Html.X().ModelField().Name("GrupoMedicamento"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoComponente"));
                                                           fields.Add(Html.X().ModelField().Name("Medicamento"));
                                                           fields.Add(Html.X().ModelField().Name("Frecuencia"));
                                                           fields.Add(Html.X().ModelField().Name("Cantidad"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoOA"));
                                                           fields.Add(Html.X().ModelField().Name("Estado"));
                                                           fields.Add(Html.X().ModelField().Name("Accion"));
                                                           fields.Add(Html.X().ModelField().Name("IngresoFechaRegistro"));
                                                           fields.Add(Html.X().ModelField().Name("Medico"));
                                                           fields.Add(Html.X().ModelField().Name("Comentario"));
                                                           fields.Add(Html.X().ModelField().Name("00"));
                                                           fields.Add(Html.X().ModelField().Name("01"));
                                                           fields.Add(Html.X().ModelField().Name("02"));
                                                           fields.Add(Html.X().ModelField().Name("03"));
                                                           fields.Add(Html.X().ModelField().Name("04"));
                                                           fields.Add(Html.X().ModelField().Name("05"));
                                                           fields.Add(Html.X().ModelField().Name("06"));
                                                           fields.Add(Html.X().ModelField().Name("07"));
                                                           fields.Add(Html.X().ModelField().Name("08"));
                                                           fields.Add(Html.X().ModelField().Name("09"));
                                                           fields.Add(Html.X().ModelField().Name("10"));
                                                           fields.Add(Html.X().ModelField().Name("11"));
                                                           fields.Add(Html.X().ModelField().Name("12"));
                                                           fields.Add(Html.X().ModelField().Name("13"));
                                                           fields.Add(Html.X().ModelField().Name("14"));
                                                           fields.Add(Html.X().ModelField().Name("15"));
                                                           fields.Add(Html.X().ModelField().Name("16"));
                                                           fields.Add(Html.X().ModelField().Name("17"));
                                                           fields.Add(Html.X().ModelField().Name("18"));
                                                           fields.Add(Html.X().ModelField().Name("19"));
                                                           fields.Add(Html.X().ModelField().Name("20"));
                                                           fields.Add(Html.X().ModelField().Name("21"));
                                                           fields.Add(Html.X().ModelField().Name("22"));
                                                           fields.Add(Html.X().ModelField().Name("23"));

                                                           fields.Add(Html.X().ModelField().Name("CT"));
                                                           /* fields.Add(Html.X().ModelField().Name("NPedido"));*/
                                                           fields.Add(Html.X().ModelField().Name("Cama"));
                                                           fields.Add(Html.X().ModelField().Name("Celular"));
                                                       }
                                                       )
                                                       ))))


                                       .ColumnModel(columnModel =>
                                       {
                                           //columnModel.Columns.Add(Html.X().RowNumbererColumn());
                                           // columnModel.Columns.Add(Html.X().Column().Text("Modalidad").DataIndex("TipoPaciente").Width(80).Hidden(false).Renderer("changeModalidad").Align(Alignment.Left));

                                           columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(50).Hidden(true));


                                           columnModel.Columns.Add(Html.X().Column().Text("EpisodioClinico").DataIndex("EpisodioClinico").Width(100).Hidden(true));

                                           columnModel.Columns.Add(Html.X().Column().Text("Secuencia").DataIndex("Secuencia").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Linea").DataIndex("Linea").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Familia").DataIndex("Familia").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("SubFamilia").DataIndex("SubFamilia").Width(280).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("TipoComponente").DataIndex("TipoComponente").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Fecha<br/>Corte").DataIndex("CodigoOA").Width(80).Hidden(false));
                                           //////////////////MOSTRADOS
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(250).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio<br/>Atención").DataIndex("IdEpisodioAtencion").Width(60).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha").DataIndex("FechaCreacion").Width(85).Format("dd/MM/yyyy").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Grupo").DataIndex("GrupoMedicamento")
                                               .Renderer("changeGrupo")
                                               /* .Listeners(l => { l.AfterRender.Handler = "changeGrupo(this);"; })*/
                                               .Width(60).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdMedicamento").DataIndex("CodigoComponente").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Medicamento").DataIndex("Medicamento").Renderer("cellTooltipRenderer").Width(200));
                                           columnModel.Columns.Add(Html.X().Column().Text("Cantidad<br/>Recetada").DataIndex("Cantidad").Width(55).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EnfermeraSuministra").DataIndex("Dosis").Width(80).Hidden(true));
                                           /*columnModel.Columns.Add(
                                               Html.X().ComponentColumn().Editor(true).Text("Cantidad").DataIndex("CodigoOA").Component(
                                                             Html.X().NumberField().MinValue(0)).Width(80).Hidden(true));*/
                                           columnModel.Columns.Add(Html.X().Column().Text("Frecuencia").DataIndex("Frecuencia").Width(70).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Renderer("changeEst").Width(90).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("Accion").DataIndex("Accion").Width(80).Hidden(true));
                                           /*columnModel.Columns.Add(Html.X().Column().Text("N° Pedido").DataIndex("NPedido").Width(80));*/
                                           columnModel.Columns.Add(Html.X().Column().Text("UT").DataIndex("Cama").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Hora de<br/>inicio").DataIndex("IngresoFechaRegistro").Width(60).Format("HH:mm").Hidden(true));

                                           /* columnModel.Columns.Add(
                                                Html.X().ComponentColumn().Editor(true).Text("Hora de<br/>inicio").DataIndex("IngresoFechaRegistro").Component(
                                                              Html.X().TimeField().Format("hh:mm")).Width(80).Hidden(false));*/

                                           columnModel.Columns.Add(Html.X().Column().Text(".").DataIndex("Medico")/*.Renderer("ObtenerHoras(this)")*/.Width(1));
                                           columnModel.Columns.Add(Html.X().Column().Text(".").DataIndex("Comentario").Renderer("ObtenerHoras(this)").Width(1));

                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("00").DataIndex("00").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'00');"; l.AfterRender.Handler = "Editable(this,'00');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                               Html.X().ComponentColumn().Editor(true).Text("01").DataIndex("01").Component(
                                               Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'01');"; l.AfterRender.Handler = "Editable(this,'01');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                               Html.X().ComponentColumn().Editor(true).Text("02").DataIndex("02").Align(Alignment.Center).Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'02');"; l.AfterRender.Handler = "Editable(this,'02');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("03").DataIndex("03").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'03');"; l.AfterRender.Handler = "Editable(this,'03');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("04").DataIndex("04").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'04');"; l.AfterRender.Handler = "Editable(this,'04');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("05").DataIndex("05").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'05');"; l.AfterRender.Handler = "Editable(this,'05');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("06").DataIndex("06").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'06');"; l.AfterRender.Handler = "Editable(this,'06');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("07").DataIndex("07").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'07');"; l.AfterRender.Handler = "Editable(this,'07');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("08").DataIndex("08").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'08');"; l.AfterRender.Handler = "Editable(this,'08');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("09").DataIndex("09").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'09');"; l.AfterRender.Handler = "Editable(this,'09');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("10").DataIndex("10").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'10');"; l.AfterRender.Handler = "Editable(this,'10');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("11").DataIndex("11").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'11');"; l.AfterRender.Handler = "Editable(this,'11');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("12").DataIndex("12").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'12');"; l.AfterRender.Handler = "Editable(this,'12');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                               Html.X().ComponentColumn().Editor(true).Text("13").DataIndex("13").Component(
                                               Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'13');"; l.AfterRender.Handler = "Editable(this,'13');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("14").DataIndex("14").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'14');"; l.AfterRender.Handler = "Editable(this,'14');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("15").DataIndex("15").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'15');"; l.AfterRender.Handler = "Editable(this,'15');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("16").DataIndex("16").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'16');"; l.AfterRender.Handler = "Editable(this,'16');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("17").DataIndex("17").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'17');"; l.AfterRender.Handler = "Editable(this,'17');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("18").DataIndex("18").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'18');"; l.AfterRender.Handler = "Editable(this,'18');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("19").DataIndex("19").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'19');"; l.AfterRender.Handler = "Editable(this,'19');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("20").DataIndex("20").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'20');"; l.AfterRender.Handler = "Editable(this,'20');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("21").DataIndex("21").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'21');"; l.AfterRender.Handler = "Editable(this,'21');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("22").DataIndex("22").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'22');"; l.AfterRender.Handler = "Editable(this,'22');"; })).Width(24).Hidden(false));
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("23").DataIndex("23").Component(
                                              Html.X().Checkbox().Listeners(l => { l.BeforeRender.Handler = "Sombrear(this,'23');"; l.AfterRender.Handler = "Editable(this,'23');"; })).Width(24).Hidden(false));

                                           /* columnModel.Columns.Add(Html.X().CommandColumn().Text("Accion").Width(60).Commands(
                                                         Html.X().GridCommand()
                                                         .CommandName("Delete")
                                                         .Icon(Icon.Delete)

                                                         )
                                                         .Listeners(ls => ls.Command.Handler = "deleteActual(this.up('grid'),record);"));*/
                                           columnModel.Columns.Add(
                                              Html.X().ComponentColumn().Editor(true).Text("Cortar<br/>Tratamiento").DataIndex("CT").Component(
                                              Html.X().Checkbox().Listeners(l => { l.AfterRender.Handler = "EditableAll(this);"; })).Width(70).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Ocultar").DataIndex("Celular").Width(80).Hidden(true));

                                       })
                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                                                                         .DisplayInfo(true)
                                           //.DisplayMsg("Displaying customers {0} - {1} of {2}")
                                                                         ))
                //.View(view => view.Add(Html.X().GridView().TrackOver(false)))



                                       .Border(false)
                // .Listeners(l => l.CellClick.Handler = "addPersonaAtencion(record.data);"

                                    //  )

                                   /*.SelectionModel(
                                    X.CheckboxSelectionModel()
                                        .Mode(SelectionMode.Multi)

                                    )
                                    .Listeners(l =>
                                    {
                                        /*l.ItemClick.Handler = "validarAgrupacion(record.data, index);";
                                        l.Deselect.Handler = "validarDeseleccion(record.data, index);";/

            )}*/

                    )
                       )
                );
        }
        )
    )

    @(X.KeyNav()
                        .Target("={document.body}")
            /*.Down(a => a.Handler = "move(#{Window1}, 'down');")
            .Home(a => a.Handler = "move(#{Window1}, 'home');")*/
                                .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO',new Date());")
    )

}
