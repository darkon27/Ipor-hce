@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_FA_SolicitudProducto

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();


    var indicaVisiblePrint = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_IMPRESION;
    var indicaVisibleTB = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.INDICA_VISIBLE_TB_IMPRESION;

    var Paciente = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PacienteID;
    long EpiAtencion = (long)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioAtencion;
    int EpiClinico = (int)SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.EpisodioClinico;
    int total = Convert.ToInt32(Session["CANTIDAD"]);

    var visibleImpresion = (indicaVisiblePrint == 2 ? true : false);



    var indicaModoLectura2 = !(indicaVisibleTB == 2 ? false : true);
    var estado = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.ESTADOFORMULARIO_ACCION;

    var usuario = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.USUARIO;

    var indicaModoLectura = (estado == "NUEVO" ? false : true);
    var COLOR_RED02 = "#F05F5F";
    var COLOR_GRAY = "gray";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";

    var opcionAlmacen = Session["OPCIONALMACEN"];
    var PARTICULAR = 3;
    var CPM = 6;
    var PDS = 19;
    var PPS = 5;

}

@{
    MvcResourceManager.RegisterGlobalIcon(Icon.Accept);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyEuro);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyAdd);
}

@section cabecera
{
    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />
    <style>
        .recetado-med .x-grid-cell {
            background-color: #FAFAA3;
        }
    </style>

    <script>var myRenderer1 = function (value, metadata) {
            metadata.style = "background-color: green;";

            return value;
        };

        var myRenderer2 = function (value, metadata) {
            metadata.style = "background-color: yellow;";

            return value;
        };</script>


    <script>
    var GlobalSelect = false;
    var Valores;
    var template = '<span style="color:{0};">{1}</span>';

  //  var SecuenciaMax = '@total';

   var RecordsSelect = [];

    var seleccRecordActual = null;

    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;

    }


    function eventoRenderForm() {
        var kk = 120;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);
    }

    var ALTURADEF = screen.height;
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }

    var Valores;

    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";


    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 14px; height: 14px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 6)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 5)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 3)
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
    };



    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";




    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "VisorReceta") ';
    }


    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "VisorReceta") ';
    }



    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };



    function deleteSelected(grid) {
        var store = grid.store,
            records = grid.selModel.getSelection();

        store.remove(records);
        store.load(true);
    }





    var varTipoBuscar = "LOAD";

    var accionBuscarFiltro = function (tipo, fechaActual) {
        if (App.txtFecha1.getValue() == null) {
            App.txtFecha1.setValue(fechaActual);
        }
        if (App.txtFecha2.getValue() == null) {
            App.txtFecha2.setValue(fechaActual);
        }
        varTipoBuscar = tipo;
        App.GrillaVisorRecetas.getStore().reload();
        varTipoBuscar = 'LOAD';

    };
    function ConfirmaFinaliza() {
        Ext.Msg.confirm("Ventana de Confirmación", "¿Está seguro de finalizar Episodio Clínico?", function (btn) {
            if (btn === "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("EstadoClinico"))',
                    params: {
                        selection: "",
                        accion: "Finalizar"
                    }
                    , success: function (result) { App.GrillaVisorRecetas.getStore().reload(); }
                });
            }
        })

    }
    function showResult() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Finalizar"
            }
        });
    }


    function getFormatDate(fecha, parent) {
        var fechaForm = null;
        if (fecha != null) {
            var diaFec = fecha.getDate();
            var mmFec = fecha.getMonth() + 1;
            var yyyyFec = fecha.getFullYear();
            var diaForm = '' + diaFec;
            var mmForm = '' + mmFec;
            var yyyyForm = '' + yyyyFec;
            if (diaFec < 10) {
                diaForm = '0' + diaFec;
            }
            if (mmFec < 10) {
                mmForm = '0' + mmFec;
            }
            fechaForm = diaForm + '/' + mmForm + '/' + yyyyForm;
        }
        return fechaForm;
    };
    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };



    function mostrarAlarmaReglas(data) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }


    function chkFechasActosFiltros(fechaActual) {
        var checkAll = App.chFechas.getValue();
        if (checkAll) {
            App.txtFecha1.setDisabled(true);
            App.txtFecha1.setValue(null);
            App.txtFecha2.setDisabled(true);
            App.txtFecha2.setValue(null);
        } else {
            App.txtFecha1.setValue(fechaActual);
            App.txtFecha2.setValue(fechaActual);
            App.txtFecha1.setDisabled(false);
            App.txtFecha2.setDisabled(false);
        }
    }

    function InsertRow(valor, estado) {

        var grid = Ext.getCmp("GrillaVisorRecetas");
        if (valor.getValue() != '') {
           // SecuenciaMax = parseInt(Secuencia) + 1;
            var obj = JSON.parse(valor.getValue());

            var episodio = '';
            var linea = '';
            var familia = '';
            var subfamilia = '';
            var codigo = '';
            var DescripcionLocalVar = '';
            var TipComp = '';
            var CantidadRes = 0;
            var Recetado = 0;
            var cuenta = grid.getStore().count();
            var secuencialHCE = '';
            var indicaciones = '';
            var ingresousuario = '';
            /*var DescripcionLocalVar = obj.DescripcionLocal;*/

            if (obj.ValorCodigo1 == 'undefined' || obj.ValorCodigo1 == null) {
                DescripcionLocalVar = obj.Version;
                episodio = obj.ValorCodigo5;
                linea = obj.Linea;
                familia = obj.Familia;
                subfamilia = obj.SubFamilia;
                codigo = obj.CodigoComponente;
                CantidadRes = obj.Cantidad;
                TipComp = '';
                Recetado = 1;
                secuencialHCE = obj.UsuarioCreacion;
                indicaciones = obj.indicaciones;
                ingresousuario = obj.IngresoUsuario;
                UnidadReplicacionReferencia = obj.UnidadReplicacionReferencia;
            }
            else {
                DescripcionLocalVar = obj.DescripcionLocal;
             episodio = obj.ValorCodigo5;
             linea = obj.ValorCodigo1;
             familia = obj.ValorCodigo2;
             subfamilia = obj.ValorCodigo3;
             codigo = obj.CodigoElemento;
             TipComp = 'M';
             Recetado = 0;
             secuencialHCE = obj.UsuarioCreacion;
             indicaciones = obj.indicaciones;
             ingresousuario = obj.IngresoUsuario;
             UnidadReplicacionReferencia = obj.UnidadReplicacionReferencia;
            }
            console.log("Secuencial:",secuencialHCE);

            if (validaDuplicado(DescripcionLocalVar, grid)) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'Ya existe registro',
                        tipo: 'WARNING'
                    }
                });
                valor.setValue('');
                return;
            }

            if (grillaActiva ==null) {
                App.txtIndicaciones.setValue(obj.indicaciones);
            }

            setIndicaCambios(true);
            grid.store.insert(parseInt(cuenta), {


                /* IdEpisodioAtencion: episodio,*/
                FechaCreacion: new Date(),
                /* GrupoMedicamento: 99,*/
                RecetadoMed: Recetado,
                IdPaciente: '@Paciente',
                EpisodioClinico: '@EpiClinico',
                IdEpisodioAtencion: '@EpiAtencion',
                Secuencia: count++,
                Linea: linea,
                Familia: familia,
                SubFamilia: subfamilia,
                TipoComponente: TipComp,
                CodigoComponente: codigo,
                Version:CantidadRes,
                Medicamento: DescripcionLocalVar,
                Cantidad: CantidadRes,
                Estado: 1,
                CodigoOA: secuencialHCE,
                UsuarioCreacion: secuencialHCE,
                UsuarioModificacion: secuencialHCE,
                UnidadReplicacionReferencia: UnidadReplicacionReferencia
                /*,
                ACCION: ''*/

            });
            valor.setValue('');
            Ext.Function.defer(function () {
                grid.editingPlugin.startEditByPosition({ row: 0, column: 0 })
            }, 100);
        }

    }

    function validaDuplicado(valor) {
        var estados = false;
        App.StoreTasks.each(function (r) {
            if (trim(r.get('Medicamento')) == trim(valor)) estados = true;
        });
        // alert(estados);
        return estados;
    }

    function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }

    function confirmarAnular() {
        Ext.Msg.confirm("Confirmation", "Estas seguro de Anular la solicitud?", function (btnText) {
            if (btnText === "no") {

            } else if (btnText === "yes") {
                AnularSolicitud();
            }
        }, this);

    }

    var count = 0;

    function AnularSolicitud() {
        var grid = Ext.getCmp("GrillaVisorRecetas");
        /*var cantidad = grid.getSelectionModel().getCount();*/
        var isError = false;


        var ArrayList0 = new Array();
        var ArrayList1 = new Array();
        var temp = '';

        /*****/
        var FA_SolicitudProducto = {
            Observacion: App.txtObservacion.getValue(),
            NumeroDocumento: App.txtDocumento.getValue(),
            Estado: '4'
        };
        ArrayList0.push(FA_SolicitudProducto);

        /*for (i = 0; i <= Selecionados.length - 1; i++) {*/
        grid.store.each(function (r) {


            var FA_SolicitudProductoDetalle = {
                IdPaciente: r.get('IdPaciente'),
                EpisodioClinico: r.get('EpisodioClinico'),
                IdEpisodioAtencion: r.get('IdEpisodioAtencion'),
                Secuencia: r.get('Secuencia'),
                Linea: r.get('Linea'),
                Familia: r.get('Familia'),
                SubFamilia: r.get('SubFamilia'),
                /*CodigoOA: Selecionados[i].get('CodigoOA'),*/
                TipoComponente: r.get('TipoComponente'),
                Medicamento: r.get('Medicamento'),
                GrupoMedicamento: r.get('GrupoMedicamento'),
                CodigoComponente: r.get('CodigoComponente'),
                Cantidad: r.get('Cantidad'),
                Estado: 4,
                Accion: r.get('Accion'),
                Version: r.get('GrupoMedicamento')
            };
            ArrayList1.push(FA_SolicitudProductoDetalle);


        })
        if (isError == false) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Save_Solicitud"))',
                params: {
                    selectionArray1: ArrayList0,
                    selectionArray2: ArrayList1
                    /*Evento: 'Server'*/
                }
            });

            parent.App.txtRecargarX.setValue('RELOAD');
        }
    }





    function guardarSolicitud() {
        App.bar.setDisabled(true);

        var grid = Ext.getCmp("GrillaVisorRecetas");
        /*var cantidad = grid.getSelectionModel().getCount();*/
        var isError = false;
            var ArrayList0 = new Array();
            var ArrayList1 = new Array();
            var temp = '';

            /*****/
            var FA_SolicitudProducto = {
              indicaciones: App.txtIndicaciones.getValue(),
              Observacion: App.txtObservacion.getValue(),
              NumeroDocumento: App.txtDocumento.getValue(),
              Estado: App.txtEstado.getValue()
            };
            ArrayList0.push(FA_SolicitudProducto);

                grid.store.each(function (r) {

                /********/

                if (r.get('TipoComponente') != 'M') {
                    if (parseInt(r.get('Cantidad')) > parseInt(r.get('Version')) && parseInt(r.get('Estado')) == 1) {
                    var mensaje = 'La cantidad solicitada del medicamento ' + r.get('Medicamento') + ' no debe ser mayor a la solicitada por el médico ' + ' (Cantidad: ' + r.get('Version') + ')';
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: mensaje,
                            tipo: 'WARNING'
                        }
                    });

                    isError = true;
                    return false;
                    };

            }


                    if (parseInt(r.get('Cantidad')) < 1) {
                        var mensaje = 'La cantidad solicitada del material médico ' + r.get('Medicamento') +  ' debe ser mayor a 0';
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("showMensajeNotify"))',
                            params: {
                                titulo: 'Advertencia',
                                message: mensaje,
                                tipo: 'WARNING'
                            }
                        });

                        isError = true;
                        return false;
                    };
                /******/
                var FA_SolicitudProductoDetalle = {
                    IdPaciente: r.get('IdPaciente'),
                    EpisodioClinico: r.get('EpisodioClinico'),
                    IdEpisodioAtencion: r.get('IdEpisodioAtencion'),
                    Secuencia: r.get('Secuencia'),
                    Linea: r.get('Linea'),
                    Familia: r.get('Familia'),
                    SubFamilia: r.get('SubFamilia'),
                    /*CodigoOA: Selecionados[i].get('CodigoOA'),*/
                    TipoComponente: r.get('TipoComponente'),
                    Medicamento: r.get('Medicamento'),
                    GrupoMedicamento: r.get('GrupoMedicamento'),
                    CodigoComponente: r.get('CodigoComponente'),
                    Cantidad: r.get('Cantidad'),
                    Estado: r.get('Estado'),
                    Accion: r.get('Accion'),
                    Version: r.get('Version'),
                    UsuarioCreacion: r.get('CodigoOA'),
                    IdPacienteReferencia: r.get('RecetadoMed'),
                    IngresoUsuario: r.get('IngresoUsuario'),
                    UsuarioModificacion: r.get('UsuarioModificacion')

                };
                ArrayList1.push(FA_SolicitudProductoDetalle);


            })
            if (isError == false) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Save_Solicitud"))',
                    params: {
                        selectionArray1: ArrayList0,
                        selectionArray2: ArrayList1
                        /*Evento: 'Server'*/
                    }
                });

                parent.App.txtRecargarX.setValue('RELOAD');
            }
        }
   /* }*/

    function eventoVisorReporte(param1) {
        if (param1 == 'HC') {
            window.location.href = '@Url.Action("HCEReportesView_total", "VisorReceta")';
        } else {
            window.location.href = '@Url.Action("HCEReportesView", "VisorReceta")';
        }
    }

    function setImpresion(store) {
        App.btnImpresion.setVisible(false);
        var contar = 0;
        if (store != null) {
            store.each(function (r) {
                contar++;
            });
        }
        if (contar > 0) {

            App.btnImpresion.setVisible(true);
        }
    }

    function deleteActual(grid, record) {
        seleccRecordActual = record;

        if (record != null) {
                setIndicaCambios(true);
                var store = Ext.getStore('StoreTasks');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Delete_SolicitudDetalle"))',
                    params: {
                        accion: 'DELETE',
                        codigo: record.data.CodigoComponente,
                        secuencia: record.data.Secuencia
                    }
                });
                store.remove(record);
                record = null;

        }
    };

        function Deshabilita(record, index) {

            var c = record.get('Estado');
            if (c != 1) {

                return 'x-trigger-noedit'/*'disabled-row'*/
            }
        };
        function Recetados() {
            /*var RecordsSelect = [];*/

            App.StoreTasks.each(function (r) {
                if (r.get('TipoComponente') != "M") {

                    r.set('RecetadoMed', 1);

                }
                if (r.get('Estado') != 1) {
                    /*var idx= App.GrillaVisorRecetas.getView().findRowIndex(r.target);
                    var row =  App.GrillaVisorRecetas.getStore().getAt(idx);
                    row.style.backgroundColor = 'red';*/
                    /*r.set('RecetadoMed', 1);*/
                  /*  App.GrillaVisorRecetas.getView().getSelectionModel().select(r.index, true, false);*/
                    /* /*alert(r.index);*/
                 /*   RecordsSelect.push(r.index);*/
                   /* r.get('CodigoOA').setDisabled(true);/* setReadOnly(true);/**/
                     /*App.GrillaVisorRecetas.getPlugin('rowEditing').editor.form.findField('CodigoOA').disable();*/
                }
            });

        }


        var changeEstado = function (value) {
            var template = '<span style="color:{0};">{1}</span>';
            if (value == 1)
                return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
            if (value == 2)
                return Ext.String.format(template, COLOR_BLUE01, "Solicitado");
            if (value == 3)
                return Ext.String.format(template, COLOR_GREEN01, "Despachado");
            if (value == 4)
                return Ext.String.format(template, COLOR_RED01, "Anulado");
        };

        var changeModalidad2 = function (value) {
            var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 11px; height: 11px; ">&nbsp;</div>';
            var template = '<span style="color:{0};">{1}</span>';

            if (value == 1)
                return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
        };
/*****/
        function validarAgrupacion(param1, index) {
            var grid = Ext.getCmp("GrillaVisorRecetas");
            if (RecordsSelect.length > 0) {

                if (param1.Estado != 1)
                {

                    grid.getSelectionModel().select(index, true, false);
                   /* alert("No puede deseleccionar un medicamento con este estado");*/
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("showMensajeNotify"))',
                        params: {
                            titulo: 'Advertencia',
                            message: 'No puede deseleccionar un medicamento con este estado',
                            tipo: 'WARNING'
                        }
                    });
                }
                for (var x = 0; x < RecordsSelect.length; x++) {
                    App.GrillaVisorRecetas.getView().getSelectionModel().select(RecordsSelect[x], true, false);
                }
            }

        }
        /*****/
        function validaSeleccion(param1, index) {
            if (RecordsSelect.length > 0) {

                if (param1.Estado != 1)
                {
                    return false;
                }
            }

        }
        function editarCantidad(ev)
        {
            if (ev.record.data.Estado > 1 || ev.record.data.RecetadoMed == 1){
            ev.setReadOnly(true);

            }

        }


        function eventoagregarmedicamentos() {

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("AddMedicamentoVis"))',
                params: {
                    MODO: 'VER'
                }
            });

        };

        cellTooltipRenderer = function (value, metaData, record, rowIdx, colIdx, store) {
            var column = this.headerCt.getGridColumns()[colIdx];
            var newVal;
            switch (column.xtype) {
                case 'booleancolumn':
                    newVal = Ext.create('Ext.grid.column.Boolean').defaultRenderer(value);
                    break;
                case 'datecolumn':
                    newVal = Ext.create('Ext.grid.column.Date', { format: column.format }).defaultRenderer(value);
                    break;
                case 'numbercolumn':
                    newVal = Ext.create('Ext.grid.column.Number').defaultRenderer(value, column.format);
                    break;
                case 'templatecolumn':
                    newVal = Ext.create('Ext.grid.column.Template', { tpl: column.tpl }).defaultRenderer(value, metaData, record);
                    break;
                case 'actioncolumn':
                default:
                    newVal = value;
            }
            metaData.tdAttr = 'data-qtip="' + newVal + '"';
            return newVal;
        };
                function eventoCancelar(form) {

            App.bar.setDisabled(true);
            var reload = true;
            if (reload) {
                parent.App.txtRecargarX.setValue('RELOAD');
                // beforeSave(form);
            }

        };

        var grillaActiva = null;
        function eventoActivarSeleccion(btnComponente, btnComponenteMostrar, idGrillaActiva) {

            if (btnComponente == App.btnSelDesactivo0) {
                parent.App.cbLinea.setDisabled(true);
                parent.App.cbAlmacen.setDisabled(false);

            } else {
                parent.App.cbLinea.setDisabled(false);
                parent.App.cbAlmacen.setDisabled(false);

            }

            App.btnSelDesactivo0.setVisible(true);
            App.btnSelActivo0.setVisible(false);
            btnComponente.setVisible(false);
            btnComponenteMostrar.setVisible(true);
            grillaActiva = idGrillaActiva;
            parent.App.East1.expand();

            parent.App.cbLinea.setValue("13");
            parent.App.cbAlmacen.setValue('@opcionAlmacen')
            parent.App.StoreBuscarServicios.reload()


        };

        function eventoDesactivarSeleccion(btnComponente, btnComponenteMostrar) {
            btnComponente.setVisible(false);

            if (btnComponente == App.btnSelDesactivo0) {
                parent.App.cbLinea.setDisabled(false);

            } else {
                parent.App.cbLinea.setDisabled(true);
            }

            btnComponenteMostrar.setVisible(true);
            grillaActiva = null;
            parent.App.East1.collapse();
        };

    </script>
}
@section cuerpo
{


    @(Html.X().Viewport().ID("ViewportXD")
                .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            /* l.Render.Handler = "eventoRenderForm2();";*/
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {

            regions
                .Add(
                Html.X().FormPanel()
                 .TopBar(

                    X.Toolbar().ID("bar")
                        .Height(30)
                            .Items(
                                    X.TextField().Hidden(true)
                                     .ID("txtEventoUnidServicioNuevoEpiHCE")
                                     .Listeners(l =>
                                     {
                                         /* l.Change.Handler = "eventoSeleccionUnidadServicio(this);";*/

                                     })
                                     ,
                                X.ToolbarFill(),
                                X.Button()
                                .ID("btnAnular").Disabled(false)
                                .Text("Anular").Hidden(true)
                                .Icon(Icon.Decline)
                .Handler("confirmarAnular();")
                                ,
                                X.Button()
                                .ID("btnGuardar").Disabled(false)
                                .Text("Guardar").Hidden(false)
                                .Icon(Icon.PageSave)
                .Handler("guardarSolicitud();")
                                ,
                                 X.Button()
                                .Text("Cancelar")
                                .ID("btnCancel").Hidden(false)
                                .Icon(Icon.Cancel)
                                .OnClientClick("eventoCancelar(this.up('form'));")
                                ,
                                X.Button()
                                .ID("btnImprimir").Disabled(false)
                                 .Text("Imprimir").Hidden(!indicaModoLectura)
                                .Icon(Icon.Report).Handler("eventoVisorReporte('');")

                              ))

                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(600)

                .Header(false)
                .Border(true)
                .ID("formactual")
                /* .Listeners(l =>
                 {
                     l.Render.Handler = "eventoRenderForm();";

                 })*/
               .Items(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Datos")
                //.Border(false)
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(

                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                        X.TextField()
                                     .ID("RecepcionaRecurso")
                                     .Listeners(l =>
                                     {
                                         l.Change.Handler = "InsertRow(this,'Logico');";
                                     })
                                     .Hidden(true),

                                           X.Label()
                                             .Text("Fecha:")
                                             .ID("labelFechas"),
                                               X.Component().Width(30),
                                              X.Component().Width(32),
                                               X.Component().Width(33)
                                             ,
                                           X.DateField()
                                            .ID("txtFecha1")
                                             .Width(110).Value(DateTime.Now)
                                             .ReadOnly(true),
                                           X.DateField()
                                            .ID("txtFecha2").Hidden(true)
                                             .Width(110).Value(DateTime.Now)
                                             .ReadOnly(true),
                                             X.Component().Width(30),
                                              X.Component().Width(30),
                                                X.Component().Width(30),
                                                 X.Component().Width(30),
                                               X.Component().Width(20),
                                               X.Component().Width(20),
                                             X.Label()
                                                 .Text("N° Documento:")
                                                 .ID("lblDocumento")

                                                 ,
                                                    X.Component().Width(30),
                                              X.Component().Width(10),


                                               X.TextField()
                                                 .ID("txtDocumento")
                //.Width(350)
                                                 .ReadOnly(true),
                                                 X.Label()
                                                 .Text("ID Solicitud :")
                                                 .ID("lblidSolicitud").Hidden(true)

                                                 ,
                                                    X.Component().Width(30),
                                              X.Component().Width(10),


                                               X.TextField()
                                                 .ID("txtIdSolicitudProducto").Hidden(true)                //.Width(350)
                                                 .ReadOnly(true)

                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                               X.Label()
                                                 .Text("Paciente:")
                                                 .ID("lblPaciente")

                                                ,
                                                   X.Component().Width(30),
                                              X.Component().Width(30),
                                               X.Component().Width(20),
                                               X.TextField()
                                                 .ID("txtPaciente").Width(250)
                //.Width(350)
                //.Disabled(true)
                                                 .ReadOnly(true)

                                                 ,
                                                  X.Component().Width(20)

                                                 ,
                                                   X.Label()
                                                 .Text("CodigoOA:")
                                                 .ID("lblOA")

                                                ,
                                                   X.Component().Width(60),
                                                X.Component().Width(10),
                                               X.TextField()
                                                 .ID("txtCodigoOA")
                //.Width(350)
                //.Disabled(true)
                                                 .ReadOnly(true)

                                                  ,
                                                   X.Component().Width(60),
                                                X.Component().Width(8),
                                               X.TextField().Hidden(true)
                                                 .ID("txtEstado").Width(20)

                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(


                                              X.Label()
                                                 .Text("Observacion:")
                                                 .ID("lblObservacion")
                                                 ,
                                              X.Component().Width(30),
                                              X.Component().Width(12),
                                              X.Component().Width(19),

                                               X.TextArea()
                                                 .ID("txtObservacion")
                                                 .Width(539)
                                                 ),

                                             Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(


                                              X.Label()
                                                 .Text("Indicaciones Médicas:")
                                                 .ID("lblIndicaciones")
                                                 ,
                                              X.Component().Width(15),
                //X.Component().Width(12),
                //X.Component().Width(19),

                                               X.TextArea()
                                                 .ID("txtIndicaciones")
                                                 .Width(539).MaxLength(1000)
                                                 ),

                                       Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                          X.Component().Width(450),
                                           X.Button().ID("btnagregarM").Text("Añadir Medicamentos").ToolTip("Añadir Medicamentos desde receta").Icon(Icon.Add).Width(150).Handler("eventoagregarmedicamentos();").Disabled(false),

                                            Html.X().Button().ID("btnSelDesactivo0")
                                                                             .Html("<b>Catálogo</b>")
                                                                             .Icon(Icon.PluginDisabled).ToolTip("Añadir Material médico desde Catálogo")
                                                                             .Handler("eventoActivarSeleccion(App.btnSelDesactivo0, App.btnSelActivo0, 'grillaExamenes0')"),
                                                                             Html.X().Button().ID("btnSelActivo0")
                                                                             .Html("<b>Catálogo</b>")
                                                                             .Icon(Icon.PluginGo).Hidden(true)
                                                                             .Handler("eventoDesactivarSeleccion(App.btnSelActivo0, App.btnSelDesactivo0)")

                                       )
                                 )
                       ),
                        Html.X().Panel()
               .ItemID("center")

               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                // .Title("Listado de Pacientes: " + Model.CONCEPTODESCRIPCION)

                                        .Scroll(ScrollMode.Both)
                                        .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
                                        .Anchor("100% 100%")
                                        .ID("GrillaVisorRecetas")
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                        .Store(store => store.Add(
                                         Html.X().Store()
                                        .ID("StoreTasks")
                                        .AutoLoad(true)
                                        .RemoteSort(false)
                                        .IsPagingStore(true)
                                       .RemotePaging(false)
                                       .PageSize(10)
                                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                           .Url("GrillaListadoMedicamentoPacientes")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                           .Root("data")
                                                           .TotalProperty("total")
                                                               .IDProperty("Secuencia")
                                                           ))))
                                        .Parameters(ps =>
                                        ps.Add(
                                                new
                                                {
                                                    start = 0,
                                                    limit = 10,

                                                    txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                    txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                    txtPaciente = JRawValue.From("App.txtPaciente.getValue()"),
                                                    tipoEstado = JRawValue.From("App.txtObservacion.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar")
                                                    //tipoListado = PAR_TIPOLISTADO

                                                }
                                            )
                                        ).Listeners(l => { l.Load.Handler = "Recetados();"; })
                                        .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {
                                                           fields.Add(Html.X().ModelField().Name("IdPaciente").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioClinico"));
                                                           fields.Add(Html.X().ModelField().Name("IdEpisodioAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("Secuencia"));
                                                           fields.Add(Html.X().ModelField().Name("Linea"));
                                                           fields.Add(Html.X().ModelField().Name("Familia"));
                                                           fields.Add(Html.X().ModelField().Name("SubFamilia"));
                                                           fields.Add(Html.X().ModelField().Name("TipoComponente"));
                                                           fields.Add(Html.X().ModelField().Name("FechaCreacion"));
                                                           fields.Add(Html.X().ModelField().Name("GrupoMedicamento"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoComponente"));
                                                           fields.Add(Html.X().ModelField().Name("Medicamento"));
                                                           fields.Add(Html.X().ModelField().Name("UnidadReplicacionReferencia"));
                                                           fields.Add(Html.X().ModelField().Name("Cantidad"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoOA"));
                                                           fields.Add(Html.X().ModelField().Name("Estado"));
                                                           fields.Add(Html.X().ModelField().Name("Accion"));
                                                           fields.Add(Html.X().ModelField().Name("RecetadoMed"));
                                                           fields.Add(Html.X().ModelField().Name("Version"));
                                                           fields.Add(Html.X().ModelField().Name("indicaciones"));
                                                           fields.Add(Html.X().ModelField().Name("UsuarioModificacion"));
                                                           fields.Add(Html.X().ModelField().Name("UsuarioCreacion"));
                                                       }
                                                       )
                                                       ))))

                                       .ColumnModel(columnModel =>
                                       {
                                           columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EpisodioClinico").DataIndex("EpisodioClinico").Width(100).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Recetado<br/>Médico").DataIndex("RecetadoMed").Renderer("changeModalidad2").Width(55).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("Secuencia").DataIndex("Secuencia").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Linea").DataIndex("Linea").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Familia").DataIndex("Familia").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("SubFamilia").DataIndex("SubFamilia").Width(280).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("UsuarioModificacion").DataIndex("UsuarioModificacion").Width(280).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("TipoComponente").DataIndex("TipoComponente").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("SecuencialHCE").DataIndex("UsuarioModificacion").Width(80).Hidden(true));                                           //////////////////MOSTRADOS
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(250).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio<br/>Atención").DataIndex("IdEpisodioAtencion").Width(60));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha").DataIndex("FechaCreacion").Width(85).Format("dd/MM/yyyy"));
                                           columnModel.Columns.Add(Html.X().Column().Text("Grupo").DataIndex("GrupoMedicamento").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdMedicamento").DataIndex("CodigoComponente").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Medicamento").DataIndex("Medicamento").Renderer("cellTooltipRenderer").Width(300));
                                           columnModel.Columns.Add(Html.X().Column().Text("UsuarioCreacion").DataIndex("UsuarioCreacion").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Indicación").DataIndex("UnidadReplicacionReferencia").Renderer("cellTooltipRenderer").Width(300));

                                           columnModel.Columns.Add(Html.X().Column().Text("Cantidad<br/>Recetada").DataIndex("Cantidad").Width(55).Hidden(false));
                                           columnModel.Columns.Add(
                                               Html.X().ComponentColumn().Editor(true).Text("Cantidad<br/>Solicitada").DataIndex("Cantidad").Component(
                                                             Html.X().NumberField().MinValue(1).Listeners(l => { l.AfterRender.Handler = "editarCantidad(this);"; })
                                                             ).Width(70).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Renderer("changeEstado").Width(70).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("Accion").DataIndex("Accion").Width(80).Hidden(true));
                                          columnModel.Columns.Add(Html.X().CommandColumn().Text("Accion").Width(60).Commands(
                                                        Html.X().GridCommand()
                                                        .CommandName("Delete")
                                                        .Icon(Icon.Delete).ToolTip(tt => tt.Text = "Eliminar")
                                                        )
                                                        .Listeners(ls => ls.Command.Handler = "if (command == 'Delete') deleteActual(this.up('grid'),record);"));


                                       })
                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                                           .DisplayInfo(true)

                                                                         ))

                                       .Border(false)

                                    .ViewConfig(X.GridView().GetRowClass(l => { l.Handler = "return Deshabilita(record, index);"; }))

                                    .Listeners(l =>
                                    {
                                        /*  l.Deselect.Handler = "validarAgrupacion(record.data, index);";*/
                                        /*l.BeforeSelect.Handler = "validaSeleccion(record.data, index);";*/
                                        /* l.Deselect.*/
                                    }
            )

                    )
                       )
                );
        }
        )
    )
    @(X.KeyNav()
                        .Target("={document.body}")
                                .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO',new Date());")
    )

}
