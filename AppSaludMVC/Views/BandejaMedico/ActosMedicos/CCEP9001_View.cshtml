@model SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL
@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();


    var PAR_CODTRABAJADOR_LISTADO = "" + (AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("CODTRABMED") != null ?
        AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("CODTRABMED") : "08");

    var PARAM_ESPECIALIDADSELECC = (AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("ESPECIALIDADHCE_SEL") != null ?
    (int)AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("ESPECIALIDADHCE_SEL") : 0);


    var IndicaActivo1 = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.PERFILADMIN;
    SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.COD_BANDEJA = "AMBULATORIO";
    var IndicaActivo = (IndicaActivo1 == -2 ? false : true);
    var PAR_TIPOLISTADO = "MED_AMBULATORIO";


    var COLOR_RED02 = "#F05F5F";
    var COLOR_GRAY = "gray";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";
    var COLOR_MARRON = "#61210B";



    var PARTICULAR = 3;
    var CPM = 6;
    var PDS = 19;
    var PPS = 5;

}
<a href="~/Views/BandejaMedico/ActosMedicos/CCEP9001_View.cshtml">~/Views/BandejaMedico/ActosMedicos/CCEP9001_View.cshtml</a>
@{
    MvcResourceManager.RegisterGlobalIcon(Icon.Accept);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyEuro);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyAdd);
}

@section cabecera
{

    <link rel="stylesheet" href="@Url.Content("~/resources/css/main.css")" />

    <style>
        html body {
            padding: 0px;
            background: none;
            background: none;
            background: none;
            background-attachment: fixed;
            background-position: center;
            font-family: tahoma,verdana,sans-serif;
            background-color: #ffffff;
        }
    </style>

    <script>
        var myRenderer1 = function (value, metadata) {
            metadata.style = "background-color: green;";

            return value;
        };

        var myRenderer2 = function (value, metadata) {
            metadata.style = "background-color: yellow;";

            return value;
        };
    </script>





    <script>
    var GlobalSelect = false;
    var Valores;
    var template = '<span style="color:{0};">{1}</span>';



    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;

    }


    function LoadVisitas(modo) {
        if (seleccionDataActual != null) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ListadoAtencionesVisita"))',
                params: {
                    MODO: modo,
                    paciente: seleccionDataActual.IdPaciente,
                    nombre: seleccionDataActual.PacienteNombre,
                    codigooa: seleccionDataActual.CodigoOA,
                    idoa: seleccionDataActual.IdOrdenAtencion,
                    episodioclinico: seleccionDataActual.EpisodioClinico,
                    episodioatencion: seleccionDataActual.EpisodioAtencion
                    , tipoListado: '@(PAR_TIPOLISTADO)'
                }
            });
        }
    }

    function LoadVisitasAnuladas(modo) {
        if (seleccionDataActual != null) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("AnularAtenciones"))',
                params: {
                    MODO: modo,
                    paciente: seleccionDataActual.IdPaciente,
                    nombre: seleccionDataActual.PacienteNombre,
                    codigooa: seleccionDataActual.CodigoOA,
                    idoa: seleccionDataActual.IdOrdenAtencion,
                    episodioclinico: seleccionDataActual.EpisodioClinico,
                    episodioatencion: seleccionDataActual.EpisodioAtencion,
                    idepisodioatencion: seleccionDataActual.IdEpisodioAtencion,
                    lineaoa: seleccionDataActual.LineaOrdenAtencion,
                    tipoatencion: seleccionDataActual.TipoAtencion,
                    tipointerconsulta: seleccionDataActual.IdProcedimiento,
                    tipotrabrequerido: '@(PAR_CODTRABAJADOR_LISTADO)'
                 , tipoListado: '@(PAR_TIPOLISTADO)'
                }
            });
        }
    }

    function LoadllamadoVisita(modo) {
        //alert('llego ::' + modo);

        if (seleccionDataActual != null) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ControllerllamadoVisita"))',
                params: {
                    MODO: modo,
                    paciente: seleccionDataActual.IdPaciente,
                    idcita: seleccionDataActual.IdCita,
                    nombre: seleccionDataActual.PacienteNombre,
                    codigooa: seleccionDataActual.CodigoOA,
                    idoa: seleccionDataActual.IdOrdenAtencion,
                    episodioclinico: seleccionDataActual.EpisodioClinico,
                    episodioatencion: seleccionDataActual.EpisodioAtencion,
                    idepisodioatencion: seleccionDataActual.IdEpisodioAtencion,
                    lineaoa: seleccionDataActual.LineaOrdenAtencion,
                    tipoatencion: seleccionDataActual.TipoAtencion,
                    tipointerconsulta: seleccionDataActual.IdProcedimiento,
                    tipotrabrequerido: '@(PAR_CODTRABAJADOR_LISTADO)'
                 , tipoListado: '@(PAR_TIPOLISTADO)'
                }
            });
        }
    }


    function AbrirHistoria() {


        window.open('/HistoriaClinicaWest/Index', '_blank');
    }

    function LoadUrl() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ListadoAtenciones"))',
            params: {
                MODO: "Consulta",
                paciente: seleccionDataActual.IdPaciente,
                nombre: seleccionDataActual.PacienteNombre,
                codigooa: seleccionDataActual.CodigoOA
            }
        });
        StoreTasks.de
    }
    function ActivaUrl(valores) {
        if (GlobalSelect == true) {
            switch (valores) {
                case "N":
                    parent.window.location.href = ' @Url.Action("Index", "HClinica") ';
                    break;
                case "C":
                    LoadUrl();
                    break;
                case "M":
                    parent.window.location.href = ' @Url.Action("Index", "HClinica") ';
                    break;
                case "V":
                    parent.window.location.href = ' @Url.Action("Index", "HClinica") ';
                    break;
                case "A":
                    parent.window.location.href = ' @Url.Action("Index", "HClinica") ';
                    break;
                case "F":
                    break;
                default:
            }

        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe seleccionar un paciente.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    }

    function eventoRenderForm() {
        var kk = 140;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);
        App.txtMedico.setValue('@SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.MedicoNombre');

    }

    var ALTURADEF = screen.height;
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }

    var Valores;

    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";

    var changeEstado = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 'CC')
            return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
        if (value == 'CA')
            return Ext.String.format(template, COLOR_BLUE01, "Atendido");
        if (value == 'AN')
            return Ext.String.format(template, COLOR_RED01, "Anulado");
        if (value == 'FI')
            return Ext.String.format(template, COLOR_GREEN01, "Firmado");

    };



    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 14px; height: 14px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 2)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");



        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 4)
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "Sin Seguro");
    };


    var COLOR_MARRON = "#61210B";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";
    var COLOR_NARANJA = "#FE642E";


    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };


    var changeEstadoOA = function (value, metadata) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 0) {
            return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
        }
        if (value == 1)
            return Ext.String.format(template, COLOR_MARRON, "Programado");

        if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01, "En Atención");

        if (value == 3)
            return Ext.String.format(template, COLOR_BLUE01, "Atendido");

        if (value == 4)
            return Ext.String.format(template, COLOR_RED01, "Anulado");

        if (value == 5)
            return Ext.String.format(template, COLOR_NARANJA, "Terminado");

        if (value == 8) {
            return Ext.String.format(template, COLOR_BLUE01, "Atendido");
        }
    };

    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "HClinica") ';
    }


    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "HClinica") ';
    }



    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };



    function deleteSelected(grid) {
        var store = grid.store,
            records = grid.selModel.getSelection();

        store.remove(records);
        store.load(true);
    }







    var RecordSelector = {
        add: function (source, destination) {
            source = source || App.GridPanel1;
            destination = destination || App.GridPanel2;
            if (source.getSelectionModel().hasSelection()) {
                var records = source.getSelectionModel().getSelection();
                //alert(records[0].data);
                alert(record.get('RecordID'));

            }
        }
    };


    var varTipoBuscar = "LOAD";

    var accionBuscarFiltro = function (tipo, fechaActual) {
        if (App.txtFecha1.getValue() == null) {
            App.txtFecha1.setValue(fechaActual);
        }
        if (App.txtFecha2.getValue() == null) {
            App.txtFecha2.setValue(fechaActual);
        }
        varTipoBuscar = tipo;
        App.GridPanel1.getStore().reload();
        varTipoBuscar = 'LOAD';

    };
    function ConfirmaFinaliza() {
        Ext.Msg.confirm("Ventana de Confirmación", "¿Está seguro de finalizar Episodio Clínico?", function (btn) {
            if (btn === "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("EstadoClinico"))',
                    params: {
                        selection: "",
                        accion: "Finalizar"
                    }
                    , success: function (result) { App.GridPanel1.getStore().reload(); }
                });
            }
        })

    }
    function showResult() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Finalizar"
            }
        });
    }
    function VistaAtencion() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Vista"
            }
        });
    }

        function addPersonaAtencion(data) {
            console.log("clic");
        var model = data;
        if (model != null) {
            if (model.IdPaciente > 0) {
                seleccionDataActual = model;
                GlobalSelect = true;
            }

            // Inicio 20180902 Jordan Mateo
            var pacienteN = model.PacienteNombre;
            var dir = model.Direccion;
            var existe1 = 0;

            for (var i = 0; i < pacienteN.length - 1; i++) {
                if (pacienteN[i].includes('>') == true || pacienteN[i].includes('<') == true) {
                    existe1 = 1;
                    break;
                }
            }

            if (dir !== null) {
                for (var i = 0; i < dir.length - 1; i++) {
                    if (dir[i].includes('>') == true || dir[i].includes('<') == true) {
                        existe1 = 1;
                        break;
                    }
                }
            }

            if (existe1 == 1) {
                mensaje = Ext.Msg.show({
                    title: "Advertencia",
                    msg: "Error de registro de Nombre o Dirección del paciente.   ",
                    icon: Ext.Msg.Alert,
                    minWidth: 200
                });
                setTimeout("mensaje.hide()", 2000);
                return true;
            }
            // Fin
            var ArrayList = new Array();

            var VW_ATENCIONPACIENTE_GENERAL = {
                Modalidad: model.Modalidad,
                tipoListado: model.tipoListado,
                IdPaciente: model.IdPaciente,
                CitaTipo: model.CitaTipo,
                CitaFecha: model.CitaFecha,
                CitaHora: model.CitaHora,
                FechaFin: model.FechaFin,
                FechaInicio: model.FechaInicio,
                Origen: model.Origen,
                NombreEspecialidad: model.NombreEspecialidad,
                CodigoOA: model.CodigoOA,
                TipoPacienteNombre: model.TipoPacienteNombre,
                CodigoHC: model.CodigoHC,
                PacienteNombre: model.PacienteNombre,
                EstadoEpiAtencion: model.EstadoEpiAtencion,
                MedicoNombre: model.MedicoNombre,
                Comentarios: model.IdMedico,/* model.Comentarios,*/
                Version: model.Version,
                EpisodioClinico: model.EpisodioClinico,
                IdEpisodioAtencion: model.IdEpisodioAtencion,
                TipoPaciente: model.TipoPaciente,
                TipoAtencion: model.TipoAtencion,
                UnidadReplicacion: model.UnidadReplicacion,
                UnidadReplicacionEC: model.UnidadReplicacionEC,
                TipoOrdenAtencion: model.TipoOrdenAtencion,
                EpisodioAtencion: model.EpisodioAtencion,
                IdCita: model.IdCita,
                IdEspecialidad: model.IdEspecialidad,
                LineaOrdenAtencion: model.LineaOrdenAtencion,//OBS:  NO CONSIDARAR SALVO TEC. MÉDICO
                IdOrdenAtencion: model.IdOrdenAtencion,
                FechaRegistro: model.FechaRegistro,
                FechaAtencion: model.FechaAtencion,
                IdEmpresaAseguradora: model.IdEmpresaAseguradora,
                IdUnidadServicio: model.IdUnidadServicio,
                IdEstablecimientoSalud: model.IdEstablecimientoSalud,
                PersonaAnt: model.PersonaAnt, //OBS: AUX para ID CONTRATO (usado para obtener el Indicador EPS)

                ///////

                ComponenteNombre: model.ComponenteNombre,//OBS:  RQ OBSERVACION 2019/07/18
                Componente: model.Componente,
                Sucursal: model.Sucursal,
                sexo: model.sexo,
                FechaNacimiento: model.FechaNacimiento,
                EstadoCivil: model.EstadoCivil,
                NivelInstruccion: model.NivelInstruccion,
                Direccion: model.Direccion,
                TipoDocumento: model.TipoDocumento,
                Documento: model.Documento,
                ApellidoPaterno: model.ApellidoPaterno,
                ApellidoMaterno: model.ApellidoMaterno,
                Nombres: model.Nombres,
                LugarNacimiento: model.LugarNacimiento,
                CodigoPostal: model.CodigoPostal,
                Provincia: model.Provincia,
                Departamento: model.Departamento,
                Telefono: model.Telefono,
                CorreoElectronico: model.CorreoElectronico,
                EsPaciente: model.EsPaciente,
                EsEmpresa: model.EsEmpresa,
                Pais: model.Pais,
                EstadoPersona: model.EstadoPersona,
                IdHospitalizacion: model.IdHospitalizacion
            };
            ArrayList.push(VW_ATENCIONPACIENTE_GENERAL);

            Ext.net.DirectMethod.request({
                url: '@(Url.Action("SelectPersonaEpisodioEvento"))',
                params: {
                    selection: ArrayList
                }
            });
        }
        return true;
    }

    function getFormatDate(fecha, parent) {
        var fechaForm = null;
        if (fecha != null) {
            var diaFec = fecha.getDate();
            var mmFec = fecha.getMonth() + 1;
            var yyyyFec = fecha.getFullYear();
            var diaForm = '' + diaFec;
            var mmForm = '' + mmFec;
            var yyyyForm = '' + yyyyFec;
            if (diaFec < 10) {
                diaForm = '0' + diaFec;
            }
            if (mmFec < 10) {
                mmForm = '0' + mmFec;
            }
            fechaForm = diaForm + '/' + mmForm + '/' + yyyyForm;
        }
        return fechaForm;
    };
    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };


    var valorEpiModo_aux = null;
    function eventoAutenticacionEpiPrevia(valores, empleado, tipoagente) {
        valorEpiModo_aux = valores;
        var idEspecialidadSelecc = null;
        var notaAutencticacion = '';
        var idEmpleadoCreadorAux = 0;
        var empleadoCreadorValido = true;
        if (valores == 'M' || valores == 'V') {
            if (seleccionDataActual != null) {
                empleadoCreadorValido = true;
            }
        }
        else if (valores != 'A') {
            if (seleccionDataActual != null) {
                idEmpleadoCreadorAux = seleccionDataActual.IdMedico;
                if (empleado != seleccionDataActual.IdMedico) {
                    empleadoCreadorValido = false;
                    notaAutencticacion = notaAutencticacion + '* El trabajador debe ser el mismo que creó la atención \n';
                }
            }
        }

        if (empleado != 0 && tipoagente > 1 && empleadoCreadorValido) {
            if (valores == 'F') {
                ConfirmaFinaliza();
            } else {
                eventoAccionEpisodio(valores);
            }
        } else {
            if (seleccionDataActual != null) {
                idEspecialidadSelecc = seleccionDataActual.IdEspecialidad;
                var ACCION_ = '';
                if (valores == 'N') {
                    ACCION_ = 'NUEVO';
                } else if (valores == 'M') {
                    ACCION_ = 'UPDATE';
                } else if (valores == 'V') {
                    ACCION_ = 'VER';
                } else if (valores == 'F') {
                    ACCION_ = 'FINALIZAR';
                } else if (valores == 'A') {
                    ACCION_ = 'ABRIR';
                }
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("AutenticacionAdicional"))',
                    params: {
                        MODO: ACCION_,
                        tipotrab: '',
                        trabajadorRequerido: '@(PAR_CODTRABAJADOR_LISTADO)',
                        empleadoCreador: idEmpleadoCreadorAux,
                        mensajes: notaAutencticacion,
                        especialidad: idEspecialidadSelecc,
                        campoEvento: 'txtEventoAutenticaEpi'
                    }
                });
            }
        }
    };

    function eventoAutenticacionEpiSuccess() {
        if (App.txtEventoAutenticaEpi.getValue() != '') {
            if (valorEpiModo_aux != null) {
                if (valorEpiModo_aux == 'F') {
                    ConfirmaFinaliza();
                } else {
                    eventoAccionEpisodio(valorEpiModo_aux);
                }
                valorEpiModo_aux == null;
            }
            App.txtEventoAutenticaEpi.setValue('');
        }
    };

    function eventoAccionEpisodio(valorAccion) {

        if (seleccionDataActual != null) {
            valorEpiModo_aux = valorAccion;
            if (valorAccion == 'N' || valorAccion == 'A') {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("SeleccionadorUnidadServicio"))',
                    params: {
                        MODO: 'NUEVO',
                        campoEvento: 'txtEventoUnidServicioNuevoEpiHCE',
                        establecimiento: 0,
                        tipoAtencion: seleccionDataActual.TipoAtencion,
                        accionSeleccion: 'getSeleccionUnidadServicioNuevoEpi',
                        accionListado: 'LISTARPAG'
                    }
                });
            } else {
                eventoEstadoClinico(valorAccion, seleccionDataActual.IdUnidadServicio);
            }
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar una Atención.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };

    function eventoSeleccionUnidadServicio(compo) {
        if (compo.getValue() != '') {
            if (valorEpiModo_aux != null) {
                eventoEstadoClinico(valorEpiModo_aux, compo.getValue());
                valorEpiModo_aux == null;
            }
            compo.setValue('');
        }
    };

    function eventoEstadoClinico(valorAccion, idUnidadServ) {
        var ACCION_ = '';
        if (valorAccion == 'N') {
            ACCION_ = 'Nuevo';
        } else if (valorAccion == 'M') {
            ACCION_ = 'UPDATE';
        } else if (valorAccion == 'V') {
            ACCION_ = 'VISTA';
        } else if (valorAccion == 'F') {
            ACCION_ = 'Finalizar';
        } else if (valorAccion == 'A') {
            ACCION_ = 'ABRIR';
        }
        var reglaAplica = false;
        if (valorAccion == 'M' || valorAccion == 'A') {
            var accionRegla = 'POSaludFirmaMedico';
            var urlRegla = '@(Url.Action("POSaludFirmaMedico"))';
            if (valorAccion == 'A') {
                accionRegla = 'POSaludConsultaMes';
                urlRegla = '@(Url.Action("POSaludConsultaMes"))';
            }
            var APMiscelaneos = new Array();
            var MA_MiscelaneosDetalle = {
                ValorEntero1: 1,
                ACCION: accionRegla
            };
            APMiscelaneos.push(MA_MiscelaneosDetalle);
            Ext.net.DirectMethod.request({
                url: urlRegla,
                params: {
                    PacienteID: 0,
                    valor: 0,
                    regla: accionRegla,
                    arrays: APMiscelaneos
                },
                success: function (resultRegla) {
                    reglaAplica = mostrarAlarmaReglas(resultRegla.data);
                    if (!reglaAplica) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("EstadoClinico"))',
                            params: {
                                selection: '',
                                accion: ACCION_,
                                idUnidadServicio: idUnidadServ
                            }
                            , success: function (result) { ActivaUrl(valorAccion); },
                            failure: function (response) {
                                console.log("Failure")
                                Ext.Msg.show({
                                    title: "Advertencia",
                                    msg: "Por motivos de Seguridad vuelva a loguearse.",
                                    icon: Ext.Msg.WARNING,
                                    minWidth: 200,
                                    buttons: Ext.Msg.OK
                                });
                            }
                        });
                    } else {
                        App.GridPanel1.getStore().reload();
                    }

                }
            });
        } else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("EstadoClinico"))',
                params: {
                    selection: '',
                    accion: ACCION_,
                    idUnidadServicio: idUnidadServ
                }
                , success: function (result) { ActivaUrl(valorAccion); }
            });
        }

    };
    function mostrarAlarmaReglas(data) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    function listado() {
        if (seleccionDataActual != null) {
            var status = seleccionDataActual.IdPaciente;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("DocumentoListado"))',
                params: {
                    MODO: 'VER',
                    idPaciente: status
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };

    function chkFechasActosFiltros(fechaActual) {
        var checkAll = App.chFechas.getValue();
        if (checkAll) {
            App.txtFecha1.setDisabled(true);
            App.txtFecha1.setValue(null);
            App.txtFecha2.setDisabled(true);
            App.txtFecha2.setValue(null);
        } else {
            App.txtFecha1.setValue(fechaActual);
            App.txtFecha2.setValue(fechaActual);
            App.txtFecha1.setDisabled(false);
            App.txtFecha2.setDisabled(false);
        }
    }





    var getRowClass = function (record) {


        console.log("no me estes picoteando>>", record.data.EstadoEpiAtencion);
        if (record.data.EstadoEpiAtencion == 0) {
            return "new-row";
        } else {

            return "dirty-row";
        }

        //  if (record.dirty) {
        //    return "dirty-row";
        // }


    };

    var showResult = function (btn) {
        //  Ext.Msg.notify("Button Click", "Se detuvo el llamado " + btn + " button");
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ControllerllamadoCancelar"))',
            params: {
                selection: 'VER',
                accion: status
            }
        });
    };

    </script>



    <style>
        .dirty-row .x-grid-cell, .dirty-row .x-grid-rowwrap-div {
            background-color: #ffffff !important;
        }

        .new-row .x-grid-cell, .new-row .x-grid-rowwrap-div {
            background: #b4f59d !important;
        }

    </style>


    

}



@section cuerpo
{
@(X.TaskManager()
        .ID("TaskManager1")
        .Tasks(X.Task()
            .TaskID("Task1")
            .Interval(1000)
            .AutoRun(false)
            .DirectEvents(de =>
            {
                  de.Update.Action = "RefreshProgressllamado";
                //de.Update.EventMask.ShowMask = true;
            })
        )
)

    @(Html.X().Viewport().ID("ViewportXD")
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {         
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {

            regions
                .Add(
                Html.X().FormPanel()
                 .TopBar(

                    X.Toolbar()
                        .Height(30)
                            .Items(
                                    X.TextField().Hidden(true)
                                     .ID("txtEventoUnidServicioNuevoEpiHCE")
                                     .Listeners(l =>
                                     {
                                         l.Change.Handler = "eventoSeleccionUnidadServicio(this);";

                                     })
                                     ,
                                 X.Button()
                                    .Text("Buscar Pacientes")
                                    .Icon(Icon.PageWhiteFind)
                                    .Handler("accionBuscarFiltro('FILTRO',new Date());")                            
                                   

                                    ,
                                       X.Button()
                                .ID("btnllamadoVisita")
                                .Text("Llamado").Hidden(false).Disabled(false)
                                .Icon(Icon.ReportAdd)
                                .DirectEvents(directEvents =>
                                              {
                                                  directEvents.Click.Url = "ControllerllamadoVisita";
                                                  directEvents.Click.EventMask.ShowMask = true;
                                                  directEvents.Click.EventMask.Msg = "Loading...";
                                                  directEvents.Click.ExtraParams.Add(new
                                                          {
                                                              selection = "",
                                                              accion = "Nuevo"
                                                          });
                                              })
                                ,
                                X.ToolbarFill(),
                                X.Button()
                                    .ID("anularEpisodio").Hidden(false)
                                    .Text("Anular Atención")
                                    .Icon(Icon.ApplicationDelete)
                                    .Disabled(true)
                                    .Handler("LoadVisitasAnuladas('TODOS');")

                                ,
                                X.Button()
                                .ID("btnNuevaVisita").Disabled(true)
                                .Text("Nueva Visita").Hidden(true)
                                .Icon(Icon.ReportAdd)
                                .Handler("LoadVisitas('NUEVO');")
                                ,
                                X.Button()
                                .ID("btnModifVisita").Disabled(true)
                                .Text("Modificar Visita").Hidden(true)
                                .Icon(Icon.ReportEdit)
                                .Handler("LoadVisitas('UPDATE');")
                                ,
                                X.Button()
                                .ID("btnVerVisita").Disabled(true)
                                .Text("Ver Visita").Hidden(true)
                                .Icon(Icon.ReportPicture)
                                .Handler("LoadVisitas('VER');")
                                ,
                                X.Button()
                                .ID("btnVisitas").Disabled(true)
                                .Text("Visitas").Hidden(true)
                                .Icon(Icon.ReportStart)
                                .Handler("LoadVisitas('TODOS');")
                                    ,
                                X.Button()
                                    .ID("abrirEpisodio").Hidden(false)
                                    .Text("Abrir Atención")
                                    .Icon(Icon.ShapeSquareAdd)
                                    .Disabled(true)
                                    .Handler("eventoAutenticacionEpiPrevia('A'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");")
                                    ,
                                X.Button()
                                    .ID("NewEpisodio")
                                    .Text("Nuevo Episodio")
                                    .Icon(Icon.ShapeSquareAdd)
                                    .Disabled(true).Hidden(true)
                                    .Handler("eventoAutenticacionEpiPrevia('N'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");")
                                    ,
                                X.Button()
                                    .ID("ContEpisodio")
                                    .Disabled(true).Hidden(true)
                                    .Text("Continuar Episodio")
                                    .Icon(Icon.ShapeSquareSelect)
                                    .Handler("ActivaUrl('C');"),

                                X.Button()
                                    .ID("ModiEpisodio")
                                    .Disabled(true).Hidden(false)
                                    .Text("Modificar Atención")
                                    .Icon(Icon.ShapeSquareEdit)
                                    .Handler("eventoAutenticacionEpiPrevia('M'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");")

                                      ,
                                 X.Button()
                                    .ID("VerEpisodio")
                                    .Disabled(true).Hidden(false)
                                    .Text("Ver Atención")
                                    .Icon(Icon.ShapeSquareGo)
                                    .Handler("eventoAutenticacionEpiPrevia('V'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");"),


                                                            X.Button()
                                .ID("btnShowHC").Disabled(true)
                                .Text("Historia Clínica").Hidden(false)
                                .Icon(Icon.FolderTable)
                                .Handler("AbrirHistoria();")
                                    ,
                                X.Button()
                                    .ID("FinalEpisodio")
                                    .Disabled(true).Hidden(true)
                                    .Text("Finaliza Episodio")
                                    .Icon(Icon.ShapeSquareDelete)
                                    .Handler("ConfirmaFinaliza();"),

                                 X.ToolbarFill()
                                ,

                                X.ToolbarSeparator(),
                                X.Button()
                                    .Text("Documentos Pac.").Hidden(true)
                                    .Icon(Icon.ShapeSquareAdd)
                                    .Handler("listado();")
                              ))

                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";

                })
               .Items(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Filtro de Busqueda")
                //.Border(false)
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(
                                     X.TextField().ID("txtEventoAutenticaEpi").Hidden(true)
                                    .Listeners(l =>
                                    {
                                        l.Change.Handler = "eventoAutenticacionEpiSuccess();";
                                    })
                                    ,
                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                           X.Checkbox()
                                             .FieldLabel("Nro HC")
                                             .ID("chHC")
                                              .Listeners(l => l.Change.Handler = @"var checkAll = #{chHC}.getValue();
                                                if(checkAll){
                                                    #{txtHC}.setDisabled(true);
                                                    #{txtHC}.setValue(null);
                                                }else{
                                                    #{txtHC}.setDisabled(false);
                                                }")
                                             .Checked(true),
                                           X.TextField()
                                             .ID("txtHC")
                                             .Disabled(true),
                                           X.Component().Width(30),
                                           X.Checkbox()
                                             .FieldLabel("Fecha Cita")
                                             .ID("chFechas")
                                              .Listeners(l => l.Change.Handler = "chkFechasActosFiltros('" + (DateTime.Now.Day < 10 ? "0" : "") + DateTime.Now.Day +
                                            "/" + (DateTime.Now.Month < 10 ? "0" : "") + DateTime.Now.Month + "/" + DateTime.Now.Year + "');")
                                             .Checked(false).ReadOnly(true)
                                             ,
                                           X.TextField()//.Plugins(X.InputMask().Mask("99/99/9999"))
                                            .ID("txtFecha1")
                                             .Width(75).Value((DateTime.Now.Day < 10 ? "0" : "") + DateTime.Now.Day +
                                            "/" + (DateTime.Now.Month < 10 ? "0" : "") + DateTime.Now.Month + "/" + DateTime.Now.Year)
                                             .Disabled(false).ReadOnly(true)
                                             ,                //////
                                            X.SplitButton()
                                            .Handler("if( this.bin[0].isVisible()){this.bin[0].hide();};")
                                            .IconUrl("~/resources/images/iconcalendext.png")
                                            .Bin(
                                                X.Panel().Width(185).Height(200).Layout(LayoutType.Fit).Floating(true)
                                                .Items(
                                                    X.DatePicker()
                                                    .Listeners(l =>
                                                    {
                                                        l.Select.Handler = "this.up('panel').hide();" +
                                                            "setDateFormat( App.txtFecha1,this.getValue() )";
                                                    })
                                                 )
                                             )
                                             .Listeners(l => l.ArrowClick.Handler =
                                                 "if( this.bin[0].isVisible()){this.bin[0].hide();}else{this.bin[0].show(); this.bin[0].alignTo(this.el);} ;  ")
                //////////
                                             ,
                                           X.TextField()//.Plugins(X.InputMask().Mask("99/99/9999"))
                                            .ID("txtFecha2")
                                            .Width(75).Value((DateTime.Now.Day < 10 ? "0" : "") + DateTime.Now.Day +
                                            "/" + (DateTime.Now.Month < 10 ? "0" : "") + DateTime.Now.Month + "/" + DateTime.Now.Year)
                                             .Disabled(false).ReadOnly(true)
                                            , X.SplitButton()
                                            .Handler("if( this.bin[0].isVisible()){this.bin[0].hide();};")
                                            .IconUrl("~/resources/images/iconcalendext.png")
                                            .Bin(
                                                X.Panel().Width(185).Height(200).Layout(LayoutType.Fit).Floating(true)
                                                .Items(
                                                    X.DatePicker()
                                                    .Listeners(l =>
                                                    {
                                                        l.Select.Handler = "this.up('panel').hide();" +
                                                            "setDateFormat( App.txtFecha2,this.getValue() )";
                                                    })
                                                 )
                                             )
                                             .Listeners(l => l.ArrowClick.Handler =
                                                 "if( this.bin[0].isVisible()){this.bin[0].hide();}else{this.bin[0].show(); this.bin[0].alignTo(this.el);} ;  ")
                //////////
                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(


                                               X.Checkbox()
                                                 .FieldLabel("Código OA")
                                                 .ID("chOA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chOA}.getValue();
                                                    if(checkAll){
                                                        #{txtCodigoOA}.setDisabled(true);
                                                        #{txtCodigoOA}.setValue(null);
                                                    }else{
                                                        #{txtCodigoOA}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                              X.TextField()
                                                 .ID("txtCodigoOA")
                                                 .Disabled(true),
                                                 X.Component().Width(30),
                                               X.Checkbox()
                                                 .FieldLabel("Médico")
                                                 .ID("chMe").ReadOnly(IndicaActivo)
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chMe}.getValue();
                                                    if(checkAll){
                                                        #{txtMedico}.setDisabled(true);
                                                        #{txtMedico}.setValue(null);
                                                    }else{
                                                        #{txtMedico}.setDisabled(false);
                                                    }")
                                                 .Checked(!IndicaActivo),
                                              X.TextField()
                                                  .Width(220)
                                                 .ID("txtMedico")
                /*   .Disabled(true).*/.ReadOnly(IndicaActivo)
                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                                X.Checkbox()
                                                 .FieldLabel("Paciente")
                                                 .ID("chPaciente")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chPaciente}.getValue();
                                                    if(checkAll){
                                                        #{txtPaciente}.setDisabled(true);
                                                        #{txtPaciente}.setValue(null);
                                                    }else{
                                                        #{txtPaciente}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                               X.TextField()
                                                 .ID("txtPaciente")
                //.Width(350)
                                                 .Disabled(true),
                                              X.Component().Width(30),
                                                X.Checkbox()
                                                 .FieldLabel("Estado de Episodio")
                                                 .ID("chkTipoConsulta")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chkTipoConsulta}.getValue();
                                                    if(checkAll){
                                                        #{cmbTipoConsulta}.setDisabled(true);
                                                        #{cmbTipoConsulta}.setValue(null);
                                                    }else{
                                                        #{cmbTipoConsulta}.setDisabled(false);
                                                    }")
                                                 .Checked(true),



                                               X.ComboBox().Editable(false)
                                                 .ID("cmbTipoConsulta")
                                                 .Width(220)
                                                 .Items(
                // new ListItem("Anulado", 1), //CA -AT
                                                    new ListItem("En Atención", 2), //CC -PE
                                                    new ListItem("Atendido", 3),
                                                    new ListItem("Pendiente", 0),
                                                    new ListItem("Programado", 1),
                                                     new ListItem("Anulado", 4),
                                                     new ListItem("Terminado", 5)



                                                  )
                                                 .Disabled(true),
                                                 X.Component().Width(30),
                                                  X.Checkbox().FieldLabel("Especialidad").ID("chHEsp")


                                           .Listeners(l => l.Change.Handler = @"var checkAll = #{chHEsp}.getValue();
                                                    if(checkAll){
                                                        #{cmbBuscarEsp}.setDisabled(true);
                                                        #{cmbBuscarEsp}.setValue(null);
                                                    }else{
                                                        #{cmbBuscarEsp}.setDisabled(false);
                                                    }").Checked(true),






                                          X.ComboBox()
                                           .ID("cmbBuscarEsp").Disabled(true).Name("buscarEsp").Width(220)
                                           .Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESPECIALI").Select(d => new ListItem(d.Name, d.ID)))
                                           .FieldLabel("").Editable(true).SimpleSubmit(true).Editable(false)




                                       )
                                 ),

                                 Html.X().FieldSet().ColumnWidth(0.4).Title("Leyenda")
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));

                               })
                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Top;
                               })
                                .Items(
                                    Html.X().Container().Layout(LayoutType.HBox).MarginSpec("00 00 10 00")
                                    .Items(
                                        X.Label().Html("<div  style='padding-right:10px;Color:#FE642E;'> <font></font></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_YELLOW02 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >CPM</small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_GREEN01 + "; width: 10px;top: 10px;margin: 5px; height: 10px; '></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >PPS</small></div>"),
                                        X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_ROSADO2 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Plan de Salud</small></div>"),
                                         X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_NARANJA + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                       X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Sin Seguro</small></div>"),
                                         X.Label().Html("<div unselectable='on' class='circulo' style='background: " + COLOR_BLUE01 + "; width: 10px;top: 10px;margin: 5px; height: 10px;'></div>"),
                                        X.Label().Html("<div  style='padding-right:20px;' ><small class ='lbLeyenda' >Convenios</small></div>")



                                    )
                                )
                       ),
                       Html.X().Panel()
               .ItemID("center")

               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                                        .Title("Listado de Pacientes: " + Model.CONCEPTODESCRIPCION)

                                        .Scroll(ScrollMode.Both)
                                        .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
                                        .Anchor("100% 100%")
                                        .ID("GridPanel1")
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                        .Store(store => store.Add(
                                         Html.X().Store()
                                        .ID("StoreTasks")
                                        .AutoLoad(true)
                                        .RemoteSort(false)
                                        .IsPagingStore(true)
                                       .RemotePaging(false)
                                       .PageSize(10)
                                       .Proxy(proxy => proxy.Add(
                                           Html.X().AjaxProxy()
                                                           .Url("GrillaListadoAtencionPacientesActosMedicos")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                           .Root("data")
                                                           .TotalProperty("total")
                                                           .IDProperty("NumeroFila"))
                                                           ))


                                                           )

                                        .Parameters(ps =>
                                        ps.Add(
                                                new
                                                {
                                                    start = 0,
                                                    limit = 10,
                                                    txtHC = JRawValue.From("App.txtHC.getValue()"),
                                                    txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                    txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                    /*txtHCA = JRawValue.From("App.txtHCA.getValue()"),*/
                                                    txtCodigoOA = JRawValue.From("App.txtCodigoOA.getValue()"),
                                                    txtMedico = JRawValue.From("App.txtMedico.getValue()"),
                                                    txtPaciente = JRawValue.From("App.txtPaciente.getValue()"),
                                                    tipoConsulta = "CA",
                                                    //tipoConsulta = JRawValue.From("App.cmbTipoConsulta.getValue()"),
                                                    tipoEstado = JRawValue.From("App.cmbTipoConsulta.getValue()"),
                                                    idespecialidad = JRawValue.From("App.cmbBuscarEsp.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar"),
                                                    tipoListado = PAR_TIPOLISTADO

                                                }
                                            )
                                        )

                                        .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {



                                                           fields.Add(Html.X().ModelField().Name("NumeroFila").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("tipoListado").Type(ModelFieldType.String));
                                                           fields.Add(Html.X().ModelField().Name("IdPaciente").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("CitaTipo"));
                                                           fields.Add(Html.X().ModelField().Name("CitaFecha"));
                                                           fields.Add(Html.X().ModelField().Name("CitaHora"));
                                                           fields.Add(Html.X().ModelField().Name("FechaFin"));
                                                           fields.Add(Html.X().ModelField().Name("FechaInicio"));
                                                           fields.Add(Html.X().ModelField().Name("Origen"));
                                                           fields.Add(Html.X().ModelField().Name("NombreEspecialidad"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoOA"));
                                                           fields.Add(Html.X().ModelField().Name("TipoPacienteNombre"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoHC"));
                                                           fields.Add(Html.X().ModelField().Name("PacienteNombre"));
                                                           fields.Add(Html.X().ModelField().Name("EstadoEpiAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("Cama"));
                                                           fields.Add(Html.X().ModelField().Name("Version"));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioClinico"));
                                                           fields.Add(Html.X().ModelField().Name("IdEpisodioAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("TipoPaciente"));
                                                           fields.Add(Html.X().ModelField().Name("TipoAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("UnidadReplicacion"));
                                                           fields.Add(Html.X().ModelField().Name("IdCita"));
                                                           fields.Add(Html.X().ModelField().Name("UnidadReplicacionEC"));
                                                           fields.Add(Html.X().ModelField().Name("IdEspecialidad"));
                                                           fields.Add(Html.X().ModelField().Name("IdOrdenAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("LineaOrdenAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("FechaRegistro"));
                                                           fields.Add(Html.X().ModelField().Name("FechaAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("IdEmpresaAseguradora"));
                                                           fields.Add(Html.X().ModelField().Name("IdEmpresaEmpleadora"));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("TipoOrdenAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("IdEstablecimientoSalud"));
                                                           fields.Add(Html.X().ModelField().Name("IdUnidadServicio"));
                                                           fields.Add(Html.X().ModelField().Name("IdMedico"));
                                                           fields.Add(Html.X().ModelField().Name("MedicoNombre"));
                                                           fields.Add(Html.X().ModelField().Name("IdPersonalSalud"));
                                                           fields.Add(Html.X().ModelField().Name("EstadoEpiClinico"));
                                                           fields.Add(Html.X().ModelField().Name("PersonaAnt"));
                                                           fields.Add(Html.X().ModelField().Name("Sucursal"));
                                                           fields.Add(Html.X().ModelField().Name("IdHospitalizacion"));
                                                           //////PERSONA
                                                           fields.Add(Html.X().ModelField().Name("sexo"));
                                                           fields.Add(Html.X().ModelField().Name("FechaNacimiento"));
                                                           fields.Add(Html.X().ModelField().Name("EstadoCivil"));
                                                           fields.Add(Html.X().ModelField().Name("NivelInstruccion"));
                                                           fields.Add(Html.X().ModelField().Name("Direccion"));
                                                           fields.Add(Html.X().ModelField().Name("TipoDocumento"));
                                                           fields.Add(Html.X().ModelField().Name("Documento"));
                                                           fields.Add(Html.X().ModelField().Name("ApellidoPaterno"));
                                                           fields.Add(Html.X().ModelField().Name("ApellidoMaterno"));
                                                           fields.Add(Html.X().ModelField().Name("Nombres"));
                                                           fields.Add(Html.X().ModelField().Name("LugarNacimiento"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoPostal"));
                                                           fields.Add(Html.X().ModelField().Name("Provincia"));
                                                           fields.Add(Html.X().ModelField().Name("Departamento"));
                                                           fields.Add(Html.X().ModelField().Name("Telefono"));
                                                           fields.Add(Html.X().ModelField().Name("CorreoElectronico"));
                                                           fields.Add(Html.X().ModelField().Name("EsPaciente"));
                                                           fields.Add(Html.X().ModelField().Name("ComponenteNombre")); //***********
                                                           fields.Add(Html.X().ModelField().Name("Componente"));
                                                           fields.Add(Html.X().ModelField().Name("EsEmpresa"));
                                                           fields.Add(Html.X().ModelField().Name("Pais"));
                                                           fields.Add(Html.X().ModelField().Name("EstadoPersona"));
                                                           fields.Add(Html.X().ModelField().Name("Modalidad"));
                                                           fields.Add(Html.X().ModelField().Name("FechaCierreEpiClinico"));

                                                       }
                                                       )
                                                       ))))


                                       .ColumnModel(columnModel =>
                                       {




                                           columnModel.Columns.Add(Html.X().RowNumbererColumn());
                                           columnModel.Columns.Add(Html.X().Column().Text("").DataIndex("Modalidad").Width(30).Hidden(false).Renderer("changeModalidad").Align(Alignment.Left));

                                           columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("NumeroFila").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IDs").DataIndex("tipoListado").Hidden(true));
                                           //columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("PersonaAnt").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(150).Hidden(true));
                                           //////////////////MOSTRADOS
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Hora Cita").DataIndex("CitaHora").Format("hh:mm").Width(60));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha Cita").DataIndex("CitaFecha").Width(75).Format("dd/MM/yyyy"));
                                           columnModel.Columns.Add(Html.X().Column().Text("Origen").DataIndex("Origen").Width(60));
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("TipoPacienteNombre").Width(90));
                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo HC").DataIndex("CodigoHC").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("PacienteNombre").Width(210));
                                           columnModel.Columns.Add(Html.X().Column().Text("Código OA").DataIndex("CodigoOA").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("EstadoEpiAtencion").Width(80)
                                               .Renderer("changeEstadoOA")

                                               );
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Cita").DataIndex("CitaTipo").Width(60));
                                           columnModel.Columns.Add(Html.X().Column().Text("Especialidad").DataIndex("NombreEspecialidad").Width(90));
                                           columnModel.Columns.Add(Html.X().Column().Text("Nombre de Medico").DataIndex("MedicoNombre").Width(130));
                                           columnModel.Columns.Add(Html.X().Column().Text("Línea OA").DataIndex("LineaOrdenAtencion").Width(50).Hidden(false));

                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Hora Fin").DataIndex("FechaFin").Width(70).Format("HH:mm:ss").Hidden(true));

                                           columnModel.Columns.Add(Html.X().Column().Text("Comentario").DataIndex("Cama").Width(210));
                                           /////////
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Atencion").DataIndex("Version").Width(100).Hidden(false));
                                           ////////////OCULTOS
                                           columnModel.Columns.Add(Html.X().Column().Text("Epidosio Clínico").DataIndex("EpisodioClinico").Width(95).Hidden(true));//IndicadorFallecido
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio Atención").DataIndex("IdEpisodioAtencion").Width(95).Hidden(true));//IndicadorSinCorreo

                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Atencion").DataIndex("TipoAtencion").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("UnidadReplicacion").DataIndex("Sucursal").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdCita").DataIndex("IdCita").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaInicio").DataIndex("FechaInicio").Width(50).Hidden(true).Format("dd/MM/yyyy"));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaFin").DataIndex("FechaFin").Width(50).Hidden(true).Format("dd/MM/yyyy"));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdEspecialidad").DataIndex("IdEspecialidad").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdOrdenAtencion").DataIndex("IdOrdenAtencion").Width(50).Hidden(true));

                                           columnModel.Columns.Add(Html.X().Column().Text("IdEmpresaAseguradora").DataIndex("IdEmpresaAseguradora").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdEmpresaEmpleadora").DataIndex("IdEmpresaEmpleadora").Width(50).Hidden(true));

                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaRegistro").DataIndex("FechaRegistro").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaAtencion").DataIndex("FechaAtencion").Width(50).Hidden(true));

                                           columnModel.Columns.Add(Html.X().Column().Text("Componentes").DataIndex("ComponenteNombre").Width(100).Hidden(false));

                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha Pago").DataIndex("FechaCierreEpiClinico").Width(100).Hidden(false).Format("dd/MM/yyyy HH:mm"));


                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo Componente").DataIndex("Componente").Width(100).Hidden(true));


                                           ///////////////////
                                           columnModel.Columns.Add(Html.X().Column().Text("UnidadReplicacionEC").DataIndex("UnidadReplicacionEC").Width(50).Hidden(true));
                                           ////////////////PERSONA
                                           columnModel.Columns.Add(Html.X().Column().Text("sexo").DataIndex("sexo").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("FechaNacimiento").DataIndex("FechaNacimiento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EstadoCivil").DataIndex("EstadoCivil").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("NivelInstruccion").DataIndex("NivelInstruccion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Direccion").DataIndex("Direccion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("TipoDocumento").DataIndex("TipoDocumento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Documento").DataIndex("Documento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("ApellidoPaterno").DataIndex("ApellidoPaterno").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("ApellidoMaterno").DataIndex("ApellidoMaterno").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Nombres").DataIndex("Nombres").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("LugarNacimiento").DataIndex("LugarNacimiento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("CodigoPostal").DataIndex("CodigoPostal").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Provincia").DataIndex("Provincia").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Departamento").DataIndex("Departamento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Telefono").DataIndex("Telefono").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("CorreoElectronico").DataIndex("CorreoElectronico").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EsPaciente").DataIndex("EsPaciente").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EsEmpresa").DataIndex("EsEmpresa").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Pais").DataIndex("Pais").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EstadoPersona").DataIndex("EstadoPersona").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdContrato").DataIndex("IdHospitalizacion").Width(50).Hidden(true));


                                       })

                                         .View(X.GridView()
                                        .StripeRows(true)
                                        .GetRowClass(grc => grc.Fn = "getRowClass")

                                    )

                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                                                                         .DisplayInfo(true)
                                                                         ))
                                       .Border(false)
                                      .Listeners(l => l.CellClick.Handler = "addPersonaAtencion(record.data);"

                                      )

                    )
                       )
                );
        }
        )
    )
    @(X.KeyNav()
               .Target("={document.body}")
               .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO',new Date());")
    )

}
