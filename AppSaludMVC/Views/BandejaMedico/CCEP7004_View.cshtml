@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.SS_HC_Anamnesis_EA

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
    
    }
@section cabecera
{

    <script>

        var Valores;
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };
        function eventoRenderForm() {
            var kk = 140;
            var scrH = screen.height;
            var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
            var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
            if (southH == 0) {
                southH = 30;
            }
            var dimCentral = (scrH - (northH + southH) - kk);
            App.formactual.setHeight(dimCentral);
        }

        var ALTURADEF = screen.height;
        var indicaCambios = false;
        function setIndicaCambios(value) {
            indicaCambios = value;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("setIndicaCambiosFormulario"))',
                params: {
                    indica: (value ? 1 : 0)
                }
            });
        }

        var Valores;
        var template = '<span style="color:{0};">{1}</span>';

        var COLOR_BLUE01 = "#284A89";
        var COLOR_RED01 = "#990000";
        var COLOR_GREEN01 = "#177506";
        var COLOR_YELLOW02 = "#D9A407";

        var changeEstado = function (value) {
            if (value == 'CC')
                return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
            if (value == 'CA')
                return Ext.String.format(template, COLOR_BLUE01, "Atendido");
            if (value == 'AN')
                return Ext.String.format(template, COLOR_RED01, "Anulado");
            if (value == 'FI')
                return Ext.String.format(template, COLOR_GREEN01, "Firmado");
        };

        var redirect = function () {
            window.location.href = ' @Url.Action("Index", "HClinica") ';
        }



        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        var onSuccess = function (grid, data) {
            grid.show();
            grid.getStore().loadData(data);
        };

        function deleteSelected(grid) {
            var store = grid.store,
                records = grid.selModel.getSelection();

            store.remove(records);
            store.load(true);
        }
        
        var aRecordSelector = {
            add: function (valor) {
                var rango = valor.split('RowIndex');
                var rango = rango[1].split(':');
                var rango = rango[1].split('}');
                
                source = App.GridPanel1;
                var i = 0;
                var store = App.StoreTasks;
                var status;
                var ArrayList = new Array();
                if (source.getSelectionModel().hasSelection()) {
                    var records = source.getSelectionModel().getSelection();
                    store.each(function (r) {
                        if (rango[0] == i) {
                            var PERSONAMAST = {
                                Persona: r.get("Persona"),
                                IndicadorFallecido: r.get('EpisodioClinico'),
                                IndicadorSinCorreo: r.get('IdEpisodioAtencion')
                            };
                            ArrayList.push(PERSONAMAST);

                            //status = r.get('Persona');
                            // return;
                        }
                        i = i + 1;
                    }
                    );
                }
               

                //alert(record);

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("SelectPaciente"))',
                    params: {
                        selection: ArrayList
                    }
                });

                /*
                 function fnStoreLoaded() {
                    var records = [];
                    App.PERFORMANCE_CRITERIA_GRID_PANEL_ID.getStore().each(function (record) {
                        if (record.data.IsSelected) {
                            records.push(record);
                        }
                    });
                */

                @*Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Edit"))',
                    params: {
                        id: e.record.data.ID,
                        field: e.field,
                        oldValue: e.originalValue,
                        newValue: e.value,
                        customer: e.record.data
                    }
                });*@
                //alert(records[0].data);
                // alert(valor);
                //source.store.remove(records);
                // destination.store.add(records);
                 
                }
        };
        var RecordSelector = {
            add: function (source, destination) {
                source = source || App.GridPanel1;
                destination = destination || App.GridPanel2;
                if (source.getSelectionModel().hasSelection()) {
                    var records = source.getSelectionModel().getSelection();
                    //alert(records[0].data);
                    alert(record.get('RecordID'));
                    //source.store.remove(records);
                    // destination.store.add(records);
                }
            }
        };
        var varTipoBuscar = "LOAD";

        var accionBuscarFiltro = function (tipo) {
            varTipoBuscar = tipo;
            App.GridPanel1.getStore().reload();
            varTipoBuscar = 'LOAD';
        };

    </script>
  }
@section cuerpo
{


    @(Html.X().Viewport()
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )                  
        .Listeners(l =>
        {
            //l.Render.Handler = "eventoRenderForm();";
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })
        
        .Items(regions =>
        {

            regions                
                .Add(
                Html.X().FormPanel()
                 .TopBar(
                     
                    X.Toolbar()
                        .Height(30)
                            .Items(
                                 X.Button()
                                    .Text("Buscar Pacientes")
                                    .Icon(Icon.PageWhiteFind)
                                    .Handler("accionBuscarFiltro('FILTRO');")
                                    ,
                                X.ToolbarFill(),
                                X.ToolbarSeparator(),
                                X.Button()
                                    .Text("Asignar Médico")
                                    .Icon(Icon.ShapeSquareAdd) ,
                                 X.ToolbarFill()
                              ))
                                   
                .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";                                        
                })              
               .Items(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Filtro de Busqueda")
                               //.Border(false)
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(

                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                           X.Checkbox()
                                             .FieldLabel("Nro HC")
                                             .ID("chHC")
                                              .Listeners(l => l.Change.Handler = @"var checkAll = #{chHC}.getValue();
                                                if(checkAll){            
                                                    #{txtHC}.setDisabled(true);
                                                    #{txtHC}.setValue(null);
                                                }else{
                                                    #{txtHC}.setDisabled(false);                        
                                                }")
                                             .Checked(true),
                                           X.TextField()
                                             .ID("txtHC")
                                             .Disabled(true),
                                           X.Component().Width(30),
                                           X.Checkbox()
                                             .FieldLabel("Fecha Inicio")
                                             .ID("chFechas")
                                              .Listeners(l => l.Change.Handler = @"var checkAll = #{chFechas}.getValue();
                                                    if(checkAll){            
                                                        #{txtFecha1}.setDisabled(true);
                                                        #{txtFecha1}.setValue(null);
                                                        #{txtFecha2}.setDisabled(true);
                                                        #{txtFecha2}.setValue(null);
                                                    }else{
                                                        #{txtFecha1}.setDisabled(false);                        
                                                        #{txtFecha2}.setDisabled(false);                        
                                              }")                                                
                                             .Checked(false),
                                           X.DateField()
                                            .ID("txtFecha1")
                                             .Width(110).Value(DateTime.Now)
                                             .Disabled(false),
                                           X.DateField()
                                            .ID("txtFecha2")
                                             .Width(110).Value(DateTime.Now)
                                             .Disabled(false)
                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                               X.Checkbox()
                                                 .FieldLabel("Nro HC Anterior")
                                                 .ID("chHCA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chHCA}.getValue();
                                                    if(checkAll){            
                                                        #{txtHCA}.setDisabled(true);
                                                        #{txtHCA}.setValue(null);    
                                                    }else{
                                                        #{txtHCA}.setDisabled(false);                        
                                                    }")                                                 
                                                 .Checked(true),

                                               X.TextField()
                                                 .ID("txtHCA")
                                                 .Disabled(true),
                                               X.Component().Width(30),
                                               X.Checkbox()
                                                 .FieldLabel("Codigo OA")
                                                 .ID("chOA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chOA}.getValue();
                                                    if(checkAll){            
                                                        #{txtCodigoOA}.setDisabled(true);
                                                        #{txtCodigoOA}.setValue(null);    
                                                    }else{
                                                        #{txtCodigoOA}.setDisabled(false);                        
                                                    }") 
                                                 .Checked(true),
                                              X.TextField()
                                                  .Width(220)
                                                 .ID("txtCodigoOA")
                                                 .Disabled(true)
                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                                X.Checkbox()
                                                 .FieldLabel("Paciente")
                                                 .ID("chPaciente")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chPaciente}.getValue();
                                                    if(checkAll){            
                                                        #{txtPaciente}.setDisabled(true);
                                                        #{txtPaciente}.setValue(null);    
                                                    }else{
                                                        #{txtPaciente}.setDisabled(false);                        
                                                    }") 
                                                 .Checked(true),
                                               X.TextField()
                                                 .ID("txtPaciente")
                                                 //.Width(350)
                                                 .Disabled(true),
                                              X.Component().Width(30),
                                                X.Checkbox()
                                                 .FieldLabel("Estado de consulta")
                                                 .ID("chkTipoConsulta")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chkTipoConsulta}.getValue();
                                                    if(checkAll){            
                                                        #{cmbTipoConsulta}.setDisabled(true);
                                                        #{cmbTipoConsulta}.setValue(null);    
                                                    }else{
                                                        #{cmbTipoConsulta}.setDisabled(false);                        
                                                    }") 
                                                 .Checked(true),
                                               X.ComboBox()
                                               
                                                 .ID("cmbTipoConsulta")
                                                 .Width(220)                                                 
                                                 .Items(
                                                    new ListItem("Atendido", "CA"), //CA -AT
                                                    new ListItem("Pendiente", "CC"), //CC -PE
                                                    new ListItem("Firmado", "FI"),
                                                    new ListItem("Pendiente", "AN")
                                                    )
                                                 
                                                 .Disabled(true)
                                                 
                                                 
                                       )
                                 )
                       ),
                       Html.X().Panel()
                .ItemID("center")
                
               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                                        .Title("Listado de Pacientes")
                                         .Scroll(ScrollMode.Both)
                                         .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
              
                                         .Anchor("100% 100%")
               
                                        .ID("GridPanel1")
                
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                       .Store(store => store.Add(
                                           Html.X().Store()
                                                    .ID("StoreTasks")

                                       .AutoLoad(true)
                                       .RemoteSort(false)
                                       .IsPagingStore(true)
                                       .RemotePaging(true)
                                       .PageSize(5)

                                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                           .Url("GrillaListadoAtencionPacientes")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                                  .Root("data")
                                                                                                  .TotalProperty("total")
                                                                                                  .IDProperty("PersonaAnt"))))) 

                                        .Parameters(ps =>
                                        ps.Add(
                                                new
                                                {
                                                    //start = 0,
                                                    //limit = 5,
                                                    txtHC = JRawValue.From("App.txtHC.getValue()"),
                                                    txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                    txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                    txtHCA = JRawValue.From("App.txtHCA.getValue()"),
                                                    txtCodigoOA = JRawValue.From("App.txtCodigoOA.getValue()"),
                                                    txtPaciente = JRawValue.From("App.txtPaciente.getValue()"),
                                                    tipoConsulta = JRawValue.From("App.cmbTipoConsulta.getValue()"),
                                                     tipoBuscar = JRawValue.From("varTipoBuscar")
                                                }
                                            )
                                        )
                                        .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {
                                                           
                                                           fields.Add(Html.X().ModelField().Name("Persona").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("personanew").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("PersonaAnt").Type(ModelFieldType.String));

                                                           //fields.Add(Html.X().ModelField().Name("IndicadorRegistroManual"));
                                                           fields.Add(Html.X().ModelField().Name("FechaAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("FecIniDiscamec"));
                                                           fields.Add(Html.X().ModelField().Name("FecFinDiscamec"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoOA"));
                                                           fields.Add(Html.X().ModelField().Name("tipoPaciente"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoHC"));
                                                           fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioClinico"));
                                                           fields.Add(Html.X().ModelField().Name("IdEpisodioAtencion"));
                                                           //fields.Add(Html.X().ModelField().Name("Estado"));
                                                           fields.Add(Html.X().ModelField().Name("Servicio"));
                                                       }
                                                       )
                                                       ))))


                                       .ColumnModel(columnModel =>
                                       {
                                           columnModel.Columns.Add(Html.X().RowNumbererColumn());
                                           columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("Persona").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IDs").DataIndex("personanew").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("PersonaAnt").Width(150).Hidden(true));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Nro").DataIndex("IndicadorRegistroManual").Width(30));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Fecha Cita").DataIndex("FechaAtencion").Width(90));
                                           columnModel.Columns.Add(Html.X().Column().Text("Hora Inicio").DataIndex("FecIniDiscamec").Width(70));
                                           columnModel.Columns.Add(Html.X().Column().Text("Hora Fin").DataIndex("FecFinDiscamec").Width(70));
                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo OA").DataIndex("CodigoOA").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("tipoPaciente").Width(90));
                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo HC").DataIndex("CodigoHC").Width(90));
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(200));
                                           columnModel.Columns.Add(Html.X().Column().Text("Epidosio Clínico").DataIndex("EpisodioClinico").Width(100));//IndicadorFallecido
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio Atención").DataIndex("IdEpisodioAtencion").Width(100));//IndicadorSinCorreo
                                           //columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Flex(1)//Width(90)
                                           columnModel.Columns.Add(Html.X().Column().Text("Estado Consulta").DataIndex("Servicio").Flex(1)//Width(90)                                               
                                               //.Renderer("if (value == 0) return 'I'; if (value == 2) return 'A';")
                                       .Renderer("changeEstado")
                                       );
                                          
                                       }) 
                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                                                                         .DisplayInfo(true)
                                                                         //.DisplayMsg("Displaying customers {0} - {1} of {2}")
                                                                         )) 
                                       .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                       .Border(false)
                


                                      .Listeners(l => l.CellClick.Handler = "aRecordSelector.add(App.GridPanel1.getSelectionSubmit().getSelectionModelField().getValue());")

                                       
                    )
                
                       
                       
                       
                       
                       
                       
                       
                       )
                                                                 
                );
        }
        )


      )

        
    @*@(X.KeyNav()
        .Target("={document.body}")                
        .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO');")
    )*@

    }

