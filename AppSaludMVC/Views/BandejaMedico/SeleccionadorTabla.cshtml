@model SoluccionSalud.Entidades.Entidades.SS_HC_Tabla
@{
    var X = Html.X();
}

<script>

    var varTipoBuscarTabla = "LOAD";

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";

    var change = function (value, meta) {
        return value;
    };

    var changeEstadoTabla = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Activo");
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "Inactivo");
    };

    var accionBuscarFiltroTabla = function (tipo) {
        varTipoBuscarTabla = tipo;
        App.GridPanelSelTablaCampo.getStore().reload();
        varTipoBuscarTabla = 'LOAD';
    };

    var seleccionActualTabla = null;
    var seleccionActualDescTabla = null;

    function setSeleccionTabla(param1, param2) {
        seleccionActualTabla = param1;
        seleccionActualDescTabla = param2;
    }

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };

    var onFailure = function (modo) {
        Ext.Msg.notify("EVENTO: FAILURE", "MODEL::" + modo);
    };

    function enviarSeleccionTabla(grid) {
        if (seleccionActualTabla != null) {
            var status = seleccionActualTabla;
            var status2 = seleccionActualDescTabla;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action(Model.Accion))',
                params: {
                    MODO: 'get',
                    id: status,
                    descripcion: status2,
                    idWindow: "WindowSelecTabla"
                }
            });
        } else {
            Ext.Msg.alert('Debe Seleccionar un elemento.');
        }

    }

    function enviarSeleccionDirectTabla(param1, param2) {
        var status = param1;
        var status2 = param2;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action(Model.Accion))',
            params: {
                MODO: 'get',
                id: status,
                descripcion: status2,
                idWindow: "WindowSelecTabla"
            }
        });
    }
    var eventoCheckFiltro = function (check, componente) {
        var checkAll = check.getValue();
        if (checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    };

</script>

@(Html.X().Window()
    .Width(505)
    .Height(450)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowSelecTabla")
    .Title("Seleccionar")
    .Padding(4)
        .TopBar(
        X.Toolbar().Height(30)
        .Items(
        X.Button().Text("Buscar").Icon(Icon.Find).Handler("accionBuscarFiltroTabla('FILTRO');"),
        X.ToolbarFill(),
        X.Button().Text("Aceptar").Icon(Icon.Accept).Handler("enviarSeleccionTabla(App.GridPanelSelTablaCampo.getSelectionSubmit().getSelectionModelField().getValue());"),
        X.Button().Text("Cancelar").Icon(Icon.Cancel).DirectEvents(de =>
        {
            de.Click.Url = Url.Action("cerrarWindow");
            de.Click.ExtraParams.Add(new Parameter("id", "WindowSelecTabla", ParameterMode.Value));
        })))
        .Items(
            X.GridPanel().TopBar(
            X.Toolbar().Items(
                X.Checkbox().FieldLabel("TIPO").ID("chkId").Checked(true).Hidden(true).Handler("eventoCheckFiltro(App.chkId,App.tfBuscarSeleccId);").LabelWidth(70),
                X.ComboBox().ID("tfBuscarSeleccId").Hidden(true).Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOTABLA").Select(d => new ListItem(d.Name, d.ID))).FieldLabel("").SimpleSubmit(true),   
                X.Checkbox().FieldLabel("Descripción").ID("chkDescTabla").Checked(true).Handler("eventoCheckFiltro(App.chkDescTabla,App.tfBuscarSeleccDescTabla);").LabelWidth(70),
                X.TextField().FieldLabel("Descripción").ID("tfBuscarSeleccDescTabla").Disabled(true).FieldLabel(""),
                X.ToolbarFill())).Border(false).Scroll(ScrollMode.Both).AutoScroll(true).ID("GridPanelSelTabla").Margins("0 0 0 0")
                .Store(store => store.Add(
                    Html.X().Store().ID("StoreSelTabla").AutoLoad(true).RemoteSort(false).IsPagingStore(true).RemotePaging(true).PageSize(10)
                    .Proxy(proxy => proxy.Add(
                        Html.X().AjaxProxy().Url("getGrillaTabla").Reader(reader => reader.Add(
                            Html.X().JsonReader()
                                            .Root("data")
                                            .TotalProperty("total")
                                            .IDProperty("IdFavoritoTabla")))))
                                            .Parameters(ps =>ps.Add(new
                                            {
                                                tabla = JRawValue.From("App.tfBuscarSeleccId.getValue()"),
                                                nombre = JRawValue.From("App.tfBuscarSeleccDescTabla.getValue()"),
                                                tipoBuscar = JRawValue.From("varTipoBuscarTabla")}))
                                                .Model(model => model.Add(Html.X().Model()
                                                    .Fields(fields =>{
                                                     fields.Add(Html.X().ModelField().Name("IdFavoritoTabla"));
                                                     fields.Add(Html.X().ModelField().Name("NombreTabla"));
                                                     fields.Add(Html.X().ModelField().Name("Descripcion"));
                                                     fields.Add(Html.X().ModelField().Name("Estado"));
                                                 }))
                                                )
                                            )
                                 )
                          .ColumnModel(columnModel =>
                            {
                                columnModel.Columns.Add(Html.X().Column().Text("Id Tabla F.").DataIndex("IdFavoritoTabla").Width(80).Hidden(true));
                                columnModel.Columns.Add(Html.X().Column().Text("Nombre").DataIndex("NombreTabla").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Descripción").DataIndex("Descripcion").Width(200));
                                columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(60).Renderer("changeEstadoTabla"));
                            })
                            .View(Html.X().GridView().TrackOver(false))
                            .Border(false).Listeners(l => l.CellDblClick.Handler = "enviarSeleccionDirectTabla(record.data.IdFavoritoTabla,record.data.Descripcion);")
                            .Listeners(l => l.CellClick.Handler = "setSeleccionTabla(record.data.IdFavoritoTabla,record.data.Descripcion);")
                            .BottomBar(bar => bar.Add(Html.X().PagingToolbar()))).CloseAction(CloseAction.Destroy)
)

@(
 X.KeyNav()
    .Target("WindowSelecTabla")
    .Enter(a => a.Handler = "accionBuscarFiltroTabla('FILTRO');")
)