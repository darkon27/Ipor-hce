@model SoluccionSalud.Entidades.Entidades.VW_ATENCIONPACIENTE_GENERAL

@{
    var X = Html.X();
    var funcionX = "alert('XXXXXXXXX');";
    var modoDesc = 
        (Model.Accion == "NUEVO" ? "Nuevo" :

        (Model.Accion == "UPDATE" ? "Modificar" :
        (Model.Accion == "DELETE" ? "Eliminar" :
        (Model.Accion == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = 
        !(Model.Accion == "NUEVO" ? true :
        (Model.Accion == "UPDATE" ? true :
        (Model.Accion == "DELETE" ? false :
        (Model.Accion == "VER" ? false : false))));

    var indicaModoLecturaKey = 
        !(Model.Accion == "NUEVO" ? true :
        (Model.Accion == "UPDATE" ? false :
        (Model.Accion == "DELETE" ? false :
        (Model.Accion == "VER" ? false : false))));
}

<script>
    var template = 'color:{0};';

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";


    var change = function (value, meta) {
        return value;

    };

    var validarCampo = function (componente) {
        if (componente.getValue() != null) {
            if (componente.getValue().trim() == 0) {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

            } else {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_DEF);
            }
        } else {
            componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

        }
    };

    function seleccionadorCuerpoHumano() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorCuerpoHumano"))',
            params: {
                accionSeleccion: 'getSeleccionPadreMaestroCuerpoHumano',
                accionListado: 'LISTARPAG'
            }
        });
    };

    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente el usuario.',
                accion: null
            }
        });
    };

    var onSuccess = function (data) {
        accionMensajes(data);
    };

    var onFailure = function (modo) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length>0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };

    function seleccionadorLugar() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorLugar"))',
            params: {
                AccionSeleccion: 'getSeleccionadorLugar',
                AccionListado: 'COMBOSGENERICOS'
            }
        });
    };

    function validarCantidadPac(objPac, valorPac, valorCombo) {
        if (valorCombo == "D") {
            if (valorPac.length > 8) {
                objPac.setValue(valorPac.substring(0, 8));
                return;
            }
        }
        if (valorCombo == "R") {
            if (valorPac.length > 11) {
                objPac.setValue(valorPac.substring(0, 11));
                return;
            }
        }
    };

    function seleccionadorPersonas() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorPersonas"))',
            params: {
                accionSeleccion: 'getSeleccionadorPersonas',
                accionListado: 'LISTARPAG'
            }
        });
    };
</script>

@(Html.X().Window()
    .Width(700)
    .Height(210)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowCuerpoHumano")
    .Title("Asignación de Médico")
    .Padding(4)
    .Items(
        Html.X().FormPanel().ID("FormPanel1").Frame(false).Border(false).AutoScroll(true).Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
            Html.X().FormPanel().Frame(false).Border(false).Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
            .Items(
                Html.X().FormPanel().Layout(LayoutType.Form).Width(800).FieldDefaults(d => { d.LabelWidth = 100; }).BodyPadding(10).Frame(false).Border(false)
                .Items(
                    
                               X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                            .Items(
                                        X.DateFieldFor(m => m.FechaAtencion).Format("dd/MM/yyyy").Width(230)
                                    .FieldLabel("Fecha de Atención")
                                      .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })

                                    .Value(Model.FechaAtencion),
                                    X.Component().Width(50),
                                    X.TimeFieldFor(m => m.Cama).Format("H:mm:ss").Width(230)
                                    .FieldLabel("Hora de Atención")
                                    .EnableKeyEvents(true)//.MaskRe("/^([A-Za-zÑñáéíóúÁÉÍÓÚ ]+)$/")  //Hace que funcione el evento KeyPress y otros mas
                                  .Listeners(l => { l.Change.Handler = "setIndicaCambios(true); ReplaceCaracterEspec(this)"; })

                            ), X.Container().Layout(LayoutType.HBox).MarginSpec("05 05 05 00")
                                .Defaults(d => { d.Add(new Parameter("LabelWidth", "120")); })
                                                  .Items(
                         X.TextFieldFor(c => c.EpisodioClinico).FieldLabel("Nombre Paciente").LabelWidth(105).ReadOnly(true).Hidden(true),
                          X.TextFieldFor(c => c.CodigoOA).FieldLabel("Nombre Paciente").LabelWidth(105).ReadOnly(true).Hidden(true),
                           X.TextFieldFor(c => c.IdPaciente).FieldLabel("Nombre Paciente").LabelWidth(105).ReadOnly(true).Hidden(true)
                        )

                )
            ),
            Html.X().FormPanel().Layout(LayoutType.Form).Width(500).FieldDefaults(d => { d.LabelWidth = 120; }).BodyPadding(10).Frame(false).Border(false)
            .Items(
                Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                    ),
                    X.TextArea().ID("taAlerts")
                    .Border(false)
                    .StyleSpec("background:white;border:1px solid gray;")
                    .FieldStyle("color: red")
                    .Hidden(true)
                    .ReadOnly(indicaModoLectura)
        )
        .TopBar(
        X.Toolbar().Height(30)
        .Items(
        X.ToolbarFill(),
        X.Button().Hidden((Model.Accion == "VER" ? true : false)).ID("btnSave")
        .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
        .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave)).DirectEvents(de =>
        {
            de.Click.Url = Url.Action("save_Paciente_medico");
            de.Click.EventMask.ShowMask = true;
            de.Click.Before = "App.btnSave.setDisabled(true); " + "beforeSave(App.FormPanel1); return App.FormPanel1.getForm().isValid(); ";
            de.Click.After = "App.btnSave.setDisabled(false); ";
            de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
            de.Click.ExtraParams.Add(new Parameter("idWindow", "WindowCuerpoHumano", ParameterMode.Value));
 
            de.Click.Success = "onSuccess(result.data);";
            de.Click.Failure = "onFailure('" + Model.Accion + "');";
        }),
            X.Button().Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar")).Handler("App.WindowCuerpoHumano.close()")
        .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel))
        //.DirectEvents(de =>
        //{
        //    de.Click.Url = Url.Action("cerrarWindow");
        //    de.Click.ExtraParams.Add(new Parameter("id", "WindowCuerpoHumano", ParameterMode.Value));
        //})
        ,
        X.ToolbarSpacer(20)
        )
        )
    )

)

