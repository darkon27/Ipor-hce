@model SoluccionSalud.Entidades.Entidades.VW_PERSONAPACIENTE

@{
    var X = Html.X();
    var funcionX = "alert('XXXXXXXXX');";
    var modoDesc =
        (Model.ACCION == "NUEVO" ? "Nuevo" :
        (Model.ACCION == "UPDATE" ? "Modificar" :
        (Model.ACCION == "DELETE" ? "Eliminar" :
        (Model.ACCION == "VER" ? "Ver" : "--"))));

    var indicaModoLectura =
        !(Model.ACCION == "NUEVO" ? true :
        (Model.ACCION == "UPDATE" ? true :
        (Model.ACCION == "DELETE" ? false :
        (Model.ACCION == "VER" ? false : false))));

    var indicaModoLecturaKey =
        !(Model.ACCION == "NUEVO" ? true :
        (Model.ACCION == "UPDATE" ? false :
        (Model.ACCION == "DELETE" ? false :
        (Model.ACCION == "VER" ? false : false))));
}

<script>
    var template = 'color:{0};';

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";


    var change = function (value, meta) {
        return value;

    };

    var validarCampo = function (componente) {
        if (componente.getValue() != null) {
            if (componente.getValue().trim() == 0) {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

            } else {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_DEF);
            }
        } else {
            componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);
        }
    };

    function seleccionadorCuerpoHumano() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorCuerpoHumano"))',
            params: {
                accionSeleccion: 'getSeleccionPadreMaestroCuerpoHumano',
                accionListado: 'LISTARPAG'
            }
        });
    };

    function modificarSelected2() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("PacienteTriaje"))',
            params: {
                AccionSeleccion: 'getSeleccionadorLugar',
                AccionListado: 'COMBOSGENERICOS'
            }
        });
    }

    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente el usuario.',
                accion: null
            }
        });
    };

    var onSuccess = function (data) {
        accionMensajes(data);
    };

    var onFailure = function (modo) {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };

    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "*" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };

    var getInvalidFields = function (form) {
        var invalidFields = new Array();
        var fields = form.getForm().getFields();
        fields.filterBy(function (field) {
            if (!field.isValid()) {
                var VW_SS_HC_TABLAFORMATO_VALIDACION = {
                    NombreCampo: field.name,
                    IdEvento: (field.isValid() ? 1 : 0),
                    ValorTexto: field.name + ': ' + field.getErrors()
                };
                invalidFields.push(VW_SS_HC_TABLAFORMATO_VALIDACION);
            }
        });
        return invalidFields;
    };

    var beforeSave = function (form) {
        var FieldsInvalidos = getInvalidFields(form);
        if (!form.getForm().isValid()) {
            if (FieldsInvalidos.length > 0) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("addRecursosValidacion"))',
                    params: {
                        data: FieldsInvalidos,
                        indica: 'VALIDAR',
                    },
                    success: function (result) {
                        accionMensajes(result.data);
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("addRecursosValidacion"))',
                            params: {
                                data: FieldsInvalidos,
                                indica: 'RESTART',
                            }
                        });
                    }
                });

            }
        }
    };

    function seleccionadorTriaje() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("PacienteTriaje"))',
            params: {
                AccionSeleccion: 'getSeleccionadorLugar',
                AccionListado: 'COMBOSGENERICOS'
            }
        });
    };

    function validarCantidadPac(objPac, valorPac, valorCombo) {
        if (valorCombo == "D") {
            if (valorPac.length > 8) {
                objPac.setValue(valorPac.substring(0, 8));
                return;
            }
        }
        if (valorCombo == "R") {
            if (valorPac.length > 11) {
                objPac.setValue(valorPac.substring(0, 11));
                return;
            }
        }
    };

    function seleccionadorPersonas() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorPersonas"))',
            params: {
                accionSeleccion: 'getSeleccionadorPersonas',
                accionListado: 'LISTARPAG'
            }
        });
    };
</script>

@(Html.X().Window()
    .Width(700)
    .Height(510)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID("WindowPanelTriaje")
    .Title("Registro de Triaje")
    .Padding(4)


        .Items(

                X.GridPanel().Border(false).Scroll(ScrollMode.Both).AutoScroll(true).ID("GridPanel2").Margins("0 0 0 0")
                .TopBar(
                X.Toolbar()

                .Items(
                    X.FieldSet().Title("Filtros").MarginSpec("5 5 5 10").Defaults(d => { d.Add(new Parameter("LabelWidth", "40")); }).Width(500)
                    .Items(
                    Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                        X.Checkbox().LabelWidth(55).FieldLabel("H.C.").ID("chHCmp").Listeners(l => l.Change.Handler = "eventoCheckFiltroMed(App.chHCmp,App.tfBuscarCmp);").Checked(true),
                        X.TextField().ID("tfBuscarCmp").Disabled(true).Name("buscarCmp").FieldLabel(""),
                        X.Checkbox().LabelWidth(80).FieldLabel("Nombre Paciente").ID("chHNMe").Listeners(l => l.Change.Handler = "eventoCheckFiltroMed(App.chHNMe,App.tfBuscarNMe);").Checked(true).MarginSpec("0 0 0 5"),
                        X.TextField().ID("tfBuscarNMe").Disabled(true).Name("buscarNMe").FieldLabel("")
                        ),

                    Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                        X.Checkbox().LabelWidth(55).FieldLabel("Documento").ID("chHRne").Listeners(l => l.Change.Handler = "eventoCheckFiltroMed(App.chHRne,App.tfBuscarRne);").Checked(true),
                        X.TextField().ID("tfBuscarRne").Disabled(true).Name("buscarRne").FieldLabel(""),
                        X.Checkbox().LabelWidth(80).FieldLabel("Sucursal").ID("chHEsp").Listeners(l => l.Change.Handler = "eventoCheckFiltroMed(App.chHEsp,App.cmbBuscarEsp);").Checked(true).MarginSpec("0 0 0 5"),
                        X.ComboBox().ID("cmbBuscarEsp").Disabled(true).Name("buscarEsp").Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("ESPECIALI")
                        .Select(d => new ListItem(d.Name, d.ID))).FieldLabel("").Editable(true).SimpleSubmit(true)),

                    Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                        X.Checkbox().LabelWidth(42).FieldLabel("Estado").ID("chHEst").Listeners(l => l.Change.Handler = "eventoCheckFiltroMed(App.chHEst,App.cmbBuscarEst);").Checked(true).Hidden(true),
                        X.ComboBox().ID("cmbBuscarEst").Disabled(true).Name("buscarEst").Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenericoTxt("ESTADOVAR")
                        .Select(d => new ListItem(d.Name, d.Codigo))).FieldLabel("").Editable(false).SimpleSubmit(true).Hidden(true))
                        ),
                    X.ToolbarFill()
                    )
                )
        /**CONFIGURAR EL STORE**/
                .Store(store => store.Add(
                    Html.X().Store().ID("Store2").AutoLoad(true).RemoteSort(false).IsPagingStore(true).RemotePaging(true).PageSize(20)
                    /**CAMBIAR DE ACUERDO A ALGÚN UN CRITERIO**/
                    .Proxy(proxy => proxy.Add(
                                Html.X().AjaxProxy().Url(Url.Action("getGrillaEspecialidadMedico")).Reader(reader => reader.Add(
                                Html.X().JsonReader().Root("data").TotalProperty("total").IDProperty("PERSONA"))))
                            )
                            .Parameters(ps => ps.Add(new
                            {
                                cmp = JRawValue.From("App.tfBuscarCmp.getValue()"),
                                nombrecompleto = JRawValue.From("App.tfBuscarNMe.getValue()"),
                                nroregespecialidad = JRawValue.From("App.tfBuscarRne.getValue()"),
                                idespecialidad = JRawValue.From("App.cmbBuscarEsp.getValue()"),
                                estado = JRawValue.From("App.cmbBuscarEst.getValue()"),
                                tipoBuscar = JRawValue.From("varTipoBuscar")
                            }))
                                .Model(model => model.Add(
                                    Html.X().Model().Fields(fields =>
                                    {
                                        fields.Add(Html.X().ModelField().Name("CodigoBarras"));
                                        fields.Add(Html.X().ModelField().Name("PersonaAnt"));
                                        fields.Add(Html.X().ModelField().Name("TipoDocumento"));
                                        fields.Add(Html.X().ModelField().Name("Documento"));
                                        fields.Add(Html.X().ModelField().Name("Nombres"));
                                        fields.Add(Html.X().ModelField().Name("edad"));
                                        fields.Add(Html.X().ModelField().Name("FechaNacimiento"));
                                        fields.Add(Html.X().ModelField().Name("Estado"));
                                    }))
                                        )
                                        )
                        )
        /**CONFIGURAR LAS COLUMNAS**/
                        .ColumnModel(columnModel =>
                        {
                            columnModel.Columns.Add(Html.X().Column().Text("Origen").DataIndex("CodigoBarras").Width(70));
                            columnModel.Columns.Add(Html.X().Column().Text("HC").DataIndex("PersonaAnt").Width(70));
                            columnModel.Columns.Add(Html.X().Column().Text("Tipo Doc.").DataIndex("TipoDocumento").Width(100));
                            columnModel.Columns.Add(Html.X().Column().Text("Documento").DataIndex("Documento").Width(100));
                            columnModel.Columns.Add(Html.X().Column().Text("Nombre Paciente").DataIndex("Nombres").Width(180));
                            columnModel.Columns.Add(Html.X().Column().Text("Edad").DataIndex("edad").Width(60).Hidden(false));
                            columnModel.Columns.Add(Html.X().Column().Text("FechaNacimiento").DataIndex("FechaNacimiento").Width(85).Hidden(false));
                            columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(0).Renderer("changeEstado").Hidden(true));
                        })
                        .View(Html.X().GridView().TrackOver(false)).Border(false)
                        .Listeners(l => l.CellDblClick.Handler = "enviarSeleccionDirectMed(record.data);")
                        .Listeners(l => l.CellClick.Handler = "setSeleccionMed(record.data);").BottomBar(bar => bar.Add(Html.X().PagingToolbar()))
                    )
                        .TopBar(
            X.Toolbar().Height(30)
            .Items(
                X.Button().Border(true).Text("Buscar").Icon(Icon.Find).Handler("accionBuscarFiltroMed('FILTRO');"),
                X.ToolbarFill(),
                    X.Button().Text("Nuevo Paciente").Icon(Icon.Accept).Handler("seleccionadorTriaje();"),
                        X.Button().Text("Cancelar").Icon(Icon.Cancel).Handler("App.WindowPanelTriaje.close();")
                    )
                )
    .DirectEvents(de =>
    {
        de.Render.Url = Url.Action("postWindowMedico");
        de.Render.ExtraParams.Add(new Parameter("idPais", "" + Model.Pais, ParameterMode.Value));
        de.Render.ExtraParams.Add(new Parameter("idDepa", "" + Model.Departamento, ParameterMode.Value));
        de.Render.ExtraParams.Add(new Parameter("idProv", "" + Model.Provincia, ParameterMode.Value));
        de.Render.ExtraParams.Add(new Parameter("idDist", "" + Model.CodigoPostal, ParameterMode.Value));
    }).CloseAction(CloseAction.Destroy)
)

