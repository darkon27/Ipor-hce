@model SoluccionSalud.Entidades.Entidades.SS_HC_Favorito

@{
    var X = Html.X();
    var idWindow = "WindowAgente";
    var modoDesc = (Model.Accion == "NUEVO" ? "Nuevo" :
                    (Model.Accion == "UPDATE" ? "Modificar" :
                        (Model.Accion == "DELETE" ? "Eliminar" :
                            (Model.Accion == "VER" ? "Ver" : "--"))));

    var indicaModoLectura = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? true :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));

    var indicaModoLecturaKey = !(Model.Accion == "NUEVO" ? true :
                            (Model.Accion == "UPDATE" ? false :
                            (Model.Accion == "DELETE" ? false :
                            (Model.Accion == "VER" ? false : false))));

    var STYLE_BACKGROUND_NODEIT = "background: #BBD8D6"; //BBD8D6  #9FBCB9
    var COLOR_BORDER_DEFAULT = "#b5b8c8";

    var STYLE_BORDER_DEF_VALID01 =
        (Model.Descripcion != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");
    var STYLE_BORDER_DEF_VALID02 =
            (Model.IdFavorito != null ? "border-color: " + COLOR_BORDER_DEFAULT : "border-color: red");

}

<script>

    var COLOR_BLUE01 = "#284A89";
    var COLOR_GREEN01 = "#177506";
    var COLOR_RED01 = "#990000";

    var COLOR_BORDER_ERROR = "red";
    var COLOR_BORDER_DEF = "#b5b8c8";
    var COLOR_BACKGROUND_NOEDIT = "#9FBCB9";

    var change = function (value, meta) {
        return value;
    };

    var changetextbox = function (combo, agente,agentenombre,button) {
        var desabilite = combo.getValue();
        if (desabilite == 2) {
            agente.setDisabled(true);
            agentenombre.setDisabled(true);
            button.setDisabled(true);
        } else {
            agente.setDisabled(false);
            agentenombre.setDisabled(false);
            button.setDisabled(false);
        }
    };

    function seleccionadorTabla() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorTabla"))',
            params: {
                accionSeleccion: 'getSeleccionadorTabla',
                accionListado: 'LISTARPAG'
            }
        });
    };

    function seleccionadorAgente() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("seleccionadorAgente"))',
            params: {
                accionSeleccion: 'getSeleccionadorAgente',
                accionListado: 'LISTARPAG'
            }
        });
    };
    function cerrarWindow() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Se registró correctamente el Agente.',
                accion: null
            }
        });
    }


    var onSuccess = function (data) {
        if (data != null) {
            accionMensajes(data);
        }
    };

    var onFailure = function (modo) {
        App.btnSave.setDisabled(false);
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("showMensajeBox"))',
            params: {
                message: 'Un error en el evento ',
                titulo: "Error",
                tipo: 'ERROR'
            }
        });
    };
    var accionMensajes = function (data) {
        var mensajes = "";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                mensajes = mensajes + "\t *" + data[i].DESCRIPCION + "\n";
            }
            App.taAlerts.setVisible(true);
            App.taAlerts.setValue(mensajes);
        } else {
            App.taAlerts.setVisible(false);
        }

    };
    var validarCampo = function (componente) {
        if (componente.getValue() != null) {
            if (componente.getValue().trim() == 0) {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

            } else {
                componente.setFieldStyle("border-color: " + COLOR_BORDER_DEF);
            }
        } else {
            componente.setFieldStyle("border-color: " + COLOR_BORDER_ERROR);

        }
    };

    var eventoCheck = function (check, componente) {
        var checkAll = check.getValue();
        if (!checkAll) {
            componente.setDisabled(true);
            componente.setValue(null);
        } else {
            componente.setDisabled(false);
        }
    }
</script>

@(Html.X().Window()
    .Width(750)
    .Height(350)
    .Maximizable(true)
    .Modal(true)
    .OnEsc("false")
    .AutoScroll(true)
    .Layout(LayoutType.Fit)
    .CloseAction(CloseAction.Destroy)
    .Icon(Icon.ApplicationForm)
    .ID(idWindow)
        .Title("Registro de Favorito:" + modoDesc)
    .Padding(4)
    .Items(
                Html.X().FormPanel()
                             .Frame(false)
                             .Border(false)
                            .AutoScroll(true)
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Items(
                        Html.X().FormPanel()
                             .Frame(false)
                             .Border(false)
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                            .Items(
                                    Html.X().FormPanel()
                                    .Layout(LayoutType.Form)
                                    .Width(300)
                                    .FieldDefaults(d =>
                                    {
                                        d.LabelWidth = 100;
                                    })
                                    .BodyPadding(10)
                                    .Frame(false)
                                    .Border(false)
                                    .Items(
                                    X.NumberFieldFor(c => c.IdFavorito).FieldLabel("Id").Hidden(true).ReadOnly(true),
                                    X.TextFieldFor(m => m.Descripcion).ReadOnly(indicaModoLectura).FieldLabel("Descripción"),
                                    X.TextFieldFor(m => m.DescripcionExtranjera).ReadOnly(indicaModoLectura).FieldLabel("Desc. Extranjera"),
                                        X.ComboBoxFor(c => c.TipoFavorito).ID("TipoFav").Items(SoluccionSalud.Service.MiscelaneosService.SvcMiscelaneos.comboModelGenerico.GetComboGenerico("TIPOFAVORI")
                                     .Select(d => new ListItem(d.Name, d.ID))).Value(1)
                                     .Listeners(ls => ls.Select.Handler = "changetextbox(App.TipoFav,App.nfIdPadreA,App.txtDescripA,App.btnsa);")
                                     .FieldLabel("Tipo Favorito").SimpleSubmit(true).ReadOnly(true),

                                               
                               
                                        X.RadioGroupFor(m => m.Estado, new List<Radio.Config> {
                                            new Radio.Config{BoxLabel = "Activo", InputValue = "2",
                                            Checked= ( Model.Accion=="NUEVO"?true:(Model.Estado==0?true:false)) },
                                             new Radio.Config{BoxLabel = "Inactivo", InputValue = "1",
                                             Checked= ( Model.Accion=="NUEVO"?false:(Model.Estado==1?true:false))}
                                        })
                                       .FieldLabel("Estado")
                                        .AutomaticGrouping(false)


                                    ),
                                    Html.X().FormPanel()
                                    .Layout(LayoutType.Form)
                                    .Width(450)
                                    .FieldDefaults(d =>
                                    {
                                        d.LabelWidth = 100;
                                    })
                                    .BodyPadding(10)
                                    .Frame(false)
                                    .Border(false)
                                    .Items(
                                    
                                     Html.X().Container().Layout(LayoutType.HBox)
                                     .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                     .Items(
                                     X.TextFieldFor(m => m.IdFavoritoTabla).ID("nfIdPadre").Width(150).LabelWidth(50).ReadOnly(indicaModoLectura).FieldLabel("Favorito").ReadOnly(true),
                                     X.TextField().ReadOnly(indicaModoLectura).ID("txtDescrip").FieldLabel("").ReadOnly(true),
                                     X.Button().Text("...").Handler("seleccionadorTabla();")
                                     ),
                                     Html.X().Container().Layout(LayoutType.HBox)
                                     .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                     .Items(
                                     X.TextFieldFor(c => c.IdAgente).Width(150).LabelWidth(50).ID("nfIdPadreA").ReadOnly(true).FieldLabel("Agente").Hidden(true),
                                     X.TextField().FieldLabel("").ReadOnly(true).ID("txtDescripA").Hidden(true),
                                     X.Button().ID("btnsa").Text("...").Handler("seleccionadorAgente();").Hidden(true)
                                     ),
                                     Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                                     .Items(
                                     X.TextFieldFor(m => m.Version).Width(150).LabelWidth(50).ReadOnly(indicaModoLectura)  .FieldLabel("Version").Hidden(true)
                                     )
                                    )

                                ),
                                Html.X().FormPanel()
                                .Layout(LayoutType.Form)
                                .Width(500)
                                .FieldDefaults(d =>
                                 {
                                     d.LabelWidth = 150;
                                 })
                                .BodyPadding(10)
                                .Frame(false)
                                    .Border(false)
                                    .Items(

                                                X.FieldSet()

                                                    .Title("Información Adicional")
                                                    .FieldDefaults(d =>
                                                     {
                                                         d.LabelWidth = 90;
                                                         d.InputWidth = 120;
                                                     })
                                                    .Items(
                                                      Html.X().Container().Layout(LayoutType.HBox)
                                                      .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                                       .Items(
                                                            X.TextFieldFor(m => m.UsuarioCreacion).ID("tfUserCreacion").FieldLabel("Creación").ReadOnly(true),
                                                            X.DateFieldFor(m => m.FechaCreacion).ID("dfFechaCreacion").Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                                                            X.TimeFieldFor(m => m.FechaCreacion).ID("dfHoraCrea").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)

                                                       ),
                                                        Html.X().Container().Layout(LayoutType.HBox)
                                                        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })

                                                        .Items(
                                                            X.TextFieldFor(m => m.UsuarioModificacion).ID("tfUserModif").FieldLabel("Modificación").ReadOnly(true),
                                                            X.DateFieldFor(m => m.FechaModificacion).ID("dfFechaModif").Format("dd/MM/yyyy").ReadOnly(true).HideLabel(true).Width(80),
                                                            X.TimeFieldFor(m => m.FechaModificacion).ID("dfHoraModif").Format("H:mm:ss").ReadOnly(true).HideLabel(true).Width(80)
                                                        )
                                                     )
                                     )
                         )
                         .TopBar(
                             X.Toolbar()
                             .Height(30)
                             .Items(
                                X.ToolbarFill(),
                                    X.Button()
                                            .Hidden((Model.Accion == "VER" ? true : false))
                                            .ID("btnGuardar")
                                            .Text((Model.Accion == "DELETE" ? "Eliminar" : "Guardar"))
                                            .Icon((Model.Accion == "DELETE" ? Icon.DatabaseDelete : Icon.DatabaseSave))
                                             .DirectEvents(de =>
                                                  { 
                                                      de.Click.Url = Url.Action("save_favorito");
                                                      de.Click.Before = "App.btnSave.setDisabled(true); ";
                                                      de.Click.After = "App.btnSave.setDisabled(false); ";
                                                      de.Click.EventMask.ShowMask = true;
                                                      de.Click.ExtraParams.Add(new Parameter("MODO", Model.Accion, ParameterMode.Value));
                                                      de.Click.ExtraParams.Add(new Parameter("idWindow", idWindow, ParameterMode.Value));
                                                      de.Click.Success = "onSuccess(result.data);";
                                                      de.Click.Failure = "onFailure('" + Model.Accion + "');";

                                                  }),
                                        X.Button()
                                            .Text((Model.Accion == "VER" ? "Aceptar" : "Cancelar"))
                                            .Icon((Model.Accion == "VER" ? Icon.Accept : Icon.Cancel)) 
                                     .DirectEvents(de =>
                                      {  
                                          de.Click.Url = Url.Action("cerrarWindow");
                                          de.Click.ExtraParams.Add(new Parameter(
                                                "id", idWindow, ParameterMode.Value));
                                      })
                                 )
                            )
        )

                       .DirectEvents(de =>
                            {
                                de.Render.Url = Url.Action("postWindowAgente_L");
                                de.Render.ExtraParams.Add(new Parameter(
                                      "idpadreagente", "" + Model.IdAgente, ParameterMode.Value));
                                de.Render.ExtraParams.Add(new Parameter(
                                      "idpadre", "" + Model.IdFavoritoTabla, ParameterMode.Value));
                            })
    .CloseAction(CloseAction.Destroy)
)
