@model SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL
@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var codigooadispensacion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.CODIGOOADISPENSACION;
   
    var valifechadispensacion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.FECHABANDEJADISPENSACION;
    var fechadispensacion = (valifechadispensacion == null ?  DateTime.Now : valifechadispensacion);
    
  //  var fechadispensacion = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.FECHABANDEJADISPENSACION != null ? SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.FECHABANDEJADISPENSACION : new DateTime() ;  
    

    var PAR_CODTRABAJADOR_LISTADO = "" + (AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("CODTRABMED") != null ?
        AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("CODTRABMED") : "08");

    var PARAM_ESPECIALIDADSELECC = (AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("ESPECIALIDADHCE_SEL") != null ?
    (int)AppSaludMVC.Controllers.UTILES_MENSAJES.getParametro_Form("ESPECIALIDADHCE_SEL") : 0);
     var PAR_TIPOTRABAJADOR = Model.TIPOTRABAJADORACTUAL;
    var indicaEsTipoTrabajadorRequeridoEpi = (PAR_TIPOTRABAJADOR == PAR_CODTRABAJADOR_LISTADO) ? true : false;
    var PAR_TIPOLISTADO = "MED_AMBULATORIO";
     var PAR_TIPOTRABAJADORREQUERIDO = "02";
     var generico = SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.IDEMPLEADO_GENERICO;
     SoluccionSalud.Entidades.Entidades.ENTITY_GLOBAL.Instance.COD_BANDEJA = "MED_DISPENSACION";



    var COLOR_RED02 = "#F05F5F";
    var COLOR_GRAY = "gray";
    var COLOR_BLUE01 = "#284A89";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ROSADO2 = "#F5A9D0";
    var COLOR_NARANJA = "#FE642E";


    var PARTICULAR = 3;
    var CPM = 6;
    var PDS = 19;
    var PPS = 5;

}

@{
    MvcResourceManager.RegisterGlobalIcon(Icon.Accept);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyEuro);
    MvcResourceManager.RegisterGlobalIcon(Icon.MoneyAdd);
}

@section cabecera
{


    <script>
        var myRenderer1 = function (value, metadata) {
            metadata.style = "background-color: green;";

            return value;
        };

        var myRenderer2 = function (value, metadata) {
            metadata.style = "background-color: yellow;";

            return value;
        };
    </script>





    <script>
    var GlobalSelect = false;
    var Valores;
    var template = '<span style="color:{0};">{1}</span>';



    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;

    }

    function LoadUrl() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ListadoAtenciones"))',
            params: {
                MODO: "Consulta",
                paciente: seleccionDataActual.IdPaciente,
                nombre: seleccionDataActual.PacienteNombre,
                codigooa: seleccionDataActual.CodigoOA
            }
        });
        StoreTasks.de
    }
    function ActivaUrl(valores) {
        if (GlobalSelect == true) {
            switch (valores) {


                case "M":
                    parent.window.location.href = ' @Url.Action("Index", "VisorReceta") ';
                    break;
                case "D":
                    parent.window.location.href = ' @Url.Action("Index", "DevolucionMedicamento") ';
                    break;
                default:
            }

        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe seleccionar un paciente.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    }

    function eventoRenderForm() {
        var kk = 110;
        var scrH = screen.height;
        var northH = (parent.App.PanelMainNorth != null ? (parent.App.PanelMainNorth.getHeight() != null ? parent.App.PanelMainNorth.getHeight() : 20) : 20);
        var southH = (parent.App.PanelMainSouth != null ? (parent.App.PanelMainSouth.getHeight() != null ? parent.App.PanelMainSouth.getHeight() : 20) : 20);
        if (southH == 0) {
            southH = 30;
        }
        var dimCentral = (scrH - (northH + southH) - kk);
        App.formactual.setHeight(dimCentral);
    }

    var ALTURADEF = screen.height;
    var indicaCambios = false;
    function setIndicaCambios(value) {
        indicaCambios = value;
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("setIndicaCambiosFormulario"))',
            params: {
                indica: (value ? 1 : 0)
            }
        });
    }

    var Valores;

    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_GREEN01 = "#177506";
    var COLOR_YELLOW02 = "#D9A407";

    var changeEstado = function (value) {

        // alert(value);
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
        if (value == 2)
            return Ext.String.format(template, COLOR_BLUE01, "Solicitado");
        if (value == 3)
            return Ext.String.format(template, COLOR_GREEN01, "Despachado");
        if (value == 4)
            return Ext.String.format(template, COLOR_RED01, "Anulado");
    };



    var changeModalidad = function (value) {
        var templateX = '<div unselectable="on" class="circulo" style="background: {0}; width: 14px; height: 14px; ">&nbsp;</div>';
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 6)
            return Ext.String.format(templateX, '@(COLOR_YELLOW02)', "");
        if (value == 5)
            return Ext.String.format(templateX, '@(COLOR_GREEN01)', "");
        if (value == 19)
            return Ext.String.format(templateX, '@(COLOR_ROSADO2)', "");
        if (value == 3)
            return Ext.String.format(templateX, '@(COLOR_NARANJA)', "");
        else
            return Ext.String.format(templateX, '@(COLOR_BLUE01)', "No especificada");
    };

    //var prepareCommands = function (grid, commands, record, row) {
    //    if (grid.getSelectionModel().hasSelection()) {
    //        var row = grid.getSelectionModel().getSelection()[0];
    //        console.log(row.get('EstadoEpiAtencion'))
    //    }

    //   if (record.get("EstadoEpiAtencion") == 0) {
    //        commands.push({
    //            command: "accept",
    //            iconCls: "icon-accept"







    //        });
    //    }
    //};

    //var prepareCellCommand = function (grid, command, record, row, col, value) {
    //    //var template = '<span style="color:{0};">{1}</span>';
    //    if (record.get("EstadoEpiAtencion") == 0) {
    //       command.iconCls = "icon-moneyeuro";
    //     //   return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
    //    }



    //};


    var COLOR_BLUE01 = "#284A89";
    var COLOR_RED01 = "#990000";
    var COLOR_YELLOW02 = "#D9A407";
    var COLOR_GREEN01 = "#177506";
    var COLOR_ORANGE01 = "#E07509";



    var changeEPS = function (value) {

        var templateX = '<div unselectable="on" class="x-grid-cell-inner " style="text-align:left;background-color: {0}; "></div>';
        var template = '<span style="font-size: 1.9em; color:{0};"> <b>&bull;</b></span>';
        if (value == 1)
            return Ext.String.format(template, COLOR_RED01, "No Coberturado");
        else if (value == 2)
            return Ext.String.format(template, COLOR_GREEN01, "Coberturado");
        else if (value == 3)
            return Ext.String.format(template, COLOR_ORANGE01, "Auditoria");
        else if (value == 4)
            return Ext.String.format(template, COLOR_YELLOW02, "Carta de Garantia");
        else
            return Ext.String.format(template, "gray", "No especificada");

    };


    var changeEstadoOA = function (value) {
        var template = '<span style="color:{0};">{1}</span>';
        if (value == 1)

            return Ext.String.format(template, COLOR_RED01, "Anulado");

        if (value == 2)

            return Ext.String.format(template, COLOR_GREEN01, "En Atención");
        if (value == 3)

            return Ext.String.format(template, COLOR_BLUE01, "Atendido");
        if (value == 0)


            //  App.GridPanel1.getSelectionModel.style("background-color: red;");
            //      App.GridPanel1.getSelectionModel().getSelection()[0].style("background-color: red;");

            return Ext.String.format(template, COLOR_YELLOW02, "Pendiente");
    };

    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "HClinica") ';
    }


    var redirect = function () {
        window.location.href = ' @Url.Action("Index", "HClinica") ';
    }



    var change = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value);
    };

    var pctChange = function (value) {
        return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
    };

    var onSuccess = function (grid, data) {
        grid.show();
        grid.getStore().loadData(data);
    };



    function deleteSelected(grid) {
        var store = grid.store,
            records = grid.selModel.getSelection();

        store.remove(records);
        store.load(true);
    }







    var RecordSelector = {
        add: function (source, destination) {
            source = source || App.GridPanel1;
            destination = destination || App.GridPanel2;
            if (source.getSelectionModel().hasSelection()) {
                var records = source.getSelectionModel().getSelection();
                //alert(records[0].data);
                alert(record.get('RecordID'));

            }
        }
    };


    var varTipoBuscar = "LOAD";

    var accionBuscarFiltro = function (tipo, fechaActual) {
        if (App.txtFecha1.getValue() == null) {
            App.txtFecha1.setValue(fechaActual);
        }
        if (App.txtFecha2.getValue() == null) {
            App.txtFecha2.setValue(fechaActual);
        }

        var fechavalida = isDate(App.txtFecha1.getValue());
        var fechavalida2 = isDate(App.txtFecha2.getValue());


        if (fechavalida == true && fechavalida2 == true) {
            var compfecha = compara_fecha(App.txtFecha1.getValue(), App.txtFecha2.getValue());

            if (compfecha == true) {
                varTipoBuscar = tipo;
                App.GridPanel1.getStore().reload();
                varTipoBuscar = 'LOAD';
            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("showMensajeNotify"))',
                    params: {
                        titulo: 'Advertencia',
                        message: 'La fecha final no debe ser menor a la inicial',
                        tipo: 'WARNING'
                    }
                });

            }
        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("showMensajeNotify"))',
                params: {
                    titulo: 'Advertencia',
                    message: 'Debe ingresar una fecha valida',
                    tipo: 'WARNING'
                }
            });

        }



    };
    function ConfirmaFinaliza() {
        Ext.Msg.confirm("Ventana de Confirmación", "¿Está seguro de finalizar Episodio Clínico?", function (btn) {
            if (btn === "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("EstadoClinico"))',
                    params: {
                        selection: "",
                        accion: "Finalizar"
                    }
                    , success: function (result) { App.GridPanel1.getStore().reload(); }
                });
            }
        })

    }
    function showResult() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Finalizar"
            }
        });
    }
    function VistaAtencion() {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("EstadoClinico"))',
            params: {
                selection: "",
                accion: "Vista"
            }
        });
    }

    function addPersonaAtencion(data) {
        var model = data;
        console.log(model);
        if (model != null) {
            if (model.Estado == 3) {
                console.log("entra al if")
                App.btnMed.setDisabled(false);
            } else {
                App.btnMed.setDisabled(true);
            }
            if (model.IdPaciente > 0) {
                seleccionDataActual = model;
                GlobalSelect = true;
            }
            var ArrayList = new Array();
            var VW_ATENCIONPACIENTEMEDICAMENTO = {
                UnidadReplicacion: model.UnidadReplicacion,
                IdEpisodioAtencion: model.IdEpisodioAtencion,
                IdPaciente: model.IdPaciente,
                EpisodioClinico: model.EpisodioClinico,
                Secuencia: model.Secuencia,
                IdUnidadMedida: model.IdUnidadMedida,
                Linea: model.Linea,
                Familia: model.Familia,
                SubFamilia: model.SubFamilia,
                TipoComponente: model.TipoComponente,
                CodigoComponente: model.CodigoComponente,
                IdVia: model.IdVia,
                Dosis: model.Dosis,
                DiasTratamiento: model.DiasTratamiento,
                Frecuencia: model.Frecuencia,
                Cantidad: model.Cantidad,
                IndicadorEPS: model.IndicadorEPS,
                TipoReceta: model.TipoReceta,
                Forma: model.Forma,
                GrupoMedicamento: model.GrupoMedicamento,
                Comentario: model.Comentario,
                IndicadorAuditoria: model.IndicadorAuditoria,
                UsuarioAuditoria: model.UsuarioAuditoria,
                FechaCreacion: model.FechaCreacion,
                Accion: model.Accion,
                Estado: model.Estado,
                Origen: model.Origen,
                NombreCompleto: model.NombreCompleto,
                IngresoFechaRegistro: model.IngresoFechaRegistro,
                IngresoAplicacionCodigo: model.IngresoAplicacionCodigo,
                IngresoUsuario: model.IngresoUsuario,

                Celular: model.Celular,
                EstadoPersona: model.EstadoPersona,
                Medicamento: model.Medicamento,

                ///////
                Cama: model.Cama,
                CodigoOA: model.CodigoOA,
                Medico: model.Medico
            };
            ArrayList.push(VW_ATENCIONPACIENTEMEDICAMENTO);
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("SelectPersonaMedicamentoEpisodioEvento"))',
                params: {
                    selection: ArrayList
                }
            });

        }
        return true;
    }

    function getFormatDate(fecha, parent) {
        var fechaForm = null;
        if (fecha != null) {
            var diaFec = fecha.getDate();
            var mmFec = fecha.getMonth() + 1;
            var yyyyFec = fecha.getFullYear();
            var diaForm = '' + diaFec;
            var mmForm = '' + mmFec;
            var yyyyForm = '' + yyyyFec;
            if (diaFec < 10) {
                diaForm = '0' + diaFec;
            }
            if (mmFec < 10) {
                mmForm = '0' + mmFec;
            }
            fechaForm = diaForm + '/' + mmForm + '/' + yyyyForm;
        }
        return fechaForm;
    };
    function setDateFormat(compo, fecha) {
        compo.setValue(getFormatDate(fecha, '99/99/9999'));
    };


    var valorEpiModo_aux = null;
    function eventoAutenticacionEpiPrevia(valores, empleado, tipoagente) {
        valorEpiModo_aux = valores;
        var idEspecialidadSelecc = null;

        var notaAutencticacion = '';


        var asignacionNecesaria = false;
        if (valores == 'A') {
            asignacionNecesaria = true;
            notaAutencticacion = notaAutencticacion + '* Se debe asignar al Personal de Salud  \n';
        }

        var esTrabRequerido = true;
        var indicaEsTrabRequeridoEpi = '@(indicaEsTipoTrabajadorRequeridoEpi)';

        if (indicaEsTrabRequeridoEpi != 'True') {
            esTrabRequerido = false;
            notaAutencticacion = notaAutencticacion + '* El tipo de trabajador debe ser el correcto \n';
        }

        if (empleado != 0 && tipoagente > 1 && esTrabRequerido && !asignacionNecesaria) {
            if (valores == 'F') {
                ConfirmaFinaliza();
            } else {
                eventoAccionEpisodio(valores);
            }
        } else {
            if (seleccionDataActual != null) {
                var ACCION_ = '';
                if (valores == 'N') {
                    ACCION_ = 'NUEVO';
                } else if (valores == 'M') {
                    ACCION_ = 'UPDATE';
                } else if (valores == 'V') {
                    ACCION_ = 'VER';
                } else if (valores == 'F') {
                    ACCION_ = 'FINALIZAR';
                } else if (valores == 'A') {
                    ACCION_ = 'ABRIR';
                }
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("AutenticacionAdicionalEnfemera"))',
                    params: {
                        MODO: ACCION_,
                        tipotrab: '',
                        trabajadorRequerido: '@(PAR_CODTRABAJADOR_LISTADO)',
                        empleadoCreador: 0,
                        mensajes: notaAutencticacion,
                        especialidad: idEspecialidadSelecc,
                        campoEvento: 'txtEventoAutenticaEpi'
                    }
                });
            }
        }
        };

        function eventoAutenticacionEpiPrevia02(valores, empleado, tipoagente) {
        valorEpiModo_aux = valores;
        var idEspecialidadSelecc = null;

        var notaAutencticacion = '';


        var asignacionNecesaria = false;
        if (valores == 'A') {
            asignacionNecesaria = true;
            notaAutencticacion = notaAutencticacion + '* Se debe asignar al Personal de Salud  \n';
        }

        var esTrabRequerido = true;
        var indicaEsTrabRequeridoEpi = '@(indicaEsTipoTrabajadorRequeridoEpi)';

        if (indicaEsTrabRequeridoEpi != 'True') {
            esTrabRequerido = false;
            notaAutencticacion = notaAutencticacion + '* El tipo de trabajador debe ser el correcto \n';
        }

        if (empleado != 0 && tipoagente > 1 && esTrabRequerido && !asignacionNecesaria) {
            if (valores == 'F') {
                ConfirmaFinaliza();
            } else {
                eventoAccionEpisodio(valores);
            }
        } else {
            if (seleccionDataActual != null) {
                var ACCION_ = '';
                if (valores == 'N') {
                    ACCION_ = 'NUEVO';
                } else if (valores == 'M') {
                    ACCION_ = 'UPDATE';
                } else if (valores == 'V') {
                    ACCION_ = 'VER';
                } else if (valores == 'F') {
                    ACCION_ = 'FINALIZAR';
                } else if (valores == 'A') {
                    ACCION_ = 'ABRIR';
                }
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("AutenticacionAdicionalEnfemera02"))',
                    params: {
                        MODO: ACCION_,
                        tipotrab: '',
                        trabajadorRequerido: '@(PAR_CODTRABAJADOR_LISTADO)',
                        empleadoCreador: 0,
                        mensajes: notaAutencticacion,
                        especialidad: idEspecialidadSelecc,
                        campoEvento: 'txtEventoAutenticaEpi'
                    }
                });
            }
        }
        };

    //function eventoAutenticacionEpiPrevia(valores) {
    //    valorEpiModo_aux = valores;

    //        if (valores == 'F') {
    //            ConfirmaFinaliza();
    //        } else {EstadoClinicoMedicamento
    //            eventoAccionEpisodio(valores);
    //        }

    //        if (seleccionDataActual != null) {

    //            var ACCION_ = '';

    //             if (valores == 'A') {
    //                ACCION_ = 'ABRIR';
    //            }

    //        }

    //};

    function eventoAutenticacionEpiSuccess() {
        if (App.txtEventoAutenticaEpi.getValue() != '') {
            if (valorEpiModo_aux != null) {
                if (valorEpiModo_aux == 'D') {
                    Ext.net.DirectMethod.request({
                            url: '@(Url.Action("EstadoClinicoMedicamento"))',
                            params: {
                                selection: '',
                                accion: ''
                            }
                            , success: function (result) {
                                ActivaUrl('D');
                            }
                        });
                } else {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("EstadoClinicoMedicamento"))',
                            params: {
                                selection: '',
                                accion: ''
                            }
                            , success: function (result) {
                                ActivaUrl('M');
                            }
                        });

                }
                valorEpiModo_aux == null;
            }
            App.txtEventoAutenticaEpi.setValue('');
        }
    };

    function eventoAccionEpisodio(valorAccion) {

        if (seleccionDataActual != null) {
            valorEpiModo_aux = valorAccion;
            if ( valorAccion == 'A') {

            } else {
                eventoEstadoClinico(valorAccion, seleccionDataActual.IdUnidadServicio);
            }
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar una Atención.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };

    function eventoSeleccionUnidadServicio(compo) {
        if (compo.getValue() != '') {
            if (valorEpiModo_aux != null) {
                eventoEstadoClinico(valorEpiModo_aux, compo.getValue());
                valorEpiModo_aux == null;
            }
            compo.setValue('');
        }
    };

    function eventoEstadoClinico(valorAccion, idUnidadServ) {
        var ACCION_ = '';
        if (valorAccion == 'N') {
            ACCION_ = 'Nuevo';
        } else if (valorAccion == 'M') {
            ACCION_ = 'UPDATE';
        } else if (valorAccion == 'V') {
            ACCION_ = 'VISTA';
        } else if (valorAccion == 'F') {
            ACCION_ = 'Finalizar';
        } else if (valorAccion == 'A') {
            ACCION_ = 'ABRIR';
        }
        var reglaAplica = false;
        if (valorAccion == 'M' || valorAccion == 'A') {
            var accionRegla = 'POSaludFirmaMedico';
            var urlRegla = '@(Url.Action("POSaludFirmaMedico"))';

            var APMiscelaneos = new Array();
            var MA_MiscelaneosDetalle = {
                ValorEntero1: 1,
                ACCION: accionRegla
            };
            APMiscelaneos.push(MA_MiscelaneosDetalle);
            Ext.net.DirectMethod.request({
                url: urlRegla,
                params: {
                    PacienteID: 0,
                    valor: 0,
                    regla: accionRegla,
                    arrays: APMiscelaneos
                },
                success: function (resultRegla) {
                    reglaAplica = mostrarAlarmaReglas(resultRegla.data);
                    if (!reglaAplica) {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("EstadoClinico"))',
                            params: {
                                selection: '',
                                accion: ACCION_,
                                idUnidadServicio: idUnidadServ
                            }
                        , success: function (result) { ActivaUrl(valorAccion); }
                        });
                    } else {
                        App.GridPanel1.getStore().reload();
                    }

                }
            });
        } else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("EstadoClinico"))',
                params: {
                    selection: '',
                    accion: ACCION_,
                    idUnidadServicio: idUnidadServ
                }
                , success: function (result) { ActivaUrl(valorAccion); }
            });
        }

    };
    function mostrarAlarmaReglas(data) {
        if (data != null) {
            if (data[0].ESTADOBOOL) {
                Ext.Msg.show({
                    title: "Advertencia Motor Reglas",
                    msg: data[0].DESCRIPCION,
                    icon: Ext.Msg.WARNING,
                    minWidth: 200,
                    buttons: Ext.Msg.OK
                });
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    function listado(valores) {

        valorEpiModo_aux = valores;
        if (valores != 'A') {
            if (seleccionDataActual != null) {
                idEmpleadoCreadorAux = seleccionDataActual.IdPersonalSalud;
                if (empleado != seleccionDataActual.IdPersonalSalud) {
                    empleadoCreadorValido = false;
                    notaAutencticacion = notaAutencticacion + '* El trabajador debe ser el mismo que creó la atención \n';
                }
            } else {
                if (seleccionDataActual != null) {
                    idEspecialidadSelecc = seleccionDataActual.IdEspecialidad;
                    var ACCION_ = '';
                    if (valores == 'N') {
                        ACCION_ = 'NUEVO';
                    } else if (valores == 'M') {
                        ACCION_ = 'UPDATE';
                    } else if (valores == 'V') {
                        ACCION_ = 'VER';
                    } else if (valores == 'F') {
                        ACCION_ = 'FINALIZAR';
                    } else if (valores == 'A') {
                        ACCION_ = 'ABRIR';
                    }
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("AutenticacionAdicional"))',
                        params: {
                            MODO: ACCION_,
                            tipotrab: '',
                            trabajadorRequerido: '@(PAR_CODTRABAJADOR_LISTADO)',
                            empleadoCreador: idEmpleadoCreadorAux,
                            mensajes: notaAutencticacion,
                            especialidad: idEspecialidadSelecc,
                            campoEvento: 'txtEventoAutenticaEpi'
                        }
                    });
                }
            }
        }


        if (seleccionDataActual != null) {
            var status = seleccionDataActual.IdPaciente;
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Generarpedido"))',
                params: {
                    MODO: 'VER',
                    idPaciente: status
                }
            });
        } else {
            Ext.Msg.show({
                title: "Advertencia",
                msg: "Debe Seleccionar un Elemento.",
                icon: Ext.Msg.WARNING,
                minWidth: 200,
                buttons: Ext.Msg.OK
            });
        }
    };


    function chkFechasActosFiltros(fechaActual) {
        var checkAll = App.chFechas.getValue();
        if (checkAll) {
            App.txtFecha1.setDisabled(true);
            App.txtFecha1.setValue(null);
            App.txtFecha2.setDisabled(true);
            App.txtFecha2.setValue(null);
        } else {
            App.txtFecha1.setValue(fechaActual);
            App.txtFecha2.setValue(fechaActual);
            App.txtFecha1.setDisabled(false);
            App.txtFecha2.setDisabled(false);
        }
    }

    function validarAgrupacion(param1, index) {
        var grid = Ext.getCmp("GridPanel1");
        if (seleccionDataActual == null) {
            seleccionDataActual = param1;
        }
        else {

            if (param1.IdPaciente != seleccionDataActual.IdPaciente) {

                if (param1.IdEpisodioAtencion != seleccionDataActual.IdEpisodioAtencion) {
                    alert("No puede seleccionar de un Episodio de Atención diferente");
                    grid.getSelectionModel().deselect(param1);

                }
                else {
                    alert("No puede seleccionar desde un Paciente diferente");
                    grid.getSelectionModel().deselect(index);

                }

            }

            // var grid = Ext.getCmp("GridPanel1");
            var cantidad = grid.getSelectionModel().getCount();

            if (cantidad == 1) {


                var selectedRecord = grid.getSelectionModel().getSelection()[0];
                var row = grid.store.indexOf(selectedRecord);

                if (row == index) {
                    seleccionDataActual = null;
                }
            }
        }
    }

    function eventoContarSeleccionados() {
        var grid = Ext.getCmp("GridPanel1");
        var cantidad = grid.getSelectionModel().getCount();

        if (cantidad < 1) {
            seleccionDataActual = null;
            alert("No hay nada :P");

        }
    }
    /**** VALIDAR FECHAS******ADD 31/03/2017***ORLANDO***/
    function isDate(txtDate) {
        var currVal = txtDate;
        if (currVal == '')
            return false;

        var rxDatePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;
        var dtArray = currVal.match(rxDatePattern);

        if (dtArray == null)
            return false;

        var dtDay = dtArray[1];
        var dtMonth = dtArray[3];
        var dtYear = dtArray[5];

        if (dtMonth < 1 || dtMonth > 12)
            return false;
        else if (dtDay < 1 || dtDay > 31)
            return false;
        else if ((dtMonth == 4 || dtMonth == 6 || dtMonth == 9 || dtMonth == 11) && dtDay == 31)
            return false;
        else if (dtMonth == 2) {
            var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));
            if (dtDay > 29 || (dtDay == 29 && !isleap))
                return false;
        }
        if (dtYear < 1900 || dtYear > 2500)
            return false;
        return true;
    }
    /**** COMPARAR FECHAS******ADD 31/03/2017***ORLANDO***/
    function compara_fecha(txtDate1, txtDate2) {

        var f = new Date();

        var currVal = txtDate1;
        var currVal2 = txtDate2;

        var cs = currVal.trim().length;
        if (currVal == '' || currVal == null || cs == 0)
            return true;

        var cs2 = currVal2.trim().length;
        if (currVal2 == '' || currVal2 == null || cs2 == 0)
            return true;

        var rxDatePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;
        var dtArray = currVal.match(rxDatePattern);

        //var rxDatePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;
        var dtArray2 = currVal2.match(rxDatePattern);


        var dtDay = dtArray[1];
        var dtMonth = dtArray[3];
        var dtYear = dtArray[5];
        var dtDay2 = dtArray2[1];
        var dtMonth2 = dtArray2[3];
        var dtYear2 = dtArray2[5];


        if (dtYear > dtYear2) {
            return false;
        }
        else {
            if (dtYear == dtYear2) {
                if (dtMonth > dtMonth2) {
                    return false;
                }
                else {
                    if (dtMonth == dtMonth2) {
                        if (dtDay > dtDay2) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    var seleccionDataActual = null;
    function setSeleccionRecord(record) {
        seleccionDataActual = record;
    }
    function LoadNoFarmaco(modo) {
        if (seleccionDataActual != null) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ListarDispensacion"))',
                params: {
                    MODO: modo,
                    paciente: seleccionDataActual.IdPaciente,
                    nombre: seleccionDataActual.PacienteNombre,
                    codigooa: seleccionDataActual.CodigoOA,
                    idoa: 1,
                    episodioclinico: seleccionDataActual.EpisodioClinico,
                    episodioatencion: 1,
                    idepisodioatencion: seleccionDataActual.IdEpisodioAtencion,
                    lineaoa: 1,
                    tipoatencion: 2,
                    tipotrabrequerido: '@(PAR_CODTRABAJADOR_LISTADO)'
                    , tipoListado: '@(PAR_TIPOLISTADO)'
                }
            });
        }
    }

    </script>
}
@section cuerpo
{


    @(Html.X().Viewport()
        .Layout(LayoutType.VBox)

        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            //l.Render.Handler = "eventoRenderForm();";
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {

            regions
                .Add(
                Html.X().FormPanel()
                 .TopBar(

                    X.Toolbar()
                        .Height(30)
                            .Items(
                                    X.TextField().Hidden(true)
                                     .ID("txtEventoContar")
                                     /*    .Listeners(l =>
                                         {
                                             l.Change.Handler = "eventoContarSeleccionados(this);";

                                         })*/
                                     ,
                                 X.Button()
                                    .Text("Buscar Pacientes")
                                    .Icon(Icon.PageWhiteFind)
                                    .Handler("accionBuscarFiltro('FILTRO',new Date());")
                                    ,



                                 X.ToolbarFill()
                                ,

                                 X.Button()
                                .ID("btnMed").Disabled(true)
                                .Text("Añadir Material")
                                .Icon(Icon.Add)
                               .Handler("eventoAutenticacionEpiPrevia02('A'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");"),

                                X.Button()
                                .ID("VerPed").Disabled(true)
                                .Text("Ver Pedido").Hidden(false)
                                .Icon(Icon.ReportPicture)
                               .Handler("LoadNoFarmaco('TODOS');")
                                ,
                                X.ToolbarSeparator(),
                                X.Button()
                                    .Text("Generar Pedido.").Disabled(true)
                                       .ID("GenerarPed")
                                    .Icon(Icon.TableEdit)
                                .Handler("eventoAutenticacionEpiPrevia('A'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");"),
                                
                                 X.ToolbarSeparator(),
                                 X.Button().Hidden(true)
                                   .Text("Devolución de Medicamentos").ID("btnDevolucion")
                                    .Icon(Icon.TableEdit).Disabled(true)
                                   .Handler("eventoAutenticacionEpiPrevia('D'," + (Model.CODPERSONA != null ? Model.CODPERSONA : 0) +
                                                            "," + (Model.TIPOAGENTE != null ? Model.TIPOAGENTE : 0) + ");")                                   
                                

                              //.DirectEvents(directEvents =>
                              //             {
                              //                 directEvents.Click.Url = "EstadoClinicoMedicamento";
                              //                 directEvents.Click.Success = "ActivaUrl('M');";
                              //                 directEvents.Click.EventMask.ShowMask = true;
                              //                 directEvents.Click.EventMask.Msg = "Loading...";
                              //                 directEvents.Click.ExtraParams.Add(new
                              //                         {
                              //                             selection = "",
                              //                             accion = ""
                              //                         });
                              //             })
                              ))

                  .ItemID("center")
                .DefaultAnchor("100%")
                .AutoScroll(true)
                .Height(340)
                .Header(false)
                .Border(true)
                .ID("formactual")
                .Listeners(l =>
                {
                    l.Render.Handler = "eventoRenderForm();";
                })
               .Items(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Filtro de Busqueda")
                               //.Border(false)
                               .MarginSpec("05 05 05 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(
                                     X.TextField().ID("txtEventoAutenticaEpi").Hidden(true)
                                    .Listeners(l =>
                                    {
                                        l.Change.Handler = "eventoAutenticacionEpiSuccess();";
                                    })
                                    ,
                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                             /*X.Checkbox()
                                               .FieldLabel("Nro HC")
                                               .ID("chHC")
                                                .Listeners(l => l.Change.Handler = @"var checkAll = #{chHC}.getValue();
                                                  if(checkAll){
                                                      #{txtHC}.setDisabled(true);
                                                      #{txtHC}.setValue(null);
                                                  }else{
                                                      #{txtHC}.setDisabled(false);
                                                  }")
                                               .Checked(true),
                                             X.TextField()
                                               .ID("txtHC")
                                               .Disabled(true),*/

                                             X.Checkbox()
                                                 .FieldLabel("Código OA")
                                                 .ID("chOA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chOA}.getValue();
                                                    if(checkAll){
                                                        #{txtCodigoOA}.setDisabled(true);
                                                        #{txtCodigoOA}.setValue(null);
                                                    }else{
                                                        #{txtCodigoOA}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                              X.TextField()
                                                 /* .Width(220)*/
                                                 .ID("txtCodigoOA")
                                                  .Value(@codigooadispensacion)
                                                 .Disabled(true),

                                           X.Component().Width(30),
                                           X.Checkbox()
                                             .FieldLabel("Fecha")
                                             .ID("chFechas")
                                              .Listeners(l => l.Change.Handler = "chkFechasActosFiltros('" + (DateTime.Now.Day < 10 ? "0" : "") + DateTime.Now.Day +
                                            "/" + (DateTime.Now.Month < 10 ? "0" : "") + DateTime.Now.Month + "/" + DateTime.Now.Year + "');")
                                             .Checked(false).ReadOnly(false),
                                           X.TextField().Plugins(X.InputMask().Mask("99/99/9999"))
                                            .ID("txtFecha1")
                                           // .Value(@fechadispensacion)
                                             .Width(75)
                                             .Value((@fechadispensacion.Day < 10 ? "0" : "") + @fechadispensacion.Day +
                                            "/" + (@fechadispensacion.Month < 10 ? "0" : "") + @fechadispensacion.Month + "/" + @fechadispensacion.Year)
                                             .Disabled(false),
                                            //////
                                            X.SplitButton()
                                            .Handler("if( this.bin[0].isVisible()){this.bin[0].hide();};")
                                            .IconUrl("~/resources/images/iconcalendext.png")
                                            .Bin(
                                                X.Panel().Width(185).Height(200).Layout(LayoutType.Fit).Floating(true)
                                                .Items(
                                                    X.DatePicker()
                                                    .Listeners(l =>
                                                    {
                                                        l.Select.Handler = "this.up('panel').hide();" +
                                                            "setDateFormat( App.txtFecha1,this.getValue() )";
                                                    })
                                                 )
                                             )
                                             .Listeners(l => l.ArrowClick.Handler =
                                                 "if( this.bin[0].isVisible()){this.bin[0].hide();}else{this.bin[0].show(); this.bin[0].alignTo(this.el);} ;  ")
                                             //////////
                                             ,
                                           X.TextField().Plugins(X.InputMask().Mask("99/99/9999"))
                                            .ID("txtFecha2")
                                            .Width(75).Value((DateTime.Now.Day < 10 ? "0" : "") + DateTime.Now.Day +
                                            "/" + (DateTime.Now.Month < 10 ? "0" : "") + DateTime.Now.Month + "/" + DateTime.Now.Year)
                                             .Disabled(false)
                                            , X.SplitButton()
                                            .Handler("if( this.bin[0].isVisible()){this.bin[0].hide();};")
                                            .IconUrl("~/resources/images/iconcalendext.png")
                                            .Bin(
                                                X.Panel().Width(185).Height(200).Layout(LayoutType.Fit).Floating(true)
                                                .Items(
                                                    X.DatePicker()
                                                    .Listeners(l =>
                                                    {
                                                        l.Select.Handler = "this.up('panel').hide();" +
                                                            "setDateFormat( App.txtFecha2,this.getValue() )";
                                                    })
                                                 )
                                             )
                                             .Listeners(l => l.ArrowClick.Handler =
                                                 "if( this.bin[0].isVisible()){this.bin[0].hide();}else{this.bin[0].show(); this.bin[0].alignTo(this.el);} ;  ")
                                         //////////
                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                               X.Checkbox()
                                                 .FieldLabel("Nro Documento")
                                                 .ID("chHCA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chHCA}.getValue();
                                                    if(checkAll){
                                                        #{txtHCA}.setDisabled(true);
                                                        #{txtHCA}.setValue(null);
                                                    }else{
                                                        #{txtHCA}.setDisabled(false);
                                                    }")
                                                 .Checked(true),

                                               X.TextField()
                                                 .ID("txtHCA")
                                                 .Disabled(true),
                                               X.Component().Width(30),


                                               X.Checkbox()
                                                 .FieldLabel("Medico")
                                                 .ID("chMED")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chMED}.getValue();
                                                    if(checkAll){
                                                        #{txtMedico}.setDisabled(true);
                                                        #{txtMedico}.setValue(null);
                                                    }else{
                                                        #{txtMedico}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                              X.TextField()
                                                  .Width(220)
                                                 .ID("txtMedico")
                                                 .Disabled(true)
                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                                X.Checkbox()
                                                 .FieldLabel("Paciente")
                                                 .ID("chPaciente")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chPaciente}.getValue();
                                                    if(checkAll){
                                                        #{txtPaciente}.setDisabled(true);
                                                        #{txtPaciente}.setValue(null);
                                                    }else{
                                                        #{txtPaciente}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                               X.TextField()
                                                 .ID("txtPaciente")
                                                 //.Width(350)
                                                 .Disabled(true),
                                              X.Component().Width(30),
                                                X.Checkbox()
                                                 .FieldLabel("Estado")
                                                 .ID("chkTipoConsulta")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chkTipoConsulta}.getValue();
                                                    if(checkAll){
                                                        #{cmbTipoConsulta}.setDisabled(true);
                                                        #{cmbTipoConsulta}.setValue(null);
                                                    }else{
                                                        #{cmbTipoConsulta}.setDisabled(false);
                                                    }")
                                                 .Checked(true),
                                               /*
                                             X.ComboBox()
                                               .ID("cmbTipoConsulta")
                                               .Width(220)
                                               .Items(
                                                  new ListItem("Atendido", "CA"), //CA -AT
                                                  new ListItem("Pendiente", "CC"), //CC -PE
                                                  new ListItem("Firmado", "FI"),
                                                  new ListItem("Pendiente", "AN")
                                                  )

                                               .Disabled(true),*/
                                               X.ComboBox()
                                                 .ID("cmbTipoConsulta").Editable(false)
                                                 .Width(220)
                                                 .Items(
                                                    //new ListItem("Anulado", 0), //CA -AT
                                                    new ListItem("Pendiente", 1), //CC -PE
                                                    new ListItem("Solicitado", 2),
                                                    new ListItem("Despachado", 3)
                                                  )
                                                 .Disabled(true)
                                       )
                                 )
                       ),
                       Html.X().Panel()
                .ItemID("center")

               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                                        .Title("Listado de Pacientes: " + Model.CONCEPTODESCRIPCION)
                                         .Scroll(ScrollMode.Both)
                                         .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
                                         .Anchor("100% 100%")
                                        .ID("GridPanel1")
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                       .Store(store => store.Add(
                                           Html.X().Store()
                                           .ID("StoreTasks")
                                       .AutoLoad(true)
                                       .RemoteSort(false)
                                       .IsPagingStore(true)
                                       .RemotePaging(false)
                                       .PageSize(10)
                                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                           .Url("GrillaListadoMedicamentoPacientes")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                           .Root("data")
                                                           .TotalProperty("total")
                                                           .IDProperty("NumeroFila")))))
                                        .Parameters(ps =>
                                        ps.Add(
                                                new
                                                {
                                                    start = 0,
                                                    limit = 10,
                                                    // txtHC = JRawValue.From("App.txtHC.getValue()"),
                                                    txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                    txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                    //txtHCA = JRawValue.From("App.txtHCA.getValue()"),
                                                    txtCodigoOA = JRawValue.From("App.txtCodigoOA.getValue()"),
                                                    txtPaciente = JRawValue.From("App.txtPaciente.getValue()"),
                                                    //tipoConsulta = "CA",
                                                    txtMedico = JRawValue.From("App.txtMedico.getValue()"),
                                                    tipoEstado = JRawValue.From("App.cmbTipoConsulta.getValue()"),
                                                    //idespecialidad = JRawValue.From("App.cmbBuscarEsp.getValue()"),
                                                    tipoBuscar = JRawValue.From("varTipoBuscar"),
                                                    txtCama = JRawValue.From("App.txtHCA.getValue()"),
                                                    //tipoListado = PAR_TIPOLISTADO
                                                }
                                            )
                                        )
                                        .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {

                                                           fields.Add(Html.X().ModelField().Name("NumeroFila").Type(ModelFieldType.Int));
                                                           /*fields.Add(Html.X().ModelField().Name("tipoListado").Type(ModelFieldType.String));*/
                                                           
                                                           fields.Add(Html.X().ModelField().Name("UnidadReplicacion"));
                                                           fields.Add(Html.X().ModelField().Name("IdEpisodioAtencion"));
                                                           fields.Add(Html.X().ModelField().Name("IdPaciente").Type(ModelFieldType.Int));
                                                           fields.Add(Html.X().ModelField().Name("EpisodioClinico"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoOA"));
                                                           fields.Add(Html.X().ModelField().Name("Persona"));
                                                           fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                                                           fields.Add(Html.X().ModelField().Name("Celular")/*.Type(ModelFieldType.Date)*/);
                                                           fields.Add(Html.X().ModelField().Name("Medico"));
                                                           fields.Add(Html.X().ModelField().Name("Cama"));
                                                           fields.Add(Html.X().ModelField().Name("IdVia"));
                                                           fields.Add(Html.X().ModelField().Name("IdUnidadMedida"));
                                                           fields.Add(Html.X().ModelField().Name("UsuarioAuditoria"));
                                                           fields.Add(Html.X().ModelField().Name("Estado"));
                                                           fields.Add(Html.X().ModelField().Name("Secuencia"));

                                                       }
                                                       )
                                                       ))))


                                       .ColumnModel(columnModel =>
                                       {
                                           columnModel.Columns.Add(Html.X().RowNumbererColumn());
                                           columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("NumeroFila").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Secuencia").DataIndex("Secuencia").Hidden(true));
                                           //columnModel.Columns.Add(Html.X().Column().Text("IDs").DataIndex("tipoListado").Hidden(true));
                                           //columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("PersonaAnt").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("UnidadReplicacion").DataIndex("UnidadReplicacion").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Numero Documento").DataIndex("UsuarioAuditoria").Width(150).Hidden(false));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdEpisodioAtencion").DataIndex("IdEpisodioAtencion").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdOrdenAtencion").DataIndex("IdVia").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("LineaOrdenAtencion").DataIndex("IdUnidadMedida").Width(100).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdPaciente").DataIndex("IdPaciente").Width(150).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio Clinico").DataIndex("EpisodioClinico").Width(100).Hidden(true));

                                           //////////////////MOSTRADOS
                                           columnModel.Columns.Add(Html.X().Column().Text("Código OA").DataIndex("CodigoOA").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Persona").DataIndex("Persona").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(250));
                                           columnModel.Columns.Add(Html.X().Column().Text("Fecha").DataIndex("Celular").Width(110)/*.Format("dd/MM/yyyy")*/.Hidden(false));
                                           /*columnModel.Columns.Add(Html.X().DateColumn().Text("Hora Hospitalización").DataIndex("CitaHora").Width(110).Format("HH:mm:ss").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Código OA").DataIndex("CodigoOA").Width(80));*/
                                           columnModel.Columns.Add(Html.X().Column().Text("Medico").DataIndex("Medico").Width(250));
                                           columnModel.Columns.Add(Html.X().Column().Text("Nombre Cama").DataIndex("Cama").Width(90).Hidden(true));

                                           columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Renderer("changeEstado").Width(90));
                                           /*columnModel.Columns.Add(Html.X().Column().Text("Codigo HC").DataIndex("CodigoHC").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("PacienteNombre").Width(210));
                                           /*columnModel.Columns.Add(Html.X().Column().Text("Origen").DataIndex("Origen").Width(90).Hidden(true));/
                                           columnModel.Columns.Add(Html.X().Column().Text("Médico").DataIndex("MedicoNombre").Width(100));
                                           columnModel.Columns.Add(Html.X().Column().Text("Componente").DataIndex("ComponenteNombre").Width(100).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Especialidad").DataIndex("NombreEspecialidad").Width(110));
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("TipoPacienteNombre").Width(90).Hidden(true));/


                                           columnModel.Columns.Add(Html.X().Column().Text("Comentario").DataIndex("Comentarios").Width(210).Hidden(true));
                                           /////////
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Atencion").DataIndex("Version").Width(100).Hidden(true));
                                           ////////////OCULTOS
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("Hora Fin").DataIndex("FechaFin").Width(70).Format("HH:mm:ss").Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Epidosio Clínico").DataIndex("EpisodioClinico").Width(95).Hidden(true));//IndicadorFallecido
                                           columnModel.Columns.Add(Html.X().Column().Text("Episodio Atención").DataIndex("IdEpisodioAtencion").Width(95).Hidden(true));//IndicadorSinCorreo
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("TipoPaciente").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Atencion").DataIndex("TipoAtencion").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("UnidadReplicacio").DataIndex("UnidadReplicacion").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdCita").DataIndex("IdCita").Width(80).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IndicadorSeguro").DataIndex("IndicadorSeguro").Width(80).Hidden(true));

                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaInicio").DataIndex("FechaInicio").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdEspecialidad").DataIndex("IdEspecialidad").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IdOrdenAtencion").DataIndex("IdOrdenAtencion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("LineaOrdenAtencion").DataIndex("LineaOrdenAtencion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaRegistro").DataIndex("FechaRegistro").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().DateColumn().Text("FechaAtencion").DataIndex("FechaAtencion").Width(50).Hidden(true));

                                           ///////////////////
                                           columnModel.Columns.Add(Html.X().Column().Text("UnidadReplicacionEC").DataIndex("UnidadReplicacionEC").Width(50).Hidden(true));
                                           ////////////////PERSONA
                                           columnModel.Columns.Add(Html.X().Column().Text("sexo").DataIndex("sexo").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("FechaNacimiento").DataIndex("FechaNacimiento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EstadoCivil").DataIndex("EstadoCivil").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("NivelInstruccion").DataIndex("NivelInstruccion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Direccion").DataIndex("Direccion").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("TipoDocumento").DataIndex("TipoDocumento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Documento").DataIndex("Documento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("ApellidoPaterno").DataIndex("ApellidoPaterno").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("ApellidoMaterno").DataIndex("ApellidoMaterno").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Nombres").DataIndex("Nombres").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("LugarNacimiento").DataIndex("LugarNacimiento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("CodigoPostal").DataIndex("CodigoPostal").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Provincia").DataIndex("Provincia").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Departamento").DataIndex("Departamento").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Telefono").DataIndex("Telefono").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("CorreoElectronico").DataIndex("CorreoElectronico").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EsPaciente").DataIndex("EsPaciente").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EsEmpresa").DataIndex("EsEmpresa").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Pais").DataIndex("Pais").Width(50).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("EstadoPersona").DataIndex("EstadoPersona").Width(50).Hidden(true));*/

                                       })
                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar().HideRefresh(true)
                                                                         .DisplayInfo(true)
                                                                         //.DisplayMsg("Displaying customers {0} - {1} of {2}")
                                                                         ))
                                       //.View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                       .Border(false)


                                      .Listeners(l => l.CellClick.Handler = "addPersonaAtencion(record.data);")
                    )
                       )
                );
        }
        )
    )

    @(X.KeyNav()
                        .Target("={document.body}")
            /*.Down(a => a.Handler = "move(#{Window1}, 'down');")
            .Home(a => a.Handler = "move(#{Window1}, 'home');")*/
                                .Enter(a => a.Handler = "accionBuscarFiltro('FILTRO',new Date());")
    )

}

