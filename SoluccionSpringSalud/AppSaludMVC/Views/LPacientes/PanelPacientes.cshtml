@using Region = Ext.Net.Region
@model SoluccionSalud.Entidades.Entidades.PERSONAMAST

@{
    ViewBag.Title = "Portal - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section cabecera
{

    <script>

        var redirect = function () {
            window.location.href = ' @Url.Action("Index", "HClinica") ';
        }

        var Valores;
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        var onSuccess = function (grid, data) {
            grid.show();
            grid.getStore().loadData(data);
        };

        function deleteSelected(grid) {
            var store = grid.store,
                records = grid.selModel.getSelection();

            store.remove(records);
            store.load(true);
        }
        
        var aRecordSelector = {
            add: function (valor) {
                var rango = valor.split('RowIndex');
                var rango = rango[1].split(':');
                var rango = rango[1].split('}');
                
                source = App.GridPanel1;
                var i = 0;
                var store = App.StoreTasks;
                var status;
                if (source.getSelectionModel().hasSelection()) {
                    var records = source.getSelectionModel().getSelection();
                    store.each(function (record) {
                        if (rango[0] == i) {
                             status = record.get('Persona');
                           // return;
                        }
                        i = i + 1;
                    }
                    );
                }
               // alert(status);
                var grid = Ext.getCmp('GridPanel1');
               // var grid = t.up('GridPanel1');
                var arraySelected = grid.getSelectionModel().getSelection();
                //assuming you have a single select, you have the record at index 0;
                var record = arraySelected[0].value;

                //alert(record);

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("SelectPaciente"))',
                    params: {
                        selection: status
                    }
                });

                /*
                 function fnStoreLoaded() {
                    var records = [];
                    App.PERFORMANCE_CRITERIA_GRID_PANEL_ID.getStore().each(function (record) {
                        if (record.data.IsSelected) {
                            records.push(record);
                        }
                    });
                */

                @*Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Edit"))',
                    params: {
                        id: e.record.data.ID,
                        field: e.field,
                        oldValue: e.originalValue,
                        newValue: e.value,
                        customer: e.record.data
                    }
                });*@
                    //alert(records[0].data);
                   // alert(valor);
                    //source.store.remove(records);
                    // destination.store.add(records);
                 
            }
        };
        var RecordSelector = {
             add: function (source, destination) {
                 source = source || App.GridPanel1;
                 destination = destination || App.GridPanel2;
                 if (source.getSelectionModel().hasSelection()) {
                     var records = source.getSelectionModel().getSelection();
                     //alert(records[0].data);
                     alert(record.get('RecordID'));
                     //source.store.remove(records);
                    // destination.store.add(records);
                 }
             }
         };
        

    </script>
    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        (function () {
            var prevWidth = 10000,
                viewPort,
                thresholdWidth = 1000,
                resizeHandler = function (width, height) {
                    var portal,
                        menu,
                        breadcrumb,
                        wide,
                        narrow,
                        north;
                    viewPort = viewPort || Ext.ComponentQuery.query("viewport")[0];

                    if (!viewPort) {
                        return;
                    }
                    narrow = width < thresholdWidth && thresholdWidth <= prevWidth;
                    wide = width >= thresholdWidth && thresholdWidth > prevWidth;

                    if (wide || narrow) {
                        Ext.suspendLayouts();
                        portal = viewPort.down("portalpanel");
                        menu = viewPort.down("#managementMenu");
                        breadcrumb = viewPort.down("#breadcrumb");

                        if (narrow) {
                            portal.items.each(function (column) {
                                column._columnWidth = column.columnWidth;
                                column.columnWidth = 1;

                                column.items.each(function (item) {
                                    item._minHeight = item.minHeight;
                                    item.minHeight = item.minHeight >= 500 ? item.minHeight : 500;
                                });
                            });

                            breadcrumb.insert(0, {
                                xtype: "button",
                                text: (menu.menu.getComponent(menu.selectedIndex || 0)).text,
                                menu: {
                                    items: menu.menu.removeAll(false),
                                    listeners: {
                                        click: function (menu, item) {
                                            this.up("button").setText(item.text);
                                        }
                                    }
                                }
                            });

                            menu.hide();
                            north = viewPort.down("#north");
                            north.setHeight(150);
                            north.getLayout().setActiveItem(1);
                            north.getComponent(1).add(north.getComponent(0).removeAll(false));
                        }
                        else if (wide) {
                            portal.items.each(function (column) {
                                column.columnWidth = column._columnWidth;

                                column.items.each(function (item) {
                                    item.minHeight = item._minHeight;
                                });
                            });

                            menu.menu.add(breadcrumb.getComponent(0).menu.removeAll(false));
                            breadcrumb.getComponent(0).destroy();
                            menu.show();
                            north = viewPort.down("#north");
                            north.getLayout().setActiveItem(0);
                            north.getComponent(0).add(north.getComponent(1).removeAll(false));
                            north.setHeight(100);
                        }

                        Ext.resumeLayouts(false);
                        viewPort.updateLayout();
                    }

                    prevWidth = width;
                };

            Ext.EventManager.onWindowResize(resizeHandler, window, { buffer: 100 });
            Ext.net.Bus.subscribe("App.resize", function () {
                resizeHandler(Ext.Element.getViewportWidth());
            });
        })();

    </script>
}

@section cuerpo
{
    @(Html.X().Panel()
        .Layout(LayoutType.VBox)
        .LayoutConfig(
            new VBoxLayoutConfig { Align = VBoxAlign.Stretch }
        )
        .Listeners(l =>
        {
            l.AfterLayout.BroadcastOnBus = "App.resize";
            l.AfterLayout.Single = true;
        })

        .Items(regions =>
        {
            regions.Add(Html.X().Panel()
                    .ItemID("north")
                    .Margins("0 2 0 2")
                    .Header(true)
                    .Border(false)
                    .Layout(LayoutType.Card)
                    .Items(
                             Html.X().FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Filtro de Busqueda")
                               //.Border(false)
                               .MarginSpec("0 05 0 05")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "170"));
                                   d.Add(new Parameter("DefaultAnchor", "100%"));
                                   d.Add(new Parameter("LabelAlign", "Left"));
                               })

                               .DefaultAnchor("100%")
                               .FieldDefaults(d =>
                               {
                                   d.LabelAlign = LabelAlign.Left;
                               })
                                .Items(

                                    Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                           X.Checkbox()
                                             .FieldLabel("Nro HC")
                                             .ID("chHC")
                                              .Listeners(l => l.Change.Handler = @"var checkAll = #{chHC}.getValue();
                                                if(checkAll){            
                                                    #{txtHC}.setDisabled(true);
                                                }else{
                                                    #{txtHC}.setDisabled(false);                        
                                                }")
                                             .Checked(true),
                                           X.TextField()
                                             .ID("txtHC")
                                             .Disabled(true),
                                           X.Component().Width(30),
                                           X.Checkbox()
                                             .FieldLabel("Fecha Inicio")
                                             .ID("chFechas"),
                                           X.DateField()
                                            .ID("txtFecha1")
                                             .Width(110),
                                           X.DateField()
                                            .ID("txtFecha2")
                                             .Width(110),
                                           X.Component().Width(30),
                                           X.Button()
                                             .Text("Buscar")
                                             .Icon(Icon.Find)
                                             .Width(110)
                                             
                                             .DirectEvents(directEvents =>
                                                         {
                                                             directEvents.Click.Url = "../LPacientes/GrillaListadoPacientes";
                                                             directEvents.Click.CleanRequest = true;
                                                             directEvents.Click.Method = HttpMethod.POST;
                                                            // directEvents.Click.Confirmation.ConfirmRequest = true; 
                                                             directEvents.Click.Success = "onSuccess(App.GridPanel1, result.data);";
                                                             directEvents.Click.EventMask.ShowMask = true;
                                                             directEvents.Click.EventMask.Msg = "Loading...";
                                                             directEvents.Click.ExtraParams.Add(new
                                                                    {
                                                                        start =1,
                                                                        limit = 5,
                                                                        txtHC = JRawValue.From("App.txtHC.getValue()"),
                                                                        txtFecha1 = JRawValue.From("App.txtFecha1.getValue()"),
                                                                        txtFecha2 = JRawValue.From("App.txtFecha2.getValue()"),
                                                                        txtHCA = JRawValue.From("App.txtHCA.getValue()"),
                                                                        txtCodigoOA = JRawValue.From("App.txtCodigoOA.getValue()"),
                                                                        txtPaciente = JRawValue.From("App.txtPaciente.getValue()")
                                                                    });
                                                 })
                                         ),
                                  Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                               X.Checkbox()
                                                 .FieldLabel("Nro HC Anterior")
                                                 .ID("chHCA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chHCA}.getValue();
                                                    if(checkAll){            
                                                        #{txtHCA}.setDisabled(true);
                                                    }else{
                                                        #{txtHCA}.setDisabled(false);                        
                                                    }")                                                 
                                                 .Checked(true),

                                               X.TextField()
                                                 .ID("txtHCA")
                                                 .Disabled(true),
                                               X.Component().Width(30),
                                               X.Checkbox()
                                                 .FieldLabel("Codigo OA")
                                                 .ID("chOA")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chOA}.getValue();
                                                    if(checkAll){            
                                                        #{txtCodigoOA}.setDisabled(true);
                                                    }else{
                                                        #{txtCodigoOA}.setDisabled(false);                        
                                                    }") 
                                                 .Checked(true),
                                              X.TextField()
                                                 .ID("txtCodigoOA")
                                                 .Disabled(true)
                                        ),
                                     Html.X().Container()
                                       .Layout(LayoutType.HBox)
                                       .Defaults(d =>
                                       {
                                           d.Add(new Parameter("LabelWidth", "110"));
                                       })
                                       .Items(
                                       X.Checkbox()
                                                 .FieldLabel("Paciente")
                                                 .ID("chPaciente")
                                                 .Listeners(l => l.Change.Handler = @"var checkAll = #{chPaciente}.getValue();
                                                    if(checkAll){            
                                                        #{txtPaciente}.setDisabled(true);
                                                    }else{
                                                        #{txtPaciente}.setDisabled(false);                        
                                                    }") 
                                                 .Checked(true),
                                               X.TextField()
                                                 .ID("txtPaciente")
                                                 .Width(350)
                                                 .Disabled(true)
                                       )
                                 )
                       )
                );
            regions.Add(Html.X().Panel()
                .ItemID("center")
               //.Height(600)
               .Header(false)
               .Border(false)
               .Items(
                        Html.X().GridPanel()
                                        .Title("Listado de Pacientes")
                                         .Scroll(ScrollMode.Both)
                                         .AutoScroll(true)
                                        .Layout(LayoutType.Anchor)
                // .DefaultAnchor("100%")
                                         .Anchor("100% 100%")
                // .Width(100)
                //.Width(600)
                                       // .Height(500)
                                        .ID("GridPanel1")
                                        //.Frame(true)
                //.Layout(Ext.Net.LayoutType.Auto)
                                        .Margins("0 0 2 2")
                                        .Border(false)

                                       .Store(store => store.Add(
                                           Html.X().Store()
                                                    .ID("StoreTasks")

                                       .AutoLoad(true)
                                       .RemoteSort(false)
                                       .IsPagingStore(true)
                                       .RemotePaging(true)
                                       .PageSize(5)

                                       .Proxy(proxy => proxy.Add(Html.X().AjaxProxy()
                                                           .Url("../LPacientes/GrillaListadoPacientes")
                                                           .Reader(reader => reader.Add(Html.X().JsonReader()
                                                                                                  .Root("data")
                                                                                                  .TotalProperty("total")
                                                                                                  .IDProperty("Persona")))))
                                                           //.Reader(reader => reader.Add(Html.X().JsonReader().Root("data").IDProperty("P_ID")))
                                                          // .Writer(writer => writer.Add(Html.X().JsonWriter().AllowSingle(true)))
                                      .Model(model => model.Add(Html.X().Model()
                                                       .Fields(fields =>
                                                       {

                                                           fields.Add(Html.X().ModelField().Name("Persona"));
                                                           fields.Add(Html.X().ModelField().Name("personanew"));
                                                           fields.Add(Html.X().ModelField().Name("IndicadorRegistroManual"));
                                                           fields.Add(Html.X().ModelField().Name("IngresoFechaRegistro"));
                                                           fields.Add(Html.X().ModelField().Name("FecIniDiscamec"));
                                                           fields.Add(Html.X().ModelField().Name("FecFinDiscamec"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoLDN"));
                                                           fields.Add(Html.X().ModelField().Name("TipoPersona"));
                                                           fields.Add(Html.X().ModelField().Name("CodigoLDN"));
                                                           fields.Add(Html.X().ModelField().Name("NombreCompleto"));
                                                           fields.Add(Html.X().ModelField().Name("Estado"));

                                                       })))))


                                       .ColumnModel(columnModel =>
                                       {

                                           columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("Persona").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("IDs").DataIndex("personanew").Flex(1).Hidden(true));
                                           columnModel.Columns.Add(Html.X().Column().Text("Nro").DataIndex("IndicadorRegistroManual").Width(30));
                                           columnModel.Columns.Add(Html.X().Column().Text("Fecha Cita").DataIndex("IngresoFechaRegistro").Width(100));
                                           columnModel.Columns.Add(Html.X().Column().Text("Hora Inicio").DataIndex("FecIniDiscamec").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Hora Fin").DataIndex("FecFinDiscamec").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo OA").DataIndex("CodigoLDN").Width(80));
                                           columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("TipoPersona").Width(100));
                                           columnModel.Columns.Add(Html.X().Column().Text("Codigo HC").DataIndex("CodigoLDN").Width(100));
                                           columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(300));
                                           columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(100));
                                           //columnModel.Columns.Add(Html.X().Column().Text("ID").DataIndex("Persona").Flex(1).Hidden(true));
                                           //columnModel.Columns.Add(Html.X().Column().Text("H. Inicio").DataIndex("MarcaArma").Width(50));
                                           //columnModel.Columns.Add(Html.X().Column().Text("H. Cita").DataIndex("SerieArma").Width(50));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Origen").DataIndex("Telefono").Width(80));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Tipo Paciente").DataIndex("rangoEtario").Width(100));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Codigo HC").DataIndex("CodigoBarras").Width(100));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Paciente").DataIndex("NombreCompleto").Width(300));
                                           //columnModel.Columns.Add(Html.X().Column().Text("Estado").DataIndex("Estado").Width(100));

                                       })
                                       //.SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Single))
                                       .BottomBar(bar => bar.Add(Html.X().PagingToolbar()
                                                                         .DisplayInfo(true)
                                                                         .DisplayMsg("Displaying customers {0} - {1} of {2}")))
                                       //.View(view => view.Add(Html.X().GridView()))
                                       .View(view => view.Add(Html.X().GridView().TrackOver(false)))
                                       .Border(false)
                                       //.Plugins(
                                       //     Html.X().SelectedRow().RecordID().(ls => ls.Edit.Fn = "edit")
                                      //  )
                                      //.Listeners(ls =>
                                        //    ls.SelectionChange.Handler = "selected.length && App.BookTpl.overwrite(App.DetailPanel.body, selected[0].data);"
                                        //   ) this.getSelected().id
                
                                        
                                        
                                      .Listeners(l => l.CellClick.Handler = "aRecordSelector.add(App.GridPanel1.getSelectionSubmit().getSelectionModelField().getValue());")

                                      
                                      
                                      // .Listeners(ls =>
                                      //      ls.SelectionChange.Handler = "#{DirectMethods}.LegData(App.OrderSummary.getRowsValues({selectedOnly:true}).Persona);"
                                      //  )
                    )
                );
        })
    )


    @(Html.X().Window()
            .ID("Window1")
            .Title("Registro de Pacientes")
            .Width(500)
            .Height(300)
            .Modal(true)
            .AutoRender(false)
            .Collapsible(true)
            .Maximizable(true)
            .Hidden(true)
                    .Loader(Html.X().ComponentLoader()
                            .Url("CCEP0902_ViewRegistro")
                            .Mode(LoadMode.Frame)
                            .LoadMask(lm => lm.ShowMask = true)
                            .Params(new
                                     {
                                         Eventos = "selection",
                                         //selection = new JRawValue("App.GridPanel1.getSelectionModel().selectRow(0)"),
                                         selection = new JRawValue("App.GridPanel1.getSelectionSubmit().getSelectionModelField().getValue()"),
                                         Mode = ParameterMode.Raw
                                     })
            )
    )
}